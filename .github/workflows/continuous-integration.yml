name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  AWS_SWIFT_SDK_USE_LOCAL_DEPS: 1

jobs:
  apple:
    if: github.repository == 'awslabs/aws-sdk-swift' || github.event_name == 'pull_request'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        # This matrix runs tests on iOS sim & Mac, on oldest & newest supported Xcodes
        runner:
          - macos-14
          - macos-15
        xcode:
          - Xcode_15.2
          - Xcode_16.1
        destination:
          - 'platform=iOS Simulator,OS=17.2,name=iPhone 15'
          - 'platform=iOS Simulator,OS=18.1,name=iPhone 16'
          - 'platform=tvOS Simulator,OS=17.2,name=Apple TV 4K (3rd generation) (at 1080p)'
          - 'platform=tvOS Simulator,OS=18.1,name=Apple TV 4K (3rd generation) (at 1080p)'
          - 'platform=visionOS Simulator,OS=1.0,name=Apple Vision Pro'
          - 'platform=visionOS Simulator,OS=2.1,name=Apple Vision Pro'
          - 'platform=macOS'
        exclude:
          # Don't run old macOS with new Xcode
          - runner: macos-14
            xcode: Xcode_16.1
          # Don't run new macOS with old Xcode
          - runner: macos-15
            xcode: Xcode_15.2
          # Don't run old simulators with new Xcode
          - destination: 'platform=tvOS Simulator,OS=17.2,name=Apple TV 4K (3rd generation) (at 1080p)'
            xcode: Xcode_16.1
          - destination: 'platform=iOS Simulator,OS=17.2,name=iPhone 15'
            xcode: Xcode_16.1
          - destination: 'platform=visionOS Simulator,OS=1.0,name=Apple Vision Pro'
            xcode: Xcode_16.1
          # Don't run new simulators with old Xcode
          - destination: 'platform=tvOS Simulator,OS=18.1,name=Apple TV 4K (3rd generation) (at 1080p)'
            xcode: Xcode_15.2
          - destination: 'platform=iOS Simulator,OS=18.1,name=iPhone 16'
            xcode: Xcode_15.2
          - destination: 'platform=visionOS Simulator,OS=2.1,name=Apple Vision Pro'
            xcode: Xcode_15.2
    steps:
      - name: Configure Xcode
        run: sudo xcode-select -s /Applications/${{ matrix.xcode }}.app
      - name: Install visionOS sim if needed
        if: ${{ contains(matrix.destination, 'platform=visionOS') }}
        run: |
          sudo xcodebuild -runFirstLaunch
          sudo xcrun simctl list
          sudo xcodebuild -downloadPlatform visionOS
          sudo xcodebuild -runFirstLaunch
      - name: Checkout aws-sdk-swift
        uses: actions/checkout@v4
        with:
          path: aws-sdk-swift
      - name: Checkout smithy-swift with composite action
        uses: ./aws-sdk-swift/.github/actions/checkout-smithy-swift-composite-action
        with:
          AUTOMATION_USER_SSH_PRIVATE_KEY: ${{ secrets.AUTOMATION_USER_SSH_PRIVATE_KEY }}
          STAGING_PARTNER_REPO: ${{ secrets.STAGING_PARTNER_REPO }}
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: 2-${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            2-${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties') }}
            2-${{ runner.os }}-gradle-
      - name: Cache Swift
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/.cache/org.swift.swiftpm
          key: 1-${{ runner.os }}-${{ matrix.xcode }}-${{ hashFiles('Package.swift', 'AWSSDKSwiftCLI/Package.swift') }}
          restore-keys: |
            1-${{ runner.os }}-${{ matrix.xcode }}-${{ hashFiles('Package.swift', 'AWSSDKSwiftCLI/Package.swift') }}
            1-${{ runner.os }}-${{ matrix.xcode }}-
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17
      - name: Tools Versions
        run: ./aws-sdk-swift/scripts/ci_steps/log_tool_versions.sh
      - name: Run CLI Unit Tests
        if: ${{ matrix.destination == 'platform=macOS' }}
        run: |
          cd aws-sdk-swift/AWSSDKSwiftCLI
          swift test
          cd ../SPRCLI
          unset AWS_SWIFT_SDK_USE_LOCAL_DEPS
          swift build
      - name: Prepare Protocol & Unit Tests
        run: |
          cd aws-sdk-swift
          ./scripts/ci_steps/prepare_protocol_and_unit_tests.sh
      - name: Build and Run Unit Tests
        run: |
          cd aws-sdk-swift
          set -o pipefail && \
          NSUnbufferedIO=YES xcodebuild \
            -scheme aws-sdk-swift-Package \
            -destination '${{ matrix.destination }}' \
            test 2>&1 \
            | xcbeautify
      - name: Build and Run Protocol Tests
        run: |
          cd aws-sdk-swift/codegen/
          set -o pipefail && \
          NSUnbufferedIO=YES xcodebuild \
            -scheme aws-sdk-swift-protocol-tests-Package \
            -destination '${{ matrix.destination }}' \
            test 2>&1 \
            | xcbeautify
          cd ..

  linux:
    if: github.repository == 'awslabs/aws-sdk-swift' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container: swift:${{ matrix.version }}-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - jammy
        version:
          - "5.9"
          - "6.0"
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    steps:
      - name: Checkout aws-sdk-swift
        uses: actions/checkout@v4
        with:
          path: aws-sdk-swift
      - name: Checkout smithy-swift with composite action
        uses: ./aws-sdk-swift/.github/actions/checkout-smithy-swift-composite-action
        with:
          AUTOMATION_USER_SSH_PRIVATE_KEY: ${{ secrets.AUTOMATION_USER_SSH_PRIVATE_KEY }}
          STAGING_PARTNER_REPO: ${{ secrets.STAGING_PARTNER_REPO }}
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: 2-${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            2-${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties') }}
            2-${{ runner.os }}-gradle-
      - name: Cache Swift
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/.cache/org.swift.swiftpm
          key: 1-${{ runner.os }}-swift-${{ matrix.version }}-spm-${{ hashFiles('Package.swift', 'AWSSDKSwiftCLI/Package.swift') }}
          restore-keys: |
            1-${{ runner.os }}-swift-${{ matrix.version }}-spm-${{ hashFiles('Package.swift', 'AWSSDKSwiftCLI/Package.swift') }}
            1-${{ runner.os }}-swift-${{ matrix.version }}-spm-
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17
      - name: Install OpenSSL (all OS) and which (AL2 only)
        run: ./aws-sdk-swift/scripts/ci_steps/install_native_linux_dependencies.sh
      - name: Tools Versions
        run: ./aws-sdk-swift/scripts/ci_steps/log_tool_versions.sh
      - name: Run CLI Unit Tests
        run: |
          cd aws-sdk-swift/AWSSDKSwiftCLI
          swift test
          cd ../SPRCLI
          unset AWS_SWIFT_SDK_USE_LOCAL_DEPS
          swift build
      - name: Prepare Protocol & Unit Tests
        run: |
          cd aws-sdk-swift
          ./scripts/ci_steps/prepare_protocol_and_unit_tests.sh
      - name: Build and Run Unit Tests on Linux
        run: |
          cd aws-sdk-swift
          swift test
      - name: Build and Run Protocol Tests on Linux
        run: |
          cd aws-sdk-swift/codegen/
          swift test
          cd ..
