//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import class AWSSDKIdentity.CredentialFeatureIDInterceptorProvider
import enum AWSSDKIdentity.AWSCredentialIdentityResolverError
import enum AWSSDKIdentity.AWSIdentityPropertyKeys
import enum AWSSDKIdentity.CredentialFeatureID
import enum AWSSDKIdentity.IdentityProvidingSTSClientError
import protocol AWSSDKIdentity.IdentityProvidingSTSClient
import struct AWSSDKIdentity.AWSCredentialIdentity
import struct Smithy.Attributes
import struct SmithyIdentity.StaticAWSCredentialIdentityResolver

package struct IdentityProvidingSTSClient: AWSSDKIdentity.IdentityProvidingSTSClient, Swift.Sendable {
    package init() {}

    package func assumeRoleWithCreds(creds: AWSSDKIdentity.AWSCredentialIdentity, roleARN: String, roleSessionName: String, durationSeconds: Foundation.TimeInterval, credentialFeatureIDs: [String]) async throws -> AWSSDKIdentity.AWSCredentialIdentity {
        let stsConfig = try await STSClient.STSClientConfiguration()
        stsConfig.awsCredentialIdentityResolver = SmithyIdentity.StaticAWSCredentialIdentityResolver(creds)
        let sts = STSClient(config: stsConfig)
        let out = try await sts.assumeRole(input: AssumeRoleInput(durationSeconds: Int(durationSeconds), roleArn: roleARN, roleSessionName: roleSessionName))
        guard let creds = out.credentials, let accessKey = creds.accessKeyId, let secretKey = creds.secretAccessKey else {
            throw AWSSDKIdentity.AWSCredentialIdentityResolverError.failedToResolveAWSCredentials("STSAssumeRoleAWSCredentialIdentityResolver:Failed to retrieve credentials from STS with assume role.")
        }
        var properties = Smithy.Attributes()
        if credentialFeatureIDs.last == AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_STS_ASSUME_ROLE.rawValue {
            properties.set(key: AWSSDKIdentity.AWSIdentityPropertyKeys.credentialFeatureIDs, value: credentialFeatureIDs)
        } else {
            properties.set(key: AWSSDKIdentity.AWSIdentityPropertyKeys.credentialFeatureIDs, value: credentialFeatureIDs + [AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_STS_ASSUME_ROLE.rawValue])
        }
        return AWSCredentialIdentity(accessKey: accessKey, secret: secretKey, expiration: creds.expiration, sessionToken: creds.sessionToken, properties: properties)
    }

    package func getCredentialsWithWebIdentity(region: String, roleARN: String, roleSessionName: String, webIdentityToken: String, credentialFeatureIDs: [String]) async throws -> AWSSDKIdentity.AWSCredentialIdentity {
        let stsConfig = try await STSClient.STSClientConfiguration(region: region)
        stsConfig.addInterceptorProvider(AWSSDKIdentity.CredentialFeatureIDInterceptorProvider(featureIDsToAdd: credentialFeatureIDs))
        let sts = STSClient(config: stsConfig)
        var out: AssumeRoleWithWebIdentityOutput
        do {
            out = try await sts.assumeRoleWithWebIdentity(input: AssumeRoleWithWebIdentityInput(
                roleArn: roleARN, roleSessionName: roleSessionName, webIdentityToken: webIdentityToken
            ))
        } catch is ExpiredTokenException {
            throw AWSSDKIdentity.IdentityProvidingSTSClientError.expiredTokenException
        } catch is IDPCommunicationErrorException {
            throw AWSSDKIdentity.IdentityProvidingSTSClientError.idpCommunicationErrorException
        } catch {
            throw AWSSDKIdentity.AWSCredentialIdentityResolverError.failedToResolveAWSCredentials(
                "STSWebIdentityAWSCredentialIdentityResolver: Failed to retrieve credentials from STS with web identity token."
            )
        }
        guard let creds = out.credentials, let access = creds.accessKeyId, let secret = creds.secretAccessKey else {
            throw AWSCredentialIdentityResolverError.failedToResolveAWSCredentials(
                "STSWebIdentityAWSCredentialIdentityResolver: Failed to retrieve credentials from STS with web identity token."
            )
        }
        var properties = Smithy.Attributes()
        properties.set(key: AWSSDKIdentity.AWSIdentityPropertyKeys.credentialFeatureIDs, value: credentialFeatureIDs + [AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_STS_ASSUME_ROLE_WEB_ID.rawValue])
        return AWSCredentialIdentity(
            accessKey: access, secret: secret, expiration: creds.expiration, sessionToken: creds.sessionToken, properties: properties
        )
    }
}
