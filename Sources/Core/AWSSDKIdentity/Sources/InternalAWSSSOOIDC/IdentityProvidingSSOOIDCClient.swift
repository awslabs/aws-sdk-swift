//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import class AWSSDKIdentity.CredentialFeatureIDInterceptorProvider
import protocol AWSSDKIdentity.IdentityProvidingSSOOIDCClient
import struct SmithyIdentity.BearerTokenIdentity

package struct IdentityProvidingSSOOIDCClient: AWSSDKIdentity.IdentityProvidingSSOOIDCClient {
    package init() {}

    package func createToken(region: String, clientID: String, clientSecret: String, refreshToken: String, credentialFeatureIDs: [String]) async throws -> (refreshToken: String?, SmithyIdentity.BearerTokenIdentity) {
        let ssoOIDCConfig = try await SSOOIDCClient.SSOOIDCClientConfiguration(region: region)
        ssoOIDCConfig.addInterceptorProvider(AWSSDKIdentity.CredentialFeatureIDInterceptorProvider(featureIDsToAdd: credentialFeatureIDs))
        let ssoOIDC = SSOOIDCClient(config: ssoOIDCConfig)
        let input = CreateTokenInput(clientId: clientID, clientSecret: clientSecret, grantType: "refresh_token", refreshToken: refreshToken)
        let out = try await ssoOIDC.createToken(input: input)
        let expiration = Foundation.Date().addingTimeInterval(Foundation.TimeInterval(out.expiresIn))
        let token = BearerTokenIdentity(token: out.accessToken ?? "", expiration: expiration)
        return (out.refreshToken, token)
    }
}
