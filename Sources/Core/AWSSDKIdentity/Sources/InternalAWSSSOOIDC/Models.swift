//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// You do not have sufficient access to perform this action.
internal struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be access_denied.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that a request to authorize a client with an access user session token is pending.
internal struct AuthorizationPendingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be authorization_pending.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationPendingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that the token issued by the service is expired and is no longer valid.
internal struct ExpiredTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be expired_token.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that an error from the service occurred while trying to process a request.
internal struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be server_error.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that the clientId or clientSecret in the request is invalid. For example, this can occur when a client sends an incorrect clientId or an expired clientSecret.
internal struct InvalidClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be invalid_client.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that a request contains an invalid grant. This can occur if a client makes a [CreateToken] request with an invalid grant type.
internal struct InvalidGrantException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be invalid_grant.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGrantException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that something is wrong with the input to the request. For example, a required parameter might be missing or out of range.
internal struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be invalid_request.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that the scope provided in the request is invalid.
internal struct InvalidScopeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be invalid_scope.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidScopeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that the client is making the request too frequently and is more than the service can handle.
internal struct SlowDownException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be slow_down.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SlowDownException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that the client is not currently authorized to make the request. This can happen when a clientId is not issued for a public client.
internal struct UnauthorizedClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be unauthorized_client.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

/// Indicates that the grant type in the request is not supported by the service.
internal struct UnsupportedGrantTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    internal struct Properties: Swift.Sendable {
        /// Single error code. For this exception the value will be unsupported_grant_type.
        public internal(set) var error: Swift.String? = nil
        /// Human-readable text providing additional information, used to assist the client developer in understanding the error that occurred.
        public internal(set) var error_description: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedGrantTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        error: Swift.String? = nil,
        error_description: Swift.String? = nil
    ) {
        self.properties.error = error
        self.properties.error_description = error_description
    }
}

internal struct CreateTokenInput: Swift.Sendable {
    /// The unique identifier string for the client or application. This value comes from the result of the [RegisterClient] API.
    /// This member is required.
    public var clientId: Swift.String?
    /// A secret string generated for the client. This value should come from the persisted result of the [RegisterClient] API.
    /// This member is required.
    public var clientSecret: Swift.String?
    /// Used only when calling this API for the Authorization Code grant type. The short-lived code is used to identify this authorization request.
    public var code: Swift.String?
    /// Used only when calling this API for the Authorization Code grant type. This value is generated by the client and presented to validate the original code challenge value the client passed at authorization time.
    public var codeVerifier: Swift.String?
    /// Used only when calling this API for the Device Code grant type. This short-lived code is used to identify this authorization request. This comes from the result of the [StartDeviceAuthorization] API.
    public var deviceCode: Swift.String?
    /// Supports the following OAuth grant types: Authorization Code, Device Code, and Refresh Token. Specify one of the following values, depending on the grant type that you want: * Authorization Code - authorization_code * Device Code - urn:ietf:params:oauth:grant-type:device_code * Refresh Token - refresh_token
    /// This member is required.
    public var grantType: Swift.String?
    /// Used only when calling this API for the Authorization Code grant type. This value specifies the location of the client or application that has registered to receive the authorization code.
    public var redirectUri: Swift.String?
    /// Used only when calling this API for the Refresh Token grant type. This token is used to refresh short-lived tokens, such as the access token, that might expire. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see Considerations for Using this Guide in the [IAM Identity Center OIDC API Reference](https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html).
    public var refreshToken: Swift.String?
    /// The list of scopes for which authorization is requested. The access token that is issued is limited to the scopes that are granted. If this value is not specified, IAM Identity Center authorizes all scopes that are configured for the client during the call to [RegisterClient].
    public var scope: [Swift.String]?

    public init(
        clientId: Swift.String? = nil,
        clientSecret: Swift.String? = nil,
        code: Swift.String? = nil,
        codeVerifier: Swift.String? = nil,
        deviceCode: Swift.String? = nil,
        grantType: Swift.String? = nil,
        redirectUri: Swift.String? = nil,
        refreshToken: Swift.String? = nil,
        scope: [Swift.String]? = nil
    ) {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.code = code
        self.codeVerifier = codeVerifier
        self.deviceCode = deviceCode
        self.grantType = grantType
        self.redirectUri = redirectUri
        self.refreshToken = refreshToken
        self.scope = scope
    }
}

extension CreateTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTokenInput(clientId: \(Swift.String(describing: clientId)), code: \(Swift.String(describing: code)), deviceCode: \(Swift.String(describing: deviceCode)), grantType: \(Swift.String(describing: grantType)), redirectUri: \(Swift.String(describing: redirectUri)), scope: \(Swift.String(describing: scope)), clientSecret: \"CONTENT_REDACTED\", codeVerifier: \"CONTENT_REDACTED\", refreshToken: \"CONTENT_REDACTED\")"}
}

internal struct CreateTokenOutput: Swift.Sendable {
    /// A bearer token to access Amazon Web Services accounts and applications assigned to a user.
    public var accessToken: Swift.String?
    /// Indicates the time in seconds when an access token will expire.
    public var expiresIn: Swift.Int
    /// The idToken is not implemented or supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see Considerations for Using this Guide in the [IAM Identity Center OIDC API Reference](https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html). A JSON Web Token (JWT) that identifies who is associated with the issued access token.
    public var idToken: Swift.String?
    /// A token that, if present, can be used to refresh a previously issued access token that might have expired. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see Considerations for Using this Guide in the [IAM Identity Center OIDC API Reference](https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html).
    public var refreshToken: Swift.String?
    /// Used to notify the client that the returned token is an access token. The supported token type is Bearer.
    public var tokenType: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        expiresIn: Swift.Int = 0,
        idToken: Swift.String? = nil,
        refreshToken: Swift.String? = nil,
        tokenType: Swift.String? = nil
    ) {
        self.accessToken = accessToken
        self.expiresIn = expiresIn
        self.idToken = idToken
        self.refreshToken = refreshToken
        self.tokenType = tokenType
    }
}

extension CreateTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTokenOutput(expiresIn: \(Swift.String(describing: expiresIn)), tokenType: \(Swift.String(describing: tokenType)), accessToken: \"CONTENT_REDACTED\", idToken: \"CONTENT_REDACTED\", refreshToken: \"CONTENT_REDACTED\")"}
}

extension CreateTokenInput {

    static func urlPathProvider(_ value: CreateTokenInput) -> Swift.String? {
        return "/token"
    }
}

extension CreateTokenInput {

    static func write(value: CreateTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientId"].write(value.clientId)
        try writer["clientSecret"].write(value.clientSecret)
        try writer["code"].write(value.code)
        try writer["codeVerifier"].write(value.codeVerifier)
        try writer["deviceCode"].write(value.deviceCode)
        try writer["grantType"].write(value.grantType)
        try writer["redirectUri"].write(value.redirectUri)
        try writer["refreshToken"].write(value.refreshToken)
        try writer["scope"].writeList(value.scope, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTokenOutput()
        value.accessToken = try reader["accessToken"].readIfPresent()
        value.expiresIn = try reader["expiresIn"].readIfPresent() ?? 0
        value.idToken = try reader["idToken"].readIfPresent()
        value.refreshToken = try reader["refreshToken"].readIfPresent()
        value.tokenType = try reader["tokenType"].readIfPresent()
        return value
    }
}

enum CreateTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AuthorizationPendingException": return try AuthorizationPendingException.makeError(baseError: baseError)
            case "ExpiredTokenException": return try ExpiredTokenException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidClientException": return try InvalidClientException.makeError(baseError: baseError)
            case "InvalidGrantException": return try InvalidGrantException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidScopeException": return try InvalidScopeException.makeError(baseError: baseError)
            case "SlowDownException": return try SlowDownException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            case "UnsupportedGrantTypeException": return try UnsupportedGrantTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExpiredTokenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ExpiredTokenException {
        let reader = baseError.errorBodyReader
        var value = ExpiredTokenException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SlowDownException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> SlowDownException {
        let reader = baseError.errorBodyReader
        var value = SlowDownException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedClientException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedClientException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGrantException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidGrantException {
        let reader = baseError.errorBodyReader
        var value = InvalidGrantException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationPendingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AuthorizationPendingException {
        let reader = baseError.errorBodyReader
        var value = AuthorizationPendingException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidScopeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidScopeException {
        let reader = baseError.errorBodyReader
        var value = InvalidScopeException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedGrantTypeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnsupportedGrantTypeException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedGrantTypeException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidClientException {
        let reader = baseError.errorBodyReader
        var value = InvalidClientException()
        value.properties.error = try reader["error"].readIfPresent()
        value.properties.error_description = try reader["error_description"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

internal enum SSOOIDCClientTypes {}
