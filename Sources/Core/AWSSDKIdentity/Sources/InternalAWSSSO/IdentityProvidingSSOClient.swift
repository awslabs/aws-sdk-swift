//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import enum AWSSDKIdentity.AWSCredentialIdentityResolverError
import protocol AWSSDKIdentity.IdentityProvidingSSOClient
import struct AWSSDKIdentity.AWSCredentialIdentity

package struct IdentityProvidingSSOClient: AWSSDKIdentity.IdentityProvidingSSOClient {
    package init() {}

    package func getCredentialsWithSSOToken(region: String, accessToken: String, accountID: String, roleName: String) async throws -> AWSSDKIdentity.AWSCredentialIdentity {
        let sso = try SSOClient(region: region)
        let input = GetRoleCredentialsInput(accessToken: accessToken, accountId: accountID, roleName: roleName)
        let out = try await sso.getRoleCredentials(input: input)
        guard let accessKey = out.roleCredentials?.accessKeyId, let secretKey = out.roleCredentials?.secretAccessKey else {
            throw AWSSDKIdentity.AWSCredentialIdentityResolverError.failedToResolveAWSCredentials("SSOAWSCredentialIdentityResolver: Failed to retrieve temporary credentials using SSO token.")
        }
        var expiration: Foundation.Date? = nil
        if let expiresIn = out.roleCredentials?.expiration {
            expiration = Foundation.Date().addingTimeInterval(Foundation.TimeInterval(expiresIn))
        }
        return AWSSDKIdentity.AWSCredentialIdentity(accessKey: accessKey, secret: secretKey, accountID: accountID, expiration: expiration, sessionToken: out.roleCredentials?.sessionToken)
    }
}
