//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import class AWSSDKIdentity.CredentialFeatureIDInterceptorProvider
import enum AWSSDKIdentity.AWSCredentialIdentityResolverError
import enum AWSSDKIdentity.AWSIdentityPropertyKeys
import enum AWSSDKIdentity.CredentialFeatureID
import protocol AWSSDKIdentity.IdentityProvidingSSOClient
import struct AWSSDKIdentity.AWSCredentialIdentity
import struct Smithy.Attributes

package struct IdentityProvidingSSOClient: AWSSDKIdentity.IdentityProvidingSSOClient {
    package init() {}

    package func getCredentialsWithSSOToken(region: String, accessToken: String, accountID: String, roleName: String, credentialFeatureIDs: [String]) async throws -> AWSSDKIdentity.AWSCredentialIdentity {
        let ssoConfig = try await SSOClient.SSOClientConfiguration(region: region)
        ssoConfig.addInterceptorProvider(AWSSDKIdentity.CredentialFeatureIDInterceptorProvider(featureIDsToAdd: credentialFeatureIDs))
        let sso = SSOClient(config: ssoConfig)
        let input = GetRoleCredentialsInput(accessToken: accessToken, accountId: accountID, roleName: roleName)
        let out = try await sso.getRoleCredentials(input: input)
        guard let accessKey = out.roleCredentials?.accessKeyId, let secretKey = out.roleCredentials?.secretAccessKey else {
            throw AWSSDKIdentity.AWSCredentialIdentityResolverError.failedToResolveAWSCredentials("SSOAWSCredentialIdentityResolver: Failed to retrieve temporary credentials using SSO token.")
        }
        var expiration: Foundation.Date? = nil
        if let expiresIn = out.roleCredentials?.expiration {
            expiration = Foundation.Date().addingTimeInterval(Foundation.TimeInterval(expiresIn))
        }
        var properties = Smithy.Attributes()
        if credentialFeatureIDs.last == AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_PROFILE_SSO_LEGACY.rawValue {
            properties.set(key: AWSSDKIdentity.AWSIdentityPropertyKeys.credentialFeatureIDs, value: credentialFeatureIDs + [AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_PROFILE_SSO.rawValue])
        } else if credentialFeatureIDs.last == AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_PROFILE_SSO.rawValue {
            properties.set(key: AWSSDKIdentity.AWSIdentityPropertyKeys.credentialFeatureIDs, value: credentialFeatureIDs + [AWSSDKIdentity.CredentialFeatureID.CREDENTIALS_SSO.rawValue])
        } else {
            throw AWSSDKIdentity.AWSCredentialIdentityResolverError.failedToResolveAWSCredentials("SSOAWSCredentialIdentityResolver: Invalid last feature ID found. This should never happen.")
        }
        properties.set(key: AWSSDKIdentity.AWSIdentityPropertyKeys.credentialFeatureIDs, value: credentialFeatureIDs)
        return AWSSDKIdentity.AWSCredentialIdentity(accessKey: accessKey, secret: secretKey, accountID: accountID, expiration: expiration, sessionToken: out.roleCredentials?.sessionToken, properties: properties)
    }
}
