//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// The target request is invalid.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

/// A conflict occurred.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

/// An access permissions issue occurred.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

/// An internal server error occurred.
public struct InternalServerErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

/// A service limit was exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

/// The target resource cannot be found.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

/// Too many service requests were made over the given time period.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

extension Cloud9ClientTypes {

    public enum ConnectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connectSsh
        case connectSsm
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionType] {
            return [
                .connectSsh,
                .connectSsm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connectSsh: return "CONNECT_SSH"
            case .connectSsm: return "CONNECT_SSM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Cloud9ClientTypes {
    /// Metadata that is associated with Amazon Web Services resources. In particular, a name-value pair that can be associated with an Cloud9 development environment. There are two types of tags: user tags and system tags. A user tag is created by the user. A system tag is automatically created by Amazon Web Services services. A system tag is prefixed with "aws:" and cannot be modified by the user.
    public struct Tag {
        /// The name part of a tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value part of a tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Cloud9ClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct CreateEnvironmentEC2Input {
    /// The number of minutes until the running instance is shut down after the environment has last been used.
    public var automaticStopTimeMinutes: Swift.Int?
    /// A unique, case-sensitive string that helps Cloud9 to ensure this operation completes no more than one time. For more information, see [Client Tokens](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html) in the Amazon EC2 API Reference.
    public var clientRequestToken: Swift.String?
    /// The connection type used for connecting to an Amazon EC2 environment. Valid values are CONNECT_SSH (default) and CONNECT_SSM (connected through Amazon EC2 Systems Manager). For more information, see [Accessing no-ingress EC2 instances with Amazon EC2 Systems Manager](https://docs.aws.amazon.com/cloud9/latest/user-guide/ec2-ssm.html) in the Cloud9 User Guide.
    public var connectionType: Cloud9ClientTypes.ConnectionType?
    /// The description of the environment to create.
    public var description: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The identifier for the Amazon Machine Image (AMI) that's used to create the EC2 instance. To choose an AMI for the instance, you must specify a valid AMI alias or a valid Amazon EC2 Systems Manager (SSM) path. From December 04, 2023, you will be required to include the imageId parameter for the CreateEnvironmentEC2 action. This change will be reflected across all direct methods of communicating with the API, such as Amazon Web Services SDK, Amazon Web Services CLI and Amazon Web Services CloudFormation. This change will only affect direct API consumers, and not Cloud9 console users. We recommend using Amazon Linux 2023 as the AMI to create your environment as it is fully supported. Since Ubuntu 18.04 has ended standard support as of May 31, 2023, we recommend you choose Ubuntu 22.04. AMI aliases
    ///
    /// * Amazon Linux 2: amazonlinux-2-x86_64
    ///
    /// * Amazon Linux 2023 (recommended): amazonlinux-2023-x86_64
    ///
    /// * Ubuntu 18.04: ubuntu-18.04-x86_64
    ///
    /// * Ubuntu 22.04: ubuntu-22.04-x86_64
    ///
    ///
    /// SSM paths
    ///
    /// * Amazon Linux 2: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
    ///
    /// * Amazon Linux 2023 (recommended): resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2023-x86_64
    ///
    /// * Ubuntu 18.04: resolve:ssm:/aws/service/cloud9/amis/ubuntu-18.04-x86_64
    ///
    /// * Ubuntu 22.04: resolve:ssm:/aws/service/cloud9/amis/ubuntu-22.04-x86_64
    /// This member is required.
    public var imageId: Swift.String?
    /// The type of instance to connect to the environment (for example, t2.micro).
    /// This member is required.
    public var instanceType: Swift.String?
    /// The name of the environment to create. This name is visible to other IAM users in the same Amazon Web Services account.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the environment owner. This ARN can be the ARN of any IAM principal. If this value is not specified, the ARN defaults to this environment's creator.
    public var ownerArn: Swift.String?
    /// The ID of the subnet in Amazon VPC that Cloud9 will use to communicate with the Amazon EC2 instance.
    public var subnetId: Swift.String?
    /// An array of key-value pairs that will be associated with the new Cloud9 development environment.
    public var tags: [Cloud9ClientTypes.Tag]?

    public init(
        automaticStopTimeMinutes: Swift.Int? = nil,
        clientRequestToken: Swift.String? = nil,
        connectionType: Cloud9ClientTypes.ConnectionType? = nil,
        description: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        imageId: Swift.String? = nil,
        instanceType: Swift.String? = nil,
        name: Swift.String? = nil,
        ownerArn: Swift.String? = nil,
        subnetId: Swift.String? = nil,
        tags: [Cloud9ClientTypes.Tag]? = nil
    )
    {
        self.automaticStopTimeMinutes = automaticStopTimeMinutes
        self.clientRequestToken = clientRequestToken
        self.connectionType = connectionType
        self.description = description
        self.dryRun = dryRun
        self.imageId = imageId
        self.instanceType = instanceType
        self.name = name
        self.ownerArn = ownerArn
        self.subnetId = subnetId
        self.tags = tags
    }
}

extension CreateEnvironmentEC2Input: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentEC2Input(automaticStopTimeMinutes: \(Swift.String(describing: automaticStopTimeMinutes)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), connectionType: \(Swift.String(describing: connectionType)), dryRun: \(Swift.String(describing: dryRun)), imageId: \(Swift.String(describing: imageId)), instanceType: \(Swift.String(describing: instanceType)), name: \(Swift.String(describing: name)), ownerArn: \(Swift.String(describing: ownerArn)), subnetId: \(Swift.String(describing: subnetId)), description: \"CONTENT_REDACTED\", tags: \"CONTENT_REDACTED\")"}
}

public struct CreateEnvironmentEC2Output {
    /// The ID of the environment that was created.
    public var environmentId: Swift.String?

    public init(
        environmentId: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
    }
}

extension Cloud9ClientTypes {

    public enum MemberPermissions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case readOnly
        case readWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberPermissions] {
            return [
                .readOnly,
                .readWrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .readOnly: return "read-only"
            case .readWrite: return "read-write"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateEnvironmentMembershipInput {
    /// The ID of the environment that contains the environment member you want to add.
    /// This member is required.
    public var environmentId: Swift.String?
    /// The type of environment member permissions you want to associate with this environment member. Available values include:
    ///
    /// * read-only: Has read-only access to the environment.
    ///
    /// * read-write: Has read-write access to the environment.
    /// This member is required.
    public var permissions: Cloud9ClientTypes.MemberPermissions?
    /// The Amazon Resource Name (ARN) of the environment member you want to add.
    /// This member is required.
    public var userArn: Swift.String?

    public init(
        environmentId: Swift.String? = nil,
        permissions: Cloud9ClientTypes.MemberPermissions? = nil,
        userArn: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.permissions = permissions
        self.userArn = userArn
    }
}

extension Cloud9ClientTypes {

    public enum Permissions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case owner
        case readOnly
        case readWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [Permissions] {
            return [
                .owner,
                .readOnly,
                .readWrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .owner: return "owner"
            case .readOnly: return "read-only"
            case .readWrite: return "read-write"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Cloud9ClientTypes {
    /// Information about an environment member for an Cloud9 development environment.
    public struct EnvironmentMember {
        /// The ID of the environment for the environment member.
        /// This member is required.
        public var environmentId: Swift.String?
        /// The time, expressed in epoch time format, when the environment member last opened the environment.
        public var lastAccess: Foundation.Date?
        /// The type of environment member permissions associated with this environment member. Available values include:
        ///
        /// * owner: Owns the environment.
        ///
        /// * read-only: Has read-only access to the environment.
        ///
        /// * read-write: Has read-write access to the environment.
        /// This member is required.
        public var permissions: Cloud9ClientTypes.Permissions?
        /// The Amazon Resource Name (ARN) of the environment member.
        /// This member is required.
        public var userArn: Swift.String?
        /// The user ID in Identity and Access Management (IAM) of the environment member.
        /// This member is required.
        public var userId: Swift.String?

        public init(
            environmentId: Swift.String? = nil,
            lastAccess: Foundation.Date? = nil,
            permissions: Cloud9ClientTypes.Permissions? = nil,
            userArn: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.environmentId = environmentId
            self.lastAccess = lastAccess
            self.permissions = permissions
            self.userArn = userArn
            self.userId = userId
        }
    }

}

public struct CreateEnvironmentMembershipOutput {
    /// Information about the environment member that was added.
    /// This member is required.
    public var membership: Cloud9ClientTypes.EnvironmentMember?

    public init(
        membership: Cloud9ClientTypes.EnvironmentMember? = nil
    )
    {
        self.membership = membership
    }
}

public struct DeleteEnvironmentInput {
    /// The ID of the environment to delete.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        environmentId: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
    }
}

public struct DeleteEnvironmentOutput {

    public init() { }
}

public struct DeleteEnvironmentMembershipInput {
    /// The ID of the environment to delete the environment member from.
    /// This member is required.
    public var environmentId: Swift.String?
    /// The Amazon Resource Name (ARN) of the environment member to delete from the environment.
    /// This member is required.
    public var userArn: Swift.String?

    public init(
        environmentId: Swift.String? = nil,
        userArn: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.userArn = userArn
    }
}

public struct DeleteEnvironmentMembershipOutput {

    public init() { }
}

public struct DescribeEnvironmentMembershipsInput {
    /// The ID of the environment to get environment member information about.
    public var environmentId: Swift.String?
    /// The maximum number of environment members to get information about.
    public var maxResults: Swift.Int?
    /// During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The type of environment member permissions to get information about. Available values include:
    ///
    /// * owner: Owns the environment.
    ///
    /// * read-only: Has read-only access to the environment.
    ///
    /// * read-write: Has read-write access to the environment.
    ///
    ///
    /// If no value is specified, information about all environment members are returned.
    public var permissions: [Cloud9ClientTypes.Permissions]?
    /// The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.
    public var userArn: Swift.String?

    public init(
        environmentId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        permissions: [Cloud9ClientTypes.Permissions]? = nil,
        userArn: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.permissions = permissions
        self.userArn = userArn
    }
}

public struct DescribeEnvironmentMembershipsOutput {
    /// Information about the environment members for the environment.
    public var memberships: [Cloud9ClientTypes.EnvironmentMember]?
    /// If there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
    public var nextToken: Swift.String?

    public init(
        memberships: [Cloud9ClientTypes.EnvironmentMember]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.memberships = memberships
        self.nextToken = nextToken
    }
}

public struct DescribeEnvironmentsInput {
    /// The IDs of individual environments to get information about.
    /// This member is required.
    public var environmentIds: [Swift.String]?

    public init(
        environmentIds: [Swift.String]? = nil
    )
    {
        self.environmentIds = environmentIds
    }
}

extension Cloud9ClientTypes {

    public enum EnvironmentLifecycleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentLifecycleStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Cloud9ClientTypes {
    /// Information about the current creation or deletion lifecycle state of an Cloud9 development environment.
    public struct EnvironmentLifecycle {
        /// If the environment failed to delete, the Amazon Resource Name (ARN) of the related Amazon Web Services resource.
        public var failureResource: Swift.String?
        /// Any informational message about the lifecycle state of the environment.
        public var reason: Swift.String?
        /// The current creation or deletion lifecycle state of the environment.
        ///
        /// * CREATING: The environment is in the process of being created.
        ///
        /// * CREATED: The environment was successfully created.
        ///
        /// * CREATE_FAILED: The environment failed to be created.
        ///
        /// * DELETING: The environment is in the process of being deleted.
        ///
        /// * DELETE_FAILED: The environment failed to delete.
        public var status: Cloud9ClientTypes.EnvironmentLifecycleStatus?

        public init(
            failureResource: Swift.String? = nil,
            reason: Swift.String? = nil,
            status: Cloud9ClientTypes.EnvironmentLifecycleStatus? = nil
        )
        {
            self.failureResource = failureResource
            self.reason = reason
            self.status = status
        }
    }

}

extension Cloud9ClientTypes {

    public enum ManagedCredentialsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabledByCollaborator
        case disabledByDefault
        case disabledByOwner
        case enabledByOwner
        case enabledOnCreate
        case failedRemovalByCollaborator
        case failedRemovalByOwner
        case pendingRemovalByCollaborator
        case pendingRemovalByOwner
        case pendingStartRemovalByCollaborator
        case pendingStartRemovalByOwner
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedCredentialsStatus] {
            return [
                .disabledByCollaborator,
                .disabledByDefault,
                .disabledByOwner,
                .enabledByOwner,
                .enabledOnCreate,
                .failedRemovalByCollaborator,
                .failedRemovalByOwner,
                .pendingRemovalByCollaborator,
                .pendingRemovalByOwner,
                .pendingStartRemovalByCollaborator,
                .pendingStartRemovalByOwner
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabledByCollaborator: return "DISABLED_BY_COLLABORATOR"
            case .disabledByDefault: return "DISABLED_BY_DEFAULT"
            case .disabledByOwner: return "DISABLED_BY_OWNER"
            case .enabledByOwner: return "ENABLED_BY_OWNER"
            case .enabledOnCreate: return "ENABLED_ON_CREATE"
            case .failedRemovalByCollaborator: return "FAILED_REMOVAL_BY_COLLABORATOR"
            case .failedRemovalByOwner: return "FAILED_REMOVAL_BY_OWNER"
            case .pendingRemovalByCollaborator: return "PENDING_REMOVAL_BY_COLLABORATOR"
            case .pendingRemovalByOwner: return "PENDING_REMOVAL_BY_OWNER"
            case .pendingStartRemovalByCollaborator: return "PENDING_START_REMOVAL_BY_COLLABORATOR"
            case .pendingStartRemovalByOwner: return "PENDING_START_REMOVAL_BY_OWNER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Cloud9ClientTypes {

    public enum EnvironmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case ssh
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentType] {
            return [
                .ec2,
                .ssh
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "ec2"
            case .ssh: return "ssh"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Cloud9ClientTypes {
    /// Information about an Cloud9 development environment.
    public struct Environment {
        /// The Amazon Resource Name (ARN) of the environment.
        /// This member is required.
        public var arn: Swift.String?
        /// The connection type used for connecting to an Amazon EC2 environment. CONNECT_SSH is selected by default.
        public var connectionType: Cloud9ClientTypes.ConnectionType?
        /// The description for the environment.
        public var description: Swift.String?
        /// The ID of the environment.
        public var id: Swift.String?
        /// The state of the environment in its creation or deletion lifecycle.
        public var lifecycle: Cloud9ClientTypes.EnvironmentLifecycle?
        /// Describes the status of Amazon Web Services managed temporary credentials for the Cloud9 environment. Available values are:
        ///
        /// * ENABLED_ON_CREATE
        ///
        /// * ENABLED_BY_OWNER
        ///
        /// * DISABLED_BY_DEFAULT
        ///
        /// * DISABLED_BY_OWNER
        ///
        /// * DISABLED_BY_COLLABORATOR
        ///
        /// * PENDING_REMOVAL_BY_COLLABORATOR
        ///
        /// * PENDING_REMOVAL_BY_OWNER
        ///
        /// * FAILED_REMOVAL_BY_COLLABORATOR
        ///
        /// * ENABLED_BY_OWNER
        ///
        /// * DISABLED_BY_DEFAULT
        public var managedCredentialsStatus: Cloud9ClientTypes.ManagedCredentialsStatus?
        /// The name of the environment.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the environment owner.
        /// This member is required.
        public var ownerArn: Swift.String?
        /// The type of environment. Valid values include the following:
        ///
        /// * ec2: An Amazon Elastic Compute Cloud (Amazon EC2) instance connects to the environment.
        ///
        /// * ssh: Your own server connects to the environment.
        /// This member is required.
        public var type: Cloud9ClientTypes.EnvironmentType?

        public init(
            arn: Swift.String? = nil,
            connectionType: Cloud9ClientTypes.ConnectionType? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lifecycle: Cloud9ClientTypes.EnvironmentLifecycle? = nil,
            managedCredentialsStatus: Cloud9ClientTypes.ManagedCredentialsStatus? = nil,
            name: Swift.String? = nil,
            ownerArn: Swift.String? = nil,
            type: Cloud9ClientTypes.EnvironmentType? = nil
        )
        {
            self.arn = arn
            self.connectionType = connectionType
            self.description = description
            self.id = id
            self.lifecycle = lifecycle
            self.managedCredentialsStatus = managedCredentialsStatus
            self.name = name
            self.ownerArn = ownerArn
            self.type = type
        }
    }

}

extension Cloud9ClientTypes.Environment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Environment(arn: \(Swift.String(describing: arn)), connectionType: \(Swift.String(describing: connectionType)), id: \(Swift.String(describing: id)), lifecycle: \(Swift.String(describing: lifecycle)), managedCredentialsStatus: \(Swift.String(describing: managedCredentialsStatus)), name: \(Swift.String(describing: name)), ownerArn: \(Swift.String(describing: ownerArn)), type: \(Swift.String(describing: type)), description: \"CONTENT_REDACTED\")"}
}

public struct DescribeEnvironmentsOutput {
    /// Information about the environments that are returned.
    public var environments: [Cloud9ClientTypes.Environment]?

    public init(
        environments: [Cloud9ClientTypes.Environment]? = nil
    )
    {
        self.environments = environments
    }
}

public struct DescribeEnvironmentStatusInput {
    /// The ID of the environment to get status information about.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        environmentId: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
    }
}

extension Cloud9ClientTypes {

    public enum EnvironmentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connecting
        case creating
        case deleting
        case error
        case ready
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentStatus] {
            return [
                .connecting,
                .creating,
                .deleting,
                .error,
                .ready,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connecting: return "connecting"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .error: return "error"
            case .ready: return "ready"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeEnvironmentStatusOutput {
    /// Any informational message about the status of the environment.
    /// This member is required.
    public var message: Swift.String?
    /// The status of the environment. Available values include:
    ///
    /// * connecting: The environment is connecting.
    ///
    /// * creating: The environment is being created.
    ///
    /// * deleting: The environment is being deleted.
    ///
    /// * error: The environment is in an error state.
    ///
    /// * ready: The environment is ready.
    ///
    /// * stopped: The environment is stopped.
    ///
    /// * stopping: The environment is stopping.
    /// This member is required.
    public var status: Cloud9ClientTypes.EnvironmentStatus?

    public init(
        message: Swift.String? = nil,
        status: Cloud9ClientTypes.EnvironmentStatus? = nil
    )
    {
        self.message = message
        self.status = status
    }
}

public struct ListEnvironmentsInput {
    /// The maximum number of environments to get identifiers for.
    public var maxResults: Swift.Int?
    /// During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentsOutput {
    /// The list of environment identifiers.
    public var environmentIds: [Swift.String]?
    /// If there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
    public var nextToken: Swift.String?

    public init(
        environmentIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentIds = environmentIds
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the Cloud9 development environment to get the tags for.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput {
    /// The list of tags associated with the Cloud9 development environment.
    public var tags: [Cloud9ClientTypes.Tag]?

    public init(
        tags: [Cloud9ClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension ListTagsForResourceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutput(tags: \"CONTENT_REDACTED\")"}
}

/// A concurrent access issue occurred.
public struct ConcurrentAccessException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var className: Swift.String? = nil
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentAccessException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        className: Swift.String? = nil,
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.className = className
        self.properties.code = code
        self.properties.message = message
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the Cloud9 development environment to add tags to.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of tags to add to the given Cloud9 development environment.
    /// This member is required.
    public var tags: [Cloud9ClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [Cloud9ClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tags: \"CONTENT_REDACTED\")"}
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the Cloud9 development environment to remove tags from.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The tag names of the tags to remove from the given Cloud9 development environment.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tagKeys: \"CONTENT_REDACTED\")"}
}

public struct UntagResourceOutput {

    public init() { }
}

extension Cloud9ClientTypes {

    public enum ManagedCredentialsAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disable
        case enable
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedCredentialsAction] {
            return [
                .disable,
                .enable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disable: return "DISABLE"
            case .enable: return "ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct UpdateEnvironmentInput {
    /// Any new or replacement description for the environment.
    public var description: Swift.String?
    /// The ID of the environment to change settings.
    /// This member is required.
    public var environmentId: Swift.String?
    /// Allows the environment owner to turn on or turn off the Amazon Web Services managed temporary credentials for an Cloud9 environment by using one of the following values:
    ///
    /// * ENABLE
    ///
    /// * DISABLE
    ///
    ///
    /// Only the environment owner can change the status of managed temporary credentials. An AccessDeniedException is thrown if an attempt to turn on or turn off managed temporary credentials is made by an account that's not the environment owner.
    public var managedCredentialsAction: Cloud9ClientTypes.ManagedCredentialsAction?
    /// A replacement name for the environment.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        managedCredentialsAction: Cloud9ClientTypes.ManagedCredentialsAction? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.environmentId = environmentId
        self.managedCredentialsAction = managedCredentialsAction
        self.name = name
    }
}

extension UpdateEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnvironmentInput(environmentId: \(Swift.String(describing: environmentId)), managedCredentialsAction: \(Swift.String(describing: managedCredentialsAction)), name: \(Swift.String(describing: name)), description: \"CONTENT_REDACTED\")"}
}

public struct UpdateEnvironmentOutput {

    public init() { }
}

public struct UpdateEnvironmentMembershipInput {
    /// The ID of the environment for the environment member whose settings you want to change.
    /// This member is required.
    public var environmentId: Swift.String?
    /// The replacement type of environment member permissions you want to associate with this environment member. Available values include:
    ///
    /// * read-only: Has read-only access to the environment.
    ///
    /// * read-write: Has read-write access to the environment.
    /// This member is required.
    public var permissions: Cloud9ClientTypes.MemberPermissions?
    /// The Amazon Resource Name (ARN) of the environment member whose settings you want to change.
    /// This member is required.
    public var userArn: Swift.String?

    public init(
        environmentId: Swift.String? = nil,
        permissions: Cloud9ClientTypes.MemberPermissions? = nil,
        userArn: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.permissions = permissions
        self.userArn = userArn
    }
}

public struct UpdateEnvironmentMembershipOutput {
    /// Information about the environment member whose settings were changed.
    public var membership: Cloud9ClientTypes.EnvironmentMember?

    public init(
        membership: Cloud9ClientTypes.EnvironmentMember? = nil
    )
    {
        self.membership = membership
    }
}

extension CreateEnvironmentEC2Input {

    static func urlPathProvider(_ value: CreateEnvironmentEC2Input) -> Swift.String? {
        return "/"
    }
}

extension CreateEnvironmentMembershipInput {

    static func urlPathProvider(_ value: CreateEnvironmentMembershipInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEnvironmentInput {

    static func urlPathProvider(_ value: DeleteEnvironmentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEnvironmentMembershipInput {

    static func urlPathProvider(_ value: DeleteEnvironmentMembershipInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEnvironmentMembershipsInput {

    static func urlPathProvider(_ value: DescribeEnvironmentMembershipsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEnvironmentsInput {

    static func urlPathProvider(_ value: DescribeEnvironmentsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEnvironmentStatusInput {

    static func urlPathProvider(_ value: DescribeEnvironmentStatusInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentsInput {

    static func urlPathProvider(_ value: ListEnvironmentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnvironmentInput {

    static func urlPathProvider(_ value: UpdateEnvironmentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnvironmentMembershipInput {

    static func urlPathProvider(_ value: UpdateEnvironmentMembershipInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEnvironmentEC2Input {

    static func write(value: CreateEnvironmentEC2Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["automaticStopTimeMinutes"].write(value.automaticStopTimeMinutes)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["connectionType"].write(value.connectionType)
        try writer["description"].write(value.description)
        try writer["dryRun"].write(value.dryRun)
        try writer["imageId"].write(value.imageId)
        try writer["instanceType"].write(value.instanceType)
        try writer["name"].write(value.name)
        try writer["ownerArn"].write(value.ownerArn)
        try writer["subnetId"].write(value.subnetId)
        try writer["tags"].writeList(value.tags, memberWritingClosure: Cloud9ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEnvironmentMembershipInput {

    static func write(value: CreateEnvironmentMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentId"].write(value.environmentId)
        try writer["permissions"].write(value.permissions)
        try writer["userArn"].write(value.userArn)
    }
}

extension DeleteEnvironmentInput {

    static func write(value: DeleteEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentId"].write(value.environmentId)
    }
}

extension DeleteEnvironmentMembershipInput {

    static func write(value: DeleteEnvironmentMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentId"].write(value.environmentId)
        try writer["userArn"].write(value.userArn)
    }
}

extension DescribeEnvironmentMembershipsInput {

    static func write(value: DescribeEnvironmentMembershipsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentId"].write(value.environmentId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["permissions"].writeList(value.permissions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<Cloud9ClientTypes.Permissions>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["userArn"].write(value.userArn)
    }
}

extension DescribeEnvironmentsInput {

    static func write(value: DescribeEnvironmentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentIds"].writeList(value.environmentIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeEnvironmentStatusInput {

    static func write(value: DescribeEnvironmentStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentId"].write(value.environmentId)
    }
}

extension ListEnvironmentsInput {

    static func write(value: ListEnvironmentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: Cloud9ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateEnvironmentInput {

    static func write(value: UpdateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["environmentId"].write(value.environmentId)
        try writer["managedCredentialsAction"].write(value.managedCredentialsAction)
        try writer["name"].write(value.name)
    }
}

extension UpdateEnvironmentMembershipInput {

    static func write(value: UpdateEnvironmentMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentId"].write(value.environmentId)
        try writer["permissions"].write(value.permissions)
        try writer["userArn"].write(value.userArn)
    }
}

extension CreateEnvironmentEC2Output {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentEC2Output {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentEC2Output()
        value.environmentId = try reader["environmentId"].readIfPresent()
        return value
    }
}

extension CreateEnvironmentMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentMembershipOutput()
        value.membership = try reader["membership"].readIfPresent(with: Cloud9ClientTypes.EnvironmentMember.read(from:))
        return value
    }
}

extension DeleteEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentOutput {
        return DeleteEnvironmentOutput()
    }
}

extension DeleteEnvironmentMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentMembershipOutput {
        return DeleteEnvironmentMembershipOutput()
    }
}

extension DescribeEnvironmentMembershipsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEnvironmentMembershipsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEnvironmentMembershipsOutput()
        value.memberships = try reader["memberships"].readListIfPresent(memberReadingClosure: Cloud9ClientTypes.EnvironmentMember.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEnvironmentsOutput()
        value.environments = try reader["environments"].readListIfPresent(memberReadingClosure: Cloud9ClientTypes.Environment.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeEnvironmentStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEnvironmentStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEnvironmentStatusOutput()
        value.message = try reader["message"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ListEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentsOutput()
        value.environmentIds = try reader["environmentIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: Cloud9ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentOutput {
        return UpdateEnvironmentOutput()
    }
}

extension UpdateEnvironmentMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentMembershipOutput()
        value.membership = try reader["membership"].readIfPresent(with: Cloud9ClientTypes.EnvironmentMember.read(from:))
        return value
    }
}

enum CreateEnvironmentEC2OutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEnvironmentMembershipsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEnvironmentStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentAccessException": return try ConcurrentAccessException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentAccessException": return try ConcurrentAccessException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServerErrorException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentAccessException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentAccessException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentAccessException()
        value.properties.className = try reader["className"].readIfPresent()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension Cloud9ClientTypes.EnvironmentMember {

    static func read(from reader: SmithyJSON.Reader) throws -> Cloud9ClientTypes.EnvironmentMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Cloud9ClientTypes.EnvironmentMember()
        value.permissions = try reader["permissions"].readIfPresent() ?? .sdkUnknown("")
        value.userId = try reader["userId"].readIfPresent() ?? ""
        value.userArn = try reader["userArn"].readIfPresent() ?? ""
        value.environmentId = try reader["environmentId"].readIfPresent() ?? ""
        value.lastAccess = try reader["lastAccess"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension Cloud9ClientTypes.Environment {

    static func read(from reader: SmithyJSON.Reader) throws -> Cloud9ClientTypes.Environment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Cloud9ClientTypes.Environment()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.connectionType = try reader["connectionType"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.ownerArn = try reader["ownerArn"].readIfPresent() ?? ""
        value.lifecycle = try reader["lifecycle"].readIfPresent(with: Cloud9ClientTypes.EnvironmentLifecycle.read(from:))
        value.managedCredentialsStatus = try reader["managedCredentialsStatus"].readIfPresent()
        return value
    }
}

extension Cloud9ClientTypes.EnvironmentLifecycle {

    static func read(from reader: SmithyJSON.Reader) throws -> Cloud9ClientTypes.EnvironmentLifecycle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Cloud9ClientTypes.EnvironmentLifecycle()
        value.status = try reader["status"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.failureResource = try reader["failureResource"].readIfPresent()
        return value
    }
}

extension Cloud9ClientTypes.Tag {

    static func write(value: Cloud9ClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Cloud9ClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Cloud9ClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

public enum Cloud9ClientTypes {}
