//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

/// General authentication failure. The request was not signed correctly.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticTranscoderClientTypes {

    /// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
    public struct Encryption: Swift.Sendable {
        /// The series of random bits created by a random bit generator, unique for every encryption operation, that you used to encrypt your input files or that you want Elastic Transcoder to use to encrypt your output files. The initialization vector must be base64-encoded, and it must be exactly 16 bytes long before being base64-encoded.
        public var initializationVector: Swift.String?
        /// The data encryption key that you want Elastic Transcoder to use to encrypt your output file, or that was used to encrypt your input file. The key must be base64-encoded and it must be one of the following bit lengths before being base64-encoded: 128, 192, or 256. The key must also be encrypted by using the Amazon Key Management Service.
        public var key: Swift.String?
        /// The MD5 digest of the key that you used to encrypt your input file, or that you want Elastic Transcoder to use to encrypt your output file. Elastic Transcoder uses the key digest as a checksum to make sure your key was not corrupted in transit. The key MD5 must be base64-encoded, and it must be exactly 16 bytes long before being base64-encoded.
        public var keyMd5: Swift.String?
        /// The specific server-side encryption mode that you want Elastic Transcoder to use when decrypting your input files or encrypting your output files. Elastic Transcoder supports the following options:
        ///
        /// * s3: Amazon S3 creates and manages the keys used for encrypting your files.
        ///
        /// * s3-aws-kms: Amazon S3 calls the Amazon Key Management Service, which creates and manages the keys that are used for encrypting your files. If you specify s3-aws-kms and you don't want to use the default key, you must add the AWS-KMS key that you want to use to your pipeline.
        ///
        /// * aes-cbc-pkcs7: A padded cipher-block mode of operation originally used for HLS files.
        ///
        /// * aes-ctr: AES Counter Mode.
        ///
        /// * aes-gcm: AES Galois Counter Mode, a mode of operation that is an authenticated encryption format, meaning that a file, key, or initialization vector that has been tampered with fails the decryption process.
        ///
        ///
        /// For all three AES options, you must provide the following settings, which must be base64-encoded:
        ///
        /// * Key
        ///
        /// * Key MD5
        ///
        /// * Initialization Vector
        ///
        ///
        /// For the AES modes, your private encryption keys and your unencrypted data are never stored by AWS; therefore, it is important that you safely manage your encryption keys. If you lose them, you won't be able to unencrypt your data.
        public var mode: Swift.String?

        public init(
            initializationVector: Swift.String? = nil,
            key: Swift.String? = nil,
            keyMd5: Swift.String? = nil,
            mode: Swift.String? = nil
        )
        {
            self.initializationVector = initializationVector
            self.key = key
            self.keyMd5 = keyMd5
            self.mode = mode
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The file to be used as album art. There can be multiple artworks associated with an audio file, to a maximum of 20. To remove artwork or leave the artwork empty, you can either set Artwork to null, or set the Merge Policy to "Replace" and use an empty Artwork array. To pass through existing artwork unchanged, set the Merge Policy to "Prepend", "Append", or "Fallback", and use an empty Artwork array.
    public struct Artwork: Swift.Sendable {
        /// The format of album art, if any. Valid formats are .jpg and .png.
        public var albumArtFormat: Swift.String?
        /// The encryption settings, if any, that you want Elastic Transcoder to apply to your artwork.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// The name of the file to be used as album art. To determine which Amazon S3 bucket contains the specified file, Elastic Transcoder checks the pipeline specified by PipelineId; the InputBucket object in that pipeline identifies the bucket. If the file name includes a prefix, for example, cooking/pie.jpg, include the prefix in the key. If the file isn't in the specified bucket, Elastic Transcoder returns an error.
        public var inputKey: Swift.String?
        /// The maximum height of the output album art in pixels. If you specify auto, Elastic Transcoder uses 600 as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
        public var maxHeight: Swift.String?
        /// The maximum width of the output album art in pixels. If you specify auto, Elastic Transcoder uses 600 as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
        public var maxWidth: Swift.String?
        /// When you set PaddingPolicy to Pad, Elastic Transcoder may add white bars to the top and bottom and/or left and right sides of the output album art to make the total size of the output art match the values that you specified for MaxWidth and MaxHeight.
        public var paddingPolicy: Swift.String?
        /// Specify one of the following values to control scaling of the output album art:
        ///
        /// * Fit: Elastic Transcoder scales the output art so it matches the value that you specified in either MaxWidth or MaxHeight without exceeding the other value.
        ///
        /// * Fill: Elastic Transcoder scales the output art so it matches the value that you specified in either MaxWidth or MaxHeight and matches or exceeds the other value. Elastic Transcoder centers the output art and then crops it in the dimension (if any) that exceeds the maximum value.
        ///
        /// * Stretch: Elastic Transcoder stretches the output art to match the values that you specified for MaxWidth and MaxHeight. If the relative proportions of the input art and the output art are different, the output art will be distorted.
        ///
        /// * Keep: Elastic Transcoder does not scale the output art. If either dimension of the input art exceeds the values that you specified for MaxWidth and MaxHeight, Elastic Transcoder crops the output art.
        ///
        /// * ShrinkToFit: Elastic Transcoder scales the output art down so that its dimensions match the values that you specified for at least one of MaxWidth and MaxHeight without exceeding either value. If you specify this option, Elastic Transcoder does not scale the art up.
        ///
        /// * ShrinkToFill Elastic Transcoder scales the output art down so that its dimensions match the values that you specified for at least one of MaxWidth and MaxHeight without dropping below either value. If you specify this option, Elastic Transcoder does not scale the art up.
        public var sizingPolicy: Swift.String?

        public init(
            albumArtFormat: Swift.String? = nil,
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            inputKey: Swift.String? = nil,
            maxHeight: Swift.String? = nil,
            maxWidth: Swift.String? = nil,
            paddingPolicy: Swift.String? = nil,
            sizingPolicy: Swift.String? = nil
        )
        {
            self.albumArtFormat = albumArtFormat
            self.encryption = encryption
            self.inputKey = inputKey
            self.maxHeight = maxHeight
            self.maxWidth = maxWidth
            self.paddingPolicy = paddingPolicy
            self.sizingPolicy = sizingPolicy
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Options associated with your audio codec.
    public struct AudioCodecOptions: Swift.Sendable {
        /// You can only choose an audio bit depth when you specify flac or pcm for the value of Audio:Codec. The bit depth of a sample is how many bits of information are included in the audio samples. The higher the bit depth, the better the audio, but the larger the file. Valid values are 16 and 24. The most common bit depth is 24.
        public var bitDepth: Swift.String?
        /// You can only choose an audio bit order when you specify pcm for the value of Audio:Codec. The order the bits of a PCM sample are stored in. The supported value is LittleEndian.
        public var bitOrder: Swift.String?
        /// You can only choose an audio profile when you specify AAC for the value of Audio:Codec. Specify the AAC profile for the output file. Elastic Transcoder supports the following profiles:
        ///
        /// * auto: If you specify auto, Elastic Transcoder selects the profile based on the bit rate selected for the output file.
        ///
        /// * AAC-LC: The most common AAC profile. Use for bit rates larger than 64 kbps.
        ///
        /// * HE-AAC: Not supported on some older players and devices. Use for bit rates between 40 and 80 kbps.
        ///
        /// * HE-AACv2: Not supported on some players and devices. Use for bit rates less than 48 kbps.
        ///
        ///
        /// All outputs in a Smooth playlist must have the same value for Profile. If you created any presets before AAC profiles were added, Elastic Transcoder automatically updated your presets to use AAC-LC. You can change the value as required.
        public var profile: Swift.String?
        /// You can only choose whether an audio sample is signed when you specify pcm for the value of Audio:Codec. Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed.
        public var signed: Swift.String?

        public init(
            bitDepth: Swift.String? = nil,
            bitOrder: Swift.String? = nil,
            profile: Swift.String? = nil,
            signed: Swift.String? = nil
        )
        {
            self.bitDepth = bitDepth
            self.bitOrder = bitOrder
            self.profile = profile
            self.signed = signed
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Parameters required for transcoding audio.
    public struct AudioParameters: Swift.Sendable {
        /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack. The following values are valid: SingleTrack, OneChannelPerTrack, and OneChannelPerTrackWithMosTo8Tracks When you specify SingleTrack, Elastic Transcoder creates a single track for your output. The track can have up to eight channels. Use SingleTrack for all non-mxf containers. The outputs of SingleTrack for a specific channel value and inputs are as follows:
        ///
        /// * 0 channels with any input: Audio omitted from the output
        ///
        /// * 1, 2, or auto  channels with no audio input: Audio omitted from the output
        ///
        /// * 1  channel with any input with audio: One track with one channel, downmixed if necessary
        ///
        /// * 2  channels with one track with one channel: One track with two identical channels
        ///
        /// * 2 or auto  channels with two tracks with one channel each: One track with two channels
        ///
        /// * 2 or auto  channels with one track with two channels: One track with two channels
        ///
        /// * 2  channels with one track with multiple channels: One track with two channels
        ///
        /// * auto  channels with one track with one channel: One track with one channel
        ///
        /// * auto  channels with one track with multiple channels: One track with multiple channels
        ///
        ///
        /// When you specify OneChannelPerTrack, Elastic Transcoder creates a new track for every channel in your output. Your output can have up to eight single-channel tracks. The outputs of OneChannelPerTrack for a specific channel value and inputs are as follows:
        ///
        /// * 0  channels with any input: Audio omitted from the output
        ///
        /// * 1, 2, or auto  channels with no audio input: Audio omitted from the output
        ///
        /// * 1  channel with any input with audio: One track with one channel, downmixed if necessary
        ///
        /// * 2  channels with one track with one channel: Two tracks with one identical channel each
        ///
        /// * 2 or auto  channels with two tracks with one channel each: Two tracks with one channel each
        ///
        /// * 2 or auto  channels with one track with two channels: Two tracks with one channel each
        ///
        /// * 2  channels with one track with multiple channels: Two tracks with one channel each
        ///
        /// * auto  channels with one track with one channel: One track with one channel
        ///
        /// * auto  channels with one track with multiple channels: Up to eight tracks with one channel each
        ///
        ///
        /// When you specify OneChannelPerTrackWithMosTo8Tracks, Elastic Transcoder creates eight single-channel tracks for your output. All tracks that do not contain audio data from an input channel are MOS, or Mit Out Sound, tracks. The outputs of OneChannelPerTrackWithMosTo8Tracks for a specific channel value and inputs are as follows:
        ///
        /// * 0  channels with any input: Audio omitted from the output
        ///
        /// * 1, 2, or auto  channels with no audio input: Audio omitted from the output
        ///
        /// * 1  channel with any input with audio: One track with one channel, downmixed if necessary, plus six MOS tracks
        ///
        /// * 2  channels with one track with one channel: Two tracks with one identical channel each, plus six MOS tracks
        ///
        /// * 2 or auto  channels with two tracks with one channel each: Two tracks with one channel each, plus six MOS tracks
        ///
        /// * 2 or auto  channels with one track with two channels: Two tracks with one channel each, plus six MOS tracks
        ///
        /// * 2  channels with one track with multiple channels: Two tracks with one channel each, plus six MOS tracks
        ///
        /// * auto  channels with one track with one channel: One track with one channel, plus seven MOS tracks
        ///
        /// * auto  channels with one track with multiple channels: Up to eight tracks with one channel each, plus MOS tracks until there are eight tracks in all
        public var audioPackingMode: Swift.String?
        /// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
        public var bitRate: Swift.String?
        /// The number of audio channels in the output file. The following values are valid: auto, 0, 1, 2 One channel carries the information played by a single speaker. For example, a stereo track with two channels sends one channel to the left speaker, and the other channel to the right speaker. The output channels are organized into tracks. If you want Elastic Transcoder to automatically detect the number of audio channels in the input file and use that value for the output file, select auto. The output of a specific channel value and inputs are as follows:
        ///
        /// * auto channel specified, with any input: Pass through up to eight input channels.
        ///
        /// * 0 channels specified, with any input: Audio omitted from the output.
        ///
        /// * 1 channel specified, with at least one input channel: Mono sound.
        ///
        /// * 2 channels specified, with any input: Two identical mono channels or stereo. For more information about tracks, see Audio:AudioPackingMode.
        ///
        ///
        /// For more information about how Elastic Transcoder organizes channels and tracks, see Audio:AudioPackingMode.
        public var channels: Swift.String?
        /// The audio codec for the output file. Valid values include aac, flac, mp2, mp3, pcm, and vorbis.
        public var codec: Swift.String?
        /// If you specified AAC for Audio:Codec, this is the AAC compression profile to use. Valid values include: auto, AAC-LC, HE-AAC, HE-AACv2 If you specify auto, Elastic Transcoder chooses a profile based on the bit rate of the output file.
        public var codecOptions: ElasticTranscoderClientTypes.AudioCodecOptions?
        /// The sample rate of the audio stream in the output file, in Hertz. Valid values include: auto, 22050, 32000, 44100, 48000, 96000 If you specify auto, Elastic Transcoder automatically detects the sample rate.
        public var sampleRate: Swift.String?

        public init(
            audioPackingMode: Swift.String? = nil,
            bitRate: Swift.String? = nil,
            channels: Swift.String? = nil,
            codec: Swift.String? = nil,
            codecOptions: ElasticTranscoderClientTypes.AudioCodecOptions? = nil,
            sampleRate: Swift.String? = nil
        )
        {
            self.audioPackingMode = audioPackingMode
            self.bitRate = bitRate
            self.channels = channels
            self.codec = codec
            self.codecOptions = codecOptions
            self.sampleRate = sampleRate
        }
    }
}

public struct IncompatibleVersionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleVersionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Elastic Transcoder encountered an unexpected exception while trying to fulfill the request.
public struct InternalServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you are attempting to change is in use. For example, you are attempting to delete a pipeline that is currently in use.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource does not exist or is not available. For example, the pipeline to which you're trying to add a job doesn't exist or is still being created.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or more required parameter values were not provided in the request.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The CancelJobRequest structure.
public struct CancelJobInput: Swift.Sendable {
    /// The identifier of the job that you want to cancel. To get a list of the jobs (including their jobId) that have a status of Submitted, use the [ListJobsByStatus] API action.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// The response body contains a JSON object. If the job is successfully canceled, the value of Success is true.
public struct CancelJobOutput: Swift.Sendable {

    public init() { }
}

extension ElasticTranscoderClientTypes {

    /// The file format of the output captions. If you leave this value blank, Elastic Transcoder returns an error.
    public struct CaptionFormat: Swift.Sendable {
        /// The encryption settings, if any, that you want Elastic Transcoder to apply to your caption formats.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// The format you specify determines whether Elastic Transcoder generates an embedded or sidecar caption for this output.
        ///
        /// * Valid Embedded Caption Formats:
        ///
        /// * for FLAC: None
        ///
        /// * For MP3: None
        ///
        /// * For MP4: mov-text
        ///
        /// * For MPEG-TS: None
        ///
        /// * For ogg: None
        ///
        /// * For webm: None
        ///
        ///
        ///
        ///
        /// * Valid Sidecar Caption Formats: Elastic Transcoder supports dfxp (first div element only), scc, srt, and webvtt. If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.
        ///
        /// * For FMP4: dfxp
        ///
        /// * Non-FMP4 outputs: All sidecar types
        ///
        ///
        /// fmp4 captions have an extension of .ismt
        public var format: Swift.String?
        /// The prefix for caption filenames, in the form description-{language}, where:
        ///
        /// * description is a description of the video.
        ///
        /// * {language} is a literal value that Elastic Transcoder replaces with the two- or three-letter code for the language of the caption in the output file names.
        ///
        ///
        /// If you don't include {language} in the file name pattern, Elastic Transcoder automatically appends "{language}" to the value that you specify for the description. In addition, Elastic Transcoder automatically appends the count to the end of the segment files. For example, suppose you're transcoding into srt format. When you enter "Sydney-{language}-sunrise", and the language of the captions is English (en), the name of the first caption file is be Sydney-en-sunrise00000.srt.
        public var pattern: Swift.String?

        public init(
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            format: Swift.String? = nil,
            pattern: Swift.String? = nil
        )
        {
            self.encryption = encryption
            self.format = format
            self.pattern = pattern
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// A source file for the input sidecar captions used during the transcoding process.
    public struct CaptionSource: Swift.Sendable {
        /// The encryption settings, if any, that Elastic Transcoder needs to decyrpt your caption sources, or that you want Elastic Transcoder to apply to your caption sources.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// The name of the sidecar caption file that you want Elastic Transcoder to include in the output file.
        public var key: Swift.String?
        /// The label of the caption shown in the player when choosing a language. We recommend that you put the caption language name here, in the language of the captions.
        public var label: Swift.String?
        /// A string that specifies the language of the caption. If you specified multiple inputs with captions, the caption language must match in order to be included in the output. Specify this as one of:
        ///
        /// * 2-character ISO 639-1 code
        ///
        /// * 3-character ISO 639-2 code
        ///
        ///
        /// For more information on ISO language codes and language names, see the List of ISO 639-1 codes.
        public var language: Swift.String?
        /// For clip generation or captions that do not start at the same time as the associated video file, the TimeOffset tells Elastic Transcoder how much of the video to encode before including captions. Specify the TimeOffset in the form [+-]SS.sss or [+-]HH:mm:SS.ss.
        public var timeOffset: Swift.String?

        public init(
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            key: Swift.String? = nil,
            label: Swift.String? = nil,
            language: Swift.String? = nil,
            timeOffset: Swift.String? = nil
        )
        {
            self.encryption = encryption
            self.key = key
            self.label = label
            self.language = language
            self.timeOffset = timeOffset
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The captions to be created, if any.
    public struct Captions: Swift.Sendable {
        /// The array of file formats for the output captions. If you leave this value blank, Elastic Transcoder returns an error.
        public var captionFormats: [ElasticTranscoderClientTypes.CaptionFormat]?
        /// Source files for the input sidecar captions used during the transcoding process. To omit all sidecar captions, leave CaptionSources blank.
        @available(*, deprecated)
        public var captionSources: [ElasticTranscoderClientTypes.CaptionSource]?
        /// A policy that determines how Elastic Transcoder handles the existence of multiple captions.
        ///
        /// * MergeOverride: Elastic Transcoder transcodes both embedded and sidecar captions into outputs. If captions for a language are embedded in the input file and also appear in a sidecar file, Elastic Transcoder uses the sidecar captions and ignores the embedded captions for that language.
        ///
        /// * MergeRetain: Elastic Transcoder transcodes both embedded and sidecar captions into outputs. If captions for a language are embedded in the input file and also appear in a sidecar file, Elastic Transcoder uses the embedded captions and ignores the sidecar captions for that language. If CaptionSources is empty, Elastic Transcoder omits all sidecar captions from the output files.
        ///
        /// * Override: Elastic Transcoder transcodes only the sidecar captions that you specify in CaptionSources.
        ///
        ///
        /// MergePolicy cannot be null.
        @available(*, deprecated)
        public var mergePolicy: Swift.String?

        public init(
            captionFormats: [ElasticTranscoderClientTypes.CaptionFormat]? = nil,
            captionSources: [ElasticTranscoderClientTypes.CaptionSource]? = nil,
            mergePolicy: Swift.String? = nil
        )
        {
            self.captionFormats = captionFormats
            self.captionSources = captionSources
            self.mergePolicy = mergePolicy
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Settings that determine when a clip begins and how long it lasts.
    public struct TimeSpan: Swift.Sendable {
        /// The duration of the clip. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder creates an output file from StartTime to the end of the file. If you specify a value longer than the duration of the input file, Elastic Transcoder transcodes the file and returns a warning message.
        public var duration: Swift.String?
        /// The place in the input file where you want a clip to start. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder starts at the beginning of the input file.
        public var startTime: Swift.String?

        public init(
            duration: Swift.String? = nil,
            startTime: Swift.String? = nil
        )
        {
            self.duration = duration
            self.startTime = startTime
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Settings for one clip in a composition. All jobs in a playlist must have the same clip settings.
    @available(*, deprecated)
    public struct Clip: Swift.Sendable {
        /// Settings that determine when a clip begins and how long it lasts.
        public var timeSpan: ElasticTranscoderClientTypes.TimeSpan?

        public init(
            timeSpan: ElasticTranscoderClientTypes.TimeSpan? = nil
        )
        {
            self.timeSpan = timeSpan
        }
    }
}

/// Too many operations for a given AWS account. For example, the number of pipelines exceeds the maximum allowed.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticTranscoderClientTypes {

    /// The detected properties of the input file. Elastic Transcoder identifies these values from the input file.
    public struct DetectedProperties: Swift.Sendable {
        /// The detected duration of the input file, in milliseconds.
        public var durationMillis: Swift.Int?
        /// The detected file size of the input file, in bytes.
        public var fileSize: Swift.Int?
        /// The detected frame rate of the input file, in frames per second.
        public var frameRate: Swift.String?
        /// The detected height of the input file, in pixels.
        public var height: Swift.Int?
        /// The detected width of the input file, in pixels.
        public var width: Swift.Int?

        public init(
            durationMillis: Swift.Int? = nil,
            fileSize: Swift.Int? = nil,
            frameRate: Swift.String? = nil,
            height: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.durationMillis = durationMillis
            self.fileSize = fileSize
            self.frameRate = frameRate
            self.height = height
            self.width = width
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The captions to be created, if any.
    public struct InputCaptions: Swift.Sendable {
        /// Source files for the input sidecar captions used during the transcoding process. To omit all sidecar captions, leave CaptionSources blank.
        public var captionSources: [ElasticTranscoderClientTypes.CaptionSource]?
        /// A policy that determines how Elastic Transcoder handles the existence of multiple captions.
        ///
        /// * MergeOverride: Elastic Transcoder transcodes both embedded and sidecar captions into outputs. If captions for a language are embedded in the input file and also appear in a sidecar file, Elastic Transcoder uses the sidecar captions and ignores the embedded captions for that language.
        ///
        /// * MergeRetain: Elastic Transcoder transcodes both embedded and sidecar captions into outputs. If captions for a language are embedded in the input file and also appear in a sidecar file, Elastic Transcoder uses the embedded captions and ignores the sidecar captions for that language. If CaptionSources is empty, Elastic Transcoder omits all sidecar captions from the output files.
        ///
        /// * Override: Elastic Transcoder transcodes only the sidecar captions that you specify in CaptionSources.
        ///
        ///
        /// MergePolicy cannot be null.
        public var mergePolicy: Swift.String?

        public init(
            captionSources: [ElasticTranscoderClientTypes.CaptionSource]? = nil,
            mergePolicy: Swift.String? = nil
        )
        {
            self.captionSources = captionSources
            self.mergePolicy = mergePolicy
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Information about the file that you're transcoding.
    public struct JobInput: Swift.Sendable {
        /// The aspect ratio of the input file. If you want Elastic Transcoder to automatically detect the aspect ratio of the input file, specify auto. If you want to specify the aspect ratio for the output file, enter one of the following values: 1:1, 4:3, 3:2, 16:9 If you specify a value other than auto, Elastic Transcoder disables automatic detection of the aspect ratio.
        public var aspectRatio: Swift.String?
        /// The container type for the input file. If you want Elastic Transcoder to automatically detect the container type of the input file, specify auto. If you want to specify the container type for the input file, enter one of the following values: 3gp, aac, asf, avi, divx, flv, m4a, mkv, mov, mp3, mp4, mpeg, mpeg-ps, mpeg-ts, mxf, ogg, vob, wav, webm
        public var container: Swift.String?
        /// The detected properties of the input file.
        public var detectedProperties: ElasticTranscoderClientTypes.DetectedProperties?
        /// The encryption settings, if any, that are used for decrypting your input files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// The frame rate of the input file. If you want Elastic Transcoder to automatically detect the frame rate of the input file, specify auto. If you want to specify the frame rate for the input file, enter one of the following values: 10, 15, 23.97, 24, 25, 29.97, 30, 60 If you specify a value other than auto, Elastic Transcoder disables automatic detection of the frame rate.
        public var frameRate: Swift.String?
        /// You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:
        ///
        /// * Embedded: Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file. Valid input values include: CEA-608 (EIA-608, first non-empty channel only), CEA-708 (EIA-708, first non-empty channel only), and mov-text Valid outputs include: mov-text Elastic Transcoder supports a maximum of one embedded format per output.
        ///
        /// * Sidecar: Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file. Valid input values include: dfxp (first div element only), ebu-tt, scc, smpt, srt, ttml (first div element only), and webvtt Valid outputs include: dfxp (first div element only), scc, srt, and webvtt.
        ///
        ///
        /// If you want ttml or smpte-tt compatible captions, specify dfxp as your output format. Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process. To remove captions or leave the captions empty, set Captions to null. To pass through existing captions unchanged, set the MergePolicy to MergeRetain, and pass in a null CaptionSources array. For more information on embedded files, see the Subtitles Wikipedia page. For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.
        public var inputCaptions: ElasticTranscoderClientTypes.InputCaptions?
        /// Whether the input file is interlaced. If you want Elastic Transcoder to automatically detect whether the input file is interlaced, specify auto. If you want to specify whether the input file is interlaced, enter one of the following values: true, false If you specify a value other than auto, Elastic Transcoder disables automatic detection of interlacing.
        public var interlaced: Swift.String?
        /// The name of the file to transcode. Elsewhere in the body of the JSON block is the the ID of the pipeline to use for processing the job. The InputBucket object in that pipeline tells Elastic Transcoder which Amazon S3 bucket to get the file from. If the file name includes a prefix, such as cooking/lasagna.mpg, include the prefix in the key. If the file isn't in the specified bucket, Elastic Transcoder returns an error.
        public var key: Swift.String?
        /// This value must be auto, which causes Elastic Transcoder to automatically detect the resolution of the input file.
        public var resolution: Swift.String?
        /// Settings for clipping an input. Each input can have different clip settings.
        public var timeSpan: ElasticTranscoderClientTypes.TimeSpan?

        public init(
            aspectRatio: Swift.String? = nil,
            container: Swift.String? = nil,
            detectedProperties: ElasticTranscoderClientTypes.DetectedProperties? = nil,
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            frameRate: Swift.String? = nil,
            inputCaptions: ElasticTranscoderClientTypes.InputCaptions? = nil,
            interlaced: Swift.String? = nil,
            key: Swift.String? = nil,
            resolution: Swift.String? = nil,
            timeSpan: ElasticTranscoderClientTypes.TimeSpan? = nil
        )
        {
            self.aspectRatio = aspectRatio
            self.container = container
            self.detectedProperties = detectedProperties
            self.encryption = encryption
            self.frameRate = frameRate
            self.inputCaptions = inputCaptions
            self.interlaced = interlaced
            self.key = key
            self.resolution = resolution
            self.timeSpan = timeSpan
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The .jpg or .png file associated with an audio file.
    public struct JobAlbumArt: Swift.Sendable {
        /// The file to be used as album art. There can be multiple artworks associated with an audio file, to a maximum of 20. Valid formats are .jpg and .png
        public var artwork: [ElasticTranscoderClientTypes.Artwork]?
        /// A policy that determines how Elastic Transcoder handles the existence of multiple album artwork files.
        ///
        /// * Replace: The specified album art replaces any existing album art.
        ///
        /// * Prepend: The specified album art is placed in front of any existing album art.
        ///
        /// * Append: The specified album art is placed after any existing album art.
        ///
        /// * Fallback: If the original input file contains artwork, Elastic Transcoder uses that artwork for the output. If the original input does not contain artwork, Elastic Transcoder uses the specified album art file.
        public var mergePolicy: Swift.String?

        public init(
            artwork: [ElasticTranscoderClientTypes.Artwork]? = nil,
            mergePolicy: Swift.String? = nil
        )
        {
            self.artwork = artwork
            self.mergePolicy = mergePolicy
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Watermarks can be in .png or .jpg format. If you want to display a watermark that is not rectangular, use the .png format, which supports transparency.
    public struct JobWatermark: Swift.Sendable {
        /// The encryption settings, if any, that you want Elastic Transcoder to apply to your watermarks.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// The name of the .png or .jpg file that you want to use for the watermark. To determine which Amazon S3 bucket contains the specified file, Elastic Transcoder checks the pipeline specified by Pipeline; the Input Bucket object in that pipeline identifies the bucket. If the file name includes a prefix, for example, logos/128x64.png, include the prefix in the key. If the file isn't in the specified bucket, Elastic Transcoder returns an error.
        public var inputKey: Swift.String?
        /// The ID of the watermark settings that Elastic Transcoder uses to add watermarks to the video during transcoding. The settings are in the preset specified by Preset for the current output. In that preset, the value of Watermarks Id tells Elastic Transcoder which settings to use.
        public var presetWatermarkId: Swift.String?

        public init(
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            inputKey: Swift.String? = nil,
            presetWatermarkId: Swift.String? = nil
        )
        {
            self.encryption = encryption
            self.inputKey = inputKey
            self.presetWatermarkId = presetWatermarkId
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The CreateJobOutput structure.
    public struct CreateJobOutput: Swift.Sendable {
        /// Information about the album art that you want Elastic Transcoder to add to the file during transcoding. You can specify up to twenty album artworks for each output. Settings for each artwork must be defined in the job for the current output.
        public var albumArt: ElasticTranscoderClientTypes.JobAlbumArt?
        /// You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:
        ///
        /// * Embedded: Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file. Valid input values include: CEA-608 (EIA-608, first non-empty channel only), CEA-708 (EIA-708, first non-empty channel only), and mov-text Valid outputs include: mov-text Elastic Transcoder supports a maximum of one embedded format per output.
        ///
        /// * Sidecar: Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file. Valid input values include: dfxp (first div element only), ebu-tt, scc, smpt, srt, ttml (first div element only), and webvtt Valid outputs include: dfxp (first div element only), scc, srt, and webvtt.
        ///
        ///
        /// If you want ttml or smpte-tt compatible captions, specify dfxp as your output format. Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process. To remove captions or leave the captions empty, set Captions to null. To pass through existing captions unchanged, set the MergePolicy to MergeRetain, and pass in a null CaptionSources array. For more information on embedded files, see the Subtitles Wikipedia page. For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.
        public var captions: ElasticTranscoderClientTypes.Captions?
        /// You can create an output file that contains an excerpt from the input file. This excerpt, called a clip, can come from the beginning, middle, or end of the file. The Composition object contains settings for the clips that make up an output file. For the current release, you can only specify settings for a single clip per output file. The Composition object cannot be null.
        @available(*, deprecated)
        public var composition: [ElasticTranscoderClientTypes.Clip]?
        /// You can specify encryption settings for any output files that you want to use for a transcoding job. This includes the output file and any watermarks, thumbnails, album art, or captions that you want to use. You must specify encryption settings for each file individually.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// The name to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon S3 bucket specified by the OutputBucket object in the pipeline that is specified by the pipeline ID. If a file with the specified name already exists in the output bucket, the job fails.
        public var key: Swift.String?
        /// The Id of the preset to use for this job. The preset determines the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding.
        public var presetId: Swift.String?
        /// The number of degrees clockwise by which you want Elastic Transcoder to rotate the output relative to the input. Enter one of the following values: auto, 0, 90, 180, 270. The value auto generally works only if the file that you're transcoding contains rotation metadata.
        public var rotate: Swift.String?
        /// (Outputs in Fragmented MP4 or MPEG-TS format only. If you specify a preset in PresetId for which the value of Container is fmp4 (Fragmented MP4) or ts (MPEG-TS), SegmentDuration is the target maximum duration of each segment in seconds. For HLSv3 format playlists, each media segment is stored in a separate .ts file. For HLSv4 and Smooth playlists, all media segments for an output are stored in a single file. Each segment is approximately the length of the SegmentDuration, though individual segments might be shorter or longer. The range of valid values is 1 to 60 seconds. If the duration of the video is not evenly divisible by SegmentDuration, the duration of the last segment is the remainder of total length/SegmentDuration. Elastic Transcoder creates an output-specific playlist for each output HLS output that you specify in OutputKeys. To add an output to the master playlist for this job, include it in the OutputKeys of the associated playlist.
        public var segmentDuration: Swift.String?
        /// The encryption settings, if any, that you want Elastic Transcoder to apply to your thumbnail.
        public var thumbnailEncryption: ElasticTranscoderClientTypes.Encryption?
        /// Whether you want Elastic Transcoder to create thumbnails for your videos and, if so, how you want Elastic Transcoder to name the files. If you don't want Elastic Transcoder to create thumbnails, specify "". If you do want Elastic Transcoder to create thumbnails, specify the information that you want to include in the file name for each thumbnail. You can specify the following values in any sequence:
        ///
        /// * {count} (Required): If you want to create thumbnails, you must include {count} in the ThumbnailPattern object. Wherever you specify {count}, Elastic Transcoder adds a five-digit sequence number (beginning with 00001) to thumbnail file names. The number indicates where a given thumbnail appears in the sequence of thumbnails for a transcoded file. If you specify a literal value and/or {resolution} but you omit {count}, Elastic Transcoder returns a validation error and does not create the job.
        ///
        /// * Literal values (Optional): You can specify literal values anywhere in the ThumbnailPattern object. For example, you can include them as a file name prefix or as a delimiter between {resolution} and {count}.
        ///
        /// * {resolution} (Optional): If you want Elastic Transcoder to include the resolution in the file name, include {resolution} in the ThumbnailPattern object.
        ///
        ///
        /// When creating thumbnails, Elastic Transcoder automatically saves the files in the format (.jpg or .png) that appears in the preset that you specified in the PresetID value of CreateJobOutput. Elastic Transcoder also appends the applicable file name extension.
        public var thumbnailPattern: Swift.String?
        /// Information about the watermarks that you want Elastic Transcoder to add to the video during transcoding. You can specify up to four watermarks for each output. Settings for each watermark must be defined in the preset for the current output.
        public var watermarks: [ElasticTranscoderClientTypes.JobWatermark]?

        public init(
            albumArt: ElasticTranscoderClientTypes.JobAlbumArt? = nil,
            captions: ElasticTranscoderClientTypes.Captions? = nil,
            composition: [ElasticTranscoderClientTypes.Clip]? = nil,
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            key: Swift.String? = nil,
            presetId: Swift.String? = nil,
            rotate: Swift.String? = nil,
            segmentDuration: Swift.String? = nil,
            thumbnailEncryption: ElasticTranscoderClientTypes.Encryption? = nil,
            thumbnailPattern: Swift.String? = nil,
            watermarks: [ElasticTranscoderClientTypes.JobWatermark]? = nil
        )
        {
            self.albumArt = albumArt
            self.captions = captions
            self.composition = composition
            self.encryption = encryption
            self.key = key
            self.presetId = presetId
            self.rotate = rotate
            self.segmentDuration = segmentDuration
            self.thumbnailEncryption = thumbnailEncryption
            self.thumbnailPattern = thumbnailPattern
            self.watermarks = watermarks
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The HLS content protection settings, if any, that you want Elastic Transcoder to apply to your output files.
    public struct HlsContentProtection: Swift.Sendable {
        /// If Elastic Transcoder is generating your key for you, you must leave this field blank. The series of random bits created by a random bit generator, unique for every encryption operation, that you want Elastic Transcoder to use to encrypt your output files. The initialization vector must be base64-encoded, and it must be exactly 16 bytes before being base64-encoded.
        public var initializationVector: Swift.String?
        /// If you want Elastic Transcoder to generate a key for you, leave this field blank. If you choose to supply your own key, you must encrypt the key by using AWS KMS. The key must be base64-encoded, and it must be one of the following bit lengths before being base64-encoded: 128, 192, or 256.
        public var key: Swift.String?
        /// If Elastic Transcoder is generating your key for you, you must leave this field blank. The MD5 digest of the key that you want Elastic Transcoder to use to encrypt your output file, and that you want Elastic Transcoder to use as a checksum to make sure your key was not corrupted in transit. The key MD5 must be base64-encoded, and it must be exactly 16 bytes before being base64- encoded.
        public var keyMd5: Swift.String?
        /// Specify whether you want Elastic Transcoder to write your HLS license key to an Amazon S3 bucket. If you choose WithVariantPlaylists, LicenseAcquisitionUrl must be left blank and Elastic Transcoder writes your data key into the same bucket as the associated playlist.
        public var keyStoragePolicy: Swift.String?
        /// The location of the license key required to decrypt your HLS playlist. The URL must be an absolute path, and is referenced in the URI attribute of the EXT-X-KEY metadata tag in the playlist file.
        public var licenseAcquisitionUrl: Swift.String?
        /// The content protection method for your output. The only valid value is: aes-128. This value is written into the method attribute of the EXT-X-KEY metadata tag in the output playlist.
        public var method: Swift.String?

        public init(
            initializationVector: Swift.String? = nil,
            key: Swift.String? = nil,
            keyMd5: Swift.String? = nil,
            keyStoragePolicy: Swift.String? = nil,
            licenseAcquisitionUrl: Swift.String? = nil,
            method: Swift.String? = nil
        )
        {
            self.initializationVector = initializationVector
            self.key = key
            self.keyMd5 = keyMd5
            self.keyStoragePolicy = keyStoragePolicy
            self.licenseAcquisitionUrl = licenseAcquisitionUrl
            self.method = method
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The PlayReady DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist. PlayReady DRM encrypts your media files using aes-ctr encryption. If you use DRM for an HLSv3 playlist, your outputs must have a master playlist.
    public struct PlayReadyDrm: Swift.Sendable {
        /// The type of DRM, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.
        public var format: Swift.String?
        /// The series of random bits created by a random bit generator, unique for every encryption operation, that you want Elastic Transcoder to use to encrypt your files. The initialization vector must be base64-encoded, and it must be exactly 8 bytes long before being base64-encoded. If no initialization vector is provided, Elastic Transcoder generates one for you.
        public var initializationVector: Swift.String?
        /// The DRM key for your file, provided by your DRM license provider. The key must be base64-encoded, and it must be one of the following bit lengths before being base64-encoded: 128, 192, or 256. The key must also be encrypted by using AWS KMS.
        public var key: Swift.String?
        /// The ID for your DRM key, so that your DRM license provider knows which key to provide. The key ID must be provided in big endian, and Elastic Transcoder converts it to little endian before inserting it into the PlayReady DRM headers. If you are unsure whether your license server provides your key ID in big or little endian, check with your DRM provider.
        public var keyId: Swift.String?
        /// The MD5 digest of the key used for DRM on your file, and that you want Elastic Transcoder to use as a checksum to make sure your key was not corrupted in transit. The key MD5 must be base64-encoded, and it must be exactly 16 bytes before being base64-encoded.
        public var keyMd5: Swift.String?
        /// The location of the license key required to play DRM content. The URL must be an absolute path, and is referenced by the PlayReady header. The PlayReady header is referenced in the protection header of the client manifest for Smooth Streaming outputs, and in the EXT-X-DXDRM and EXT-XDXDRMINFO metadata tags for HLS playlist outputs. An example URL looks like this: https://www.example.com/exampleKey/
        public var licenseAcquisitionUrl: Swift.String?

        public init(
            format: Swift.String? = nil,
            initializationVector: Swift.String? = nil,
            key: Swift.String? = nil,
            keyId: Swift.String? = nil,
            keyMd5: Swift.String? = nil,
            licenseAcquisitionUrl: Swift.String? = nil
        )
        {
            self.format = format
            self.initializationVector = initializationVector
            self.key = key
            self.keyId = keyId
            self.keyMd5 = keyMd5
            self.licenseAcquisitionUrl = licenseAcquisitionUrl
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Information about the master playlist.
    public struct CreateJobPlaylist: Swift.Sendable {
        /// The format of the output playlist. Valid formats include HLSv3, HLSv4, and Smooth.
        public var format: Swift.String?
        /// The HLS content protection settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.
        public var hlsContentProtection: ElasticTranscoderClientTypes.HlsContentProtection?
        /// The name that you want Elastic Transcoder to assign to the master playlist, for example, nyc-vacation.m3u8. If the name includes a / character, the section of the name before the last / must be identical for all Name objects. If you create more than one master playlist, the values of all Name objects must be unique. Elastic Transcoder automatically appends the relevant file extension to the file name (.m3u8 for HLSv3 and HLSv4 playlists, and .ism and .ismc for Smooth playlists). If you include a file extension in Name, the file name will have two extensions.
        public var name: Swift.String?
        /// For each output in this job that you want to include in a master playlist, the value of the Outputs:Key object.
        ///
        /// * If your output is not HLS or does not have a segment duration set, the name of the output file is a concatenation of OutputKeyPrefix and Outputs:Key: OutputKeyPrefixOutputs:Key
        ///
        /// * If your output is HLSv3 and has a segment duration set, or is not included in a playlist, Elastic Transcoder creates an output playlist file with a file extension of .m3u8, and a series of .ts files that include a five-digit sequential counter beginning with 00000: OutputKeyPrefixOutputs:Key.m3u8 OutputKeyPrefixOutputs:Key00000.ts
        ///
        /// * If your output is HLSv4, has a segment duration set, and is included in an HLSv4 playlist, Elastic Transcoder creates an output playlist file with a file extension of _v4.m3u8. If the output is video, Elastic Transcoder also creates an output file with an extension of _iframe.m3u8: OutputKeyPrefixOutputs:Key_v4.m3u8 OutputKeyPrefixOutputs:Key_iframe.m3u8 OutputKeyPrefixOutputs:Key.ts
        ///
        ///
        /// Elastic Transcoder automatically appends the relevant file extension to the file name. If you include a file extension in Output Key, the file name will have two extensions. If you include more than one output in a playlist, any segment duration settings, clip settings, or caption settings must be the same for all outputs in the playlist. For Smooth playlists, the Audio:Profile, Video:Profile, and Video:FrameRate to Video:KeyframesMaxDist ratio must be the same for all outputs.
        public var outputKeys: [Swift.String]?
        /// The DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.
        public var playReadyDrm: ElasticTranscoderClientTypes.PlayReadyDrm?

        public init(
            format: Swift.String? = nil,
            hlsContentProtection: ElasticTranscoderClientTypes.HlsContentProtection? = nil,
            name: Swift.String? = nil,
            outputKeys: [Swift.String]? = nil,
            playReadyDrm: ElasticTranscoderClientTypes.PlayReadyDrm? = nil
        )
        {
            self.format = format
            self.hlsContentProtection = hlsContentProtection
            self.name = name
            self.outputKeys = outputKeys
            self.playReadyDrm = playReadyDrm
        }
    }
}

/// The CreateJobRequest structure.
public struct CreateJobInput: Swift.Sendable {
    /// A section of the request body that provides information about the file that is being transcoded.
    public var input: ElasticTranscoderClientTypes.JobInput?
    /// A section of the request body that provides information about the files that are being transcoded.
    public var inputs: [ElasticTranscoderClientTypes.JobInput]?
    /// A section of the request body that provides information about the transcoded (target) file. We strongly recommend that you use the Outputs syntax instead of the Output syntax.
    public var output: ElasticTranscoderClientTypes.CreateJobOutput?
    /// The value, if any, that you want Elastic Transcoder to prepend to the names of all files that this job creates, including output files, thumbnails, and playlists.
    public var outputKeyPrefix: Swift.String?
    /// A section of the request body that provides information about the transcoded (target) files. We recommend that you use the Outputs syntax instead of the Output syntax.
    public var outputs: [ElasticTranscoderClientTypes.CreateJobOutput]?
    /// The Id of the pipeline that you want Elastic Transcoder to use for transcoding. The pipeline determines several settings, including the Amazon S3 bucket from which Elastic Transcoder gets the files to transcode and the bucket into which Elastic Transcoder puts the transcoded files.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// If you specify a preset in PresetId for which the value of Container is fmp4 (Fragmented MP4) or ts (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create. The maximum number of master playlists in a job is 30.
    public var playlists: [ElasticTranscoderClientTypes.CreateJobPlaylist]?
    /// User-defined metadata that you want to associate with an Elastic Transcoder job. You specify metadata in key/value pairs, and you can add up to 10 key/value pairs per job. Elastic Transcoder does not guarantee that key/value pairs are returned in the same order in which you specify them.
    public var userMetadata: [Swift.String: Swift.String]?

    public init(
        input: ElasticTranscoderClientTypes.JobInput? = nil,
        inputs: [ElasticTranscoderClientTypes.JobInput]? = nil,
        output: ElasticTranscoderClientTypes.CreateJobOutput? = nil,
        outputKeyPrefix: Swift.String? = nil,
        outputs: [ElasticTranscoderClientTypes.CreateJobOutput]? = nil,
        pipelineId: Swift.String? = nil,
        playlists: [ElasticTranscoderClientTypes.CreateJobPlaylist]? = nil,
        userMetadata: [Swift.String: Swift.String]? = nil
    )
    {
        self.input = input
        self.inputs = inputs
        self.output = output
        self.outputKeyPrefix = outputKeyPrefix
        self.outputs = outputs
        self.pipelineId = pipelineId
        self.playlists = playlists
        self.userMetadata = userMetadata
    }
}

extension ElasticTranscoderClientTypes {

    /// Outputs recommended instead. If you specified one output for a job, information about that output. If you specified multiple outputs for a job, the Output object lists information about the first output. This duplicates the information that is listed for the first output in the Outputs object.
    public struct JobOutput: Swift.Sendable {
        /// The album art to be associated with the output file, if any.
        public var albumArt: ElasticTranscoderClientTypes.JobAlbumArt?
        /// If Elastic Transcoder used a preset with a ColorSpaceConversionMode to transcode the output file, the AppliedColorSpaceConversion parameter shows the conversion used. If no ColorSpaceConversionMode was defined in the preset, this parameter is not be included in the job response.
        public var appliedColorSpaceConversion: Swift.String?
        /// You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:
        ///
        /// * Embedded: Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file. Valid input values include: CEA-608 (EIA-608, first non-empty channel only), CEA-708 (EIA-708, first non-empty channel only), and mov-text Valid outputs include: mov-text Elastic Transcoder supports a maximum of one embedded format per output.
        ///
        /// * Sidecar: Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file. Valid input values include: dfxp (first div element only), ebu-tt, scc, smpt, srt, ttml (first div element only), and webvtt Valid outputs include: dfxp (first div element only), scc, srt, and webvtt.
        ///
        ///
        /// If you want ttml or smpte-tt compatible captions, specify dfxp as your output format. Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process. To remove captions or leave the captions empty, set Captions to null. To pass through existing captions unchanged, set the MergePolicy to MergeRetain, and pass in a null CaptionSources array. For more information on embedded files, see the Subtitles Wikipedia page. For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.
        public var captions: ElasticTranscoderClientTypes.Captions?
        /// You can create an output file that contains an excerpt from the input file. This excerpt, called a clip, can come from the beginning, middle, or end of the file. The Composition object contains settings for the clips that make up an output file. For the current release, you can only specify settings for a single clip per output file. The Composition object cannot be null.
        @available(*, deprecated)
        public var composition: [ElasticTranscoderClientTypes.Clip]?
        /// Duration of the output file, in seconds.
        public var duration: Swift.Int?
        /// Duration of the output file, in milliseconds.
        public var durationMillis: Swift.Int?
        /// The encryption settings, if any, that you want Elastic Transcoder to apply to your output files. If you choose to use encryption, you must specify a mode to use. If you choose not to use encryption, Elastic Transcoder writes an unencrypted file to your Amazon S3 bucket.
        public var encryption: ElasticTranscoderClientTypes.Encryption?
        /// File size of the output file, in bytes.
        public var fileSize: Swift.Int?
        /// Frame rate of the output file, in frames per second.
        public var frameRate: Swift.String?
        /// Height of the output file, in pixels.
        public var height: Swift.Int?
        /// A sequential counter, starting with 1, that identifies an output among the outputs from the current job. In the Output syntax, this value is always 1.
        public var id: Swift.String?
        /// The name to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon S3 bucket specified by the OutputBucket object in the pipeline that is specified by the pipeline ID.
        public var key: Swift.String?
        /// The value of the Id object for the preset that you want to use for this job. The preset determines the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding. To use a preset that you created, specify the preset ID that Elastic Transcoder returned in the response when you created the preset. You can also use the Elastic Transcoder system presets, which you can get with ListPresets.
        public var presetId: Swift.String?
        /// The number of degrees clockwise by which you want Elastic Transcoder to rotate the output relative to the input. Enter one of the following values: auto, 0, 90, 180, 270 The value auto generally works only if the file that you're transcoding contains rotation metadata.
        public var rotate: Swift.String?
        /// (Outputs in Fragmented MP4 or MPEG-TS format only. If you specify a preset in PresetId for which the value of Container is fmp4 (Fragmented MP4) or ts (MPEG-TS), SegmentDuration is the target maximum duration of each segment in seconds. For HLSv3 format playlists, each media segment is stored in a separate .ts file. For HLSv4, MPEG-DASH, and Smooth playlists, all media segments for an output are stored in a single file. Each segment is approximately the length of the SegmentDuration, though individual segments might be shorter or longer. The range of valid values is 1 to 60 seconds. If the duration of the video is not evenly divisible by SegmentDuration, the duration of the last segment is the remainder of total length/SegmentDuration. Elastic Transcoder creates an output-specific playlist for each output HLS output that you specify in OutputKeys. To add an output to the master playlist for this job, include it in the OutputKeys of the associated playlist.
        public var segmentDuration: Swift.String?
        /// The status of one output in a job. If you specified only one output for the job, Outputs:Status is always the same as Job:Status. If you specified more than one output:
        ///
        /// * Job:Status and Outputs:Status for all of the outputs is Submitted until Elastic Transcoder starts to process the first output.
        ///
        /// * When Elastic Transcoder starts to process the first output, Outputs:Status for that output and Job:Status both change to Progressing. For each output, the value of Outputs:Status remains Submitted until Elastic Transcoder starts to process the output.
        ///
        /// * Job:Status remains Progressing until all of the outputs reach a terminal status, either Complete or Error.
        ///
        /// * When all of the outputs reach a terminal status, Job:Status changes to Complete only if Outputs:Status for all of the outputs is Complete. If Outputs:Status for one or more outputs is Error, the terminal status for Job:Status is also Error.
        ///
        ///
        /// The value of Status is one of the following: Submitted, Progressing, Complete, Canceled, or Error.
        public var status: Swift.String?
        /// Information that further explains Status.
        public var statusDetail: Swift.String?
        /// The encryption settings, if any, that you want Elastic Transcoder to apply to your thumbnail.
        public var thumbnailEncryption: ElasticTranscoderClientTypes.Encryption?
        /// Whether you want Elastic Transcoder to create thumbnails for your videos and, if so, how you want Elastic Transcoder to name the files. If you don't want Elastic Transcoder to create thumbnails, specify "". If you do want Elastic Transcoder to create thumbnails, specify the information that you want to include in the file name for each thumbnail. You can specify the following values in any sequence:
        ///
        /// * {count} (Required): If you want to create thumbnails, you must include {count} in the ThumbnailPattern object. Wherever you specify {count}, Elastic Transcoder adds a five-digit sequence number (beginning with 00001) to thumbnail file names. The number indicates where a given thumbnail appears in the sequence of thumbnails for a transcoded file. If you specify a literal value and/or {resolution} but you omit {count}, Elastic Transcoder returns a validation error and does not create the job.
        ///
        /// * Literal values (Optional): You can specify literal values anywhere in the ThumbnailPattern object. For example, you can include them as a file name prefix or as a delimiter between {resolution} and {count}.
        ///
        /// * {resolution} (Optional): If you want Elastic Transcoder to include the resolution in the file name, include {resolution} in the ThumbnailPattern object.
        ///
        ///
        /// When creating thumbnails, Elastic Transcoder automatically saves the files in the format (.jpg or .png) that appears in the preset that you specified in the PresetID value of CreateJobOutput. Elastic Transcoder also appends the applicable file name extension.
        public var thumbnailPattern: Swift.String?
        /// Information about the watermarks that you want Elastic Transcoder to add to the video during transcoding. You can specify up to four watermarks for each output. Settings for each watermark must be defined in the preset that you specify in Preset for the current output. Watermarks are added to the output video in the sequence in which you list them in the job output—the first watermark in the list is added to the output video first, the second watermark in the list is added next, and so on. As a result, if the settings in a preset cause Elastic Transcoder to place all watermarks in the same location, the second watermark that you add covers the first one, the third one covers the second, and the fourth one covers the third.
        public var watermarks: [ElasticTranscoderClientTypes.JobWatermark]?
        /// Specifies the width of the output file in pixels.
        public var width: Swift.Int?

        public init(
            albumArt: ElasticTranscoderClientTypes.JobAlbumArt? = nil,
            appliedColorSpaceConversion: Swift.String? = nil,
            captions: ElasticTranscoderClientTypes.Captions? = nil,
            composition: [ElasticTranscoderClientTypes.Clip]? = nil,
            duration: Swift.Int? = nil,
            durationMillis: Swift.Int? = nil,
            encryption: ElasticTranscoderClientTypes.Encryption? = nil,
            fileSize: Swift.Int? = nil,
            frameRate: Swift.String? = nil,
            height: Swift.Int? = nil,
            id: Swift.String? = nil,
            key: Swift.String? = nil,
            presetId: Swift.String? = nil,
            rotate: Swift.String? = nil,
            segmentDuration: Swift.String? = nil,
            status: Swift.String? = nil,
            statusDetail: Swift.String? = nil,
            thumbnailEncryption: ElasticTranscoderClientTypes.Encryption? = nil,
            thumbnailPattern: Swift.String? = nil,
            watermarks: [ElasticTranscoderClientTypes.JobWatermark]? = nil,
            width: Swift.Int? = nil
        )
        {
            self.albumArt = albumArt
            self.appliedColorSpaceConversion = appliedColorSpaceConversion
            self.captions = captions
            self.composition = composition
            self.duration = duration
            self.durationMillis = durationMillis
            self.encryption = encryption
            self.fileSize = fileSize
            self.frameRate = frameRate
            self.height = height
            self.id = id
            self.key = key
            self.presetId = presetId
            self.rotate = rotate
            self.segmentDuration = segmentDuration
            self.status = status
            self.statusDetail = statusDetail
            self.thumbnailEncryption = thumbnailEncryption
            self.thumbnailPattern = thumbnailPattern
            self.watermarks = watermarks
            self.width = width
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Use Only for Fragmented MP4 or MPEG-TS Outputs. If you specify a preset for which the value of Container is fmp4 (Fragmented MP4) or ts (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create. We recommend that you create only one master playlist per output format. The maximum number of master playlists in a job is 30.
    public struct Playlist: Swift.Sendable {
        /// The format of the output playlist. Valid formats include HLSv3, HLSv4, and Smooth.
        public var format: Swift.String?
        /// The HLS content protection settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.
        public var hlsContentProtection: ElasticTranscoderClientTypes.HlsContentProtection?
        /// The name that you want Elastic Transcoder to assign to the master playlist, for example, nyc-vacation.m3u8. If the name includes a / character, the section of the name before the last / must be identical for all Name objects. If you create more than one master playlist, the values of all Name objects must be unique. Elastic Transcoder automatically appends the relevant file extension to the file name (.m3u8 for HLSv3 and HLSv4 playlists, and .ism and .ismc for Smooth playlists). If you include a file extension in Name, the file name will have two extensions.
        public var name: Swift.String?
        /// For each output in this job that you want to include in a master playlist, the value of the Outputs:Key object.
        ///
        /// * If your output is not HLS or does not have a segment duration set, the name of the output file is a concatenation of OutputKeyPrefix and Outputs:Key: OutputKeyPrefixOutputs:Key
        ///
        /// * If your output is HLSv3 and has a segment duration set, or is not included in a playlist, Elastic Transcoder creates an output playlist file with a file extension of .m3u8, and a series of .ts files that include a five-digit sequential counter beginning with 00000: OutputKeyPrefixOutputs:Key.m3u8 OutputKeyPrefixOutputs:Key00000.ts
        ///
        /// * If your output is HLSv4, has a segment duration set, and is included in an HLSv4 playlist, Elastic Transcoder creates an output playlist file with a file extension of _v4.m3u8. If the output is video, Elastic Transcoder also creates an output file with an extension of _iframe.m3u8: OutputKeyPrefixOutputs:Key_v4.m3u8 OutputKeyPrefixOutputs:Key_iframe.m3u8 OutputKeyPrefixOutputs:Key.ts
        ///
        ///
        /// Elastic Transcoder automatically appends the relevant file extension to the file name. If you include a file extension in Output Key, the file name will have two extensions.
        ///
        ///
        /// If you include more than one output in a playlist, any segment duration settings, clip settings, or caption settings must be the same for all outputs in the playlist. For Smooth playlists, the Audio:Profile, Video:Profile, and Video:FrameRate to Video:KeyframesMaxDist ratio must be the same for all outputs.
        public var outputKeys: [Swift.String]?
        /// The DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.
        public var playReadyDrm: ElasticTranscoderClientTypes.PlayReadyDrm?
        /// The status of the job with which the playlist is associated.
        public var status: Swift.String?
        /// Information that further explains the status.
        public var statusDetail: Swift.String?

        public init(
            format: Swift.String? = nil,
            hlsContentProtection: ElasticTranscoderClientTypes.HlsContentProtection? = nil,
            name: Swift.String? = nil,
            outputKeys: [Swift.String]? = nil,
            playReadyDrm: ElasticTranscoderClientTypes.PlayReadyDrm? = nil,
            status: Swift.String? = nil,
            statusDetail: Swift.String? = nil
        )
        {
            self.format = format
            self.hlsContentProtection = hlsContentProtection
            self.name = name
            self.outputKeys = outputKeys
            self.playReadyDrm = playReadyDrm
            self.status = status
            self.statusDetail = statusDetail
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Details about the timing of a job.
    public struct Timing: Swift.Sendable {
        /// The time the job finished transcoding, in epoch milliseconds.
        public var finishTimeMillis: Swift.Int?
        /// The time the job began transcoding, in epoch milliseconds.
        public var startTimeMillis: Swift.Int?
        /// The time the job was submitted to Elastic Transcoder, in epoch milliseconds.
        public var submitTimeMillis: Swift.Int?

        public init(
            finishTimeMillis: Swift.Int? = nil,
            startTimeMillis: Swift.Int? = nil,
            submitTimeMillis: Swift.Int? = nil
        )
        {
            self.finishTimeMillis = finishTimeMillis
            self.startTimeMillis = startTimeMillis
            self.submitTimeMillis = submitTimeMillis
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// A section of the response body that provides information about the job that is created.
    public struct Job: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the job.
        public var arn: Swift.String?
        /// The identifier that Elastic Transcoder assigned to the job. You use this value to get settings for the job or to delete the job.
        public var id: Swift.String?
        /// A section of the request or response body that provides information about the file that is being transcoded.
        public var input: ElasticTranscoderClientTypes.JobInput?
        /// Information about the files that you're transcoding. If you specified multiple files for this job, Elastic Transcoder stitches the files together to make one output.
        public var inputs: [ElasticTranscoderClientTypes.JobInput]?
        /// If you specified one output for a job, information about that output. If you specified multiple outputs for a job, the Output object lists information about the first output. This duplicates the information that is listed for the first output in the Outputs object. Outputs recommended instead. A section of the request or response body that provides information about the transcoded (target) file.
        public var output: ElasticTranscoderClientTypes.JobOutput?
        /// The value, if any, that you want Elastic Transcoder to prepend to the names of all files that this job creates, including output files, thumbnails, and playlists. We recommend that you add a / or some other delimiter to the end of the OutputKeyPrefix.
        public var outputKeyPrefix: Swift.String?
        /// Information about the output files. We recommend that you use the Outputs syntax for all jobs, even when you want Elastic Transcoder to transcode a file into only one format. Do not use both the Outputs and Output syntaxes in the same request. You can create a maximum of 30 outputs per job. If you specify more than one output for a job, Elastic Transcoder creates the files for each output in the order in which you specify them in the job.
        public var outputs: [ElasticTranscoderClientTypes.JobOutput]?
        /// The Id of the pipeline that you want Elastic Transcoder to use for transcoding. The pipeline determines several settings, including the Amazon S3 bucket from which Elastic Transcoder gets the files to transcode and the bucket into which Elastic Transcoder puts the transcoded files.
        public var pipelineId: Swift.String?
        /// Outputs in Fragmented MP4 or MPEG-TS format only. If you specify a preset in PresetId for which the value of Container is fmp4 (Fragmented MP4) or ts (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create. The maximum number of master playlists in a job is 30.
        public var playlists: [ElasticTranscoderClientTypes.Playlist]?
        /// The status of the job: Submitted, Progressing, Complete, Canceled, or Error.
        public var status: Swift.String?
        /// Details about the timing of a job.
        public var timing: ElasticTranscoderClientTypes.Timing?
        /// User-defined metadata that you want to associate with an Elastic Transcoder job. You specify metadata in key/value pairs, and you can add up to 10 key/value pairs per job. Elastic Transcoder does not guarantee that key/value pairs are returned in the same order in which you specify them. Metadata keys and values must use characters from the following list:
        ///
        /// * 0-9
        ///
        /// * A-Z and a-z
        ///
        /// * Space
        ///
        /// * The following symbols: _.:/=+-%@
        public var userMetadata: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            input: ElasticTranscoderClientTypes.JobInput? = nil,
            inputs: [ElasticTranscoderClientTypes.JobInput]? = nil,
            output: ElasticTranscoderClientTypes.JobOutput? = nil,
            outputKeyPrefix: Swift.String? = nil,
            outputs: [ElasticTranscoderClientTypes.JobOutput]? = nil,
            pipelineId: Swift.String? = nil,
            playlists: [ElasticTranscoderClientTypes.Playlist]? = nil,
            status: Swift.String? = nil,
            timing: ElasticTranscoderClientTypes.Timing? = nil,
            userMetadata: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.input = input
            self.inputs = inputs
            self.output = output
            self.outputKeyPrefix = outputKeyPrefix
            self.outputs = outputs
            self.pipelineId = pipelineId
            self.playlists = playlists
            self.status = status
            self.timing = timing
            self.userMetadata = userMetadata
        }
    }
}

/// The CreateJobResponse structure.
public struct CreateJobOutput: Swift.Sendable {
    /// A section of the response body that provides information about the job that is created.
    public var job: ElasticTranscoderClientTypes.Job?

    public init(
        job: ElasticTranscoderClientTypes.Job? = nil
    )
    {
        self.job = job
    }
}

extension ElasticTranscoderClientTypes {

    /// The Permission structure.
    public struct Permission: Swift.Sendable {
        /// The permission that you want to give to the AWS user that is listed in Grantee. Valid values include:
        ///
        /// * READ: The grantee can read the thumbnails and metadata for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * WRITE_ACP: The grantee can write the ACL for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        public var access: [Swift.String]?
        /// The AWS user or group that you want to have access to transcoded files and playlists. To identify the user or group, you can specify the canonical user ID for an AWS account, an origin access identity for a CloudFront distribution, the registered email address of an AWS account, or a predefined Amazon S3 group.
        public var grantee: Swift.String?
        /// The type of value that appears in the Grantee object:
        ///
        /// * Canonical: Either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution. A canonical user ID is not the same as an AWS account number.
        ///
        /// * Email: The registered email address of an AWS account.
        ///
        /// * Group: One of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
        public var granteeType: Swift.String?

        public init(
            access: [Swift.String]? = nil,
            grantee: Swift.String? = nil,
            granteeType: Swift.String? = nil
        )
        {
            self.access = access
            self.grantee = grantee
            self.granteeType = granteeType
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The PipelineOutputConfig structure.
    public struct PipelineOutputConfig: Swift.Sendable {
        /// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files. Specify this value when all of the following are true:
        ///
        /// * You want to save transcoded files, thumbnails (if any), and playlists (if any) together in one bucket.
        ///
        /// * You do not want to specify the users or groups who have access to the transcoded files, thumbnails, and playlists.
        ///
        /// * You do not want to specify the permissions that Elastic Transcoder grants to the files.
        ///
        /// * You want to associate the transcoded files and thumbnails with the Amazon S3 Standard storage class.
        ///
        ///
        /// If you want to save transcoded files and playlists in one bucket and thumbnails in another bucket, specify which users can access the transcoded files or the permissions the users have, or change the Amazon S3 storage class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig instead.
        public var bucket: Swift.String?
        /// Optional. The Permissions object specifies which users and/or predefined Amazon S3 groups you want to have access to transcoded files and playlists, and the type of access you want them to have. You can grant permissions to a maximum of 30 users and/or predefined Amazon S3 groups. If you include Permissions, Elastic Transcoder grants only the permissions that you specify. It does not grant full permissions to the owner of the role specified by Role. If you want that user to have full control, you must explicitly grant full control to the user. If you omit Permissions, Elastic Transcoder grants full control over the transcoded files and playlists to the owner of the role specified by Role, and grants no other permissions to any other user or group.
        public var permissions: [ElasticTranscoderClientTypes.Permission]?
        /// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files and playlists that it stores in your Amazon S3 bucket.
        public var storageClass: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            permissions: [ElasticTranscoderClientTypes.Permission]? = nil,
            storageClass: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.permissions = permissions
            self.storageClass = storageClass
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status. To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.
    public struct Notifications: Swift.Sendable {
        /// The Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing the job.
        public var completed: Swift.String?
        /// The Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition.
        public var error: Swift.String?
        /// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process the job.
        public var progressing: Swift.String?
        /// The Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition.
        public var warning: Swift.String?

        public init(
            completed: Swift.String? = nil,
            error: Swift.String? = nil,
            progressing: Swift.String? = nil,
            warning: Swift.String? = nil
        )
        {
            self.completed = completed
            self.error = error
            self.progressing = progressing
            self.warning = warning
        }
    }
}

/// The CreatePipelineRequest structure.
public struct CreatePipelineInput: Swift.Sendable {
    /// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline. If you use either s3 or s3-aws-kms as your Encryption:Mode, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an Encryption:Mode of aes-cbc-pkcs7, aes-ctr, or aes-gcm.
    public var awsKmsKeyArn: Swift.String?
    /// The optional ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists: which bucket to use, which users you want to have access to the files, the type of access you want users to have, and the storage class that you want to assign to the files. If you specify values for ContentConfig, you must also specify values for ThumbnailConfig. If you specify values for ContentConfig and ThumbnailConfig, omit the OutputBucket object.
    ///
    /// * Bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
    ///
    /// * Permissions (Optional): The Permissions object specifies which users you want to have access to transcoded files and the type of access you want them to have. You can grant permissions to a maximum of 30 users and/or predefined Amazon S3 groups.
    ///
    /// * Grantee Type: Specify the type of value that appears in the Grantee object:
    ///
    /// * Canonical: The value in the Grantee object is either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution. For more information about canonical user IDs, see Access Control List (ACL) Overview in the Amazon Simple Storage Service Developer Guide. For more information about using CloudFront origin access identities to require that users use CloudFront URLs instead of Amazon S3 URLs, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content. A canonical user ID is not the same as an AWS account number.
    ///
    /// * Email: The value in the Grantee object is the registered email address of an AWS account.
    ///
    /// * Group: The value in the Grantee object is one of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
    ///
    ///
    ///
    ///
    /// * Grantee: The AWS user or group that you want to have access to transcoded files and playlists. To identify the user or group, you can specify the canonical user ID for an AWS account, an origin access identity for a CloudFront distribution, the registered email address of an AWS account, or a predefined Amazon S3 group
    ///
    /// * Access: The permission that you want to give to the AWS user that you specified in Grantee. Permissions are granted on the files that Elastic Transcoder adds to the bucket, including playlists and video files. Valid values include:
    ///
    /// * READ: The grantee can read the objects and metadata for objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * READ_ACP: The grantee can read the object ACL for objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * WRITE_ACP: The grantee can write the ACL for the objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    ///
    ///
    ///
    /// * StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files and playlists that it stores in your Amazon S3 bucket.
    public var contentConfig: ElasticTranscoderClientTypes.PipelineOutputConfig?
    /// The Amazon S3 bucket in which you saved the media files that you want to transcode.
    /// This member is required.
    public var inputBucket: Swift.String?
    /// The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced. Constraints: Maximum 40 characters.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.
    ///
    /// * Progressing: The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline. This is the ARN that Amazon SNS returned when you created the topic. For more information, see Create a Topic in the Amazon Simple Notification Service Developer Guide.
    ///
    /// * Complete: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Warning: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Error: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline. This is the ARN that Amazon SNS returned when you created the topic.
    public var notifications: ElasticTranscoderClientTypes.Notifications?
    /// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files. (Use this, or use ContentConfig:Bucket plus ThumbnailConfig:Bucket.) Specify this value when all of the following are true:
    ///
    /// * You want to save transcoded files, thumbnails (if any), and playlists (if any) together in one bucket.
    ///
    /// * You do not want to specify the users or groups who have access to the transcoded files, thumbnails, and playlists.
    ///
    /// * You do not want to specify the permissions that Elastic Transcoder grants to the files. When Elastic Transcoder saves files in OutputBucket, it grants full control over the files only to the AWS account that owns the role that is specified by Role.
    ///
    /// * You want to associate the transcoded files and thumbnails with the Amazon S3 Standard storage class.
    ///
    ///
    /// If you want to save transcoded files and playlists in one bucket and thumbnails in another bucket, specify which users can access the transcoded files or the permissions the users have, or change the Amazon S3 storage class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig instead.
    public var outputBucket: Swift.String?
    /// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to create the pipeline.
    /// This member is required.
    public var role: Swift.String?
    /// The ThumbnailConfig object specifies several values, including the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files, which users you want to have access to the files, the type of access you want users to have, and the storage class that you want to assign to the files. If you specify values for ContentConfig, you must also specify values for ThumbnailConfig even if you don't want to create thumbnails. If you specify values for ContentConfig and ThumbnailConfig, omit the OutputBucket object.
    ///
    /// * Bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
    ///
    /// * Permissions (Optional): The Permissions object specifies which users and/or predefined Amazon S3 groups you want to have access to thumbnail files, and the type of access you want them to have. You can grant permissions to a maximum of 30 users and/or predefined Amazon S3 groups.
    ///
    /// * GranteeType: Specify the type of value that appears in the Grantee object:
    ///
    /// * Canonical: The value in the Grantee object is either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution. A canonical user ID is not the same as an AWS account number.
    ///
    /// * Email: The value in the Grantee object is the registered email address of an AWS account.
    ///
    /// * Group: The value in the Grantee object is one of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
    ///
    ///
    ///
    ///
    /// * Grantee: The AWS user or group that you want to have access to thumbnail files. To identify the user or group, you can specify the canonical user ID for an AWS account, an origin access identity for a CloudFront distribution, the registered email address of an AWS account, or a predefined Amazon S3 group.
    ///
    /// * Access: The permission that you want to give to the AWS user that you specified in Grantee. Permissions are granted on the thumbnail files that Elastic Transcoder adds to the bucket. Valid values include:
    ///
    /// * READ: The grantee can read the thumbnails and metadata for objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * WRITE_ACP: The grantee can write the ACL for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    ///
    ///
    ///
    /// * StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
    public var thumbnailConfig: ElasticTranscoderClientTypes.PipelineOutputConfig?

    public init(
        awsKmsKeyArn: Swift.String? = nil,
        contentConfig: ElasticTranscoderClientTypes.PipelineOutputConfig? = nil,
        inputBucket: Swift.String? = nil,
        name: Swift.String? = nil,
        notifications: ElasticTranscoderClientTypes.Notifications? = nil,
        outputBucket: Swift.String? = nil,
        role: Swift.String? = nil,
        thumbnailConfig: ElasticTranscoderClientTypes.PipelineOutputConfig? = nil
    )
    {
        self.awsKmsKeyArn = awsKmsKeyArn
        self.contentConfig = contentConfig
        self.inputBucket = inputBucket
        self.name = name
        self.notifications = notifications
        self.outputBucket = outputBucket
        self.role = role
        self.thumbnailConfig = thumbnailConfig
    }
}

extension ElasticTranscoderClientTypes {

    /// The pipeline (queue) that is used to manage jobs.
    public struct Pipeline: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the pipeline.
        public var arn: Swift.String?
        /// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline. If you use either s3 or s3-aws-kms as your Encryption:Mode, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an Encryption:Mode of aes-cbc-pkcs7, aes-ctr, or aes-gcm.
        public var awsKmsKeyArn: Swift.String?
        /// Information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. Either you specify both ContentConfig and ThumbnailConfig, or you specify OutputBucket.
        ///
        /// * Bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
        ///
        /// * Permissions: A list of the users and/or predefined Amazon S3 groups you want to have access to transcoded files and playlists, and the type of access that you want them to have.
        ///
        /// * GranteeType: The type of value that appears in the Grantee object:
        ///
        /// * Canonical: Either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution.
        ///
        /// * Email: The registered email address of an AWS account.
        ///
        /// * Group: One of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
        ///
        ///
        ///
        ///
        /// * Grantee: The AWS user or group that you want to have access to transcoded files and playlists.
        ///
        /// * Access: The permission that you want to give to the AWS user that is listed in Grantee. Valid values include:
        ///
        /// * READ: The grantee can read the objects and metadata for objects that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * READ_ACP: The grantee can read the object ACL for objects that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * WRITE_ACP: The grantee can write the ACL for the objects that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the objects that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files and playlists that it stores in your Amazon S3 bucket.
        public var contentConfig: ElasticTranscoderClientTypes.PipelineOutputConfig?
        /// The identifier for the pipeline. You use this value to identify the pipeline in which you want to perform a variety of operations, such as creating a job or a preset.
        public var id: Swift.String?
        /// The Amazon S3 bucket from which Elastic Transcoder gets media files for transcoding and the graphics files, if any, that you want to use for watermarks.
        public var inputBucket: Swift.String?
        /// The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced. Constraints: Maximum 40 characters
        public var name: Swift.String?
        /// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.
        ///
        /// * Progressing (optional): The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process the job.
        ///
        /// * Complete (optional): The Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing the job.
        ///
        /// * Warning (optional): The Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition.
        ///
        /// * Error (optional): The Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition.
        public var notifications: ElasticTranscoderClientTypes.Notifications?
        /// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files, thumbnails, and playlists. Either you specify this value, or you specify both ContentConfig and ThumbnailConfig.
        public var outputBucket: Swift.String?
        /// The IAM Amazon Resource Name (ARN) for the role that Elastic Transcoder uses to transcode jobs for this pipeline.
        public var role: Swift.String?
        /// The current status of the pipeline:
        ///
        /// * Active: The pipeline is processing jobs.
        ///
        /// * Paused: The pipeline is not currently processing jobs.
        public var status: Swift.String?
        /// Information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. Either you specify both ContentConfig and ThumbnailConfig, or you specify OutputBucket.
        ///
        /// * Bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
        ///
        /// * Permissions: A list of the users and/or predefined Amazon S3 groups you want to have access to thumbnail files, and the type of access that you want them to have.
        ///
        /// * GranteeType: The type of value that appears in the Grantee object:
        ///
        /// * Canonical: Either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution. A canonical user ID is not the same as an AWS account number.
        ///
        /// * Email: The registered email address of an AWS account.
        ///
        /// * Group: One of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
        ///
        ///
        ///
        ///
        /// * Grantee: The AWS user or group that you want to have access to thumbnail files.
        ///
        /// * Access: The permission that you want to give to the AWS user that is listed in Grantee. Valid values include:
        ///
        /// * READ: The grantee can read the thumbnails and metadata for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * WRITE_ACP: The grantee can write the ACL for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
        public var thumbnailConfig: ElasticTranscoderClientTypes.PipelineOutputConfig?

        public init(
            arn: Swift.String? = nil,
            awsKmsKeyArn: Swift.String? = nil,
            contentConfig: ElasticTranscoderClientTypes.PipelineOutputConfig? = nil,
            id: Swift.String? = nil,
            inputBucket: Swift.String? = nil,
            name: Swift.String? = nil,
            notifications: ElasticTranscoderClientTypes.Notifications? = nil,
            outputBucket: Swift.String? = nil,
            role: Swift.String? = nil,
            status: Swift.String? = nil,
            thumbnailConfig: ElasticTranscoderClientTypes.PipelineOutputConfig? = nil
        )
        {
            self.arn = arn
            self.awsKmsKeyArn = awsKmsKeyArn
            self.contentConfig = contentConfig
            self.id = id
            self.inputBucket = inputBucket
            self.name = name
            self.notifications = notifications
            self.outputBucket = outputBucket
            self.role = role
            self.status = status
            self.thumbnailConfig = thumbnailConfig
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline. Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.
    public struct Warning: Swift.Sendable {
        /// The code of the cross-regional warning.
        public var code: Swift.String?
        /// The message explaining what resources are in a different region from the pipeline. AWS KMS keys must be in the same region as the pipeline.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

/// When you create a pipeline, Elastic Transcoder returns the values that you specified in the request.
public struct CreatePipelineOutput: Swift.Sendable {
    /// A section of the response body that provides information about the pipeline that is created.
    public var pipeline: ElasticTranscoderClientTypes.Pipeline?
    /// Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline. Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.
    public var warnings: [ElasticTranscoderClientTypes.Warning]?

    public init(
        pipeline: ElasticTranscoderClientTypes.Pipeline? = nil,
        warnings: [ElasticTranscoderClientTypes.Warning]? = nil
    )
    {
        self.pipeline = pipeline
        self.warnings = warnings
    }
}

extension ElasticTranscoderClientTypes {

    /// Thumbnails for videos.
    public struct Thumbnails: Swift.Sendable {
        /// To better control resolution and aspect ratio of thumbnails, we recommend that you use the values MaxWidth, MaxHeight, SizingPolicy, and PaddingPolicy instead of Resolution and AspectRatio. The two groups of settings are mutually exclusive. Do not use them together. The aspect ratio of thumbnails. Valid values include: auto, 1:1, 4:3, 3:2, 16:9 If you specify auto, Elastic Transcoder tries to preserve the aspect ratio of the video in the output file.
        public var aspectRatio: Swift.String?
        /// The format of thumbnails, if any. Valid values are jpg and png. You specify whether you want Elastic Transcoder to create thumbnails when you create a job.
        public var format: Swift.String?
        /// The approximate number of seconds between thumbnails. Specify an integer value.
        public var interval: Swift.String?
        /// The maximum height of thumbnails in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072.
        public var maxHeight: Swift.String?
        /// The maximum width of thumbnails in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096.
        public var maxWidth: Swift.String?
        /// When you set PaddingPolicy to Pad, Elastic Transcoder may add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
        public var paddingPolicy: Swift.String?
        /// To better control resolution and aspect ratio of thumbnails, we recommend that you use the values MaxWidth, MaxHeight, SizingPolicy, and PaddingPolicy instead of Resolution and AspectRatio. The two groups of settings are mutually exclusive. Do not use them together. The width and height of thumbnail files in pixels. Specify a value in the format  width  x  height  where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object.
        public var resolution: Swift.String?
        /// Specify one of the following values to control scaling of thumbnails:
        ///
        /// * Fit: Elastic Transcoder scales thumbnails so they match the value that you specified in thumbnail MaxWidth or MaxHeight settings without exceeding the other value.
        ///
        /// * Fill: Elastic Transcoder scales thumbnails so they match the value that you specified in thumbnail MaxWidth or MaxHeight settings and matches or exceeds the other value. Elastic Transcoder centers the image in thumbnails and then crops in the dimension (if any) that exceeds the maximum value.
        ///
        /// * Stretch: Elastic Transcoder stretches thumbnails to match the values that you specified for thumbnail MaxWidth and MaxHeight settings. If the relative proportions of the input video and thumbnails are different, the thumbnails will be distorted.
        ///
        /// * Keep: Elastic Transcoder does not scale thumbnails. If either dimension of the input video exceeds the values that you specified for thumbnail MaxWidth and MaxHeight settings, Elastic Transcoder crops the thumbnails.
        ///
        /// * ShrinkToFit: Elastic Transcoder scales thumbnails down so that their dimensions match the values that you specified for at least one of thumbnail MaxWidth and MaxHeight without exceeding either value. If you specify this option, Elastic Transcoder does not scale thumbnails up.
        ///
        /// * ShrinkToFill: Elastic Transcoder scales thumbnails down so that their dimensions match the values that you specified for at least one of MaxWidth and MaxHeight without dropping below either value. If you specify this option, Elastic Transcoder does not scale thumbnails up.
        public var sizingPolicy: Swift.String?

        public init(
            aspectRatio: Swift.String? = nil,
            format: Swift.String? = nil,
            interval: Swift.String? = nil,
            maxHeight: Swift.String? = nil,
            maxWidth: Swift.String? = nil,
            paddingPolicy: Swift.String? = nil,
            resolution: Swift.String? = nil,
            sizingPolicy: Swift.String? = nil
        )
        {
            self.aspectRatio = aspectRatio
            self.format = format
            self.interval = interval
            self.maxHeight = maxHeight
            self.maxWidth = maxWidth
            self.paddingPolicy = paddingPolicy
            self.resolution = resolution
            self.sizingPolicy = sizingPolicy
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// Settings for the size, location, and opacity of graphics that you want Elastic Transcoder to overlay over videos that are transcoded using this preset. You can specify settings for up to four watermarks. Watermarks appear in the specified size and location, and with the specified opacity for the duration of the transcoded video. Watermarks can be in .png or .jpg format. If you want to display a watermark that is not rectangular, use the .png format, which supports transparency. When you create a job that uses this preset, you specify the .png or .jpg graphics that you want Elastic Transcoder to include in the transcoded videos. You can specify fewer graphics in the job than you specify watermark settings in the preset, which allows you to use the same preset for up to four watermarks that have different dimensions.
    public struct PresetWatermark: Swift.Sendable {
        /// The horizontal position of the watermark unless you specify a non-zero value for HorizontalOffset:
        ///
        /// * Left: The left edge of the watermark is aligned with the left border of the video.
        ///
        /// * Right: The right edge of the watermark is aligned with the right border of the video.
        ///
        /// * Center: The watermark is centered between the left and right borders.
        public var horizontalAlign: Swift.String?
        /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by HorizontalAlign:
        ///
        /// * number of pixels (px): The minimum value is 0 pixels, and the maximum value is the value of MaxWidth.
        ///
        /// * integer percentage (%): The range of valid values is 0 to 100.
        ///
        ///
        /// For example, if you specify Left for HorizontalAlign and 5px for HorizontalOffset, the left side of the watermark appears 5 pixels from the left border of the output video. HorizontalOffset is only valid when the value of HorizontalAlign is Left or Right. If you specify an offset that causes the watermark to extend beyond the left or right border and Elastic Transcoder has not added black bars, the watermark is cropped. If Elastic Transcoder has added black bars, the watermark extends into the black bars. If the watermark extends beyond the black bars, it is cropped. Use the value of Target to specify whether you want to include the black bars that are added by Elastic Transcoder, if any, in the offset calculation.
        public var horizontalOffset: Swift.String?
        /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long.
        public var id: Swift.String?
        /// The maximum height of the watermark in one of the following formats:
        ///
        /// * number of pixels (px): The minimum value is 16 pixels, and the maximum value is the value of MaxHeight.
        ///
        /// * integer percentage (%): The range of valid values is 0 to 100. Use the value of Target to specify whether you want Elastic Transcoder to include the black bars that are added by Elastic Transcoder, if any, in the calculation.
        ///
        ///
        /// If you specify the value in pixels, it must be less than or equal to the value of MaxHeight.
        public var maxHeight: Swift.String?
        /// The maximum width of the watermark in one of the following formats:
        ///
        /// * number of pixels (px): The minimum value is 16 pixels, and the maximum value is the value of MaxWidth.
        ///
        /// * integer percentage (%): The range of valid values is 0 to 100. Use the value of Target to specify whether you want Elastic Transcoder to include the black bars that are added by Elastic Transcoder, if any, in the calculation. If you specify the value in pixels, it must be less than or equal to the value of MaxWidth.
        public var maxWidth: Swift.String?
        /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears. Valid values are 0 (the watermark is invisible) to 100 (the watermark completely obscures the video in the specified location). The datatype of Opacity is float. Elastic Transcoder supports transparent .png graphics. If you use a transparent .png, the transparent portion of the video appears as if you had specified a value of 0 for Opacity. The .jpg file format doesn't support transparency.
        public var opacity: Swift.String?
        /// A value that controls scaling of the watermark:
        ///
        /// * Fit: Elastic Transcoder scales the watermark so it matches the value that you specified in either MaxWidth or MaxHeight without exceeding the other value.
        ///
        /// * Stretch: Elastic Transcoder stretches the watermark to match the values that you specified for MaxWidth and MaxHeight. If the relative proportions of the watermark and the values of MaxWidth and MaxHeight are different, the watermark will be distorted.
        ///
        /// * ShrinkToFit: Elastic Transcoder scales the watermark down so that its dimensions match the values that you specified for at least one of MaxWidth and MaxHeight without exceeding either value. If you specify this option, Elastic Transcoder does not scale the watermark up.
        public var sizingPolicy: Swift.String?
        /// A value that determines how Elastic Transcoder interprets values that you specified for HorizontalOffset, VerticalOffset, MaxWidth, and MaxHeight:
        ///
        /// * Content: HorizontalOffset and VerticalOffset values are calculated based on the borders of the video excluding black bars added by Elastic Transcoder, if any. In addition, MaxWidth and MaxHeight, if specified as a percentage, are calculated based on the borders of the video excluding black bars added by Elastic Transcoder, if any.
        ///
        /// * Frame: HorizontalOffset and VerticalOffset values are calculated based on the borders of the video including black bars added by Elastic Transcoder, if any. In addition, MaxWidth and MaxHeight, if specified as a percentage, are calculated based on the borders of the video including black bars added by Elastic Transcoder, if any.
        public var target: Swift.String?
        /// The vertical position of the watermark unless you specify a non-zero value for VerticalOffset:
        ///
        /// * Top: The top edge of the watermark is aligned with the top border of the video.
        ///
        /// * Bottom: The bottom edge of the watermark is aligned with the bottom border of the video.
        ///
        /// * Center: The watermark is centered between the top and bottom borders.
        public var verticalAlign: Swift.String?
        /// VerticalOffset The amount by which you want the vertical position of the watermark to be offset from the position specified by VerticalAlign:
        ///
        /// * number of pixels (px): The minimum value is 0 pixels, and the maximum value is the value of MaxHeight.
        ///
        /// * integer percentage (%): The range of valid values is 0 to 100.
        ///
        ///
        /// For example, if you specify Top for VerticalAlign and 5px for VerticalOffset, the top of the watermark appears 5 pixels from the top border of the output video. VerticalOffset is only valid when the value of VerticalAlign is Top or Bottom. If you specify an offset that causes the watermark to extend beyond the top or bottom border and Elastic Transcoder has not added black bars, the watermark is cropped. If Elastic Transcoder has added black bars, the watermark extends into the black bars. If the watermark extends beyond the black bars, it is cropped. Use the value of Target to specify whether you want Elastic Transcoder to include the black bars that are added by Elastic Transcoder, if any, in the offset calculation.
        public var verticalOffset: Swift.String?

        public init(
            horizontalAlign: Swift.String? = nil,
            horizontalOffset: Swift.String? = nil,
            id: Swift.String? = nil,
            maxHeight: Swift.String? = nil,
            maxWidth: Swift.String? = nil,
            opacity: Swift.String? = nil,
            sizingPolicy: Swift.String? = nil,
            target: Swift.String? = nil,
            verticalAlign: Swift.String? = nil,
            verticalOffset: Swift.String? = nil
        )
        {
            self.horizontalAlign = horizontalAlign
            self.horizontalOffset = horizontalOffset
            self.id = id
            self.maxHeight = maxHeight
            self.maxWidth = maxWidth
            self.opacity = opacity
            self.sizingPolicy = sizingPolicy
            self.target = target
            self.verticalAlign = verticalAlign
            self.verticalOffset = verticalOffset
        }
    }
}

extension ElasticTranscoderClientTypes {

    /// The VideoParameters structure.
    public struct VideoParameters: Swift.Sendable {
        /// To better control resolution and aspect ratio of output videos, we recommend that you use the values MaxWidth, MaxHeight, SizingPolicy, PaddingPolicy, and DisplayAspectRatio instead of Resolution and AspectRatio. The two groups of settings are mutually exclusive. Do not use them together. The display aspect ratio of the video in the output file. Valid values include: auto, 1:1, 4:3, 3:2, 16:9 If you specify auto, Elastic Transcoder tries to preserve the aspect ratio of the input file. If you specify an aspect ratio for the output file that differs from aspect ratio of the input file, Elastic Transcoder adds pillarboxing (black bars on the sides) or letterboxing (black bars on the top and bottom) to maintain the aspect ratio of the active region of the video.
        public var aspectRatio: Swift.String?
        /// The bit rate of the video stream in the output file, in kilobits/second. Valid values depend on the values of Level and Profile. If you specify auto, Elastic Transcoder uses the detected bit rate of the input source. If you specify a value other than auto, we recommend that you specify a value less than or equal to the maximum H.264-compliant value listed for your level and profile: Level - Maximum video bit rate in kilobits/second (baseline and main Profile) : maximum video bit rate in kilobits/second (high Profile)
        ///
        /// * 1 - 64 : 80
        ///
        /// * 1b - 128 : 160
        ///
        /// * 1.1 - 192 : 240
        ///
        /// * 1.2 - 384 : 480
        ///
        /// * 1.3 - 768 : 960
        ///
        /// * 2 - 2000 : 2500
        ///
        /// * 3 - 10000 : 12500
        ///
        /// * 3.1 - 14000 : 17500
        ///
        /// * 3.2 - 20000 : 25000
        ///
        /// * 4 - 20000 : 25000
        ///
        /// * 4.1 - 50000 : 62500
        public var bitRate: Swift.String?
        /// The video codec for the output file. Valid values include gif, H.264, mpeg2, vp8, and vp9. You can only specify vp8 and vp9 when the container type is webm, gif when the container type is gif, and mpeg2 when the container type is mpg.
        public var codec: Swift.String?
        /// Profile (H.264/VP8/VP9 Only) The H.264 profile that you want to use for the output file. Elastic Transcoder supports the following profiles:
        ///
        /// * baseline: The profile most commonly used for videoconferencing and for mobile applications.
        ///
        /// * main: The profile used for standard-definition digital TV broadcasts.
        ///
        /// * high: The profile used for high-definition digital TV broadcasts and for Blu-ray discs.
        ///
        ///
        /// Level (H.264 Only) The H.264 level that you want to use for the output file. Elastic Transcoder supports the following levels: 1, 1b, 1.1, 1.2, 1.3, 2, 2.1, 2.2, 3, 3.1, 3.2, 4, 4.1 MaxReferenceFrames (H.264 Only) Applicable only when the value of Video:Codec is H.264. The maximum number of previously decoded frames to use as a reference for decoding future frames. Valid values are integers 0 through 16, but we recommend that you not use a value greater than the following: Min(Floor(Maximum decoded picture buffer in macroblocks * 256 / (Width in pixels * Height in pixels)), 16) where Width in pixels and Height in pixels represent either MaxWidth and MaxHeight, or Resolution. Maximum decoded picture buffer in macroblocks depends on the value of the Level object. See the list below. (A macroblock is a block of pixels measuring 16x16.)
        ///
        /// * 1 - 396
        ///
        /// * 1b - 396
        ///
        /// * 1.1 - 900
        ///
        /// * 1.2 - 2376
        ///
        /// * 1.3 - 2376
        ///
        /// * 2 - 2376
        ///
        /// * 2.1 - 4752
        ///
        /// * 2.2 - 8100
        ///
        /// * 3 - 8100
        ///
        /// * 3.1 - 18000
        ///
        /// * 3.2 - 20480
        ///
        /// * 4 - 32768
        ///
        /// * 4.1 - 32768
        ///
        ///
        /// MaxBitRate (Optional, H.264/MPEG2/VP8/VP9 only) The maximum number of bits per second in a video buffer; the size of the buffer is specified by BufferSize. Specify a value between 16 and 62,500. You can reduce the bandwidth required to stream a video by reducing the maximum bit rate, but this also reduces the quality of the video. BufferSize (Optional, H.264/MPEG2/VP8/VP9 only) The maximum number of bits in any x seconds of the output video. This window is commonly 10 seconds, the standard segment duration when you're using FMP4 or MPEG-TS for the container type of the output video. Specify an integer greater than 0. If you specify MaxBitRate and omit BufferSize, Elastic Transcoder sets BufferSize to 10 times the value of MaxBitRate. InterlacedMode (Optional, H.264/MPEG2 Only) The interlace mode for the output video. Interlaced video is used to double the perceived frame rate for a video by interlacing two fields (one field on every other line, the other field on the other lines) so that the human eye registers multiple pictures per frame. Interlacing reduces the bandwidth required for transmitting a video, but can result in blurred images and flickering. Valid values include Progressive (no interlacing, top to bottom), TopFirst (top field first), BottomFirst (bottom field first), and Auto. If InterlaceMode is not specified, Elastic Transcoder uses Progressive for the output. If Auto is specified, Elastic Transcoder interlaces the output. ColorSpaceConversionMode (Optional, H.264/MPEG2 Only) The color space conversion Elastic Transcoder applies to the output video. Color spaces are the algorithms used by the computer to store information about how to render color. Bt.601 is the standard for standard definition video, while Bt.709 is the standard for high definition video. Valid values include None, Bt709toBt601, Bt601toBt709, and Auto. If you chose Auto for ColorSpaceConversionMode and your output is interlaced, your frame rate is one of 23.97, 24, 25, 29.97, 50, or 60, your SegmentDuration is null, and you are using one of the resolution changes from the list below, Elastic Transcoder applies the following color space conversions:
        ///
        /// * Standard to HD, 720x480 to 1920x1080 - Elastic Transcoder applies Bt601ToBt709
        ///
        /// * Standard to HD, 720x576 to 1920x1080 - Elastic Transcoder applies Bt601ToBt709
        ///
        /// * HD to Standard, 1920x1080 to 720x480 - Elastic Transcoder applies Bt709ToBt601
        ///
        /// * HD to Standard, 1920x1080 to 720x576 - Elastic Transcoder applies Bt709ToBt601
        ///
        ///
        /// Elastic Transcoder may change the behavior of the ColorspaceConversionModeAuto mode in the future. All outputs in a playlist must use the same ColorSpaceConversionMode. If you do not specify a ColorSpaceConversionMode, Elastic Transcoder does not change the color space of a file. If you are unsure what ColorSpaceConversionMode was applied to your output file, you can check the AppliedColorSpaceConversion parameter included in your job response. If your job does not have an AppliedColorSpaceConversion in its response, no ColorSpaceConversionMode was applied. ChromaSubsampling The sampling pattern for the chroma (color) channels of the output video. Valid values include yuv420p and yuv422p. yuv420p samples the chroma information of every other horizontal and every other vertical line, yuv422p samples the color information of every horizontal line and every other vertical line. LoopCount (Gif Only) The number of times you want the output gif to loop. Valid values include Infinite and integers between 0 and 100, inclusive.
        public var codecOptions: [Swift.String: Swift.String]?
        /// The value that Elastic Transcoder adds to the metadata in the output file.
        public var displayAspectRatio: Swift.String?
        /// Applicable only when the value of Video:Codec is one of H.264, MPEG2, or VP8. Whether to use a fixed value for FixedGOP. Valid values are true and false:
        ///
        /// * true: Elastic Transcoder uses the value of KeyframesMaxDist for the distance between key frames (the number of frames in a group of pictures, or GOP).
        ///
        /// * false: The distance between key frames can vary.
        ///
        ///
        /// FixedGOP must be set to true for fmp4 containers.
        public var fixedGOP: Swift.String?
        /// The frames per second for the video stream in the output file. Valid values include: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 60 If you specify auto, Elastic Transcoder uses the detected frame rate of the input source. If you specify a frame rate, we recommend that you perform the following calculation: Frame rate = maximum recommended decoding speed in luma samples/second / (width in pixels * height in pixels) where:
        ///
        /// * width in pixels and height in pixels represent the Resolution of the output video.
        ///
        /// * maximum recommended decoding speed in Luma samples/second is less than or equal to the maximum value listed in the following table, based on the value that you specified for Level.
        ///
        ///
        /// The maximum recommended decoding speed in Luma samples/second for each level is described in the following list (Level - Decoding speed):
        ///
        /// * 1 - 380160
        ///
        /// * 1b - 380160
        ///
        /// * 1.1 - 76800
        ///
        /// * 1.2 - 1536000
        ///
        /// * 1.3 - 3041280
        ///
        /// * 2 - 3041280
        ///
        /// * 2.1 - 5068800
        ///
        /// * 2.2 - 5184000
        ///
        /// * 3 - 10368000
        ///
        /// * 3.1 - 27648000
        ///
        /// * 3.2 - 55296000
        ///
        /// * 4 - 62914560
        ///
        /// * 4.1 - 62914560
        public var frameRate: Swift.String?
        /// Applicable only when the value of Video:Codec is one of H.264, MPEG2, or VP8. The maximum number of frames between key frames. Key frames are fully encoded frames; the frames between key frames are encoded based, in part, on the content of the key frames. The value is an integer formatted as a string; valid values are between 1 (every frame is a key frame) and 100000, inclusive. A higher value results in higher compression but may also discernibly decrease video quality. For Smooth outputs, the FrameRate must have a constant ratio to the KeyframesMaxDist. This allows Smooth playlists to switch between different quality levels while the file is being played. For example, an input file can have a FrameRate of 30 with a KeyframesMaxDist of 90. The output file then needs to have a ratio of 1:3. Valid outputs would have FrameRate of 30, 25, and 10, and KeyframesMaxDist of 90, 75, and 30, respectively. Alternately, this can be achieved by setting FrameRate to auto and having the same values for MaxFrameRate and KeyframesMaxDist.
        public var keyframesMaxDist: Swift.String?
        /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video. Specify the maximum frame rate that you want Elastic Transcoder to use when the frame rate of the input video is greater than the desired maximum frame rate of the output video. Valid values include: 10, 15, 23.97, 24, 25, 29.97, 30, 60.
        public var maxFrameRate: Swift.String?
        /// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072.
        public var maxHeight: Swift.String?
        /// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096.
        public var maxWidth: Swift.String?
        /// When you set PaddingPolicy to Pad, Elastic Transcoder may add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for MaxWidth and MaxHeight.
        public var paddingPolicy: Swift.String?
        /// To better control resolution and aspect ratio of output videos, we recommend that you use the values MaxWidth, MaxHeight, SizingPolicy, PaddingPolicy, and DisplayAspectRatio instead of Resolution and AspectRatio. The two groups of settings are mutually exclusive. Do not use them together. The width and height of the video in the output file, in pixels. Valid values are auto and width x height:
        ///
        /// * auto: Elastic Transcoder attempts to preserve the width and height of the input file, subject to the following rules.
        ///
        /// * width x height : The width and height of the output video in pixels.
        ///
        ///
        /// Note the following about specifying the width and height:
        ///
        /// * The width must be an even integer between 128 and 4096, inclusive.
        ///
        /// * The height must be an even integer between 96 and 3072, inclusive.
        ///
        /// * If you specify a resolution that is less than the resolution of the input file, Elastic Transcoder rescales the output file to the lower resolution.
        ///
        /// * If you specify a resolution that is greater than the resolution of the input file, Elastic Transcoder rescales the output to the higher resolution.
        ///
        /// * We recommend that you specify a resolution for which the product of width and height is less than or equal to the applicable value in the following list (List - Max width x height value):
        ///
        /// * 1 - 25344
        ///
        /// * 1b - 25344
        ///
        /// * 1.1 - 101376
        ///
        /// * 1.2 - 101376
        ///
        /// * 1.3 - 101376
        ///
        /// * 2 - 101376
        ///
        /// * 2.1 - 202752
        ///
        /// * 2.2 - 404720
        ///
        /// * 3 - 404720
        ///
        /// * 3.1 - 921600
        ///
        /// * 3.2 - 1310720
        ///
        /// * 4 - 2097152
        ///
        /// * 4.1 - 2097152
        public var resolution: Swift.String?
        /// Specify one of the following values to control scaling of the output video:
        ///
        /// * Fit: Elastic Transcoder scales the output video so it matches the value that you specified in either MaxWidth or MaxHeight without exceeding the other value.
        ///
        /// * Fill: Elastic Transcoder scales the output video so it matches the value that you specified in either MaxWidth or MaxHeight and matches or exceeds the other value. Elastic Transcoder centers the output video and then crops it in the dimension (if any) that exceeds the maximum value.
        ///
        /// * Stretch: Elastic Transcoder stretches the output video to match the values that you specified for MaxWidth and MaxHeight. If the relative proportions of the input video and the output video are different, the output video will be distorted.
        ///
        /// * Keep: Elastic Transcoder does not scale the output video. If either dimension of the input video exceeds the values that you specified for MaxWidth and MaxHeight, Elastic Transcoder crops the output video.
        ///
        /// * ShrinkToFit: Elastic Transcoder scales the output video down so that its dimensions match the values that you specified for at least one of MaxWidth and MaxHeight without exceeding either value. If you specify this option, Elastic Transcoder does not scale the video up.
        ///
        /// * ShrinkToFill: Elastic Transcoder scales the output video down so that its dimensions match the values that you specified for at least one of MaxWidth and MaxHeight without dropping below either value. If you specify this option, Elastic Transcoder does not scale the video up.
        public var sizingPolicy: Swift.String?
        /// Settings for the size, location, and opacity of graphics that you want Elastic Transcoder to overlay over videos that are transcoded using this preset. You can specify settings for up to four watermarks. Watermarks appear in the specified size and location, and with the specified opacity for the duration of the transcoded video. Watermarks can be in .png or .jpg format. If you want to display a watermark that is not rectangular, use the .png format, which supports transparency. When you create a job that uses this preset, you specify the .png or .jpg graphics that you want Elastic Transcoder to include in the transcoded videos. You can specify fewer graphics in the job than you specify watermark settings in the preset, which allows you to use the same preset for up to four watermarks that have different dimensions.
        public var watermarks: [ElasticTranscoderClientTypes.PresetWatermark]?

        public init(
            aspectRatio: Swift.String? = nil,
            bitRate: Swift.String? = nil,
            codec: Swift.String? = nil,
            codecOptions: [Swift.String: Swift.String]? = nil,
            displayAspectRatio: Swift.String? = nil,
            fixedGOP: Swift.String? = nil,
            frameRate: Swift.String? = nil,
            keyframesMaxDist: Swift.String? = nil,
            maxFrameRate: Swift.String? = nil,
            maxHeight: Swift.String? = nil,
            maxWidth: Swift.String? = nil,
            paddingPolicy: Swift.String? = nil,
            resolution: Swift.String? = nil,
            sizingPolicy: Swift.String? = nil,
            watermarks: [ElasticTranscoderClientTypes.PresetWatermark]? = nil
        )
        {
            self.aspectRatio = aspectRatio
            self.bitRate = bitRate
            self.codec = codec
            self.codecOptions = codecOptions
            self.displayAspectRatio = displayAspectRatio
            self.fixedGOP = fixedGOP
            self.frameRate = frameRate
            self.keyframesMaxDist = keyframesMaxDist
            self.maxFrameRate = maxFrameRate
            self.maxHeight = maxHeight
            self.maxWidth = maxWidth
            self.paddingPolicy = paddingPolicy
            self.resolution = resolution
            self.sizingPolicy = sizingPolicy
            self.watermarks = watermarks
        }
    }
}

/// The CreatePresetRequest structure.
public struct CreatePresetInput: Swift.Sendable {
    /// A section of the request body that specifies the audio parameters.
    public var audio: ElasticTranscoderClientTypes.AudioParameters?
    /// The container type for the output file. Valid values include flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
    /// This member is required.
    public var container: Swift.String?
    /// A description of the preset.
    public var description: Swift.String?
    /// The name of the preset. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.
    /// This member is required.
    public var name: Swift.String?
    /// A section of the request body that specifies the thumbnail parameters, if any.
    public var thumbnails: ElasticTranscoderClientTypes.Thumbnails?
    /// A section of the request body that specifies the video parameters.
    public var video: ElasticTranscoderClientTypes.VideoParameters?

    public init(
        audio: ElasticTranscoderClientTypes.AudioParameters? = nil,
        container: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        thumbnails: ElasticTranscoderClientTypes.Thumbnails? = nil,
        video: ElasticTranscoderClientTypes.VideoParameters? = nil
    )
    {
        self.audio = audio
        self.container = container
        self.description = description
        self.name = name
        self.thumbnails = thumbnails
        self.video = video
    }
}

extension ElasticTranscoderClientTypes {

    /// Presets are templates that contain most of the settings for transcoding media files from one format to another. Elastic Transcoder includes some default presets for common formats, for example, several iPod and iPhone versions. You can also create your own presets for formats that aren't included among the default presets. You specify which preset you want to use when you create a job.
    public struct Preset: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the preset.
        public var arn: Swift.String?
        /// A section of the response body that provides information about the audio preset values.
        public var audio: ElasticTranscoderClientTypes.AudioParameters?
        /// The container type for the output file. Valid values include flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
        public var container: Swift.String?
        /// A description of the preset.
        public var description: Swift.String?
        /// Identifier for the new preset. You use this value to get settings for the preset or to delete it.
        public var id: Swift.String?
        /// The name of the preset.
        public var name: Swift.String?
        /// A section of the response body that provides information about the thumbnail preset values, if any.
        public var thumbnails: ElasticTranscoderClientTypes.Thumbnails?
        /// Whether the preset is a default preset provided by Elastic Transcoder (System) or a preset that you have defined (Custom).
        public var type: Swift.String?
        /// A section of the response body that provides information about the video preset values.
        public var video: ElasticTranscoderClientTypes.VideoParameters?

        public init(
            arn: Swift.String? = nil,
            audio: ElasticTranscoderClientTypes.AudioParameters? = nil,
            container: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            thumbnails: ElasticTranscoderClientTypes.Thumbnails? = nil,
            type: Swift.String? = nil,
            video: ElasticTranscoderClientTypes.VideoParameters? = nil
        )
        {
            self.arn = arn
            self.audio = audio
            self.container = container
            self.description = description
            self.id = id
            self.name = name
            self.thumbnails = thumbnails
            self.type = type
            self.video = video
        }
    }
}

/// The CreatePresetResponse structure.
public struct CreatePresetOutput: Swift.Sendable {
    /// A section of the response body that provides information about the preset that is created.
    public var preset: ElasticTranscoderClientTypes.Preset?
    /// If the preset settings don't comply with the standards for the video codec but Elastic Transcoder created the preset, this message explains the reason the preset settings don't meet the standard. Elastic Transcoder created the preset because the settings might produce acceptable output.
    public var warning: Swift.String?

    public init(
        preset: ElasticTranscoderClientTypes.Preset? = nil,
        warning: Swift.String? = nil
    )
    {
        self.preset = preset
        self.warning = warning
    }
}

/// The DeletePipelineRequest structure.
public struct DeletePipelineInput: Swift.Sendable {
    /// The identifier of the pipeline that you want to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// The DeletePipelineResponse structure.
public struct DeletePipelineOutput: Swift.Sendable {

    public init() { }
}

/// The DeletePresetRequest structure.
public struct DeletePresetInput: Swift.Sendable {
    /// The identifier of the preset for which you want to get detailed information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// The DeletePresetResponse structure.
public struct DeletePresetOutput: Swift.Sendable {

    public init() { }
}

/// The ListJobsByPipelineRequest structure.
public struct ListJobsByPipelineInput: Swift.Sendable {
    /// To list jobs in chronological order by the date and time that they were submitted, enter true. To list jobs in reverse chronological order, enter false.
    public var ascending: Swift.String?
    /// When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
    public var pageToken: Swift.String?
    /// The ID of the pipeline for which you want to get job information.
    /// This member is required.
    public var pipelineId: Swift.String?

    public init(
        ascending: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        pipelineId: Swift.String? = nil
    )
    {
        self.ascending = ascending
        self.pageToken = pageToken
        self.pipelineId = pipelineId
    }
}

/// The ListJobsByPipelineResponse structure.
public struct ListJobsByPipelineOutput: Swift.Sendable {
    /// An array of Job objects that are in the specified pipeline.
    public var jobs: [ElasticTranscoderClientTypes.Job]?
    /// A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of NextPageToken is null.
    public var nextPageToken: Swift.String?

    public init(
        jobs: [ElasticTranscoderClientTypes.Job]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextPageToken = nextPageToken
    }
}

/// The ListJobsByStatusRequest structure.
public struct ListJobsByStatusInput: Swift.Sendable {
    /// To list jobs in chronological order by the date and time that they were submitted, enter true. To list jobs in reverse chronological order, enter false.
    public var ascending: Swift.String?
    /// When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
    public var pageToken: Swift.String?
    /// To get information about all of the jobs associated with the current AWS account that have a given status, specify the following status: Submitted, Progressing, Complete, Canceled, or Error.
    /// This member is required.
    public var status: Swift.String?

    public init(
        ascending: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.ascending = ascending
        self.pageToken = pageToken
        self.status = status
    }
}

/// The ListJobsByStatusResponse structure.
public struct ListJobsByStatusOutput: Swift.Sendable {
    /// An array of Job objects that have the specified status.
    public var jobs: [ElasticTranscoderClientTypes.Job]?
    /// A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of NextPageToken is null.
    public var nextPageToken: Swift.String?

    public init(
        jobs: [ElasticTranscoderClientTypes.Job]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextPageToken = nextPageToken
    }
}

/// The ListPipelineRequest structure.
public struct ListPipelinesInput: Swift.Sendable {
    /// To list pipelines in chronological order by the date and time that they were created, enter true. To list pipelines in reverse chronological order, enter false.
    public var ascending: Swift.String?
    /// When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
    public var pageToken: Swift.String?

    public init(
        ascending: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.ascending = ascending
        self.pageToken = pageToken
    }
}

/// A list of the pipelines associated with the current AWS account.
public struct ListPipelinesOutput: Swift.Sendable {
    /// A value that you use to access the second and subsequent pages of results, if any. When the pipelines fit on one page or when you've reached the last page of results, the value of NextPageToken is null.
    public var nextPageToken: Swift.String?
    /// An array of Pipeline objects.
    public var pipelines: [ElasticTranscoderClientTypes.Pipeline]?

    public init(
        nextPageToken: Swift.String? = nil,
        pipelines: [ElasticTranscoderClientTypes.Pipeline]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.pipelines = pipelines
    }
}

/// The ListPresetsRequest structure.
public struct ListPresetsInput: Swift.Sendable {
    /// To list presets in chronological order by the date and time that they were created, enter true. To list presets in reverse chronological order, enter false.
    public var ascending: Swift.String?
    /// When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
    public var pageToken: Swift.String?

    public init(
        ascending: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.ascending = ascending
        self.pageToken = pageToken
    }
}

/// The ListPresetsResponse structure.
public struct ListPresetsOutput: Swift.Sendable {
    /// A value that you use to access the second and subsequent pages of results, if any. When the presets fit on one page or when you've reached the last page of results, the value of NextPageToken is null.
    public var nextPageToken: Swift.String?
    /// An array of Preset objects.
    public var presets: [ElasticTranscoderClientTypes.Preset]?

    public init(
        nextPageToken: Swift.String? = nil,
        presets: [ElasticTranscoderClientTypes.Preset]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.presets = presets
    }
}

/// The ReadJobRequest structure.
public struct ReadJobInput: Swift.Sendable {
    /// The identifier of the job for which you want to get detailed information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// The ReadJobResponse structure.
public struct ReadJobOutput: Swift.Sendable {
    /// A section of the response body that provides information about the job.
    public var job: ElasticTranscoderClientTypes.Job?

    public init(
        job: ElasticTranscoderClientTypes.Job? = nil
    )
    {
        self.job = job
    }
}

/// The ReadPipelineRequest structure.
public struct ReadPipelineInput: Swift.Sendable {
    /// The identifier of the pipeline to read.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// The ReadPipelineResponse structure.
public struct ReadPipelineOutput: Swift.Sendable {
    /// A section of the response body that provides information about the pipeline.
    public var pipeline: ElasticTranscoderClientTypes.Pipeline?
    /// Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline. Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.
    public var warnings: [ElasticTranscoderClientTypes.Warning]?

    public init(
        pipeline: ElasticTranscoderClientTypes.Pipeline? = nil,
        warnings: [ElasticTranscoderClientTypes.Warning]? = nil
    )
    {
        self.pipeline = pipeline
        self.warnings = warnings
    }
}

/// The ReadPresetRequest structure.
public struct ReadPresetInput: Swift.Sendable {
    /// The identifier of the preset for which you want to get detailed information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// The ReadPresetResponse structure.
public struct ReadPresetOutput: Swift.Sendable {
    /// A section of the response body that provides information about the preset.
    public var preset: ElasticTranscoderClientTypes.Preset?

    public init(
        preset: ElasticTranscoderClientTypes.Preset? = nil
    )
    {
        self.preset = preset
    }
}

/// The TestRoleRequest structure.
@available(*, deprecated)
public struct TestRoleInput: Swift.Sendable {
    /// The Amazon S3 bucket that contains media files to be transcoded. The action attempts to read from this bucket.
    /// This member is required.
    public var inputBucket: Swift.String?
    /// The Amazon S3 bucket that Elastic Transcoder writes transcoded media files to. The action attempts to read from this bucket.
    /// This member is required.
    public var outputBucket: Swift.String?
    /// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to test.
    /// This member is required.
    public var role: Swift.String?
    /// The ARNs of one or more Amazon Simple Notification Service (Amazon SNS) topics that you want the action to send a test notification to.
    /// This member is required.
    public var topics: [Swift.String]?

    public init(
        inputBucket: Swift.String? = nil,
        outputBucket: Swift.String? = nil,
        role: Swift.String? = nil,
        topics: [Swift.String]? = nil
    )
    {
        self.inputBucket = inputBucket
        self.outputBucket = outputBucket
        self.role = role
        self.topics = topics
    }
}

/// The TestRoleResponse structure.
@available(*, deprecated)
public struct TestRoleOutput: Swift.Sendable {
    /// If the Success element contains false, this value is an array of one or more error messages that were generated during the test process.
    public var messages: [Swift.String]?
    /// If the operation is successful, this value is true; otherwise, the value is false.
    public var success: Swift.String?

    public init(
        messages: [Swift.String]? = nil,
        success: Swift.String? = nil
    )
    {
        self.messages = messages
        self.success = success
    }
}

/// The UpdatePipelineRequest structure.
public struct UpdatePipelineInput: Swift.Sendable {
    /// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline. If you use either s3 or s3-aws-kms as your Encryption:Mode, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an Encryption:Mode of aes-cbc-pkcs7, aes-ctr, or aes-gcm.
    public var awsKmsKeyArn: Swift.String?
    /// The optional ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists: which bucket to use, which users you want to have access to the files, the type of access you want users to have, and the storage class that you want to assign to the files. If you specify values for ContentConfig, you must also specify values for ThumbnailConfig. If you specify values for ContentConfig and ThumbnailConfig, omit the OutputBucket object.
    ///
    /// * Bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
    ///
    /// * Permissions (Optional): The Permissions object specifies which users you want to have access to transcoded files and the type of access you want them to have. You can grant permissions to a maximum of 30 users and/or predefined Amazon S3 groups.
    ///
    /// * Grantee Type: Specify the type of value that appears in the Grantee object:
    ///
    /// * Canonical: The value in the Grantee object is either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution. For more information about canonical user IDs, see Access Control List (ACL) Overview in the Amazon Simple Storage Service Developer Guide. For more information about using CloudFront origin access identities to require that users use CloudFront URLs instead of Amazon S3 URLs, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content. A canonical user ID is not the same as an AWS account number.
    ///
    /// * Email: The value in the Grantee object is the registered email address of an AWS account.
    ///
    /// * Group: The value in the Grantee object is one of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
    ///
    ///
    ///
    ///
    /// * Grantee: The AWS user or group that you want to have access to transcoded files and playlists. To identify the user or group, you can specify the canonical user ID for an AWS account, an origin access identity for a CloudFront distribution, the registered email address of an AWS account, or a predefined Amazon S3 group
    ///
    /// * Access: The permission that you want to give to the AWS user that you specified in Grantee. Permissions are granted on the files that Elastic Transcoder adds to the bucket, including playlists and video files. Valid values include:
    ///
    /// * READ: The grantee can read the objects and metadata for objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * READ_ACP: The grantee can read the object ACL for objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * WRITE_ACP: The grantee can write the ACL for the objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    ///
    ///
    ///
    /// * StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files and playlists that it stores in your Amazon S3 bucket.
    public var contentConfig: ElasticTranscoderClientTypes.PipelineOutputConfig?
    /// The ID of the pipeline that you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
    public var inputBucket: Swift.String?
    /// The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced. Constraints: Maximum 40 characters
    public var name: Swift.String?
    /// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.
    ///
    /// * Progressing: The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process jobs that are added to this pipeline. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Complete: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Warning: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Error: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition. This is the ARN that Amazon SNS returned when you created the topic.
    public var notifications: ElasticTranscoderClientTypes.Notifications?
    /// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
    public var role: Swift.String?
    /// The ThumbnailConfig object specifies several values, including the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files, which users you want to have access to the files, the type of access you want users to have, and the storage class that you want to assign to the files. If you specify values for ContentConfig, you must also specify values for ThumbnailConfig even if you don't want to create thumbnails. If you specify values for ContentConfig and ThumbnailConfig, omit the OutputBucket object.
    ///
    /// * Bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
    ///
    /// * Permissions (Optional): The Permissions object specifies which users and/or predefined Amazon S3 groups you want to have access to thumbnail files, and the type of access you want them to have. You can grant permissions to a maximum of 30 users and/or predefined Amazon S3 groups.
    ///
    /// * GranteeType: Specify the type of value that appears in the Grantee object:
    ///
    /// * Canonical: The value in the Grantee object is either the canonical user ID for an AWS account or an origin access identity for an Amazon CloudFront distribution. A canonical user ID is not the same as an AWS account number.
    ///
    /// * Email: The value in the Grantee object is the registered email address of an AWS account.
    ///
    /// * Group: The value in the Grantee object is one of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers, or LogDelivery.
    ///
    ///
    ///
    ///
    /// * Grantee: The AWS user or group that you want to have access to thumbnail files. To identify the user or group, you can specify the canonical user ID for an AWS account, an origin access identity for a CloudFront distribution, the registered email address of an AWS account, or a predefined Amazon S3 group.
    ///
    /// * Access: The permission that you want to give to the AWS user that you specified in Grantee. Permissions are granted on the thumbnail files that Elastic Transcoder adds to the bucket. Valid values include:
    ///
    /// * READ: The grantee can read the thumbnails and metadata for objects that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * WRITE_ACP: The grantee can write the ACL for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    /// * FULL_CONTROL: The grantee has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
    ///
    ///
    ///
    ///
    /// * StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
    public var thumbnailConfig: ElasticTranscoderClientTypes.PipelineOutputConfig?

    public init(
        awsKmsKeyArn: Swift.String? = nil,
        contentConfig: ElasticTranscoderClientTypes.PipelineOutputConfig? = nil,
        id: Swift.String? = nil,
        inputBucket: Swift.String? = nil,
        name: Swift.String? = nil,
        notifications: ElasticTranscoderClientTypes.Notifications? = nil,
        role: Swift.String? = nil,
        thumbnailConfig: ElasticTranscoderClientTypes.PipelineOutputConfig? = nil
    )
    {
        self.awsKmsKeyArn = awsKmsKeyArn
        self.contentConfig = contentConfig
        self.id = id
        self.inputBucket = inputBucket
        self.name = name
        self.notifications = notifications
        self.role = role
        self.thumbnailConfig = thumbnailConfig
    }
}

/// When you update a pipeline, Elastic Transcoder returns the values that you specified in the request.
public struct UpdatePipelineOutput: Swift.Sendable {
    /// The pipeline updated by this UpdatePipelineResponse call.
    public var pipeline: ElasticTranscoderClientTypes.Pipeline?
    /// Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline. Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.
    public var warnings: [ElasticTranscoderClientTypes.Warning]?

    public init(
        pipeline: ElasticTranscoderClientTypes.Pipeline? = nil,
        warnings: [ElasticTranscoderClientTypes.Warning]? = nil
    )
    {
        self.pipeline = pipeline
        self.warnings = warnings
    }
}

/// The UpdatePipelineNotificationsRequest structure.
public struct UpdatePipelineNotificationsInput: Swift.Sendable {
    /// The identifier of the pipeline for which you want to change notification settings.
    /// This member is required.
    public var id: Swift.String?
    /// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.
    ///
    /// * Progressing: The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process jobs that are added to this pipeline. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Complete: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Warning: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition. This is the ARN that Amazon SNS returned when you created the topic.
    ///
    /// * Error: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition. This is the ARN that Amazon SNS returned when you created the topic.
    /// This member is required.
    public var notifications: ElasticTranscoderClientTypes.Notifications?

    public init(
        id: Swift.String? = nil,
        notifications: ElasticTranscoderClientTypes.Notifications? = nil
    )
    {
        self.id = id
        self.notifications = notifications
    }
}

/// The UpdatePipelineNotificationsResponse structure.
public struct UpdatePipelineNotificationsOutput: Swift.Sendable {
    /// A section of the response body that provides information about the pipeline associated with this notification.
    public var pipeline: ElasticTranscoderClientTypes.Pipeline?

    public init(
        pipeline: ElasticTranscoderClientTypes.Pipeline? = nil
    )
    {
        self.pipeline = pipeline
    }
}

/// The UpdatePipelineStatusRequest structure.
public struct UpdatePipelineStatusInput: Swift.Sendable {
    /// The identifier of the pipeline to update.
    /// This member is required.
    public var id: Swift.String?
    /// The desired status of the pipeline:
    ///
    /// * Active: The pipeline is processing jobs.
    ///
    /// * Paused: The pipeline is not currently processing jobs.
    /// This member is required.
    public var status: Swift.String?

    public init(
        id: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.id = id
        self.status = status
    }
}

/// When you update status for a pipeline, Elastic Transcoder returns the values that you specified in the request.
public struct UpdatePipelineStatusOutput: Swift.Sendable {
    /// A section of the response body that provides information about the pipeline.
    public var pipeline: ElasticTranscoderClientTypes.Pipeline?

    public init(
        pipeline: ElasticTranscoderClientTypes.Pipeline? = nil
    )
    {
        self.pipeline = pipeline
    }
}

extension CancelJobInput {

    static func urlPathProvider(_ value: CancelJobInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/jobs/\(id.urlPercentEncoding())"
    }
}

extension CreateJobInput {

    static func urlPathProvider(_ value: CreateJobInput) -> Swift.String? {
        return "/2012-09-25/jobs"
    }
}

extension CreatePipelineInput {

    static func urlPathProvider(_ value: CreatePipelineInput) -> Swift.String? {
        return "/2012-09-25/pipelines"
    }
}

extension CreatePresetInput {

    static func urlPathProvider(_ value: CreatePresetInput) -> Swift.String? {
        return "/2012-09-25/presets"
    }
}

extension DeletePipelineInput {

    static func urlPathProvider(_ value: DeletePipelineInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/pipelines/\(id.urlPercentEncoding())"
    }
}

extension DeletePresetInput {

    static func urlPathProvider(_ value: DeletePresetInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/presets/\(id.urlPercentEncoding())"
    }
}

extension ListJobsByPipelineInput {

    static func urlPathProvider(_ value: ListJobsByPipelineInput) -> Swift.String? {
        guard let pipelineId = value.pipelineId else {
            return nil
        }
        return "/2012-09-25/jobsByPipeline/\(pipelineId.urlPercentEncoding())"
    }
}

extension ListJobsByPipelineInput {

    static func queryItemProvider(_ value: ListJobsByPipelineInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let pageToken = value.pageToken {
            let pageTokenQueryItem = Smithy.URIQueryItem(name: "PageToken".urlPercentEncoding(), value: Swift.String(pageToken).urlPercentEncoding())
            items.append(pageTokenQueryItem)
        }
        if let ascending = value.ascending {
            let ascendingQueryItem = Smithy.URIQueryItem(name: "Ascending".urlPercentEncoding(), value: Swift.String(ascending).urlPercentEncoding())
            items.append(ascendingQueryItem)
        }
        return items
    }
}

extension ListJobsByStatusInput {

    static func urlPathProvider(_ value: ListJobsByStatusInput) -> Swift.String? {
        guard let status = value.status else {
            return nil
        }
        return "/2012-09-25/jobsByStatus/\(status.urlPercentEncoding())"
    }
}

extension ListJobsByStatusInput {

    static func queryItemProvider(_ value: ListJobsByStatusInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let pageToken = value.pageToken {
            let pageTokenQueryItem = Smithy.URIQueryItem(name: "PageToken".urlPercentEncoding(), value: Swift.String(pageToken).urlPercentEncoding())
            items.append(pageTokenQueryItem)
        }
        if let ascending = value.ascending {
            let ascendingQueryItem = Smithy.URIQueryItem(name: "Ascending".urlPercentEncoding(), value: Swift.String(ascending).urlPercentEncoding())
            items.append(ascendingQueryItem)
        }
        return items
    }
}

extension ListPipelinesInput {

    static func urlPathProvider(_ value: ListPipelinesInput) -> Swift.String? {
        return "/2012-09-25/pipelines"
    }
}

extension ListPipelinesInput {

    static func queryItemProvider(_ value: ListPipelinesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let pageToken = value.pageToken {
            let pageTokenQueryItem = Smithy.URIQueryItem(name: "PageToken".urlPercentEncoding(), value: Swift.String(pageToken).urlPercentEncoding())
            items.append(pageTokenQueryItem)
        }
        if let ascending = value.ascending {
            let ascendingQueryItem = Smithy.URIQueryItem(name: "Ascending".urlPercentEncoding(), value: Swift.String(ascending).urlPercentEncoding())
            items.append(ascendingQueryItem)
        }
        return items
    }
}

extension ListPresetsInput {

    static func urlPathProvider(_ value: ListPresetsInput) -> Swift.String? {
        return "/2012-09-25/presets"
    }
}

extension ListPresetsInput {

    static func queryItemProvider(_ value: ListPresetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let pageToken = value.pageToken {
            let pageTokenQueryItem = Smithy.URIQueryItem(name: "PageToken".urlPercentEncoding(), value: Swift.String(pageToken).urlPercentEncoding())
            items.append(pageTokenQueryItem)
        }
        if let ascending = value.ascending {
            let ascendingQueryItem = Smithy.URIQueryItem(name: "Ascending".urlPercentEncoding(), value: Swift.String(ascending).urlPercentEncoding())
            items.append(ascendingQueryItem)
        }
        return items
    }
}

extension ReadJobInput {

    static func urlPathProvider(_ value: ReadJobInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/jobs/\(id.urlPercentEncoding())"
    }
}

extension ReadPipelineInput {

    static func urlPathProvider(_ value: ReadPipelineInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/pipelines/\(id.urlPercentEncoding())"
    }
}

extension ReadPresetInput {

    static func urlPathProvider(_ value: ReadPresetInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/presets/\(id.urlPercentEncoding())"
    }
}

extension TestRoleInput {

    static func urlPathProvider(_ value: TestRoleInput) -> Swift.String? {
        return "/2012-09-25/roleTests"
    }
}

extension UpdatePipelineInput {

    static func urlPathProvider(_ value: UpdatePipelineInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/pipelines/\(id.urlPercentEncoding())"
    }
}

extension UpdatePipelineNotificationsInput {

    static func urlPathProvider(_ value: UpdatePipelineNotificationsInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/pipelines/\(id.urlPercentEncoding())/notifications"
    }
}

extension UpdatePipelineStatusInput {

    static func urlPathProvider(_ value: UpdatePipelineStatusInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2012-09-25/pipelines/\(id.urlPercentEncoding())/status"
    }
}

extension CreateJobInput {

    static func write(value: CreateJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Input"].write(value.input, with: ElasticTranscoderClientTypes.JobInput.write(value:to:))
        try writer["Inputs"].writeList(value.inputs, memberWritingClosure: ElasticTranscoderClientTypes.JobInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Output"].write(value.output, with: ElasticTranscoderClientTypes.CreateJobOutput.write(value:to:))
        try writer["OutputKeyPrefix"].write(value.outputKeyPrefix)
        try writer["Outputs"].writeList(value.outputs, memberWritingClosure: ElasticTranscoderClientTypes.CreateJobOutput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PipelineId"].write(value.pipelineId)
        try writer["Playlists"].writeList(value.playlists, memberWritingClosure: ElasticTranscoderClientTypes.CreateJobPlaylist.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserMetadata"].writeMap(value.userMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreatePipelineInput {

    static func write(value: CreatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsKmsKeyArn"].write(value.awsKmsKeyArn)
        try writer["ContentConfig"].write(value.contentConfig, with: ElasticTranscoderClientTypes.PipelineOutputConfig.write(value:to:))
        try writer["InputBucket"].write(value.inputBucket)
        try writer["Name"].write(value.name)
        try writer["Notifications"].write(value.notifications, with: ElasticTranscoderClientTypes.Notifications.write(value:to:))
        try writer["OutputBucket"].write(value.outputBucket)
        try writer["Role"].write(value.role)
        try writer["ThumbnailConfig"].write(value.thumbnailConfig, with: ElasticTranscoderClientTypes.PipelineOutputConfig.write(value:to:))
    }
}

extension CreatePresetInput {

    static func write(value: CreatePresetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Audio"].write(value.audio, with: ElasticTranscoderClientTypes.AudioParameters.write(value:to:))
        try writer["Container"].write(value.container)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Thumbnails"].write(value.thumbnails, with: ElasticTranscoderClientTypes.Thumbnails.write(value:to:))
        try writer["Video"].write(value.video, with: ElasticTranscoderClientTypes.VideoParameters.write(value:to:))
    }
}

extension TestRoleInput {

    static func write(value: TestRoleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InputBucket"].write(value.inputBucket)
        try writer["OutputBucket"].write(value.outputBucket)
        try writer["Role"].write(value.role)
        try writer["Topics"].writeList(value.topics, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdatePipelineInput {

    static func write(value: UpdatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsKmsKeyArn"].write(value.awsKmsKeyArn)
        try writer["ContentConfig"].write(value.contentConfig, with: ElasticTranscoderClientTypes.PipelineOutputConfig.write(value:to:))
        try writer["InputBucket"].write(value.inputBucket)
        try writer["Name"].write(value.name)
        try writer["Notifications"].write(value.notifications, with: ElasticTranscoderClientTypes.Notifications.write(value:to:))
        try writer["Role"].write(value.role)
        try writer["ThumbnailConfig"].write(value.thumbnailConfig, with: ElasticTranscoderClientTypes.PipelineOutputConfig.write(value:to:))
    }
}

extension UpdatePipelineNotificationsInput {

    static func write(value: UpdatePipelineNotificationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Notifications"].write(value.notifications, with: ElasticTranscoderClientTypes.Notifications.write(value:to:))
    }
}

extension UpdatePipelineStatusInput {

    static func write(value: UpdatePipelineStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }
}

extension CancelJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelJobOutput {
        return CancelJobOutput()
    }
}

extension CreateJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateJobOutput()
        value.job = try reader["Job"].readIfPresent(with: ElasticTranscoderClientTypes.Job.read(from:))
        return value
    }
}

extension CreatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePipelineOutput()
        value.pipeline = try reader["Pipeline"].readIfPresent(with: ElasticTranscoderClientTypes.Pipeline.read(from:))
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreatePresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePresetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePresetOutput()
        value.preset = try reader["Preset"].readIfPresent(with: ElasticTranscoderClientTypes.Preset.read(from:))
        value.warning = try reader["Warning"].readIfPresent()
        return value
    }
}

extension DeletePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePipelineOutput {
        return DeletePipelineOutput()
    }
}

extension DeletePresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePresetOutput {
        return DeletePresetOutput()
    }
}

extension ListJobsByPipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListJobsByPipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListJobsByPipelineOutput()
        value.jobs = try reader["Jobs"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Job.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["NextPageToken"].readIfPresent()
        return value
    }
}

extension ListJobsByStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListJobsByStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListJobsByStatusOutput()
        value.jobs = try reader["Jobs"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Job.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["NextPageToken"].readIfPresent()
        return value
    }
}

extension ListPipelinesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelinesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelinesOutput()
        value.nextPageToken = try reader["NextPageToken"].readIfPresent()
        value.pipelines = try reader["Pipelines"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Pipeline.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPresetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPresetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPresetsOutput()
        value.nextPageToken = try reader["NextPageToken"].readIfPresent()
        value.presets = try reader["Presets"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Preset.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ReadJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReadJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReadJobOutput()
        value.job = try reader["Job"].readIfPresent(with: ElasticTranscoderClientTypes.Job.read(from:))
        return value
    }
}

extension ReadPipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReadPipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReadPipelineOutput()
        value.pipeline = try reader["Pipeline"].readIfPresent(with: ElasticTranscoderClientTypes.Pipeline.read(from:))
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ReadPresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReadPresetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReadPresetOutput()
        value.preset = try reader["Preset"].readIfPresent(with: ElasticTranscoderClientTypes.Preset.read(from:))
        return value
    }
}

extension TestRoleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestRoleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TestRoleOutput()
        value.messages = try reader["Messages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.success = try reader["Success"].readIfPresent()
        return value
    }
}

extension UpdatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePipelineOutput()
        value.pipeline = try reader["Pipeline"].readIfPresent(with: ElasticTranscoderClientTypes.Pipeline.read(from:))
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdatePipelineNotificationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineNotificationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePipelineNotificationsOutput()
        value.pipeline = try reader["Pipeline"].readIfPresent(with: ElasticTranscoderClientTypes.Pipeline.read(from:))
        return value
    }
}

extension UpdatePipelineStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePipelineStatusOutput()
        value.pipeline = try reader["Pipeline"].readIfPresent(with: ElasticTranscoderClientTypes.Pipeline.read(from:))
        return value
    }
}

enum CancelJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListJobsByPipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListJobsByStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelinesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPresetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReadJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReadPipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReadPresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestRoleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineNotificationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IncompatibleVersionException": return try IncompatibleVersionException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncompatibleVersionException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> IncompatibleVersionException {
        let reader = baseError.errorBodyReader
        var value = IncompatibleVersionException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ElasticTranscoderClientTypes.Job {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Job {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Job()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.pipelineId = try reader["PipelineId"].readIfPresent()
        value.input = try reader["Input"].readIfPresent(with: ElasticTranscoderClientTypes.JobInput.read(from:))
        value.inputs = try reader["Inputs"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.JobInput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.output = try reader["Output"].readIfPresent(with: ElasticTranscoderClientTypes.JobOutput.read(from:))
        value.outputs = try reader["Outputs"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.JobOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputKeyPrefix = try reader["OutputKeyPrefix"].readIfPresent()
        value.playlists = try reader["Playlists"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Playlist.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.userMetadata = try reader["UserMetadata"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.timing = try reader["Timing"].readIfPresent(with: ElasticTranscoderClientTypes.Timing.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.Timing {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Timing {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Timing()
        value.submitTimeMillis = try reader["SubmitTimeMillis"].readIfPresent()
        value.startTimeMillis = try reader["StartTimeMillis"].readIfPresent()
        value.finishTimeMillis = try reader["FinishTimeMillis"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.Playlist {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Playlist {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Playlist()
        value.name = try reader["Name"].readIfPresent()
        value.format = try reader["Format"].readIfPresent()
        value.outputKeys = try reader["OutputKeys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hlsContentProtection = try reader["HlsContentProtection"].readIfPresent(with: ElasticTranscoderClientTypes.HlsContentProtection.read(from:))
        value.playReadyDrm = try reader["PlayReadyDrm"].readIfPresent(with: ElasticTranscoderClientTypes.PlayReadyDrm.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.statusDetail = try reader["StatusDetail"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.PlayReadyDrm {

    static func write(value: ElasticTranscoderClientTypes.PlayReadyDrm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Format"].write(value.format)
        try writer["InitializationVector"].write(value.initializationVector)
        try writer["Key"].write(value.key)
        try writer["KeyId"].write(value.keyId)
        try writer["KeyMd5"].write(value.keyMd5)
        try writer["LicenseAcquisitionUrl"].write(value.licenseAcquisitionUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.PlayReadyDrm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.PlayReadyDrm()
        value.format = try reader["Format"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.keyMd5 = try reader["KeyMd5"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.initializationVector = try reader["InitializationVector"].readIfPresent()
        value.licenseAcquisitionUrl = try reader["LicenseAcquisitionUrl"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.HlsContentProtection {

    static func write(value: ElasticTranscoderClientTypes.HlsContentProtection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InitializationVector"].write(value.initializationVector)
        try writer["Key"].write(value.key)
        try writer["KeyMd5"].write(value.keyMd5)
        try writer["KeyStoragePolicy"].write(value.keyStoragePolicy)
        try writer["LicenseAcquisitionUrl"].write(value.licenseAcquisitionUrl)
        try writer["Method"].write(value.method)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.HlsContentProtection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.HlsContentProtection()
        value.method = try reader["Method"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.keyMd5 = try reader["KeyMd5"].readIfPresent()
        value.initializationVector = try reader["InitializationVector"].readIfPresent()
        value.licenseAcquisitionUrl = try reader["LicenseAcquisitionUrl"].readIfPresent()
        value.keyStoragePolicy = try reader["KeyStoragePolicy"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.JobOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.JobOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.JobOutput()
        value.id = try reader["Id"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.thumbnailPattern = try reader["ThumbnailPattern"].readIfPresent()
        value.thumbnailEncryption = try reader["ThumbnailEncryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        value.rotate = try reader["Rotate"].readIfPresent()
        value.presetId = try reader["PresetId"].readIfPresent()
        value.segmentDuration = try reader["SegmentDuration"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusDetail = try reader["StatusDetail"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent()
        value.width = try reader["Width"].readIfPresent()
        value.height = try reader["Height"].readIfPresent()
        value.frameRate = try reader["FrameRate"].readIfPresent()
        value.fileSize = try reader["FileSize"].readIfPresent()
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        value.watermarks = try reader["Watermarks"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.JobWatermark.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.albumArt = try reader["AlbumArt"].readIfPresent(with: ElasticTranscoderClientTypes.JobAlbumArt.read(from:))
        value.composition = try reader["Composition"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Clip.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captions = try reader["Captions"].readIfPresent(with: ElasticTranscoderClientTypes.Captions.read(from:))
        value.encryption = try reader["Encryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        value.appliedColorSpaceConversion = try reader["AppliedColorSpaceConversion"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.Encryption {

    static func write(value: ElasticTranscoderClientTypes.Encryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InitializationVector"].write(value.initializationVector)
        try writer["Key"].write(value.key)
        try writer["KeyMd5"].write(value.keyMd5)
        try writer["Mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Encryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Encryption()
        value.mode = try reader["Mode"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.keyMd5 = try reader["KeyMd5"].readIfPresent()
        value.initializationVector = try reader["InitializationVector"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.Captions {

    static func write(value: ElasticTranscoderClientTypes.Captions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaptionFormats"].writeList(value.captionFormats, memberWritingClosure: ElasticTranscoderClientTypes.CaptionFormat.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CaptionSources"].writeList(value.captionSources, memberWritingClosure: ElasticTranscoderClientTypes.CaptionSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MergePolicy"].write(value.mergePolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Captions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Captions()
        value.mergePolicy = try reader["MergePolicy"].readIfPresent()
        value.captionSources = try reader["CaptionSources"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.CaptionSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionFormats = try reader["CaptionFormats"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.CaptionFormat.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticTranscoderClientTypes.CaptionFormat {

    static func write(value: ElasticTranscoderClientTypes.CaptionFormat?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Encryption"].write(value.encryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["Format"].write(value.format)
        try writer["Pattern"].write(value.pattern)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.CaptionFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.CaptionFormat()
        value.format = try reader["Format"].readIfPresent()
        value.pattern = try reader["Pattern"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.CaptionSource {

    static func write(value: ElasticTranscoderClientTypes.CaptionSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Encryption"].write(value.encryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["Key"].write(value.key)
        try writer["Label"].write(value.label)
        try writer["Language"].write(value.language)
        try writer["TimeOffset"].write(value.timeOffset)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.CaptionSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.CaptionSource()
        value.key = try reader["Key"].readIfPresent()
        value.language = try reader["Language"].readIfPresent()
        value.timeOffset = try reader["TimeOffset"].readIfPresent()
        value.label = try reader["Label"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.Clip {

    static func write(value: ElasticTranscoderClientTypes.Clip?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TimeSpan"].write(value.timeSpan, with: ElasticTranscoderClientTypes.TimeSpan.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Clip {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Clip()
        value.timeSpan = try reader["TimeSpan"].readIfPresent(with: ElasticTranscoderClientTypes.TimeSpan.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.TimeSpan {

    static func write(value: ElasticTranscoderClientTypes.TimeSpan?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Duration"].write(value.duration)
        try writer["StartTime"].write(value.startTime)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.TimeSpan {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.TimeSpan()
        value.startTime = try reader["StartTime"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.JobAlbumArt {

    static func write(value: ElasticTranscoderClientTypes.JobAlbumArt?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Artwork"].writeList(value.artwork, memberWritingClosure: ElasticTranscoderClientTypes.Artwork.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MergePolicy"].write(value.mergePolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.JobAlbumArt {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.JobAlbumArt()
        value.mergePolicy = try reader["MergePolicy"].readIfPresent()
        value.artwork = try reader["Artwork"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Artwork.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticTranscoderClientTypes.Artwork {

    static func write(value: ElasticTranscoderClientTypes.Artwork?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlbumArtFormat"].write(value.albumArtFormat)
        try writer["Encryption"].write(value.encryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["InputKey"].write(value.inputKey)
        try writer["MaxHeight"].write(value.maxHeight)
        try writer["MaxWidth"].write(value.maxWidth)
        try writer["PaddingPolicy"].write(value.paddingPolicy)
        try writer["SizingPolicy"].write(value.sizingPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Artwork {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Artwork()
        value.inputKey = try reader["InputKey"].readIfPresent()
        value.maxWidth = try reader["MaxWidth"].readIfPresent()
        value.maxHeight = try reader["MaxHeight"].readIfPresent()
        value.sizingPolicy = try reader["SizingPolicy"].readIfPresent()
        value.paddingPolicy = try reader["PaddingPolicy"].readIfPresent()
        value.albumArtFormat = try reader["AlbumArtFormat"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.JobWatermark {

    static func write(value: ElasticTranscoderClientTypes.JobWatermark?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Encryption"].write(value.encryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["InputKey"].write(value.inputKey)
        try writer["PresetWatermarkId"].write(value.presetWatermarkId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.JobWatermark {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.JobWatermark()
        value.presetWatermarkId = try reader["PresetWatermarkId"].readIfPresent()
        value.inputKey = try reader["InputKey"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.JobInput {

    static func write(value: ElasticTranscoderClientTypes.JobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AspectRatio"].write(value.aspectRatio)
        try writer["Container"].write(value.container)
        try writer["DetectedProperties"].write(value.detectedProperties, with: ElasticTranscoderClientTypes.DetectedProperties.write(value:to:))
        try writer["Encryption"].write(value.encryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["FrameRate"].write(value.frameRate)
        try writer["InputCaptions"].write(value.inputCaptions, with: ElasticTranscoderClientTypes.InputCaptions.write(value:to:))
        try writer["Interlaced"].write(value.interlaced)
        try writer["Key"].write(value.key)
        try writer["Resolution"].write(value.resolution)
        try writer["TimeSpan"].write(value.timeSpan, with: ElasticTranscoderClientTypes.TimeSpan.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.JobInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.JobInput()
        value.key = try reader["Key"].readIfPresent()
        value.frameRate = try reader["FrameRate"].readIfPresent()
        value.resolution = try reader["Resolution"].readIfPresent()
        value.aspectRatio = try reader["AspectRatio"].readIfPresent()
        value.interlaced = try reader["Interlaced"].readIfPresent()
        value.container = try reader["Container"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: ElasticTranscoderClientTypes.Encryption.read(from:))
        value.timeSpan = try reader["TimeSpan"].readIfPresent(with: ElasticTranscoderClientTypes.TimeSpan.read(from:))
        value.inputCaptions = try reader["InputCaptions"].readIfPresent(with: ElasticTranscoderClientTypes.InputCaptions.read(from:))
        value.detectedProperties = try reader["DetectedProperties"].readIfPresent(with: ElasticTranscoderClientTypes.DetectedProperties.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.DetectedProperties {

    static func write(value: ElasticTranscoderClientTypes.DetectedProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationMillis"].write(value.durationMillis)
        try writer["FileSize"].write(value.fileSize)
        try writer["FrameRate"].write(value.frameRate)
        try writer["Height"].write(value.height)
        try writer["Width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.DetectedProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.DetectedProperties()
        value.width = try reader["Width"].readIfPresent()
        value.height = try reader["Height"].readIfPresent()
        value.frameRate = try reader["FrameRate"].readIfPresent()
        value.fileSize = try reader["FileSize"].readIfPresent()
        value.durationMillis = try reader["DurationMillis"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.InputCaptions {

    static func write(value: ElasticTranscoderClientTypes.InputCaptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaptionSources"].writeList(value.captionSources, memberWritingClosure: ElasticTranscoderClientTypes.CaptionSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MergePolicy"].write(value.mergePolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.InputCaptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.InputCaptions()
        value.mergePolicy = try reader["MergePolicy"].readIfPresent()
        value.captionSources = try reader["CaptionSources"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.CaptionSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticTranscoderClientTypes.Pipeline {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Pipeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Pipeline()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.inputBucket = try reader["InputBucket"].readIfPresent()
        value.outputBucket = try reader["OutputBucket"].readIfPresent()
        value.role = try reader["Role"].readIfPresent()
        value.awsKmsKeyArn = try reader["AwsKmsKeyArn"].readIfPresent()
        value.notifications = try reader["Notifications"].readIfPresent(with: ElasticTranscoderClientTypes.Notifications.read(from:))
        value.contentConfig = try reader["ContentConfig"].readIfPresent(with: ElasticTranscoderClientTypes.PipelineOutputConfig.read(from:))
        value.thumbnailConfig = try reader["ThumbnailConfig"].readIfPresent(with: ElasticTranscoderClientTypes.PipelineOutputConfig.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.PipelineOutputConfig {

    static func write(value: ElasticTranscoderClientTypes.PipelineOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Permissions"].writeList(value.permissions, memberWritingClosure: ElasticTranscoderClientTypes.Permission.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StorageClass"].write(value.storageClass)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.PipelineOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.PipelineOutputConfig()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.permissions = try reader["Permissions"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.Permission.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticTranscoderClientTypes.Permission {

    static func write(value: ElasticTranscoderClientTypes.Permission?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Access"].writeList(value.access, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Grantee"].write(value.grantee)
        try writer["GranteeType"].write(value.granteeType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Permission {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Permission()
        value.granteeType = try reader["GranteeType"].readIfPresent()
        value.grantee = try reader["Grantee"].readIfPresent()
        value.access = try reader["Access"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticTranscoderClientTypes.Notifications {

    static func write(value: ElasticTranscoderClientTypes.Notifications?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Completed"].write(value.completed)
        try writer["Error"].write(value.error)
        try writer["Progressing"].write(value.progressing)
        try writer["Warning"].write(value.warning)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Notifications {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Notifications()
        value.progressing = try reader["Progressing"].readIfPresent()
        value.completed = try reader["Completed"].readIfPresent()
        value.warning = try reader["Warning"].readIfPresent()
        value.error = try reader["Error"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.Warning {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Warning {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Warning()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.Preset {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Preset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Preset()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.container = try reader["Container"].readIfPresent()
        value.audio = try reader["Audio"].readIfPresent(with: ElasticTranscoderClientTypes.AudioParameters.read(from:))
        value.video = try reader["Video"].readIfPresent(with: ElasticTranscoderClientTypes.VideoParameters.read(from:))
        value.thumbnails = try reader["Thumbnails"].readIfPresent(with: ElasticTranscoderClientTypes.Thumbnails.read(from:))
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.Thumbnails {

    static func write(value: ElasticTranscoderClientTypes.Thumbnails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AspectRatio"].write(value.aspectRatio)
        try writer["Format"].write(value.format)
        try writer["Interval"].write(value.interval)
        try writer["MaxHeight"].write(value.maxHeight)
        try writer["MaxWidth"].write(value.maxWidth)
        try writer["PaddingPolicy"].write(value.paddingPolicy)
        try writer["Resolution"].write(value.resolution)
        try writer["SizingPolicy"].write(value.sizingPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.Thumbnails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.Thumbnails()
        value.format = try reader["Format"].readIfPresent()
        value.interval = try reader["Interval"].readIfPresent()
        value.resolution = try reader["Resolution"].readIfPresent()
        value.aspectRatio = try reader["AspectRatio"].readIfPresent()
        value.maxWidth = try reader["MaxWidth"].readIfPresent()
        value.maxHeight = try reader["MaxHeight"].readIfPresent()
        value.sizingPolicy = try reader["SizingPolicy"].readIfPresent()
        value.paddingPolicy = try reader["PaddingPolicy"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.VideoParameters {

    static func write(value: ElasticTranscoderClientTypes.VideoParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AspectRatio"].write(value.aspectRatio)
        try writer["BitRate"].write(value.bitRate)
        try writer["Codec"].write(value.codec)
        try writer["CodecOptions"].writeMap(value.codecOptions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["DisplayAspectRatio"].write(value.displayAspectRatio)
        try writer["FixedGOP"].write(value.fixedGOP)
        try writer["FrameRate"].write(value.frameRate)
        try writer["KeyframesMaxDist"].write(value.keyframesMaxDist)
        try writer["MaxFrameRate"].write(value.maxFrameRate)
        try writer["MaxHeight"].write(value.maxHeight)
        try writer["MaxWidth"].write(value.maxWidth)
        try writer["PaddingPolicy"].write(value.paddingPolicy)
        try writer["Resolution"].write(value.resolution)
        try writer["SizingPolicy"].write(value.sizingPolicy)
        try writer["Watermarks"].writeList(value.watermarks, memberWritingClosure: ElasticTranscoderClientTypes.PresetWatermark.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.VideoParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.VideoParameters()
        value.codec = try reader["Codec"].readIfPresent()
        value.codecOptions = try reader["CodecOptions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.keyframesMaxDist = try reader["KeyframesMaxDist"].readIfPresent()
        value.fixedGOP = try reader["FixedGOP"].readIfPresent()
        value.bitRate = try reader["BitRate"].readIfPresent()
        value.frameRate = try reader["FrameRate"].readIfPresent()
        value.maxFrameRate = try reader["MaxFrameRate"].readIfPresent()
        value.resolution = try reader["Resolution"].readIfPresent()
        value.aspectRatio = try reader["AspectRatio"].readIfPresent()
        value.maxWidth = try reader["MaxWidth"].readIfPresent()
        value.maxHeight = try reader["MaxHeight"].readIfPresent()
        value.displayAspectRatio = try reader["DisplayAspectRatio"].readIfPresent()
        value.sizingPolicy = try reader["SizingPolicy"].readIfPresent()
        value.paddingPolicy = try reader["PaddingPolicy"].readIfPresent()
        value.watermarks = try reader["Watermarks"].readListIfPresent(memberReadingClosure: ElasticTranscoderClientTypes.PresetWatermark.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticTranscoderClientTypes.PresetWatermark {

    static func write(value: ElasticTranscoderClientTypes.PresetWatermark?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HorizontalAlign"].write(value.horizontalAlign)
        try writer["HorizontalOffset"].write(value.horizontalOffset)
        try writer["Id"].write(value.id)
        try writer["MaxHeight"].write(value.maxHeight)
        try writer["MaxWidth"].write(value.maxWidth)
        try writer["Opacity"].write(value.opacity)
        try writer["SizingPolicy"].write(value.sizingPolicy)
        try writer["Target"].write(value.target)
        try writer["VerticalAlign"].write(value.verticalAlign)
        try writer["VerticalOffset"].write(value.verticalOffset)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.PresetWatermark {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.PresetWatermark()
        value.id = try reader["Id"].readIfPresent()
        value.maxWidth = try reader["MaxWidth"].readIfPresent()
        value.maxHeight = try reader["MaxHeight"].readIfPresent()
        value.sizingPolicy = try reader["SizingPolicy"].readIfPresent()
        value.horizontalAlign = try reader["HorizontalAlign"].readIfPresent()
        value.horizontalOffset = try reader["HorizontalOffset"].readIfPresent()
        value.verticalAlign = try reader["VerticalAlign"].readIfPresent()
        value.verticalOffset = try reader["VerticalOffset"].readIfPresent()
        value.opacity = try reader["Opacity"].readIfPresent()
        value.target = try reader["Target"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.AudioParameters {

    static func write(value: ElasticTranscoderClientTypes.AudioParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AudioPackingMode"].write(value.audioPackingMode)
        try writer["BitRate"].write(value.bitRate)
        try writer["Channels"].write(value.channels)
        try writer["Codec"].write(value.codec)
        try writer["CodecOptions"].write(value.codecOptions, with: ElasticTranscoderClientTypes.AudioCodecOptions.write(value:to:))
        try writer["SampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.AudioParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.AudioParameters()
        value.codec = try reader["Codec"].readIfPresent()
        value.sampleRate = try reader["SampleRate"].readIfPresent()
        value.bitRate = try reader["BitRate"].readIfPresent()
        value.channels = try reader["Channels"].readIfPresent()
        value.audioPackingMode = try reader["AudioPackingMode"].readIfPresent()
        value.codecOptions = try reader["CodecOptions"].readIfPresent(with: ElasticTranscoderClientTypes.AudioCodecOptions.read(from:))
        return value
    }
}

extension ElasticTranscoderClientTypes.AudioCodecOptions {

    static func write(value: ElasticTranscoderClientTypes.AudioCodecOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BitDepth"].write(value.bitDepth)
        try writer["BitOrder"].write(value.bitOrder)
        try writer["Profile"].write(value.profile)
        try writer["Signed"].write(value.signed)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticTranscoderClientTypes.AudioCodecOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticTranscoderClientTypes.AudioCodecOptions()
        value.profile = try reader["Profile"].readIfPresent()
        value.bitDepth = try reader["BitDepth"].readIfPresent()
        value.bitOrder = try reader["BitOrder"].readIfPresent()
        value.signed = try reader["Signed"].readIfPresent()
        return value
    }
}

extension ElasticTranscoderClientTypes.CreateJobOutput {

    static func write(value: ElasticTranscoderClientTypes.CreateJobOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlbumArt"].write(value.albumArt, with: ElasticTranscoderClientTypes.JobAlbumArt.write(value:to:))
        try writer["Captions"].write(value.captions, with: ElasticTranscoderClientTypes.Captions.write(value:to:))
        try writer["Composition"].writeList(value.composition, memberWritingClosure: ElasticTranscoderClientTypes.Clip.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Encryption"].write(value.encryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["Key"].write(value.key)
        try writer["PresetId"].write(value.presetId)
        try writer["Rotate"].write(value.rotate)
        try writer["SegmentDuration"].write(value.segmentDuration)
        try writer["ThumbnailEncryption"].write(value.thumbnailEncryption, with: ElasticTranscoderClientTypes.Encryption.write(value:to:))
        try writer["ThumbnailPattern"].write(value.thumbnailPattern)
        try writer["Watermarks"].writeList(value.watermarks, memberWritingClosure: ElasticTranscoderClientTypes.JobWatermark.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ElasticTranscoderClientTypes.CreateJobPlaylist {

    static func write(value: ElasticTranscoderClientTypes.CreateJobPlaylist?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Format"].write(value.format)
        try writer["HlsContentProtection"].write(value.hlsContentProtection, with: ElasticTranscoderClientTypes.HlsContentProtection.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["OutputKeys"].writeList(value.outputKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PlayReadyDrm"].write(value.playReadyDrm, with: ElasticTranscoderClientTypes.PlayReadyDrm.write(value:to:))
    }
}

public enum ElasticTranscoderClientTypes {}
