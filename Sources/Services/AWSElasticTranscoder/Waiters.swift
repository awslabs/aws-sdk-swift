// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientProtocol {

    static func jobCompleteWaiterConfig() throws -> WaiterConfiguration<ReadJobInput, ReadJobOutputResponse> {
        let acceptors: [WaiterConfiguration<ReadJobInput, ReadJobOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: ReadJobInput, result: Result<ReadJobOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Job.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Complete"
                guard case .success(let output) = result else { return false }
                let job = output.job
                let status = job?.status
                return JMESUtils.compare(status, ==, "Complete")
            }),
            .init(state: .failure, matcher: { (input: ReadJobInput, result: Result<ReadJobOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Job.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Canceled"
                guard case .success(let output) = result else { return false }
                let job = output.job
                let status = job?.status
                return JMESUtils.compare(status, ==, "Canceled")
            }),
            .init(state: .failure, matcher: { (input: ReadJobInput, result: Result<ReadJobOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Job.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Error"
                guard case .success(let output) = result else { return false }
                let job = output.job
                let status = job?.status
                return JMESUtils.compare(status, ==, "Error")
            }),
        ]
        return try WaiterConfiguration<ReadJobInput, ReadJobOutputResponse>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the JobComplete event on the readJob operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `ReadJobInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilJobComplete(options: WaiterOptions, input: ReadJobInput) async throws -> WaiterOutcome<ReadJobOutputResponse> {
        let waiter = Waiter(config: try Self.jobCompleteWaiterConfig(), operation: self.readJob(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
