//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// Concurrent updates caused an exception, for example, if you request an update to a scaling plan that already has a pending update.
public struct ConcurrentUpdateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentUpdateException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service encountered an internal error.
public struct InternalServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your account exceeded a limit. This exception is thrown when a per-account resource limit is exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An exception was thrown for a validation issue. Review the parameters provided.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a tag.
    public struct TagFilter {
        /// The tag key.
        public var key: Swift.String?
        /// The tag values (0 to 20).
        public var values: [Swift.String]?

        public init(
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

extension AutoScalingPlansClientTypes {
    /// Represents an application source.
    public struct ApplicationSource {
        /// The Amazon Resource Name (ARN) of a AWS CloudFormation stack.
        public var cloudFormationStackARN: Swift.String?
        /// A set of tags (up to 50).
        public var tagFilters: [AutoScalingPlansClientTypes.TagFilter]?

        public init(
            cloudFormationStackARN: Swift.String? = nil,
            tagFilters: [AutoScalingPlansClientTypes.TagFilter]? = nil
        )
        {
            self.cloudFormationStackARN = cloudFormationStackARN
            self.tagFilters = tagFilters
        }
    }

}

extension AutoScalingPlansClientTypes {
    /// Represents a dimension for a customized metric.
    public struct MetricDimension {
        /// The name of the dimension.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension AutoScalingPlansClientTypes {

    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a CloudWatch metric of your choosing that can be used for predictive scaling. For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the Sum and Average statistics that CloudWatch computes from metric data. When you choose a load metric, make sure that the required Sum and Average statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The Sum statistic must represent the total load on the resource, and the Average statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the Sum statistic represents the total request count processed by the group, then the Average statistic for the specified metric must represent the average request count processed by each instance of the group. If you publish your own metrics, you can aggregate the data points at a given interval and then publish the aggregated data points to CloudWatch. Before AWS Auto Scaling generates the forecast, it sums up all the metric data points that occurred within each hour to match the granularity period that is used in the forecast (60 minutes). For information about terminology, available metrics, or how to publish new metrics, see [Amazon CloudWatch Concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide. After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see [View Scaling Information for a Resource](https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource) in the AWS Auto Scaling User Guide.
    public struct CustomizedLoadMetricSpecification {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.
        public var dimensions: [AutoScalingPlansClientTypes.MetricDimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        /// This member is required.
        public var namespace: Swift.String?
        /// The statistic of the metric. The only valid value is Sum.
        /// This member is required.
        public var statistic: AutoScalingPlansClientTypes.MetricStatistic?
        /// The unit of the metric.
        public var unit: Swift.String?

        public init(
            dimensions: [AutoScalingPlansClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingPlansClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

extension AutoScalingPlansClientTypes {

    public enum LoadMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case albtargetgrouprequestcount
        case asgtotalcpuutilization
        case asgtotalnetworkin
        case asgtotalnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadMetricType] {
            return [
                .albtargetgrouprequestcount,
                .asgtotalcpuutilization,
                .asgtotalnetworkin,
                .asgtotalnetworkout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .albtargetgrouprequestcount: return "ALBTargetGroupRequestCount"
            case .asgtotalcpuutilization: return "ASGTotalCPUUtilization"
            case .asgtotalnetworkin: return "ASGTotalNetworkIn"
            case .asgtotalnetworkout: return "ASGTotalNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a predefined metric that can be used for predictive scaling. After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see [View Scaling Information for a Resource](https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource) in the AWS Auto Scaling User Guide.
    public struct PredefinedLoadMetricSpecification {
        /// The metric type.
        /// This member is required.
        public var predefinedLoadMetricType: AutoScalingPlansClientTypes.LoadMetricType?
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBTargetGroupRequestCount and there is a target group for an Application Load Balancer attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format is app///targetgroup//, where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// This is an example: app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d. To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init(
            predefinedLoadMetricType: AutoScalingPlansClientTypes.LoadMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedLoadMetricType = predefinedLoadMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingPlansClientTypes {

    public enum PredictiveScalingMaxCapacityBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case setforecastcapacitytomaxcapacity
        case setmaxcapacityaboveforecastcapacity
        case setmaxcapacitytoforecastcapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMaxCapacityBehavior] {
            return [
                .setforecastcapacitytomaxcapacity,
                .setmaxcapacityaboveforecastcapacity,
                .setmaxcapacitytoforecastcapacity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .setforecastcapacitytomaxcapacity: return "SetForecastCapacityToMaxCapacity"
            case .setmaxcapacityaboveforecastcapacity: return "SetMaxCapacityAboveForecastCapacity"
            case .setmaxcapacitytoforecastcapacity: return "SetMaxCapacityToForecastCapacity"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {

    public enum PredictiveScalingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forecastandscale
        case forecastonly
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMode] {
            return [
                .forecastandscale,
                .forecastonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forecastandscale: return "ForecastAndScale"
            case .forecastonly: return "ForecastOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {

    public enum ScalableDimension: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoscalinggroupdesiredcapacity
        case dynamodbindexreadcapacityunits
        case dynamodbindexwritecapacityunits
        case dynamodbtablereadcapacityunits
        case dynamodbtablewritecapacityunits
        case ec2spotfleetrequesttargetcapacity
        case ecsservicedesiredcount
        case rdsclusterreadreplicacount
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalableDimension] {
            return [
                .autoscalinggroupdesiredcapacity,
                .dynamodbindexreadcapacityunits,
                .dynamodbindexwritecapacityunits,
                .dynamodbtablereadcapacityunits,
                .dynamodbtablewritecapacityunits,
                .ec2spotfleetrequesttargetcapacity,
                .ecsservicedesiredcount,
                .rdsclusterreadreplicacount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoscalinggroupdesiredcapacity: return "autoscaling:autoScalingGroup:DesiredCapacity"
            case .dynamodbindexreadcapacityunits: return "dynamodb:index:ReadCapacityUnits"
            case .dynamodbindexwritecapacityunits: return "dynamodb:index:WriteCapacityUnits"
            case .dynamodbtablereadcapacityunits: return "dynamodb:table:ReadCapacityUnits"
            case .dynamodbtablewritecapacityunits: return "dynamodb:table:WriteCapacityUnits"
            case .ec2spotfleetrequesttargetcapacity: return "ec2:spot-fleet-request:TargetCapacity"
            case .ecsservicedesiredcount: return "ecs:service:DesiredCount"
            case .rdsclusterreadreplicacount: return "rds:cluster:ReadReplicaCount"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {

    public enum ScalingPolicyUpdateBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keepexternalpolicies
        case replaceexternalpolicies
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingPolicyUpdateBehavior] {
            return [
                .keepexternalpolicies,
                .replaceexternalpolicies
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keepexternalpolicies: return "KeepExternalPolicies"
            case .replaceexternalpolicies: return "ReplaceExternalPolicies"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {

    public enum ServiceNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoscaling
        case dynamodb
        case ec2
        case ecs
        case rds
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNamespace] {
            return [
                .autoscaling,
                .dynamodb,
                .ec2,
                .ecs,
                .rds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoscaling: return "autoscaling"
            case .dynamodb: return "dynamodb"
            case .ec2: return "ec2"
            case .ecs: return "ecs"
            case .rds: return "rds"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. To create your customized scaling metric specification:
    ///
    /// * Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see [Publish Custom Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide.
    ///
    /// * Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases.
    ///
    ///
    /// For information about terminology, available metrics, or how to publish new metrics, see [Amazon CloudWatch Concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide.
    public struct CustomizedScalingMetricSpecification {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.
        public var dimensions: [AutoScalingPlansClientTypes.MetricDimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        /// This member is required.
        public var namespace: Swift.String?
        /// The statistic of the metric.
        /// This member is required.
        public var statistic: AutoScalingPlansClientTypes.MetricStatistic?
        /// The unit of the metric.
        public var unit: Swift.String?

        public init(
            dimensions: [AutoScalingPlansClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingPlansClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

extension AutoScalingPlansClientTypes {

    public enum ScalingMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case dynamodbreadcapacityutilization
        case dynamodbwritecapacityutilization
        case ec2spotfleetrequestaveragecpuutilization
        case ec2spotfleetrequestaveragenetworkin
        case ec2spotfleetrequestaveragenetworkout
        case ecsserviceaveragecpuutilization
        case ecsserviceaveragememoryutilization
        case rdsreaderaveragecpuutilization
        case rdsreaderaveragedatabaseconnections
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingMetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout,
                .dynamodbreadcapacityutilization,
                .dynamodbwritecapacityutilization,
                .ec2spotfleetrequestaveragecpuutilization,
                .ec2spotfleetrequestaveragenetworkin,
                .ec2spotfleetrequestaveragenetworkout,
                .ecsserviceaveragecpuutilization,
                .ecsserviceaveragememoryutilization,
                .rdsreaderaveragecpuutilization,
                .rdsreaderaveragedatabaseconnections
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case .dynamodbreadcapacityutilization: return "DynamoDBReadCapacityUtilization"
            case .dynamodbwritecapacityutilization: return "DynamoDBWriteCapacityUtilization"
            case .ec2spotfleetrequestaveragecpuutilization: return "EC2SpotFleetRequestAverageCPUUtilization"
            case .ec2spotfleetrequestaveragenetworkin: return "EC2SpotFleetRequestAverageNetworkIn"
            case .ec2spotfleetrequestaveragenetworkout: return "EC2SpotFleetRequestAverageNetworkOut"
            case .ecsserviceaveragecpuutilization: return "ECSServiceAverageCPUUtilization"
            case .ecsserviceaveragememoryutilization: return "ECSServiceAverageMemoryUtilization"
            case .rdsreaderaveragecpuutilization: return "RDSReaderAverageCPUUtilization"
            case .rdsreaderaveragedatabaseconnections: return "RDSReaderAverageDatabaseConnections"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a predefined metric that can be used for dynamic scaling as part of a target tracking scaling policy.
    public struct PredefinedScalingMetricSpecification {
        /// The metric type. The ALBRequestCountPerTarget metric type applies only to Auto Scaling groups, Spot Fleet requests, and ECS services.
        /// This member is required.
        public var predefinedScalingMetricType: AutoScalingPlansClientTypes.ScalingMetricType?
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or ECS service. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format is app///targetgroup//, where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// This is an example: app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d. To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init(
            predefinedScalingMetricType: AutoScalingPlansClientTypes.ScalingMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedScalingMetricType = predefinedScalingMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingPlansClientTypes {
    /// Describes a target tracking configuration to use with AWS Auto Scaling. Used with [ScalingInstruction] and [ScalingPolicy].
    public struct TargetTrackingConfiguration {
        /// A customized metric. You can specify either a predefined metric or a customized metric.
        public var customizedScalingMetricSpecification: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification?
        /// Indicates whether scale in by the target tracking scaling policy is disabled. If the value is true, scale in is disabled and the target tracking scaling policy doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable resource. The default value is false.
        public var disableScaleIn: Swift.Bool?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.
        public var estimatedInstanceWarmup: Swift.Int?
        /// A predefined metric. You can specify either a predefined metric or a customized metric.
        public var predefinedScalingMetricSpecification: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification?
        /// The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start. This property is not used if the scalable resource is an Auto Scaling group. With the scale-in cooldown period, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn't complete.
        public var scaleInCooldown: Swift.Int?
        /// The amount of time, in seconds, to wait for a previous scale-out activity to take effect. This property is not used if the scalable resource is an Auto Scaling group. With the scale-out cooldown period, the intention is to continuously (but not excessively) scale out. After Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won't increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends.
        public var scaleOutCooldown: Swift.Int?
        /// The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            customizedScalingMetricSpecification: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification? = nil,
            disableScaleIn: Swift.Bool? = nil,
            estimatedInstanceWarmup: Swift.Int? = nil,
            predefinedScalingMetricSpecification: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

extension AutoScalingPlansClientTypes {
    /// Describes a scaling instruction for a scalable resource in a scaling plan. Each scaling instruction applies to one resource. AWS Auto Scaling creates target tracking scaling policies based on the scaling instructions. Target tracking scaling policies adjust the capacity of your scalable resource as required to maintain resource utilization at the target value that you specified. AWS Auto Scaling also configures predictive scaling for your Amazon EC2 Auto Scaling groups using a subset of parameters, including the load metric, the scaling metric, the target value for the scaling metric, the predictive scaling mode (forecast and scale or forecast only), and the desired behavior when the forecast capacity exceeds the maximum capacity of the resource. With predictive scaling, AWS Auto Scaling generates forecasts with traffic predictions for the two days ahead and schedules scaling actions that proactively add and remove resource capacity to match the forecast. We recommend waiting a minimum of 24 hours after creating an Auto Scaling group to configure predictive scaling. At minimum, there must be 24 hours of historical data to generate a forecast. For more information, see [Best Practices for AWS Auto Scaling](https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-best-practices.html) in the AWS Auto Scaling User Guide.
    public struct ScalingInstruction {
        /// The customized load metric to use for predictive scaling. This parameter or a PredefinedLoadMetricSpecification is required when configuring predictive scaling, and cannot be used otherwise.
        public var customizedLoadMetricSpecification: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification?
        /// Controls whether dynamic scaling by AWS Auto Scaling is disabled. When dynamic scaling is enabled, AWS Auto Scaling creates target tracking scaling policies based on the specified target tracking configurations. The default is enabled (false).
        public var disableDynamicScaling: Swift.Bool?
        /// The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for PredictiveScalingMaxCapacityBehavior.
        /// This member is required.
        public var maxCapacity: Swift.Int?
        /// The minimum capacity of the resource.
        /// This member is required.
        public var minCapacity: Swift.Int?
        /// The predefined load metric to use for predictive scaling. This parameter or a CustomizedLoadMetricSpecification is required when configuring predictive scaling, and cannot be used otherwise.
        public var predefinedLoadMetricSpecification: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification?
        /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource. The default value is SetForecastCapacityToMaxCapacity. The following are possible values:
        ///
        /// * SetForecastCapacityToMaxCapacity - AWS Auto Scaling cannot scale resource capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit.
        ///
        /// * SetMaxCapacityToForecastCapacity - AWS Auto Scaling may scale resource capacity higher than the maximum capacity to equal but not exceed forecast capacity.
        ///
        /// * SetMaxCapacityAboveForecastCapacity - AWS Auto Scaling may scale resource capacity higher than the maximum capacity by a specified buffer value. The intention is to give the target tracking scaling policy extra capacity if unexpected traffic occurs.
        ///
        ///
        /// Only valid when configuring predictive scaling.
        public var predictiveScalingMaxCapacityBehavior: AutoScalingPlansClientTypes.PredictiveScalingMaxCapacityBehavior?
        /// The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. Only valid when configuring predictive scaling. Required if the PredictiveScalingMaxCapacityBehavior is set to SetMaxCapacityAboveForecastCapacity, and cannot be used otherwise. The range is 1-100.
        public var predictiveScalingMaxCapacityBuffer: Swift.Int?
        /// The predictive scaling mode. The default value is ForecastAndScale. Otherwise, AWS Auto Scaling forecasts capacity but does not create any scheduled scaling actions based on the capacity forecast.
        public var predictiveScalingMode: AutoScalingPlansClientTypes.PredictiveScalingMode?
        /// The ID of the resource. This string consists of the resource type and unique identifier.
        ///
        /// * Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.
        ///
        /// * ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.
        ///
        /// * Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.
        ///
        /// * DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.
        ///
        /// * DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.
        ///
        /// * Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.
        /// This member is required.
        public var resourceId: Swift.String?
        /// The scalable dimension associated with the resource.
        ///
        /// * autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.
        ///
        /// * ecs:service:DesiredCount - The desired task count of an ECS service.
        ///
        /// * ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.
        ///
        /// * dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.
        ///
        /// * dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.
        ///
        /// * dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.
        ///
        /// * dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.
        ///
        /// * rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
        /// This member is required.
        public var scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
        /// Controls whether a resource's externally created scaling policies are kept or replaced. The default value is KeepExternalPolicies. If the parameter is set to ReplaceExternalPolicies, any scaling policies that are external to AWS Auto Scaling are deleted and new target tracking scaling policies created. Only valid when configuring dynamic scaling. Condition: The number of existing policies to be replaced must be less than or equal to 50. If there are more than 50 policies to be replaced, AWS Auto Scaling keeps all existing policies and does not create new ones.
        public var scalingPolicyUpdateBehavior: AutoScalingPlansClientTypes.ScalingPolicyUpdateBehavior?
        /// The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out. For example, if the forecast says to add capacity at 10:00 AM, and the buffer time is 5 minutes, then the run time of the corresponding scheduled scaling action will be 9:55 AM. The intention is to give resources time to be provisioned. For example, it can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete. The value must be less than the forecast interval duration of 3600 seconds (60 minutes). The default is 300 seconds. Only valid when configuring predictive scaling.
        public var scheduledActionBufferTime: Swift.Int?
        /// The namespace of the AWS service.
        /// This member is required.
        public var serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?
        /// The target tracking configurations (up to 10). Each of these structures must specify a unique scaling metric and a target value for the metric.
        /// This member is required.
        public var targetTrackingConfigurations: [AutoScalingPlansClientTypes.TargetTrackingConfiguration]?

        public init(
            customizedLoadMetricSpecification: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification? = nil,
            disableDynamicScaling: Swift.Bool? = nil,
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            predefinedLoadMetricSpecification: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification? = nil,
            predictiveScalingMaxCapacityBehavior: AutoScalingPlansClientTypes.PredictiveScalingMaxCapacityBehavior? = nil,
            predictiveScalingMaxCapacityBuffer: Swift.Int? = nil,
            predictiveScalingMode: AutoScalingPlansClientTypes.PredictiveScalingMode? = nil,
            resourceId: Swift.String? = nil,
            scalableDimension: AutoScalingPlansClientTypes.ScalableDimension? = nil,
            scalingPolicyUpdateBehavior: AutoScalingPlansClientTypes.ScalingPolicyUpdateBehavior? = nil,
            scheduledActionBufferTime: Swift.Int? = nil,
            serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace? = nil,
            targetTrackingConfigurations: [AutoScalingPlansClientTypes.TargetTrackingConfiguration]? = nil
        )
        {
            self.customizedLoadMetricSpecification = customizedLoadMetricSpecification
            self.disableDynamicScaling = disableDynamicScaling
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior
            self.predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer
            self.predictiveScalingMode = predictiveScalingMode
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior
            self.scheduledActionBufferTime = scheduledActionBufferTime
            self.serviceNamespace = serviceNamespace
            self.targetTrackingConfigurations = targetTrackingConfigurations
        }
    }

}

public struct CreateScalingPlanInput {
    /// A CloudFormation stack or set of tags. You can create one scaling plan per application source. For more information, see [ApplicationSource](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html) in the AWS Auto Scaling API Reference.
    /// This member is required.
    public var applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
    /// The scaling instructions. For more information, see [ScalingInstruction](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html) in the AWS Auto Scaling API Reference.
    /// This member is required.
    public var scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
    /// The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
    /// This member is required.
    public var scalingPlanName: Swift.String?

    public init(
        applicationSource: AutoScalingPlansClientTypes.ApplicationSource? = nil,
        scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]? = nil,
        scalingPlanName: Swift.String? = nil
    )
    {
        self.applicationSource = applicationSource
        self.scalingInstructions = scalingInstructions
        self.scalingPlanName = scalingPlanName
    }
}

public struct CreateScalingPlanOutput {
    /// The version number of the scaling plan. This value is always 1. Currently, you cannot have multiple scaling plan versions.
    /// This member is required.
    public var scalingPlanVersion: Swift.Int?

    public init(
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.scalingPlanVersion = scalingPlanVersion
    }
}

/// The specified object could not be found.
public struct ObjectNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ObjectNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteScalingPlanInput {
    /// The name of the scaling plan.
    /// This member is required.
    public var scalingPlanName: Swift.String?
    /// The version number of the scaling plan. Currently, the only valid value is 1.
    /// This member is required.
    public var scalingPlanVersion: Swift.Int?

    public init(
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
    }
}

public struct DeleteScalingPlanOutput {

    public init() { }
}

/// The token provided is not valid.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeScalingPlanResourcesInput {
    /// The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?
    /// The name of the scaling plan.
    /// This member is required.
    public var scalingPlanName: Swift.String?
    /// The version number of the scaling plan. Currently, the only valid value is 1.
    /// This member is required.
    public var scalingPlanVersion: Swift.Int?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
    }
}

extension AutoScalingPlansClientTypes {

    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case targettrackingscaling
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .targettrackingscaling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .targettrackingscaling: return "TargetTrackingScaling"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a scaling policy.
    public struct ScalingPolicy {
        /// The name of the scaling policy.
        /// This member is required.
        public var policyName: Swift.String?
        /// The type of scaling policy.
        /// This member is required.
        public var policyType: AutoScalingPlansClientTypes.PolicyType?
        /// The target tracking scaling policy. Includes support for predefined or customized metrics.
        public var targetTrackingConfiguration: AutoScalingPlansClientTypes.TargetTrackingConfiguration?

        public init(
            policyName: Swift.String? = nil,
            policyType: AutoScalingPlansClientTypes.PolicyType? = nil,
            targetTrackingConfiguration: AutoScalingPlansClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.policyName = policyName
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }

}

extension AutoScalingPlansClientTypes {

    public enum ScalingStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case partiallyactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingStatusCode] {
            return [
                .active,
                .inactive,
                .partiallyactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case .partiallyactive: return "PartiallyActive"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a scalable resource.
    public struct ScalingPlanResource {
        /// The ID of the resource. This string consists of the resource type and unique identifier.
        ///
        /// * Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.
        ///
        /// * ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.
        ///
        /// * Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.
        ///
        /// * DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.
        ///
        /// * DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.
        ///
        /// * Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.
        /// This member is required.
        public var resourceId: Swift.String?
        /// The scalable dimension for the resource.
        ///
        /// * autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.
        ///
        /// * ecs:service:DesiredCount - The desired task count of an ECS service.
        ///
        /// * ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.
        ///
        /// * dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.
        ///
        /// * dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.
        ///
        /// * dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.
        ///
        /// * dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.
        ///
        /// * rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
        /// This member is required.
        public var scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
        /// The name of the scaling plan.
        /// This member is required.
        public var scalingPlanName: Swift.String?
        /// The version number of the scaling plan.
        /// This member is required.
        public var scalingPlanVersion: Swift.Int?
        /// The scaling policies.
        public var scalingPolicies: [AutoScalingPlansClientTypes.ScalingPolicy]?
        /// The scaling status of the resource.
        ///
        /// * Active - The scaling configuration is active.
        ///
        /// * Inactive - The scaling configuration is not active because the scaling plan is being created or the scaling configuration could not be applied. Check the status message for more information.
        ///
        /// * PartiallyActive - The scaling configuration is partially active because the scaling plan is being created or deleted or the scaling configuration could not be fully applied. Check the status message for more information.
        /// This member is required.
        public var scalingStatusCode: AutoScalingPlansClientTypes.ScalingStatusCode?
        /// A simple message about the current scaling status of the resource.
        public var scalingStatusMessage: Swift.String?
        /// The namespace of the AWS service.
        /// This member is required.
        public var serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?

        public init(
            resourceId: Swift.String? = nil,
            scalableDimension: AutoScalingPlansClientTypes.ScalableDimension? = nil,
            scalingPlanName: Swift.String? = nil,
            scalingPlanVersion: Swift.Int? = nil,
            scalingPolicies: [AutoScalingPlansClientTypes.ScalingPolicy]? = nil,
            scalingStatusCode: AutoScalingPlansClientTypes.ScalingStatusCode? = nil,
            scalingStatusMessage: Swift.String? = nil,
            serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace? = nil
        )
        {
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingPolicies = scalingPolicies
            self.scalingStatusCode = scalingStatusCode
            self.scalingStatusMessage = scalingStatusMessage
            self.serviceNamespace = serviceNamespace
        }
    }

}

public struct DescribeScalingPlanResourcesOutput {
    /// The token required to get the next set of results. This value is null if there are no more results to return.
    public var nextToken: Swift.String?
    /// Information about the scalable resources.
    public var scalingPlanResources: [AutoScalingPlansClientTypes.ScalingPlanResource]?

    public init(
        nextToken: Swift.String? = nil,
        scalingPlanResources: [AutoScalingPlansClientTypes.ScalingPlanResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPlanResources = scalingPlanResources
    }
}

public struct DescribeScalingPlansInput {
    /// The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.
    public var applicationSources: [AutoScalingPlansClientTypes.ApplicationSource]?
    /// The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?
    /// The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.
    public var scalingPlanNames: [Swift.String]?
    /// The version number of the scaling plan. Currently, the only valid value is 1. If you specify a scaling plan version, you must also specify a scaling plan name.
    public var scalingPlanVersion: Swift.Int?

    public init(
        applicationSources: [AutoScalingPlansClientTypes.ApplicationSource]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scalingPlanNames: [Swift.String]? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.applicationSources = applicationSources
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scalingPlanNames = scalingPlanNames
        self.scalingPlanVersion = scalingPlanVersion
    }
}

extension AutoScalingPlansClientTypes {

    public enum ScalingPlanStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case activewithproblems
        case creationfailed
        case creationinprogress
        case deletionfailed
        case deletioninprogress
        case updatefailed
        case updateinprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingPlanStatusCode] {
            return [
                .active,
                .activewithproblems,
                .creationfailed,
                .creationinprogress,
                .deletionfailed,
                .deletioninprogress,
                .updatefailed,
                .updateinprogress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .activewithproblems: return "ActiveWithProblems"
            case .creationfailed: return "CreationFailed"
            case .creationinprogress: return "CreationInProgress"
            case .deletionfailed: return "DeletionFailed"
            case .deletioninprogress: return "DeletionInProgress"
            case .updatefailed: return "UpdateFailed"
            case .updateinprogress: return "UpdateInProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a scaling plan.
    public struct ScalingPlan {
        /// A CloudFormation stack or a set of tags. You can create one scaling plan per application source.
        /// This member is required.
        public var applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
        /// The Unix time stamp when the scaling plan was created.
        public var creationTime: Foundation.Date?
        /// The scaling instructions.
        /// This member is required.
        public var scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
        /// The name of the scaling plan.
        /// This member is required.
        public var scalingPlanName: Swift.String?
        /// The version number of the scaling plan.
        /// This member is required.
        public var scalingPlanVersion: Swift.Int?
        /// The status of the scaling plan.
        ///
        /// * Active - The scaling plan is active.
        ///
        /// * ActiveWithProblems - The scaling plan is active, but the scaling configuration for one or more resources could not be applied.
        ///
        /// * CreationInProgress - The scaling plan is being created.
        ///
        /// * CreationFailed - The scaling plan could not be created.
        ///
        /// * DeletionInProgress - The scaling plan is being deleted.
        ///
        /// * DeletionFailed - The scaling plan could not be deleted.
        ///
        /// * UpdateInProgress - The scaling plan is being updated.
        ///
        /// * UpdateFailed - The scaling plan could not be updated.
        /// This member is required.
        public var statusCode: AutoScalingPlansClientTypes.ScalingPlanStatusCode?
        /// A simple message about the current status of the scaling plan.
        public var statusMessage: Swift.String?
        /// The Unix time stamp when the scaling plan entered the current status.
        public var statusStartTime: Foundation.Date?

        public init(
            applicationSource: AutoScalingPlansClientTypes.ApplicationSource? = nil,
            creationTime: Foundation.Date? = nil,
            scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]? = nil,
            scalingPlanName: Swift.String? = nil,
            scalingPlanVersion: Swift.Int? = nil,
            statusCode: AutoScalingPlansClientTypes.ScalingPlanStatusCode? = nil,
            statusMessage: Swift.String? = nil,
            statusStartTime: Foundation.Date? = nil
        )
        {
            self.applicationSource = applicationSource
            self.creationTime = creationTime
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.statusStartTime = statusStartTime
        }
    }

}

public struct DescribeScalingPlansOutput {
    /// The token required to get the next set of results. This value is null if there are no more results to return.
    public var nextToken: Swift.String?
    /// Information about the scaling plans.
    public var scalingPlans: [AutoScalingPlansClientTypes.ScalingPlan]?

    public init(
        nextToken: Swift.String? = nil,
        scalingPlans: [AutoScalingPlansClientTypes.ScalingPlan]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPlans = scalingPlans
    }
}

extension AutoScalingPlansClientTypes {

    public enum ForecastDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityforecast
        case loadforecast
        case scheduledactionmaxcapacity
        case scheduledactionmincapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [ForecastDataType] {
            return [
                .capacityforecast,
                .loadforecast,
                .scheduledactionmaxcapacity,
                .scheduledactionmincapacity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityforecast: return "CapacityForecast"
            case .loadforecast: return "LoadForecast"
            case .scheduledactionmaxcapacity: return "ScheduledActionMaxCapacity"
            case .scheduledactionmincapacity: return "ScheduledActionMinCapacity"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetScalingPlanResourceForecastDataInput {
    /// The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The type of forecast data to get.
    ///
    /// * LoadForecast: The load metric forecast.
    ///
    /// * CapacityForecast: The capacity forecast.
    ///
    /// * ScheduledActionMinCapacity: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.
    ///
    /// * ScheduledActionMaxCapacity: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.
    /// This member is required.
    public var forecastDataType: AutoScalingPlansClientTypes.ForecastDataType?
    /// The ID of the resource. This string consists of a prefix (autoScalingGroup) followed by the name of a specified Auto Scaling group (my-asg). Example: autoScalingGroup/my-asg.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The scalable dimension for the resource. The only valid value is autoscaling:autoScalingGroup:DesiredCapacity.
    /// This member is required.
    public var scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
    /// The name of the scaling plan.
    /// This member is required.
    public var scalingPlanName: Swift.String?
    /// The version number of the scaling plan. Currently, the only valid value is 1.
    /// This member is required.
    public var scalingPlanVersion: Swift.Int?
    /// The namespace of the AWS service. The only valid value is autoscaling.
    /// This member is required.
    public var serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?
    /// The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time.
    /// This member is required.
    public var startTime: Foundation.Date?

    public init(
        endTime: Foundation.Date? = nil,
        forecastDataType: AutoScalingPlansClientTypes.ForecastDataType? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: AutoScalingPlansClientTypes.ScalableDimension? = nil,
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil,
        serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.endTime = endTime
        self.forecastDataType = forecastDataType
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
        self.serviceNamespace = serviceNamespace
        self.startTime = startTime
    }
}

extension AutoScalingPlansClientTypes {
    /// Represents a single value in the forecast data used for predictive scaling.
    public struct Datapoint {
        /// The time stamp for the data point in UTC format.
        public var timestamp: Foundation.Date?
        /// The value of the data point.
        public var value: Swift.Double?

        public init(
            timestamp: Foundation.Date? = nil,
            value: Swift.Double? = nil
        )
        {
            self.timestamp = timestamp
            self.value = value
        }
    }

}

public struct GetScalingPlanResourceForecastDataOutput {
    /// The data points to return.
    /// This member is required.
    public var datapoints: [AutoScalingPlansClientTypes.Datapoint]?

    public init(
        datapoints: [AutoScalingPlansClientTypes.Datapoint]? = nil
    )
    {
        self.datapoints = datapoints
    }
}

public struct UpdateScalingPlanInput {
    /// A CloudFormation stack or set of tags. For more information, see [ApplicationSource](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html) in the AWS Auto Scaling API Reference.
    public var applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
    /// The scaling instructions. For more information, see [ScalingInstruction](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html) in the AWS Auto Scaling API Reference.
    public var scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
    /// The name of the scaling plan.
    /// This member is required.
    public var scalingPlanName: Swift.String?
    /// The version number of the scaling plan. The only valid value is 1. Currently, you cannot have multiple scaling plan versions.
    /// This member is required.
    public var scalingPlanVersion: Swift.Int?

    public init(
        applicationSource: AutoScalingPlansClientTypes.ApplicationSource? = nil,
        scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]? = nil,
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.applicationSource = applicationSource
        self.scalingInstructions = scalingInstructions
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
    }
}

public struct UpdateScalingPlanOutput {

    public init() { }
}

extension CreateScalingPlanInput {

    static func urlPathProvider(_ value: CreateScalingPlanInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteScalingPlanInput {

    static func urlPathProvider(_ value: DeleteScalingPlanInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScalingPlanResourcesInput {

    static func urlPathProvider(_ value: DescribeScalingPlanResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScalingPlansInput {

    static func urlPathProvider(_ value: DescribeScalingPlansInput) -> Swift.String? {
        return "/"
    }
}

extension GetScalingPlanResourceForecastDataInput {

    static func urlPathProvider(_ value: GetScalingPlanResourceForecastDataInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateScalingPlanInput {

    static func urlPathProvider(_ value: UpdateScalingPlanInput) -> Swift.String? {
        return "/"
    }
}

extension CreateScalingPlanInput {

    static func write(value: CreateScalingPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationSource"].write(value.applicationSource, with: AutoScalingPlansClientTypes.ApplicationSource.write(value:to:))
        try writer["ScalingInstructions"].writeList(value.scalingInstructions, memberWritingClosure: AutoScalingPlansClientTypes.ScalingInstruction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ScalingPlanName"].write(value.scalingPlanName)
    }
}

extension DeleteScalingPlanInput {

    static func write(value: DeleteScalingPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScalingPlanName"].write(value.scalingPlanName)
        try writer["ScalingPlanVersion"].write(value.scalingPlanVersion)
    }
}

extension DescribeScalingPlanResourcesInput {

    static func write(value: DescribeScalingPlanResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScalingPlanName"].write(value.scalingPlanName)
        try writer["ScalingPlanVersion"].write(value.scalingPlanVersion)
    }
}

extension DescribeScalingPlansInput {

    static func write(value: DescribeScalingPlansInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationSources"].writeList(value.applicationSources, memberWritingClosure: AutoScalingPlansClientTypes.ApplicationSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScalingPlanNames"].writeList(value.scalingPlanNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ScalingPlanVersion"].write(value.scalingPlanVersion)
    }
}

extension GetScalingPlanResourceForecastDataInput {

    static func write(value: GetScalingPlanResourceForecastDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ForecastDataType"].write(value.forecastDataType)
        try writer["ResourceId"].write(value.resourceId)
        try writer["ScalableDimension"].write(value.scalableDimension)
        try writer["ScalingPlanName"].write(value.scalingPlanName)
        try writer["ScalingPlanVersion"].write(value.scalingPlanVersion)
        try writer["ServiceNamespace"].write(value.serviceNamespace)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension UpdateScalingPlanInput {

    static func write(value: UpdateScalingPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationSource"].write(value.applicationSource, with: AutoScalingPlansClientTypes.ApplicationSource.write(value:to:))
        try writer["ScalingInstructions"].writeList(value.scalingInstructions, memberWritingClosure: AutoScalingPlansClientTypes.ScalingInstruction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ScalingPlanName"].write(value.scalingPlanName)
        try writer["ScalingPlanVersion"].write(value.scalingPlanVersion)
    }
}

extension CreateScalingPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateScalingPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateScalingPlanOutput()
        value.scalingPlanVersion = try reader["ScalingPlanVersion"].readIfPresent() ?? 0
        return value
    }
}

extension DeleteScalingPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScalingPlanOutput {
        return DeleteScalingPlanOutput()
    }
}

extension DescribeScalingPlanResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScalingPlanResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeScalingPlanResourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scalingPlanResources = try reader["ScalingPlanResources"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.ScalingPlanResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeScalingPlansOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScalingPlansOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeScalingPlansOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scalingPlans = try reader["ScalingPlans"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.ScalingPlan.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetScalingPlanResourceForecastDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetScalingPlanResourceForecastDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetScalingPlanResourceForecastDataOutput()
        value.datapoints = try reader["Datapoints"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.Datapoint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension UpdateScalingPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateScalingPlanOutput {
        return UpdateScalingPlanOutput()
    }
}

enum CreateScalingPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentUpdateException": return try ConcurrentUpdateException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScalingPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentUpdateException": return try ConcurrentUpdateException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ObjectNotFoundException": return try ObjectNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScalingPlanResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentUpdateException": return try ConcurrentUpdateException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScalingPlansOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentUpdateException": return try ConcurrentUpdateException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetScalingPlanResourceForecastDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateScalingPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentUpdateException": return try ConcurrentUpdateException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "ObjectNotFoundException": return try ObjectNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServiceException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentUpdateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentUpdateException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentUpdateException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ObjectNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ObjectNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ObjectNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AutoScalingPlansClientTypes.ScalingPlanResource {

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.ScalingPlanResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.ScalingPlanResource()
        value.scalingPlanName = try reader["ScalingPlanName"].readIfPresent() ?? ""
        value.scalingPlanVersion = try reader["ScalingPlanVersion"].readIfPresent() ?? 0
        value.serviceNamespace = try reader["ServiceNamespace"].readIfPresent() ?? .sdkUnknown("")
        value.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.scalableDimension = try reader["ScalableDimension"].readIfPresent() ?? .sdkUnknown("")
        value.scalingPolicies = try reader["ScalingPolicies"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.ScalingPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scalingStatusCode = try reader["ScalingStatusCode"].readIfPresent() ?? .sdkUnknown("")
        value.scalingStatusMessage = try reader["ScalingStatusMessage"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.ScalingPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.ScalingPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.ScalingPolicy()
        value.policyName = try reader["PolicyName"].readIfPresent() ?? ""
        value.policyType = try reader["PolicyType"].readIfPresent() ?? .sdkUnknown("")
        value.targetTrackingConfiguration = try reader["TargetTrackingConfiguration"].readIfPresent(with: AutoScalingPlansClientTypes.TargetTrackingConfiguration.read(from:))
        return value
    }
}

extension AutoScalingPlansClientTypes.TargetTrackingConfiguration {

    static func write(value: AutoScalingPlansClientTypes.TargetTrackingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomizedScalingMetricSpecification"].write(value.customizedScalingMetricSpecification, with: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification.write(value:to:))
        try writer["DisableScaleIn"].write(value.disableScaleIn)
        try writer["EstimatedInstanceWarmup"].write(value.estimatedInstanceWarmup)
        try writer["PredefinedScalingMetricSpecification"].write(value.predefinedScalingMetricSpecification, with: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification.write(value:to:))
        try writer["ScaleInCooldown"].write(value.scaleInCooldown)
        try writer["ScaleOutCooldown"].write(value.scaleOutCooldown)
        try writer["TargetValue"].write(value.targetValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.TargetTrackingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.TargetTrackingConfiguration()
        value.predefinedScalingMetricSpecification = try reader["PredefinedScalingMetricSpecification"].readIfPresent(with: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification.read(from:))
        value.customizedScalingMetricSpecification = try reader["CustomizedScalingMetricSpecification"].readIfPresent(with: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification.read(from:))
        value.targetValue = try reader["TargetValue"].readIfPresent() ?? 0.0
        value.disableScaleIn = try reader["DisableScaleIn"].readIfPresent()
        value.scaleOutCooldown = try reader["ScaleOutCooldown"].readIfPresent()
        value.scaleInCooldown = try reader["ScaleInCooldown"].readIfPresent()
        value.estimatedInstanceWarmup = try reader["EstimatedInstanceWarmup"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification {

    static func write(value: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: AutoScalingPlansClientTypes.MetricDimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["Statistic"].write(value.statistic)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification()
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        value.namespace = try reader["Namespace"].readIfPresent() ?? ""
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.MetricDimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statistic = try reader["Statistic"].readIfPresent() ?? .sdkUnknown("")
        value.unit = try reader["Unit"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.MetricDimension {

    static func write(value: AutoScalingPlansClientTypes.MetricDimension?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.MetricDimension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.MetricDimension()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification {

    static func write(value: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PredefinedScalingMetricType"].write(value.predefinedScalingMetricType)
        try writer["ResourceLabel"].write(value.resourceLabel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification()
        value.predefinedScalingMetricType = try reader["PredefinedScalingMetricType"].readIfPresent() ?? .sdkUnknown("")
        value.resourceLabel = try reader["ResourceLabel"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.ScalingPlan {

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.ScalingPlan {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.ScalingPlan()
        value.scalingPlanName = try reader["ScalingPlanName"].readIfPresent() ?? ""
        value.scalingPlanVersion = try reader["ScalingPlanVersion"].readIfPresent() ?? 0
        value.applicationSource = try reader["ApplicationSource"].readIfPresent(with: AutoScalingPlansClientTypes.ApplicationSource.read(from:))
        value.scalingInstructions = try reader["ScalingInstructions"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.ScalingInstruction.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.statusCode = try reader["StatusCode"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.statusStartTime = try reader["StatusStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension AutoScalingPlansClientTypes.ScalingInstruction {

    static func write(value: AutoScalingPlansClientTypes.ScalingInstruction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomizedLoadMetricSpecification"].write(value.customizedLoadMetricSpecification, with: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification.write(value:to:))
        try writer["DisableDynamicScaling"].write(value.disableDynamicScaling)
        try writer["MaxCapacity"].write(value.maxCapacity)
        try writer["MinCapacity"].write(value.minCapacity)
        try writer["PredefinedLoadMetricSpecification"].write(value.predefinedLoadMetricSpecification, with: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification.write(value:to:))
        try writer["PredictiveScalingMaxCapacityBehavior"].write(value.predictiveScalingMaxCapacityBehavior)
        try writer["PredictiveScalingMaxCapacityBuffer"].write(value.predictiveScalingMaxCapacityBuffer)
        try writer["PredictiveScalingMode"].write(value.predictiveScalingMode)
        try writer["ResourceId"].write(value.resourceId)
        try writer["ScalableDimension"].write(value.scalableDimension)
        try writer["ScalingPolicyUpdateBehavior"].write(value.scalingPolicyUpdateBehavior)
        try writer["ScheduledActionBufferTime"].write(value.scheduledActionBufferTime)
        try writer["ServiceNamespace"].write(value.serviceNamespace)
        try writer["TargetTrackingConfigurations"].writeList(value.targetTrackingConfigurations, memberWritingClosure: AutoScalingPlansClientTypes.TargetTrackingConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.ScalingInstruction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.ScalingInstruction()
        value.serviceNamespace = try reader["ServiceNamespace"].readIfPresent() ?? .sdkUnknown("")
        value.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.scalableDimension = try reader["ScalableDimension"].readIfPresent() ?? .sdkUnknown("")
        value.minCapacity = try reader["MinCapacity"].readIfPresent() ?? 0
        value.maxCapacity = try reader["MaxCapacity"].readIfPresent() ?? 0
        value.targetTrackingConfigurations = try reader["TargetTrackingConfigurations"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.TargetTrackingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.predefinedLoadMetricSpecification = try reader["PredefinedLoadMetricSpecification"].readIfPresent(with: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification.read(from:))
        value.customizedLoadMetricSpecification = try reader["CustomizedLoadMetricSpecification"].readIfPresent(with: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification.read(from:))
        value.scheduledActionBufferTime = try reader["ScheduledActionBufferTime"].readIfPresent()
        value.predictiveScalingMaxCapacityBehavior = try reader["PredictiveScalingMaxCapacityBehavior"].readIfPresent()
        value.predictiveScalingMaxCapacityBuffer = try reader["PredictiveScalingMaxCapacityBuffer"].readIfPresent()
        value.predictiveScalingMode = try reader["PredictiveScalingMode"].readIfPresent()
        value.scalingPolicyUpdateBehavior = try reader["ScalingPolicyUpdateBehavior"].readIfPresent()
        value.disableDynamicScaling = try reader["DisableDynamicScaling"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification {

    static func write(value: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: AutoScalingPlansClientTypes.MetricDimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["Statistic"].write(value.statistic)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification()
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        value.namespace = try reader["Namespace"].readIfPresent() ?? ""
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.MetricDimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statistic = try reader["Statistic"].readIfPresent() ?? .sdkUnknown("")
        value.unit = try reader["Unit"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification {

    static func write(value: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PredefinedLoadMetricType"].write(value.predefinedLoadMetricType)
        try writer["ResourceLabel"].write(value.resourceLabel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification()
        value.predefinedLoadMetricType = try reader["PredefinedLoadMetricType"].readIfPresent() ?? .sdkUnknown("")
        value.resourceLabel = try reader["ResourceLabel"].readIfPresent()
        return value
    }
}

extension AutoScalingPlansClientTypes.ApplicationSource {

    static func write(value: AutoScalingPlansClientTypes.ApplicationSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudFormationStackARN"].write(value.cloudFormationStackARN)
        try writer["TagFilters"].writeList(value.tagFilters, memberWritingClosure: AutoScalingPlansClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.ApplicationSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.ApplicationSource()
        value.cloudFormationStackARN = try reader["CloudFormationStackARN"].readIfPresent()
        value.tagFilters = try reader["TagFilters"].readListIfPresent(memberReadingClosure: AutoScalingPlansClientTypes.TagFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingPlansClientTypes.TagFilter {

    static func write(value: AutoScalingPlansClientTypes.TagFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.TagFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.TagFilter()
        value.key = try reader["Key"].readIfPresent()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingPlansClientTypes.Datapoint {

    static func read(from reader: SmithyJSON.Reader) throws -> AutoScalingPlansClientTypes.Datapoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingPlansClientTypes.Datapoint()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

public enum AutoScalingPlansClientTypes {}
