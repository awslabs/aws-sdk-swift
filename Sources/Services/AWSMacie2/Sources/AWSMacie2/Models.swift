//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension Macie2ClientTypes {

    /// The current status of an account as the delegated Amazon Macie administrator account for an organization in Organizations. Possible values are:
    public enum AdminStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disablingInProgress
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AdminStatus] {
            return [
                .disablingInProgress,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disablingInProgress: return "DISABLING_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the delegated Amazon Macie administrator account for an organization in Organizations.
    public struct AdminAccount {
        /// The Amazon Web Services account ID for the account.
        public var accountId: Swift.String?
        /// The current status of the account as the delegated Amazon Macie administrator account for the organization.
        public var status: Macie2ClientTypes.AdminStatus?

        public init(
            accountId: Swift.String? = nil,
            status: Macie2ClientTypes.AdminStatus? = nil
        )
        {
            self.accountId = accountId
            self.status = status
        }
    }

}

extension Macie2ClientTypes {
    /// Provides a subset of information about an allow list.
    public struct AllowListSummary {
        /// The Amazon Resource Name (ARN) of the allow list.
        public var arn: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the allow list was created in Amazon Macie.
        public var createdAt: Foundation.Date?
        /// The custom description of the allow list.
        public var description: Swift.String?
        /// The unique identifier for the allow list.
        public var id: Swift.String?
        /// The custom name of the allow list.
        public var name: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the allow list's settings were most recently changed in Amazon Macie.
        public var updatedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
            self.updatedAt = updatedAt
        }
    }

}

extension Macie2ClientTypes {

    /// The status of automated sensitive data discovery for an Amazon Macie account. Valid values are:
    public enum AutomatedDiscoveryAccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomatedDiscoveryAccountStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the status of automated sensitive data discovery for an Amazon Macie account.
    public struct AutomatedDiscoveryAccount {
        /// The Amazon Web Services account ID for the account.
        public var accountId: Swift.String?
        /// The current status of automated sensitive data discovery for the account. Possible values are: ENABLED, perform automated sensitive data discovery activities for the account; and, DISABLED, don't perform automated sensitive data discovery activities for the account.
        public var status: Macie2ClientTypes.AutomatedDiscoveryAccountStatus?

        public init(
            accountId: Swift.String? = nil,
            status: Macie2ClientTypes.AutomatedDiscoveryAccountStatus? = nil
        )
        {
            self.accountId = accountId
            self.status = status
        }
    }

}

extension Macie2ClientTypes {
    /// Changes the status of automated sensitive data discovery for an Amazon Macie account.
    public struct AutomatedDiscoveryAccountUpdate {
        /// The Amazon Web Services account ID for the account.
        public var accountId: Swift.String?
        /// The new status of automated sensitive data discovery for the account. Valid values are: ENABLED, perform automated sensitive data discovery activities for the account; and, DISABLED, don't perform automated sensitive data discovery activities for the account.
        public var status: Macie2ClientTypes.AutomatedDiscoveryAccountStatus?

        public init(
            accountId: Swift.String? = nil,
            status: Macie2ClientTypes.AutomatedDiscoveryAccountStatus? = nil
        )
        {
            self.accountId = accountId
            self.status = status
        }
    }

}

extension Macie2ClientTypes {

    /// The error code that indicates why a request failed to change the status of automated sensitive data discovery for an Amazon Macie account. Possible values are:
    public enum AutomatedDiscoveryAccountUpdateErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountNotFound
        case accountPaused
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomatedDiscoveryAccountUpdateErrorCode] {
            return [
                .accountNotFound,
                .accountPaused
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountNotFound: return "ACCOUNT_NOT_FOUND"
            case .accountPaused: return "ACCOUNT_PAUSED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about a request that failed to change the status of automated sensitive data discovery for an Amazon Macie account.
    public struct AutomatedDiscoveryAccountUpdateError {
        /// The Amazon Web Services account ID for the account that the request applied to.
        public var accountId: Swift.String?
        /// The error code for the error that caused the request to fail for the account (accountId). Possible values are: ACCOUNT_NOT_FOUND, the account doesn’t exist or you're not the Amazon Macie administrator for the account; and, ACCOUNT_PAUSED, Macie isn’t enabled for the account in the current Amazon Web Services Region.
        public var errorCode: Macie2ClientTypes.AutomatedDiscoveryAccountUpdateErrorCode?

        public init(
            accountId: Swift.String? = nil,
            errorCode: Macie2ClientTypes.AutomatedDiscoveryAccountUpdateErrorCode? = nil
        )
        {
            self.accountId = accountId
            self.errorCode = errorCode
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a custom data identifier.
    public struct BatchGetCustomDataIdentifierSummary {
        /// The Amazon Resource Name (ARN) of the custom data identifier.
        public var arn: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.
        public var createdAt: Foundation.Date?
        /// Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.
        public var deleted: Swift.Bool?
        /// The custom description of the custom data identifier.
        public var description: Swift.String?
        /// The unique identifier for the custom data identifier.
        public var id: Swift.String?
        /// The custom name of the custom data identifier.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deleted: Swift.Bool? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.deleted = deleted
            self.description = description
            self.id = id
            self.name = name
        }
    }

}

extension Macie2ClientTypes {

    public enum AllowsUnencryptedObjectUploads: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `false`
        case `true`
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [AllowsUnencryptedObjectUploads] {
            return [
                .false,
                .true,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .false: return "FALSE"
            case .true: return "TRUE"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// Specifies whether automated sensitive data discovery is currently configured to analyze objects in an S3 bucket. Possible values are:
    public enum AutomatedDiscoveryMonitoringStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case monitored
        case notMonitored
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomatedDiscoveryMonitoringStatus] {
            return [
                .monitored,
                .notMonitored
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .monitored: return "MONITORED"
            case .notMonitored: return "NOT_MONITORED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The error code for an error that prevented Amazon Macie from retrieving and processing information about an S3 bucket and the bucket's objects.
    public enum BucketMetadataErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketMetadataErrorCode] {
            return [
                .accessDenied
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    public enum IsDefinedInJob: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `false`
        case `true`
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [IsDefinedInJob] {
            return [
                .false,
                .true,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .false: return "FALSE"
            case .true: return "TRUE"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    public enum IsMonitoredByJob: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `false`
        case `true`
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [IsMonitoredByJob] {
            return [
                .false,
                .true,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .false: return "FALSE"
            case .true: return "TRUE"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies whether any one-time or recurring classification jobs are configured to analyze objects in an S3 bucket, and, if so, the details of the job that ran most recently.
    public struct JobDetails {
        /// Specifies whether any one-time or recurring jobs are configured to analyze objects in the bucket. Possible values are:
        ///
        /// * TRUE - The bucket is explicitly included in the bucket definition (S3BucketDefinitionForJob) for one or more jobs and at least one of those jobs has a status other than CANCELLED. Or the bucket matched the bucket criteria (S3BucketCriteriaForJob) for at least one job that previously ran.
        ///
        /// * FALSE - The bucket isn't explicitly included in the bucket definition (S3BucketDefinitionForJob) for any jobs, all the jobs that explicitly include the bucket in their bucket definitions have a status of CANCELLED, or the bucket didn't match the bucket criteria (S3BucketCriteriaForJob) for any jobs that previously ran.
        ///
        /// * UNKNOWN - An exception occurred when Amazon Macie attempted to retrieve job data for the bucket.
        public var isDefinedInJob: Macie2ClientTypes.IsDefinedInJob?
        /// Specifies whether any recurring jobs are configured to analyze objects in the bucket. Possible values are:
        ///
        /// * TRUE - The bucket is explicitly included in the bucket definition (S3BucketDefinitionForJob) for one or more recurring jobs or the bucket matches the bucket criteria (S3BucketCriteriaForJob) for one or more recurring jobs. At least one of those jobs has a status other than CANCELLED.
        ///
        /// * FALSE - The bucket isn't explicitly included in the bucket definition (S3BucketDefinitionForJob) for any recurring jobs, the bucket doesn't match the bucket criteria (S3BucketCriteriaForJob) for any recurring jobs, or all the recurring jobs that are configured to analyze data in the bucket have a status of CANCELLED.
        ///
        /// * UNKNOWN - An exception occurred when Amazon Macie attempted to retrieve job data for the bucket.
        public var isMonitoredByJob: Macie2ClientTypes.IsMonitoredByJob?
        /// The unique identifier for the job that ran most recently and is configured to analyze objects in the bucket, either the latest run of a recurring job or the only run of a one-time job. This value is typically null if the value for the isDefinedInJob property is FALSE or UNKNOWN.
        public var lastJobId: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the job (lastJobId) started. If the job is a recurring job, this value indicates when the most recent run started. This value is typically null if the value for the isDefinedInJob property is FALSE or UNKNOWN.
        public var lastJobRunTime: Foundation.Date?

        public init(
            isDefinedInJob: Macie2ClientTypes.IsDefinedInJob? = nil,
            isMonitoredByJob: Macie2ClientTypes.IsMonitoredByJob? = nil,
            lastJobId: Swift.String? = nil,
            lastJobRunTime: Foundation.Date? = nil
        )
        {
            self.isDefinedInJob = isDefinedInJob
            self.isMonitoredByJob = isMonitoredByJob
            self.lastJobId = lastJobId
            self.lastJobRunTime = lastJobRunTime
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the number of objects that are in an S3 bucket and use certain types of server-side encryption, use client-side encryption, or aren't encrypted.
    public struct ObjectCountByEncryptionType {
        /// The total number of objects that are encrypted with customer-provided keys. The objects use server-side encryption with customer-provided keys (SSE-C).
        public var customerManaged: Swift.Int?
        /// The total number of objects that are encrypted with KMS keys, either Amazon Web Services managed keys or customer managed keys. The objects use dual-layer server-side encryption or server-side encryption with KMS keys (DSSE-KMS or SSE-KMS).
        public var kmsManaged: Swift.Int?
        /// The total number of objects that are encrypted with Amazon S3 managed keys. The objects use server-side encryption with Amazon S3 managed keys (SSE-S3).
        public var s3Managed: Swift.Int?
        /// The total number of objects that use client-side encryption or aren't encrypted.
        public var unencrypted: Swift.Int?
        /// The total number of objects that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the encryption settings for these objects.
        public var unknown: Swift.Int?

        public init(
            customerManaged: Swift.Int? = nil,
            kmsManaged: Swift.Int? = nil,
            s3Managed: Swift.Int? = nil,
            unencrypted: Swift.Int? = nil,
            unknown: Swift.Int? = nil
        )
        {
            self.customerManaged = customerManaged
            self.kmsManaged = kmsManaged
            self.s3Managed = s3Managed
            self.unencrypted = unencrypted
            self.unknown = unknown
        }
    }

}

extension Macie2ClientTypes {

    public enum EffectivePermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notPublic
        case `public`
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [EffectivePermission] {
            return [
                .notPublic,
                .public,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notPublic: return "NOT_PUBLIC"
            case .public: return "PUBLIC"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the block public access settings for an S3 bucket. These settings can apply to a bucket at the account or bucket level. For detailed information about each setting, see [Blocking public access to your Amazon S3 storage](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html) in the Amazon Simple Storage Service User Guide.
    public struct BlockPublicAccess {
        /// Specifies whether Amazon S3 blocks public access control lists (ACLs) for the bucket and objects in the bucket.
        public var blockPublicAcls: Swift.Bool?
        /// Specifies whether Amazon S3 blocks public bucket policies for the bucket.
        public var blockPublicPolicy: Swift.Bool?
        /// Specifies whether Amazon S3 ignores public ACLs for the bucket and objects in the bucket.
        public var ignorePublicAcls: Swift.Bool?
        /// Specifies whether Amazon S3 restricts public bucket policies for the bucket.
        public var restrictPublicBuckets: Swift.Bool?

        public init(
            blockPublicAcls: Swift.Bool? = nil,
            blockPublicPolicy: Swift.Bool? = nil,
            ignorePublicAcls: Swift.Bool? = nil,
            restrictPublicBuckets: Swift.Bool? = nil
        )
        {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the account-level permissions settings that apply to an S3 bucket.
    public struct AccountLevelPermissions {
        /// The block public access settings for the Amazon Web Services account that owns the bucket.
        public var blockPublicAccess: Macie2ClientTypes.BlockPublicAccess?

        public init(
            blockPublicAccess: Macie2ClientTypes.BlockPublicAccess? = nil
        )
        {
            self.blockPublicAccess = blockPublicAccess
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the permissions settings of the bucket-level access control list (ACL) for an S3 bucket.
    public struct AccessControlList {
        /// Specifies whether the ACL grants the general public with read access permissions for the bucket.
        public var allowsPublicReadAccess: Swift.Bool?
        /// Specifies whether the ACL grants the general public with write access permissions for the bucket.
        public var allowsPublicWriteAccess: Swift.Bool?

        public init(
            allowsPublicReadAccess: Swift.Bool? = nil,
            allowsPublicWriteAccess: Swift.Bool? = nil
        )
        {
            self.allowsPublicReadAccess = allowsPublicReadAccess
            self.allowsPublicWriteAccess = allowsPublicWriteAccess
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the permissions settings of the bucket policy for an S3 bucket.
    public struct BucketPolicy {
        /// Specifies whether the bucket policy allows the general public to have read access to the bucket.
        public var allowsPublicReadAccess: Swift.Bool?
        /// Specifies whether the bucket policy allows the general public to have write access to the bucket.
        public var allowsPublicWriteAccess: Swift.Bool?

        public init(
            allowsPublicReadAccess: Swift.Bool? = nil,
            allowsPublicWriteAccess: Swift.Bool? = nil
        )
        {
            self.allowsPublicReadAccess = allowsPublicReadAccess
            self.allowsPublicWriteAccess = allowsPublicWriteAccess
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the bucket-level permissions settings for an S3 bucket.
    public struct BucketLevelPermissions {
        /// The permissions settings of the access control list (ACL) for the bucket. This value is null if an ACL hasn't been defined for the bucket.
        public var accessControlList: Macie2ClientTypes.AccessControlList?
        /// The block public access settings for the bucket.
        public var blockPublicAccess: Macie2ClientTypes.BlockPublicAccess?
        /// The permissions settings of the bucket policy for the bucket. This value is null if a bucket policy hasn't been defined for the bucket.
        public var bucketPolicy: Macie2ClientTypes.BucketPolicy?

        public init(
            accessControlList: Macie2ClientTypes.AccessControlList? = nil,
            blockPublicAccess: Macie2ClientTypes.BlockPublicAccess? = nil,
            bucketPolicy: Macie2ClientTypes.BucketPolicy? = nil
        )
        {
            self.accessControlList = accessControlList
            self.blockPublicAccess = blockPublicAccess
            self.bucketPolicy = bucketPolicy
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the account-level and bucket-level permissions settings for an S3 bucket.
    public struct BucketPermissionConfiguration {
        /// The account-level permissions settings that apply to the bucket.
        public var accountLevelPermissions: Macie2ClientTypes.AccountLevelPermissions?
        /// The bucket-level permissions settings for the bucket.
        public var bucketLevelPermissions: Macie2ClientTypes.BucketLevelPermissions?

        public init(
            accountLevelPermissions: Macie2ClientTypes.AccountLevelPermissions? = nil,
            bucketLevelPermissions: Macie2ClientTypes.BucketLevelPermissions? = nil
        )
        {
            self.accountLevelPermissions = accountLevelPermissions
            self.bucketLevelPermissions = bucketLevelPermissions
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the permissions settings that determine whether an S3 bucket is publicly accessible.
    public struct BucketPublicAccess {
        /// Specifies whether the bucket is publicly accessible due to the combination of permissions settings that apply to the bucket. Possible values are:
        ///
        /// * NOT_PUBLIC - The bucket isn't publicly accessible.
        ///
        /// * PUBLIC - The bucket is publicly accessible.
        ///
        /// * UNKNOWN - Amazon Macie can't determine whether the bucket is publicly accessible.
        public var effectivePermission: Macie2ClientTypes.EffectivePermission?
        /// The account-level and bucket-level permissions settings for the bucket.
        public var permissionConfiguration: Macie2ClientTypes.BucketPermissionConfiguration?

        public init(
            effectivePermission: Macie2ClientTypes.EffectivePermission? = nil,
            permissionConfiguration: Macie2ClientTypes.BucketPermissionConfiguration? = nil
        )
        {
            self.effectivePermission = effectivePermission
            self.permissionConfiguration = permissionConfiguration
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about settings that define whether one or more objects in an S3 bucket are replicated to S3 buckets for other Amazon Web Services accounts and, if so, which accounts.
    public struct ReplicationDetails {
        /// Specifies whether the bucket is configured to replicate one or more objects to any destination.
        public var replicated: Swift.Bool?
        /// Specifies whether the bucket is configured to replicate one or more objects to a bucket for an Amazon Web Services account that isn't part of your Amazon Macie organization. An Amazon Macie organization is a set of Macie accounts that are centrally managed as a group of related accounts through Organizations or by Macie invitation.
        public var replicatedExternally: Swift.Bool?
        /// An array of Amazon Web Services account IDs, one for each Amazon Web Services account that owns a bucket that the bucket is configured to replicate one or more objects to.
        public var replicationAccounts: [Swift.String]?

        public init(
            replicated: Swift.Bool? = nil,
            replicatedExternally: Swift.Bool? = nil,
            replicationAccounts: [Swift.String]? = nil
        )
        {
            self.replicated = replicated
            self.replicatedExternally = replicatedExternally
            self.replicationAccounts = replicationAccounts
        }
    }

}

extension Macie2ClientTypes {

    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes256
        case `none`
        case awsKms
        case awsKmsDsse
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .aes256,
                .none,
                .awsKms,
                .awsKmsDsse
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .none: return "NONE"
            case .awsKms: return "aws:kms"
            case .awsKmsDsse: return "aws:kms:dsse"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the default server-side encryption settings for an S3 bucket. For detailed information about these settings, see [Setting default server-side encryption behavior for Amazon S3 buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html) in the Amazon Simple Storage Service User Guide.
    public struct BucketServerSideEncryption {
        /// The Amazon Resource Name (ARN) or unique identifier (key ID) for the KMS key that's used by default to encrypt objects that are added to the bucket. This value is null if the bucket is configured to use an Amazon S3 managed key to encrypt new objects.
        public var kmsMasterKeyId: Swift.String?
        /// The server-side encryption algorithm that's used by default to encrypt objects that are added to the bucket. Possible values are:
        ///
        /// * AES256 - New objects use SSE-S3 encryption. They're encrypted with an Amazon S3 managed key.
        ///
        /// * aws:kms - New objects use SSE-KMS encryption. They're encrypted with an KMS key (kmsMasterKeyId), either an Amazon Web Services managed key or a customer managed key.
        ///
        /// * aws:kms:dsse - New objects use DSSE-KMS encryption. They're encrypted with an KMS key (kmsMasterKeyId), either an Amazon Web Services managed key or a customer managed key.
        ///
        /// * NONE - The bucket's default encryption settings don't specify server-side encryption behavior for new objects.
        public var type: Macie2ClientTypes.ModelType?

        public init(
            kmsMasterKeyId: Swift.String? = nil,
            type: Macie2ClientTypes.ModelType? = nil
        )
        {
            self.kmsMasterKeyId = kmsMasterKeyId
            self.type = type
        }
    }

}

extension Macie2ClientTypes {

    public enum SharedAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case external
        case `internal`
        case notShared
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [SharedAccess] {
            return [
                .external,
                .internal,
                .notShared,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .external: return "EXTERNAL"
            case .internal: return "INTERNAL"
            case .notShared: return "NOT_SHARED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the tags that are associated with an S3 bucket or object. Each tag consists of a required tag key and an associated tag value.
    public struct KeyValuePair {
        /// One part of a key-value pair that comprises a tag. A tag key is a general label that acts as a category for more specific tag values.
        public var key: Swift.String?
        /// One part of a key-value pair that comprises a tag. A tag value acts as a descriptor for a tag key. A tag value can be an empty string.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the total storage size (in bytes) or number of objects that Amazon Macie can't analyze in one or more S3 buckets. In a BucketMetadata or MatchingBucket object, this data is for a specific bucket. In a GetBucketStatisticsResponse object, this data is aggregated for all the buckets in the query results. If versioning is enabled for a bucket, storage size values are based on the size of the latest version of each applicable object in the bucket.
    public struct ObjectLevelStatistics {
        /// The total storage size (in bytes) or number of objects that Amazon Macie can't analyze because the objects don't have a file name extension for a supported file or storage format.
        public var fileType: Swift.Int?
        /// The total storage size (in bytes) or number of objects that Amazon Macie can't analyze because the objects use an unsupported storage class.
        public var storageClass: Swift.Int?
        /// The total storage size (in bytes) or number of objects that Amazon Macie can't analyze because the objects use an unsupported storage class or don't have a file name extension for a supported file or storage format.
        public var total: Swift.Int?

        public init(
            fileType: Swift.Int? = nil,
            storageClass: Swift.Int? = nil,
            total: Swift.Int? = nil
        )
        {
            self.fileType = fileType
            self.storageClass = storageClass
            self.total = total
        }
    }

}

extension Macie2ClientTypes {
    /// Provides statistical data and other information about an S3 bucket that Amazon Macie monitors and analyzes for your account. By default, object count and storage size values include data for object parts that are the result of incomplete multipart uploads. For more information, see [How Macie monitors Amazon S3 data security](https://docs.aws.amazon.com/macie/latest/user/monitoring-s3-how-it-works.html) in the Amazon Macie User Guide. If an error occurs when Macie attempts to retrieve and process metadata from Amazon S3 for the bucket or the bucket's objects, the value for the versioning property is false and the value for most other properties is null. Key exceptions are accountId, bucketArn, bucketCreatedAt, bucketName, lastUpdated, and region. To identify the cause of the error, refer to the errorCode and errorMessage values.
    public struct BucketMetadata {
        /// The unique identifier for the Amazon Web Services account that owns the bucket.
        public var accountId: Swift.String?
        /// Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are added to the bucket. Possible values are:
        ///
        /// * FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include a valid server-side encryption header.
        ///
        /// * TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include a valid server-side encryption header.
        ///
        /// * UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of new objects.
        ///
        ///
        /// Valid server-side encryption headers are: x-amz-server-side-encryption with a value of AES256 or aws:kms, and x-amz-server-side-encryption-customer-algorithm with a value of AES256.
        public var allowsUnencryptedObjectUploads: Macie2ClientTypes.AllowsUnencryptedObjectUploads?
        /// Specifies whether automated sensitive data discovery is currently configured to analyze objects in the bucket. Possible values are: MONITORED, the bucket is included in analyses; and, NOT_MONITORED, the bucket is excluded from analyses. If automated sensitive data discovery is disabled for your account, this value is NOT_MONITORED.
        public var automatedDiscoveryMonitoringStatus: Macie2ClientTypes.AutomatedDiscoveryMonitoringStatus?
        /// The Amazon Resource Name (ARN) of the bucket.
        public var bucketArn: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the bucket was created. This value can also indicate when changes such as edits to the bucket's policy were most recently made to the bucket.
        public var bucketCreatedAt: Foundation.Date?
        /// The name of the bucket.
        public var bucketName: Swift.String?
        /// The total number of objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.
        public var classifiableObjectCount: Swift.Int?
        /// The total storage size, in bytes, of the objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format. If versioning is enabled for the bucket, Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.
        public var classifiableSizeInBytes: Swift.Int?
        /// The error code for an error that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. If this value is ACCESS_DENIED, Macie doesn't have permission to retrieve the information. For example, the bucket has a restrictive bucket policy and Amazon S3 denied the request. If this value is null, Macie was able to retrieve and process the information.
        public var errorCode: Macie2ClientTypes.BucketMetadataErrorCode?
        /// A brief description of the error (errorCode) that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. This value is null if Macie was able to retrieve and process the information.
        public var errorMessage: Swift.String?
        /// Specifies whether any one-time or recurring classification jobs are configured to analyze objects in the bucket, and, if so, the details of the job that ran most recently.
        public var jobDetails: Macie2ClientTypes.JobDetails?
        /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently analyzed objects in the bucket while performing automated sensitive data discovery. This value is null if automated sensitive data discovery is disabled for your account.
        public var lastAutomatedDiscoveryTime: Foundation.Date?
        /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved bucket or object metadata from Amazon S3 for the bucket.
        public var lastUpdated: Foundation.Date?
        /// The total number of objects in the bucket.
        public var objectCount: Swift.Int?
        /// The total number of objects in the bucket, grouped by server-side encryption type. This includes a grouping that reports the total number of objects that aren't encrypted or use client-side encryption.
        public var objectCountByEncryptionType: Macie2ClientTypes.ObjectCountByEncryptionType?
        /// Specifies whether the bucket is publicly accessible due to the combination of permissions settings that apply to the bucket, and provides information about those settings.
        public var publicAccess: Macie2ClientTypes.BucketPublicAccess?
        /// The Amazon Web Services Region that hosts the bucket.
        public var region: Swift.String?
        /// Specifies whether the bucket is configured to replicate one or more objects to buckets for other Amazon Web Services accounts and, if so, which accounts.
        public var replicationDetails: Macie2ClientTypes.ReplicationDetails?
        /// The sensitivity score for the bucket, ranging from -1 (classification error) to 100 (sensitive).If automated sensitive data discovery has never been enabled for your account or it’s been disabled for your organization or your standalone account for more than 30 days, possible values are: 1, the bucket is empty; or, 50, the bucket stores objects but it’s been excluded from recent analyses.
        public var sensitivityScore: Swift.Int?
        /// The default server-side encryption settings for the bucket.
        public var serverSideEncryption: Macie2ClientTypes.BucketServerSideEncryption?
        /// Specifies whether the bucket is shared with another Amazon Web Services account, an Amazon CloudFront origin access identity (OAI), or a CloudFront origin access control (OAC). Possible values are:
        ///
        /// * EXTERNAL - The bucket is shared with one or more of the following or any combination of the following: a CloudFront OAI, a CloudFront OAC, or an Amazon Web Services account that isn't part of your Amazon Macie organization.
        ///
        /// * INTERNAL - The bucket is shared with one or more Amazon Web Services accounts that are part of your Amazon Macie organization. It isn't shared with a CloudFront OAI or OAC.
        ///
        /// * NOT_SHARED - The bucket isn't shared with another Amazon Web Services account, a CloudFront OAI, or a CloudFront OAC.
        ///
        /// * UNKNOWN - Amazon Macie wasn't able to evaluate the shared access settings for the bucket.
        ///
        ///
        /// An Amazon Macie organization is a set of Macie accounts that are centrally managed as a group of related accounts through Organizations or by Macie invitation.
        public var sharedAccess: Macie2ClientTypes.SharedAccess?
        /// The total storage size, in bytes, of the bucket. If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each object in the bucket. This value doesn't reflect the storage size of all versions of each object in the bucket.
        public var sizeInBytes: Swift.Int?
        /// The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the bucket. If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.
        public var sizeInBytesCompressed: Swift.Int?
        /// An array that specifies the tags (keys and values) that are associated with the bucket.
        public var tags: [Macie2ClientTypes.KeyValuePair]?
        /// The total number of objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.
        public var unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics?
        /// The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.
        public var unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics?
        /// Specifies whether versioning is enabled for the bucket.
        public var versioning: Swift.Bool?

        public init(
            accountId: Swift.String? = nil,
            allowsUnencryptedObjectUploads: Macie2ClientTypes.AllowsUnencryptedObjectUploads? = nil,
            automatedDiscoveryMonitoringStatus: Macie2ClientTypes.AutomatedDiscoveryMonitoringStatus? = nil,
            bucketArn: Swift.String? = nil,
            bucketCreatedAt: Foundation.Date? = nil,
            bucketName: Swift.String? = nil,
            classifiableObjectCount: Swift.Int? = nil,
            classifiableSizeInBytes: Swift.Int? = nil,
            errorCode: Macie2ClientTypes.BucketMetadataErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            jobDetails: Macie2ClientTypes.JobDetails? = nil,
            lastAutomatedDiscoveryTime: Foundation.Date? = nil,
            lastUpdated: Foundation.Date? = nil,
            objectCount: Swift.Int? = nil,
            objectCountByEncryptionType: Macie2ClientTypes.ObjectCountByEncryptionType? = nil,
            publicAccess: Macie2ClientTypes.BucketPublicAccess? = nil,
            region: Swift.String? = nil,
            replicationDetails: Macie2ClientTypes.ReplicationDetails? = nil,
            sensitivityScore: Swift.Int? = nil,
            serverSideEncryption: Macie2ClientTypes.BucketServerSideEncryption? = nil,
            sharedAccess: Macie2ClientTypes.SharedAccess? = nil,
            sizeInBytes: Swift.Int? = nil,
            sizeInBytesCompressed: Swift.Int? = nil,
            tags: [Macie2ClientTypes.KeyValuePair]? = nil,
            unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics? = nil,
            unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics? = nil,
            versioning: Swift.Bool? = nil
        )
        {
            self.accountId = accountId
            self.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads
            self.automatedDiscoveryMonitoringStatus = automatedDiscoveryMonitoringStatus
            self.bucketArn = bucketArn
            self.bucketCreatedAt = bucketCreatedAt
            self.bucketName = bucketName
            self.classifiableObjectCount = classifiableObjectCount
            self.classifiableSizeInBytes = classifiableSizeInBytes
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.jobDetails = jobDetails
            self.lastAutomatedDiscoveryTime = lastAutomatedDiscoveryTime
            self.lastUpdated = lastUpdated
            self.objectCount = objectCount
            self.objectCountByEncryptionType = objectCountByEncryptionType
            self.publicAccess = publicAccess
            self.region = region
            self.replicationDetails = replicationDetails
            self.sensitivityScore = sensitivityScore
            self.serverSideEncryption = serverSideEncryption
            self.sharedAccess = sharedAccess
            self.sizeInBytes = sizeInBytes
            self.sizeInBytesCompressed = sizeInBytesCompressed
            self.tags = tags
            self.unclassifiableObjectCount = unclassifiableObjectCount
            self.unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytes
            self.versioning = versioning
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the classification scope for an Amazon Macie account. Macie uses the scope's settings when it performs automated sensitive data discovery for the account.
    public struct ClassificationScopeSummary {
        /// The unique identifier for the classification scope.
        public var id: Swift.String?
        /// The name of the classification scope: automated-sensitive-data-discovery.
        public var name: Swift.String?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
        }
    }

}

extension Macie2ClientTypes {

    /// The operator to use in a condition. Depending on the type of condition, possible values are:
    public enum JobComparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case eq
        case gt
        case gte
        case lt
        case lte
        case ne
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [JobComparator] {
            return [
                .contains,
                .eq,
                .gt,
                .gte,
                .lt,
                .lte,
                .ne,
                .startsWith
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .eq: return "EQ"
            case .gt: return "GT"
            case .gte: return "GTE"
            case .lt: return "LT"
            case .lte: return "LTE"
            case .ne: return "NE"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The property to use in a condition that determines whether an S3 bucket is included or excluded from a classification job. Valid values are:
    public enum SimpleCriterionKeyForJob: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case s3BucketEffectivePermission
        case s3BucketName
        case s3BucketSharedAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [SimpleCriterionKeyForJob] {
            return [
                .accountId,
                .s3BucketEffectivePermission,
                .s3BucketName,
                .s3BucketSharedAccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .s3BucketEffectivePermission: return "S3_BUCKET_EFFECTIVE_PERMISSION"
            case .s3BucketName: return "S3_BUCKET_NAME"
            case .s3BucketSharedAccess: return "S3_BUCKET_SHARED_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a property-based condition that determines whether an S3 bucket is included or excluded from a classification job.
    public struct SimpleCriterionForJob {
        /// The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).
        public var comparator: Macie2ClientTypes.JobComparator?
        /// The property to use in the condition.
        public var key: Macie2ClientTypes.SimpleCriterionKeyForJob?
        /// An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:
        ///
        /// * ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the bucket.
        ///
        /// * S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the [BucketPublicAccess.effectivePermission](https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission) property of a bucket.
        ///
        /// * S3_BUCKET_NAME - A string that represents the name of a bucket.
        ///
        /// * S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the [BucketMetadata.sharedAccess](https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess) property of a bucket.
        ///
        ///
        /// Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in these values.
        public var values: [Swift.String]?

        public init(
            comparator: Macie2ClientTypes.JobComparator? = nil,
            key: Macie2ClientTypes.SimpleCriterionKeyForJob? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.values = values
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a tag key, a tag value, or a tag key and value (as a pair) to use in a tag-based condition that determines whether an S3 bucket is included or excluded from a classification job. Tag keys and values are case sensitive. Also, Amazon Macie doesn't support use of partial values or wildcard characters in tag-based conditions.
    public struct TagCriterionPairForJob {
        /// The value for the tag key to use in the condition.
        public var key: Swift.String?
        /// The tag value to use in the condition.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a tag-based condition that determines whether an S3 bucket is included or excluded from a classification job.
    public struct TagCriterionForJob {
        /// The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).
        public var comparator: Macie2ClientTypes.JobComparator?
        /// The tag keys, tag values, or tag key and value pairs to use in the condition.
        public var tagValues: [Macie2ClientTypes.TagCriterionPairForJob]?

        public init(
            comparator: Macie2ClientTypes.JobComparator? = nil,
            tagValues: [Macie2ClientTypes.TagCriterionPairForJob]? = nil
        )
        {
            self.comparator = comparator
            self.tagValues = tagValues
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a property- or tag-based condition that defines criteria for including or excluding S3 buckets from a classification job.
    public struct CriteriaForJob {
        /// A property-based condition that defines a property, operator, and one or more values for including or excluding buckets from the job.
        public var simpleCriterion: Macie2ClientTypes.SimpleCriterionForJob?
        /// A tag-based condition that defines an operator and tag keys, tag values, or tag key and value pairs for including or excluding buckets from the job.
        public var tagCriterion: Macie2ClientTypes.TagCriterionForJob?

        public init(
            simpleCriterion: Macie2ClientTypes.SimpleCriterionForJob? = nil,
            tagCriterion: Macie2ClientTypes.TagCriterionForJob? = nil
        )
        {
            self.simpleCriterion = simpleCriterion
            self.tagCriterion = tagCriterion
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a custom data identifier.
    public struct CustomDataIdentifierSummary {
        /// The Amazon Resource Name (ARN) of the custom data identifier.
        public var arn: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.
        public var createdAt: Foundation.Date?
        /// The custom description of the custom data identifier.
        public var description: Swift.String?
        /// The unique identifier for the custom data identifier.
        public var id: Swift.String?
        /// The custom name of the custom data identifier.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies 1-10 occurrences of a specific type of sensitive data reported by a finding.
    public struct DetectedDataDetails {
        /// An occurrence of the specified type of sensitive data. Each occurrence contains 1-128 characters.
        /// This member is required.
        public var value: Swift.String?

        public init(
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension Macie2ClientTypes {

    /// The type of data identifier that detected a specific type of sensitive data in an S3 bucket. Possible values are:
    public enum DataIdentifierType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case custom
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [DataIdentifierType] {
            return [
                .custom,
                .managed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .custom: return "CUSTOM"
            case .managed: return "MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about a type of sensitive data that Amazon Macie found in an S3 bucket while performing automated sensitive data discovery for an account. The information also specifies the custom or managed data identifier that detected the data. This information is available only if automated sensitive data discovery has been enabled for the account.
    public struct Detection {
        /// If the sensitive data was detected by a custom data identifier, the Amazon Resource Name (ARN) of the custom data identifier that detected the data. Otherwise, this value is null.
        public var arn: Swift.String?
        /// The total number of occurrences of the sensitive data.
        public var count: Swift.Int?
        /// The unique identifier for the custom data identifier or managed data identifier that detected the sensitive data. For additional details about a specified managed data identifier, see [Using managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/managed-data-identifiers.html) in the Amazon Macie User Guide.
        public var id: Swift.String?
        /// The name of the custom data identifier or managed data identifier that detected the sensitive data. For a managed data identifier, this value is the same as the unique identifier (id).
        public var name: Swift.String?
        /// Specifies whether occurrences of this type of sensitive data are excluded (true) or included (false) in the bucket's sensitivity score.
        public var suppressed: Swift.Bool?
        /// The type of data identifier that detected the sensitive data. Possible values are: CUSTOM, for a custom data identifier; and, MANAGED, for a managed data identifier.
        public var type: Macie2ClientTypes.DataIdentifierType?

        public init(
            arn: Swift.String? = nil,
            count: Swift.Int? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            suppressed: Swift.Bool? = nil,
            type: Macie2ClientTypes.DataIdentifierType? = nil
        )
        {
            self.arn = arn
            self.count = count
            self.id = id
            self.name = name
            self.suppressed = suppressed
            self.type = type
        }
    }

}

extension Macie2ClientTypes {

    /// The category of the finding. Possible values are:
    public enum FindingCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case classification
        case policy
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingCategory] {
            return [
                .classification,
                .policy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .classification: return "CLASSIFICATION"
            case .policy: return "POLICY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// Specifies how Amazon Macie found the sensitive data that produced a finding. Possible values are:
    public enum OriginType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatedSensitiveDataDiscovery
        case sensitiveDataDiscoveryJob
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginType] {
            return [
                .automatedSensitiveDataDiscovery,
                .sensitiveDataDiscoveryJob
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatedSensitiveDataDiscovery: return "AUTOMATED_SENSITIVE_DATA_DISCOVERY"
            case .sensitiveDataDiscoveryJob: return "SENSITIVE_DATA_DISCOVERY_JOB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies the location of an occurrence of sensitive data in a Microsoft Excel workbook, CSV file, or TSV file.
    public struct Cell {
        /// The location of the cell, as an absolute cell reference, that contains the sensitive data, for example Sheet2!C5 for cell C5 on Sheet2 in a Microsoft Excel workbook. This value is null for CSV and TSV files.
        public var cellReference: Swift.String?
        /// The column number of the column that contains the sensitive data. For a Microsoft Excel workbook, this value correlates to the alphabetical character(s) for a column identifier, for example: 1 for column A, 2 for column B, and so on.
        public var column: Swift.Int?
        /// The name of the column that contains the sensitive data, if available.
        public var columnName: Swift.String?
        /// The row number of the row that contains the sensitive data.
        public var row: Swift.Int?

        public init(
            cellReference: Swift.String? = nil,
            column: Swift.Int? = nil,
            columnName: Swift.String? = nil,
            row: Swift.Int? = nil
        )
        {
            self.cellReference = cellReference
            self.column = column
            self.columnName = columnName
            self.row = row
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the location of an occurrence of sensitive data in an email message or a non-binary text file such as an HTML, TXT, or XML file.
    public struct Range {
        /// The number of lines from the beginning of the file to the end of the sensitive data.
        public var end: Swift.Int?
        /// The number of lines from the beginning of the file to the beginning of the sensitive data.
        public var start: Swift.Int?
        /// The number of characters, with spaces and starting from 1, from the beginning of the first line that contains the sensitive data (start) to the beginning of the sensitive data.
        public var startColumn: Swift.Int?

        public init(
            end: Swift.Int? = nil,
            start: Swift.Int? = nil,
            startColumn: Swift.Int? = nil
        )
        {
            self.end = end
            self.start = start
            self.startColumn = startColumn
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the location of an occurrence of sensitive data in an Adobe Portable Document Format file.
    public struct Page {
        /// Reserved for future use.
        public var lineRange: Macie2ClientTypes.Range?
        /// Reserved for future use.
        public var offsetRange: Macie2ClientTypes.Range?
        /// The page number of the page that contains the sensitive data.
        public var pageNumber: Swift.Int?

        public init(
            lineRange: Macie2ClientTypes.Range? = nil,
            offsetRange: Macie2ClientTypes.Range? = nil,
            pageNumber: Swift.Int? = nil
        )
        {
            self.lineRange = lineRange
            self.offsetRange = offsetRange
            self.pageNumber = pageNumber
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the location of an occurrence of sensitive data in an Apache Avro object container, Apache Parquet file, JSON file, or JSON Lines file.
    public struct Record {
        /// The path, as a JSONPath expression, to the sensitive data. For an Avro object container or Parquet file, this is the path to the field in the record (recordIndex) that contains the data. For a JSON or JSON Lines file, this is the path to the field or array that contains the data. If the data is a value in an array, the path also indicates which value contains the data. If Amazon Macie detects sensitive data in the name of any element in the path, Macie omits this field. If the name of an element exceeds 240 characters, Macie truncates the name by removing characters from the beginning of the name. If the resulting full path exceeds 250 characters, Macie also truncates the path, starting with the first element in the path, until the path contains 250 or fewer characters.
        public var jsonPath: Swift.String?
        /// For an Avro object container or Parquet file, the record index, starting from 0, for the record that contains the sensitive data. For a JSON Lines file, the line index, starting from 0, for the line that contains the sensitive data. This value is always 0 for JSON files.
        public var recordIndex: Swift.Int?

        public init(
            jsonPath: Swift.String? = nil,
            recordIndex: Swift.Int? = nil
        )
        {
            self.jsonPath = jsonPath
            self.recordIndex = recordIndex
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the location of 1-15 occurrences of sensitive data that was detected by a managed data identifier or a custom data identifier and produced a sensitive data finding.
    public struct Occurrences {
        /// An array of objects, one for each occurrence of sensitive data in a Microsoft Excel workbook, CSV file, or TSV file. This value is null for all other types of files. Each Cell object specifies a cell or field that contains the sensitive data.
        public var cells: [Macie2ClientTypes.Cell]?
        /// An array of objects, one for each occurrence of sensitive data in an email message or a non-binary text file such as an HTML, TXT, or XML file. Each Range object specifies a line or inclusive range of lines that contains the sensitive data, and the position of the data on the specified line or lines. This value is often null for file types that are supported by Cell, Page, or Record objects. Exceptions are the location of sensitive data in: unstructured sections of an otherwise structured file, such as a comment in a file; a malformed file that Amazon Macie analyzes as plain text; and, a CSV or TSV file that has any column names that contain sensitive data.
        public var lineRanges: [Macie2ClientTypes.Range]?
        /// Reserved for future use.
        public var offsetRanges: [Macie2ClientTypes.Range]?
        /// An array of objects, one for each occurrence of sensitive data in an Adobe Portable Document Format file. This value is null for all other types of files. Each Page object specifies a page that contains the sensitive data.
        public var pages: [Macie2ClientTypes.Page]?
        /// An array of objects, one for each occurrence of sensitive data in an Apache Avro object container, Apache Parquet file, JSON file, or JSON Lines file. This value is null for all other types of files. For an Avro object container or Parquet file, each Record object specifies a record index and the path to a field in a record that contains the sensitive data. For a JSON or JSON Lines file, each Record object specifies the path to a field or array that contains the sensitive data. For a JSON Lines file, it also specifies the index of the line that contains the data.
        public var records: [Macie2ClientTypes.Record]?

        public init(
            cells: [Macie2ClientTypes.Cell]? = nil,
            lineRanges: [Macie2ClientTypes.Range]? = nil,
            offsetRanges: [Macie2ClientTypes.Range]? = nil,
            pages: [Macie2ClientTypes.Page]? = nil,
            records: [Macie2ClientTypes.Record]? = nil
        )
        {
            self.cells = cells
            self.lineRanges = lineRanges
            self.offsetRanges = offsetRanges
            self.pages = pages
            self.records = records
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a custom data identifier that produced a sensitive data finding, and the sensitive data that it detected for the finding.
    public struct CustomDetection {
        /// The unique identifier for the custom data identifier.
        public var arn: Swift.String?
        /// The total number of occurrences of the sensitive data that the custom data identifier detected.
        public var count: Swift.Int?
        /// The name of the custom data identifier.
        public var name: Swift.String?
        /// The location of 1-15 occurrences of the sensitive data that the custom data identifier detected. A finding includes location data for a maximum of 15 occurrences of sensitive data.
        public var occurrences: Macie2ClientTypes.Occurrences?

        public init(
            arn: Swift.String? = nil,
            count: Swift.Int? = nil,
            name: Swift.String? = nil,
            occurrences: Macie2ClientTypes.Occurrences? = nil
        )
        {
            self.arn = arn
            self.count = count
            self.name = name
            self.occurrences = occurrences
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about custom data identifiers that produced a sensitive data finding, and the number of occurrences of the data that they detected for the finding.
    public struct CustomDataIdentifiers {
        /// The custom data identifiers that detected the data, and the number of occurrences of the data that each identifier detected.
        public var detections: [Macie2ClientTypes.CustomDetection]?
        /// The total number of occurrences of the data that was detected by the custom data identifiers and produced the finding.
        public var totalCount: Swift.Int?

        public init(
            detections: [Macie2ClientTypes.CustomDetection]? = nil,
            totalCount: Swift.Int? = nil
        )
        {
            self.detections = detections
            self.totalCount = totalCount
        }
    }

}

extension Macie2ClientTypes {

    /// For a finding, the category of sensitive data that was detected and produced the finding. For a managed data identifier, the category of sensitive data that the managed data identifier detects. Possible values are:
    public enum SensitiveDataItemCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case credentials
        case customIdentifier
        case financialInformation
        case personalInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [SensitiveDataItemCategory] {
            return [
                .credentials,
                .customIdentifier,
                .financialInformation,
                .personalInformation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .credentials: return "CREDENTIALS"
            case .customIdentifier: return "CUSTOM_IDENTIFIER"
            case .financialInformation: return "FINANCIAL_INFORMATION"
            case .personalInformation: return "PERSONAL_INFORMATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about a type of sensitive data that was detected by a managed data identifier and produced a sensitive data finding.
    public struct DefaultDetection {
        /// The total number of occurrences of the type of sensitive data that was detected.
        public var count: Swift.Int?
        /// The location of 1-15 occurrences of the sensitive data that was detected. A finding includes location data for a maximum of 15 occurrences of sensitive data.
        public var occurrences: Macie2ClientTypes.Occurrences?
        /// The type of sensitive data that was detected. For example, AWS_CREDENTIALS, PHONE_NUMBER, or ADDRESS.
        public var type: Swift.String?

        public init(
            count: Swift.Int? = nil,
            occurrences: Macie2ClientTypes.Occurrences? = nil,
            type: Swift.String? = nil
        )
        {
            self.count = count
            self.occurrences = occurrences
            self.type = type
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the category, types, and occurrences of sensitive data that produced a sensitive data finding.
    public struct SensitiveDataItem {
        /// The category of sensitive data that was detected. For example: CREDENTIALS, for credentials data such as private keys or Amazon Web Services secret access keys; FINANCIAL_INFORMATION, for financial data such as credit card numbers; or, PERSONAL_INFORMATION, for personal health information, such as health insurance identification numbers, or personally identifiable information, such as passport numbers.
        public var category: Macie2ClientTypes.SensitiveDataItemCategory?
        /// An array of objects, one for each type of sensitive data that was detected. Each object reports the number of occurrences of a specific type of sensitive data that was detected, and the location of up to 15 of those occurrences.
        public var detections: [Macie2ClientTypes.DefaultDetection]?
        /// The total number of occurrences of the sensitive data that was detected.
        public var totalCount: Swift.Int?

        public init(
            category: Macie2ClientTypes.SensitiveDataItemCategory? = nil,
            detections: [Macie2ClientTypes.DefaultDetection]? = nil,
            totalCount: Swift.Int? = nil
        )
        {
            self.category = category
            self.detections = detections
            self.totalCount = totalCount
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the status of a sensitive data finding.
    public struct ClassificationResultStatus {
        /// The status of the finding. Possible values are:
        ///
        /// * COMPLETE - Amazon Macie successfully completed its analysis of the S3 object that the finding applies to.
        ///
        /// * PARTIAL - Macie analyzed only a subset of the data in the S3 object that the finding applies to. For example, the object is an archive file that contains files in an unsupported format.
        ///
        /// * SKIPPED - Macie wasn't able to analyze the S3 object that the finding applies to. For example, the object is a file that uses an unsupported format.
        public var code: Swift.String?
        /// A brief description of the status of the finding. This value is null if the status (code) of the finding is COMPLETE. Amazon Macie uses this value to notify you of any errors, warnings, or considerations that might impact your analysis of the finding and the affected S3 object. Possible values are:
        ///
        /// * ARCHIVE_CONTAINS_UNPROCESSED_FILES - The object is an archive file and Macie extracted and analyzed only some or none of the files in the archive. To determine which files Macie analyzed, if any, refer to the corresponding sensitive data discovery result for the finding (classificationDetails.detailedResultsLocation).
        ///
        /// * ARCHIVE_EXCEEDS_SIZE_LIMIT - The object is an archive file whose total storage size exceeds the size quota for this type of archive.
        ///
        /// * ARCHIVE_NESTING_LEVEL_OVER_LIMIT - The object is an archive file whose nested depth exceeds the quota for the maximum number of nested levels that Macie analyzes for this type of archive.
        ///
        /// * ARCHIVE_TOTAL_BYTES_EXTRACTED_OVER_LIMIT - The object is an archive file that exceeds the quota for the maximum amount of data that Macie extracts and analyzes for this type of archive.
        ///
        /// * ARCHIVE_TOTAL_DOCUMENTS_PROCESSED_OVER_LIMIT - The object is an archive file that contains more than the maximum number of files that Macie extracts and analyzes for this type of archive.
        ///
        /// * FILE_EXCEEDS_SIZE_LIMIT - The storage size of the object exceeds the size quota for this type of file.
        ///
        /// * INVALID_ENCRYPTION - The object is encrypted using server-side encryption but Macie isn't allowed to use the key. Macie can't decrypt and analyze the object.
        ///
        /// * INVALID_KMS_KEY - The object is encrypted with an KMS key that was disabled or is being deleted. Macie can't decrypt and analyze the object.
        ///
        /// * INVALID_OBJECT_STATE - The object doesn't use a supported Amazon S3 storage class.
        ///
        /// * JSON_NESTING_LEVEL_OVER_LIMIT - The object contains JSON data and the nested depth of the data exceeds the quota for the number of nested levels that Macie analyzes for this type of file.
        ///
        /// * MALFORMED_FILE - The object is a malformed or corrupted file. An error occurred when Macie attempted to detect the file's type or extract data from the file.
        ///
        /// * MALFORMED_OR_FILE_SIZE_EXCEEDS_LIMIT - The object is a Microsoft Office file that is malformed or exceeds the size quota for this type of file. If the file is malformed, an error occurred when Macie attempted to extract data from the file.
        ///
        /// * NO_SUCH_BUCKET_AVAILABLE - The object was in a bucket that was deleted shortly before or when Macie attempted to analyze the object.
        ///
        /// * OBJECT_VERSION_MISMATCH - The object was changed while Macie was analyzing it.
        ///
        /// * OOXML_UNCOMPRESSED_RATIO_EXCEEDS_LIMIT - The object is an Office Open XML file whose compression ratio exceeds the compression quota for this type of file.
        ///
        /// * OOXML_UNCOMPRESSED_SIZE_EXCEEDS_LIMIT - The object is an Office Open XML file that exceeds the size quota for this type of file.
        ///
        /// * PERMISSION_DENIED - Macie isn't allowed to access the object. The object's permissions settings prevent Macie from analyzing the object.
        ///
        /// * SOURCE_OBJECT_NO_LONGER_AVAILABLE - The object was deleted shortly before or when Macie attempted to analyze it.
        ///
        /// * TIME_CUT_OFF_REACHED - Macie started analyzing the object but additional analysis would exceed the time quota for analyzing an object.
        ///
        /// * UNABLE_TO_PARSE_FILE - The object is a file that contains structured data and an error occurred when Macie attempted to parse the data.
        ///
        /// * UNSUPPORTED_FILE_TYPE_EXCEPTION - The object is a file that uses an unsupported file or storage format.
        ///
        ///
        /// For information about quotas, supported storage classes, and supported file and storage formats, see [Quotas](https://docs.aws.amazon.com/macie/latest/user/macie-quotas.html) and [Supported storage classes and formats](https://docs.aws.amazon.com/macie/latest/user/discovery-supported-storage.html) in the Amazon Macie User Guide.
        public var reason: Swift.String?

        public init(
            code: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.code = code
            self.reason = reason
        }
    }

}

extension Macie2ClientTypes {
    /// Provides the details of a sensitive data finding, including the types, number of occurrences, and locations of the sensitive data that was detected.
    public struct ClassificationResult {
        /// Specifies whether Amazon Macie detected additional occurrences of sensitive data in the S3 object. A finding includes location data for a maximum of 15 occurrences of sensitive data. This value can help you determine whether to investigate additional occurrences of sensitive data in an object. You can do this by referring to the corresponding sensitive data discovery result for the finding (classificationDetails.detailedResultsLocation).
        public var additionalOccurrences: Swift.Bool?
        /// The custom data identifiers that detected the sensitive data and the number of occurrences of the data that they detected.
        public var customDataIdentifiers: Macie2ClientTypes.CustomDataIdentifiers?
        /// The type of content, as a MIME type, that the finding applies to. For example, application/gzip, for a GNU Gzip compressed archive file, or application/pdf, for an Adobe Portable Document Format file.
        public var mimeType: Swift.String?
        /// The category, types, and number of occurrences of the sensitive data that produced the finding.
        public var sensitiveData: [Macie2ClientTypes.SensitiveDataItem]?
        /// The total size, in bytes, of the data that the finding applies to.
        public var sizeClassified: Swift.Int?
        /// The status of the finding.
        public var status: Macie2ClientTypes.ClassificationResultStatus?

        public init(
            additionalOccurrences: Swift.Bool? = nil,
            customDataIdentifiers: Macie2ClientTypes.CustomDataIdentifiers? = nil,
            mimeType: Swift.String? = nil,
            sensitiveData: [Macie2ClientTypes.SensitiveDataItem]? = nil,
            sizeClassified: Swift.Int? = nil,
            status: Macie2ClientTypes.ClassificationResultStatus? = nil
        )
        {
            self.additionalOccurrences = additionalOccurrences
            self.customDataIdentifiers = customDataIdentifiers
            self.mimeType = mimeType
            self.sensitiveData = sensitiveData
            self.sizeClassified = sizeClassified
            self.status = status
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a sensitive data finding and the details of the finding.
    public struct ClassificationDetails {
        /// The path to the folder or file in Amazon S3 that contains the corresponding sensitive data discovery result for the finding. If a finding applies to a large archive or compressed file, this value is the path to a folder. Otherwise, this value is the path to a file.
        public var detailedResultsLocation: Swift.String?
        /// The Amazon Resource Name (ARN) of the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.
        public var jobArn: Swift.String?
        /// The unique identifier for the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.
        public var jobId: Swift.String?
        /// Specifies how Amazon Macie found the sensitive data that produced the finding. Possible values are: SENSITIVE_DATA_DISCOVERY_JOB, for a classification job; and, AUTOMATED_SENSITIVE_DATA_DISCOVERY, for automated sensitive data discovery.
        public var originType: Macie2ClientTypes.OriginType?
        /// The status and other details of the finding.
        public var result: Macie2ClientTypes.ClassificationResult?

        public init(
            detailedResultsLocation: Swift.String? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            originType: Macie2ClientTypes.OriginType? = nil,
            result: Macie2ClientTypes.ClassificationResult? = nil
        )
        {
            self.detailedResultsLocation = detailedResultsLocation
            self.jobArn = jobArn
            self.jobId = jobId
            self.originType = originType
            self.result = result
        }
    }

}

extension Macie2ClientTypes {

    /// The type of action that occurred for the resource and produced the policy finding:
    public enum FindingActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsApiCall
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingActionType] {
            return [
                .awsApiCall
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsApiCall: return "AWS_API_CALL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about an API operation that an entity invoked for an affected resource.
    public struct ApiCallDetails {
        /// The name of the operation that was invoked most recently and produced the finding.
        public var api: Swift.String?
        /// The URL of the Amazon Web Service that provides the operation, for example: s3.amazonaws.com.
        public var apiServiceName: Swift.String?
        /// The first date and time, in UTC and extended ISO 8601 format, when any operation was invoked and produced the finding.
        public var firstSeen: Foundation.Date?
        /// The most recent date and time, in UTC and extended ISO 8601 format, when the specified operation (api) was invoked and produced the finding.
        public var lastSeen: Foundation.Date?

        public init(
            api: Swift.String? = nil,
            apiServiceName: Swift.String? = nil,
            firstSeen: Foundation.Date? = nil,
            lastSeen: Foundation.Date? = nil
        )
        {
            self.api = api
            self.apiServiceName = apiServiceName
            self.firstSeen = firstSeen
            self.lastSeen = lastSeen
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an action that occurred for a resource and produced a policy finding.
    public struct FindingAction {
        /// The type of action that occurred for the affected resource. This value is typically AWS_API_CALL, which indicates that an entity invoked an API operation for the resource.
        public var actionType: Macie2ClientTypes.FindingActionType?
        /// The invocation details of the API operation that an entity invoked for the affected resource, if the value for the actionType property is AWS_API_CALL.
        public var apiCallDetails: Macie2ClientTypes.ApiCallDetails?

        public init(
            actionType: Macie2ClientTypes.FindingActionType? = nil,
            apiCallDetails: Macie2ClientTypes.ApiCallDetails? = nil
        )
        {
            self.actionType = actionType
            self.apiCallDetails = apiCallDetails
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the domain name of the device that an entity used to perform an action on an affected resource.
    public struct DomainDetails {
        /// The name of the domain.
        public var domainName: Swift.String?

        public init(
            domainName: Swift.String? = nil
        )
        {
            self.domainName = domainName
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the city that an IP address originated from.
    public struct IpCity {
        /// The name of the city.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the country that an IP address originated from.
    public struct IpCountry {
        /// The two-character code, in ISO 3166-1 alpha-2 format, for the country that the IP address originated from. For example, US for the United States.
        public var code: Swift.String?
        /// The name of the country that the IP address originated from.
        public var name: Swift.String?

        public init(
            code: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.code = code
            self.name = name
        }
    }

}

extension Macie2ClientTypes {
    /// Provides geographic coordinates that indicate where a specified IP address originated from.
    public struct IpGeoLocation {
        /// The latitude coordinate of the location, rounded to four decimal places.
        public var lat: Swift.Double?
        /// The longitude coordinate of the location, rounded to four decimal places.
        public var lon: Swift.Double?

        public init(
            lat: Swift.Double? = nil,
            lon: Swift.Double? = nil
        )
        {
            self.lat = lat
            self.lon = lon
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the registered owner of an IP address.
    public struct IpOwner {
        /// The autonomous system number (ASN) for the autonomous system that included the IP address.
        public var asn: Swift.String?
        /// The organization identifier that's associated with the autonomous system number (ASN) for the autonomous system that included the IP address.
        public var asnOrg: Swift.String?
        /// The name of the internet service provider (ISP) that owned the IP address.
        public var isp: Swift.String?
        /// The name of the organization that owned the IP address.
        public var org: Swift.String?

        public init(
            asn: Swift.String? = nil,
            asnOrg: Swift.String? = nil,
            isp: Swift.String? = nil,
            org: Swift.String? = nil
        )
        {
            self.asn = asn
            self.asnOrg = asnOrg
            self.isp = isp
            self.org = org
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the IP address of the device that an entity used to perform an action on an affected resource.
    public struct IpAddressDetails {
        /// The Internet Protocol version 4 (IPv4) address of the device.
        public var ipAddressV4: Swift.String?
        /// The city that the IP address originated from.
        public var ipCity: Macie2ClientTypes.IpCity?
        /// The country that the IP address originated from.
        public var ipCountry: Macie2ClientTypes.IpCountry?
        /// The geographic coordinates of the location that the IP address originated from.
        public var ipGeoLocation: Macie2ClientTypes.IpGeoLocation?
        /// The registered owner of the IP address.
        public var ipOwner: Macie2ClientTypes.IpOwner?

        public init(
            ipAddressV4: Swift.String? = nil,
            ipCity: Macie2ClientTypes.IpCity? = nil,
            ipCountry: Macie2ClientTypes.IpCountry? = nil,
            ipGeoLocation: Macie2ClientTypes.IpGeoLocation? = nil,
            ipOwner: Macie2ClientTypes.IpOwner? = nil
        )
        {
            self.ipAddressV4 = ipAddressV4
            self.ipCity = ipCity
            self.ipCountry = ipCountry
            self.ipGeoLocation = ipGeoLocation
            self.ipOwner = ipOwner
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the context in which temporary security credentials were issued to an entity.
    public struct SessionContextAttributes {
        /// The date and time, in UTC and ISO 8601 format, when the credentials were issued.
        public var creationDate: Foundation.Date?
        /// Specifies whether the credentials were authenticated with a multi-factor authentication (MFA) device.
        public var mfaAuthenticated: Swift.Bool?

        public init(
            creationDate: Foundation.Date? = nil,
            mfaAuthenticated: Swift.Bool? = nil
        )
        {
            self.creationDate = creationDate
            self.mfaAuthenticated = mfaAuthenticated
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the source and type of temporary security credentials that were issued to an entity.
    public struct SessionIssuer {
        /// The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the source account, Identity and Access Management (IAM) user, or role that was used to get the credentials.
        public var arn: Swift.String?
        /// The unique identifier for the entity that was used to get the credentials.
        public var principalId: Swift.String?
        /// The source of the temporary security credentials, such as Root, IAMUser, or Role.
        public var type: Swift.String?
        /// The name or alias of the user or role that issued the session. This value is null if the credentials were obtained from a root account that doesn't have an alias.
        public var userName: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil,
            type: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.type = type
            self.userName = userName
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a session that was created for an entity that performed an action by using temporary security credentials.
    public struct SessionContext {
        /// The date and time when the credentials were issued, and whether the credentials were authenticated with a multi-factor authentication (MFA) device.
        public var attributes: Macie2ClientTypes.SessionContextAttributes?
        /// The source and type of credentials that were issued to the entity.
        public var sessionIssuer: Macie2ClientTypes.SessionIssuer?

        public init(
            attributes: Macie2ClientTypes.SessionContextAttributes? = nil,
            sessionIssuer: Macie2ClientTypes.SessionIssuer? = nil
        )
        {
            self.attributes = attributes
            self.sessionIssuer = sessionIssuer
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an identity that performed an action on an affected resource by using temporary security credentials. The credentials were obtained using the AssumeRole operation of the Security Token Service (STS) API.
    public struct AssumedRole {
        /// The Amazon Web Services access key ID that identifies the credentials.
        public var accessKeyId: Swift.String?
        /// The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the entity that was used to get the credentials.
        public var arn: Swift.String?
        /// The unique identifier for the entity that was used to get the credentials.
        public var principalId: Swift.String?
        /// The details of the session that was created for the credentials, including the entity that issued the session.
        public var sessionContext: Macie2ClientTypes.SessionContext?

        public init(
            accessKeyId: Swift.String? = nil,
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil,
            sessionContext: Macie2ClientTypes.SessionContext? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.sessionContext = sessionContext
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an Amazon Web Services account and entity that performed an action on an affected resource. The action was performed using the credentials for an Amazon Web Services account other than your own account.
    public struct AwsAccount {
        /// The unique identifier for the Amazon Web Services account.
        public var accountId: Swift.String?
        /// The unique identifier for the entity that performed the action.
        public var principalId: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            principalId: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.principalId = principalId
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an Amazon Web Service that performed an action on an affected resource.
    public struct AwsService {
        /// The name of the Amazon Web Service that performed the action.
        public var invokedBy: Swift.String?

        public init(
            invokedBy: Swift.String? = nil
        )
        {
            self.invokedBy = invokedBy
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an identity that performed an action on an affected resource by using temporary security credentials. The credentials were obtained using the GetFederationToken operation of the Security Token Service (STS) API.
    public struct FederatedUser {
        /// The Amazon Web Services access key ID that identifies the credentials.
        public var accessKeyId: Swift.String?
        /// The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the entity that was used to get the credentials.
        public var arn: Swift.String?
        /// The unique identifier for the entity that was used to get the credentials.
        public var principalId: Swift.String?
        /// The details of the session that was created for the credentials, including the entity that issued the session.
        public var sessionContext: Macie2ClientTypes.SessionContext?

        public init(
            accessKeyId: Swift.String? = nil,
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil,
            sessionContext: Macie2ClientTypes.SessionContext? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.sessionContext = sessionContext
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an Identity and Access Management (IAM) user who performed an action on an affected resource.
    public struct IamUser {
        /// The unique identifier for the Amazon Web Services account that's associated with the IAM user who performed the action.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the principal that performed the action. The last section of the ARN contains the name of the user who performed the action.
        public var arn: Swift.String?
        /// The unique identifier for the IAM user who performed the action.
        public var principalId: Swift.String?
        /// The username of the IAM user who performed the action.
        public var userName: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.userName = userName
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an Amazon Web Services account and entity that performed an action on an affected resource. The action was performed using the credentials for your Amazon Web Services account.
    public struct UserIdentityRoot {
        /// The unique identifier for the Amazon Web Services account.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the principal that performed the action. The last section of the ARN contains the name of the user or role that performed the action.
        public var arn: Swift.String?
        /// The unique identifier for the entity that performed the action.
        public var principalId: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
        }
    }

}

extension Macie2ClientTypes {

    /// The type of entity that performed the action on the affected resource. Possible values are:
    public enum UserIdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsaccount
        case awsservice
        case assumedrole
        case federateduser
        case iamuser
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [UserIdentityType] {
            return [
                .awsaccount,
                .awsservice,
                .assumedrole,
                .federateduser,
                .iamuser,
                .root
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsaccount: return "AWSAccount"
            case .awsservice: return "AWSService"
            case .assumedrole: return "AssumedRole"
            case .federateduser: return "FederatedUser"
            case .iamuser: return "IAMUser"
            case .root: return "Root"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the type and other characteristics of an entity that performed an action on an affected resource.
    public struct UserIdentity {
        /// If the action was performed with temporary security credentials that were obtained using the AssumeRole operation of the Security Token Service (STS) API, the identifiers, session context, and other details about the identity.
        public var assumedRole: Macie2ClientTypes.AssumedRole?
        /// If the action was performed using the credentials for another Amazon Web Services account, the details of that account.
        public var awsAccount: Macie2ClientTypes.AwsAccount?
        /// If the action was performed by an Amazon Web Services account that belongs to an Amazon Web Service, the name of the service.
        public var awsService: Macie2ClientTypes.AwsService?
        /// If the action was performed with temporary security credentials that were obtained using the GetFederationToken operation of the Security Token Service (STS) API, the identifiers, session context, and other details about the identity.
        public var federatedUser: Macie2ClientTypes.FederatedUser?
        /// If the action was performed using the credentials for an Identity and Access Management (IAM) user, the name and other details about the user.
        public var iamUser: Macie2ClientTypes.IamUser?
        /// If the action was performed using the credentials for your Amazon Web Services account, the details of your account.
        public var root: Macie2ClientTypes.UserIdentityRoot?
        /// The type of entity that performed the action.
        public var type: Macie2ClientTypes.UserIdentityType?

        public init(
            assumedRole: Macie2ClientTypes.AssumedRole? = nil,
            awsAccount: Macie2ClientTypes.AwsAccount? = nil,
            awsService: Macie2ClientTypes.AwsService? = nil,
            federatedUser: Macie2ClientTypes.FederatedUser? = nil,
            iamUser: Macie2ClientTypes.IamUser? = nil,
            root: Macie2ClientTypes.UserIdentityRoot? = nil,
            type: Macie2ClientTypes.UserIdentityType? = nil
        )
        {
            self.assumedRole = assumedRole
            self.awsAccount = awsAccount
            self.awsService = awsService
            self.federatedUser = federatedUser
            self.iamUser = iamUser
            self.root = root
            self.type = type
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an entity that performed an action that produced a policy finding for a resource.
    public struct FindingActor {
        /// The domain name of the device that the entity used to perform the action on the affected resource.
        public var domainDetails: Macie2ClientTypes.DomainDetails?
        /// The IP address and related details about the device that the entity used to perform the action on the affected resource. The details can include information such as the owner and geographic location of the IP address.
        public var ipAddressDetails: Macie2ClientTypes.IpAddressDetails?
        /// The type and other characteristics of the entity that performed the action on the affected resource. This value is null if the action was performed by an anonymous (unauthenticated) entity.
        public var userIdentity: Macie2ClientTypes.UserIdentity?

        public init(
            domainDetails: Macie2ClientTypes.DomainDetails? = nil,
            ipAddressDetails: Macie2ClientTypes.IpAddressDetails? = nil,
            userIdentity: Macie2ClientTypes.UserIdentity? = nil
        )
        {
            self.domainDetails = domainDetails
            self.ipAddressDetails = ipAddressDetails
            self.userIdentity = userIdentity
        }
    }

}

extension Macie2ClientTypes {
    /// Provides the details of a policy finding.
    public struct PolicyDetails {
        /// The action that produced the finding.
        public var action: Macie2ClientTypes.FindingAction?
        /// The entity that performed the action that produced the finding.
        public var actor: Macie2ClientTypes.FindingActor?

        public init(
            action: Macie2ClientTypes.FindingAction? = nil,
            actor: Macie2ClientTypes.FindingActor? = nil
        )
        {
            self.action = action
            self.actor = actor
        }
    }

}

extension Macie2ClientTypes {

    /// The server-side encryption algorithm that was used to encrypt an S3 object or is used by default to encrypt objects that are added to an S3 bucket. Possible values are:
    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes256
        case `none`
        case unknown
        case awsKms
        case awsKmsDsse
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .aes256,
                .none,
                .unknown,
                .awsKms,
                .awsKmsDsse
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .none: return "NONE"
            case .unknown: return "UNKNOWN"
            case .awsKms: return "aws:kms"
            case .awsKmsDsse: return "aws:kms:dsse"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the default server-side encryption settings for an S3 bucket or the encryption settings for an S3 object.
    public struct ServerSideEncryption {
        /// The server-side encryption algorithm that's used when storing data in the bucket or object. If default encryption settings aren't configured for the bucket or the object isn't encrypted using server-side encryption, this value is NONE.
        public var encryptionType: Macie2ClientTypes.EncryptionType?
        /// The Amazon Resource Name (ARN) or unique identifier (key ID) for the KMS key that's used to encrypt data in the bucket or the object. This value is null if an KMS key isn't used to encrypt the data.
        public var kmsMasterKeyId: Swift.String?

        public init(
            encryptionType: Macie2ClientTypes.EncryptionType? = nil,
            kmsMasterKeyId: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kmsMasterKeyId = kmsMasterKeyId
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the Amazon Web Services account that owns an S3 bucket.
    public struct S3BucketOwner {
        /// The display name of the account that owns the bucket.
        public var displayName: Swift.String?
        /// The canonical user ID for the account that owns the bucket.
        public var id: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.id = id
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the S3 bucket that a finding applies to.
    public struct S3Bucket {
        /// Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are added to the bucket. Possible values are:
        ///
        /// * FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include a valid server-side encryption header.
        ///
        /// * TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include a valid server-side encryption header.
        ///
        /// * UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of new objects.
        ///
        ///
        /// Valid server-side encryption headers are: x-amz-server-side-encryption with a value of AES256 or aws:kms, and x-amz-server-side-encryption-customer-algorithm with a value of AES256.
        public var allowsUnencryptedObjectUploads: Macie2ClientTypes.AllowsUnencryptedObjectUploads?
        /// The Amazon Resource Name (ARN) of the bucket.
        public var arn: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the bucket was created. This value can also indicate when changes such as edits to the bucket's policy were most recently made to the bucket, relative to when the finding was created or last updated.
        public var createdAt: Foundation.Date?
        /// The default server-side encryption settings for the bucket.
        public var defaultServerSideEncryption: Macie2ClientTypes.ServerSideEncryption?
        /// The name of the bucket.
        public var name: Swift.String?
        /// The display name and canonical user ID for the Amazon Web Services account that owns the bucket.
        public var owner: Macie2ClientTypes.S3BucketOwner?
        /// The permissions settings that determine whether the bucket is publicly accessible.
        public var publicAccess: Macie2ClientTypes.BucketPublicAccess?
        /// The tags that are associated with the bucket.
        public var tags: [Macie2ClientTypes.KeyValuePair]?

        public init(
            allowsUnencryptedObjectUploads: Macie2ClientTypes.AllowsUnencryptedObjectUploads? = nil,
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            defaultServerSideEncryption: Macie2ClientTypes.ServerSideEncryption? = nil,
            name: Swift.String? = nil,
            owner: Macie2ClientTypes.S3BucketOwner? = nil,
            publicAccess: Macie2ClientTypes.BucketPublicAccess? = nil,
            tags: [Macie2ClientTypes.KeyValuePair]? = nil
        )
        {
            self.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads
            self.arn = arn
            self.createdAt = createdAt
            self.defaultServerSideEncryption = defaultServerSideEncryption
            self.name = name
            self.owner = owner
            self.publicAccess = publicAccess
            self.tags = tags
        }
    }

}

extension Macie2ClientTypes {

    /// The storage class of the S3 object. Possible values are:
    public enum StorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deepArchive
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClass] {
            return [
                .deepArchive,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .standard,
                .standardIa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the S3 object that a finding applies to.
    public struct S3Object {
        /// The Amazon Resource Name (ARN) of the bucket that contains the object.
        public var bucketArn: Swift.String?
        /// The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.
        public var eTag: Swift.String?
        /// The file name extension of the object. If the object doesn't have a file name extension, this value is "".
        public var `extension`: Swift.String?
        /// The full name (key) of the object, including the object's prefix if applicable.
        public var key: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the object was last modified.
        public var lastModified: Foundation.Date?
        /// The full path to the affected object, including the name of the affected bucket and the object's name (key).
        public var path: Swift.String?
        /// Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.
        public var publicAccess: Swift.Bool?
        /// The type of server-side encryption that was used to encrypt the object.
        public var serverSideEncryption: Macie2ClientTypes.ServerSideEncryption?
        /// The total storage size, in bytes, of the object.
        public var size: Swift.Int?
        /// The storage class of the object.
        public var storageClass: Macie2ClientTypes.StorageClass?
        /// The tags that are associated with the object.
        public var tags: [Macie2ClientTypes.KeyValuePair]?
        /// The identifier for the affected version of the object.
        public var versionId: Swift.String?

        public init(
            bucketArn: Swift.String? = nil,
            eTag: Swift.String? = nil,
            `extension`: Swift.String? = nil,
            key: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            path: Swift.String? = nil,
            publicAccess: Swift.Bool? = nil,
            serverSideEncryption: Macie2ClientTypes.ServerSideEncryption? = nil,
            size: Swift.Int? = nil,
            storageClass: Macie2ClientTypes.StorageClass? = nil,
            tags: [Macie2ClientTypes.KeyValuePair]? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.bucketArn = bucketArn
            self.eTag = eTag
            self.`extension` = `extension`
            self.key = key
            self.lastModified = lastModified
            self.path = path
            self.publicAccess = publicAccess
            self.serverSideEncryption = serverSideEncryption
            self.size = size
            self.storageClass = storageClass
            self.tags = tags
            self.versionId = versionId
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the resources that a finding applies to.
    public struct ResourcesAffected {
        /// The details of the S3 bucket that the finding applies to.
        public var s3Bucket: Macie2ClientTypes.S3Bucket?
        /// The details of the S3 object that the finding applies to.
        public var s3Object: Macie2ClientTypes.S3Object?

        public init(
            s3Bucket: Macie2ClientTypes.S3Bucket? = nil,
            s3Object: Macie2ClientTypes.S3Object? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3Object = s3Object
        }
    }

}

extension Macie2ClientTypes {

    /// The qualitative representation of the finding's severity. Possible values are:
    public enum SeverityDescription: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [SeverityDescription] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides the numerical and qualitative representations of a finding's severity.
    public struct Severity {
        /// The qualitative representation of the finding's severity, ranging from Low (least severe) to High (most severe).
        public var description: Macie2ClientTypes.SeverityDescription?
        /// The numerical representation of the finding's severity, ranging from 1 (least severe) to 3 (most severe).
        public var score: Swift.Int?

        public init(
            description: Macie2ClientTypes.SeverityDescription? = nil,
            score: Swift.Int? = nil
        )
        {
            self.description = description
            self.score = score
        }
    }

}

extension Macie2ClientTypes {

    /// The type of finding. For details about each type, see [Types of Amazon Macie findings](https://docs.aws.amazon.com/macie/latest/user/findings-types.html) in the Amazon Macie User Guide. Possible values are:
    public enum FindingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case policyIamuserS3blockpublicaccessdisabled
        case policyIamuserS3bucketencryptiondisabled
        case policyIamuserS3bucketpublic
        case policyIamuserS3bucketreplicatedexternally
        case policyIamuserS3bucketsharedexternally
        case policyIamuserS3bucketsharedwithcloudfront
        case sensitivedataS3objectCredentials
        case sensitivedataS3objectCustomidentifier
        case sensitivedataS3objectFinancial
        case sensitivedataS3objectMultiple
        case sensitivedataS3objectPersonal
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingType] {
            return [
                .policyIamuserS3blockpublicaccessdisabled,
                .policyIamuserS3bucketencryptiondisabled,
                .policyIamuserS3bucketpublic,
                .policyIamuserS3bucketreplicatedexternally,
                .policyIamuserS3bucketsharedexternally,
                .policyIamuserS3bucketsharedwithcloudfront,
                .sensitivedataS3objectCredentials,
                .sensitivedataS3objectCustomidentifier,
                .sensitivedataS3objectFinancial,
                .sensitivedataS3objectMultiple,
                .sensitivedataS3objectPersonal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .policyIamuserS3blockpublicaccessdisabled: return "Policy:IAMUser/S3BlockPublicAccessDisabled"
            case .policyIamuserS3bucketencryptiondisabled: return "Policy:IAMUser/S3BucketEncryptionDisabled"
            case .policyIamuserS3bucketpublic: return "Policy:IAMUser/S3BucketPublic"
            case .policyIamuserS3bucketreplicatedexternally: return "Policy:IAMUser/S3BucketReplicatedExternally"
            case .policyIamuserS3bucketsharedexternally: return "Policy:IAMUser/S3BucketSharedExternally"
            case .policyIamuserS3bucketsharedwithcloudfront: return "Policy:IAMUser/S3BucketSharedWithCloudFront"
            case .sensitivedataS3objectCredentials: return "SensitiveData:S3Object/Credentials"
            case .sensitivedataS3objectCustomidentifier: return "SensitiveData:S3Object/CustomIdentifier"
            case .sensitivedataS3objectFinancial: return "SensitiveData:S3Object/Financial"
            case .sensitivedataS3objectMultiple: return "SensitiveData:S3Object/Multiple"
            case .sensitivedataS3objectPersonal: return "SensitiveData:S3Object/Personal"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides the details of a finding.
    public struct Finding {
        /// The unique identifier for the Amazon Web Services account that the finding applies to. This is typically the account that owns the affected resource.
        public var accountId: Swift.String?
        /// Specifies whether the finding is archived (suppressed).
        public var archived: Swift.Bool?
        /// The category of the finding. Possible values are: CLASSIFICATION, for a sensitive data finding; and, POLICY, for a policy finding.
        public var category: Macie2ClientTypes.FindingCategory?
        /// The details of a sensitive data finding. This value is null for a policy finding.
        public var classificationDetails: Macie2ClientTypes.ClassificationDetails?
        /// The total number of occurrences of the finding. For sensitive data findings, this value is always 1. All sensitive data findings are considered unique.
        public var count: Swift.Int?
        /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie created the finding.
        public var createdAt: Foundation.Date?
        /// The description of the finding.
        public var description: Swift.String?
        /// The unique identifier for the finding. This is a random string that Amazon Macie generates and assigns to a finding when it creates the finding.
        public var id: Swift.String?
        /// The Amazon Web Services partition that Amazon Macie created the finding in.
        public var partition: Swift.String?
        /// The details of a policy finding. This value is null for a sensitive data finding.
        public var policyDetails: Macie2ClientTypes.PolicyDetails?
        /// The Amazon Web Services Region that Amazon Macie created the finding in.
        public var region: Swift.String?
        /// The resources that the finding applies to.
        public var resourcesAffected: Macie2ClientTypes.ResourcesAffected?
        /// Specifies whether the finding is a sample finding. A sample finding is a finding that uses example data to demonstrate what a finding might contain.
        public var sample: Swift.Bool?
        /// The version of the schema that was used to define the data structures in the finding.
        public var schemaVersion: Swift.String?
        /// The severity level and score for the finding.
        public var severity: Macie2ClientTypes.Severity?
        /// The brief description of the finding.
        public var title: Swift.String?
        /// The type of the finding.
        public var type: Macie2ClientTypes.FindingType?
        /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie last updated the finding. For sensitive data findings, this value is the same as the value for the createdAt property. All sensitive data findings are considered new.
        public var updatedAt: Foundation.Date?

        public init(
            accountId: Swift.String? = nil,
            archived: Swift.Bool? = nil,
            category: Macie2ClientTypes.FindingCategory? = nil,
            classificationDetails: Macie2ClientTypes.ClassificationDetails? = nil,
            count: Swift.Int? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            partition: Swift.String? = nil,
            policyDetails: Macie2ClientTypes.PolicyDetails? = nil,
            region: Swift.String? = nil,
            resourcesAffected: Macie2ClientTypes.ResourcesAffected? = nil,
            sample: Swift.Bool? = nil,
            schemaVersion: Swift.String? = nil,
            severity: Macie2ClientTypes.Severity? = nil,
            title: Swift.String? = nil,
            type: Macie2ClientTypes.FindingType? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.accountId = accountId
            self.archived = archived
            self.category = category
            self.classificationDetails = classificationDetails
            self.count = count
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.partition = partition
            self.policyDetails = policyDetails
            self.region = region
            self.resourcesAffected = resourcesAffected
            self.sample = sample
            self.schemaVersion = schemaVersion
            self.severity = severity
            self.title = title
            self.type = type
            self.updatedAt = updatedAt
        }
    }

}

extension Macie2ClientTypes {

    /// The action to perform on findings that match the filter criteria. To suppress (automatically archive) findings that match the criteria, set this value to ARCHIVE. Valid values are:
    public enum FindingsFilterAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archive
        case noop
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingsFilterAction] {
            return [
                .archive,
                .noop
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archive: return "ARCHIVE"
            case .noop: return "NOOP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about a findings filter.
    public struct FindingsFilterListItem {
        /// The action that's performed on findings that match the filter criteria. Possible values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.
        public var action: Macie2ClientTypes.FindingsFilterAction?
        /// The Amazon Resource Name (ARN) of the filter.
        public var arn: Swift.String?
        /// The unique identifier for the filter.
        public var id: Swift.String?
        /// The custom name of the filter.
        public var name: Swift.String?
        /// A map of key-value pairs that specifies which tags (keys and values) are associated with the filter.
        public var tags: [Swift.String: Swift.String]?

        public init(
            action: Macie2ClientTypes.FindingsFilterAction? = nil,
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.action = action
            self.arn = arn
            self.id = id
            self.name = name
            self.tags = tags
        }
    }

}

extension Macie2ClientTypes {
    /// Provides a group of results for a query that retrieved aggregated statistical data about findings.
    public struct GroupCount {
        /// The total number of findings in the group of query results.
        public var count: Swift.Int?
        /// The name of the property that defines the group in the query results, as specified by the groupBy property in the query request.
        public var groupKey: Swift.String?

        public init(
            count: Swift.Int? = nil,
            groupKey: Swift.String? = nil
        )
        {
            self.count = count
            self.groupKey = groupKey
        }
    }

}

extension Macie2ClientTypes {

    /// The current status of the relationship between an account and an associated Amazon Macie administrator account. Possible values are:
    public enum RelationshipStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountsuspended
        case created
        case emailverificationfailed
        case emailverificationinprogress
        case enabled
        case invited
        case paused
        case regiondisabled
        case removed
        case resigned
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationshipStatus] {
            return [
                .accountsuspended,
                .created,
                .emailverificationfailed,
                .emailverificationinprogress,
                .enabled,
                .invited,
                .paused,
                .regiondisabled,
                .removed,
                .resigned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountsuspended: return "AccountSuspended"
            case .created: return "Created"
            case .emailverificationfailed: return "EmailVerificationFailed"
            case .emailverificationinprogress: return "EmailVerificationInProgress"
            case .enabled: return "Enabled"
            case .invited: return "Invited"
            case .paused: return "Paused"
            case .regiondisabled: return "RegionDisabled"
            case .removed: return "Removed"
            case .resigned: return "Resigned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about an Amazon Macie membership invitation.
    public struct Invitation {
        /// The Amazon Web Services account ID for the account that sent the invitation.
        public var accountId: Swift.String?
        /// The unique identifier for the invitation.
        public var invitationId: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the invitation was sent.
        public var invitedAt: Foundation.Date?
        /// The status of the relationship between the account that sent the invitation and the account that received the invitation.
        public var relationshipStatus: Macie2ClientTypes.RelationshipStatus?

        public init(
            accountId: Swift.String? = nil,
            invitationId: Swift.String? = nil,
            invitedAt: Foundation.Date? = nil,
            relationshipStatus: Macie2ClientTypes.RelationshipStatus? = nil
        )
        {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.relationshipStatus = relationshipStatus
        }
    }

}

extension Macie2ClientTypes {

    /// The property to use in a condition that determines whether an S3 object is included or excluded from a classification job. Valid values are:
    public enum ScopeFilterKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case objectExtension
        case objectKey
        case objectLastModifiedDate
        case objectSize
        case sdkUnknown(Swift.String)

        public static var allCases: [ScopeFilterKey] {
            return [
                .objectExtension,
                .objectKey,
                .objectLastModifiedDate,
                .objectSize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .objectExtension: return "OBJECT_EXTENSION"
            case .objectKey: return "OBJECT_KEY"
            case .objectLastModifiedDate: return "OBJECT_LAST_MODIFIED_DATE"
            case .objectSize: return "OBJECT_SIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a property-based condition that determines whether an S3 object is included or excluded from a classification job.
    public struct SimpleScopeTerm {
        /// The operator to use in the condition. Valid values for each supported property (key) are:
        ///
        /// * OBJECT_EXTENSION - EQ (equals) or NE (not equals)
        ///
        /// * OBJECT_KEY - STARTS_WITH
        ///
        /// * OBJECT_LAST_MODIFIED_DATE - EQ (equals), GT (greater than), GTE (greater than or equals), LT (less than), LTE (less than or equals), or NE (not equals)
        ///
        /// * OBJECT_SIZE - EQ (equals), GT (greater than), GTE (greater than or equals), LT (less than), LTE (less than or equals), or NE (not equals)
        public var comparator: Macie2ClientTypes.JobComparator?
        /// The object property to use in the condition.
        public var key: Macie2ClientTypes.ScopeFilterKey?
        /// An array that lists the values to use in the condition. If the value for the key property is OBJECT_EXTENSION or OBJECT_KEY, this array can specify multiple values and Amazon Macie uses OR logic to join the values. Otherwise, this array can specify only one value. Valid values for each supported property (key) are:
        ///
        /// * OBJECT_EXTENSION - A string that represents the file name extension of an object. For example: docx or pdf
        ///
        /// * OBJECT_KEY - A string that represents the key prefix (folder name or path) of an object. For example: logs or awslogs/eventlogs. This value applies a condition to objects whose keys (names) begin with the specified value.
        ///
        /// * OBJECT_LAST_MODIFIED_DATE - The date and time (in UTC and extended ISO 8601 format) when an object was created or last changed, whichever is latest. For example: 2023-09-24T14:31:13Z
        ///
        /// * OBJECT_SIZE - An integer that represents the storage size (in bytes) of an object.
        ///
        ///
        /// Macie doesn't support use of wildcard characters in these values. Also, string values are case sensitive.
        public var values: [Swift.String]?

        public init(
            comparator: Macie2ClientTypes.JobComparator? = nil,
            key: Macie2ClientTypes.ScopeFilterKey? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.values = values
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a tag key or tag key and value pair to use in a tag-based condition that determines whether an S3 object is included or excluded from a classification job. Tag keys and values are case sensitive. Also, Amazon Macie doesn't support use of partial values or wildcard characters in tag-based conditions.
    public struct TagValuePair {
        /// The value for the tag key to use in the condition.
        public var key: Swift.String?
        /// The tag value, associated with the specified tag key (key), to use in the condition. To specify only a tag key for a condition, specify the tag key for the key property and set this value to an empty string.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Macie2ClientTypes {

    /// The type of object to apply a tag-based condition to. Valid values are:
    public enum TagTarget: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3Object
        case sdkUnknown(Swift.String)

        public static var allCases: [TagTarget] {
            return [
                .s3Object
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3Object: return "S3_OBJECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a tag-based condition that determines whether an S3 object is included or excluded from a classification job.
    public struct TagScopeTerm {
        /// The operator to use in the condition. Valid values are EQ (equals) or NE (not equals).
        public var comparator: Macie2ClientTypes.JobComparator?
        /// The object property to use in the condition. The only valid value is TAG.
        public var key: Swift.String?
        /// The tag keys or tag key and value pairs to use in the condition. To specify only tag keys in a condition, specify the keys in this array and set the value for each associated tag value to an empty string.
        public var tagValues: [Macie2ClientTypes.TagValuePair]?
        /// The type of object to apply the condition to.
        public var target: Macie2ClientTypes.TagTarget?

        public init(
            comparator: Macie2ClientTypes.JobComparator? = nil,
            key: Swift.String? = nil,
            tagValues: [Macie2ClientTypes.TagValuePair]? = nil,
            target: Macie2ClientTypes.TagTarget? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.tagValues = tagValues
            self.target = target
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a property- or tag-based condition that defines criteria for including or excluding S3 objects from a classification job. A JobScopeTerm object can contain only one simpleScopeTerm object or one tagScopeTerm object.
    public struct JobScopeTerm {
        /// A property-based condition that defines a property, operator, and one or more values for including or excluding objects from the job.
        public var simpleScopeTerm: Macie2ClientTypes.SimpleScopeTerm?
        /// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding objects from the job.
        public var tagScopeTerm: Macie2ClientTypes.TagScopeTerm?

        public init(
            simpleScopeTerm: Macie2ClientTypes.SimpleScopeTerm? = nil,
            tagScopeTerm: Macie2ClientTypes.TagScopeTerm? = nil
        )
        {
            self.simpleScopeTerm = simpleScopeTerm
            self.tagScopeTerm = tagScopeTerm
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies one or more property- and tag-based conditions that define criteria for including or excluding S3 buckets from a classification job.
    public struct CriteriaBlockForJob {
        /// An array of conditions, one for each condition that determines which buckets to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.
        public var and: [Macie2ClientTypes.CriteriaForJob]?

        public init(
            and: [Macie2ClientTypes.CriteriaForJob]? = nil
        )
        {
            self.and = and
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies property- and tag-based conditions that define criteria for including or excluding S3 buckets from a classification job. Exclude conditions take precedence over include conditions.
    public struct S3BucketCriteriaForJob {
        /// The property- and tag-based conditions that determine which buckets to exclude from the job.
        public var excludes: Macie2ClientTypes.CriteriaBlockForJob?
        /// The property- and tag-based conditions that determine which buckets to include in the job.
        public var includes: Macie2ClientTypes.CriteriaBlockForJob?

        public init(
            excludes: Macie2ClientTypes.CriteriaBlockForJob? = nil,
            includes: Macie2ClientTypes.CriteriaBlockForJob? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies an Amazon Web Services account that owns S3 buckets for a classification job to analyze, and one or more specific buckets to analyze for that account.
    public struct S3BucketDefinitionForJob {
        /// The unique identifier for the Amazon Web Services account that owns the buckets.
        /// This member is required.
        public var accountId: Swift.String?
        /// An array that lists the names of the buckets.
        /// This member is required.
        public var buckets: [Swift.String]?

        public init(
            accountId: Swift.String? = nil,
            buckets: [Swift.String]? = nil
        )
        {
            self.accountId = accountId
            self.buckets = buckets
        }
    }

}

extension Macie2ClientTypes {

    /// The status of a classification job. Possible values are:
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case complete
        case idle
        case paused
        case running
        case userPaused
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .cancelled,
                .complete,
                .idle,
                .paused,
                .running,
                .userPaused
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .complete: return "COMPLETE"
            case .idle: return "IDLE"
            case .paused: return "PAUSED"
            case .running: return "RUNNING"
            case .userPaused: return "USER_PAUSED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The schedule for running a classification job. Valid values are:
    public enum JobType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case oneTime
        case scheduled
        case sdkUnknown(Swift.String)

        public static var allCases: [JobType] {
            return [
                .oneTime,
                .scheduled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .oneTime: return "ONE_TIME"
            case .scheduled: return "SCHEDULED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// Specifies whether any account- or bucket-level access errors occurred during the run of a one-time classification job or the most recent run of a recurring classification job. Possible values are:
    public enum LastRunErrorStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [LastRunErrorStatusCode] {
            return [
                .error,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies whether any account- or bucket-level access errors occurred when a classification job ran. For information about using logging data to investigate these errors, see [Monitoring sensitive data discovery jobs](https://docs.aws.amazon.com/macie/latest/user/discovery-jobs-monitor-cw-logs.html) in the Amazon Macie User Guide.
    public struct LastRunErrorStatus {
        /// Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run. Possible values are:
        ///
        /// * ERROR - One or more errors occurred. Amazon Macie didn't process all the data specified for the job.
        ///
        /// * NONE - No errors occurred. Macie processed all the data specified for the job.
        public var code: Macie2ClientTypes.LastRunErrorStatusCode?

        public init(
            code: Macie2ClientTypes.LastRunErrorStatusCode? = nil
        )
        {
            self.code = code
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about when a classification job was paused. For a one-time job, this object also specifies when the job will expire and be cancelled if it isn't resumed. For a recurring job, this object also specifies when the paused job run will expire and be cancelled if it isn't resumed. This object is present only if a job's current status (jobStatus) is USER_PAUSED. The information in this object applies only to a job that was paused while it had a status of RUNNING.
    public struct UserPausedDetails {
        /// The date and time, in UTC and extended ISO 8601 format, when the job or job run will expire and be cancelled if you don't resume it first.
        public var jobExpiresAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the Health event that Amazon Macie sent to notify you of the job or job run's pending expiration and cancellation. This value is null if a job has been paused for less than 23 days.
        public var jobImminentExpirationHealthEventArn: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when you paused the job.
        public var jobPausedAt: Foundation.Date?

        public init(
            jobExpiresAt: Foundation.Date? = nil,
            jobImminentExpirationHealthEventArn: Swift.String? = nil,
            jobPausedAt: Foundation.Date? = nil
        )
        {
            self.jobExpiresAt = jobExpiresAt
            self.jobImminentExpirationHealthEventArn = jobImminentExpirationHealthEventArn
            self.jobPausedAt = jobPausedAt
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a classification job, including the current status of the job.
    public struct JobSummary {
        /// The property- and tag-based conditions that determine which S3 buckets are included or excluded from the job's analysis. Each time the job runs, the job uses these criteria to determine which buckets to analyze. A job's definition can contain a bucketCriteria object or a bucketDefinitions array, not both.
        public var bucketCriteria: Macie2ClientTypes.S3BucketCriteriaForJob?
        /// An array of objects, one for each Amazon Web Services account that owns specific S3 buckets for the job to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for that account. A job's definition can contain a bucketDefinitions array or a bucketCriteria object, not both.
        public var bucketDefinitions: [Macie2ClientTypes.S3BucketDefinitionForJob]?
        /// The date and time, in UTC and extended ISO 8601 format, when the job was created.
        public var createdAt: Foundation.Date?
        /// The unique identifier for the job.
        public var jobId: Swift.String?
        /// The current status of the job. Possible values are:
        ///
        /// * CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.
        ///
        /// * COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.
        ///
        /// * IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.
        ///
        /// * PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.
        ///
        /// * RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.
        ///
        /// * USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.
        public var jobStatus: Macie2ClientTypes.JobStatus?
        /// The schedule for running the job. Possible values are:
        ///
        /// * ONE_TIME - The job runs only once.
        ///
        /// * SCHEDULED - The job runs on a daily, weekly, or monthly basis.
        public var jobType: Macie2ClientTypes.JobType?
        /// Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.
        public var lastRunErrorStatus: Macie2ClientTypes.LastRunErrorStatus?
        /// The custom name of the job.
        public var name: Swift.String?
        /// If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.
        public var userPausedDetails: Macie2ClientTypes.UserPausedDetails?

        public init(
            bucketCriteria: Macie2ClientTypes.S3BucketCriteriaForJob? = nil,
            bucketDefinitions: [Macie2ClientTypes.S3BucketDefinitionForJob]? = nil,
            createdAt: Foundation.Date? = nil,
            jobId: Swift.String? = nil,
            jobStatus: Macie2ClientTypes.JobStatus? = nil,
            jobType: Macie2ClientTypes.JobType? = nil,
            lastRunErrorStatus: Macie2ClientTypes.LastRunErrorStatus? = nil,
            name: Swift.String? = nil,
            userPausedDetails: Macie2ClientTypes.UserPausedDetails? = nil
        )
        {
            self.bucketCriteria = bucketCriteria
            self.bucketDefinitions = bucketDefinitions
            self.createdAt = createdAt
            self.jobId = jobId
            self.jobStatus = jobStatus
            self.jobType = jobType
            self.lastRunErrorStatus = lastRunErrorStatus
            self.name = name
            self.userPausedDetails = userPausedDetails
        }
    }

}

extension Macie2ClientTypes {

    /// The property to use to filter the results. Valid values are:
    public enum ListJobsFilterKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdat
        case jobstatus
        case jobtype
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListJobsFilterKey] {
            return [
                .createdat,
                .jobstatus,
                .jobtype,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdat: return "createdAt"
            case .jobstatus: return "jobStatus"
            case .jobtype: return "jobType"
            case .name: return "name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a condition that filters the results of a request for information about classification jobs. Each condition consists of a property, an operator, and one or more values.
    public struct ListJobsFilterTerm {
        /// The operator to use to filter the results.
        public var comparator: Macie2ClientTypes.JobComparator?
        /// The property to use to filter the results.
        public var key: Macie2ClientTypes.ListJobsFilterKey?
        /// An array that lists one or more values to use to filter the results.
        public var values: [Swift.String]?

        public init(
            comparator: Macie2ClientTypes.JobComparator? = nil,
            key: Macie2ClientTypes.ListJobsFilterKey? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.values = values
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about a managed data identifier. For additional information, see [Using managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/managed-data-identifiers.html) in the Amazon Macie User Guide.
    public struct ManagedDataIdentifierSummary {
        /// The category of sensitive data that the managed data identifier detects: CREDENTIALS, for credentials data such as private keys or Amazon Web Services secret access keys; FINANCIAL_INFORMATION, for financial data such as credit card numbers; or, PERSONAL_INFORMATION, for personal health information, such as health insurance identification numbers, or personally identifiable information, such as passport numbers.
        public var category: Macie2ClientTypes.SensitiveDataItemCategory?
        /// The unique identifier for the managed data identifier. This is a string that describes the type of sensitive data that the managed data identifier detects. For example: OPENSSH_PRIVATE_KEY for OpenSSH private keys, CREDIT_CARD_NUMBER for credit card numbers, or USA_PASSPORT_NUMBER for US passport numbers.
        public var id: Swift.String?

        public init(
            category: Macie2ClientTypes.SensitiveDataItemCategory? = nil,
            id: Swift.String? = nil
        )
        {
            self.category = category
            self.id = id
        }
    }

}

extension Macie2ClientTypes {
    /// Provides statistical data and other information about an S3 bucket that Amazon Macie monitors and analyzes for your account. By default, object count and storage size values include data for object parts that are the result of incomplete multipart uploads. For more information, see [How Macie monitors Amazon S3 data security](https://docs.aws.amazon.com/macie/latest/user/monitoring-s3-how-it-works.html) in the Amazon Macie User Guide. If an error occurs when Macie attempts to retrieve and process information about the bucket or the bucket's objects, the value for most of these properties is null. Key exceptions are accountId and bucketName. To identify the cause of the error, refer to the errorCode and errorMessage values.
    public struct MatchingBucket {
        /// The unique identifier for the Amazon Web Services account that owns the bucket.
        public var accountId: Swift.String?
        /// Specifies whether automated sensitive data discovery is currently configured to analyze objects in the bucket. Possible values are: MONITORED, the bucket is included in analyses; and, NOT_MONITORED, the bucket is excluded from analyses. If automated sensitive data discovery is disabled for your account, this value is NOT_MONITORED.
        public var automatedDiscoveryMonitoringStatus: Macie2ClientTypes.AutomatedDiscoveryMonitoringStatus?
        /// The name of the bucket.
        public var bucketName: Swift.String?
        /// The total number of objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.
        public var classifiableObjectCount: Swift.Int?
        /// The total storage size, in bytes, of the objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format. If versioning is enabled for the bucket, Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.
        public var classifiableSizeInBytes: Swift.Int?
        /// The error code for an error that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. If this value is ACCESS_DENIED, Macie doesn't have permission to retrieve the information. For example, the bucket has a restrictive bucket policy and Amazon S3 denied the request. If this value is null, Macie was able to retrieve and process the information.
        public var errorCode: Macie2ClientTypes.BucketMetadataErrorCode?
        /// A brief description of the error (errorCode) that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. This value is null if Macie was able to retrieve and process the information.
        public var errorMessage: Swift.String?
        /// Specifies whether any one-time or recurring classification jobs are configured to analyze objects in the bucket, and, if so, the details of the job that ran most recently.
        public var jobDetails: Macie2ClientTypes.JobDetails?
        /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently analyzed objects in the bucket while performing automated sensitive data discovery. This value is null if automated sensitive data discovery is disabled for your account.
        public var lastAutomatedDiscoveryTime: Foundation.Date?
        /// The total number of objects in the bucket.
        public var objectCount: Swift.Int?
        /// The total number of objects in the bucket, grouped by server-side encryption type. This includes a grouping that reports the total number of objects that aren't encrypted or use client-side encryption.
        public var objectCountByEncryptionType: Macie2ClientTypes.ObjectCountByEncryptionType?
        /// The sensitivity score for the bucket, ranging from -1 (classification error) to 100 (sensitive).If automated sensitive data discovery has never been enabled for your account or it’s been disabled for your organization or your standalone account for more than 30 days, possible values are: 1, the bucket is empty; or, 50, the bucket stores objects but it’s been excluded from recent analyses.
        public var sensitivityScore: Swift.Int?
        /// The total storage size, in bytes, of the bucket. If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each object in the bucket. This value doesn't reflect the storage size of all versions of each object in the bucket.
        public var sizeInBytes: Swift.Int?
        /// The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the bucket. If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.
        public var sizeInBytesCompressed: Swift.Int?
        /// The total number of objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.
        public var unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics?
        /// The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.
        public var unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics?

        public init(
            accountId: Swift.String? = nil,
            automatedDiscoveryMonitoringStatus: Macie2ClientTypes.AutomatedDiscoveryMonitoringStatus? = nil,
            bucketName: Swift.String? = nil,
            classifiableObjectCount: Swift.Int? = nil,
            classifiableSizeInBytes: Swift.Int? = nil,
            errorCode: Macie2ClientTypes.BucketMetadataErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            jobDetails: Macie2ClientTypes.JobDetails? = nil,
            lastAutomatedDiscoveryTime: Foundation.Date? = nil,
            objectCount: Swift.Int? = nil,
            objectCountByEncryptionType: Macie2ClientTypes.ObjectCountByEncryptionType? = nil,
            sensitivityScore: Swift.Int? = nil,
            sizeInBytes: Swift.Int? = nil,
            sizeInBytesCompressed: Swift.Int? = nil,
            unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics? = nil,
            unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics? = nil
        )
        {
            self.accountId = accountId
            self.automatedDiscoveryMonitoringStatus = automatedDiscoveryMonitoringStatus
            self.bucketName = bucketName
            self.classifiableObjectCount = classifiableObjectCount
            self.classifiableSizeInBytes = classifiableSizeInBytes
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.jobDetails = jobDetails
            self.lastAutomatedDiscoveryTime = lastAutomatedDiscoveryTime
            self.objectCount = objectCount
            self.objectCountByEncryptionType = objectCountByEncryptionType
            self.sensitivityScore = sensitivityScore
            self.sizeInBytes = sizeInBytes
            self.sizeInBytesCompressed = sizeInBytesCompressed
            self.unclassifiableObjectCount = unclassifiableObjectCount
            self.unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytes
        }
    }

}

extension Macie2ClientTypes {
    /// Provides statistical data and other information about an Amazon Web Services resource that Amazon Macie monitors and analyzes for your account.
    public struct MatchingResource {
        /// The details of an S3 bucket that Amazon Macie monitors and analyzes.
        public var matchingBucket: Macie2ClientTypes.MatchingBucket?

        public init(
            matchingBucket: Macie2ClientTypes.MatchingBucket? = nil
        )
        {
            self.matchingBucket = matchingBucket
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an account that's associated with an Amazon Macie administrator account.
    public struct Member {
        /// The Amazon Web Services account ID for the account.
        public var accountId: Swift.String?
        /// The Amazon Web Services account ID for the administrator account.
        public var administratorAccountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the account.
        public var arn: Swift.String?
        /// The email address for the account. This value is null if the account is associated with the administrator account through Organizations.
        public var email: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when an Amazon Macie membership invitation was last sent to the account. This value is null if a Macie membership invitation hasn't been sent to the account.
        public var invitedAt: Foundation.Date?
        /// (Deprecated) The Amazon Web Services account ID for the administrator account. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.
        public var masterAccountId: Swift.String?
        /// The current status of the relationship between the account and the administrator account.
        public var relationshipStatus: Macie2ClientTypes.RelationshipStatus?
        /// A map of key-value pairs that specifies which tags (keys and values) are associated with the account in Amazon Macie.
        public var tags: [Swift.String: Swift.String]?
        /// The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the relationship between the account and the administrator account.
        public var updatedAt: Foundation.Date?

        public init(
            accountId: Swift.String? = nil,
            administratorAccountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            email: Swift.String? = nil,
            invitedAt: Foundation.Date? = nil,
            masterAccountId: Swift.String? = nil,
            relationshipStatus: Macie2ClientTypes.RelationshipStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.accountId = accountId
            self.administratorAccountId = administratorAccountId
            self.arn = arn
            self.email = email
            self.invitedAt = invitedAt
            self.masterAccountId = masterAccountId
            self.relationshipStatus = relationshipStatus
            self.tags = tags
            self.updatedAt = updatedAt
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an S3 object that Amazon Macie selected for analysis while performing automated sensitive data discovery for an account, and the status and results of the analysis. This information is available only if automated sensitive data discovery has been enabled for the account.
    public struct ResourceProfileArtifact {
        /// The Amazon Resource Name (ARN) of the object.
        /// This member is required.
        public var arn: Swift.String?
        /// The status of the analysis. Possible values are:
        ///
        /// * COMPLETE - Amazon Macie successfully completed its analysis of the object.
        ///
        /// * PARTIAL - Macie analyzed only a subset of data in the object. For example, the object is an archive file that contains files in an unsupported format.
        ///
        /// * SKIPPED - Macie wasn't able to analyze the object. For example, the object is a malformed file.
        /// This member is required.
        public var classificationResultStatus: Swift.String?
        /// Specifies whether Amazon Macie found sensitive data in the object.
        public var sensitive: Swift.Bool?

        public init(
            arn: Swift.String? = nil,
            classificationResultStatus: Swift.String? = nil,
            sensitive: Swift.Bool? = nil
        )
        {
            self.arn = arn
            self.classificationResultStatus = classificationResultStatus
            self.sensitive = sensitive
        }
    }

}

extension Macie2ClientTypes {

    /// The operator to use in a condition that filters the results of a query. Valid values are:
    public enum SearchResourcesComparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eq
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [SearchResourcesComparator] {
            return [
                .eq,
                .ne
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eq: return "EQ"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The property to use in a condition that filters the query results. Valid values are:
    public enum SearchResourcesSimpleCriterionKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case automatedDiscoveryMonitoringStatus
        case s3BucketEffectivePermission
        case s3BucketName
        case s3BucketSharedAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [SearchResourcesSimpleCriterionKey] {
            return [
                .accountId,
                .automatedDiscoveryMonitoringStatus,
                .s3BucketEffectivePermission,
                .s3BucketName,
                .s3BucketSharedAccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .automatedDiscoveryMonitoringStatus: return "AUTOMATED_DISCOVERY_MONITORING_STATUS"
            case .s3BucketEffectivePermission: return "S3_BUCKET_EFFECTIVE_PERMISSION"
            case .s3BucketName: return "S3_BUCKET_NAME"
            case .s3BucketSharedAccess: return "S3_BUCKET_SHARED_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a property-based filter condition that determines which Amazon Web Services resources are included or excluded from the query results.
    public struct SearchResourcesSimpleCriterion {
        /// The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).
        public var comparator: Macie2ClientTypes.SearchResourcesComparator?
        /// The property to use in the condition.
        public var key: Macie2ClientTypes.SearchResourcesSimpleCriterionKey?
        /// An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:
        ///
        /// * ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the resource.
        ///
        /// * AUTOMATED_DISCOVERY_MONITORING_STATUS - A string that represents an enumerated value that Macie defines for the [BucketMetadata.automatedDiscoveryMonitoringStatus](https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-automateddiscoverymonitoringstatus) property of an S3 bucket.
        ///
        /// * S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the [BucketPublicAccess.effectivePermission](https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission) property of an S3 bucket.
        ///
        /// * S3_BUCKET_NAME - A string that represents the name of an S3 bucket.
        ///
        /// * S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the [BucketMetadata.sharedAccess](https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess) property of an S3 bucket.
        ///
        ///
        /// Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in values.
        public var values: [Swift.String]?

        public init(
            comparator: Macie2ClientTypes.SearchResourcesComparator? = nil,
            key: Macie2ClientTypes.SearchResourcesSimpleCriterionKey? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.values = values
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a tag key, a tag value, or a tag key and value (as a pair) to use in a tag-based filter condition for a query. Tag keys and values are case sensitive. Also, Amazon Macie doesn't support use of partial values or wildcard characters in tag-based filter conditions.
    public struct SearchResourcesTagCriterionPair {
        /// The value for the tag key to use in the condition.
        public var key: Swift.String?
        /// The tag value to use in the condition.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a tag-based filter condition that determines which Amazon Web Services resources are included or excluded from the query results.
    public struct SearchResourcesTagCriterion {
        /// The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).
        public var comparator: Macie2ClientTypes.SearchResourcesComparator?
        /// The tag keys, tag values, or tag key and value pairs to use in the condition.
        public var tagValues: [Macie2ClientTypes.SearchResourcesTagCriterionPair]?

        public init(
            comparator: Macie2ClientTypes.SearchResourcesComparator? = nil,
            tagValues: [Macie2ClientTypes.SearchResourcesTagCriterionPair]? = nil
        )
        {
            self.comparator = comparator
            self.tagValues = tagValues
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a property- or tag-based filter condition for including or excluding Amazon Web Services resources from the query results.
    public struct SearchResourcesCriteria {
        /// A property-based condition that defines a property, operator, and one or more values for including or excluding resources from the results.
        public var simpleCriterion: Macie2ClientTypes.SearchResourcesSimpleCriterion?
        /// A tag-based condition that defines an operator and tag keys, tag values, or tag key and value pairs for including or excluding resources from the results.
        public var tagCriterion: Macie2ClientTypes.SearchResourcesTagCriterion?

        public init(
            simpleCriterion: Macie2ClientTypes.SearchResourcesSimpleCriterion? = nil,
            tagCriterion: Macie2ClientTypes.SearchResourcesTagCriterion? = nil
        )
        {
            self.simpleCriterion = simpleCriterion
            self.tagCriterion = tagCriterion
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the sensitivity inspection template for an Amazon Macie account.
    public struct SensitivityInspectionTemplatesEntry {
        /// The unique identifier for the sensitivity inspection template.
        public var id: Swift.String?
        /// The name of the sensitivity inspection template: automated-sensitive-data-discovery.
        public var name: Swift.String?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies a custom data identifier or managed data identifier that detected a type of sensitive data to start excluding or including in an S3 bucket's sensitivity score.
    public struct SuppressDataIdentifier {
        /// The unique identifier for the custom data identifier or managed data identifier that detected the type of sensitive data to exclude or include in the score.
        public var id: Swift.String?
        /// The type of data identifier that detected the sensitive data. Possible values are: CUSTOM, for a custom data identifier; and, MANAGED, for a managed data identifier.
        public var type: Macie2ClientTypes.DataIdentifierType?

        public init(
            id: Swift.String? = nil,
            type: Macie2ClientTypes.DataIdentifierType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension Macie2ClientTypes {

    /// Specifies why occurrences of sensitive data can't be retrieved for a finding. Possible values are:
    public enum UnavailabilityReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountNotInOrganization
        case invalidClassificationResult
        case invalidResultSignature
        case memberRoleTooPermissive
        case missingGetMemberPermission
        case objectExceedsSizeQuota
        case objectUnavailable
        case resultNotSigned
        case roleTooPermissive
        case unsupportedFindingType
        case unsupportedObjectType
        case sdkUnknown(Swift.String)

        public static var allCases: [UnavailabilityReasonCode] {
            return [
                .accountNotInOrganization,
                .invalidClassificationResult,
                .invalidResultSignature,
                .memberRoleTooPermissive,
                .missingGetMemberPermission,
                .objectExceedsSizeQuota,
                .objectUnavailable,
                .resultNotSigned,
                .roleTooPermissive,
                .unsupportedFindingType,
                .unsupportedObjectType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountNotInOrganization: return "ACCOUNT_NOT_IN_ORGANIZATION"
            case .invalidClassificationResult: return "INVALID_CLASSIFICATION_RESULT"
            case .invalidResultSignature: return "INVALID_RESULT_SIGNATURE"
            case .memberRoleTooPermissive: return "MEMBER_ROLE_TOO_PERMISSIVE"
            case .missingGetMemberPermission: return "MISSING_GET_MEMBER_PERMISSION"
            case .objectExceedsSizeQuota: return "OBJECT_EXCEEDS_SIZE_QUOTA"
            case .objectUnavailable: return "OBJECT_UNAVAILABLE"
            case .resultNotSigned: return "RESULT_NOT_SIGNED"
            case .roleTooPermissive: return "ROLE_TOO_PERMISSIVE"
            case .unsupportedFindingType: return "UNSUPPORTED_FINDING_TYPE"
            case .unsupportedObjectType: return "UNSUPPORTED_OBJECT_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The source of an issue or delay. Possible values are:
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clienterror
        case internalerror
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .clienterror,
                .internalerror
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clienterror: return "ClientError"
            case .internalerror: return "InternalError"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about an account-related request that hasn't been processed.
    public struct UnprocessedAccount {
        /// The Amazon Web Services account ID for the account that the request applies to.
        public var accountId: Swift.String?
        /// The source of the issue or delay in processing the request.
        public var errorCode: Macie2ClientTypes.ErrorCode?
        /// The reason why the request hasn't been processed.
        public var errorMessage: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            errorCode: Macie2ClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension Macie2ClientTypes {

    /// The type of currency that the data for an Amazon Macie usage metric is reported in. Possible values are:
    public enum Currency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case usd
        case sdkUnknown(Swift.String)

        public static var allCases: [Currency] {
            return [
                .usd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .usd: return "USD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    public enum Unit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case terabytes
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .terabytes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .terabytes: return "TERABYTES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a current quota for an Amazon Macie account.
    public struct ServiceLimit {
        /// Specifies whether the account has met the quota that corresponds to the metric specified by the UsageByAccount.type field in the response.
        public var isServiceLimited: Swift.Bool?
        /// The unit of measurement for the value specified by the value field.
        public var unit: Macie2ClientTypes.Unit?
        /// The value for the metric specified by the UsageByAccount.type field in the response.
        public var value: Swift.Int?

        public init(
            isServiceLimited: Swift.Bool? = nil,
            unit: Macie2ClientTypes.Unit? = nil,
            value: Swift.Int? = nil
        )
        {
            self.isServiceLimited = isServiceLimited
            self.unit = unit
            self.value = value
        }
    }

}

extension Macie2ClientTypes {

    /// The name of an Amazon Macie usage metric for an account. Possible values are:
    public enum UsageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatedObjectMonitoring
        case automatedSensitiveDataDiscovery
        case dataInventoryEvaluation
        case sensitiveDataDiscovery
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageType] {
            return [
                .automatedObjectMonitoring,
                .automatedSensitiveDataDiscovery,
                .dataInventoryEvaluation,
                .sensitiveDataDiscovery
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatedObjectMonitoring: return "AUTOMATED_OBJECT_MONITORING"
            case .automatedSensitiveDataDiscovery: return "AUTOMATED_SENSITIVE_DATA_DISCOVERY"
            case .dataInventoryEvaluation: return "DATA_INVENTORY_EVALUATION"
            case .sensitiveDataDiscovery: return "SENSITIVE_DATA_DISCOVERY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides data for a specific usage metric and the corresponding quota for an Amazon Macie account.
    public struct UsageByAccount {
        /// The type of currency that the value for the metric (estimatedCost) is reported in.
        public var currency: Macie2ClientTypes.Currency?
        /// The estimated value for the metric.
        public var estimatedCost: Swift.String?
        /// The current value for the quota that corresponds to the metric specified by the type field.
        public var serviceLimit: Macie2ClientTypes.ServiceLimit?
        /// The name of the metric. Possible values are: AUTOMATED_OBJECT_MONITORING, to monitor S3 objects for automated sensitive data discovery; AUTOMATED_SENSITIVE_DATA_DISCOVERY, to analyze S3 objects for automated sensitive data discovery; DATA_INVENTORY_EVALUATION, to monitor S3 buckets; and, SENSITIVE_DATA_DISCOVERY, to run classification jobs.
        public var type: Macie2ClientTypes.UsageType?

        public init(
            currency: Macie2ClientTypes.Currency? = nil,
            estimatedCost: Swift.String? = nil,
            serviceLimit: Macie2ClientTypes.ServiceLimit? = nil,
            type: Macie2ClientTypes.UsageType? = nil
        )
        {
            self.currency = currency
            self.estimatedCost = estimatedCost
            self.serviceLimit = serviceLimit
            self.type = type
        }
    }

}

extension Macie2ClientTypes {
    /// Provides quota and aggregated usage data for an Amazon Macie account.
    public struct UsageRecord {
        /// The unique identifier for the Amazon Web Services account that the data applies to.
        public var accountId: Swift.String?
        /// The date and time, in UTC and extended ISO 8601 format, when the free trial of automated sensitive data discovery started for the account. This value is null if automated sensitive data discovery hasn't been enabled for the account.
        public var automatedDiscoveryFreeTrialStartDate: Foundation.Date?
        /// The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie free trial started for the account.
        public var freeTrialStartDate: Foundation.Date?
        /// An array of objects that contains usage data and quotas for the account. Each object contains the data for a specific usage metric and the corresponding quota.
        public var usage: [Macie2ClientTypes.UsageByAccount]?

        public init(
            accountId: Swift.String? = nil,
            automatedDiscoveryFreeTrialStartDate: Foundation.Date? = nil,
            freeTrialStartDate: Foundation.Date? = nil,
            usage: [Macie2ClientTypes.UsageByAccount]? = nil
        )
        {
            self.accountId = accountId
            self.automatedDiscoveryFreeTrialStartDate = automatedDiscoveryFreeTrialStartDate
            self.freeTrialStartDate = freeTrialStartDate
            self.usage = usage
        }
    }

}

extension Macie2ClientTypes {

    /// The operator to use in a condition that filters the results of a query for Amazon Macie account quotas and usage data. Valid values are:
    public enum UsageStatisticsFilterComparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case eq
        case gt
        case gte
        case lt
        case lte
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageStatisticsFilterComparator] {
            return [
                .contains,
                .eq,
                .gt,
                .gte,
                .lt,
                .lte,
                .ne
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .eq: return "EQ"
            case .gt: return "GT"
            case .gte: return "GTE"
            case .lt: return "LT"
            case .lte: return "LTE"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The field to use in a condition that filters the results of a query for Amazon Macie account quotas and usage data. Valid values are:
    public enum UsageStatisticsFilterKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountid
        case freetrialstartdate
        case servicelimit
        case total
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageStatisticsFilterKey] {
            return [
                .accountid,
                .freetrialstartdate,
                .servicelimit,
                .total
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountid: return "accountId"
            case .freetrialstartdate: return "freeTrialStartDate"
            case .servicelimit: return "serviceLimit"
            case .total: return "total"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a condition for filtering the results of a query for quota and usage data for one or more Amazon Macie accounts.
    public struct UsageStatisticsFilter {
        /// The operator to use in the condition. If the value for the key property is accountId, this value must be CONTAINS. If the value for the key property is any other supported field, this value can be EQ, GT, GTE, LT, LTE, or NE.
        public var comparator: Macie2ClientTypes.UsageStatisticsFilterComparator?
        /// The field to use in the condition.
        public var key: Macie2ClientTypes.UsageStatisticsFilterKey?
        /// An array that lists values to use in the condition, based on the value for the field specified by the key property. If the value for the key property is accountId, this array can specify multiple values. Otherwise, this array can specify only one value. Valid values for each supported field are:
        ///
        /// * accountId - The unique identifier for an Amazon Web Services account.
        ///
        /// * freeTrialStartDate - The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie free trial started for an account.
        ///
        /// * serviceLimit - A Boolean (true or false) value that indicates whether an account has reached its monthly quota.
        ///
        /// * total - A string that represents the current estimated cost for an account.
        public var values: [Swift.String]?

        public init(
            comparator: Macie2ClientTypes.UsageStatisticsFilterComparator? = nil,
            key: Macie2ClientTypes.UsageStatisticsFilterKey? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.comparator = comparator
            self.key = key
            self.values = values
        }
    }

}

extension Macie2ClientTypes {
    /// Provides aggregated data for an Amazon Macie usage metric. The value for the metric reports estimated usage data for an account for the preceding 30 days or the current calendar month to date, depending on the time period (timeRange) specified in the request.
    public struct UsageTotal {
        /// The type of currency that the value for the metric (estimatedCost) is reported in.
        public var currency: Macie2ClientTypes.Currency?
        /// The estimated value for the metric.
        public var estimatedCost: Swift.String?
        /// The name of the metric. Possible values are: AUTOMATED_OBJECT_MONITORING, to monitor S3 objects for automated sensitive data discovery; AUTOMATED_SENSITIVE_DATA_DISCOVERY, to analyze S3 objects for automated sensitive data discovery; DATA_INVENTORY_EVALUATION, to monitor S3 buckets; and, SENSITIVE_DATA_DISCOVERY, to run classification jobs.
        public var type: Macie2ClientTypes.UsageType?

        public init(
            currency: Macie2ClientTypes.Currency? = nil,
            estimatedCost: Swift.String? = nil,
            type: Macie2ClientTypes.UsageType? = nil
        )
        {
            self.currency = currency
            self.estimatedCost = estimatedCost
            self.type = type
        }
    }

}

/// Provides information about an error that occurred due to insufficient access to a specified resource.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provides information about an error that occurred due to a versioning conflict for a specified resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provides information about an error that occurred due to an unknown internal server error, exception, or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provides information about an error that occurred because a specified resource wasn't found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provides information about an error that occurred due to one or more service quotas for an account.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provides information about an error that occurred because too many requests were sent during a certain amount of time.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provides information about an error that occurred due to a syntax error in a request.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The explanation of the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AcceptInvitationInput {
    /// The Amazon Web Services account ID for the account that sent the invitation.
    public var administratorAccountId: Swift.String?
    /// The unique identifier for the invitation to accept.
    /// This member is required.
    public var invitationId: Swift.String?
    /// (Deprecated) The Amazon Web Services account ID for the account that sent the invitation. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.
    public var masterAccount: Swift.String?

    public init(
        administratorAccountId: Swift.String? = nil,
        invitationId: Swift.String? = nil,
        masterAccount: Swift.String? = nil
    )
    {
        self.administratorAccountId = administratorAccountId
        self.invitationId = invitationId
        self.masterAccount = masterAccount
    }
}

public struct AcceptInvitationOutput {

    public init() { }
}

extension Macie2ClientTypes {
    /// Specifies the details of an account to associate with an Amazon Macie administrator account.
    public struct AccountDetail {
        /// The Amazon Web Services account ID for the account.
        /// This member is required.
        public var accountId: Swift.String?
        /// The email address for the account.
        /// This member is required.
        public var email: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            email: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.email = email
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about an S3 object that lists specific text to ignore.
    public struct S3WordsList {
        /// The full name of the S3 bucket that contains the object.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The full name (key) of the object.
        /// This member is required.
        public var objectKey: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            objectKey: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.objectKey = objectKey
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the criteria for an allow list. The criteria must specify a regular expression (regex) or an S3 object (s3WordsList). It can't specify both.
    public struct AllowListCriteria {
        /// The regular expression (regex) that defines the text pattern to ignore. The expression can contain as many as 512 characters.
        public var regex: Swift.String?
        /// The location and name of the S3 object that lists specific text to ignore.
        public var s3WordsList: Macie2ClientTypes.S3WordsList?

        public init(
            regex: Swift.String? = nil,
            s3WordsList: Macie2ClientTypes.S3WordsList? = nil
        )
        {
            self.regex = regex
            self.s3WordsList = s3WordsList
        }
    }

}

extension Macie2ClientTypes {

    /// Indicates the current status of an allow list. Depending on the type of criteria that the list specifies, possible values are:
    public enum AllowListStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ok
        case s3ObjectAccessDenied
        case s3ObjectEmpty
        case s3ObjectNotFound
        case s3ObjectOversize
        case s3Throttled
        case s3UserAccessDenied
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [AllowListStatusCode] {
            return [
                .ok,
                .s3ObjectAccessDenied,
                .s3ObjectEmpty,
                .s3ObjectNotFound,
                .s3ObjectOversize,
                .s3Throttled,
                .s3UserAccessDenied,
                .unknownError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ok: return "OK"
            case .s3ObjectAccessDenied: return "S3_OBJECT_ACCESS_DENIED"
            case .s3ObjectEmpty: return "S3_OBJECT_EMPTY"
            case .s3ObjectNotFound: return "S3_OBJECT_NOT_FOUND"
            case .s3ObjectOversize: return "S3_OBJECT_OVERSIZE"
            case .s3Throttled: return "S3_THROTTLED"
            case .s3UserAccessDenied: return "S3_USER_ACCESS_DENIED"
            case .unknownError: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the current status of an allow list, which indicates whether Amazon Macie can access and use the list's criteria.
    public struct AllowListStatus {
        /// The current status of the allow list. If the list's criteria specify a regular expression (regex), this value is typically OK. Amazon Macie can compile the expression. If the list's criteria specify an S3 object, possible values are:
        ///
        /// * OK - Macie can retrieve and parse the contents of the object.
        ///
        /// * S3_OBJECT_ACCESS_DENIED - Macie isn't allowed to access the object or the object is encrypted with a customer managed KMS key that Macie isn't allowed to use. Check the bucket policy and other permissions settings for the bucket and the object. If the object is encrypted, also ensure that it's encrypted with a key that Macie is allowed to use.
        ///
        /// * S3_OBJECT_EMPTY - Macie can retrieve the object but the object doesn't contain any content. Ensure that the object contains the correct entries. Also ensure that the list's criteria specify the correct bucket and object names.
        ///
        /// * S3_OBJECT_NOT_FOUND - The object doesn't exist in Amazon S3. Ensure that the list's criteria specify the correct bucket and object names.
        ///
        /// * S3_OBJECT_OVERSIZE - Macie can retrieve the object. However, the object contains too many entries or its storage size exceeds the quota for an allow list. Try breaking the list into multiple files and ensure that each file doesn't exceed any quotas. Then configure list settings in Macie for each file.
        ///
        /// * S3_THROTTLED - Amazon S3 throttled the request to retrieve the object. Wait a few minutes and then try again.
        ///
        /// * S3_USER_ACCESS_DENIED - Amazon S3 denied the request to retrieve the object. If the specified object exists, you're not allowed to access it or it's encrypted with an KMS key that you're not allowed to use. Work with your Amazon Web Services administrator to ensure that the list's criteria specify the correct bucket and object names, and you have read access to the bucket and the object. If the object is encrypted, also ensure that it's encrypted with a key that you're allowed to use.
        ///
        /// * UNKNOWN_ERROR - A transient or internal error occurred when Macie attempted to retrieve or parse the object. Wait a few minutes and then try again. A list can also have this status if it's encrypted with a key that Amazon S3 and Macie can't access or use.
        /// This member is required.
        public var code: Macie2ClientTypes.AllowListStatusCode?
        /// A brief description of the status of the allow list. Amazon Macie uses this value to provide additional information about an error that occurred when Macie tried to access and use the list's criteria.
        public var description: Swift.String?

        public init(
            code: Macie2ClientTypes.AllowListStatusCode? = nil,
            description: Swift.String? = nil
        )
        {
            self.code = code
            self.description = description
        }
    }

}

extension Macie2ClientTypes {

    /// Specifies whether to automatically enable automated sensitive data discovery for accounts that are part of an organization in Amazon Macie. Valid values are:
    public enum AutoEnableMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case new
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoEnableMode] {
            return [
                .all,
                .new,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .new: return "NEW"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The status of the automated sensitive data discovery configuration for an organization in Amazon Macie or a standalone Macie account. Valid values are:
    public enum AutomatedDiscoveryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomatedDiscoveryStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// Specifies whether occurrences of sensitive data can be retrieved for a finding. Possible values are:
    public enum AvailabilityCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [AvailabilityCode] {
            return [
                .available,
                .unavailable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct BatchGetCustomDataIdentifiersInput {
    /// An array of custom data identifier IDs, one for each custom data identifier to retrieve information about.
    public var ids: [Swift.String]?

    public init(
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

public struct BatchGetCustomDataIdentifiersOutput {
    /// An array of objects, one for each custom data identifier that matches the criteria specified in the request.
    public var customDataIdentifiers: [Macie2ClientTypes.BatchGetCustomDataIdentifierSummary]?
    /// An array of custom data identifier IDs, one for each custom data identifier that was specified in the request but doesn't correlate to an existing custom data identifier.
    public var notFoundIdentifierIds: [Swift.String]?

    public init(
        customDataIdentifiers: [Macie2ClientTypes.BatchGetCustomDataIdentifierSummary]? = nil,
        notFoundIdentifierIds: [Swift.String]? = nil
    )
    {
        self.customDataIdentifiers = customDataIdentifiers
        self.notFoundIdentifierIds = notFoundIdentifierIds
    }
}

public struct BatchUpdateAutomatedDiscoveryAccountsInput {
    /// An array of objects, one for each account to change the status of automated sensitive data discovery for. Each object specifies the Amazon Web Services account ID for an account and a new status for that account.
    public var accounts: [Macie2ClientTypes.AutomatedDiscoveryAccountUpdate]?

    public init(
        accounts: [Macie2ClientTypes.AutomatedDiscoveryAccountUpdate]? = nil
    )
    {
        self.accounts = accounts
    }
}

public struct BatchUpdateAutomatedDiscoveryAccountsOutput {
    /// An array of objects, one for each account whose status wasn’t changed. Each object identifies the account and explains why the status of automated sensitive data discovery wasn’t changed for the account. This value is null if the request succeeded for all specified accounts.
    public var errors: [Macie2ClientTypes.AutomatedDiscoveryAccountUpdateError]?

    public init(
        errors: [Macie2ClientTypes.AutomatedDiscoveryAccountUpdateError]? = nil
    )
    {
        self.errors = errors
    }
}

extension Macie2ClientTypes {
    /// Provides information about the number of S3 buckets that are publicly accessible due to a combination of permissions settings for each bucket.
    public struct BucketCountByEffectivePermission {
        /// The total number of buckets that allow the general public to have read or write access to the bucket.
        public var publiclyAccessible: Swift.Int?
        /// The total number of buckets that allow the general public to have read access to the bucket.
        public var publiclyReadable: Swift.Int?
        /// The total number of buckets that allow the general public to have write access to the bucket.
        public var publiclyWritable: Swift.Int?
        /// The total number of buckets that Amazon Macie wasn't able to evaluate permissions settings for. Macie can't determine whether these buckets are publicly accessible.
        public var unknown: Swift.Int?

        public init(
            publiclyAccessible: Swift.Int? = nil,
            publiclyReadable: Swift.Int? = nil,
            publiclyWritable: Swift.Int? = nil,
            unknown: Swift.Int? = nil
        )
        {
            self.publiclyAccessible = publiclyAccessible
            self.publiclyReadable = publiclyReadable
            self.publiclyWritable = publiclyWritable
            self.unknown = unknown
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the number of S3 buckets whose settings do or don't specify default server-side encryption behavior for objects that are added to the buckets. For detailed information about these settings, see [Setting default server-side encryption behavior for Amazon S3 buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html) in the Amazon Simple Storage Service User Guide.
    public struct BucketCountByEncryptionType {
        /// The total number of buckets whose default encryption settings are configured to encrypt new objects with an KMS key, either an Amazon Web Services managed key or a customer managed key. By default, these buckets encrypt new objects automatically using DSSE-KMS or SSE-KMS encryption.
        public var kmsManaged: Swift.Int?
        /// The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon S3 managed key. By default, these buckets encrypt new objects automatically using SSE-S3 encryption.
        public var s3Managed: Swift.Int?
        /// The total number of buckets that don't specify default server-side encryption behavior for new objects. Default encryption settings aren't configured for these buckets.
        public var unencrypted: Swift.Int?
        /// The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.
        public var unknown: Swift.Int?

        public init(
            kmsManaged: Swift.Int? = nil,
            s3Managed: Swift.Int? = nil,
            unencrypted: Swift.Int? = nil,
            unknown: Swift.Int? = nil
        )
        {
            self.kmsManaged = kmsManaged
            self.s3Managed = s3Managed
            self.unencrypted = unencrypted
            self.unknown = unknown
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the number of S3 buckets that are or aren't shared with other Amazon Web Services accounts, Amazon CloudFront origin access identities (OAIs), or CloudFront origin access controls (OACs). In this data, an Amazon Macie organization is defined as a set of Macie accounts that are centrally managed as a group of related accounts through Organizations or by Macie invitation.
    public struct BucketCountBySharedAccessType {
        /// The total number of buckets that are shared with one or more of the following or any combination of the following: an Amazon CloudFront OAI, a CloudFront OAC, or an Amazon Web Services account that isn't in the same Amazon Macie organization.
        public var external: Swift.Int?
        /// The total number of buckets that are shared with one or more Amazon Web Services accounts in the same Amazon Macie organization. These buckets aren't shared with Amazon CloudFront OAIs or OACs.
        public var `internal`: Swift.Int?
        /// The total number of buckets that aren't shared with other Amazon Web Services accounts, Amazon CloudFront OAIs, or CloudFront OACs.
        public var notShared: Swift.Int?
        /// The total number of buckets that Amazon Macie wasn't able to evaluate shared access settings for. Macie can't determine whether these buckets are shared with other Amazon Web Services accounts, Amazon CloudFront OAIs, or CloudFront OACs.
        public var unknown: Swift.Int?

        public init(
            external: Swift.Int? = nil,
            `internal`: Swift.Int? = nil,
            notShared: Swift.Int? = nil,
            unknown: Swift.Int? = nil
        )
        {
            self.external = external
            self.`internal` = `internal`
            self.notShared = notShared
            self.unknown = unknown
        }
    }

}

extension Macie2ClientTypes {
    /// Provides information about the number of S3 buckets whose bucket policies do or don't require server-side encryption of objects when objects are added to the buckets.
    public struct BucketCountPolicyAllowsUnencryptedObjectUploads {
        /// The total number of buckets that don't have a bucket policy or have a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, the policy doesn't require PutObject requests to include a valid server-side encryption header: the x-amz-server-side-encryption header with a value of AES256 or aws:kms, or the x-amz-server-side-encryption-customer-algorithm header with a value of AES256.
        public var allowsUnencryptedObjectUploads: Swift.Int?
        /// The total number of buckets whose bucket policies require server-side encryption of new objects. PutObject requests for these buckets must include a valid server-side encryption header: the x-amz-server-side-encryption header with a value of AES256 or aws:kms, or the x-amz-server-side-encryption-customer-algorithm header with a value of AES256.
        public var deniesUnencryptedObjectUploads: Swift.Int?
        /// The total number of buckets that Amazon Macie wasn't able to evaluate server-side encryption requirements for. Macie can't determine whether the bucket policies for these buckets require server-side encryption of new objects.
        public var unknown: Swift.Int?

        public init(
            allowsUnencryptedObjectUploads: Swift.Int? = nil,
            deniesUnencryptedObjectUploads: Swift.Int? = nil,
            unknown: Swift.Int? = nil
        )
        {
            self.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads
            self.deniesUnencryptedObjectUploads = deniesUnencryptedObjectUploads
            self.unknown = unknown
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the operator to use in a property-based condition that filters the results of a query for information about S3 buckets.
    public struct BucketCriteriaAdditionalProperties {
        /// The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        public var eq: [Swift.String]?
        /// The value for the property is greater than the specified value.
        public var gt: Swift.Int?
        /// The value for the property is greater than or equal to the specified value.
        public var gte: Swift.Int?
        /// The value for the property is less than the specified value.
        public var lt: Swift.Int?
        /// The value for the property is less than or equal to the specified value.
        public var lte: Swift.Int?
        /// The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        public var neq: [Swift.String]?
        /// The name of the bucket begins with the specified value.
        public var `prefix`: Swift.String?

        public init(
            eq: [Swift.String]? = nil,
            gt: Swift.Int? = nil,
            gte: Swift.Int? = nil,
            lt: Swift.Int? = nil,
            lte: Swift.Int? = nil,
            neq: [Swift.String]? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.eq = eq
            self.gt = gt
            self.gte = gte
            self.lt = lt
            self.lte = lte
            self.neq = neq
            self.`prefix` = `prefix`
        }
    }

}

extension Macie2ClientTypes {

    public enum OrderBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderBy] {
            return [
                .asc,
                .desc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "ASC"
            case .desc: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for sorting the results of a query for information about S3 buckets.
    public struct BucketSortCriteria {
        /// The name of the bucket property to sort the results by. This value can be one of the following properties that Amazon Macie defines as bucket metadata: accountId, bucketName, classifiableObjectCount, classifiableSizeInBytes, objectCount, sensitivityScore, or sizeInBytes.
        public var attributeName: Swift.String?
        /// The sort order to apply to the results, based on the value specified by the attributeName property. Valid values are: ASC, sort the results in ascending order; and, DESC, sort the results in descending order.
        public var orderBy: Macie2ClientTypes.OrderBy?

        public init(
            attributeName: Swift.String? = nil,
            orderBy: Macie2ClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

extension Macie2ClientTypes {
    /// Provides aggregated statistical data for sensitive data discovery metrics that apply to S3 buckets. Each field contains aggregated data for all the buckets that have a sensitivity score (sensitivityScore) of a specified value or within a specified range (BucketStatisticsBySensitivity). If automated sensitive data discovery is currently disabled for your account, the value for each field is 0.
    public struct SensitivityAggregations {
        /// The total storage size, in bytes, of all the objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format. If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of all applicable objects in the buckets.
        public var classifiableSizeInBytes: Swift.Int?
        /// The total number of buckets that are publicly accessible due to a combination of permissions settings for each bucket.
        public var publiclyAccessibleCount: Swift.Int?
        /// The total number of buckets.
        public var totalCount: Swift.Int?
        /// The total storage size, in bytes, of the buckets. If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each object in the buckets. This value doesn't reflect the storage size of all versions of the objects in the buckets.
        public var totalSizeInBytes: Swift.Int?

        public init(
            classifiableSizeInBytes: Swift.Int? = nil,
            publiclyAccessibleCount: Swift.Int? = nil,
            totalCount: Swift.Int? = nil,
            totalSizeInBytes: Swift.Int? = nil
        )
        {
            self.classifiableSizeInBytes = classifiableSizeInBytes
            self.publiclyAccessibleCount = publiclyAccessibleCount
            self.totalCount = totalCount
            self.totalSizeInBytes = totalSizeInBytes
        }
    }

}

extension Macie2ClientTypes {
    /// Provides aggregated statistical data for sensitive data discovery metrics that apply to S3 buckets, grouped by bucket sensitivity score (sensitivityScore). If automated sensitive data discovery is currently disabled for your account, the value for each metric is 0.
    public struct BucketStatisticsBySensitivity {
        /// The aggregated statistical data for all buckets that have a sensitivity score of -1.
        public var classificationError: Macie2ClientTypes.SensitivityAggregations?
        /// The aggregated statistical data for all buckets that have a sensitivity score of 50.
        public var notClassified: Macie2ClientTypes.SensitivityAggregations?
        /// The aggregated statistical data for all buckets that have a sensitivity score of 1-49.
        public var notSensitive: Macie2ClientTypes.SensitivityAggregations?
        /// The aggregated statistical data for all buckets that have a sensitivity score of 51-100.
        public var sensitive: Macie2ClientTypes.SensitivityAggregations?

        public init(
            classificationError: Macie2ClientTypes.SensitivityAggregations? = nil,
            notClassified: Macie2ClientTypes.SensitivityAggregations? = nil,
            notSensitive: Macie2ClientTypes.SensitivityAggregations? = nil,
            sensitive: Macie2ClientTypes.SensitivityAggregations? = nil
        )
        {
            self.classificationError = classificationError
            self.notClassified = notClassified
            self.notSensitive = notSensitive
            self.sensitive = sensitive
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies an S3 bucket to store data classification results in, and the encryption settings to use when storing results in that bucket.
    public struct S3Destination {
        /// The name of the bucket. This must be the name of an existing general purpose bucket.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The path prefix to use in the path to the location in the bucket. This prefix specifies where to store classification results in the bucket.
        public var keyPrefix: Swift.String?
        /// The Amazon Resource Name (ARN) of the customer managed KMS key to use for encryption of the results. This must be the ARN of an existing, symmetric encryption KMS key that's enabled in the same Amazon Web Services Region as the bucket.
        /// This member is required.
        public var kmsKeyArn: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.keyPrefix = keyPrefix
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies where to store data classification results, and the encryption settings to use when storing results in that location. The location must be an S3 general purpose bucket.
    public struct ClassificationExportConfiguration {
        /// The S3 bucket to store data classification results in, and the encryption settings to use when storing results in that bucket.
        public var s3Destination: Macie2ClientTypes.S3Destination?

        public init(
            s3Destination: Macie2ClientTypes.S3Destination? = nil
        )
        {
            self.s3Destination = s3Destination
        }
    }

}

extension Macie2ClientTypes {

    /// Specifies how to apply changes to the S3 bucket exclusion list defined by the classification scope for an Amazon Macie account. Valid values are:
    public enum ClassificationScopeUpdateOperation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case add
        case remove
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [ClassificationScopeUpdateOperation] {
            return [
                .add,
                .remove,
                .replace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .remove: return "REMOVE"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateAllowListInput {
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression (regex) that defines a text pattern to ignore.
    /// This member is required.
    public var criteria: Macie2ClientTypes.AllowListCriteria?
    /// A custom description of the allow list. The description can contain as many as 512 characters.
    public var description: Swift.String?
    /// A custom name for the allow list. The name can contain as many as 128 characters.
    /// This member is required.
    public var name: Swift.String?
    /// A map of key-value pairs that specifies the tags to associate with the allow list. An allow list can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        criteria: Macie2ClientTypes.AllowListCriteria? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.criteria = criteria
        self.description = description
        self.name = name
        self.tags = tags
    }
}

public struct CreateAllowListOutput {
    /// The Amazon Resource Name (ARN) of the allow list.
    public var arn: Swift.String?
    /// The unique identifier for the allow list.
    public var id: Swift.String?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
    }
}

extension Macie2ClientTypes {

    /// The selection type that determines which managed data identifiers a classification job uses to analyze data. Valid values are:
    public enum ManagedDataIdentifierSelector: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case exclude
        case include
        case `none`
        case recommended
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedDataIdentifierSelector] {
            return [
                .all,
                .exclude,
                .include,
                .none,
                .recommended
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case .none: return "NONE"
            case .recommended: return "RECOMMENDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies one or more property- and tag-based conditions that define criteria for including or excluding S3 objects from a classification job.
    public struct JobScopingBlock {
        /// An array of conditions, one for each property- or tag-based condition that determines which objects to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.
        public var and: [Macie2ClientTypes.JobScopeTerm]?

        public init(
            and: [Macie2ClientTypes.JobScopeTerm]? = nil
        )
        {
            self.and = and
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies one or more property- and tag-based conditions that define criteria for including or excluding S3 objects from a classification job. Exclude conditions take precedence over include conditions.
    public struct Scoping {
        /// The property- and tag-based conditions that determine which objects to exclude from the analysis.
        public var excludes: Macie2ClientTypes.JobScopingBlock?
        /// The property- and tag-based conditions that determine which objects to include in the analysis.
        public var includes: Macie2ClientTypes.JobScopingBlock?

        public init(
            excludes: Macie2ClientTypes.JobScopingBlock? = nil,
            includes: Macie2ClientTypes.JobScopingBlock? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies which S3 buckets contain the objects that a classification job analyzes, and the scope of that analysis. The bucket specification can be static (bucketDefinitions) or dynamic (bucketCriteria). If it's static, the job analyzes objects in the same predefined set of buckets each time the job runs. If it's dynamic, the job analyzes objects in any buckets that match the specified criteria each time the job starts to run.
    public struct S3JobDefinition {
        /// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Each time the job runs, the job uses these criteria to determine which buckets contain objects to analyze. A job's definition can contain a bucketCriteria object or a bucketDefinitions array, not both.
        public var bucketCriteria: Macie2ClientTypes.S3BucketCriteriaForJob?
        /// An array of objects, one for each Amazon Web Services account that owns specific S3 buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for that account. A job's definition can contain a bucketDefinitions array or a bucketCriteria object, not both.
        public var bucketDefinitions: [Macie2ClientTypes.S3BucketDefinitionForJob]?
        /// The property- and tag-based conditions that determine which S3 objects to include or exclude from the analysis. Each time the job runs, the job uses these criteria to determine which objects to analyze.
        public var scoping: Macie2ClientTypes.Scoping?

        public init(
            bucketCriteria: Macie2ClientTypes.S3BucketCriteriaForJob? = nil,
            bucketDefinitions: [Macie2ClientTypes.S3BucketDefinitionForJob]? = nil,
            scoping: Macie2ClientTypes.Scoping? = nil
        )
        {
            self.bucketCriteria = bucketCriteria
            self.bucketDefinitions = bucketDefinitions
            self.scoping = scoping
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies that a classification job runs once a day, every day. This is an empty object.
    public struct DailySchedule {

        public init() { }
    }

}

extension Macie2ClientTypes {
    /// Specifies a monthly recurrence pattern for running a classification job.
    public struct MonthlySchedule {
        /// The numeric day of the month when Amazon Macie runs the job. This value can be an integer from 1 through 31. If this value exceeds the number of days in a certain month, Macie doesn't run the job that month. Macie runs the job only during months that have the specified day. For example, if this value is 31 and a month has only 30 days, Macie doesn't run the job that month. To run the job every month, specify a value that's less than 29.
        public var dayOfMonth: Swift.Int?

        public init(
            dayOfMonth: Swift.Int? = nil
        )
        {
            self.dayOfMonth = dayOfMonth
        }
    }

}

extension Macie2ClientTypes {

    public enum DayOfWeek: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case friday
        case monday
        case saturday
        case sunday
        case thursday
        case tuesday
        case wednesday
        case sdkUnknown(Swift.String)

        public static var allCases: [DayOfWeek] {
            return [
                .friday,
                .monday,
                .saturday,
                .sunday,
                .thursday,
                .tuesday,
                .wednesday
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .friday: return "FRIDAY"
            case .monday: return "MONDAY"
            case .saturday: return "SATURDAY"
            case .sunday: return "SUNDAY"
            case .thursday: return "THURSDAY"
            case .tuesday: return "TUESDAY"
            case .wednesday: return "WEDNESDAY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a weekly recurrence pattern for running a classification job.
    public struct WeeklySchedule {
        /// The day of the week when Amazon Macie runs the job.
        public var dayOfWeek: Macie2ClientTypes.DayOfWeek?

        public init(
            dayOfWeek: Macie2ClientTypes.DayOfWeek? = nil
        )
        {
            self.dayOfWeek = dayOfWeek
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the recurrence pattern for running a classification job.
    public struct JobScheduleFrequency {
        /// Specifies a daily recurrence pattern for running the job.
        public var dailySchedule: Macie2ClientTypes.DailySchedule?
        /// Specifies a monthly recurrence pattern for running the job.
        public var monthlySchedule: Macie2ClientTypes.MonthlySchedule?
        /// Specifies a weekly recurrence pattern for running the job.
        public var weeklySchedule: Macie2ClientTypes.WeeklySchedule?

        public init(
            dailySchedule: Macie2ClientTypes.DailySchedule? = nil,
            monthlySchedule: Macie2ClientTypes.MonthlySchedule? = nil,
            weeklySchedule: Macie2ClientTypes.WeeklySchedule? = nil
        )
        {
            self.dailySchedule = dailySchedule
            self.monthlySchedule = monthlySchedule
            self.weeklySchedule = weeklySchedule
        }
    }

}

public struct CreateClassificationJobInput {
    /// An array of unique identifiers, one for each allow list for the job to use when it analyzes data.
    public var allowListIds: [Swift.String]?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    /// This member is required.
    public var clientToken: Swift.String?
    /// An array of unique identifiers, one for each custom data identifier for the job to use when it analyzes data. To use only managed data identifiers, don't specify a value for this property and specify a value other than NONE for the managedDataIdentifierSelector property.
    public var customDataIdentifierIds: [Swift.String]?
    /// A custom description of the job. The description can contain as many as 200 characters.
    public var description: Swift.String?
    /// For a recurring job, specifies whether to analyze all existing, eligible objects immediately after the job is created (true). To analyze only those objects that are created or changed after you create the job and before the job's first scheduled run, set this value to false. If you configure the job to run only once, don't specify a value for this property.
    public var initialRun: Swift.Bool?
    /// The schedule for running the job. Valid values are:
    ///
    /// * ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the scheduleFrequency property.
    ///
    /// * SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the scheduleFrequency property to specify the recurrence pattern for the job.
    /// This member is required.
    public var jobType: Macie2ClientTypes.JobType?
    /// An array of unique identifiers, one for each managed data identifier for the job to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type that you specify for the job (managedDataIdentifierSelector). To retrieve a list of valid values for this property, use the ListManagedDataIdentifiers operation.
    public var managedDataIdentifierIds: [Swift.String]?
    /// The selection type to apply when determining which managed data identifiers the job uses to analyze data. Valid values are:
    ///
    /// * ALL - Use all managed data identifiers. If you specify this value, don't specify any values for the managedDataIdentifierIds property.
    ///
    /// * EXCLUDE - Use all managed data identifiers except the ones specified by the managedDataIdentifierIds property.
    ///
    /// * INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.
    ///
    /// * NONE - Don't use any managed data identifiers. If you specify this value, specify at least one value for the customDataIdentifierIds property and don't specify any values for the managedDataIdentifierIds property.
    ///
    /// * RECOMMENDED (default) - Use the recommended set of managed data identifiers. If you specify this value, don't specify any values for the managedDataIdentifierIds property.
    ///
    ///
    /// If you don't specify a value for this property, the job uses the recommended set of managed data identifiers. If the job is a recurring job and you specify ALL or EXCLUDE, each job run automatically uses new managed data identifiers that are released. If you don't specify a value for this property or you specify RECOMMENDED for a recurring job, each job run automatically uses all the managed data identifiers that are in the recommended set when the run starts. To learn about individual managed data identifiers or determine which ones are in the recommended set, see [Using managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/managed-data-identifiers.html) or [Recommended managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/discovery-jobs-mdis-recommended.html) in the Amazon Macie User Guide.
    public var managedDataIdentifierSelector: Macie2ClientTypes.ManagedDataIdentifierSelector?
    /// A custom name for the job. The name can contain as many as 500 characters.
    /// This member is required.
    public var name: Swift.String?
    /// The S3 buckets that contain the objects to analyze, and the scope of that analysis.
    /// This member is required.
    public var s3JobDefinition: Macie2ClientTypes.S3JobDefinition?
    /// The sampling depth, as a percentage, for the job to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
    public var samplingPercentage: Swift.Int?
    /// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the jobType property to ONE_TIME.
    public var scheduleFrequency: Macie2ClientTypes.JobScheduleFrequency?
    /// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    public var tags: [Swift.String: Swift.String]?

    public init(
        allowListIds: [Swift.String]? = nil,
        clientToken: Swift.String? = nil,
        customDataIdentifierIds: [Swift.String]? = nil,
        description: Swift.String? = nil,
        initialRun: Swift.Bool? = nil,
        jobType: Macie2ClientTypes.JobType? = nil,
        managedDataIdentifierIds: [Swift.String]? = nil,
        managedDataIdentifierSelector: Macie2ClientTypes.ManagedDataIdentifierSelector? = nil,
        name: Swift.String? = nil,
        s3JobDefinition: Macie2ClientTypes.S3JobDefinition? = nil,
        samplingPercentage: Swift.Int? = nil,
        scheduleFrequency: Macie2ClientTypes.JobScheduleFrequency? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.allowListIds = allowListIds
        self.clientToken = clientToken
        self.customDataIdentifierIds = customDataIdentifierIds
        self.description = description
        self.initialRun = initialRun
        self.jobType = jobType
        self.managedDataIdentifierIds = managedDataIdentifierIds
        self.managedDataIdentifierSelector = managedDataIdentifierSelector
        self.name = name
        self.s3JobDefinition = s3JobDefinition
        self.samplingPercentage = samplingPercentage
        self.scheduleFrequency = scheduleFrequency
        self.tags = tags
    }
}

public struct CreateClassificationJobOutput {
    /// The Amazon Resource Name (ARN) of the job.
    public var jobArn: Swift.String?
    /// The unique identifier for the job.
    public var jobId: Swift.String?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
    }
}

extension Macie2ClientTypes {

    /// The severity of a finding, ranging from LOW, for least severe, to HIGH, for most severe. Valid values are:
    public enum DataIdentifierSeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [DataIdentifierSeverity] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies a severity level for findings that a custom data identifier produces. A severity level determines which severity is assigned to the findings, based on the number of occurrences of text that match the custom data identifier's detection criteria.
    public struct SeverityLevel {
        /// The minimum number of occurrences of text that must match the custom data identifier's detection criteria in order to produce a finding with the specified severity (severity).
        /// This member is required.
        public var occurrencesThreshold: Swift.Int?
        /// The severity to assign to a finding: if the number of occurrences is greater than or equal to the specified threshold (occurrencesThreshold); and, if applicable, the number of occurrences is less than the threshold for the next consecutive severity level for the custom data identifier, moving from LOW to HIGH.
        /// This member is required.
        public var severity: Macie2ClientTypes.DataIdentifierSeverity?

        public init(
            occurrencesThreshold: Swift.Int? = nil,
            severity: Macie2ClientTypes.DataIdentifierSeverity? = nil
        )
        {
            self.occurrencesThreshold = occurrencesThreshold
            self.severity = severity
        }
    }

}

public struct CreateCustomDataIdentifierInput {
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// A custom description of the custom data identifier. The description can contain as many as 512 characters. We strongly recommend that you avoid including any sensitive data in the description of a custom data identifier. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.
    public var description: Swift.String?
    /// An array that lists specific character sequences (ignore words) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.
    public var ignoreWords: [Swift.String]?
    /// An array that lists specific character sequences (keywords), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.
    public var keywords: [Swift.String]?
    /// The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.
    public var maximumMatchDistance: Swift.Int?
    /// A custom name for the custom data identifier. The name can contain as many as 128 characters. We strongly recommend that you avoid including any sensitive data in the name of a custom data identifier. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.
    /// This member is required.
    public var name: Swift.String?
    /// The regular expression (regex) that defines the pattern to match. The expression can contain as many as 512 characters.
    /// This member is required.
    public var regex: Swift.String?
    /// The severity to assign to findings that the custom data identifier produces, based on the number of occurrences of text that match the custom data identifier's detection criteria. You can specify as many as three SeverityLevel objects in this array, one for each severity: LOW, MEDIUM, or HIGH. If you specify more than one, the occurrences thresholds must be in ascending order by severity, moving from LOW to HIGH. For example, 1 for LOW, 50 for MEDIUM, and 100 for HIGH. If an S3 object contains fewer occurrences than the lowest specified threshold, Amazon Macie doesn't create a finding. If you don't specify any values for this array, Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie assigns the MEDIUM severity to those findings.
    public var severityLevels: [Macie2ClientTypes.SeverityLevel]?
    /// A map of key-value pairs that specifies the tags to associate with the custom data identifier. A custom data identifier can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        ignoreWords: [Swift.String]? = nil,
        keywords: [Swift.String]? = nil,
        maximumMatchDistance: Swift.Int? = nil,
        name: Swift.String? = nil,
        regex: Swift.String? = nil,
        severityLevels: [Macie2ClientTypes.SeverityLevel]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.ignoreWords = ignoreWords
        self.keywords = keywords
        self.maximumMatchDistance = maximumMatchDistance
        self.name = name
        self.regex = regex
        self.severityLevels = severityLevels
        self.tags = tags
    }
}

public struct CreateCustomDataIdentifierOutput {
    /// The unique identifier for the custom data identifier that was created.
    public var customDataIdentifierId: Swift.String?

    public init(
        customDataIdentifierId: Swift.String? = nil
    )
    {
        self.customDataIdentifierId = customDataIdentifierId
    }
}

extension Macie2ClientTypes {
    /// Specifies the operator to use in a property-based condition that filters the results of a query for findings. For detailed information and examples of each operator, see [Fundamentals of filtering findings](https://docs.aws.amazon.com/macie/latest/user/findings-filter-basics.html) in the Amazon Macie User Guide.
    public struct CriterionAdditionalProperties {
        /// The value for the property matches (equals) the specified value. If you specify multiple values, Macie uses OR logic to join the values.
        public var eq: [Swift.String]?
        /// The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values. You can use this operator with the following properties: customDataIdentifiers.detections.arn, customDataIdentifiers.detections.name, resourcesAffected.s3Bucket.tags.key, resourcesAffected.s3Bucket.tags.value, resourcesAffected.s3Object.tags.key, resourcesAffected.s3Object.tags.value, sensitiveData.category, and sensitiveData.detections.type.
        public var eqExactMatch: [Swift.String]?
        /// The value for the property is greater than the specified value.
        public var gt: Swift.Int?
        /// The value for the property is greater than or equal to the specified value.
        public var gte: Swift.Int?
        /// The value for the property is less than the specified value.
        public var lt: Swift.Int?
        /// The value for the property is less than or equal to the specified value.
        public var lte: Swift.Int?
        /// The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Macie uses OR logic to join the values.
        public var neq: [Swift.String]?

        public init(
            eq: [Swift.String]? = nil,
            eqExactMatch: [Swift.String]? = nil,
            gt: Swift.Int? = nil,
            gte: Swift.Int? = nil,
            lt: Swift.Int? = nil,
            lte: Swift.Int? = nil,
            neq: [Swift.String]? = nil
        )
        {
            self.eq = eq
            self.eqExactMatch = eqExactMatch
            self.gt = gt
            self.gte = gte
            self.lt = lt
            self.lte = lte
            self.neq = neq
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies, as a map, one or more property-based conditions that filter the results of a query for findings.
    public struct FindingCriteria {
        /// A condition that specifies the property, operator, and one or more values to use to filter the results.
        public var criterion: [Swift.String: Macie2ClientTypes.CriterionAdditionalProperties]?

        public init(
            criterion: [Swift.String: Macie2ClientTypes.CriterionAdditionalProperties]? = nil
        )
        {
            self.criterion = criterion
        }
    }

}

public struct CreateFindingsFilterInput {
    /// The action to perform on findings that match the filter criteria (findingCriteria). Valid values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.
    /// This member is required.
    public var action: Macie2ClientTypes.FindingsFilterAction?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// A custom description of the filter. The description can contain as many as 512 characters. We strongly recommend that you avoid including any sensitive data in the description of a filter. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.
    public var description: Swift.String?
    /// The criteria to use to filter findings.
    /// This member is required.
    public var findingCriteria: Macie2ClientTypes.FindingCriteria?
    /// A custom name for the filter. The name must contain at least 3 characters and can contain as many as 64 characters. We strongly recommend that you avoid including any sensitive data in the name of a filter. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.
    /// This member is required.
    public var name: Swift.String?
    /// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
    public var position: Swift.Int?
    /// A map of key-value pairs that specifies the tags to associate with the filter. A findings filter can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    public var tags: [Swift.String: Swift.String]?

    public init(
        action: Macie2ClientTypes.FindingsFilterAction? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        findingCriteria: Macie2ClientTypes.FindingCriteria? = nil,
        name: Swift.String? = nil,
        position: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.action = action
        self.clientToken = clientToken
        self.description = description
        self.findingCriteria = findingCriteria
        self.name = name
        self.position = position
        self.tags = tags
    }
}

public struct CreateFindingsFilterOutput {
    /// The Amazon Resource Name (ARN) of the filter that was created.
    public var arn: Swift.String?
    /// The unique identifier for the filter that was created.
    public var id: Swift.String?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
    }
}

public struct CreateInvitationsInput {
    /// An array that lists Amazon Web Services account IDs, one for each account to send the invitation to.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// Specifies whether to send the invitation as an email message. If this value is false, Amazon Macie sends the invitation (as an email message) to the email address that you specified for the recipient's account when you associated the account with your account. The default value is false.
    public var disableEmailNotification: Swift.Bool?
    /// Custom text to include in the email message that contains the invitation. The text can contain as many as 80 alphanumeric characters.
    public var message: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        disableEmailNotification: Swift.Bool? = nil,
        message: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.disableEmailNotification = disableEmailNotification
        self.message = message
    }
}

public struct CreateInvitationsOutput {
    /// An array of objects, one for each account whose invitation hasn't been processed. Each object identifies the account and explains why the invitation hasn't been processed for the account.
    public var unprocessedAccounts: [Macie2ClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [Macie2ClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct CreateMemberInput {
    /// The details of the account to associate with the administrator account.
    /// This member is required.
    public var account: Macie2ClientTypes.AccountDetail?
    /// A map of key-value pairs that specifies the tags to associate with the account in Amazon Macie. An account can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    public var tags: [Swift.String: Swift.String]?

    public init(
        account: Macie2ClientTypes.AccountDetail? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.account = account
        self.tags = tags
    }
}

public struct CreateMemberOutput {
    /// The Amazon Resource Name (ARN) of the account that was associated with the administrator account.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct CreateSampleFindingsInput {
    /// An array of finding types, one for each type of sample finding to create. To create a sample of every type of finding that Amazon Macie supports, don't include this array in your request.
    public var findingTypes: [Macie2ClientTypes.FindingType]?

    public init(
        findingTypes: [Macie2ClientTypes.FindingType]? = nil
    )
    {
        self.findingTypes = findingTypes
    }
}

public struct CreateSampleFindingsOutput {

    public init() { }
}

public struct DeclineInvitationsInput {
    /// An array that lists Amazon Web Services account IDs, one for each account that sent an invitation to decline.
    /// This member is required.
    public var accountIds: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

public struct DeclineInvitationsOutput {
    /// An array of objects, one for each account whose invitation hasn't been declined. Each object identifies the account and explains why the request hasn't been processed for that account.
    public var unprocessedAccounts: [Macie2ClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [Macie2ClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct DeleteAllowListInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?
    /// Specifies whether to force deletion of the allow list, even if active classification jobs are configured to use the list. When you try to delete an allow list, Amazon Macie checks for classification jobs that use the list and have a status other than COMPLETE or CANCELLED. By default, Macie rejects your request if any jobs meet these criteria. To skip these checks and delete the list, set this value to true. To delete the list only if no active jobs are configured to use it, set this value to false.
    public var ignoreJobChecks: Swift.String?

    public init(
        id: Swift.String? = nil,
        ignoreJobChecks: Swift.String? = nil
    )
    {
        self.id = id
        self.ignoreJobChecks = ignoreJobChecks
    }
}

public struct DeleteAllowListOutput {

    public init() { }
}

public struct DeleteCustomDataIdentifierInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteCustomDataIdentifierOutput {

    public init() { }
}

public struct DeleteFindingsFilterInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteFindingsFilterOutput {

    public init() { }
}

public struct DeleteInvitationsInput {
    /// An array that lists Amazon Web Services account IDs, one for each account that sent an invitation to delete.
    /// This member is required.
    public var accountIds: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

public struct DeleteInvitationsOutput {
    /// An array of objects, one for each account whose invitation hasn't been deleted. Each object identifies the account and explains why the request hasn't been processed for that account.
    public var unprocessedAccounts: [Macie2ClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [Macie2ClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct DeleteMemberInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteMemberOutput {

    public init() { }
}

public struct DescribeBucketsInput {
    /// The criteria to use to filter the query results.
    public var criteria: [Swift.String: Macie2ClientTypes.BucketCriteriaAdditionalProperties]?
    /// The maximum number of items to include in each page of the response. The default value is 50.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The criteria to use to sort the query results.
    public var sortCriteria: Macie2ClientTypes.BucketSortCriteria?

    public init(
        criteria: [Swift.String: Macie2ClientTypes.BucketCriteriaAdditionalProperties]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: Macie2ClientTypes.BucketSortCriteria? = nil
    )
    {
        self.criteria = criteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

public struct DescribeBucketsOutput {
    /// An array of objects, one for each bucket that matches the filter criteria specified in the request.
    public var buckets: [Macie2ClientTypes.BucketMetadata]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        buckets: [Macie2ClientTypes.BucketMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.buckets = buckets
        self.nextToken = nextToken
    }
}

public struct DescribeClassificationJobInput {
    /// The unique identifier for the classification job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension Macie2ClientTypes {
    /// Provides processing statistics for a classification job.
    public struct Statistics {
        /// The approximate number of objects that the job has yet to process during its current run.
        public var approximateNumberOfObjectsToProcess: Swift.Double?
        /// The number of times that the job has run.
        public var numberOfRuns: Swift.Double?

        public init(
            approximateNumberOfObjectsToProcess: Swift.Double? = nil,
            numberOfRuns: Swift.Double? = nil
        )
        {
            self.approximateNumberOfObjectsToProcess = approximateNumberOfObjectsToProcess
            self.numberOfRuns = numberOfRuns
        }
    }

}

public struct DescribeClassificationJobOutput {
    /// An array of unique identifiers, one for each allow list that the job is configured to use when it analyzes data.
    public var allowListIds: [Swift.String]?
    /// The token that was provided to ensure the idempotency of the request to create the job.
    public var clientToken: Swift.String?
    /// The date and time, in UTC and extended ISO 8601 format, when the job was created.
    public var createdAt: Foundation.Date?
    /// An array of unique identifiers, one for each custom data identifier that the job is configured to use when it analyzes data. This value is null if the job is configured to use only managed data identifiers to analyze data.
    public var customDataIdentifierIds: [Swift.String]?
    /// The custom description of the job.
    public var description: Swift.String?
    /// For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.
    public var initialRun: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the job.
    public var jobArn: Swift.String?
    /// The unique identifier for the job.
    public var jobId: Swift.String?
    /// The current status of the job. Possible values are:
    ///
    /// * CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.
    ///
    /// * COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.
    ///
    /// * IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.
    ///
    /// * PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.
    ///
    /// * RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.
    ///
    /// * USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.
    public var jobStatus: Macie2ClientTypes.JobStatus?
    /// The schedule for running the job. Possible values are:
    ///
    /// * ONE_TIME - The job runs only once.
    ///
    /// * SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.
    public var jobType: Macie2ClientTypes.JobType?
    /// Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.
    public var lastRunErrorStatus: Macie2ClientTypes.LastRunErrorStatus?
    /// The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.
    public var lastRunTime: Foundation.Date?
    /// An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector).This value is null if the job's managed data identifier selection type is ALL, NONE, or RECOMMENDED.
    public var managedDataIdentifierIds: [Swift.String]?
    /// The selection type that determines which managed data identifiers the job uses when it analyzes data. Possible values are:
    ///
    /// * ALL - Use all managed data identifiers.
    ///
    /// * EXCLUDE - Use all managed data identifiers except the ones specified by the managedDataIdentifierIds property.
    ///
    /// * INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.
    ///
    /// * NONE - Don't use any managed data identifiers. Use only custom data identifiers (customDataIdentifierIds).
    ///
    /// * RECOMMENDED (default) - Use the recommended set of managed data identifiers.
    ///
    ///
    /// If this value is null, the job uses the recommended set of managed data identifiers. If the job is a recurring job and this value is ALL or EXCLUDE, each job run automatically uses new managed data identifiers that are released. If this value is null or RECOMMENDED for a recurring job, each job run uses all the managed data identifiers that are in the recommended set when the run starts. To learn about individual managed data identifiers or determine which ones are in the recommended set, see [Using managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/managed-data-identifiers.html) or [Recommended managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/discovery-jobs-mdis-recommended.html) in the Amazon Macie User Guide.
    public var managedDataIdentifierSelector: Macie2ClientTypes.ManagedDataIdentifierSelector?
    /// The custom name of the job.
    public var name: Swift.String?
    /// The S3 buckets that contain the objects to analyze, and the scope of that analysis.
    public var s3JobDefinition: Macie2ClientTypes.S3JobDefinition?
    /// The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.
    public var samplingPercentage: Swift.Int?
    /// The recurrence pattern for running the job. This value is null if the job is configured to run only once.
    public var scheduleFrequency: Macie2ClientTypes.JobScheduleFrequency?
    /// The number of times that the job has run and processing statistics for the job's current run.
    public var statistics: Macie2ClientTypes.Statistics?
    /// A map of key-value pairs that specifies which tags (keys and values) are associated with the job.
    public var tags: [Swift.String: Swift.String]?
    /// If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.
    public var userPausedDetails: Macie2ClientTypes.UserPausedDetails?

    public init(
        allowListIds: [Swift.String]? = nil,
        clientToken: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        customDataIdentifierIds: [Swift.String]? = nil,
        description: Swift.String? = nil,
        initialRun: Swift.Bool? = nil,
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: Macie2ClientTypes.JobStatus? = nil,
        jobType: Macie2ClientTypes.JobType? = nil,
        lastRunErrorStatus: Macie2ClientTypes.LastRunErrorStatus? = nil,
        lastRunTime: Foundation.Date? = nil,
        managedDataIdentifierIds: [Swift.String]? = nil,
        managedDataIdentifierSelector: Macie2ClientTypes.ManagedDataIdentifierSelector? = nil,
        name: Swift.String? = nil,
        s3JobDefinition: Macie2ClientTypes.S3JobDefinition? = nil,
        samplingPercentage: Swift.Int? = nil,
        scheduleFrequency: Macie2ClientTypes.JobScheduleFrequency? = nil,
        statistics: Macie2ClientTypes.Statistics? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        userPausedDetails: Macie2ClientTypes.UserPausedDetails? = nil
    )
    {
        self.allowListIds = allowListIds
        self.clientToken = clientToken
        self.createdAt = createdAt
        self.customDataIdentifierIds = customDataIdentifierIds
        self.description = description
        self.initialRun = initialRun
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.jobType = jobType
        self.lastRunErrorStatus = lastRunErrorStatus
        self.lastRunTime = lastRunTime
        self.managedDataIdentifierIds = managedDataIdentifierIds
        self.managedDataIdentifierSelector = managedDataIdentifierSelector
        self.name = name
        self.s3JobDefinition = s3JobDefinition
        self.samplingPercentage = samplingPercentage
        self.scheduleFrequency = scheduleFrequency
        self.statistics = statistics
        self.tags = tags
        self.userPausedDetails = userPausedDetails
    }
}

public struct DescribeOrganizationConfigurationInput {

    public init() { }
}

public struct DescribeOrganizationConfigurationOutput {
    /// Specifies whether Amazon Macie is enabled automatically for accounts that are added to the organization.
    public var autoEnable: Swift.Bool?
    /// Specifies whether the maximum number of Amazon Macie member accounts are part of the organization.
    public var maxAccountLimitReached: Swift.Bool?

    public init(
        autoEnable: Swift.Bool? = nil,
        maxAccountLimitReached: Swift.Bool? = nil
    )
    {
        self.autoEnable = autoEnable
        self.maxAccountLimitReached = maxAccountLimitReached
    }
}

public struct DisableMacieInput {

    public init() { }
}

public struct DisableMacieOutput {

    public init() { }
}

public struct DisableOrganizationAdminAccountInput {
    /// The Amazon Web Services account ID of the delegated Amazon Macie administrator account.
    /// This member is required.
    public var adminAccountId: Swift.String?

    public init(
        adminAccountId: Swift.String? = nil
    )
    {
        self.adminAccountId = adminAccountId
    }
}

public struct DisableOrganizationAdminAccountOutput {

    public init() { }
}

public struct DisassociateFromAdministratorAccountInput {

    public init() { }
}

public struct DisassociateFromAdministratorAccountOutput {

    public init() { }
}

public struct DisassociateFromMasterAccountInput {

    public init() { }
}

public struct DisassociateFromMasterAccountOutput {

    public init() { }
}

public struct DisassociateMemberInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DisassociateMemberOutput {

    public init() { }
}

extension Macie2ClientTypes {

    /// The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see [Monitoring and processing findings](https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html) in the Amazon Macie User Guide. Valid values are:
    public enum FindingPublishingFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fifteenMinutes
        case oneHour
        case sixHours
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingPublishingFrequency] {
            return [
                .fifteenMinutes,
                .oneHour,
                .sixHours
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fifteenMinutes: return "FIFTEEN_MINUTES"
            case .oneHour: return "ONE_HOUR"
            case .sixHours: return "SIX_HOURS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {

    /// The status of an Amazon Macie account. Valid values are:
    public enum MacieStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case paused
        case sdkUnknown(Swift.String)

        public static var allCases: [MacieStatus] {
            return [
                .enabled,
                .paused
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .paused: return "PAUSED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct EnableMacieInput {
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// Specifies how often to publish updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).
    public var findingPublishingFrequency: Macie2ClientTypes.FindingPublishingFrequency?
    /// Specifies the new status for the account. To enable Amazon Macie and start all Macie activities for the account, set this value to ENABLED.
    public var status: Macie2ClientTypes.MacieStatus?

    public init(
        clientToken: Swift.String? = nil,
        findingPublishingFrequency: Macie2ClientTypes.FindingPublishingFrequency? = nil,
        status: Macie2ClientTypes.MacieStatus? = nil
    )
    {
        self.clientToken = clientToken
        self.findingPublishingFrequency = findingPublishingFrequency
        self.status = status
    }
}

public struct EnableMacieOutput {

    public init() { }
}

public struct EnableOrganizationAdminAccountInput {
    /// The Amazon Web Services account ID for the account to designate as the delegated Amazon Macie administrator account for the organization.
    /// This member is required.
    public var adminAccountId: Swift.String?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?

    public init(
        adminAccountId: Swift.String? = nil,
        clientToken: Swift.String? = nil
    )
    {
        self.adminAccountId = adminAccountId
        self.clientToken = clientToken
    }
}

public struct EnableOrganizationAdminAccountOutput {

    public init() { }
}

extension Macie2ClientTypes {

    /// The grouping to sort the results by. Valid values are:
    public enum FindingStatisticsSortAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case count
        case groupkey
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingStatisticsSortAttributeName] {
            return [
                .count,
                .groupkey
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .count: return "count"
            case .groupkey: return "groupKey"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for sorting the results of a query that retrieves aggregated statistical data about findings.
    public struct FindingStatisticsSortCriteria {
        /// The grouping to sort the results by. Valid values are: count, sort the results by the number of findings in each group of results; and, groupKey, sort the results by the name of each group of results.
        public var attributeName: Macie2ClientTypes.FindingStatisticsSortAttributeName?
        /// The sort order to apply to the results, based on the value for the property specified by the attributeName property. Valid values are: ASC, sort the results in ascending order; and, DESC, sort the results in descending order.
        public var orderBy: Macie2ClientTypes.OrderBy?

        public init(
            attributeName: Macie2ClientTypes.FindingStatisticsSortAttributeName? = nil,
            orderBy: Macie2ClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

public struct GetAdministratorAccountInput {

    public init() { }
}

public struct GetAdministratorAccountOutput {
    /// The Amazon Web Services account ID for the administrator account. If the accounts are associated by an Amazon Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.
    public var administrator: Macie2ClientTypes.Invitation?

    public init(
        administrator: Macie2ClientTypes.Invitation? = nil
    )
    {
        self.administrator = administrator
    }
}

public struct GetAllowListInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetAllowListOutput {
    /// The Amazon Resource Name (ARN) of the allow list.
    public var arn: Swift.String?
    /// The date and time, in UTC and extended ISO 8601 format, when the allow list was created in Amazon Macie.
    public var createdAt: Foundation.Date?
    /// The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression (regex) that defines a text pattern to ignore.
    public var criteria: Macie2ClientTypes.AllowListCriteria?
    /// The custom description of the allow list.
    public var description: Swift.String?
    /// The unique identifier for the allow list.
    public var id: Swift.String?
    /// The custom name of the allow list.
    public var name: Swift.String?
    /// The current status of the allow list, which indicates whether Amazon Macie can access and use the list's criteria.
    public var status: Macie2ClientTypes.AllowListStatus?
    /// A map of key-value pairs that specifies which tags (keys and values) are associated with the allow list.
    public var tags: [Swift.String: Swift.String]?
    /// The date and time, in UTC and extended ISO 8601 format, when the allow list's settings were most recently changed in Amazon Macie.
    public var updatedAt: Foundation.Date?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        criteria: Macie2ClientTypes.AllowListCriteria? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        status: Macie2ClientTypes.AllowListStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.criteria = criteria
        self.description = description
        self.id = id
        self.name = name
        self.status = status
        self.tags = tags
        self.updatedAt = updatedAt
    }
}

public struct GetAutomatedDiscoveryConfigurationInput {

    public init() { }
}

public struct GetAutomatedDiscoveryConfigurationOutput {
    /// Specifies whether automated sensitive data discovery is enabled automatically for accounts in the organization. Possible values are: ALL, enable it for all existing accounts and new member accounts; NEW, enable it only for new member accounts; and, NONE, don't enable it for any accounts.
    public var autoEnableOrganizationMembers: Macie2ClientTypes.AutoEnableMode?
    /// The unique identifier for the classification scope that's used when performing automated sensitive data discovery. The classification scope specifies S3 buckets to exclude from analyses.
    public var classificationScopeId: Swift.String?
    /// The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently disabled. This value is null if automated sensitive data discovery is currently enabled.
    public var disabledAt: Foundation.Date?
    /// The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was initially enabled. This value is null if automated sensitive data discovery has never been enabled.
    public var firstEnabledAt: Foundation.Date?
    /// The date and time, in UTC and extended ISO 8601 format, when the configuration settings or status of automated sensitive data discovery was most recently changed.
    public var lastUpdatedAt: Foundation.Date?
    /// The unique identifier for the sensitivity inspection template that's used when performing automated sensitive data discovery. The template specifies which allow lists, custom data identifiers, and managed data identifiers to use when analyzing data.
    public var sensitivityInspectionTemplateId: Swift.String?
    /// The current status of automated sensitive data discovery for the organization or account. Possible values are: ENABLED, use the specified settings to perform automated sensitive data discovery activities; and, DISABLED, don't perform automated sensitive data discovery activities.
    public var status: Macie2ClientTypes.AutomatedDiscoveryStatus?

    public init(
        autoEnableOrganizationMembers: Macie2ClientTypes.AutoEnableMode? = nil,
        classificationScopeId: Swift.String? = nil,
        disabledAt: Foundation.Date? = nil,
        firstEnabledAt: Foundation.Date? = nil,
        lastUpdatedAt: Foundation.Date? = nil,
        sensitivityInspectionTemplateId: Swift.String? = nil,
        status: Macie2ClientTypes.AutomatedDiscoveryStatus? = nil
    )
    {
        self.autoEnableOrganizationMembers = autoEnableOrganizationMembers
        self.classificationScopeId = classificationScopeId
        self.disabledAt = disabledAt
        self.firstEnabledAt = firstEnabledAt
        self.lastUpdatedAt = lastUpdatedAt
        self.sensitivityInspectionTemplateId = sensitivityInspectionTemplateId
        self.status = status
    }
}

public struct GetBucketStatisticsInput {
    /// The unique identifier for the Amazon Web Services account.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

public struct GetBucketStatisticsOutput {
    /// The total number of buckets.
    public var bucketCount: Swift.Int?
    /// The total number of buckets that are publicly accessible due to a combination of permissions settings for each bucket.
    public var bucketCountByEffectivePermission: Macie2ClientTypes.BucketCountByEffectivePermission?
    /// The total number of buckets whose settings do or don't specify default server-side encryption behavior for objects that are added to the buckets.
    public var bucketCountByEncryptionType: Macie2ClientTypes.BucketCountByEncryptionType?
    /// The total number of buckets whose bucket policies do or don't require server-side encryption of objects when objects are added to the buckets.
    public var bucketCountByObjectEncryptionRequirement: Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads?
    /// The total number of buckets that are or aren't shared with other Amazon Web Services accounts, Amazon CloudFront origin access identities (OAIs), or CloudFront origin access controls (OACs).
    public var bucketCountBySharedAccessType: Macie2ClientTypes.BucketCountBySharedAccessType?
    /// The aggregated sensitive data discovery statistics for the buckets. If automated sensitive data discovery is currently disabled for your account, the value for each statistic is 0.
    public var bucketStatisticsBySensitivity: Macie2ClientTypes.BucketStatisticsBySensitivity?
    /// The total number of objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.
    public var classifiableObjectCount: Swift.Int?
    /// The total storage size, in bytes, of all the objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format. If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of all applicable objects in the buckets.
    public var classifiableSizeInBytes: Swift.Int?
    /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved bucket or object metadata from Amazon S3 for the buckets.
    public var lastUpdated: Foundation.Date?
    /// The total number of objects in the buckets.
    public var objectCount: Swift.Int?
    /// The total storage size, in bytes, of the buckets. If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each object in the buckets. This value doesn't reflect the storage size of all versions of the objects in the buckets.
    public var sizeInBytes: Swift.Int?
    /// The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the buckets. If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of the applicable objects in the buckets.
    public var sizeInBytesCompressed: Swift.Int?
    /// The total number of objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.
    public var unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics?
    /// The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.
    public var unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics?

    public init(
        bucketCount: Swift.Int? = nil,
        bucketCountByEffectivePermission: Macie2ClientTypes.BucketCountByEffectivePermission? = nil,
        bucketCountByEncryptionType: Macie2ClientTypes.BucketCountByEncryptionType? = nil,
        bucketCountByObjectEncryptionRequirement: Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads? = nil,
        bucketCountBySharedAccessType: Macie2ClientTypes.BucketCountBySharedAccessType? = nil,
        bucketStatisticsBySensitivity: Macie2ClientTypes.BucketStatisticsBySensitivity? = nil,
        classifiableObjectCount: Swift.Int? = nil,
        classifiableSizeInBytes: Swift.Int? = nil,
        lastUpdated: Foundation.Date? = nil,
        objectCount: Swift.Int? = nil,
        sizeInBytes: Swift.Int? = nil,
        sizeInBytesCompressed: Swift.Int? = nil,
        unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics? = nil,
        unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics? = nil
    )
    {
        self.bucketCount = bucketCount
        self.bucketCountByEffectivePermission = bucketCountByEffectivePermission
        self.bucketCountByEncryptionType = bucketCountByEncryptionType
        self.bucketCountByObjectEncryptionRequirement = bucketCountByObjectEncryptionRequirement
        self.bucketCountBySharedAccessType = bucketCountBySharedAccessType
        self.bucketStatisticsBySensitivity = bucketStatisticsBySensitivity
        self.classifiableObjectCount = classifiableObjectCount
        self.classifiableSizeInBytes = classifiableSizeInBytes
        self.lastUpdated = lastUpdated
        self.objectCount = objectCount
        self.sizeInBytes = sizeInBytes
        self.sizeInBytesCompressed = sizeInBytesCompressed
        self.unclassifiableObjectCount = unclassifiableObjectCount
        self.unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytes
    }
}

public struct GetClassificationExportConfigurationInput {

    public init() { }
}

public struct GetClassificationExportConfigurationOutput {
    /// The location where data classification results are stored, and the encryption settings that are used when storing results in that location.
    public var configuration: Macie2ClientTypes.ClassificationExportConfiguration?

    public init(
        configuration: Macie2ClientTypes.ClassificationExportConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct GetClassificationScopeInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension Macie2ClientTypes {
    /// Specifies the names of the S3 buckets that are excluded from automated sensitive data discovery.
    public struct S3ClassificationScopeExclusion {
        /// An array of strings, one for each S3 bucket that is excluded. Each string is the full name of an excluded bucket.
        /// This member is required.
        public var bucketNames: [Swift.String]?

        public init(
            bucketNames: [Swift.String]? = nil
        )
        {
            self.bucketNames = bucketNames
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the S3 buckets that are excluded from automated sensitive data discovery for an Amazon Macie account.
    public struct S3ClassificationScope {
        /// The S3 buckets that are excluded.
        /// This member is required.
        public var excludes: Macie2ClientTypes.S3ClassificationScopeExclusion?

        public init(
            excludes: Macie2ClientTypes.S3ClassificationScopeExclusion? = nil
        )
        {
            self.excludes = excludes
        }
    }

}

public struct GetClassificationScopeOutput {
    /// The unique identifier for the classification scope.
    public var id: Swift.String?
    /// The name of the classification scope: automated-sensitive-data-discovery.
    public var name: Swift.String?
    /// The S3 buckets that are excluded from automated sensitive data discovery.
    public var s3: Macie2ClientTypes.S3ClassificationScope?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        s3: Macie2ClientTypes.S3ClassificationScope? = nil
    )
    {
        self.id = id
        self.name = name
        self.s3 = s3
    }
}

public struct GetCustomDataIdentifierInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetCustomDataIdentifierOutput {
    /// The Amazon Resource Name (ARN) of the custom data identifier.
    public var arn: Swift.String?
    /// The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.
    public var createdAt: Foundation.Date?
    /// Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.
    public var deleted: Swift.Bool?
    /// The custom description of the custom data identifier.
    public var description: Swift.String?
    /// The unique identifier for the custom data identifier.
    public var id: Swift.String?
    /// An array that lists specific character sequences (ignore words) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. Ignore words are case sensitive.
    public var ignoreWords: [Swift.String]?
    /// An array that lists specific character sequences (keywords), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. Keywords aren't case sensitive.
    public var keywords: [Swift.String]?
    /// The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. Otherwise, Macie excludes the result.
    public var maximumMatchDistance: Swift.Int?
    /// The custom name of the custom data identifier.
    public var name: Swift.String?
    /// The regular expression (regex) that defines the pattern to match.
    public var regex: Swift.String?
    /// Specifies the severity that's assigned to findings that the custom data identifier produces, based on the number of occurrences of text that match the custom data identifier's detection criteria. By default, Amazon Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie assigns the MEDIUM severity to those findings.
    public var severityLevels: [Macie2ClientTypes.SeverityLevel]?
    /// A map of key-value pairs that identifies the tags (keys and values) that are associated with the custom data identifier.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        deleted: Swift.Bool? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        ignoreWords: [Swift.String]? = nil,
        keywords: [Swift.String]? = nil,
        maximumMatchDistance: Swift.Int? = nil,
        name: Swift.String? = nil,
        regex: Swift.String? = nil,
        severityLevels: [Macie2ClientTypes.SeverityLevel]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.deleted = deleted
        self.description = description
        self.id = id
        self.ignoreWords = ignoreWords
        self.keywords = keywords
        self.maximumMatchDistance = maximumMatchDistance
        self.name = name
        self.regex = regex
        self.severityLevels = severityLevels
        self.tags = tags
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for sorting the results of a request for findings.
    public struct SortCriteria {
        /// The name of the property to sort the results by. Valid values are: count, createdAt, policyDetails.action.apiCallDetails.firstSeen, policyDetails.action.apiCallDetails.lastSeen, resourcesAffected, severity.score, type, and updatedAt.
        public var attributeName: Swift.String?
        /// The sort order to apply to the results, based on the value for the property specified by the attributeName property. Valid values are: ASC, sort the results in ascending order; and, DESC, sort the results in descending order.
        public var orderBy: Macie2ClientTypes.OrderBy?

        public init(
            attributeName: Swift.String? = nil,
            orderBy: Macie2ClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

public struct GetFindingsInput {
    /// An array of strings that lists the unique identifiers for the findings to retrieve. You can specify as many as 50 unique identifiers in this array.
    /// This member is required.
    public var findingIds: [Swift.String]?
    /// The criteria for sorting the results of the request.
    public var sortCriteria: Macie2ClientTypes.SortCriteria?

    public init(
        findingIds: [Swift.String]? = nil,
        sortCriteria: Macie2ClientTypes.SortCriteria? = nil
    )
    {
        self.findingIds = findingIds
        self.sortCriteria = sortCriteria
    }
}

public struct GetFindingsOutput {
    /// An array of objects, one for each finding that matches the criteria specified in the request.
    public var findings: [Macie2ClientTypes.Finding]?

    public init(
        findings: [Macie2ClientTypes.Finding]? = nil
    )
    {
        self.findings = findings
    }
}

public struct GetFindingsFilterInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetFindingsFilterOutput {
    /// The action that's performed on findings that match the filter criteria (findingCriteria). Possible values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.
    public var action: Macie2ClientTypes.FindingsFilterAction?
    /// The Amazon Resource Name (ARN) of the filter.
    public var arn: Swift.String?
    /// The custom description of the filter.
    public var description: Swift.String?
    /// The criteria that's used to filter findings.
    public var findingCriteria: Macie2ClientTypes.FindingCriteria?
    /// The unique identifier for the filter.
    public var id: Swift.String?
    /// The custom name of the filter.
    public var name: Swift.String?
    /// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
    public var position: Swift.Int?
    /// A map of key-value pairs that specifies which tags (keys and values) are associated with the filter.
    public var tags: [Swift.String: Swift.String]?

    public init(
        action: Macie2ClientTypes.FindingsFilterAction? = nil,
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        findingCriteria: Macie2ClientTypes.FindingCriteria? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        position: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.action = action
        self.arn = arn
        self.description = description
        self.findingCriteria = findingCriteria
        self.id = id
        self.name = name
        self.position = position
        self.tags = tags
    }
}

public struct GetFindingsPublicationConfigurationInput {

    public init() { }
}

extension Macie2ClientTypes {
    /// Specifies configuration settings that determine which findings are published to Security Hub automatically. For information about how Macie publishes findings to Security Hub, see [Amazon Macie integration with Security Hub](https://docs.aws.amazon.com/macie/latest/user/securityhub-integration.html) in the Amazon Macie User Guide.
    public struct SecurityHubConfiguration {
        /// Specifies whether to publish sensitive data findings to Security Hub. If you set this value to true, Amazon Macie automatically publishes all sensitive data findings that weren't suppressed by a findings filter. The default value is false.
        /// This member is required.
        public var publishClassificationFindings: Swift.Bool?
        /// Specifies whether to publish policy findings to Security Hub. If you set this value to true, Amazon Macie automatically publishes all new and updated policy findings that weren't suppressed by a findings filter. The default value is true.
        /// This member is required.
        public var publishPolicyFindings: Swift.Bool?

        public init(
            publishClassificationFindings: Swift.Bool? = nil,
            publishPolicyFindings: Swift.Bool? = nil
        )
        {
            self.publishClassificationFindings = publishClassificationFindings
            self.publishPolicyFindings = publishPolicyFindings
        }
    }

}

public struct GetFindingsPublicationConfigurationOutput {
    /// The configuration settings that determine which findings are published to Security Hub.
    public var securityHubConfiguration: Macie2ClientTypes.SecurityHubConfiguration?

    public init(
        securityHubConfiguration: Macie2ClientTypes.SecurityHubConfiguration? = nil
    )
    {
        self.securityHubConfiguration = securityHubConfiguration
    }
}

extension Macie2ClientTypes {

    public enum GroupBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case classificationdetailsJobid
        case resourcesaffectedS3bucketName
        case severityDescription
        case type
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupBy] {
            return [
                .classificationdetailsJobid,
                .resourcesaffectedS3bucketName,
                .severityDescription,
                .type
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .classificationdetailsJobid: return "classificationDetails.jobId"
            case .resourcesaffectedS3bucketName: return "resourcesAffected.s3Bucket.name"
            case .severityDescription: return "severity.description"
            case .type: return "type"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetFindingStatisticsInput {
    /// The criteria to use to filter the query results.
    public var findingCriteria: Macie2ClientTypes.FindingCriteria?
    /// The finding property to use to group the query results. Valid values are:
    ///
    /// * classificationDetails.jobId - The unique identifier for the classification job that produced the finding.
    ///
    /// * resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.
    ///
    /// * severity.description - The severity level of the finding, such as High or Medium.
    ///
    /// * type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.
    /// This member is required.
    public var groupBy: Macie2ClientTypes.GroupBy?
    /// The maximum number of items to include in each page of the response.
    public var size: Swift.Int?
    /// The criteria to use to sort the query results.
    public var sortCriteria: Macie2ClientTypes.FindingStatisticsSortCriteria?

    public init(
        findingCriteria: Macie2ClientTypes.FindingCriteria? = nil,
        groupBy: Macie2ClientTypes.GroupBy? = nil,
        size: Swift.Int? = nil,
        sortCriteria: Macie2ClientTypes.FindingStatisticsSortCriteria? = nil
    )
    {
        self.findingCriteria = findingCriteria
        self.groupBy = groupBy
        self.size = size
        self.sortCriteria = sortCriteria
    }
}

public struct GetFindingStatisticsOutput {
    /// An array of objects, one for each group of findings that matches the filter criteria specified in the request.
    public var countsByGroup: [Macie2ClientTypes.GroupCount]?

    public init(
        countsByGroup: [Macie2ClientTypes.GroupCount]? = nil
    )
    {
        self.countsByGroup = countsByGroup
    }
}

public struct GetInvitationsCountInput {

    public init() { }
}

public struct GetInvitationsCountOutput {
    /// The total number of invitations that were received by the account, not including the currently accepted invitation.
    public var invitationsCount: Swift.Int?

    public init(
        invitationsCount: Swift.Int? = nil
    )
    {
        self.invitationsCount = invitationsCount
    }
}

public struct GetMacieSessionInput {

    public init() { }
}

public struct GetMacieSessionOutput {
    /// The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie account was created.
    public var createdAt: Foundation.Date?
    /// The frequency with which Amazon Macie publishes updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).
    public var findingPublishingFrequency: Macie2ClientTypes.FindingPublishingFrequency?
    /// The Amazon Resource Name (ARN) of the service-linked role that allows Amazon Macie to monitor and analyze data in Amazon Web Services resources for the account.
    public var serviceRole: Swift.String?
    /// The current status of the Amazon Macie account. Possible values are: PAUSED, the account is enabled but all Macie activities are suspended (paused) for the account; and, ENABLED, the account is enabled and all Macie activities are enabled for the account.
    public var status: Macie2ClientTypes.MacieStatus?
    /// The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status or configuration settings for the Amazon Macie account.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        findingPublishingFrequency: Macie2ClientTypes.FindingPublishingFrequency? = nil,
        serviceRole: Swift.String? = nil,
        status: Macie2ClientTypes.MacieStatus? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.findingPublishingFrequency = findingPublishingFrequency
        self.serviceRole = serviceRole
        self.status = status
        self.updatedAt = updatedAt
    }
}

public struct GetMasterAccountInput {

    public init() { }
}

public struct GetMasterAccountOutput {
    /// (Deprecated) The Amazon Web Services account ID for the administrator account. If the accounts are associated by a Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.
    public var master: Macie2ClientTypes.Invitation?

    public init(
        master: Macie2ClientTypes.Invitation? = nil
    )
    {
        self.master = master
    }
}

public struct GetMemberInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetMemberOutput {
    /// The Amazon Web Services account ID for the account.
    public var accountId: Swift.String?
    /// The Amazon Web Services account ID for the administrator account.
    public var administratorAccountId: Swift.String?
    /// The Amazon Resource Name (ARN) of the account.
    public var arn: Swift.String?
    /// The email address for the account. This value is null if the account is associated with the administrator account through Organizations.
    public var email: Swift.String?
    /// The date and time, in UTC and extended ISO 8601 format, when an Amazon Macie membership invitation was last sent to the account. This value is null if a Macie membership invitation hasn't been sent to the account.
    public var invitedAt: Foundation.Date?
    /// (Deprecated) The Amazon Web Services account ID for the administrator account. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.
    public var masterAccountId: Swift.String?
    /// The current status of the relationship between the account and the administrator account.
    public var relationshipStatus: Macie2ClientTypes.RelationshipStatus?
    /// A map of key-value pairs that specifies which tags (keys and values) are associated with the account in Amazon Macie.
    public var tags: [Swift.String: Swift.String]?
    /// The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the relationship between the account and the administrator account.
    public var updatedAt: Foundation.Date?

    public init(
        accountId: Swift.String? = nil,
        administratorAccountId: Swift.String? = nil,
        arn: Swift.String? = nil,
        email: Swift.String? = nil,
        invitedAt: Foundation.Date? = nil,
        masterAccountId: Swift.String? = nil,
        relationshipStatus: Macie2ClientTypes.RelationshipStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.accountId = accountId
        self.administratorAccountId = administratorAccountId
        self.arn = arn
        self.email = email
        self.invitedAt = invitedAt
        self.masterAccountId = masterAccountId
        self.relationshipStatus = relationshipStatus
        self.tags = tags
        self.updatedAt = updatedAt
    }
}

public struct GetResourceProfileInput {
    /// The Amazon Resource Name (ARN) of the S3 bucket that the request applies to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension Macie2ClientTypes {
    /// Provides statistical data for sensitive data discovery metrics that apply to an S3 bucket that Amazon Macie monitors and analyzes for an account, if automated sensitive data discovery has been enabled for the account. The data captures the results of automated sensitive data discovery activities that Macie has performed for the bucket.
    public struct ResourceStatistics {
        /// The total amount of data, in bytes, that Amazon Macie has analyzed in the bucket.
        public var totalBytesClassified: Swift.Int?
        /// The total number of occurrences of sensitive data that Amazon Macie has found in the bucket's objects. This includes occurrences that are currently suppressed by the sensitivity scoring settings for the bucket (totalDetectionsSuppressed).
        public var totalDetections: Swift.Int?
        /// The total number of occurrences of sensitive data that are currently suppressed by the sensitivity scoring settings for the bucket. These represent occurrences of sensitive data that Amazon Macie found in the bucket's objects, but the occurrences were manually suppressed. By default, suppressed occurrences are excluded from the bucket's sensitivity score.
        public var totalDetectionsSuppressed: Swift.Int?
        /// The total number of objects that Amazon Macie has analyzed in the bucket.
        public var totalItemsClassified: Swift.Int?
        /// The total number of the bucket's objects that Amazon Macie has found sensitive data in.
        public var totalItemsSensitive: Swift.Int?
        /// The total number of objects that Amazon Macie wasn't able to analyze in the bucket due to an object-level issue or error. For example, an object is a malformed file. This value includes objects that Macie wasn't able to analyze for reasons reported by other statistics in the ResourceStatistics object.
        public var totalItemsSkipped: Swift.Int?
        /// The total number of objects that Amazon Macie wasn't able to analyze in the bucket because the objects are encrypted with a key that Macie can't access. The objects use server-side encryption with customer-provided keys (SSE-C).
        public var totalItemsSkippedInvalidEncryption: Swift.Int?
        /// The total number of objects that Amazon Macie wasn't able to analyze in the bucket because the objects are encrypted with KMS keys that were disabled, are scheduled for deletion, or were deleted.
        public var totalItemsSkippedInvalidKms: Swift.Int?
        /// The total number of objects that Amazon Macie wasn't able to analyze in the bucket due to the permissions settings for the objects or the permissions settings for the keys that were used to encrypt the objects.
        public var totalItemsSkippedPermissionDenied: Swift.Int?

        public init(
            totalBytesClassified: Swift.Int? = nil,
            totalDetections: Swift.Int? = nil,
            totalDetectionsSuppressed: Swift.Int? = nil,
            totalItemsClassified: Swift.Int? = nil,
            totalItemsSensitive: Swift.Int? = nil,
            totalItemsSkipped: Swift.Int? = nil,
            totalItemsSkippedInvalidEncryption: Swift.Int? = nil,
            totalItemsSkippedInvalidKms: Swift.Int? = nil,
            totalItemsSkippedPermissionDenied: Swift.Int? = nil
        )
        {
            self.totalBytesClassified = totalBytesClassified
            self.totalDetections = totalDetections
            self.totalDetectionsSuppressed = totalDetectionsSuppressed
            self.totalItemsClassified = totalItemsClassified
            self.totalItemsSensitive = totalItemsSensitive
            self.totalItemsSkipped = totalItemsSkipped
            self.totalItemsSkippedInvalidEncryption = totalItemsSkippedInvalidEncryption
            self.totalItemsSkippedInvalidKms = totalItemsSkippedInvalidKms
            self.totalItemsSkippedPermissionDenied = totalItemsSkippedPermissionDenied
        }
    }

}

public struct GetResourceProfileOutput {
    /// The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently recalculated sensitive data discovery statistics and details for the bucket. If the bucket's sensitivity score is calculated automatically, this includes the score.
    public var profileUpdatedAt: Foundation.Date?
    /// The current sensitivity score for the bucket, ranging from -1 (classification error) to 100 (sensitive). By default, this score is calculated automatically based on the amount of data that Amazon Macie has analyzed in the bucket and the amount of sensitive data that Macie has found in the bucket.
    public var sensitivityScore: Swift.Int?
    /// Specifies whether the bucket's current sensitivity score was set manually. If this value is true, the score was manually changed to 100. If this value is false, the score was calculated automatically by Amazon Macie.
    public var sensitivityScoreOverridden: Swift.Bool?
    /// The sensitive data discovery statistics for the bucket. The statistics capture the results of automated sensitive data discovery activities that Amazon Macie has performed for the bucket.
    public var statistics: Macie2ClientTypes.ResourceStatistics?

    public init(
        profileUpdatedAt: Foundation.Date? = nil,
        sensitivityScore: Swift.Int? = nil,
        sensitivityScoreOverridden: Swift.Bool? = nil,
        statistics: Macie2ClientTypes.ResourceStatistics? = nil
    )
    {
        self.profileUpdatedAt = profileUpdatedAt
        self.sensitivityScore = sensitivityScore
        self.sensitivityScoreOverridden = sensitivityScoreOverridden
        self.statistics = statistics
    }
}

public struct GetRevealConfigurationInput {

    public init() { }
}

extension Macie2ClientTypes {

    /// The status of the configuration for retrieving occurrences of sensitive data reported by findings. Valid values are:
    public enum RevealStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RevealStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies the status of the Amazon Macie configuration for retrieving occurrences of sensitive data reported by findings, and the Key Management Service (KMS) key to use to encrypt sensitive data that's retrieved. When you enable the configuration for the first time, your request must specify an KMS key. Otherwise, an error occurs.
    public struct RevealConfiguration {
        /// The Amazon Resource Name (ARN), ID, or alias of the KMS key to use to encrypt sensitive data that's retrieved. The key must be an existing, customer managed, symmetric encryption key that's enabled in the same Amazon Web Services Region as the Amazon Macie account. If this value specifies an alias, it must include the following prefix: alias/. If this value specifies a key that's owned by another Amazon Web Services account, it must specify the ARN of the key or the ARN of the key's alias.
        public var kmsKeyId: Swift.String?
        /// The status of the configuration for the Amazon Macie account. In a response, possible values are: ENABLED, the configuration is currently enabled for the account; and, DISABLED, the configuration is currently disabled for the account. In a request, valid values are: ENABLED, enable the configuration for the account; and, DISABLED, disable the configuration for the account. If you disable the configuration, you also permanently delete current settings that specify how to access affected S3 objects. If your current access method is ASSUME_ROLE, Macie also deletes the external ID and role name currently specified for the configuration. These settings can't be recovered after they're deleted.
        /// This member is required.
        public var status: Macie2ClientTypes.RevealStatus?

        public init(
            kmsKeyId: Swift.String? = nil,
            status: Macie2ClientTypes.RevealStatus? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.status = status
        }
    }

}

extension Macie2ClientTypes {

    /// The access method to use when retrieving occurrences of sensitive data reported by findings. Valid values are:
    public enum RetrievalMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case assumeRole
        case callerCredentials
        case sdkUnknown(Swift.String)

        public static var allCases: [RetrievalMode] {
            return [
                .assumeRole,
                .callerCredentials
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .assumeRole: return "ASSUME_ROLE"
            case .callerCredentials: return "CALLER_CREDENTIALS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Provides information about the access method and settings that are used to retrieve occurrences of sensitive data reported by findings.
    public struct RetrievalConfiguration {
        /// The external ID to specify in the trust policy for the IAM role to assume when retrieving sensitive data from affected S3 objects (roleName). This value is null if the value for retrievalMode is CALLER_CREDENTIALS. This ID is a unique alphanumeric string that Amazon Macie generates automatically after you configure it to assume an IAM role. For a Macie administrator to retrieve sensitive data from an affected S3 object for a member account, the trust policy for the role in the member account must include an sts:ExternalId condition that requires this ID.
        public var externalId: Swift.String?
        /// The access method that's used to retrieve sensitive data from affected S3 objects. Valid values are: ASSUME_ROLE, assume an IAM role that is in the affected Amazon Web Services account and delegates access to Amazon Macie (roleName); and, CALLER_CREDENTIALS, use the credentials of the IAM user who requests the sensitive data.
        /// This member is required.
        public var retrievalMode: Macie2ClientTypes.RetrievalMode?
        /// The name of the IAM role that is in the affected Amazon Web Services account and Amazon Macie is allowed to assume when retrieving sensitive data from affected S3 objects for the account. This value is null if the value for retrievalMode is CALLER_CREDENTIALS.
        public var roleName: Swift.String?

        public init(
            externalId: Swift.String? = nil,
            retrievalMode: Macie2ClientTypes.RetrievalMode? = nil,
            roleName: Swift.String? = nil
        )
        {
            self.externalId = externalId
            self.retrievalMode = retrievalMode
            self.roleName = roleName
        }
    }

}

public struct GetRevealConfigurationOutput {
    /// The KMS key that's used to encrypt the sensitive data, and the status of the configuration for the Amazon Macie account.
    public var configuration: Macie2ClientTypes.RevealConfiguration?
    /// The access method and settings that are used to retrieve the sensitive data.
    public var retrievalConfiguration: Macie2ClientTypes.RetrievalConfiguration?

    public init(
        configuration: Macie2ClientTypes.RevealConfiguration? = nil,
        retrievalConfiguration: Macie2ClientTypes.RetrievalConfiguration? = nil
    )
    {
        self.configuration = configuration
        self.retrievalConfiguration = retrievalConfiguration
    }
}

/// Provides information about an error that occurred due to an unprocessable entity.
public struct UnprocessableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The type of error that occurred and prevented Amazon Macie from retrieving occurrences of sensitive data reported by the finding. Possible values are:
        ///
        /// * ACCOUNT_NOT_IN_ORGANIZATION - The affected account isn't currently part of your organization. Or the account is part of your organization but Macie isn't currently enabled for the account. You're not allowed to access the affected S3 object by using Macie.
        ///
        /// * INVALID_CLASSIFICATION_RESULT - There isn't a corresponding sensitive data discovery result for the finding. Or the corresponding sensitive data discovery result isn't available in the current Amazon Web Services Region, is malformed or corrupted, or uses an unsupported storage format. Macie can't verify the location of the sensitive data to retrieve.
        ///
        /// * INVALID_RESULT_SIGNATURE - The corresponding sensitive data discovery result is stored in an S3 object that wasn't signed by Macie. Macie can't verify the integrity and authenticity of the sensitive data discovery result. Therefore, Macie can't verify the location of the sensitive data to retrieve.
        ///
        /// * MEMBER_ROLE_TOO_PERMISSIVE - The trust or permissions policy for the IAM role in the affected member account doesn't meet Macie requirements for restricting access to the role. Or the role's trust policy doesn't specify the correct external ID for your organization. Macie can't assume the role to retrieve the sensitive data.
        ///
        /// * MISSING_GET_MEMBER_PERMISSION - You're not allowed to retrieve information about the association between your account and the affected account. Macie can't determine whether you’re allowed to access the affected S3 object as the delegated Macie administrator for the affected account.
        ///
        /// * OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data from this type of file.
        ///
        /// * OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object was renamed, moved, deleted, or changed after Macie created the finding. Or the object is encrypted with an KMS key that's currently disabled.
        ///
        /// * RESULT_NOT_SIGNED - The corresponding sensitive data discovery result is stored in an S3 object that hasn't been signed. Macie can't verify the integrity and authenticity of the sensitive data discovery result. Therefore, Macie can't verify the location of the sensitive data to retrieve.
        ///
        /// * ROLE_TOO_PERMISSIVE - Your account is configured to retrieve occurrences of sensitive data by using an IAM role whose trust or permissions policy doesn't meet Macie requirements for restricting access to the role. Macie can’t assume the role to retrieve the sensitive data.
        ///
        /// * UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.
        ///
        /// * UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnprocessableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetSensitiveDataOccurrencesInput {
    /// The unique identifier for the finding.
    /// This member is required.
    public var findingId: Swift.String?

    public init(
        findingId: Swift.String? = nil
    )
    {
        self.findingId = findingId
    }
}

extension Macie2ClientTypes {

    /// The status of a request to retrieve occurrences of sensitive data reported by a finding. Possible values are:
    public enum RevealRequestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case processing
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RevealRequestStatus] {
            return [
                .error,
                .processing,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .processing: return "PROCESSING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetSensitiveDataOccurrencesOutput {
    /// If an error occurred when Amazon Macie attempted to retrieve occurrences of sensitive data reported by the finding, a description of the error that occurred. This value is null if the status (status) of the request is PROCESSING or SUCCESS.
    public var error: Swift.String?
    /// A map that specifies 1-100 types of sensitive data reported by the finding and, for each type, 1-10 occurrences of sensitive data.
    public var sensitiveDataOccurrences: [Swift.String: [Macie2ClientTypes.DetectedDataDetails]]?
    /// The status of the request to retrieve occurrences of sensitive data reported by the finding. Possible values are:
    ///
    /// * ERROR - An error occurred when Amazon Macie attempted to locate, retrieve, or encrypt the sensitive data. The error value indicates the nature of the error that occurred.
    ///
    /// * PROCESSING - Macie is processing the request.
    ///
    /// * SUCCESS - Macie successfully located, retrieved, and encrypted the sensitive data.
    public var status: Macie2ClientTypes.RevealRequestStatus?

    public init(
        error: Swift.String? = nil,
        sensitiveDataOccurrences: [Swift.String: [Macie2ClientTypes.DetectedDataDetails]]? = nil,
        status: Macie2ClientTypes.RevealRequestStatus? = nil
    )
    {
        self.error = error
        self.sensitiveDataOccurrences = sensitiveDataOccurrences
        self.status = status
    }
}

public struct GetSensitiveDataOccurrencesAvailabilityInput {
    /// The unique identifier for the finding.
    /// This member is required.
    public var findingId: Swift.String?

    public init(
        findingId: Swift.String? = nil
    )
    {
        self.findingId = findingId
    }
}

public struct GetSensitiveDataOccurrencesAvailabilityOutput {
    /// Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.
    public var code: Macie2ClientTypes.AvailabilityCode?
    /// Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:
    ///
    /// * ACCOUNT_NOT_IN_ORGANIZATION - The affected account isn't currently part of your organization. Or the account is part of your organization but Macie isn't currently enabled for the account. You're not allowed to access the affected S3 object by using Macie.
    ///
    /// * INVALID_CLASSIFICATION_RESULT - There isn't a corresponding sensitive data discovery result for the finding. Or the corresponding sensitive data discovery result isn't available in the current Amazon Web Services Region, is malformed or corrupted, or uses an unsupported storage format. Macie can't verify the location of the sensitive data to retrieve.
    ///
    /// * INVALID_RESULT_SIGNATURE - The corresponding sensitive data discovery result is stored in an S3 object that wasn't signed by Macie. Macie can't verify the integrity and authenticity of the sensitive data discovery result. Therefore, Macie can't verify the location of the sensitive data to retrieve.
    ///
    /// * MEMBER_ROLE_TOO_PERMISSIVE - The trust or permissions policy for the IAM role in the affected member account doesn't meet Macie requirements for restricting access to the role. Or the role's trust policy doesn't specify the correct external ID for your organization. Macie can't assume the role to retrieve the sensitive data.
    ///
    /// * MISSING_GET_MEMBER_PERMISSION - You're not allowed to retrieve information about the association between your account and the affected account. Macie can't determine whether you’re allowed to access the affected S3 object as the delegated Macie administrator for the affected account.
    ///
    /// * OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data from this type of file.
    ///
    /// * OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object was renamed, moved, deleted, or changed after Macie created the finding. Or the object is encrypted with an KMS key that's currently disabled.
    ///
    /// * RESULT_NOT_SIGNED - The corresponding sensitive data discovery result is stored in an S3 object that hasn't been signed. Macie can't verify the integrity and authenticity of the sensitive data discovery result. Therefore, Macie can't verify the location of the sensitive data to retrieve.
    ///
    /// * ROLE_TOO_PERMISSIVE - Your account is configured to retrieve occurrences of sensitive data by using an IAM role whose trust or permissions policy doesn't meet Macie requirements for restricting access to the role. Macie can’t assume the role to retrieve the sensitive data.
    ///
    /// * UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.
    ///
    /// * UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.
    ///
    ///
    /// This value is null if sensitive data can be retrieved for the finding.
    public var reasons: [Macie2ClientTypes.UnavailabilityReasonCode]?

    public init(
        code: Macie2ClientTypes.AvailabilityCode? = nil,
        reasons: [Macie2ClientTypes.UnavailabilityReasonCode]? = nil
    )
    {
        self.code = code
        self.reasons = reasons
    }
}

public struct GetSensitivityInspectionTemplateInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension Macie2ClientTypes {
    /// Specifies managed data identifiers to exclude (not use) when performing automated sensitive data discovery. For information about the managed data identifiers that Amazon Macie currently provides, see [Using managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/managed-data-identifiers.html) in the Amazon Macie User Guide.
    public struct SensitivityInspectionTemplateExcludes {
        /// An array of unique identifiers, one for each managed data identifier to exclude. To retrieve a list of valid values, use the ListManagedDataIdentifiers operation.
        public var managedDataIdentifierIds: [Swift.String]?

        public init(
            managedDataIdentifierIds: [Swift.String]? = nil
        )
        {
            self.managedDataIdentifierIds = managedDataIdentifierIds
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies the allow lists, custom data identifiers, and managed data identifiers to include (use) when performing automated sensitive data discovery. The configuration must specify at least one custom data identifier or managed data identifier. For information about the managed data identifiers that Amazon Macie currently provides, see [Using managed data identifiers](https://docs.aws.amazon.com/macie/latest/user/managed-data-identifiers.html) in the Amazon Macie User Guide.
    public struct SensitivityInspectionTemplateIncludes {
        /// An array of unique identifiers, one for each allow list to include.
        public var allowListIds: [Swift.String]?
        /// An array of unique identifiers, one for each custom data identifier to include.
        public var customDataIdentifierIds: [Swift.String]?
        /// An array of unique identifiers, one for each managed data identifier to include. Amazon Macie uses these managed data identifiers in addition to managed data identifiers that are subsequently released and recommended for automated sensitive data discovery. To retrieve a list of valid values for the managed data identifiers that are currently available, use the ListManagedDataIdentifiers operation.
        public var managedDataIdentifierIds: [Swift.String]?

        public init(
            allowListIds: [Swift.String]? = nil,
            customDataIdentifierIds: [Swift.String]? = nil,
            managedDataIdentifierIds: [Swift.String]? = nil
        )
        {
            self.allowListIds = allowListIds
            self.customDataIdentifierIds = customDataIdentifierIds
            self.managedDataIdentifierIds = managedDataIdentifierIds
        }
    }

}

public struct GetSensitivityInspectionTemplateOutput {
    /// The custom description of the template.
    public var description: Swift.String?
    /// The managed data identifiers that are explicitly excluded (not used) when performing automated sensitive data discovery.
    public var excludes: Macie2ClientTypes.SensitivityInspectionTemplateExcludes?
    /// The allow lists, custom data identifiers, and managed data identifiers that are explicitly included (used) when performing automated sensitive data discovery.
    public var includes: Macie2ClientTypes.SensitivityInspectionTemplateIncludes?
    /// The name of the template: automated-sensitive-data-discovery.
    public var name: Swift.String?
    /// The unique identifier for the template.
    public var sensitivityInspectionTemplateId: Swift.String?

    public init(
        description: Swift.String? = nil,
        excludes: Macie2ClientTypes.SensitivityInspectionTemplateExcludes? = nil,
        includes: Macie2ClientTypes.SensitivityInspectionTemplateIncludes? = nil,
        name: Swift.String? = nil,
        sensitivityInspectionTemplateId: Swift.String? = nil
    )
    {
        self.description = description
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.sensitivityInspectionTemplateId = sensitivityInspectionTemplateId
    }
}

extension Macie2ClientTypes {

    /// The field to use to sort the results of a query for Amazon Macie account quotas and usage data. Valid values are:
    public enum UsageStatisticsSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountid
        case freetrialstartdate
        case servicelimitvalue
        case total
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageStatisticsSortKey] {
            return [
                .accountid,
                .freetrialstartdate,
                .servicelimitvalue,
                .total
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountid: return "accountId"
            case .freetrialstartdate: return "freeTrialStartDate"
            case .servicelimitvalue: return "serviceLimitValue"
            case .total: return "total"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for sorting the results of a query for Amazon Macie account quotas and usage data.
    public struct UsageStatisticsSortBy {
        /// The field to sort the results by.
        public var key: Macie2ClientTypes.UsageStatisticsSortKey?
        /// The sort order to apply to the results, based on the value for the field specified by the key property. Valid values are: ASC, sort the results in ascending order; and, DESC, sort the results in descending order.
        public var orderBy: Macie2ClientTypes.OrderBy?

        public init(
            key: Macie2ClientTypes.UsageStatisticsSortKey? = nil,
            orderBy: Macie2ClientTypes.OrderBy? = nil
        )
        {
            self.key = key
            self.orderBy = orderBy
        }
    }

}

extension Macie2ClientTypes {

    /// An inclusive time period that Amazon Macie usage data applies to. Possible values are:
    public enum TimeRange: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case monthToDate
        case past30Days
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeRange] {
            return [
                .monthToDate,
                .past30Days
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .monthToDate: return "MONTH_TO_DATE"
            case .past30Days: return "PAST_30_DAYS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetUsageStatisticsInput {
    /// An array of objects, one for each condition to use to filter the query results. If you specify more than one condition, Amazon Macie uses an AND operator to join the conditions.
    public var filterBy: [Macie2ClientTypes.UsageStatisticsFilter]?
    /// The maximum number of items to include in each page of the response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The criteria to use to sort the query results.
    public var sortBy: Macie2ClientTypes.UsageStatisticsSortBy?
    /// The inclusive time period to query usage data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value, Amazon Macie provides usage data for the preceding 30 days.
    public var timeRange: Macie2ClientTypes.TimeRange?

    public init(
        filterBy: [Macie2ClientTypes.UsageStatisticsFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: Macie2ClientTypes.UsageStatisticsSortBy? = nil,
        timeRange: Macie2ClientTypes.TimeRange? = nil
    )
    {
        self.filterBy = filterBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.timeRange = timeRange
    }
}

public struct GetUsageStatisticsOutput {
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?
    /// An array of objects that contains the results of the query. Each object contains the data for an account that matches the filter criteria specified in the request.
    public var records: [Macie2ClientTypes.UsageRecord]?
    /// The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.
    public var timeRange: Macie2ClientTypes.TimeRange?

    public init(
        nextToken: Swift.String? = nil,
        records: [Macie2ClientTypes.UsageRecord]? = nil,
        timeRange: Macie2ClientTypes.TimeRange? = nil
    )
    {
        self.nextToken = nextToken
        self.records = records
        self.timeRange = timeRange
    }
}

public struct GetUsageTotalsInput {
    /// The inclusive time period to retrieve the data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated usage data for the preceding 30 days.
    public var timeRange: Swift.String?

    public init(
        timeRange: Swift.String? = nil
    )
    {
        self.timeRange = timeRange
    }
}

public struct GetUsageTotalsOutput {
    /// The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.
    public var timeRange: Macie2ClientTypes.TimeRange?
    /// An array of objects that contains the results of the query. Each object contains the data for a specific usage metric.
    public var usageTotals: [Macie2ClientTypes.UsageTotal]?

    public init(
        timeRange: Macie2ClientTypes.TimeRange? = nil,
        usageTotals: [Macie2ClientTypes.UsageTotal]? = nil
    )
    {
        self.timeRange = timeRange
        self.usageTotals = usageTotals
    }
}

public struct ListAllowListsInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAllowListsOutput {
    /// An array of objects, one for each allow list.
    public var allowLists: [Macie2ClientTypes.AllowListSummary]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        allowLists: [Macie2ClientTypes.AllowListSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.allowLists = allowLists
        self.nextToken = nextToken
    }
}

public struct ListAutomatedDiscoveryAccountsInput {
    /// The Amazon Web Services account ID for each account, for as many as 50 accounts. To retrieve the status for multiple accounts, append the accountIds parameter and argument for each account, separated by an ampersand (&). To retrieve the status for all the accounts in an organization, omit this parameter.
    public var accountIds: [Swift.String]?
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAutomatedDiscoveryAccountsOutput {
    /// An array of objects, one for each account specified in the request. Each object specifies the Amazon Web Services account ID for an account and the current status of automated sensitive data discovery for that account.
    public var items: [Macie2ClientTypes.AutomatedDiscoveryAccount]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        items: [Macie2ClientTypes.AutomatedDiscoveryAccount]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for filtering the results of a request for information about classification jobs.
    public struct ListJobsFilterCriteria {
        /// An array of objects, one for each condition that determines which jobs to exclude from the results.
        public var excludes: [Macie2ClientTypes.ListJobsFilterTerm]?
        /// An array of objects, one for each condition that determines which jobs to include in the results.
        public var includes: [Macie2ClientTypes.ListJobsFilterTerm]?

        public init(
            excludes: [Macie2ClientTypes.ListJobsFilterTerm]? = nil,
            includes: [Macie2ClientTypes.ListJobsFilterTerm]? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension Macie2ClientTypes {

    /// The property to sort the results by. Valid values are:
    public enum ListJobsSortAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdat
        case jobstatus
        case jobtype
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListJobsSortAttributeName] {
            return [
                .createdat,
                .jobstatus,
                .jobtype,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdat: return "createdAt"
            case .jobstatus: return "jobStatus"
            case .jobtype: return "jobType"
            case .name: return "name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for sorting the results of a request for information about classification jobs.
    public struct ListJobsSortCriteria {
        /// The property to sort the results by.
        public var attributeName: Macie2ClientTypes.ListJobsSortAttributeName?
        /// The sort order to apply to the results, based on the value for the property specified by the attributeName property. Valid values are: ASC, sort the results in ascending order; and, DESC, sort the results in descending order.
        public var orderBy: Macie2ClientTypes.OrderBy?

        public init(
            attributeName: Macie2ClientTypes.ListJobsSortAttributeName? = nil,
            orderBy: Macie2ClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

public struct ListClassificationJobsInput {
    /// The criteria to use to filter the results.
    public var filterCriteria: Macie2ClientTypes.ListJobsFilterCriteria?
    /// The maximum number of items to include in each page of the response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The criteria to use to sort the results.
    public var sortCriteria: Macie2ClientTypes.ListJobsSortCriteria?

    public init(
        filterCriteria: Macie2ClientTypes.ListJobsFilterCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: Macie2ClientTypes.ListJobsSortCriteria? = nil
    )
    {
        self.filterCriteria = filterCriteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

public struct ListClassificationJobsOutput {
    /// An array of objects, one for each job that matches the filter criteria specified in the request.
    public var items: [Macie2ClientTypes.JobSummary]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        items: [Macie2ClientTypes.JobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListClassificationScopesInput {
    /// The name of the classification scope to retrieve the unique identifier for.
    public var name: Swift.String?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.name = name
        self.nextToken = nextToken
    }
}

public struct ListClassificationScopesOutput {
    /// An array that specifies the unique identifier and name of the classification scope for the account.
    public var classificationScopes: [Macie2ClientTypes.ClassificationScopeSummary]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        classificationScopes: [Macie2ClientTypes.ClassificationScopeSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.classificationScopes = classificationScopes
        self.nextToken = nextToken
    }
}

public struct ListCustomDataIdentifiersInput {
    /// The maximum number of items to include in each page of the response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListCustomDataIdentifiersOutput {
    /// An array of objects, one for each custom data identifier.
    public var items: [Macie2ClientTypes.CustomDataIdentifierSummary]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        items: [Macie2ClientTypes.CustomDataIdentifierSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListFindingsInput {
    /// The criteria to use to filter the results.
    public var findingCriteria: Macie2ClientTypes.FindingCriteria?
    /// The maximum number of items to include in each page of the response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The criteria to use to sort the results.
    public var sortCriteria: Macie2ClientTypes.SortCriteria?

    public init(
        findingCriteria: Macie2ClientTypes.FindingCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: Macie2ClientTypes.SortCriteria? = nil
    )
    {
        self.findingCriteria = findingCriteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

public struct ListFindingsOutput {
    /// An array of strings, where each string is the unique identifier for a finding that matches the filter criteria specified in the request.
    public var findingIds: [Swift.String]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        findingIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.findingIds = findingIds
        self.nextToken = nextToken
    }
}

public struct ListFindingsFiltersInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListFindingsFiltersOutput {
    /// An array of objects, one for each filter that's associated with the account.
    public var findingsFilterListItems: [Macie2ClientTypes.FindingsFilterListItem]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        findingsFilterListItems: [Macie2ClientTypes.FindingsFilterListItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.findingsFilterListItems = findingsFilterListItems
        self.nextToken = nextToken
    }
}

public struct ListInvitationsInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListInvitationsOutput {
    /// An array of objects, one for each invitation that was received by the account.
    public var invitations: [Macie2ClientTypes.Invitation]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        invitations: [Macie2ClientTypes.Invitation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.invitations = invitations
        self.nextToken = nextToken
    }
}

public struct ListManagedDataIdentifiersInput {
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

public struct ListManagedDataIdentifiersOutput {
    /// An array of objects, one for each managed data identifier.
    public var items: [Macie2ClientTypes.ManagedDataIdentifierSummary]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        items: [Macie2ClientTypes.ManagedDataIdentifierSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListMembersInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// Specifies which accounts to include in the response, based on the status of an account's relationship with the administrator account. By default, the response includes only current member accounts. To include all accounts, set this value to false.
    public var onlyAssociated: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        onlyAssociated: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.onlyAssociated = onlyAssociated
    }
}

public struct ListMembersOutput {
    /// An array of objects, one for each account that's associated with the administrator account and matches the criteria specified in the request.
    public var members: [Macie2ClientTypes.Member]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        members: [Macie2ClientTypes.Member]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.members = members
        self.nextToken = nextToken
    }
}

public struct ListOrganizationAdminAccountsInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListOrganizationAdminAccountsOutput {
    /// An array of objects, one for each delegated Amazon Macie administrator account for the organization. Only one of these accounts can have a status of ENABLED.
    public var adminAccounts: [Macie2ClientTypes.AdminAccount]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        adminAccounts: [Macie2ClientTypes.AdminAccount]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.adminAccounts = adminAccounts
        self.nextToken = nextToken
    }
}

public struct ListResourceProfileArtifactsInput {
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the S3 bucket that the request applies to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListResourceProfileArtifactsOutput {
    /// An array of objects, one for each of 1-100 S3 objects that Amazon Macie selected for analysis. If Macie has analyzed more than 100 objects in the bucket, Macie populates the array based on the value for the ResourceProfileArtifact.sensitive field for an object: true (sensitive), followed by false (not sensitive). Macie then populates any remaining items in the array with information about objects where the value for the ResourceProfileArtifact.classificationResultStatus field is SKIPPED.
    public var artifacts: [Macie2ClientTypes.ResourceProfileArtifact]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        artifacts: [Macie2ClientTypes.ResourceProfileArtifact]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.artifacts = artifacts
        self.nextToken = nextToken
    }
}

public struct ListResourceProfileDetectionsInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the S3 bucket that the request applies to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListResourceProfileDetectionsOutput {
    /// An array of objects, one for each type of sensitive data that Amazon Macie found in the bucket. Each object reports the number of occurrences of the specified type and provides information about the custom data identifier or managed data identifier that detected the data.
    public var detections: [Macie2ClientTypes.Detection]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        detections: [Macie2ClientTypes.Detection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detections = detections
        self.nextToken = nextToken
    }
}

public struct ListSensitivityInspectionTemplatesInput {
    /// The maximum number of items to include in each page of a paginated response.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListSensitivityInspectionTemplatesOutput {
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?
    /// An array that specifies the unique identifier and name of the sensitivity inspection template for the account.
    public var sensitivityInspectionTemplates: [Macie2ClientTypes.SensitivityInspectionTemplatesEntry]?

    public init(
        nextToken: Swift.String? = nil,
        sensitivityInspectionTemplates: [Macie2ClientTypes.SensitivityInspectionTemplatesEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.sensitivityInspectionTemplates = sensitivityInspectionTemplates
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// A map of key-value pairs that specifies which tags (keys and values) are associated with the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutClassificationExportConfigurationInput {
    /// The location to store data classification results in, and the encryption settings to use when storing results in that location.
    /// This member is required.
    public var configuration: Macie2ClientTypes.ClassificationExportConfiguration?

    public init(
        configuration: Macie2ClientTypes.ClassificationExportConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct PutClassificationExportConfigurationOutput {
    /// The location where the data classification results are stored, and the encryption settings that are used when storing results in that location.
    public var configuration: Macie2ClientTypes.ClassificationExportConfiguration?

    public init(
        configuration: Macie2ClientTypes.ClassificationExportConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct PutFindingsPublicationConfigurationInput {
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The configuration settings that determine which findings to publish to Security Hub.
    public var securityHubConfiguration: Macie2ClientTypes.SecurityHubConfiguration?

    public init(
        clientToken: Swift.String? = nil,
        securityHubConfiguration: Macie2ClientTypes.SecurityHubConfiguration? = nil
    )
    {
        self.clientToken = clientToken
        self.securityHubConfiguration = securityHubConfiguration
    }
}

public struct PutFindingsPublicationConfigurationOutput {

    public init() { }
}

extension Macie2ClientTypes {
    /// Specifies property- and tag-based conditions that define filter criteria for including or excluding Amazon Web Services resources from the query results.
    public struct SearchResourcesCriteriaBlock {
        /// An array of objects, one for each property- or tag-based condition that includes or excludes resources from the query results. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.
        public var and: [Macie2ClientTypes.SearchResourcesCriteria]?

        public init(
            and: [Macie2ClientTypes.SearchResourcesCriteria]? = nil
        )
        {
            self.and = and
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies property- and tag-based conditions that define filter criteria for including or excluding S3 buckets from the query results. Exclude conditions take precedence over include conditions.
    public struct SearchResourcesBucketCriteria {
        /// The property- and tag-based conditions that determine which buckets to exclude from the results.
        public var excludes: Macie2ClientTypes.SearchResourcesCriteriaBlock?
        /// The property- and tag-based conditions that determine which buckets to include in the results.
        public var includes: Macie2ClientTypes.SearchResourcesCriteriaBlock?

        public init(
            excludes: Macie2ClientTypes.SearchResourcesCriteriaBlock? = nil,
            includes: Macie2ClientTypes.SearchResourcesCriteriaBlock? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension Macie2ClientTypes {

    /// The property to sort the query results by. Valid values are:
    public enum SearchResourcesSortAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case resourceName
        case s3ClassifiableObjectCount
        case s3ClassifiableSizeInBytes
        case sdkUnknown(Swift.String)

        public static var allCases: [SearchResourcesSortAttributeName] {
            return [
                .accountId,
                .resourceName,
                .s3ClassifiableObjectCount,
                .s3ClassifiableSizeInBytes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .resourceName: return "RESOURCE_NAME"
            case .s3ClassifiableObjectCount: return "S3_CLASSIFIABLE_OBJECT_COUNT"
            case .s3ClassifiableSizeInBytes: return "S3_CLASSIFIABLE_SIZE_IN_BYTES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Macie2ClientTypes {
    /// Specifies criteria for sorting the results of a query for information about Amazon Web Services resources that Amazon Macie monitors and analyzes.
    public struct SearchResourcesSortCriteria {
        /// The property to sort the results by.
        public var attributeName: Macie2ClientTypes.SearchResourcesSortAttributeName?
        /// The sort order to apply to the results, based on the value for the property specified by the attributeName property. Valid values are: ASC, sort the results in ascending order; and, DESC, sort the results in descending order.
        public var orderBy: Macie2ClientTypes.OrderBy?

        public init(
            attributeName: Macie2ClientTypes.SearchResourcesSortAttributeName? = nil,
            orderBy: Macie2ClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

public struct SearchResourcesInput {
    /// The filter conditions that determine which S3 buckets to include or exclude from the query results.
    public var bucketCriteria: Macie2ClientTypes.SearchResourcesBucketCriteria?
    /// The maximum number of items to include in each page of the response. The default value is 50.
    public var maxResults: Swift.Int?
    /// The nextToken string that specifies which page of results to return in a paginated response.
    public var nextToken: Swift.String?
    /// The criteria to use to sort the results.
    public var sortCriteria: Macie2ClientTypes.SearchResourcesSortCriteria?

    public init(
        bucketCriteria: Macie2ClientTypes.SearchResourcesBucketCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: Macie2ClientTypes.SearchResourcesSortCriteria? = nil
    )
    {
        self.bucketCriteria = bucketCriteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

public struct SearchResourcesOutput {
    /// An array of objects, one for each resource that matches the filter criteria specified in the request.
    public var matchingResources: [Macie2ClientTypes.MatchingResource]?
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?

    public init(
        matchingResources: [Macie2ClientTypes.MatchingResource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.matchingResources = matchingResources
        self.nextToken = nextToken
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A map of key-value pairs that specifies the tags to associate with the resource. A resource can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct TestCustomDataIdentifierInput {
    /// An array that lists specific character sequences (ignore words) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.
    public var ignoreWords: [Swift.String]?
    /// An array that lists specific character sequences (keywords), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.
    public var keywords: [Swift.String]?
    /// The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.
    public var maximumMatchDistance: Swift.Int?
    /// The regular expression (regex) that defines the pattern to match. The expression can contain as many as 512 characters.
    /// This member is required.
    public var regex: Swift.String?
    /// The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.
    /// This member is required.
    public var sampleText: Swift.String?

    public init(
        ignoreWords: [Swift.String]? = nil,
        keywords: [Swift.String]? = nil,
        maximumMatchDistance: Swift.Int? = nil,
        regex: Swift.String? = nil,
        sampleText: Swift.String? = nil
    )
    {
        self.ignoreWords = ignoreWords
        self.keywords = keywords
        self.maximumMatchDistance = maximumMatchDistance
        self.regex = regex
        self.sampleText = sampleText
    }
}

public struct TestCustomDataIdentifierOutput {
    /// The number of occurrences of sample text that matched the criteria specified by the custom data identifier.
    public var matchCount: Swift.Int?

    public init(
        matchCount: Swift.Int? = nil
    )
    {
        self.matchCount = matchCount
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags (keys) to remove from the resource. In an HTTP request to remove multiple tags, append the tagKeys parameter and argument for each tag to remove, separated by an ampersand (&).
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateAllowListInput {
    /// The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression that defines a text pattern to ignore (regex). You can change a list's underlying criteria, such as the name of the S3 object or the regular expression to use. However, you can't change the type from s3WordsList to regex or the other way around.
    /// This member is required.
    public var criteria: Macie2ClientTypes.AllowListCriteria?
    /// A custom description of the allow list. The description can contain as many as 512 characters.
    public var description: Swift.String?
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?
    /// A custom name for the allow list. The name can contain as many as 128 characters.
    /// This member is required.
    public var name: Swift.String?

    public init(
        criteria: Macie2ClientTypes.AllowListCriteria? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.criteria = criteria
        self.description = description
        self.id = id
        self.name = name
    }
}

public struct UpdateAllowListOutput {
    /// The Amazon Resource Name (ARN) of the allow list.
    public var arn: Swift.String?
    /// The unique identifier for the allow list.
    public var id: Swift.String?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
    }
}

public struct UpdateAutomatedDiscoveryConfigurationInput {
    /// Specifies whether to automatically enable automated sensitive data discovery for accounts in the organization. Valid values are: ALL (default), enable it for all existing accounts and new member accounts; NEW, enable it only for new member accounts; and, NONE, don't enable it for any accounts. If you specify NEW or NONE, automated sensitive data discovery continues to be enabled for any existing accounts that it's currently enabled for. To enable or disable it for individual member accounts, specify NEW or NONE, and then enable or disable it for each account by using the BatchUpdateAutomatedDiscoveryAccounts operation.
    public var autoEnableOrganizationMembers: Macie2ClientTypes.AutoEnableMode?
    /// The new status of automated sensitive data discovery for the organization or account. Valid values are: ENABLED, start or resume all automated sensitive data discovery activities; and, DISABLED, stop performing all automated sensitive data discovery activities. If you specify DISABLED for an administrator account, you also disable automated sensitive data discovery for all member accounts in the organization.
    /// This member is required.
    public var status: Macie2ClientTypes.AutomatedDiscoveryStatus?

    public init(
        autoEnableOrganizationMembers: Macie2ClientTypes.AutoEnableMode? = nil,
        status: Macie2ClientTypes.AutomatedDiscoveryStatus? = nil
    )
    {
        self.autoEnableOrganizationMembers = autoEnableOrganizationMembers
        self.status = status
    }
}

public struct UpdateAutomatedDiscoveryConfigurationOutput {

    public init() { }
}

public struct UpdateClassificationJobInput {
    /// The unique identifier for the classification job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The new status for the job. Valid values are:
    ///
    /// * CANCELLED - Stops the job permanently and cancels it. This value is valid only if the job's current status is IDLE, PAUSED, RUNNING, or USER_PAUSED. If you specify this value and the job's current status is RUNNING, Amazon Macie immediately begins to stop all processing tasks for the job. You can't resume or restart a job after you cancel it.
    ///
    /// * RUNNING - Resumes the job. This value is valid only if the job's current status is USER_PAUSED. If you paused the job while it was actively running and you specify this value less than 30 days after you paused the job, Macie immediately resumes processing from the point where you paused the job. Otherwise, Macie resumes the job according to the schedule and other settings for the job.
    ///
    /// * USER_PAUSED - Pauses the job temporarily. This value is valid only if the job's current status is IDLE, PAUSED, or RUNNING. If you specify this value and the job's current status is RUNNING, Macie immediately begins to pause all processing tasks for the job. If you pause a one-time job and you don't resume it within 30 days, the job expires and Macie cancels the job. If you pause a recurring job when its status is RUNNING and you don't resume it within 30 days, the job run expires and Macie cancels the run. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.
    /// This member is required.
    public var jobStatus: Macie2ClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: Macie2ClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct UpdateClassificationJobOutput {

    public init() { }
}

extension Macie2ClientTypes {
    /// Specifies S3 buckets to add or remove from the exclusion list defined by the classification scope for an Amazon Macie account.
    public struct S3ClassificationScopeExclusionUpdate {
        /// Depending on the value specified for the update operation (ClassificationScopeUpdateOperation), an array of strings that: lists the names of buckets to add or remove from the list, or specifies a new set of bucket names that overwrites all existing names in the list. Each string must be the full name of an S3 bucket. Values are case sensitive.
        /// This member is required.
        public var bucketNames: [Swift.String]?
        /// Specifies how to apply the changes to the exclusion list. Valid values are:
        ///
        /// * ADD - Append the specified bucket names to the current list.
        ///
        /// * REMOVE - Remove the specified bucket names from the current list.
        ///
        /// * REPLACE - Overwrite the current list with the specified list of bucket names. If you specify this value, Amazon Macie removes all existing names from the list and adds all the specified names to the list.
        /// This member is required.
        public var operation: Macie2ClientTypes.ClassificationScopeUpdateOperation?

        public init(
            bucketNames: [Swift.String]? = nil,
            operation: Macie2ClientTypes.ClassificationScopeUpdateOperation? = nil
        )
        {
            self.bucketNames = bucketNames
            self.operation = operation
        }
    }

}

extension Macie2ClientTypes {
    /// Specifies changes to the list of S3 buckets that are excluded from automated sensitive data discovery for an Amazon Macie account.
    public struct S3ClassificationScopeUpdate {
        /// The names of the S3 buckets to add or remove from the list.
        /// This member is required.
        public var excludes: Macie2ClientTypes.S3ClassificationScopeExclusionUpdate?

        public init(
            excludes: Macie2ClientTypes.S3ClassificationScopeExclusionUpdate? = nil
        )
        {
            self.excludes = excludes
        }
    }

}

public struct UpdateClassificationScopeInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?
    /// The S3 buckets to add or remove from the exclusion list defined by the classification scope.
    public var s3: Macie2ClientTypes.S3ClassificationScopeUpdate?

    public init(
        id: Swift.String? = nil,
        s3: Macie2ClientTypes.S3ClassificationScopeUpdate? = nil
    )
    {
        self.id = id
        self.s3 = s3
    }
}

public struct UpdateClassificationScopeOutput {

    public init() { }
}

public struct UpdateFindingsFilterInput {
    /// The action to perform on findings that match the filter criteria (findingCriteria). Valid values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.
    public var action: Macie2ClientTypes.FindingsFilterAction?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// A custom description of the filter. The description can contain as many as 512 characters. We strongly recommend that you avoid including any sensitive data in the description of a filter. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.
    public var description: Swift.String?
    /// The criteria to use to filter findings.
    public var findingCriteria: Macie2ClientTypes.FindingCriteria?
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?
    /// A custom name for the filter. The name must contain at least 3 characters and can contain as many as 64 characters. We strongly recommend that you avoid including any sensitive data in the name of a filter. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.
    public var name: Swift.String?
    /// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
    public var position: Swift.Int?

    public init(
        action: Macie2ClientTypes.FindingsFilterAction? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        findingCriteria: Macie2ClientTypes.FindingCriteria? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        position: Swift.Int? = nil
    )
    {
        self.action = action
        self.clientToken = clientToken
        self.description = description
        self.findingCriteria = findingCriteria
        self.id = id
        self.name = name
        self.position = position
    }
}

public struct UpdateFindingsFilterOutput {
    /// The Amazon Resource Name (ARN) of the filter that was updated.
    public var arn: Swift.String?
    /// The unique identifier for the filter that was updated.
    public var id: Swift.String?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
    }
}

public struct UpdateMacieSessionInput {
    /// Specifies how often to publish updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).
    public var findingPublishingFrequency: Macie2ClientTypes.FindingPublishingFrequency?
    /// Specifies a new status for the account. Valid values are: ENABLED, resume all Amazon Macie activities for the account; and, PAUSED, suspend all Macie activities for the account.
    public var status: Macie2ClientTypes.MacieStatus?

    public init(
        findingPublishingFrequency: Macie2ClientTypes.FindingPublishingFrequency? = nil,
        status: Macie2ClientTypes.MacieStatus? = nil
    )
    {
        self.findingPublishingFrequency = findingPublishingFrequency
        self.status = status
    }
}

public struct UpdateMacieSessionOutput {

    public init() { }
}

public struct UpdateMemberSessionInput {
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?
    /// Specifies the new status for the account. Valid values are: ENABLED, resume all Amazon Macie activities for the account; and, PAUSED, suspend all Macie activities for the account.
    /// This member is required.
    public var status: Macie2ClientTypes.MacieStatus?

    public init(
        id: Swift.String? = nil,
        status: Macie2ClientTypes.MacieStatus? = nil
    )
    {
        self.id = id
        self.status = status
    }
}

public struct UpdateMemberSessionOutput {

    public init() { }
}

public struct UpdateOrganizationConfigurationInput {
    /// Specifies whether to enable Amazon Macie automatically for accounts that are added to the organization in Organizations.
    /// This member is required.
    public var autoEnable: Swift.Bool?

    public init(
        autoEnable: Swift.Bool? = nil
    )
    {
        self.autoEnable = autoEnable
    }
}

public struct UpdateOrganizationConfigurationOutput {

    public init() { }
}

public struct UpdateResourceProfileInput {
    /// The Amazon Resource Name (ARN) of the S3 bucket that the request applies to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The new sensitivity score for the bucket. Valid values are: 100, assign the maximum score and apply the Sensitive label to the bucket; and, null (empty), assign a score that Amazon Macie calculates automatically after you submit the request.
    public var sensitivityScoreOverride: Swift.Int?

    public init(
        resourceArn: Swift.String? = nil,
        sensitivityScoreOverride: Swift.Int? = nil
    )
    {
        self.resourceArn = resourceArn
        self.sensitivityScoreOverride = sensitivityScoreOverride
    }
}

public struct UpdateResourceProfileOutput {

    public init() { }
}

public struct UpdateResourceProfileDetectionsInput {
    /// The Amazon Resource Name (ARN) of the S3 bucket that the request applies to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of objects, one for each custom data identifier or managed data identifier that detected the type of sensitive data to start excluding or including in the bucket's score. To start including all sensitive data types in the score, don't specify any values for this array.
    public var suppressDataIdentifiers: [Macie2ClientTypes.SuppressDataIdentifier]?

    public init(
        resourceArn: Swift.String? = nil,
        suppressDataIdentifiers: [Macie2ClientTypes.SuppressDataIdentifier]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.suppressDataIdentifiers = suppressDataIdentifiers
    }
}

public struct UpdateResourceProfileDetectionsOutput {

    public init() { }
}

extension Macie2ClientTypes {
    /// Specifies the access method and settings to use when retrieving occurrences of sensitive data reported by findings. If your request specifies an Identity and Access Management (IAM) role to assume, Amazon Macie verifies that the role exists and the attached policies are configured correctly. If there's an issue, Macie returns an error. For information about addressing the issue, see [Configuration options and requirements for retrieving sensitive data samples](https://docs.aws.amazon.com/macie/latest/user/findings-retrieve-sd-options.html) in the Amazon Macie User Guide.
    public struct UpdateRetrievalConfiguration {
        /// The access method to use when retrieving sensitive data from affected S3 objects. Valid values are: ASSUME_ROLE, assume an IAM role that is in the affected Amazon Web Services account and delegates access to Amazon Macie; and, CALLER_CREDENTIALS, use the credentials of the IAM user who requests the sensitive data. If you specify ASSUME_ROLE, also specify the name of an existing IAM role for Macie to assume (roleName). If you change this value from ASSUME_ROLE to CALLER_CREDENTIALS for an existing configuration, Macie permanently deletes the external ID and role name currently specified for the configuration. These settings can't be recovered after they're deleted.
        /// This member is required.
        public var retrievalMode: Macie2ClientTypes.RetrievalMode?
        /// The name of the IAM role that is in the affected Amazon Web Services account and Amazon Macie is allowed to assume when retrieving sensitive data from affected S3 objects for the account. The trust and permissions policies for the role must meet all requirements for Macie to assume the role.
        public var roleName: Swift.String?

        public init(
            retrievalMode: Macie2ClientTypes.RetrievalMode? = nil,
            roleName: Swift.String? = nil
        )
        {
            self.retrievalMode = retrievalMode
            self.roleName = roleName
        }
    }

}

public struct UpdateRevealConfigurationInput {
    /// The KMS key to use to encrypt the sensitive data, and the status of the configuration for the Amazon Macie account.
    /// This member is required.
    public var configuration: Macie2ClientTypes.RevealConfiguration?
    /// The access method and settings to use when retrieving the sensitive data.
    public var retrievalConfiguration: Macie2ClientTypes.UpdateRetrievalConfiguration?

    public init(
        configuration: Macie2ClientTypes.RevealConfiguration? = nil,
        retrievalConfiguration: Macie2ClientTypes.UpdateRetrievalConfiguration? = nil
    )
    {
        self.configuration = configuration
        self.retrievalConfiguration = retrievalConfiguration
    }
}

public struct UpdateRevealConfigurationOutput {
    /// The KMS key to use to encrypt the sensitive data, and the status of the configuration for the Amazon Macie account.
    public var configuration: Macie2ClientTypes.RevealConfiguration?
    /// The access method and settings to use when retrieving the sensitive data.
    public var retrievalConfiguration: Macie2ClientTypes.RetrievalConfiguration?

    public init(
        configuration: Macie2ClientTypes.RevealConfiguration? = nil,
        retrievalConfiguration: Macie2ClientTypes.RetrievalConfiguration? = nil
    )
    {
        self.configuration = configuration
        self.retrievalConfiguration = retrievalConfiguration
    }
}

public struct UpdateSensitivityInspectionTemplateInput {
    /// A custom description of the template. The description can contain as many as 200 characters.
    public var description: Swift.String?
    /// The managed data identifiers to explicitly exclude (not use) when performing automated sensitive data discovery. To exclude an allow list or custom data identifier that's currently included by the template, update the values for the SensitivityInspectionTemplateIncludes.allowListIds and SensitivityInspectionTemplateIncludes.customDataIdentifierIds properties, respectively.
    public var excludes: Macie2ClientTypes.SensitivityInspectionTemplateExcludes?
    /// The unique identifier for the Amazon Macie resource that the request applies to.
    /// This member is required.
    public var id: Swift.String?
    /// The allow lists, custom data identifiers, and managed data identifiers to explicitly include (use) when performing automated sensitive data discovery.
    public var includes: Macie2ClientTypes.SensitivityInspectionTemplateIncludes?

    public init(
        description: Swift.String? = nil,
        excludes: Macie2ClientTypes.SensitivityInspectionTemplateExcludes? = nil,
        id: Swift.String? = nil,
        includes: Macie2ClientTypes.SensitivityInspectionTemplateIncludes? = nil
    )
    {
        self.description = description
        self.excludes = excludes
        self.id = id
        self.includes = includes
    }
}

public struct UpdateSensitivityInspectionTemplateOutput {

    public init() { }
}

extension AcceptInvitationInput {

    static func urlPathProvider(_ value: AcceptInvitationInput) -> Swift.String? {
        return "/invitations/accept"
    }
}

extension BatchGetCustomDataIdentifiersInput {

    static func urlPathProvider(_ value: BatchGetCustomDataIdentifiersInput) -> Swift.String? {
        return "/custom-data-identifiers/get"
    }
}

extension BatchUpdateAutomatedDiscoveryAccountsInput {

    static func urlPathProvider(_ value: BatchUpdateAutomatedDiscoveryAccountsInput) -> Swift.String? {
        return "/automated-discovery/accounts"
    }
}

extension CreateAllowListInput {

    static func urlPathProvider(_ value: CreateAllowListInput) -> Swift.String? {
        return "/allow-lists"
    }
}

extension CreateClassificationJobInput {

    static func urlPathProvider(_ value: CreateClassificationJobInput) -> Swift.String? {
        return "/jobs"
    }
}

extension CreateCustomDataIdentifierInput {

    static func urlPathProvider(_ value: CreateCustomDataIdentifierInput) -> Swift.String? {
        return "/custom-data-identifiers"
    }
}

extension CreateFindingsFilterInput {

    static func urlPathProvider(_ value: CreateFindingsFilterInput) -> Swift.String? {
        return "/findingsfilters"
    }
}

extension CreateInvitationsInput {

    static func urlPathProvider(_ value: CreateInvitationsInput) -> Swift.String? {
        return "/invitations"
    }
}

extension CreateMemberInput {

    static func urlPathProvider(_ value: CreateMemberInput) -> Swift.String? {
        return "/members"
    }
}

extension CreateSampleFindingsInput {

    static func urlPathProvider(_ value: CreateSampleFindingsInput) -> Swift.String? {
        return "/findings/sample"
    }
}

extension DeclineInvitationsInput {

    static func urlPathProvider(_ value: DeclineInvitationsInput) -> Swift.String? {
        return "/invitations/decline"
    }
}

extension DeleteAllowListInput {

    static func urlPathProvider(_ value: DeleteAllowListInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/allow-lists/\(id.urlPercentEncoding())"
    }
}

extension DeleteAllowListInput {

    static func queryItemProvider(_ value: DeleteAllowListInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let ignoreJobChecks = value.ignoreJobChecks {
            let ignoreJobChecksQueryItem = Smithy.URIQueryItem(name: "ignoreJobChecks".urlPercentEncoding(), value: Swift.String(ignoreJobChecks).urlPercentEncoding())
            items.append(ignoreJobChecksQueryItem)
        }
        return items
    }
}

extension DeleteCustomDataIdentifierInput {

    static func urlPathProvider(_ value: DeleteCustomDataIdentifierInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/custom-data-identifiers/\(id.urlPercentEncoding())"
    }
}

extension DeleteFindingsFilterInput {

    static func urlPathProvider(_ value: DeleteFindingsFilterInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/findingsfilters/\(id.urlPercentEncoding())"
    }
}

extension DeleteInvitationsInput {

    static func urlPathProvider(_ value: DeleteInvitationsInput) -> Swift.String? {
        return "/invitations/delete"
    }
}

extension DeleteMemberInput {

    static func urlPathProvider(_ value: DeleteMemberInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/members/\(id.urlPercentEncoding())"
    }
}

extension DescribeBucketsInput {

    static func urlPathProvider(_ value: DescribeBucketsInput) -> Swift.String? {
        return "/datasources/s3"
    }
}

extension DescribeClassificationJobInput {

    static func urlPathProvider(_ value: DescribeClassificationJobInput) -> Swift.String? {
        guard let jobId = value.jobId else {
            return nil
        }
        return "/jobs/\(jobId.urlPercentEncoding())"
    }
}

extension DescribeOrganizationConfigurationInput {

    static func urlPathProvider(_ value: DescribeOrganizationConfigurationInput) -> Swift.String? {
        return "/admin/configuration"
    }
}

extension DisableMacieInput {

    static func urlPathProvider(_ value: DisableMacieInput) -> Swift.String? {
        return "/macie"
    }
}

extension DisableOrganizationAdminAccountInput {

    static func urlPathProvider(_ value: DisableOrganizationAdminAccountInput) -> Swift.String? {
        return "/admin"
    }
}

extension DisableOrganizationAdminAccountInput {

    static func queryItemProvider(_ value: DisableOrganizationAdminAccountInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let adminAccountId = value.adminAccountId else {
            let message = "Creating a URL Query Item failed. adminAccountId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let adminAccountIdQueryItem = Smithy.URIQueryItem(name: "adminAccountId".urlPercentEncoding(), value: Swift.String(adminAccountId).urlPercentEncoding())
        items.append(adminAccountIdQueryItem)
        return items
    }
}

extension DisassociateFromAdministratorAccountInput {

    static func urlPathProvider(_ value: DisassociateFromAdministratorAccountInput) -> Swift.String? {
        return "/administrator/disassociate"
    }
}

extension DisassociateFromMasterAccountInput {

    static func urlPathProvider(_ value: DisassociateFromMasterAccountInput) -> Swift.String? {
        return "/master/disassociate"
    }
}

extension DisassociateMemberInput {

    static func urlPathProvider(_ value: DisassociateMemberInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/members/disassociate/\(id.urlPercentEncoding())"
    }
}

extension EnableMacieInput {

    static func urlPathProvider(_ value: EnableMacieInput) -> Swift.String? {
        return "/macie"
    }
}

extension EnableOrganizationAdminAccountInput {

    static func urlPathProvider(_ value: EnableOrganizationAdminAccountInput) -> Swift.String? {
        return "/admin"
    }
}

extension GetAdministratorAccountInput {

    static func urlPathProvider(_ value: GetAdministratorAccountInput) -> Swift.String? {
        return "/administrator"
    }
}

extension GetAllowListInput {

    static func urlPathProvider(_ value: GetAllowListInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/allow-lists/\(id.urlPercentEncoding())"
    }
}

extension GetAutomatedDiscoveryConfigurationInput {

    static func urlPathProvider(_ value: GetAutomatedDiscoveryConfigurationInput) -> Swift.String? {
        return "/automated-discovery/configuration"
    }
}

extension GetBucketStatisticsInput {

    static func urlPathProvider(_ value: GetBucketStatisticsInput) -> Swift.String? {
        return "/datasources/s3/statistics"
    }
}

extension GetClassificationExportConfigurationInput {

    static func urlPathProvider(_ value: GetClassificationExportConfigurationInput) -> Swift.String? {
        return "/classification-export-configuration"
    }
}

extension GetClassificationScopeInput {

    static func urlPathProvider(_ value: GetClassificationScopeInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/classification-scopes/\(id.urlPercentEncoding())"
    }
}

extension GetCustomDataIdentifierInput {

    static func urlPathProvider(_ value: GetCustomDataIdentifierInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/custom-data-identifiers/\(id.urlPercentEncoding())"
    }
}

extension GetFindingsInput {

    static func urlPathProvider(_ value: GetFindingsInput) -> Swift.String? {
        return "/findings/describe"
    }
}

extension GetFindingsFilterInput {

    static func urlPathProvider(_ value: GetFindingsFilterInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/findingsfilters/\(id.urlPercentEncoding())"
    }
}

extension GetFindingsPublicationConfigurationInput {

    static func urlPathProvider(_ value: GetFindingsPublicationConfigurationInput) -> Swift.String? {
        return "/findings-publication-configuration"
    }
}

extension GetFindingStatisticsInput {

    static func urlPathProvider(_ value: GetFindingStatisticsInput) -> Swift.String? {
        return "/findings/statistics"
    }
}

extension GetInvitationsCountInput {

    static func urlPathProvider(_ value: GetInvitationsCountInput) -> Swift.String? {
        return "/invitations/count"
    }
}

extension GetMacieSessionInput {

    static func urlPathProvider(_ value: GetMacieSessionInput) -> Swift.String? {
        return "/macie"
    }
}

extension GetMasterAccountInput {

    static func urlPathProvider(_ value: GetMasterAccountInput) -> Swift.String? {
        return "/master"
    }
}

extension GetMemberInput {

    static func urlPathProvider(_ value: GetMemberInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/members/\(id.urlPercentEncoding())"
    }
}

extension GetResourceProfileInput {

    static func urlPathProvider(_ value: GetResourceProfileInput) -> Swift.String? {
        return "/resource-profiles"
    }
}

extension GetResourceProfileInput {

    static func queryItemProvider(_ value: GetResourceProfileInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension GetRevealConfigurationInput {

    static func urlPathProvider(_ value: GetRevealConfigurationInput) -> Swift.String? {
        return "/reveal-configuration"
    }
}

extension GetSensitiveDataOccurrencesInput {

    static func urlPathProvider(_ value: GetSensitiveDataOccurrencesInput) -> Swift.String? {
        guard let findingId = value.findingId else {
            return nil
        }
        return "/findings/\(findingId.urlPercentEncoding())/reveal"
    }
}

extension GetSensitiveDataOccurrencesAvailabilityInput {

    static func urlPathProvider(_ value: GetSensitiveDataOccurrencesAvailabilityInput) -> Swift.String? {
        guard let findingId = value.findingId else {
            return nil
        }
        return "/findings/\(findingId.urlPercentEncoding())/reveal/availability"
    }
}

extension GetSensitivityInspectionTemplateInput {

    static func urlPathProvider(_ value: GetSensitivityInspectionTemplateInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/templates/sensitivity-inspections/\(id.urlPercentEncoding())"
    }
}

extension GetUsageStatisticsInput {

    static func urlPathProvider(_ value: GetUsageStatisticsInput) -> Swift.String? {
        return "/usage/statistics"
    }
}

extension GetUsageTotalsInput {

    static func urlPathProvider(_ value: GetUsageTotalsInput) -> Swift.String? {
        return "/usage"
    }
}

extension GetUsageTotalsInput {

    static func queryItemProvider(_ value: GetUsageTotalsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let timeRange = value.timeRange {
            let timeRangeQueryItem = Smithy.URIQueryItem(name: "timeRange".urlPercentEncoding(), value: Swift.String(timeRange).urlPercentEncoding())
            items.append(timeRangeQueryItem)
        }
        return items
    }
}

extension ListAllowListsInput {

    static func urlPathProvider(_ value: ListAllowListsInput) -> Swift.String? {
        return "/allow-lists"
    }
}

extension ListAllowListsInput {

    static func queryItemProvider(_ value: ListAllowListsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListAutomatedDiscoveryAccountsInput {

    static func urlPathProvider(_ value: ListAutomatedDiscoveryAccountsInput) -> Swift.String? {
        return "/automated-discovery/accounts"
    }
}

extension ListAutomatedDiscoveryAccountsInput {

    static func queryItemProvider(_ value: ListAutomatedDiscoveryAccountsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let accountIds = value.accountIds {
            accountIds.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "accountIds".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListClassificationJobsInput {

    static func urlPathProvider(_ value: ListClassificationJobsInput) -> Swift.String? {
        return "/jobs/list"
    }
}

extension ListClassificationScopesInput {

    static func urlPathProvider(_ value: ListClassificationScopesInput) -> Swift.String? {
        return "/classification-scopes"
    }
}

extension ListClassificationScopesInput {

    static func queryItemProvider(_ value: ListClassificationScopesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        return items
    }
}

extension ListCustomDataIdentifiersInput {

    static func urlPathProvider(_ value: ListCustomDataIdentifiersInput) -> Swift.String? {
        return "/custom-data-identifiers/list"
    }
}

extension ListFindingsInput {

    static func urlPathProvider(_ value: ListFindingsInput) -> Swift.String? {
        return "/findings"
    }
}

extension ListFindingsFiltersInput {

    static func urlPathProvider(_ value: ListFindingsFiltersInput) -> Swift.String? {
        return "/findingsfilters"
    }
}

extension ListFindingsFiltersInput {

    static func queryItemProvider(_ value: ListFindingsFiltersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListInvitationsInput {

    static func urlPathProvider(_ value: ListInvitationsInput) -> Swift.String? {
        return "/invitations"
    }
}

extension ListInvitationsInput {

    static func queryItemProvider(_ value: ListInvitationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListManagedDataIdentifiersInput {

    static func urlPathProvider(_ value: ListManagedDataIdentifiersInput) -> Swift.String? {
        return "/managed-data-identifiers/list"
    }
}

extension ListMembersInput {

    static func urlPathProvider(_ value: ListMembersInput) -> Swift.String? {
        return "/members"
    }
}

extension ListMembersInput {

    static func queryItemProvider(_ value: ListMembersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let onlyAssociated = value.onlyAssociated {
            let onlyAssociatedQueryItem = Smithy.URIQueryItem(name: "onlyAssociated".urlPercentEncoding(), value: Swift.String(onlyAssociated).urlPercentEncoding())
            items.append(onlyAssociatedQueryItem)
        }
        return items
    }
}

extension ListOrganizationAdminAccountsInput {

    static func urlPathProvider(_ value: ListOrganizationAdminAccountsInput) -> Swift.String? {
        return "/admin"
    }
}

extension ListOrganizationAdminAccountsInput {

    static func queryItemProvider(_ value: ListOrganizationAdminAccountsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListResourceProfileArtifactsInput {

    static func urlPathProvider(_ value: ListResourceProfileArtifactsInput) -> Swift.String? {
        return "/resource-profiles/artifacts"
    }
}

extension ListResourceProfileArtifactsInput {

    static func queryItemProvider(_ value: ListResourceProfileArtifactsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension ListResourceProfileDetectionsInput {

    static func urlPathProvider(_ value: ListResourceProfileDetectionsInput) -> Swift.String? {
        return "/resource-profiles/detections"
    }
}

extension ListResourceProfileDetectionsInput {

    static func queryItemProvider(_ value: ListResourceProfileDetectionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension ListSensitivityInspectionTemplatesInput {

    static func urlPathProvider(_ value: ListSensitivityInspectionTemplatesInput) -> Swift.String? {
        return "/templates/sensitivity-inspections"
    }
}

extension ListSensitivityInspectionTemplatesInput {

    static func queryItemProvider(_ value: ListSensitivityInspectionTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PutClassificationExportConfigurationInput {

    static func urlPathProvider(_ value: PutClassificationExportConfigurationInput) -> Swift.String? {
        return "/classification-export-configuration"
    }
}

extension PutFindingsPublicationConfigurationInput {

    static func urlPathProvider(_ value: PutFindingsPublicationConfigurationInput) -> Swift.String? {
        return "/findings-publication-configuration"
    }
}

extension SearchResourcesInput {

    static func urlPathProvider(_ value: SearchResourcesInput) -> Swift.String? {
        return "/datasources/search-resources"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TestCustomDataIdentifierInput {

    static func urlPathProvider(_ value: TestCustomDataIdentifierInput) -> Swift.String? {
        return "/custom-data-identifiers/test"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateAllowListInput {

    static func urlPathProvider(_ value: UpdateAllowListInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/allow-lists/\(id.urlPercentEncoding())"
    }
}

extension UpdateAutomatedDiscoveryConfigurationInput {

    static func urlPathProvider(_ value: UpdateAutomatedDiscoveryConfigurationInput) -> Swift.String? {
        return "/automated-discovery/configuration"
    }
}

extension UpdateClassificationJobInput {

    static func urlPathProvider(_ value: UpdateClassificationJobInput) -> Swift.String? {
        guard let jobId = value.jobId else {
            return nil
        }
        return "/jobs/\(jobId.urlPercentEncoding())"
    }
}

extension UpdateClassificationScopeInput {

    static func urlPathProvider(_ value: UpdateClassificationScopeInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/classification-scopes/\(id.urlPercentEncoding())"
    }
}

extension UpdateFindingsFilterInput {

    static func urlPathProvider(_ value: UpdateFindingsFilterInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/findingsfilters/\(id.urlPercentEncoding())"
    }
}

extension UpdateMacieSessionInput {

    static func urlPathProvider(_ value: UpdateMacieSessionInput) -> Swift.String? {
        return "/macie"
    }
}

extension UpdateMemberSessionInput {

    static func urlPathProvider(_ value: UpdateMemberSessionInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/macie/members/\(id.urlPercentEncoding())"
    }
}

extension UpdateOrganizationConfigurationInput {

    static func urlPathProvider(_ value: UpdateOrganizationConfigurationInput) -> Swift.String? {
        return "/admin/configuration"
    }
}

extension UpdateResourceProfileInput {

    static func urlPathProvider(_ value: UpdateResourceProfileInput) -> Swift.String? {
        return "/resource-profiles"
    }
}

extension UpdateResourceProfileInput {

    static func queryItemProvider(_ value: UpdateResourceProfileInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension UpdateResourceProfileDetectionsInput {

    static func urlPathProvider(_ value: UpdateResourceProfileDetectionsInput) -> Swift.String? {
        return "/resource-profiles/detections"
    }
}

extension UpdateResourceProfileDetectionsInput {

    static func queryItemProvider(_ value: UpdateResourceProfileDetectionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension UpdateRevealConfigurationInput {

    static func urlPathProvider(_ value: UpdateRevealConfigurationInput) -> Swift.String? {
        return "/reveal-configuration"
    }
}

extension UpdateSensitivityInspectionTemplateInput {

    static func urlPathProvider(_ value: UpdateSensitivityInspectionTemplateInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/templates/sensitivity-inspections/\(id.urlPercentEncoding())"
    }
}

extension AcceptInvitationInput {

    static func write(value: AcceptInvitationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["administratorAccountId"].write(value.administratorAccountId)
        try writer["invitationId"].write(value.invitationId)
        try writer["masterAccount"].write(value.masterAccount)
    }
}

extension BatchGetCustomDataIdentifiersInput {

    static func write(value: BatchGetCustomDataIdentifiersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ids"].writeList(value.ids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdateAutomatedDiscoveryAccountsInput {

    static func write(value: BatchUpdateAutomatedDiscoveryAccountsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accounts"].writeList(value.accounts, memberWritingClosure: Macie2ClientTypes.AutomatedDiscoveryAccountUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAllowListInput {

    static func write(value: CreateAllowListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["criteria"].write(value.criteria, with: Macie2ClientTypes.AllowListCriteria.write(value:to:))
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateClassificationJobInput {

    static func write(value: CreateClassificationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowListIds"].writeList(value.allowListIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clientToken"].write(value.clientToken)
        try writer["customDataIdentifierIds"].writeList(value.customDataIdentifierIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["description"].write(value.description)
        try writer["initialRun"].write(value.initialRun)
        try writer["jobType"].write(value.jobType)
        try writer["managedDataIdentifierIds"].writeList(value.managedDataIdentifierIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["managedDataIdentifierSelector"].write(value.managedDataIdentifierSelector)
        try writer["name"].write(value.name)
        try writer["s3JobDefinition"].write(value.s3JobDefinition, with: Macie2ClientTypes.S3JobDefinition.write(value:to:))
        try writer["samplingPercentage"].write(value.samplingPercentage)
        try writer["scheduleFrequency"].write(value.scheduleFrequency, with: Macie2ClientTypes.JobScheduleFrequency.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateCustomDataIdentifierInput {

    static func write(value: CreateCustomDataIdentifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["ignoreWords"].writeList(value.ignoreWords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["keywords"].writeList(value.keywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maximumMatchDistance"].write(value.maximumMatchDistance)
        try writer["name"].write(value.name)
        try writer["regex"].write(value.regex)
        try writer["severityLevels"].writeList(value.severityLevels, memberWritingClosure: Macie2ClientTypes.SeverityLevel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateFindingsFilterInput {

    static func write(value: CreateFindingsFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["findingCriteria"].write(value.findingCriteria, with: Macie2ClientTypes.FindingCriteria.write(value:to:))
        try writer["name"].write(value.name)
        try writer["position"].write(value.position)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateInvitationsInput {

    static func write(value: CreateInvitationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["disableEmailNotification"].write(value.disableEmailNotification)
        try writer["message"].write(value.message)
    }
}

extension CreateMemberInput {

    static func write(value: CreateMemberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["account"].write(value.account, with: Macie2ClientTypes.AccountDetail.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateSampleFindingsInput {

    static func write(value: CreateSampleFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingTypes"].writeList(value.findingTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<Macie2ClientTypes.FindingType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeclineInvitationsInput {

    static func write(value: DeclineInvitationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteInvitationsInput {

    static func write(value: DeleteInvitationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeBucketsInput {

    static func write(value: DescribeBucketsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["criteria"].writeMap(value.criteria, valueWritingClosure: Macie2ClientTypes.BucketCriteriaAdditionalProperties.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: Macie2ClientTypes.BucketSortCriteria.write(value:to:))
    }
}

extension EnableMacieInput {

    static func write(value: EnableMacieInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["findingPublishingFrequency"].write(value.findingPublishingFrequency)
        try writer["status"].write(value.status)
    }
}

extension EnableOrganizationAdminAccountInput {

    static func write(value: EnableOrganizationAdminAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adminAccountId"].write(value.adminAccountId)
        try writer["clientToken"].write(value.clientToken)
    }
}

extension GetBucketStatisticsInput {

    static func write(value: GetBucketStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountId"].write(value.accountId)
    }
}

extension GetFindingsInput {

    static func write(value: GetFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingIds"].writeList(value.findingIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sortCriteria"].write(value.sortCriteria, with: Macie2ClientTypes.SortCriteria.write(value:to:))
    }
}

extension GetFindingStatisticsInput {

    static func write(value: GetFindingStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingCriteria"].write(value.findingCriteria, with: Macie2ClientTypes.FindingCriteria.write(value:to:))
        try writer["groupBy"].write(value.groupBy)
        try writer["size"].write(value.size)
        try writer["sortCriteria"].write(value.sortCriteria, with: Macie2ClientTypes.FindingStatisticsSortCriteria.write(value:to:))
    }
}

extension GetUsageStatisticsInput {

    static func write(value: GetUsageStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterBy"].writeList(value.filterBy, memberWritingClosure: Macie2ClientTypes.UsageStatisticsFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: Macie2ClientTypes.UsageStatisticsSortBy.write(value:to:))
        try writer["timeRange"].write(value.timeRange)
    }
}

extension ListClassificationJobsInput {

    static func write(value: ListClassificationJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterCriteria"].write(value.filterCriteria, with: Macie2ClientTypes.ListJobsFilterCriteria.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: Macie2ClientTypes.ListJobsSortCriteria.write(value:to:))
    }
}

extension ListCustomDataIdentifiersInput {

    static func write(value: ListCustomDataIdentifiersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListFindingsInput {

    static func write(value: ListFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingCriteria"].write(value.findingCriteria, with: Macie2ClientTypes.FindingCriteria.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: Macie2ClientTypes.SortCriteria.write(value:to:))
    }
}

extension ListManagedDataIdentifiersInput {

    static func write(value: ListManagedDataIdentifiersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension PutClassificationExportConfigurationInput {

    static func write(value: PutClassificationExportConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: Macie2ClientTypes.ClassificationExportConfiguration.write(value:to:))
    }
}

extension PutFindingsPublicationConfigurationInput {

    static func write(value: PutFindingsPublicationConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["securityHubConfiguration"].write(value.securityHubConfiguration, with: Macie2ClientTypes.SecurityHubConfiguration.write(value:to:))
    }
}

extension SearchResourcesInput {

    static func write(value: SearchResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketCriteria"].write(value.bucketCriteria, with: Macie2ClientTypes.SearchResourcesBucketCriteria.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: Macie2ClientTypes.SearchResourcesSortCriteria.write(value:to:))
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TestCustomDataIdentifierInput {

    static func write(value: TestCustomDataIdentifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ignoreWords"].writeList(value.ignoreWords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["keywords"].writeList(value.keywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maximumMatchDistance"].write(value.maximumMatchDistance)
        try writer["regex"].write(value.regex)
        try writer["sampleText"].write(value.sampleText)
    }
}

extension UpdateAllowListInput {

    static func write(value: UpdateAllowListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["criteria"].write(value.criteria, with: Macie2ClientTypes.AllowListCriteria.write(value:to:))
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }
}

extension UpdateAutomatedDiscoveryConfigurationInput {

    static func write(value: UpdateAutomatedDiscoveryConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnableOrganizationMembers"].write(value.autoEnableOrganizationMembers)
        try writer["status"].write(value.status)
    }
}

extension UpdateClassificationJobInput {

    static func write(value: UpdateClassificationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobStatus"].write(value.jobStatus)
    }
}

extension UpdateClassificationScopeInput {

    static func write(value: UpdateClassificationScopeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3"].write(value.s3, with: Macie2ClientTypes.S3ClassificationScopeUpdate.write(value:to:))
    }
}

extension UpdateFindingsFilterInput {

    static func write(value: UpdateFindingsFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["findingCriteria"].write(value.findingCriteria, with: Macie2ClientTypes.FindingCriteria.write(value:to:))
        try writer["name"].write(value.name)
        try writer["position"].write(value.position)
    }
}

extension UpdateMacieSessionInput {

    static func write(value: UpdateMacieSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingPublishingFrequency"].write(value.findingPublishingFrequency)
        try writer["status"].write(value.status)
    }
}

extension UpdateMemberSessionInput {

    static func write(value: UpdateMemberSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["status"].write(value.status)
    }
}

extension UpdateOrganizationConfigurationInput {

    static func write(value: UpdateOrganizationConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnable"].write(value.autoEnable)
    }
}

extension UpdateResourceProfileInput {

    static func write(value: UpdateResourceProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sensitivityScoreOverride"].write(value.sensitivityScoreOverride)
    }
}

extension UpdateResourceProfileDetectionsInput {

    static func write(value: UpdateResourceProfileDetectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["suppressDataIdentifiers"].writeList(value.suppressDataIdentifiers, memberWritingClosure: Macie2ClientTypes.SuppressDataIdentifier.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateRevealConfigurationInput {

    static func write(value: UpdateRevealConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: Macie2ClientTypes.RevealConfiguration.write(value:to:))
        try writer["retrievalConfiguration"].write(value.retrievalConfiguration, with: Macie2ClientTypes.UpdateRetrievalConfiguration.write(value:to:))
    }
}

extension UpdateSensitivityInspectionTemplateInput {

    static func write(value: UpdateSensitivityInspectionTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["excludes"].write(value.excludes, with: Macie2ClientTypes.SensitivityInspectionTemplateExcludes.write(value:to:))
        try writer["includes"].write(value.includes, with: Macie2ClientTypes.SensitivityInspectionTemplateIncludes.write(value:to:))
    }
}

extension AcceptInvitationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptInvitationOutput {
        return AcceptInvitationOutput()
    }
}

extension BatchGetCustomDataIdentifiersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetCustomDataIdentifiersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetCustomDataIdentifiersOutput()
        value.customDataIdentifiers = try reader["customDataIdentifiers"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.BatchGetCustomDataIdentifierSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.notFoundIdentifierIds = try reader["notFoundIdentifierIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUpdateAutomatedDiscoveryAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdateAutomatedDiscoveryAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdateAutomatedDiscoveryAccountsOutput()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.AutomatedDiscoveryAccountUpdateError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateAllowListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAllowListOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAllowListOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension CreateClassificationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClassificationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateClassificationJobOutput()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        return value
    }
}

extension CreateCustomDataIdentifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCustomDataIdentifierOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCustomDataIdentifierOutput()
        value.customDataIdentifierId = try reader["customDataIdentifierId"].readIfPresent()
        return value
    }
}

extension CreateFindingsFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFindingsFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFindingsFilterOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension CreateInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInvitationsOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMemberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMemberOutput()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension CreateSampleFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSampleFindingsOutput {
        return CreateSampleFindingsOutput()
    }
}

extension DeclineInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeclineInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeclineInvitationsOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteAllowListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAllowListOutput {
        return DeleteAllowListOutput()
    }
}

extension DeleteCustomDataIdentifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomDataIdentifierOutput {
        return DeleteCustomDataIdentifierOutput()
    }
}

extension DeleteFindingsFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFindingsFilterOutput {
        return DeleteFindingsFilterOutput()
    }
}

extension DeleteInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteInvitationsOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMemberOutput {
        return DeleteMemberOutput()
    }
}

extension DescribeBucketsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBucketsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBucketsOutput()
        value.buckets = try reader["buckets"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.BucketMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeClassificationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClassificationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClassificationJobOutput()
        value.allowListIds = try reader["allowListIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.customDataIdentifierIds = try reader["customDataIdentifierIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["description"].readIfPresent()
        value.initialRun = try reader["initialRun"].readIfPresent()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.jobStatus = try reader["jobStatus"].readIfPresent()
        value.jobType = try reader["jobType"].readIfPresent()
        value.lastRunErrorStatus = try reader["lastRunErrorStatus"].readIfPresent(with: Macie2ClientTypes.LastRunErrorStatus.read(from:))
        value.lastRunTime = try reader["lastRunTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.managedDataIdentifierIds = try reader["managedDataIdentifierIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedDataIdentifierSelector = try reader["managedDataIdentifierSelector"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.s3JobDefinition = try reader["s3JobDefinition"].readIfPresent(with: Macie2ClientTypes.S3JobDefinition.read(from:))
        value.samplingPercentage = try reader["samplingPercentage"].readIfPresent()
        value.scheduleFrequency = try reader["scheduleFrequency"].readIfPresent(with: Macie2ClientTypes.JobScheduleFrequency.read(from:))
        value.statistics = try reader["statistics"].readIfPresent(with: Macie2ClientTypes.Statistics.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.userPausedDetails = try reader["userPausedDetails"].readIfPresent(with: Macie2ClientTypes.UserPausedDetails.read(from:))
        return value
    }
}

extension DescribeOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOrganizationConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOrganizationConfigurationOutput()
        value.autoEnable = try reader["autoEnable"].readIfPresent()
        value.maxAccountLimitReached = try reader["maxAccountLimitReached"].readIfPresent()
        return value
    }
}

extension DisableMacieOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableMacieOutput {
        return DisableMacieOutput()
    }
}

extension DisableOrganizationAdminAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableOrganizationAdminAccountOutput {
        return DisableOrganizationAdminAccountOutput()
    }
}

extension DisassociateFromAdministratorAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateFromAdministratorAccountOutput {
        return DisassociateFromAdministratorAccountOutput()
    }
}

extension DisassociateFromMasterAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateFromMasterAccountOutput {
        return DisassociateFromMasterAccountOutput()
    }
}

extension DisassociateMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateMemberOutput {
        return DisassociateMemberOutput()
    }
}

extension EnableMacieOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableMacieOutput {
        return EnableMacieOutput()
    }
}

extension EnableOrganizationAdminAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableOrganizationAdminAccountOutput {
        return EnableOrganizationAdminAccountOutput()
    }
}

extension GetAdministratorAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAdministratorAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAdministratorAccountOutput()
        value.administrator = try reader["administrator"].readIfPresent(with: Macie2ClientTypes.Invitation.read(from:))
        return value
    }
}

extension GetAllowListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAllowListOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAllowListOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.criteria = try reader["criteria"].readIfPresent(with: Macie2ClientTypes.AllowListCriteria.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent(with: Macie2ClientTypes.AllowListStatus.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetAutomatedDiscoveryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAutomatedDiscoveryConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAutomatedDiscoveryConfigurationOutput()
        value.autoEnableOrganizationMembers = try reader["autoEnableOrganizationMembers"].readIfPresent()
        value.classificationScopeId = try reader["classificationScopeId"].readIfPresent()
        value.disabledAt = try reader["disabledAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.firstEnabledAt = try reader["firstEnabledAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sensitivityInspectionTemplateId = try reader["sensitivityInspectionTemplateId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetBucketStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketStatisticsOutput()
        value.bucketCount = try reader["bucketCount"].readIfPresent()
        value.bucketCountByEffectivePermission = try reader["bucketCountByEffectivePermission"].readIfPresent(with: Macie2ClientTypes.BucketCountByEffectivePermission.read(from:))
        value.bucketCountByEncryptionType = try reader["bucketCountByEncryptionType"].readIfPresent(with: Macie2ClientTypes.BucketCountByEncryptionType.read(from:))
        value.bucketCountByObjectEncryptionRequirement = try reader["bucketCountByObjectEncryptionRequirement"].readIfPresent(with: Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads.read(from:))
        value.bucketCountBySharedAccessType = try reader["bucketCountBySharedAccessType"].readIfPresent(with: Macie2ClientTypes.BucketCountBySharedAccessType.read(from:))
        value.bucketStatisticsBySensitivity = try reader["bucketStatisticsBySensitivity"].readIfPresent(with: Macie2ClientTypes.BucketStatisticsBySensitivity.read(from:))
        value.classifiableObjectCount = try reader["classifiableObjectCount"].readIfPresent()
        value.classifiableSizeInBytes = try reader["classifiableSizeInBytes"].readIfPresent()
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.objectCount = try reader["objectCount"].readIfPresent()
        value.sizeInBytes = try reader["sizeInBytes"].readIfPresent()
        value.sizeInBytesCompressed = try reader["sizeInBytesCompressed"].readIfPresent()
        value.unclassifiableObjectCount = try reader["unclassifiableObjectCount"].readIfPresent(with: Macie2ClientTypes.ObjectLevelStatistics.read(from:))
        value.unclassifiableObjectSizeInBytes = try reader["unclassifiableObjectSizeInBytes"].readIfPresent(with: Macie2ClientTypes.ObjectLevelStatistics.read(from:))
        return value
    }
}

extension GetClassificationExportConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClassificationExportConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetClassificationExportConfigurationOutput()
        value.configuration = try reader["configuration"].readIfPresent(with: Macie2ClientTypes.ClassificationExportConfiguration.read(from:))
        return value
    }
}

extension GetClassificationScopeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClassificationScopeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetClassificationScopeOutput()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.s3 = try reader["s3"].readIfPresent(with: Macie2ClientTypes.S3ClassificationScope.read(from:))
        return value
    }
}

extension GetCustomDataIdentifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCustomDataIdentifierOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCustomDataIdentifierOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.deleted = try reader["deleted"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.ignoreWords = try reader["ignoreWords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.keywords = try reader["keywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.maximumMatchDistance = try reader["maximumMatchDistance"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.regex = try reader["regex"].readIfPresent()
        value.severityLevels = try reader["severityLevels"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.SeverityLevel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFindingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFindingsOutput()
        value.findings = try reader["findings"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Finding.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetFindingsFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFindingsFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFindingsFilterOutput()
        value.action = try reader["action"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.findingCriteria = try reader["findingCriteria"].readIfPresent(with: Macie2ClientTypes.FindingCriteria.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.position = try reader["position"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetFindingsPublicationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFindingsPublicationConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFindingsPublicationConfigurationOutput()
        value.securityHubConfiguration = try reader["securityHubConfiguration"].readIfPresent(with: Macie2ClientTypes.SecurityHubConfiguration.read(from:))
        return value
    }
}

extension GetFindingStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFindingStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFindingStatisticsOutput()
        value.countsByGroup = try reader["countsByGroup"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.GroupCount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetInvitationsCountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInvitationsCountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInvitationsCountOutput()
        value.invitationsCount = try reader["invitationsCount"].readIfPresent()
        return value
    }
}

extension GetMacieSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMacieSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMacieSessionOutput()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.findingPublishingFrequency = try reader["findingPublishingFrequency"].readIfPresent()
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetMasterAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMasterAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMasterAccountOutput()
        value.master = try reader["master"].readIfPresent(with: Macie2ClientTypes.Invitation.read(from:))
        return value
    }
}

extension GetMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMemberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMemberOutput()
        value.accountId = try reader["accountId"].readIfPresent()
        value.administratorAccountId = try reader["administratorAccountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.email = try reader["email"].readIfPresent()
        value.invitedAt = try reader["invitedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.masterAccountId = try reader["masterAccountId"].readIfPresent()
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetResourceProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceProfileOutput()
        value.profileUpdatedAt = try reader["profileUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sensitivityScore = try reader["sensitivityScore"].readIfPresent()
        value.sensitivityScoreOverridden = try reader["sensitivityScoreOverridden"].readIfPresent()
        value.statistics = try reader["statistics"].readIfPresent(with: Macie2ClientTypes.ResourceStatistics.read(from:))
        return value
    }
}

extension GetRevealConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRevealConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRevealConfigurationOutput()
        value.configuration = try reader["configuration"].readIfPresent(with: Macie2ClientTypes.RevealConfiguration.read(from:))
        value.retrievalConfiguration = try reader["retrievalConfiguration"].readIfPresent(with: Macie2ClientTypes.RetrievalConfiguration.read(from:))
        return value
    }
}

extension GetSensitiveDataOccurrencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSensitiveDataOccurrencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSensitiveDataOccurrencesOutput()
        value.error = try reader["error"].readIfPresent()
        value.sensitiveDataOccurrences = try reader["sensitiveDataOccurrences"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: Macie2ClientTypes.DetectedDataDetails.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetSensitiveDataOccurrencesAvailabilityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSensitiveDataOccurrencesAvailabilityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSensitiveDataOccurrencesAvailabilityOutput()
        value.code = try reader["code"].readIfPresent()
        value.reasons = try reader["reasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<Macie2ClientTypes.UnavailabilityReasonCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetSensitivityInspectionTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSensitivityInspectionTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSensitivityInspectionTemplateOutput()
        value.description = try reader["description"].readIfPresent()
        value.excludes = try reader["excludes"].readIfPresent(with: Macie2ClientTypes.SensitivityInspectionTemplateExcludes.read(from:))
        value.includes = try reader["includes"].readIfPresent(with: Macie2ClientTypes.SensitivityInspectionTemplateIncludes.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.sensitivityInspectionTemplateId = try reader["sensitivityInspectionTemplateId"].readIfPresent()
        return value
    }
}

extension GetUsageStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUsageStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUsageStatisticsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.records = try reader["records"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.UsageRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.timeRange = try reader["timeRange"].readIfPresent()
        return value
    }
}

extension GetUsageTotalsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUsageTotalsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUsageTotalsOutput()
        value.timeRange = try reader["timeRange"].readIfPresent()
        value.usageTotals = try reader["usageTotals"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.UsageTotal.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAllowListsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAllowListsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAllowListsOutput()
        value.allowLists = try reader["allowLists"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.AllowListSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAutomatedDiscoveryAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAutomatedDiscoveryAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAutomatedDiscoveryAccountsOutput()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.AutomatedDiscoveryAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListClassificationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClassificationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClassificationJobsOutput()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.JobSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListClassificationScopesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClassificationScopesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClassificationScopesOutput()
        value.classificationScopes = try reader["classificationScopes"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.ClassificationScopeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListCustomDataIdentifiersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCustomDataIdentifiersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCustomDataIdentifiersOutput()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.CustomDataIdentifierSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFindingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFindingsOutput()
        value.findingIds = try reader["findingIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListFindingsFiltersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFindingsFiltersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFindingsFiltersOutput()
        value.findingsFilterListItems = try reader["findingsFilterListItems"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.FindingsFilterListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInvitationsOutput()
        value.invitations = try reader["invitations"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Invitation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListManagedDataIdentifiersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListManagedDataIdentifiersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListManagedDataIdentifiersOutput()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.ManagedDataIdentifierSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMembersOutput()
        value.members = try reader["members"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Member.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListOrganizationAdminAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOrganizationAdminAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOrganizationAdminAccountsOutput()
        value.adminAccounts = try reader["adminAccounts"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.AdminAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListResourceProfileArtifactsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceProfileArtifactsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceProfileArtifactsOutput()
        value.artifacts = try reader["artifacts"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.ResourceProfileArtifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListResourceProfileDetectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceProfileDetectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceProfileDetectionsOutput()
        value.detections = try reader["detections"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Detection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListSensitivityInspectionTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSensitivityInspectionTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSensitivityInspectionTemplatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.sensitivityInspectionTemplates = try reader["sensitivityInspectionTemplates"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.SensitivityInspectionTemplatesEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PutClassificationExportConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutClassificationExportConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutClassificationExportConfigurationOutput()
        value.configuration = try reader["configuration"].readIfPresent(with: Macie2ClientTypes.ClassificationExportConfiguration.read(from:))
        return value
    }
}

extension PutFindingsPublicationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutFindingsPublicationConfigurationOutput {
        return PutFindingsPublicationConfigurationOutput()
    }
}

extension SearchResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchResourcesOutput()
        value.matchingResources = try reader["matchingResources"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.MatchingResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TestCustomDataIdentifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestCustomDataIdentifierOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TestCustomDataIdentifierOutput()
        value.matchCount = try reader["matchCount"].readIfPresent()
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAllowListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAllowListOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAllowListOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension UpdateAutomatedDiscoveryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAutomatedDiscoveryConfigurationOutput {
        return UpdateAutomatedDiscoveryConfigurationOutput()
    }
}

extension UpdateClassificationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClassificationJobOutput {
        return UpdateClassificationJobOutput()
    }
}

extension UpdateClassificationScopeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClassificationScopeOutput {
        return UpdateClassificationScopeOutput()
    }
}

extension UpdateFindingsFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFindingsFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFindingsFilterOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension UpdateMacieSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMacieSessionOutput {
        return UpdateMacieSessionOutput()
    }
}

extension UpdateMemberSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMemberSessionOutput {
        return UpdateMemberSessionOutput()
    }
}

extension UpdateOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateOrganizationConfigurationOutput {
        return UpdateOrganizationConfigurationOutput()
    }
}

extension UpdateResourceProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourceProfileOutput {
        return UpdateResourceProfileOutput()
    }
}

extension UpdateResourceProfileDetectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourceProfileDetectionsOutput {
        return UpdateResourceProfileDetectionsOutput()
    }
}

extension UpdateRevealConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRevealConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRevealConfigurationOutput()
        value.configuration = try reader["configuration"].readIfPresent(with: Macie2ClientTypes.RevealConfiguration.read(from:))
        value.retrievalConfiguration = try reader["retrievalConfiguration"].readIfPresent(with: Macie2ClientTypes.RetrievalConfiguration.read(from:))
        return value
    }
}

extension UpdateSensitivityInspectionTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSensitivityInspectionTemplateOutput {
        return UpdateSensitivityInspectionTemplateOutput()
    }
}

enum AcceptInvitationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetCustomDataIdentifiersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdateAutomatedDiscoveryAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAllowListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClassificationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCustomDataIdentifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFindingsFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSampleFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeclineInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAllowListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomDataIdentifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFindingsFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBucketsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClassificationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableMacieOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableOrganizationAdminAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateFromAdministratorAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateFromMasterAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableMacieOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableOrganizationAdminAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAdministratorAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAllowListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAutomatedDiscoveryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetClassificationExportConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetClassificationScopeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCustomDataIdentifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFindingsFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFindingsPublicationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFindingStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInvitationsCountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMacieSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMasterAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRevealConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSensitiveDataOccurrencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSensitiveDataOccurrencesAvailabilityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSensitivityInspectionTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUsageStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUsageTotalsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAllowListsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAutomatedDiscoveryAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClassificationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClassificationScopesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCustomDataIdentifiersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFindingsFiltersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListManagedDataIdentifiersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOrganizationAdminAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceProfileArtifactsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceProfileDetectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSensitivityInspectionTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutClassificationExportConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutFindingsPublicationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestCustomDataIdentifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAllowListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAutomatedDiscoveryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClassificationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClassificationScopeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFindingsFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMacieSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMemberSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourceProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourceProfileDetectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRevealConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSensitivityInspectionTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnprocessableEntityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnprocessableEntityException {
        let reader = baseError.errorBodyReader
        var value = UnprocessableEntityException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension Macie2ClientTypes.BatchGetCustomDataIdentifierSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BatchGetCustomDataIdentifierSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BatchGetCustomDataIdentifierSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.deleted = try reader["deleted"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AutomatedDiscoveryAccountUpdateError {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AutomatedDiscoveryAccountUpdateError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AutomatedDiscoveryAccountUpdateError()
        value.accountId = try reader["accountId"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.UnprocessedAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UnprocessedAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UnprocessedAccount()
        value.accountId = try reader["accountId"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketMetadata()
        value.accountId = try reader["accountId"].readIfPresent()
        value.allowsUnencryptedObjectUploads = try reader["allowsUnencryptedObjectUploads"].readIfPresent()
        value.automatedDiscoveryMonitoringStatus = try reader["automatedDiscoveryMonitoringStatus"].readIfPresent()
        value.bucketArn = try reader["bucketArn"].readIfPresent()
        value.bucketCreatedAt = try reader["bucketCreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.bucketName = try reader["bucketName"].readIfPresent()
        value.classifiableObjectCount = try reader["classifiableObjectCount"].readIfPresent()
        value.classifiableSizeInBytes = try reader["classifiableSizeInBytes"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.jobDetails = try reader["jobDetails"].readIfPresent(with: Macie2ClientTypes.JobDetails.read(from:))
        value.lastAutomatedDiscoveryTime = try reader["lastAutomatedDiscoveryTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.objectCount = try reader["objectCount"].readIfPresent()
        value.objectCountByEncryptionType = try reader["objectCountByEncryptionType"].readIfPresent(with: Macie2ClientTypes.ObjectCountByEncryptionType.read(from:))
        value.publicAccess = try reader["publicAccess"].readIfPresent(with: Macie2ClientTypes.BucketPublicAccess.read(from:))
        value.region = try reader["region"].readIfPresent()
        value.replicationDetails = try reader["replicationDetails"].readIfPresent(with: Macie2ClientTypes.ReplicationDetails.read(from:))
        value.sensitivityScore = try reader["sensitivityScore"].readIfPresent()
        value.serverSideEncryption = try reader["serverSideEncryption"].readIfPresent(with: Macie2ClientTypes.BucketServerSideEncryption.read(from:))
        value.sharedAccess = try reader["sharedAccess"].readIfPresent()
        value.sizeInBytes = try reader["sizeInBytes"].readIfPresent()
        value.sizeInBytesCompressed = try reader["sizeInBytesCompressed"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.unclassifiableObjectCount = try reader["unclassifiableObjectCount"].readIfPresent(with: Macie2ClientTypes.ObjectLevelStatistics.read(from:))
        value.unclassifiableObjectSizeInBytes = try reader["unclassifiableObjectSizeInBytes"].readIfPresent(with: Macie2ClientTypes.ObjectLevelStatistics.read(from:))
        value.versioning = try reader["versioning"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ObjectLevelStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ObjectLevelStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ObjectLevelStatistics()
        value.fileType = try reader["fileType"].readIfPresent()
        value.storageClass = try reader["storageClass"].readIfPresent()
        value.total = try reader["total"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.KeyValuePair {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.KeyValuePair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.KeyValuePair()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketServerSideEncryption {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketServerSideEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketServerSideEncryption()
        value.kmsMasterKeyId = try reader["kmsMasterKeyId"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ReplicationDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ReplicationDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ReplicationDetails()
        value.replicated = try reader["replicated"].readIfPresent()
        value.replicatedExternally = try reader["replicatedExternally"].readIfPresent()
        value.replicationAccounts = try reader["replicationAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.BucketPublicAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketPublicAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketPublicAccess()
        value.effectivePermission = try reader["effectivePermission"].readIfPresent()
        value.permissionConfiguration = try reader["permissionConfiguration"].readIfPresent(with: Macie2ClientTypes.BucketPermissionConfiguration.read(from:))
        return value
    }
}

extension Macie2ClientTypes.BucketPermissionConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketPermissionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketPermissionConfiguration()
        value.accountLevelPermissions = try reader["accountLevelPermissions"].readIfPresent(with: Macie2ClientTypes.AccountLevelPermissions.read(from:))
        value.bucketLevelPermissions = try reader["bucketLevelPermissions"].readIfPresent(with: Macie2ClientTypes.BucketLevelPermissions.read(from:))
        return value
    }
}

extension Macie2ClientTypes.BucketLevelPermissions {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketLevelPermissions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketLevelPermissions()
        value.accessControlList = try reader["accessControlList"].readIfPresent(with: Macie2ClientTypes.AccessControlList.read(from:))
        value.blockPublicAccess = try reader["blockPublicAccess"].readIfPresent(with: Macie2ClientTypes.BlockPublicAccess.read(from:))
        value.bucketPolicy = try reader["bucketPolicy"].readIfPresent(with: Macie2ClientTypes.BucketPolicy.read(from:))
        return value
    }
}

extension Macie2ClientTypes.BucketPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketPolicy()
        value.allowsPublicReadAccess = try reader["allowsPublicReadAccess"].readIfPresent()
        value.allowsPublicWriteAccess = try reader["allowsPublicWriteAccess"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BlockPublicAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BlockPublicAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BlockPublicAccess()
        value.blockPublicAcls = try reader["blockPublicAcls"].readIfPresent()
        value.blockPublicPolicy = try reader["blockPublicPolicy"].readIfPresent()
        value.ignorePublicAcls = try reader["ignorePublicAcls"].readIfPresent()
        value.restrictPublicBuckets = try reader["restrictPublicBuckets"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AccessControlList {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AccessControlList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AccessControlList()
        value.allowsPublicReadAccess = try reader["allowsPublicReadAccess"].readIfPresent()
        value.allowsPublicWriteAccess = try reader["allowsPublicWriteAccess"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AccountLevelPermissions {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AccountLevelPermissions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AccountLevelPermissions()
        value.blockPublicAccess = try reader["blockPublicAccess"].readIfPresent(with: Macie2ClientTypes.BlockPublicAccess.read(from:))
        return value
    }
}

extension Macie2ClientTypes.ObjectCountByEncryptionType {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ObjectCountByEncryptionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ObjectCountByEncryptionType()
        value.customerManaged = try reader["customerManaged"].readIfPresent()
        value.kmsManaged = try reader["kmsManaged"].readIfPresent()
        value.s3Managed = try reader["s3Managed"].readIfPresent()
        value.unencrypted = try reader["unencrypted"].readIfPresent()
        value.unknown = try reader["unknown"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.JobDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.JobDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.JobDetails()
        value.isDefinedInJob = try reader["isDefinedInJob"].readIfPresent()
        value.isMonitoredByJob = try reader["isMonitoredByJob"].readIfPresent()
        value.lastJobId = try reader["lastJobId"].readIfPresent()
        value.lastJobRunTime = try reader["lastJobRunTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension Macie2ClientTypes.LastRunErrorStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.LastRunErrorStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.LastRunErrorStatus()
        value.code = try reader["code"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.S3JobDefinition {

    static func write(value: Macie2ClientTypes.S3JobDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketCriteria"].write(value.bucketCriteria, with: Macie2ClientTypes.S3BucketCriteriaForJob.write(value:to:))
        try writer["bucketDefinitions"].writeList(value.bucketDefinitions, memberWritingClosure: Macie2ClientTypes.S3BucketDefinitionForJob.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["scoping"].write(value.scoping, with: Macie2ClientTypes.Scoping.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3JobDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3JobDefinition()
        value.bucketCriteria = try reader["bucketCriteria"].readIfPresent(with: Macie2ClientTypes.S3BucketCriteriaForJob.read(from:))
        value.bucketDefinitions = try reader["bucketDefinitions"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.S3BucketDefinitionForJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scoping = try reader["scoping"].readIfPresent(with: Macie2ClientTypes.Scoping.read(from:))
        return value
    }
}

extension Macie2ClientTypes.Scoping {

    static func write(value: Macie2ClientTypes.Scoping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].write(value.excludes, with: Macie2ClientTypes.JobScopingBlock.write(value:to:))
        try writer["includes"].write(value.includes, with: Macie2ClientTypes.JobScopingBlock.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Scoping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Scoping()
        value.excludes = try reader["excludes"].readIfPresent(with: Macie2ClientTypes.JobScopingBlock.read(from:))
        value.includes = try reader["includes"].readIfPresent(with: Macie2ClientTypes.JobScopingBlock.read(from:))
        return value
    }
}

extension Macie2ClientTypes.JobScopingBlock {

    static func write(value: Macie2ClientTypes.JobScopingBlock?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["and"].writeList(value.and, memberWritingClosure: Macie2ClientTypes.JobScopeTerm.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.JobScopingBlock {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.JobScopingBlock()
        value.and = try reader["and"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.JobScopeTerm.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.JobScopeTerm {

    static func write(value: Macie2ClientTypes.JobScopeTerm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["simpleScopeTerm"].write(value.simpleScopeTerm, with: Macie2ClientTypes.SimpleScopeTerm.write(value:to:))
        try writer["tagScopeTerm"].write(value.tagScopeTerm, with: Macie2ClientTypes.TagScopeTerm.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.JobScopeTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.JobScopeTerm()
        value.simpleScopeTerm = try reader["simpleScopeTerm"].readIfPresent(with: Macie2ClientTypes.SimpleScopeTerm.read(from:))
        value.tagScopeTerm = try reader["tagScopeTerm"].readIfPresent(with: Macie2ClientTypes.TagScopeTerm.read(from:))
        return value
    }
}

extension Macie2ClientTypes.TagScopeTerm {

    static func write(value: Macie2ClientTypes.TagScopeTerm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["key"].write(value.key)
        try writer["tagValues"].writeList(value.tagValues, memberWritingClosure: Macie2ClientTypes.TagValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["target"].write(value.target)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.TagScopeTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.TagScopeTerm()
        value.comparator = try reader["comparator"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.tagValues = try reader["tagValues"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.TagValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.target = try reader["target"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.TagValuePair {

    static func write(value: Macie2ClientTypes.TagValuePair?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.TagValuePair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.TagValuePair()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.SimpleScopeTerm {

    static func write(value: Macie2ClientTypes.SimpleScopeTerm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["key"].write(value.key)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SimpleScopeTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SimpleScopeTerm()
        value.comparator = try reader["comparator"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.S3BucketDefinitionForJob {

    static func write(value: Macie2ClientTypes.S3BucketDefinitionForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountId"].write(value.accountId)
        try writer["buckets"].writeList(value.buckets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3BucketDefinitionForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3BucketDefinitionForJob()
        value.accountId = try reader["accountId"].readIfPresent() ?? ""
        value.buckets = try reader["buckets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension Macie2ClientTypes.S3BucketCriteriaForJob {

    static func write(value: Macie2ClientTypes.S3BucketCriteriaForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].write(value.excludes, with: Macie2ClientTypes.CriteriaBlockForJob.write(value:to:))
        try writer["includes"].write(value.includes, with: Macie2ClientTypes.CriteriaBlockForJob.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3BucketCriteriaForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3BucketCriteriaForJob()
        value.excludes = try reader["excludes"].readIfPresent(with: Macie2ClientTypes.CriteriaBlockForJob.read(from:))
        value.includes = try reader["includes"].readIfPresent(with: Macie2ClientTypes.CriteriaBlockForJob.read(from:))
        return value
    }
}

extension Macie2ClientTypes.CriteriaBlockForJob {

    static func write(value: Macie2ClientTypes.CriteriaBlockForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["and"].writeList(value.and, memberWritingClosure: Macie2ClientTypes.CriteriaForJob.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.CriteriaBlockForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.CriteriaBlockForJob()
        value.and = try reader["and"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.CriteriaForJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.CriteriaForJob {

    static func write(value: Macie2ClientTypes.CriteriaForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["simpleCriterion"].write(value.simpleCriterion, with: Macie2ClientTypes.SimpleCriterionForJob.write(value:to:))
        try writer["tagCriterion"].write(value.tagCriterion, with: Macie2ClientTypes.TagCriterionForJob.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.CriteriaForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.CriteriaForJob()
        value.simpleCriterion = try reader["simpleCriterion"].readIfPresent(with: Macie2ClientTypes.SimpleCriterionForJob.read(from:))
        value.tagCriterion = try reader["tagCriterion"].readIfPresent(with: Macie2ClientTypes.TagCriterionForJob.read(from:))
        return value
    }
}

extension Macie2ClientTypes.TagCriterionForJob {

    static func write(value: Macie2ClientTypes.TagCriterionForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["tagValues"].writeList(value.tagValues, memberWritingClosure: Macie2ClientTypes.TagCriterionPairForJob.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.TagCriterionForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.TagCriterionForJob()
        value.comparator = try reader["comparator"].readIfPresent()
        value.tagValues = try reader["tagValues"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.TagCriterionPairForJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.TagCriterionPairForJob {

    static func write(value: Macie2ClientTypes.TagCriterionPairForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.TagCriterionPairForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.TagCriterionPairForJob()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.SimpleCriterionForJob {

    static func write(value: Macie2ClientTypes.SimpleCriterionForJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["key"].write(value.key)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SimpleCriterionForJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SimpleCriterionForJob()
        value.comparator = try reader["comparator"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.JobScheduleFrequency {

    static func write(value: Macie2ClientTypes.JobScheduleFrequency?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dailySchedule"].write(value.dailySchedule, with: Macie2ClientTypes.DailySchedule.write(value:to:))
        try writer["monthlySchedule"].write(value.monthlySchedule, with: Macie2ClientTypes.MonthlySchedule.write(value:to:))
        try writer["weeklySchedule"].write(value.weeklySchedule, with: Macie2ClientTypes.WeeklySchedule.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.JobScheduleFrequency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.JobScheduleFrequency()
        value.dailySchedule = try reader["dailySchedule"].readIfPresent(with: Macie2ClientTypes.DailySchedule.read(from:))
        value.monthlySchedule = try reader["monthlySchedule"].readIfPresent(with: Macie2ClientTypes.MonthlySchedule.read(from:))
        value.weeklySchedule = try reader["weeklySchedule"].readIfPresent(with: Macie2ClientTypes.WeeklySchedule.read(from:))
        return value
    }
}

extension Macie2ClientTypes.WeeklySchedule {

    static func write(value: Macie2ClientTypes.WeeklySchedule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dayOfWeek"].write(value.dayOfWeek)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.WeeklySchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.WeeklySchedule()
        value.dayOfWeek = try reader["dayOfWeek"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.MonthlySchedule {

    static func write(value: Macie2ClientTypes.MonthlySchedule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dayOfMonth"].write(value.dayOfMonth)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.MonthlySchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.MonthlySchedule()
        value.dayOfMonth = try reader["dayOfMonth"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.DailySchedule {

    static func write(value: Macie2ClientTypes.DailySchedule?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.DailySchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return Macie2ClientTypes.DailySchedule()
    }
}

extension Macie2ClientTypes.Statistics {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Statistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Statistics()
        value.approximateNumberOfObjectsToProcess = try reader["approximateNumberOfObjectsToProcess"].readIfPresent()
        value.numberOfRuns = try reader["numberOfRuns"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.UserPausedDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UserPausedDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UserPausedDetails()
        value.jobExpiresAt = try reader["jobExpiresAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.jobImminentExpirationHealthEventArn = try reader["jobImminentExpirationHealthEventArn"].readIfPresent()
        value.jobPausedAt = try reader["jobPausedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension Macie2ClientTypes.Invitation {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Invitation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Invitation()
        value.accountId = try reader["accountId"].readIfPresent()
        value.invitationId = try reader["invitationId"].readIfPresent()
        value.invitedAt = try reader["invitedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AllowListCriteria {

    static func write(value: Macie2ClientTypes.AllowListCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["regex"].write(value.regex)
        try writer["s3WordsList"].write(value.s3WordsList, with: Macie2ClientTypes.S3WordsList.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AllowListCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AllowListCriteria()
        value.regex = try reader["regex"].readIfPresent()
        value.s3WordsList = try reader["s3WordsList"].readIfPresent(with: Macie2ClientTypes.S3WordsList.read(from:))
        return value
    }
}

extension Macie2ClientTypes.S3WordsList {

    static func write(value: Macie2ClientTypes.S3WordsList?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["objectKey"].write(value.objectKey)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3WordsList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3WordsList()
        value.bucketName = try reader["bucketName"].readIfPresent() ?? ""
        value.objectKey = try reader["objectKey"].readIfPresent() ?? ""
        return value
    }
}

extension Macie2ClientTypes.AllowListStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AllowListStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AllowListStatus()
        value.code = try reader["code"].readIfPresent() ?? .sdkUnknown("")
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketCountByEffectivePermission {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketCountByEffectivePermission {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketCountByEffectivePermission()
        value.publiclyAccessible = try reader["publiclyAccessible"].readIfPresent()
        value.publiclyReadable = try reader["publiclyReadable"].readIfPresent()
        value.publiclyWritable = try reader["publiclyWritable"].readIfPresent()
        value.unknown = try reader["unknown"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketCountByEncryptionType {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketCountByEncryptionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketCountByEncryptionType()
        value.kmsManaged = try reader["kmsManaged"].readIfPresent()
        value.s3Managed = try reader["s3Managed"].readIfPresent()
        value.unencrypted = try reader["unencrypted"].readIfPresent()
        value.unknown = try reader["unknown"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads()
        value.allowsUnencryptedObjectUploads = try reader["allowsUnencryptedObjectUploads"].readIfPresent()
        value.deniesUnencryptedObjectUploads = try reader["deniesUnencryptedObjectUploads"].readIfPresent()
        value.unknown = try reader["unknown"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketCountBySharedAccessType {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketCountBySharedAccessType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketCountBySharedAccessType()
        value.external = try reader["external"].readIfPresent()
        value.`internal` = try reader["internal"].readIfPresent()
        value.notShared = try reader["notShared"].readIfPresent()
        value.unknown = try reader["unknown"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.BucketStatisticsBySensitivity {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.BucketStatisticsBySensitivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.BucketStatisticsBySensitivity()
        value.classificationError = try reader["classificationError"].readIfPresent(with: Macie2ClientTypes.SensitivityAggregations.read(from:))
        value.notClassified = try reader["notClassified"].readIfPresent(with: Macie2ClientTypes.SensitivityAggregations.read(from:))
        value.notSensitive = try reader["notSensitive"].readIfPresent(with: Macie2ClientTypes.SensitivityAggregations.read(from:))
        value.sensitive = try reader["sensitive"].readIfPresent(with: Macie2ClientTypes.SensitivityAggregations.read(from:))
        return value
    }
}

extension Macie2ClientTypes.SensitivityAggregations {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SensitivityAggregations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SensitivityAggregations()
        value.classifiableSizeInBytes = try reader["classifiableSizeInBytes"].readIfPresent()
        value.publiclyAccessibleCount = try reader["publiclyAccessibleCount"].readIfPresent()
        value.totalCount = try reader["totalCount"].readIfPresent()
        value.totalSizeInBytes = try reader["totalSizeInBytes"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ClassificationExportConfiguration {

    static func write(value: Macie2ClientTypes.ClassificationExportConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Destination"].write(value.s3Destination, with: Macie2ClientTypes.S3Destination.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ClassificationExportConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ClassificationExportConfiguration()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: Macie2ClientTypes.S3Destination.read(from:))
        return value
    }
}

extension Macie2ClientTypes.S3Destination {

    static func write(value: Macie2ClientTypes.S3Destination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["keyPrefix"].write(value.keyPrefix)
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3Destination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3Destination()
        value.bucketName = try reader["bucketName"].readIfPresent() ?? ""
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent() ?? ""
        return value
    }
}

extension Macie2ClientTypes.S3ClassificationScope {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3ClassificationScope {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3ClassificationScope()
        value.excludes = try reader["excludes"].readIfPresent(with: Macie2ClientTypes.S3ClassificationScopeExclusion.read(from:))
        return value
    }
}

extension Macie2ClientTypes.S3ClassificationScopeExclusion {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3ClassificationScopeExclusion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3ClassificationScopeExclusion()
        value.bucketNames = try reader["bucketNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension Macie2ClientTypes.SeverityLevel {

    static func write(value: Macie2ClientTypes.SeverityLevel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["occurrencesThreshold"].write(value.occurrencesThreshold)
        try writer["severity"].write(value.severity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SeverityLevel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SeverityLevel()
        value.occurrencesThreshold = try reader["occurrencesThreshold"].readIfPresent() ?? 0
        value.severity = try reader["severity"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension Macie2ClientTypes.Finding {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Finding {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Finding()
        value.accountId = try reader["accountId"].readIfPresent()
        value.archived = try reader["archived"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.classificationDetails = try reader["classificationDetails"].readIfPresent(with: Macie2ClientTypes.ClassificationDetails.read(from:))
        value.count = try reader["count"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.partition = try reader["partition"].readIfPresent()
        value.policyDetails = try reader["policyDetails"].readIfPresent(with: Macie2ClientTypes.PolicyDetails.read(from:))
        value.region = try reader["region"].readIfPresent()
        value.resourcesAffected = try reader["resourcesAffected"].readIfPresent(with: Macie2ClientTypes.ResourcesAffected.read(from:))
        value.sample = try reader["sample"].readIfPresent()
        value.schemaVersion = try reader["schemaVersion"].readIfPresent()
        value.severity = try reader["severity"].readIfPresent(with: Macie2ClientTypes.Severity.read(from:))
        value.title = try reader["title"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension Macie2ClientTypes.Severity {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Severity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Severity()
        value.description = try reader["description"].readIfPresent()
        value.score = try reader["score"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ResourcesAffected {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ResourcesAffected {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ResourcesAffected()
        value.s3Bucket = try reader["s3Bucket"].readIfPresent(with: Macie2ClientTypes.S3Bucket.read(from:))
        value.s3Object = try reader["s3Object"].readIfPresent(with: Macie2ClientTypes.S3Object.read(from:))
        return value
    }
}

extension Macie2ClientTypes.S3Object {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3Object {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3Object()
        value.bucketArn = try reader["bucketArn"].readIfPresent()
        value.eTag = try reader["eTag"].readIfPresent()
        value.`extension` = try reader["extension"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.lastModified = try reader["lastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.path = try reader["path"].readIfPresent()
        value.publicAccess = try reader["publicAccess"].readIfPresent()
        value.serverSideEncryption = try reader["serverSideEncryption"].readIfPresent(with: Macie2ClientTypes.ServerSideEncryption.read(from:))
        value.size = try reader["size"].readIfPresent()
        value.storageClass = try reader["storageClass"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.versionId = try reader["versionId"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ServerSideEncryption {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ServerSideEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ServerSideEncryption()
        value.encryptionType = try reader["encryptionType"].readIfPresent()
        value.kmsMasterKeyId = try reader["kmsMasterKeyId"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.S3Bucket {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3Bucket {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3Bucket()
        value.allowsUnencryptedObjectUploads = try reader["allowsUnencryptedObjectUploads"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.defaultServerSideEncryption = try reader["defaultServerSideEncryption"].readIfPresent(with: Macie2ClientTypes.ServerSideEncryption.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent(with: Macie2ClientTypes.S3BucketOwner.read(from:))
        value.publicAccess = try reader["publicAccess"].readIfPresent(with: Macie2ClientTypes.BucketPublicAccess.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.S3BucketOwner {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.S3BucketOwner {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.S3BucketOwner()
        value.displayName = try reader["displayName"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.PolicyDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.PolicyDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.PolicyDetails()
        value.action = try reader["action"].readIfPresent(with: Macie2ClientTypes.FindingAction.read(from:))
        value.actor = try reader["actor"].readIfPresent(with: Macie2ClientTypes.FindingActor.read(from:))
        return value
    }
}

extension Macie2ClientTypes.FindingActor {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.FindingActor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.FindingActor()
        value.domainDetails = try reader["domainDetails"].readIfPresent(with: Macie2ClientTypes.DomainDetails.read(from:))
        value.ipAddressDetails = try reader["ipAddressDetails"].readIfPresent(with: Macie2ClientTypes.IpAddressDetails.read(from:))
        value.userIdentity = try reader["userIdentity"].readIfPresent(with: Macie2ClientTypes.UserIdentity.read(from:))
        return value
    }
}

extension Macie2ClientTypes.UserIdentity {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UserIdentity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UserIdentity()
        value.assumedRole = try reader["assumedRole"].readIfPresent(with: Macie2ClientTypes.AssumedRole.read(from:))
        value.awsAccount = try reader["awsAccount"].readIfPresent(with: Macie2ClientTypes.AwsAccount.read(from:))
        value.awsService = try reader["awsService"].readIfPresent(with: Macie2ClientTypes.AwsService.read(from:))
        value.federatedUser = try reader["federatedUser"].readIfPresent(with: Macie2ClientTypes.FederatedUser.read(from:))
        value.iamUser = try reader["iamUser"].readIfPresent(with: Macie2ClientTypes.IamUser.read(from:))
        value.root = try reader["root"].readIfPresent(with: Macie2ClientTypes.UserIdentityRoot.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.UserIdentityRoot {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UserIdentityRoot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UserIdentityRoot()
        value.accountId = try reader["accountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.IamUser {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.IamUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.IamUser()
        value.accountId = try reader["accountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        value.userName = try reader["userName"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.FederatedUser {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.FederatedUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.FederatedUser()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        value.sessionContext = try reader["sessionContext"].readIfPresent(with: Macie2ClientTypes.SessionContext.read(from:))
        return value
    }
}

extension Macie2ClientTypes.SessionContext {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SessionContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SessionContext()
        value.attributes = try reader["attributes"].readIfPresent(with: Macie2ClientTypes.SessionContextAttributes.read(from:))
        value.sessionIssuer = try reader["sessionIssuer"].readIfPresent(with: Macie2ClientTypes.SessionIssuer.read(from:))
        return value
    }
}

extension Macie2ClientTypes.SessionIssuer {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SessionIssuer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SessionIssuer()
        value.accountId = try reader["accountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.userName = try reader["userName"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.SessionContextAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SessionContextAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SessionContextAttributes()
        value.creationDate = try reader["creationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.mfaAuthenticated = try reader["mfaAuthenticated"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AwsService {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AwsService {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AwsService()
        value.invokedBy = try reader["invokedBy"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AwsAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AwsAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AwsAccount()
        value.accountId = try reader["accountId"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AssumedRole {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AssumedRole {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AssumedRole()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        value.sessionContext = try reader["sessionContext"].readIfPresent(with: Macie2ClientTypes.SessionContext.read(from:))
        return value
    }
}

extension Macie2ClientTypes.IpAddressDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.IpAddressDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.IpAddressDetails()
        value.ipAddressV4 = try reader["ipAddressV4"].readIfPresent()
        value.ipCity = try reader["ipCity"].readIfPresent(with: Macie2ClientTypes.IpCity.read(from:))
        value.ipCountry = try reader["ipCountry"].readIfPresent(with: Macie2ClientTypes.IpCountry.read(from:))
        value.ipGeoLocation = try reader["ipGeoLocation"].readIfPresent(with: Macie2ClientTypes.IpGeoLocation.read(from:))
        value.ipOwner = try reader["ipOwner"].readIfPresent(with: Macie2ClientTypes.IpOwner.read(from:))
        return value
    }
}

extension Macie2ClientTypes.IpOwner {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.IpOwner {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.IpOwner()
        value.asn = try reader["asn"].readIfPresent()
        value.asnOrg = try reader["asnOrg"].readIfPresent()
        value.isp = try reader["isp"].readIfPresent()
        value.org = try reader["org"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.IpGeoLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.IpGeoLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.IpGeoLocation()
        value.lat = try reader["lat"].readIfPresent()
        value.lon = try reader["lon"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.IpCountry {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.IpCountry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.IpCountry()
        value.code = try reader["code"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.IpCity {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.IpCity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.IpCity()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.DomainDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.DomainDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.DomainDetails()
        value.domainName = try reader["domainName"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.FindingAction {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.FindingAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.FindingAction()
        value.actionType = try reader["actionType"].readIfPresent()
        value.apiCallDetails = try reader["apiCallDetails"].readIfPresent(with: Macie2ClientTypes.ApiCallDetails.read(from:))
        return value
    }
}

extension Macie2ClientTypes.ApiCallDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ApiCallDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ApiCallDetails()
        value.api = try reader["api"].readIfPresent()
        value.apiServiceName = try reader["apiServiceName"].readIfPresent()
        value.firstSeen = try reader["firstSeen"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSeen = try reader["lastSeen"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension Macie2ClientTypes.ClassificationDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ClassificationDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ClassificationDetails()
        value.detailedResultsLocation = try reader["detailedResultsLocation"].readIfPresent()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.originType = try reader["originType"].readIfPresent()
        value.result = try reader["result"].readIfPresent(with: Macie2ClientTypes.ClassificationResult.read(from:))
        return value
    }
}

extension Macie2ClientTypes.ClassificationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ClassificationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ClassificationResult()
        value.additionalOccurrences = try reader["additionalOccurrences"].readIfPresent()
        value.customDataIdentifiers = try reader["customDataIdentifiers"].readIfPresent(with: Macie2ClientTypes.CustomDataIdentifiers.read(from:))
        value.mimeType = try reader["mimeType"].readIfPresent()
        value.sensitiveData = try reader["sensitiveData"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.SensitiveDataItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sizeClassified = try reader["sizeClassified"].readIfPresent()
        value.status = try reader["status"].readIfPresent(with: Macie2ClientTypes.ClassificationResultStatus.read(from:))
        return value
    }
}

extension Macie2ClientTypes.ClassificationResultStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ClassificationResultStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ClassificationResultStatus()
        value.code = try reader["code"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.SensitiveDataItem {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SensitiveDataItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SensitiveDataItem()
        value.category = try reader["category"].readIfPresent()
        value.detections = try reader["detections"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.DefaultDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalCount = try reader["totalCount"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.DefaultDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.DefaultDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.DefaultDetection()
        value.count = try reader["count"].readIfPresent()
        value.occurrences = try reader["occurrences"].readIfPresent(with: Macie2ClientTypes.Occurrences.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.Occurrences {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Occurrences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Occurrences()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Cell.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lineRanges = try reader["lineRanges"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Range.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.offsetRanges = try reader["offsetRanges"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Range.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pages = try reader["pages"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Page.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.records = try reader["records"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.Record.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.Record {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Record {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Record()
        value.jsonPath = try reader["jsonPath"].readIfPresent()
        value.recordIndex = try reader["recordIndex"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.Page {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Page {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Page()
        value.lineRange = try reader["lineRange"].readIfPresent(with: Macie2ClientTypes.Range.read(from:))
        value.offsetRange = try reader["offsetRange"].readIfPresent(with: Macie2ClientTypes.Range.read(from:))
        value.pageNumber = try reader["pageNumber"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.Range {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Range {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Range()
        value.end = try reader["end"].readIfPresent()
        value.start = try reader["start"].readIfPresent()
        value.startColumn = try reader["startColumn"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.Cell {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Cell {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Cell()
        value.cellReference = try reader["cellReference"].readIfPresent()
        value.column = try reader["column"].readIfPresent()
        value.columnName = try reader["columnName"].readIfPresent()
        value.row = try reader["row"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.CustomDataIdentifiers {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.CustomDataIdentifiers {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.CustomDataIdentifiers()
        value.detections = try reader["detections"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.CustomDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalCount = try reader["totalCount"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.CustomDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.CustomDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.CustomDetection()
        value.arn = try reader["arn"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.occurrences = try reader["occurrences"].readIfPresent(with: Macie2ClientTypes.Occurrences.read(from:))
        return value
    }
}

extension Macie2ClientTypes.FindingCriteria {

    static func write(value: Macie2ClientTypes.FindingCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["criterion"].writeMap(value.criterion, valueWritingClosure: Macie2ClientTypes.CriterionAdditionalProperties.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.FindingCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.FindingCriteria()
        value.criterion = try reader["criterion"].readMapIfPresent(valueReadingClosure: Macie2ClientTypes.CriterionAdditionalProperties.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.CriterionAdditionalProperties {

    static func write(value: Macie2ClientTypes.CriterionAdditionalProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eq"].writeList(value.eq, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["eqExactMatch"].writeList(value.eqExactMatch, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["gt"].write(value.gt)
        try writer["gte"].write(value.gte)
        try writer["lt"].write(value.lt)
        try writer["lte"].write(value.lte)
        try writer["neq"].writeList(value.neq, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.CriterionAdditionalProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.CriterionAdditionalProperties()
        value.eq = try reader["eq"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.eqExactMatch = try reader["eqExactMatch"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.gt = try reader["gt"].readIfPresent()
        value.gte = try reader["gte"].readIfPresent()
        value.lt = try reader["lt"].readIfPresent()
        value.lte = try reader["lte"].readIfPresent()
        value.neq = try reader["neq"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.SecurityHubConfiguration {

    static func write(value: Macie2ClientTypes.SecurityHubConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["publishClassificationFindings"].write(value.publishClassificationFindings)
        try writer["publishPolicyFindings"].write(value.publishPolicyFindings)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SecurityHubConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SecurityHubConfiguration()
        value.publishClassificationFindings = try reader["publishClassificationFindings"].readIfPresent() ?? false
        value.publishPolicyFindings = try reader["publishPolicyFindings"].readIfPresent() ?? false
        return value
    }
}

extension Macie2ClientTypes.GroupCount {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.GroupCount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.GroupCount()
        value.count = try reader["count"].readIfPresent()
        value.groupKey = try reader["groupKey"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ResourceStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ResourceStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ResourceStatistics()
        value.totalBytesClassified = try reader["totalBytesClassified"].readIfPresent()
        value.totalDetections = try reader["totalDetections"].readIfPresent()
        value.totalDetectionsSuppressed = try reader["totalDetectionsSuppressed"].readIfPresent()
        value.totalItemsClassified = try reader["totalItemsClassified"].readIfPresent()
        value.totalItemsSensitive = try reader["totalItemsSensitive"].readIfPresent()
        value.totalItemsSkipped = try reader["totalItemsSkipped"].readIfPresent()
        value.totalItemsSkippedInvalidEncryption = try reader["totalItemsSkippedInvalidEncryption"].readIfPresent()
        value.totalItemsSkippedInvalidKms = try reader["totalItemsSkippedInvalidKms"].readIfPresent()
        value.totalItemsSkippedPermissionDenied = try reader["totalItemsSkippedPermissionDenied"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.RevealConfiguration {

    static func write(value: Macie2ClientTypes.RevealConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.RevealConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.RevealConfiguration()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension Macie2ClientTypes.RetrievalConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.RetrievalConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.RetrievalConfiguration()
        value.externalId = try reader["externalId"].readIfPresent()
        value.retrievalMode = try reader["retrievalMode"].readIfPresent() ?? .sdkUnknown("")
        value.roleName = try reader["roleName"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.DetectedDataDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.DetectedDataDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.DetectedDataDetails()
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension Macie2ClientTypes.SensitivityInspectionTemplateExcludes {

    static func write(value: Macie2ClientTypes.SensitivityInspectionTemplateExcludes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["managedDataIdentifierIds"].writeList(value.managedDataIdentifierIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SensitivityInspectionTemplateExcludes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SensitivityInspectionTemplateExcludes()
        value.managedDataIdentifierIds = try reader["managedDataIdentifierIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.SensitivityInspectionTemplateIncludes {

    static func write(value: Macie2ClientTypes.SensitivityInspectionTemplateIncludes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowListIds"].writeList(value.allowListIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["customDataIdentifierIds"].writeList(value.customDataIdentifierIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["managedDataIdentifierIds"].writeList(value.managedDataIdentifierIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SensitivityInspectionTemplateIncludes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SensitivityInspectionTemplateIncludes()
        value.allowListIds = try reader["allowListIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.customDataIdentifierIds = try reader["customDataIdentifierIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedDataIdentifierIds = try reader["managedDataIdentifierIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.UsageRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UsageRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UsageRecord()
        value.accountId = try reader["accountId"].readIfPresent()
        value.automatedDiscoveryFreeTrialStartDate = try reader["automatedDiscoveryFreeTrialStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.freeTrialStartDate = try reader["freeTrialStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.usage = try reader["usage"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.UsageByAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.UsageByAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UsageByAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UsageByAccount()
        value.currency = try reader["currency"].readIfPresent()
        value.estimatedCost = try reader["estimatedCost"].readIfPresent()
        value.serviceLimit = try reader["serviceLimit"].readIfPresent(with: Macie2ClientTypes.ServiceLimit.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ServiceLimit {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ServiceLimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ServiceLimit()
        value.isServiceLimited = try reader["isServiceLimited"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.UsageTotal {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.UsageTotal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.UsageTotal()
        value.currency = try reader["currency"].readIfPresent()
        value.estimatedCost = try reader["estimatedCost"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.AllowListSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AllowListSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AllowListSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension Macie2ClientTypes.AutomatedDiscoveryAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AutomatedDiscoveryAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AutomatedDiscoveryAccount()
        value.accountId = try reader["accountId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.JobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.JobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.JobSummary()
        value.bucketCriteria = try reader["bucketCriteria"].readIfPresent(with: Macie2ClientTypes.S3BucketCriteriaForJob.read(from:))
        value.bucketDefinitions = try reader["bucketDefinitions"].readListIfPresent(memberReadingClosure: Macie2ClientTypes.S3BucketDefinitionForJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.jobId = try reader["jobId"].readIfPresent()
        value.jobStatus = try reader["jobStatus"].readIfPresent()
        value.jobType = try reader["jobType"].readIfPresent()
        value.lastRunErrorStatus = try reader["lastRunErrorStatus"].readIfPresent(with: Macie2ClientTypes.LastRunErrorStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.userPausedDetails = try reader["userPausedDetails"].readIfPresent(with: Macie2ClientTypes.UserPausedDetails.read(from:))
        return value
    }
}

extension Macie2ClientTypes.ClassificationScopeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ClassificationScopeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ClassificationScopeSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.CustomDataIdentifierSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.CustomDataIdentifierSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.CustomDataIdentifierSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.FindingsFilterListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.FindingsFilterListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.FindingsFilterListItem()
        value.action = try reader["action"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension Macie2ClientTypes.ManagedDataIdentifierSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ManagedDataIdentifierSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ManagedDataIdentifierSummary()
        value.category = try reader["category"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.Member {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Member {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Member()
        value.accountId = try reader["accountId"].readIfPresent()
        value.administratorAccountId = try reader["administratorAccountId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.email = try reader["email"].readIfPresent()
        value.invitedAt = try reader["invitedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.masterAccountId = try reader["masterAccountId"].readIfPresent()
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension Macie2ClientTypes.AdminAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.AdminAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.AdminAccount()
        value.accountId = try reader["accountId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.ResourceProfileArtifact {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.ResourceProfileArtifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.ResourceProfileArtifact()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.classificationResultStatus = try reader["classificationResultStatus"].readIfPresent() ?? ""
        value.sensitive = try reader["sensitive"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.Detection {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.Detection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.Detection()
        value.arn = try reader["arn"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.suppressed = try reader["suppressed"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.SensitivityInspectionTemplatesEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.SensitivityInspectionTemplatesEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.SensitivityInspectionTemplatesEntry()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension Macie2ClientTypes.MatchingResource {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.MatchingResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.MatchingResource()
        value.matchingBucket = try reader["matchingBucket"].readIfPresent(with: Macie2ClientTypes.MatchingBucket.read(from:))
        return value
    }
}

extension Macie2ClientTypes.MatchingBucket {

    static func read(from reader: SmithyJSON.Reader) throws -> Macie2ClientTypes.MatchingBucket {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Macie2ClientTypes.MatchingBucket()
        value.accountId = try reader["accountId"].readIfPresent()
        value.automatedDiscoveryMonitoringStatus = try reader["automatedDiscoveryMonitoringStatus"].readIfPresent()
        value.bucketName = try reader["bucketName"].readIfPresent()
        value.classifiableObjectCount = try reader["classifiableObjectCount"].readIfPresent()
        value.classifiableSizeInBytes = try reader["classifiableSizeInBytes"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.jobDetails = try reader["jobDetails"].readIfPresent(with: Macie2ClientTypes.JobDetails.read(from:))
        value.lastAutomatedDiscoveryTime = try reader["lastAutomatedDiscoveryTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.objectCount = try reader["objectCount"].readIfPresent()
        value.objectCountByEncryptionType = try reader["objectCountByEncryptionType"].readIfPresent(with: Macie2ClientTypes.ObjectCountByEncryptionType.read(from:))
        value.sensitivityScore = try reader["sensitivityScore"].readIfPresent()
        value.sizeInBytes = try reader["sizeInBytes"].readIfPresent()
        value.sizeInBytesCompressed = try reader["sizeInBytesCompressed"].readIfPresent()
        value.unclassifiableObjectCount = try reader["unclassifiableObjectCount"].readIfPresent(with: Macie2ClientTypes.ObjectLevelStatistics.read(from:))
        value.unclassifiableObjectSizeInBytes = try reader["unclassifiableObjectSizeInBytes"].readIfPresent(with: Macie2ClientTypes.ObjectLevelStatistics.read(from:))
        return value
    }
}

extension Macie2ClientTypes.AutomatedDiscoveryAccountUpdate {

    static func write(value: Macie2ClientTypes.AutomatedDiscoveryAccountUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountId"].write(value.accountId)
        try writer["status"].write(value.status)
    }
}

extension Macie2ClientTypes.AccountDetail {

    static func write(value: Macie2ClientTypes.AccountDetail?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountId"].write(value.accountId)
        try writer["email"].write(value.email)
    }
}

extension Macie2ClientTypes.BucketCriteriaAdditionalProperties {

    static func write(value: Macie2ClientTypes.BucketCriteriaAdditionalProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eq"].writeList(value.eq, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["gt"].write(value.gt)
        try writer["gte"].write(value.gte)
        try writer["lt"].write(value.lt)
        try writer["lte"].write(value.lte)
        try writer["neq"].writeList(value.neq, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["prefix"].write(value.`prefix`)
    }
}

extension Macie2ClientTypes.BucketSortCriteria {

    static func write(value: Macie2ClientTypes.BucketSortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension Macie2ClientTypes.SortCriteria {

    static func write(value: Macie2ClientTypes.SortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension Macie2ClientTypes.FindingStatisticsSortCriteria {

    static func write(value: Macie2ClientTypes.FindingStatisticsSortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension Macie2ClientTypes.UsageStatisticsFilter {

    static func write(value: Macie2ClientTypes.UsageStatisticsFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["key"].write(value.key)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension Macie2ClientTypes.UsageStatisticsSortBy {

    static func write(value: Macie2ClientTypes.UsageStatisticsSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension Macie2ClientTypes.ListJobsFilterCriteria {

    static func write(value: Macie2ClientTypes.ListJobsFilterCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].writeList(value.excludes, memberWritingClosure: Macie2ClientTypes.ListJobsFilterTerm.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includes"].writeList(value.includes, memberWritingClosure: Macie2ClientTypes.ListJobsFilterTerm.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension Macie2ClientTypes.ListJobsFilterTerm {

    static func write(value: Macie2ClientTypes.ListJobsFilterTerm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["key"].write(value.key)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension Macie2ClientTypes.ListJobsSortCriteria {

    static func write(value: Macie2ClientTypes.ListJobsSortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension Macie2ClientTypes.SearchResourcesBucketCriteria {

    static func write(value: Macie2ClientTypes.SearchResourcesBucketCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].write(value.excludes, with: Macie2ClientTypes.SearchResourcesCriteriaBlock.write(value:to:))
        try writer["includes"].write(value.includes, with: Macie2ClientTypes.SearchResourcesCriteriaBlock.write(value:to:))
    }
}

extension Macie2ClientTypes.SearchResourcesCriteriaBlock {

    static func write(value: Macie2ClientTypes.SearchResourcesCriteriaBlock?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["and"].writeList(value.and, memberWritingClosure: Macie2ClientTypes.SearchResourcesCriteria.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension Macie2ClientTypes.SearchResourcesCriteria {

    static func write(value: Macie2ClientTypes.SearchResourcesCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["simpleCriterion"].write(value.simpleCriterion, with: Macie2ClientTypes.SearchResourcesSimpleCriterion.write(value:to:))
        try writer["tagCriterion"].write(value.tagCriterion, with: Macie2ClientTypes.SearchResourcesTagCriterion.write(value:to:))
    }
}

extension Macie2ClientTypes.SearchResourcesTagCriterion {

    static func write(value: Macie2ClientTypes.SearchResourcesTagCriterion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["tagValues"].writeList(value.tagValues, memberWritingClosure: Macie2ClientTypes.SearchResourcesTagCriterionPair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension Macie2ClientTypes.SearchResourcesTagCriterionPair {

    static func write(value: Macie2ClientTypes.SearchResourcesTagCriterionPair?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }
}

extension Macie2ClientTypes.SearchResourcesSimpleCriterion {

    static func write(value: Macie2ClientTypes.SearchResourcesSimpleCriterion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparator"].write(value.comparator)
        try writer["key"].write(value.key)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension Macie2ClientTypes.SearchResourcesSortCriteria {

    static func write(value: Macie2ClientTypes.SearchResourcesSortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension Macie2ClientTypes.S3ClassificationScopeUpdate {

    static func write(value: Macie2ClientTypes.S3ClassificationScopeUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].write(value.excludes, with: Macie2ClientTypes.S3ClassificationScopeExclusionUpdate.write(value:to:))
    }
}

extension Macie2ClientTypes.S3ClassificationScopeExclusionUpdate {

    static func write(value: Macie2ClientTypes.S3ClassificationScopeExclusionUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketNames"].writeList(value.bucketNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["operation"].write(value.operation)
    }
}

extension Macie2ClientTypes.SuppressDataIdentifier {

    static func write(value: Macie2ClientTypes.SuppressDataIdentifier?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["type"].write(value.type)
    }
}

extension Macie2ClientTypes.UpdateRetrievalConfiguration {

    static func write(value: Macie2ClientTypes.UpdateRetrievalConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["retrievalMode"].write(value.retrievalMode)
        try writer["roleName"].write(value.roleName)
    }
}

public enum Macie2ClientTypes {}
