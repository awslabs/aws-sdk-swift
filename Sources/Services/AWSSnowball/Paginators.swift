// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnowballClient {
    /// Paginate over `[DescribeAddressesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAddressesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAddressesOutput`
    public func describeAddressesPaginated(input: DescribeAddressesInput) -> ClientRuntime.PaginatorSequence<DescribeAddressesInput, DescribeAddressesOutput> {
        return ClientRuntime.PaginatorSequence<DescribeAddressesInput, DescribeAddressesOutput>(input: input, inputKey: \DescribeAddressesInput.nextToken, outputKey: \DescribeAddressesOutput.nextToken, paginationFunction: self.describeAddresses(input:))
    }
}

extension DescribeAddressesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAddressesInput {
        return DescribeAddressesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAddressesInput, Output == DescribeAddressesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeAddressesPaginated`
    /// to access the nested member `[SnowballClientTypes.Address]`
    /// - Returns: `[SnowballClientTypes.Address]`
    public func addresses() async throws -> [SnowballClientTypes.Address] {
        return try await self.asyncCompactMap { item in item.addresses }
    }
}
extension SnowballClient {
    /// Paginate over `[ListClusterJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListClusterJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListClusterJobsOutput`
    public func listClusterJobsPaginated(input: ListClusterJobsInput) -> ClientRuntime.PaginatorSequence<ListClusterJobsInput, ListClusterJobsOutput> {
        return ClientRuntime.PaginatorSequence<ListClusterJobsInput, ListClusterJobsOutput>(input: input, inputKey: \ListClusterJobsInput.nextToken, outputKey: \ListClusterJobsOutput.nextToken, paginationFunction: self.listClusterJobs(input:))
    }
}

extension ListClusterJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListClusterJobsInput {
        return ListClusterJobsInput(
            clusterId: self.clusterId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListClusterJobsInput, Output == ListClusterJobsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listClusterJobsPaginated`
    /// to access the nested member `[SnowballClientTypes.JobListEntry]`
    /// - Returns: `[SnowballClientTypes.JobListEntry]`
    public func jobListEntries() async throws -> [SnowballClientTypes.JobListEntry] {
        return try await self.asyncCompactMap { item in item.jobListEntries }
    }
}
extension SnowballClient {
    /// Paginate over `[ListClustersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListClustersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListClustersOutput`
    public func listClustersPaginated(input: ListClustersInput) -> ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutput> {
        return ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutput>(input: input, inputKey: \ListClustersInput.nextToken, outputKey: \ListClustersOutput.nextToken, paginationFunction: self.listClusters(input:))
    }
}

extension ListClustersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListClustersInput {
        return ListClustersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListClustersInput, Output == ListClustersOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listClustersPaginated`
    /// to access the nested member `[SnowballClientTypes.ClusterListEntry]`
    /// - Returns: `[SnowballClientTypes.ClusterListEntry]`
    public func clusterListEntries() async throws -> [SnowballClientTypes.ClusterListEntry] {
        return try await self.asyncCompactMap { item in item.clusterListEntries }
    }
}
extension SnowballClient {
    /// Paginate over `[ListCompatibleImagesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCompatibleImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCompatibleImagesOutput`
    public func listCompatibleImagesPaginated(input: ListCompatibleImagesInput) -> ClientRuntime.PaginatorSequence<ListCompatibleImagesInput, ListCompatibleImagesOutput> {
        return ClientRuntime.PaginatorSequence<ListCompatibleImagesInput, ListCompatibleImagesOutput>(input: input, inputKey: \ListCompatibleImagesInput.nextToken, outputKey: \ListCompatibleImagesOutput.nextToken, paginationFunction: self.listCompatibleImages(input:))
    }
}

extension ListCompatibleImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCompatibleImagesInput {
        return ListCompatibleImagesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListCompatibleImagesInput, Output == ListCompatibleImagesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCompatibleImagesPaginated`
    /// to access the nested member `[SnowballClientTypes.CompatibleImage]`
    /// - Returns: `[SnowballClientTypes.CompatibleImage]`
    public func compatibleImages() async throws -> [SnowballClientTypes.CompatibleImage] {
        return try await self.asyncCompactMap { item in item.compatibleImages }
    }
}
extension SnowballClient {
    /// Paginate over `[ListJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJobsOutput`
    public func listJobsPaginated(input: ListJobsInput) -> ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput> {
        return ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput>(input: input, inputKey: \ListJobsInput.nextToken, outputKey: \ListJobsOutput.nextToken, paginationFunction: self.listJobs(input:))
    }
}

extension ListJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJobsInput {
        return ListJobsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListJobsInput, Output == ListJobsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listJobsPaginated`
    /// to access the nested member `[SnowballClientTypes.JobListEntry]`
    /// - Returns: `[SnowballClientTypes.JobListEntry]`
    public func jobListEntries() async throws -> [SnowballClientTypes.JobListEntry] {
        return try await self.asyncCompactMap { item in item.jobListEntries }
    }
}
extension SnowballClient {
    /// Paginate over `[ListLongTermPricingOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLongTermPricingInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLongTermPricingOutput`
    public func listLongTermPricingPaginated(input: ListLongTermPricingInput) -> ClientRuntime.PaginatorSequence<ListLongTermPricingInput, ListLongTermPricingOutput> {
        return ClientRuntime.PaginatorSequence<ListLongTermPricingInput, ListLongTermPricingOutput>(input: input, inputKey: \ListLongTermPricingInput.nextToken, outputKey: \ListLongTermPricingOutput.nextToken, paginationFunction: self.listLongTermPricing(input:))
    }
}

extension ListLongTermPricingInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLongTermPricingInput {
        return ListLongTermPricingInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListLongTermPricingInput, Output == ListLongTermPricingOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listLongTermPricingPaginated`
    /// to access the nested member `[SnowballClientTypes.LongTermPricingListEntry]`
    /// - Returns: `[SnowballClientTypes.LongTermPricingListEntry]`
    public func longTermPricingEntries() async throws -> [SnowballClientTypes.LongTermPricingListEntry] {
        return try await self.asyncCompactMap { item in item.longTermPricingEntries }
    }
}
extension SnowballClient {
    /// Paginate over `[ListPickupLocationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPickupLocationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPickupLocationsOutput`
    public func listPickupLocationsPaginated(input: ListPickupLocationsInput) -> ClientRuntime.PaginatorSequence<ListPickupLocationsInput, ListPickupLocationsOutput> {
        return ClientRuntime.PaginatorSequence<ListPickupLocationsInput, ListPickupLocationsOutput>(input: input, inputKey: \ListPickupLocationsInput.nextToken, outputKey: \ListPickupLocationsOutput.nextToken, paginationFunction: self.listPickupLocations(input:))
    }
}

extension ListPickupLocationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPickupLocationsInput {
        return ListPickupLocationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
