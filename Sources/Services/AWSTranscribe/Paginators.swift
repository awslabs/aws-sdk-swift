// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListCallAnalyticsCategoriesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListCallAnalyticsCategoriesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListCallAnalyticsCategoriesOutputResponse`
extension TranscribeClient {
    public func listCallAnalyticsCategoriesPaginated(input: ListCallAnalyticsCategoriesInput) -> ClientRuntime.PaginatorSequence<ListCallAnalyticsCategoriesInput, ListCallAnalyticsCategoriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCallAnalyticsCategoriesInput, ListCallAnalyticsCategoriesOutputResponse>(input: input, inputKey: \ListCallAnalyticsCategoriesInput.nextToken, outputKey: \ListCallAnalyticsCategoriesOutputResponse.nextToken, paginationFunction: self.listCallAnalyticsCategories(input:))
    }
}

extension ListCallAnalyticsCategoriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCallAnalyticsCategoriesInput {
        return ListCallAnalyticsCategoriesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListCallAnalyticsJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListCallAnalyticsJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListCallAnalyticsJobsOutputResponse`
extension TranscribeClient {
    public func listCallAnalyticsJobsPaginated(input: ListCallAnalyticsJobsInput) -> ClientRuntime.PaginatorSequence<ListCallAnalyticsJobsInput, ListCallAnalyticsJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCallAnalyticsJobsInput, ListCallAnalyticsJobsOutputResponse>(input: input, inputKey: \ListCallAnalyticsJobsInput.nextToken, outputKey: \ListCallAnalyticsJobsOutputResponse.nextToken, paginationFunction: self.listCallAnalyticsJobs(input:))
    }
}

extension ListCallAnalyticsJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCallAnalyticsJobsInput {
        return ListCallAnalyticsJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

/// Paginate over `[ListLanguageModelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListLanguageModelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListLanguageModelsOutputResponse`
extension TranscribeClient {
    public func listLanguageModelsPaginated(input: ListLanguageModelsInput) -> ClientRuntime.PaginatorSequence<ListLanguageModelsInput, ListLanguageModelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListLanguageModelsInput, ListLanguageModelsOutputResponse>(input: input, inputKey: \ListLanguageModelsInput.nextToken, outputKey: \ListLanguageModelsOutputResponse.nextToken, paginationFunction: self.listLanguageModels(input:))
    }
}

extension ListLanguageModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLanguageModelsInput {
        return ListLanguageModelsInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            statusEquals: self.statusEquals
        )}
}

/// Paginate over `[ListMedicalTranscriptionJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListMedicalTranscriptionJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListMedicalTranscriptionJobsOutputResponse`
extension TranscribeClient {
    public func listMedicalTranscriptionJobsPaginated(input: ListMedicalTranscriptionJobsInput) -> ClientRuntime.PaginatorSequence<ListMedicalTranscriptionJobsInput, ListMedicalTranscriptionJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMedicalTranscriptionJobsInput, ListMedicalTranscriptionJobsOutputResponse>(input: input, inputKey: \ListMedicalTranscriptionJobsInput.nextToken, outputKey: \ListMedicalTranscriptionJobsOutputResponse.nextToken, paginationFunction: self.listMedicalTranscriptionJobs(input:))
    }
}

extension ListMedicalTranscriptionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMedicalTranscriptionJobsInput {
        return ListMedicalTranscriptionJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

/// Paginate over `[ListMedicalVocabulariesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListMedicalVocabulariesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListMedicalVocabulariesOutputResponse`
extension TranscribeClient {
    public func listMedicalVocabulariesPaginated(input: ListMedicalVocabulariesInput) -> ClientRuntime.PaginatorSequence<ListMedicalVocabulariesInput, ListMedicalVocabulariesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMedicalVocabulariesInput, ListMedicalVocabulariesOutputResponse>(input: input, inputKey: \ListMedicalVocabulariesInput.nextToken, outputKey: \ListMedicalVocabulariesOutputResponse.nextToken, paginationFunction: self.listMedicalVocabularies(input:))
    }
}

extension ListMedicalVocabulariesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMedicalVocabulariesInput {
        return ListMedicalVocabulariesInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            stateEquals: self.stateEquals
        )}
}

/// Paginate over `[ListTranscriptionJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTranscriptionJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTranscriptionJobsOutputResponse`
extension TranscribeClient {
    public func listTranscriptionJobsPaginated(input: ListTranscriptionJobsInput) -> ClientRuntime.PaginatorSequence<ListTranscriptionJobsInput, ListTranscriptionJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTranscriptionJobsInput, ListTranscriptionJobsOutputResponse>(input: input, inputKey: \ListTranscriptionJobsInput.nextToken, outputKey: \ListTranscriptionJobsOutputResponse.nextToken, paginationFunction: self.listTranscriptionJobs(input:))
    }
}

extension ListTranscriptionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTranscriptionJobsInput {
        return ListTranscriptionJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

/// Paginate over `[ListVocabulariesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListVocabulariesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListVocabulariesOutputResponse`
extension TranscribeClient {
    public func listVocabulariesPaginated(input: ListVocabulariesInput) -> ClientRuntime.PaginatorSequence<ListVocabulariesInput, ListVocabulariesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListVocabulariesInput, ListVocabulariesOutputResponse>(input: input, inputKey: \ListVocabulariesInput.nextToken, outputKey: \ListVocabulariesOutputResponse.nextToken, paginationFunction: self.listVocabularies(input:))
    }
}

extension ListVocabulariesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVocabulariesInput {
        return ListVocabulariesInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            stateEquals: self.stateEquals
        )}
}

/// Paginate over `[ListVocabularyFiltersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListVocabularyFiltersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListVocabularyFiltersOutputResponse`
extension TranscribeClient {
    public func listVocabularyFiltersPaginated(input: ListVocabularyFiltersInput) -> ClientRuntime.PaginatorSequence<ListVocabularyFiltersInput, ListVocabularyFiltersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListVocabularyFiltersInput, ListVocabularyFiltersOutputResponse>(input: input, inputKey: \ListVocabularyFiltersInput.nextToken, outputKey: \ListVocabularyFiltersOutputResponse.nextToken, paginationFunction: self.listVocabularyFilters(input:))
    }
}

extension ListVocabularyFiltersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVocabularyFiltersInput {
        return ListVocabularyFiltersInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token
        )}
}
