// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClient {
    /// Paginate over `[ListCallAnalyticsCategoriesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCallAnalyticsCategoriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCallAnalyticsCategoriesOutput`
    public func listCallAnalyticsCategoriesPaginated(input: ListCallAnalyticsCategoriesInput) -> ClientRuntime.PaginatorSequence<ListCallAnalyticsCategoriesInput, ListCallAnalyticsCategoriesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListCallAnalyticsCategoriesInput, ListCallAnalyticsCategoriesOutput>(input: input, inputKey: \ListCallAnalyticsCategoriesInput.nextToken, outputKey: \ListCallAnalyticsCategoriesOutput.nextToken, paginationFunction: self.listCallAnalyticsCategories(input:))
=======
        return ClientRuntime.PaginatorSequence<ListCallAnalyticsCategoriesInput, ListCallAnalyticsCategoriesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listCallAnalyticsCategories(input:))
>>>>>>> main
    }
}

extension ListCallAnalyticsCategoriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCallAnalyticsCategoriesInput {
        return ListCallAnalyticsCategoriesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension TranscribeClient {
    /// Paginate over `[ListCallAnalyticsJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCallAnalyticsJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCallAnalyticsJobsOutput`
    public func listCallAnalyticsJobsPaginated(input: ListCallAnalyticsJobsInput) -> ClientRuntime.PaginatorSequence<ListCallAnalyticsJobsInput, ListCallAnalyticsJobsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListCallAnalyticsJobsInput, ListCallAnalyticsJobsOutput>(input: input, inputKey: \ListCallAnalyticsJobsInput.nextToken, outputKey: \ListCallAnalyticsJobsOutput.nextToken, paginationFunction: self.listCallAnalyticsJobs(input:))
=======
        return ClientRuntime.PaginatorSequence<ListCallAnalyticsJobsInput, ListCallAnalyticsJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listCallAnalyticsJobs(input:))
>>>>>>> main
    }
}

extension ListCallAnalyticsJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCallAnalyticsJobsInput {
        return ListCallAnalyticsJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}
extension TranscribeClient {
    /// Paginate over `[ListLanguageModelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLanguageModelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLanguageModelsOutput`
    public func listLanguageModelsPaginated(input: ListLanguageModelsInput) -> ClientRuntime.PaginatorSequence<ListLanguageModelsInput, ListLanguageModelsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListLanguageModelsInput, ListLanguageModelsOutput>(input: input, inputKey: \ListLanguageModelsInput.nextToken, outputKey: \ListLanguageModelsOutput.nextToken, paginationFunction: self.listLanguageModels(input:))
=======
        return ClientRuntime.PaginatorSequence<ListLanguageModelsInput, ListLanguageModelsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLanguageModels(input:))
>>>>>>> main
    }
}

extension ListLanguageModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLanguageModelsInput {
        return ListLanguageModelsInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            statusEquals: self.statusEquals
        )}
}
extension TranscribeClient {
<<<<<<< HEAD
=======
    /// Paginate over `[ListMedicalScribeJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMedicalScribeJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMedicalScribeJobsOutput`
    public func listMedicalScribeJobsPaginated(input: ListMedicalScribeJobsInput) -> ClientRuntime.PaginatorSequence<ListMedicalScribeJobsInput, ListMedicalScribeJobsOutput> {
        return ClientRuntime.PaginatorSequence<ListMedicalScribeJobsInput, ListMedicalScribeJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMedicalScribeJobs(input:))
    }
}

extension ListMedicalScribeJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMedicalScribeJobsInput {
        return ListMedicalScribeJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}
extension TranscribeClient {
>>>>>>> main
    /// Paginate over `[ListMedicalTranscriptionJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMedicalTranscriptionJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMedicalTranscriptionJobsOutput`
    public func listMedicalTranscriptionJobsPaginated(input: ListMedicalTranscriptionJobsInput) -> ClientRuntime.PaginatorSequence<ListMedicalTranscriptionJobsInput, ListMedicalTranscriptionJobsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListMedicalTranscriptionJobsInput, ListMedicalTranscriptionJobsOutput>(input: input, inputKey: \ListMedicalTranscriptionJobsInput.nextToken, outputKey: \ListMedicalTranscriptionJobsOutput.nextToken, paginationFunction: self.listMedicalTranscriptionJobs(input:))
=======
        return ClientRuntime.PaginatorSequence<ListMedicalTranscriptionJobsInput, ListMedicalTranscriptionJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMedicalTranscriptionJobs(input:))
>>>>>>> main
    }
}

extension ListMedicalTranscriptionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMedicalTranscriptionJobsInput {
        return ListMedicalTranscriptionJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}
extension TranscribeClient {
    /// Paginate over `[ListMedicalVocabulariesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMedicalVocabulariesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMedicalVocabulariesOutput`
    public func listMedicalVocabulariesPaginated(input: ListMedicalVocabulariesInput) -> ClientRuntime.PaginatorSequence<ListMedicalVocabulariesInput, ListMedicalVocabulariesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListMedicalVocabulariesInput, ListMedicalVocabulariesOutput>(input: input, inputKey: \ListMedicalVocabulariesInput.nextToken, outputKey: \ListMedicalVocabulariesOutput.nextToken, paginationFunction: self.listMedicalVocabularies(input:))
=======
        return ClientRuntime.PaginatorSequence<ListMedicalVocabulariesInput, ListMedicalVocabulariesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMedicalVocabularies(input:))
>>>>>>> main
    }
}

extension ListMedicalVocabulariesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMedicalVocabulariesInput {
        return ListMedicalVocabulariesInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            stateEquals: self.stateEquals
        )}
}
extension TranscribeClient {
    /// Paginate over `[ListTranscriptionJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTranscriptionJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTranscriptionJobsOutput`
    public func listTranscriptionJobsPaginated(input: ListTranscriptionJobsInput) -> ClientRuntime.PaginatorSequence<ListTranscriptionJobsInput, ListTranscriptionJobsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTranscriptionJobsInput, ListTranscriptionJobsOutput>(input: input, inputKey: \ListTranscriptionJobsInput.nextToken, outputKey: \ListTranscriptionJobsOutput.nextToken, paginationFunction: self.listTranscriptionJobs(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTranscriptionJobsInput, ListTranscriptionJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTranscriptionJobs(input:))
>>>>>>> main
    }
}

extension ListTranscriptionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTranscriptionJobsInput {
        return ListTranscriptionJobsInput(
            jobNameContains: self.jobNameContains,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}
extension TranscribeClient {
    /// Paginate over `[ListVocabulariesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVocabulariesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVocabulariesOutput`
    public func listVocabulariesPaginated(input: ListVocabulariesInput) -> ClientRuntime.PaginatorSequence<ListVocabulariesInput, ListVocabulariesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListVocabulariesInput, ListVocabulariesOutput>(input: input, inputKey: \ListVocabulariesInput.nextToken, outputKey: \ListVocabulariesOutput.nextToken, paginationFunction: self.listVocabularies(input:))
=======
        return ClientRuntime.PaginatorSequence<ListVocabulariesInput, ListVocabulariesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listVocabularies(input:))
>>>>>>> main
    }
}

extension ListVocabulariesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVocabulariesInput {
        return ListVocabulariesInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            stateEquals: self.stateEquals
        )}
}
extension TranscribeClient {
    /// Paginate over `[ListVocabularyFiltersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVocabularyFiltersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVocabularyFiltersOutput`
    public func listVocabularyFiltersPaginated(input: ListVocabularyFiltersInput) -> ClientRuntime.PaginatorSequence<ListVocabularyFiltersInput, ListVocabularyFiltersOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListVocabularyFiltersInput, ListVocabularyFiltersOutput>(input: input, inputKey: \ListVocabularyFiltersInput.nextToken, outputKey: \ListVocabularyFiltersOutput.nextToken, paginationFunction: self.listVocabularyFilters(input:))
=======
        return ClientRuntime.PaginatorSequence<ListVocabularyFiltersInput, ListVocabularyFiltersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listVocabularyFilters(input:))
>>>>>>> main
    }
}

extension ListVocabularyFiltersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVocabularyFiltersInput {
        return ListVocabularyFiltersInput(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token
        )}
}
