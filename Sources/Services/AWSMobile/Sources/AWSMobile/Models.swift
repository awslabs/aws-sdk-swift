//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import class SmithyHTTPAPI.HTTPResponse
import class SmithyJSON.Reader
import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
import enum SmithyReadWrite.ReadingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
import struct SmithyReadWrite.ReadingClosureBox

/// Account Action is required in order to continue the request.
public struct AccountActionRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountActionRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because some parameter is not valid or the project state prevents the operation from being performed.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service has encountered an unexpected error condition which prevents it from servicing the request.
public struct InternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There are too many AWS Mobile Hub projects in the account or the account has exceeded the maximum number of resources in some AWS service. You should create another sub-account using AWS Organizations or remove some resources and retry your request.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
        /// The Exception Error Message.
        public internal(set) var retryAfterSeconds: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// No entity can be found with the specified identifier.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service is temporarily unavailable. The request should be retried after some time delay.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
        /// The Exception Error Message.
        public internal(set) var retryAfterSeconds: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// Too many requests have been received for this AWS account in too short a time. The request should be retried after some time delay.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
        /// The Exception Error Message.
        public internal(set) var retryAfterSeconds: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// Credentials of the caller are insufficient to authorize the request.
public struct UnauthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Exception Error Message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request structure used to request a project be created.
public struct CreateProjectInput {
    /// ZIP or YAML file which contains configuration settings to be used when creating the project. This may be the contents of the file downloaded from the URL provided in an export project operation.
    public var contents: Foundation.Data?
    /// Name of the project.
    public var name: Swift.String?
    /// Default region where project resources should be created.
    public var region: Swift.String?
    /// Unique identifier for an exported snapshot of project configuration. This snapshot identifier is included in the share URL when a project is exported.
    public var snapshotId: Swift.String?

    public init(
        contents: Foundation.Data? = nil,
        name: Swift.String? = nil,
        region: Swift.String? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.contents = contents
        self.name = name
        self.region = region
        self.snapshotId = snapshotId
    }
}

extension MobileClientTypes {
    /// Information about an instance of an AWS resource associated with a project.
    public struct Resource {
        /// AWS resource name which uniquely identifies the resource in AWS systems.
        public var arn: Swift.String?
        /// Key-value attribute pairs.
        public var attributes: [Swift.String: Swift.String]?
        /// Identifies which feature in AWS Mobile Hub is associated with this AWS resource.
        public var feature: Swift.String?
        /// Name of the AWS resource (e.g., for an Amazon S3 bucket this is the name of the bucket).
        public var name: Swift.String?
        /// Simplified name for type of AWS resource (e.g., bucket is an Amazon S3 bucket).
        public var type: Swift.String?

        public init(
            arn: Swift.String? = nil,
            attributes: [Swift.String: Swift.String]? = nil,
            feature: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.attributes = attributes
            self.feature = feature
            self.name = name
            self.type = type
        }
    }

}

extension MobileClientTypes {

    /// Synchronization state for a project.
    public enum ProjectState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case importing
        case normal
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectState] {
            return [
                .importing,
                .normal,
                .syncing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .importing: return "IMPORTING"
            case .normal: return "NORMAL"
            case .syncing: return "SYNCING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MobileClientTypes {
    /// Detailed information about an AWS Mobile Hub project.
    public struct ProjectDetails {
        /// Website URL for this project in the AWS Mobile Hub console.
        public var consoleUrl: Swift.String?
        /// Date the project was created.
        public var createdDate: Foundation.Date?
        /// Date of the last modification of the project.
        public var lastUpdatedDate: Foundation.Date?
        /// Name of the project.
        public var name: Swift.String?
        /// Unique project identifier.
        public var projectId: Swift.String?
        /// Default region to use for AWS resource creation in the AWS Mobile Hub project.
        public var region: Swift.String?
        /// List of AWS resources associated with a project.
        public var resources: [MobileClientTypes.Resource]?
        /// Synchronization state for a project.
        public var state: MobileClientTypes.ProjectState?

        public init(
            consoleUrl: Swift.String? = nil,
            createdDate: Foundation.Date? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            projectId: Swift.String? = nil,
            region: Swift.String? = nil,
            resources: [MobileClientTypes.Resource]? = nil,
            state: MobileClientTypes.ProjectState? = nil
        )
        {
            self.consoleUrl = consoleUrl
            self.createdDate = createdDate
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.projectId = projectId
            self.region = region
            self.resources = resources
            self.state = state
        }
    }

}

/// Result structure used in response to a request to create a project.
public struct CreateProjectOutput {
    /// Detailed information about the created AWS Mobile Hub project.
    public var details: MobileClientTypes.ProjectDetails?

    public init(
        details: MobileClientTypes.ProjectDetails? = nil
    )
    {
        self.details = details
    }
}

/// Request structure used to request a project be deleted.
public struct DeleteProjectInput {
    /// Unique project identifier.
    /// This member is required.
    public var projectId: Swift.String?

    public init(
        projectId: Swift.String? = nil
    )
    {
        self.projectId = projectId
    }
}

/// Result structure used in response to request to delete a project.
public struct DeleteProjectOutput {
    /// Resources which were deleted.
    public var deletedResources: [MobileClientTypes.Resource]?
    /// Resources which were not deleted, due to a risk of losing potentially important data or files.
    public var orphanedResources: [MobileClientTypes.Resource]?

    public init(
        deletedResources: [MobileClientTypes.Resource]? = nil,
        orphanedResources: [MobileClientTypes.Resource]? = nil
    )
    {
        self.deletedResources = deletedResources
        self.orphanedResources = orphanedResources
    }
}

/// Request structure to request the details of a specific bundle.
public struct DescribeBundleInput {
    /// Unique bundle identifier.
    /// This member is required.
    public var bundleId: Swift.String?

    public init(
        bundleId: Swift.String? = nil
    )
    {
        self.bundleId = bundleId
    }
}

extension MobileClientTypes {

    /// Developer desktop or target mobile app or website platform.
    public enum Platform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case android
        case javascript
        case linux
        case objc
        case osx
        case swift
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [Platform] {
            return [
                .android,
                .javascript,
                .linux,
                .objc,
                .osx,
                .swift,
                .windows
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .javascript: return "JAVASCRIPT"
            case .linux: return "LINUX"
            case .objc: return "OBJC"
            case .osx: return "OSX"
            case .swift: return "SWIFT"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MobileClientTypes {
    /// The details of the bundle.
    public struct BundleDetails {
        /// Developer desktop or mobile app or website platforms.
        public var availablePlatforms: [MobileClientTypes.Platform]?
        /// Unique bundle identifier.
        public var bundleId: Swift.String?
        /// Description of the download bundle.
        public var description: Swift.String?
        /// Icon for the download bundle.
        public var iconUrl: Swift.String?
        /// Title of the download bundle.
        public var title: Swift.String?
        /// Version of the download bundle.
        public var version: Swift.String?

        public init(
            availablePlatforms: [MobileClientTypes.Platform]? = nil,
            bundleId: Swift.String? = nil,
            description: Swift.String? = nil,
            iconUrl: Swift.String? = nil,
            title: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.availablePlatforms = availablePlatforms
            self.bundleId = bundleId
            self.description = description
            self.iconUrl = iconUrl
            self.title = title
            self.version = version
        }
    }

}

/// Result structure contains the details of the bundle.
public struct DescribeBundleOutput {
    /// The details of the bundle.
    public var details: MobileClientTypes.BundleDetails?

    public init(
        details: MobileClientTypes.BundleDetails? = nil
    )
    {
        self.details = details
    }
}

/// Request structure used to request details about a project.
public struct DescribeProjectInput {
    /// Unique project identifier.
    /// This member is required.
    public var projectId: Swift.String?
    /// If set to true, causes AWS Mobile Hub to synchronize information from other services, e.g., update state of AWS CloudFormation stacks in the AWS Mobile Hub project.
    public var syncFromResources: Swift.Bool?

    public init(
        projectId: Swift.String? = nil,
        syncFromResources: Swift.Bool? = nil
    )
    {
        self.projectId = projectId
        self.syncFromResources = syncFromResources
    }
}

/// Result structure used for requests of project details.
public struct DescribeProjectOutput {
    /// Detailed information about an AWS Mobile Hub project.
    public var details: MobileClientTypes.ProjectDetails?

    public init(
        details: MobileClientTypes.ProjectDetails? = nil
    )
    {
        self.details = details
    }
}

/// Request structure used to request generation of custom SDK and tool packages required to integrate mobile web or app clients with backed AWS resources.
public struct ExportBundleInput {
    /// Unique bundle identifier.
    /// This member is required.
    public var bundleId: Swift.String?
    /// Developer desktop or target application platform.
    public var platform: MobileClientTypes.Platform?
    /// Unique project identifier.
    public var projectId: Swift.String?

    public init(
        bundleId: Swift.String? = nil,
        platform: MobileClientTypes.Platform? = nil,
        projectId: Swift.String? = nil
    )
    {
        self.bundleId = bundleId
        self.platform = platform
        self.projectId = projectId
    }
}

/// Result structure which contains link to download custom-generated SDK and tool packages used to integrate mobile web or app clients with backed AWS resources.
public struct ExportBundleOutput {
    /// URL which contains the custom-generated SDK and tool packages used to integrate the client mobile app or web app with the AWS resources created by the AWS Mobile Hub project.
    public var downloadUrl: Swift.String?

    public init(
        downloadUrl: Swift.String? = nil
    )
    {
        self.downloadUrl = downloadUrl
    }
}

/// Request structure used in requests to export project configuration details.
public struct ExportProjectInput {
    /// Unique project identifier.
    /// This member is required.
    public var projectId: Swift.String?

    public init(
        projectId: Swift.String? = nil
    )
    {
        self.projectId = projectId
    }
}

/// Result structure used for requests to export project configuration details.
public struct ExportProjectOutput {
    /// URL which can be used to download the exported project configuation file(s).
    public var downloadUrl: Swift.String?
    /// URL which can be shared to allow other AWS users to create their own project in AWS Mobile Hub with the same configuration as the specified project. This URL pertains to a snapshot in time of the project configuration that is created when this API is called. If you want to share additional changes to your project configuration, then you will need to create and share a new snapshot by calling this method again.
    public var shareUrl: Swift.String?
    /// Unique identifier for the exported snapshot of the project configuration. This snapshot identifier is included in the share URL.
    public var snapshotId: Swift.String?

    public init(
        downloadUrl: Swift.String? = nil,
        shareUrl: Swift.String? = nil,
        snapshotId: Swift.String? = nil
    )
    {
        self.downloadUrl = downloadUrl
        self.shareUrl = shareUrl
        self.snapshotId = snapshotId
    }
}

/// Request structure to request all available bundles.
public struct ListBundlesInput {
    /// Maximum number of records to list in a single response.
    public var maxResults: Swift.Int?
    /// Pagination token. Set to null to start listing bundles from start. If non-null pagination token is returned in a result, then pass its value in here in another request to list more bundles.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Result structure contains a list of all available bundles with details.
public struct ListBundlesOutput {
    /// A list of bundles.
    public var bundleList: [MobileClientTypes.BundleDetails]?
    /// Pagination token. If non-null pagination token is returned in a result, then pass its value in another request to fetch more entries.
    public var nextToken: Swift.String?

    public init(
        bundleList: [MobileClientTypes.BundleDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.bundleList = bundleList
        self.nextToken = nextToken
    }
}

/// Request structure used to request projects list in AWS Mobile Hub.
public struct ListProjectsInput {
    /// Maximum number of records to list in a single response.
    public var maxResults: Swift.Int?
    /// Pagination token. Set to null to start listing projects from start. If non-null pagination token is returned in a result, then pass its value in here in another request to list more projects.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MobileClientTypes {
    /// Summary information about an AWS Mobile Hub project.
    public struct ProjectSummary {
        /// Name of the project.
        public var name: Swift.String?
        /// Unique project identifier.
        public var projectId: Swift.String?

        public init(
            name: Swift.String? = nil,
            projectId: Swift.String? = nil
        )
        {
            self.name = name
            self.projectId = projectId
        }
    }

}

/// Result structure used for requests to list projects in AWS Mobile Hub.
public struct ListProjectsOutput {
    /// Pagination token. Set to null to start listing records from start. If non-null pagination token is returned in a result, then pass its value in here in another request to list more entries.
    public var nextToken: Swift.String?
    /// List of projects.
    public var projects: [MobileClientTypes.ProjectSummary]?

    public init(
        nextToken: Swift.String? = nil,
        projects: [MobileClientTypes.ProjectSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.projects = projects
    }
}

/// Request structure used for requests to update project configuration.
public struct UpdateProjectInput {
    /// ZIP or YAML file which contains project configuration to be updated. This should be the contents of the file downloaded from the URL provided in an export project operation.
    public var contents: Foundation.Data?
    /// Unique project identifier.
    /// This member is required.
    public var projectId: Swift.String?

    public init(
        contents: Foundation.Data? = nil,
        projectId: Swift.String? = nil
    )
    {
        self.contents = contents
        self.projectId = projectId
    }
}

/// Result structure used for requests to updated project configuration.
public struct UpdateProjectOutput {
    /// Detailed information about the updated AWS Mobile Hub project.
    public var details: MobileClientTypes.ProjectDetails?

    public init(
        details: MobileClientTypes.ProjectDetails? = nil
    )
    {
        self.details = details
    }
}

extension CreateProjectInput {

    static func urlPathProvider(_ value: CreateProjectInput) -> Swift.String? {
        return "/projects"
    }
}

extension CreateProjectInput {

    static func queryItemProvider(_ value: CreateProjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let snapshotId = value.snapshotId {
            let snapshotIdQueryItem = Smithy.URIQueryItem(name: "snapshotId".urlPercentEncoding(), value: Swift.String(snapshotId).urlPercentEncoding())
            items.append(snapshotIdQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        if let region = value.region {
            let regionQueryItem = Smithy.URIQueryItem(name: "region".urlPercentEncoding(), value: Swift.String(region).urlPercentEncoding())
            items.append(regionQueryItem)
        }
        return items
    }
}

extension DeleteProjectInput {

    static func urlPathProvider(_ value: DeleteProjectInput) -> Swift.String? {
        guard let projectId = value.projectId else {
            return nil
        }
        return "/projects/\(projectId.urlPercentEncoding())"
    }
}

extension DescribeBundleInput {

    static func urlPathProvider(_ value: DescribeBundleInput) -> Swift.String? {
        guard let bundleId = value.bundleId else {
            return nil
        }
        return "/bundles/\(bundleId.urlPercentEncoding())"
    }
}

extension DescribeProjectInput {

    static func urlPathProvider(_ value: DescribeProjectInput) -> Swift.String? {
        return "/project"
    }
}

extension DescribeProjectInput {

    static func queryItemProvider(_ value: DescribeProjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let syncFromResources = value.syncFromResources {
            let syncFromResourcesQueryItem = Smithy.URIQueryItem(name: "syncFromResources".urlPercentEncoding(), value: Swift.String(syncFromResources).urlPercentEncoding())
            items.append(syncFromResourcesQueryItem)
        }
        guard let projectId = value.projectId else {
            let message = "Creating a URL Query Item failed. projectId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let projectIdQueryItem = Smithy.URIQueryItem(name: "projectId".urlPercentEncoding(), value: Swift.String(projectId).urlPercentEncoding())
        items.append(projectIdQueryItem)
        return items
    }
}

extension ExportBundleInput {

    static func urlPathProvider(_ value: ExportBundleInput) -> Swift.String? {
        guard let bundleId = value.bundleId else {
            return nil
        }
        return "/bundles/\(bundleId.urlPercentEncoding())"
    }
}

extension ExportBundleInput {

    static func queryItemProvider(_ value: ExportBundleInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let projectId = value.projectId {
            let projectIdQueryItem = Smithy.URIQueryItem(name: "projectId".urlPercentEncoding(), value: Swift.String(projectId).urlPercentEncoding())
            items.append(projectIdQueryItem)
        }
        if let platform = value.platform {
            let platformQueryItem = Smithy.URIQueryItem(name: "platform".urlPercentEncoding(), value: Swift.String(platform.rawValue).urlPercentEncoding())
            items.append(platformQueryItem)
        }
        return items
    }
}

extension ExportProjectInput {

    static func urlPathProvider(_ value: ExportProjectInput) -> Swift.String? {
        guard let projectId = value.projectId else {
            return nil
        }
        return "/exports/\(projectId.urlPercentEncoding())"
    }
}

extension ListBundlesInput {

    static func urlPathProvider(_ value: ListBundlesInput) -> Swift.String? {
        return "/bundles"
    }
}

extension ListBundlesInput {

    static func queryItemProvider(_ value: ListBundlesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListProjectsInput {

    static func urlPathProvider(_ value: ListProjectsInput) -> Swift.String? {
        return "/projects"
    }
}

extension ListProjectsInput {

    static func queryItemProvider(_ value: ListProjectsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension UpdateProjectInput {

    static func urlPathProvider(_ value: UpdateProjectInput) -> Swift.String? {
        return "/update"
    }
}

extension UpdateProjectInput {

    static func queryItemProvider(_ value: UpdateProjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let projectId = value.projectId else {
            let message = "Creating a URL Query Item failed. projectId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let projectIdQueryItem = Smithy.URIQueryItem(name: "projectId".urlPercentEncoding(), value: Swift.String(projectId).urlPercentEncoding())
        items.append(projectIdQueryItem)
        return items
    }
}

extension CreateProjectInput {

    static func write(value: CreateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["contents"].write(value.contents)
    }
}

extension UpdateProjectInput {

    static func write(value: UpdateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["contents"].write(value.contents)
    }
}

extension CreateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProjectOutput()
        value.details = try reader["details"].readIfPresent(with: MobileClientTypes.ProjectDetails.read(from:))
        return value
    }
}

extension DeleteProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteProjectOutput()
        value.deletedResources = try reader["deletedResources"].readListIfPresent(memberReadingClosure: MobileClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.orphanedResources = try reader["orphanedResources"].readListIfPresent(memberReadingClosure: MobileClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeBundleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBundleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBundleOutput()
        value.details = try reader["details"].readIfPresent(with: MobileClientTypes.BundleDetails.read(from:))
        return value
    }
}

extension DescribeProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeProjectOutput()
        value.details = try reader["details"].readIfPresent(with: MobileClientTypes.ProjectDetails.read(from:))
        return value
    }
}

extension ExportBundleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportBundleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportBundleOutput()
        value.downloadUrl = try reader["downloadUrl"].readIfPresent()
        return value
    }
}

extension ExportProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportProjectOutput()
        value.downloadUrl = try reader["downloadUrl"].readIfPresent()
        value.shareUrl = try reader["shareUrl"].readIfPresent()
        value.snapshotId = try reader["snapshotId"].readIfPresent()
        return value
    }
}

extension ListBundlesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBundlesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBundlesOutput()
        value.bundleList = try reader["bundleList"].readListIfPresent(memberReadingClosure: MobileClientTypes.BundleDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListProjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProjectsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.projects = try reader["projects"].readListIfPresent(memberReadingClosure: MobileClientTypes.ProjectSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateProjectOutput()
        value.details = try reader["details"].readIfPresent(with: MobileClientTypes.ProjectDetails.read(from:))
        return value
    }
}

enum CreateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBundleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportBundleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBundlesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountActionRequiredException": return try AccountActionRequiredException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = LimitExceededException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = retryAfterSecondsHeaderValue
        }
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = TooManyRequestsException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = retryAfterSecondsHeaderValue
        }
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalFailureException {
        let reader = baseError.errorBodyReader
        var value = InternalFailureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ServiceUnavailableException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = retryAfterSecondsHeaderValue
        }
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountActionRequiredException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccountActionRequiredException {
        let reader = baseError.errorBodyReader
        var value = AccountActionRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MobileClientTypes.ProjectDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> MobileClientTypes.ProjectDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MobileClientTypes.ProjectDetails()
        value.name = try reader["name"].readIfPresent()
        value.projectId = try reader["projectId"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: .epochSeconds)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: .epochSeconds)
        value.consoleUrl = try reader["consoleUrl"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: MobileClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MobileClientTypes.Resource {

    static func read(from reader: SmithyJSON.Reader) throws -> MobileClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MobileClientTypes.Resource()
        value.type = try reader["type"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.feature = try reader["feature"].readIfPresent()
        value.attributes = try reader["attributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MobileClientTypes.BundleDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> MobileClientTypes.BundleDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MobileClientTypes.BundleDetails()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.title = try reader["title"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.iconUrl = try reader["iconUrl"].readIfPresent()
        value.availablePlatforms = try reader["availablePlatforms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MobileClientTypes.Platform>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MobileClientTypes.ProjectSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MobileClientTypes.ProjectSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MobileClientTypes.ProjectSummary()
        value.name = try reader["name"].readIfPresent()
        value.projectId = try reader["projectId"].readIfPresent()
        return value
    }
}

public enum MobileClientTypes {}
