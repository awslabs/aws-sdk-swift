//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

public struct PutActionInteractionsOutput {

    public init() { }
}

public struct PutActionsOutput {

    public init() { }
}

public struct PutEventsOutput {

    public init() { }
}

public struct PutItemsOutput {

    public init() { }
}

public struct PutUsersOutput {

    public init() { }
}

extension PersonalizeEventsClientTypes {
    /// Represents action metadata added to an Action dataset using the PutActions API. For more information see [Importing actions individually](https://docs.aws.amazon.com/personalize/latest/dg/importing-actions.html).
    public struct Action {
        /// The ID associated with the action.
        /// This member is required.
        public var actionId: Swift.String?
        /// A string map of action-specific metadata. Each element in the map consists of a key-value pair. For example, {"value": "100"}. The keys use camel case names that match the fields in the schema for the Actions dataset. In the previous example, the value matches the 'VALUE' field defined in the Actions schema. For categorical string data, to include multiple categories for a single action, separate each category with a pipe separator (|). For example, \"Deluxe|Premium\".
        public var properties: Swift.String?

        public init(
            actionId: Swift.String? = nil,
            properties: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.properties = properties
        }
    }

}

extension PersonalizeEventsClientTypes.Action: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Action(actionId: \(Swift.String(describing: actionId)), properties: \"CONTENT_REDACTED\")"}
}

extension PersonalizeEventsClientTypes {
    /// Represents an action interaction event sent using the PutActionInteractions API.
    public struct ActionInteraction {
        /// The ID of the action the user interacted with. This corresponds to the ACTION_ID field of the Action interaction schema.
        /// This member is required.
        public var actionId: Swift.String?
        /// An ID associated with the event. If an event ID is not provided, Amazon Personalize generates a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses the event ID to distinguish unique events. Any subsequent events after the first with the same event ID are not used in model training.
        public var eventId: Swift.String?
        /// The type of action interaction event. You can specify Viewed, Taken, and Not Taken event types. For more information about action interaction event type data, see [Event type data](https://docs.aws.amazon.com/personalize/latest/dg/action-interaction-event-type-data.html).
        /// This member is required.
        public var eventType: Swift.String?
        /// A list of action IDs that represents the sequence of actions you have shown the user. For example, ["actionId1", "actionId2", "actionId3"]. Amazon Personalize doesn't use impressions data from action interaction events. Instead, record multiple events for each action and use the Viewed event type.
        public var impression: [Swift.String]?
        /// A string map of event-specific data that you might choose to record. For example, if a user takes an action, other than the action ID, you might also send the number of actions taken by the user. Each item in the map consists of a key-value pair. For example, {"numberOfActions": "12"} The keys use camel case names that match the fields in the Action interactions schema. In the above example, the numberOfActions would match the 'NUMBER_OF_ACTIONS' field defined in the Action interactions schema. The following can't be included as a keyword for properties (case insensitive).
        ///
        /// * userId
        ///
        /// * sessionId
        ///
        /// * eventType
        ///
        /// * timestamp
        ///
        /// * recommendationId
        ///
        /// * impression
        public var properties: Swift.String?
        /// The ID of the list of recommendations that contains the action the user interacted with.
        public var recommendationId: Swift.String?
        /// The ID associated with the user's visit. Your application generates a unique sessionId when a user first visits your website or uses your application.
        /// This member is required.
        public var sessionId: Swift.String?
        /// The timestamp for when the action interaction event occurred. Timestamps must be in Unix epoch time format, in seconds.
        /// This member is required.
        public var timestamp: Foundation.Date?
        /// The ID of the user who interacted with the action. This corresponds to the USER_ID field of the Action interaction schema.
        public var userId: Swift.String?

        public init(
            actionId: Swift.String? = nil,
            eventId: Swift.String? = nil,
            eventType: Swift.String? = nil,
            impression: [Swift.String]? = nil,
            properties: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            sessionId: Swift.String? = nil,
            timestamp: Foundation.Date? = nil,
            userId: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.eventId = eventId
            self.eventType = eventType
            self.impression = impression
            self.properties = properties
            self.recommendationId = recommendationId
            self.sessionId = sessionId
            self.timestamp = timestamp
            self.userId = userId
        }
    }

}

extension PersonalizeEventsClientTypes.ActionInteraction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionInteraction(eventId: \(Swift.String(describing: eventId)), eventType: \(Swift.String(describing: eventType)), recommendationId: \(Swift.String(describing: recommendationId)), sessionId: \(Swift.String(describing: sessionId)), timestamp: \(Swift.String(describing: timestamp)), actionId: \"CONTENT_REDACTED\", impression: \"CONTENT_REDACTED\", properties: \"CONTENT_REDACTED\", userId: \"CONTENT_REDACTED\")"}
}

/// Provide a valid value for the field or parameter.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource is in use.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Could not find the specified resource.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutActionInteractionsInput {
    /// A list of action interaction events from the session.
    /// This member is required.
    public var actionInteractions: [PersonalizeEventsClientTypes.ActionInteraction]?
    /// The ID of your action interaction event tracker. When you create an Action interactions dataset, Amazon Personalize creates an action interaction event tracker for you. For more information, see [Action interaction event tracker ID](https://docs.aws.amazon.com/personalize/latest/dg/action-interaction-tracker-id.html).
    /// This member is required.
    public var trackingId: Swift.String?

    public init(
        actionInteractions: [PersonalizeEventsClientTypes.ActionInteraction]? = nil,
        trackingId: Swift.String? = nil
    )
    {
        self.actionInteractions = actionInteractions
        self.trackingId = trackingId
    }
}

public struct PutActionsInput {
    /// A list of action data.
    /// This member is required.
    public var actions: [PersonalizeEventsClientTypes.Action]?
    /// The Amazon Resource Name (ARN) of the Actions dataset you are adding the action or actions to.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init(
        actions: [PersonalizeEventsClientTypes.Action]? = nil,
        datasetArn: Swift.String? = nil
    )
    {
        self.actions = actions
        self.datasetArn = datasetArn
    }
}

extension PersonalizeEventsClientTypes {
    /// Contains information about a metric attribution associated with an event. For more information about metric attributions, see [Measuring impact of recommendations](https://docs.aws.amazon.com/personalize/latest/dg/measuring-recommendation-impact.html).
    public struct MetricAttribution {
        /// The source of the event, such as a third party.
        /// This member is required.
        public var eventAttributionSource: Swift.String?

        public init(
            eventAttributionSource: Swift.String? = nil
        )
        {
            self.eventAttributionSource = eventAttributionSource
        }
    }

}

extension PersonalizeEventsClientTypes {
    /// Represents item interaction event information sent using the PutEvents API.
    public struct Event {
        /// An ID associated with the event. If an event ID is not provided, Amazon Personalize generates a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses the event ID to distinguish unique events. Any subsequent events after the first with the same event ID are not used in model training.
        public var eventId: Swift.String?
        /// The type of event, such as click or download. This property corresponds to the EVENT_TYPE field of your Item interactions dataset's schema and depends on the types of events you are tracking.
        /// This member is required.
        public var eventType: Swift.String?
        /// The event value that corresponds to the EVENT_VALUE field of the Item interactions schema.
        public var eventValue: Swift.Float?
        /// A list of item IDs that represents the sequence of items you have shown the user. For example, ["itemId1", "itemId2", "itemId3"]. Provide a list of items to manually record impressions data for an event. For more information on recording impressions data, see [Recording impressions data](https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html#putevents-including-impressions-data).
        public var impression: [Swift.String]?
        /// The item ID key that corresponds to the ITEM_ID field of the Item interactions dataset's schema.
        public var itemId: Swift.String?
        /// Contains information about the metric attribution associated with an event. For more information about metric attributions, see [Measuring impact of recommendations](https://docs.aws.amazon.com/personalize/latest/dg/measuring-recommendation-impact.html).
        public var metricAttribution: PersonalizeEventsClientTypes.MetricAttribution?
        /// A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (itemId) and rating (eventValue) , you might also send the number of movie ratings made by the user. Each item in the map consists of a key-value pair. For example, {"numberOfRatings": "12"} The keys use camel case names that match the fields in the Item interactions dataset's schema. In the above example, the numberOfRatings would match the 'NUMBER_OF_RATINGS' field defined in the Item interactions dataset's schema. The following can't be included as a keyword for properties (case insensitive).
        ///
        /// * userId
        ///
        /// * sessionId
        ///
        /// * eventType
        ///
        /// * timestamp
        ///
        /// * recommendationId
        ///
        /// * impression
        public var properties: Swift.String?
        /// The ID of the list of recommendations that contains the item the user interacted with. Provide a recommendationId to have Amazon Personalize implicitly record the recommendations you show your user as impressions data. Or provide a recommendationId if you use a metric attribution to measure the impact of recommendations. For more information on recording impressions data, see [Recording impressions data](https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html#putevents-including-impressions-data). For more information on creating a metric attribution see [Measuring impact of recommendations](https://docs.aws.amazon.com/personalize/latest/dg/measuring-recommendation-impact.html).
        public var recommendationId: Swift.String?
        /// The timestamp (in Unix time) on the client side when the event occurred.
        /// This member is required.
        public var sentAt: Foundation.Date?

        public init(
            eventId: Swift.String? = nil,
            eventType: Swift.String? = nil,
            eventValue: Swift.Float? = nil,
            impression: [Swift.String]? = nil,
            itemId: Swift.String? = nil,
            metricAttribution: PersonalizeEventsClientTypes.MetricAttribution? = nil,
            properties: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            sentAt: Foundation.Date? = nil
        )
        {
            self.eventId = eventId
            self.eventType = eventType
            self.eventValue = eventValue
            self.impression = impression
            self.itemId = itemId
            self.metricAttribution = metricAttribution
            self.properties = properties
            self.recommendationId = recommendationId
            self.sentAt = sentAt
        }
    }

}

extension PersonalizeEventsClientTypes.Event: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct PutEventsInput {
    /// A list of event data from the session.
    /// This member is required.
    public var eventList: [PersonalizeEventsClientTypes.Event]?
    /// The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see [Recording item interaction events](https://docs.aws.amazon.com/personalize/latest/dg/recording-item-interaction-events.html).
    /// This member is required.
    public var sessionId: Swift.String?
    /// The tracking ID for the event. The ID is generated by a call to the [CreateEventTracker](https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html) API.
    /// This member is required.
    public var trackingId: Swift.String?
    /// The user associated with the event.
    public var userId: Swift.String?

    public init(
        eventList: [PersonalizeEventsClientTypes.Event]? = nil,
        sessionId: Swift.String? = nil,
        trackingId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.eventList = eventList
        self.sessionId = sessionId
        self.trackingId = trackingId
        self.userId = userId
    }
}

extension PutEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEventsInput(sessionId: \(Swift.String(describing: sessionId)), trackingId: \(Swift.String(describing: trackingId)), eventList: \"CONTENT_REDACTED\", userId: \"CONTENT_REDACTED\")"}
}

extension PersonalizeEventsClientTypes {
    /// Represents item metadata added to an Items dataset using the PutItems API. For more information see [Importing items individually](https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html).
    public struct Item {
        /// The ID associated with the item.
        /// This member is required.
        public var itemId: Swift.String?
        /// A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example, {"numberOfRatings": "12"}. The keys use camel case names that match the fields in the schema for the Items dataset. In the previous example, the numberOfRatings matches the 'NUMBER_OF_RATINGS' field defined in the Items schema. For categorical string data, to include multiple categories for a single item, separate each category with a pipe separator (|). For example, \"Horror|Action\".
        public var properties: Swift.String?

        public init(
            itemId: Swift.String? = nil,
            properties: Swift.String? = nil
        )
        {
            self.itemId = itemId
            self.properties = properties
        }
    }

}

extension PersonalizeEventsClientTypes.Item: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Item(itemId: \(Swift.String(describing: itemId)), properties: \"CONTENT_REDACTED\")"}
}

public struct PutItemsInput {
    /// The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.
    /// This member is required.
    public var datasetArn: Swift.String?
    /// A list of item data.
    /// This member is required.
    public var items: [PersonalizeEventsClientTypes.Item]?

    public init(
        datasetArn: Swift.String? = nil,
        items: [PersonalizeEventsClientTypes.Item]? = nil
    )
    {
        self.datasetArn = datasetArn
        self.items = items
    }
}

extension PersonalizeEventsClientTypes {
    /// Represents user metadata added to a Users dataset using the PutUsers API. For more information see [Importing users individually](https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html).
    public struct User {
        /// A string map of user-specific metadata. Each element in the map consists of a key-value pair. For example, {"numberOfVideosWatched": "45"}. The keys use camel case names that match the fields in the schema for the Users dataset. In the previous example, the numberOfVideosWatched matches the 'NUMBER_OF_VIDEOS_WATCHED' field defined in the Users schema. For categorical string data, to include multiple categories for a single user, separate each category with a pipe separator (|). For example, \"Member|Frequent shopper\".
        public var properties: Swift.String?
        /// The ID associated with the user.
        /// This member is required.
        public var userId: Swift.String?

        public init(
            properties: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.properties = properties
            self.userId = userId
        }
    }

}

extension PersonalizeEventsClientTypes.User: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "User(userId: \(Swift.String(describing: userId)), properties: \"CONTENT_REDACTED\")"}
}

public struct PutUsersInput {
    /// The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.
    /// This member is required.
    public var datasetArn: Swift.String?
    /// A list of user data.
    /// This member is required.
    public var users: [PersonalizeEventsClientTypes.User]?

    public init(
        datasetArn: Swift.String? = nil,
        users: [PersonalizeEventsClientTypes.User]? = nil
    )
    {
        self.datasetArn = datasetArn
        self.users = users
    }
}

extension PutActionInteractionsInput {

    static func urlPathProvider(_ value: PutActionInteractionsInput) -> Swift.String? {
        return "/action-interactions"
    }
}

extension PutActionsInput {

    static func urlPathProvider(_ value: PutActionsInput) -> Swift.String? {
        return "/actions"
    }
}

extension PutEventsInput {

    static func urlPathProvider(_ value: PutEventsInput) -> Swift.String? {
        return "/events"
    }
}

extension PutItemsInput {

    static func urlPathProvider(_ value: PutItemsInput) -> Swift.String? {
        return "/items"
    }
}

extension PutUsersInput {

    static func urlPathProvider(_ value: PutUsersInput) -> Swift.String? {
        return "/users"
    }
}

extension PutActionInteractionsInput {

    static func write(value: PutActionInteractionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionInteractions"].writeList(value.actionInteractions, memberWritingClosure: PersonalizeEventsClientTypes.ActionInteraction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["trackingId"].write(value.trackingId)
    }
}

extension PutActionsInput {

    static func write(value: PutActionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actions"].writeList(value.actions, memberWritingClosure: PersonalizeEventsClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["datasetArn"].write(value.datasetArn)
    }
}

extension PutEventsInput {

    static func write(value: PutEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventList"].writeList(value.eventList, memberWritingClosure: PersonalizeEventsClientTypes.Event.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sessionId"].write(value.sessionId)
        try writer["trackingId"].write(value.trackingId)
        try writer["userId"].write(value.userId)
    }
}

extension PutItemsInput {

    static func write(value: PutItemsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datasetArn"].write(value.datasetArn)
        try writer["items"].writeList(value.items, memberWritingClosure: PersonalizeEventsClientTypes.Item.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutUsersInput {

    static func write(value: PutUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datasetArn"].write(value.datasetArn)
        try writer["users"].writeList(value.users, memberWritingClosure: PersonalizeEventsClientTypes.User.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutActionInteractionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutActionInteractionsOutput {
        return PutActionInteractionsOutput()
    }
}

extension PutActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutActionsOutput {
        return PutActionsOutput()
    }
}

extension PutEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEventsOutput {
        return PutEventsOutput()
    }
}

extension PutItemsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutItemsOutput {
        return PutItemsOutput()
    }
}

extension PutUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutUsersOutput {
        return PutUsersOutput()
    }
}

enum PutActionInteractionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutItemsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PersonalizeEventsClientTypes.ActionInteraction {

    static func write(value: PersonalizeEventsClientTypes.ActionInteraction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionId"].write(value.actionId)
        try writer["eventId"].write(value.eventId)
        try writer["eventType"].write(value.eventType)
        try writer["impression"].writeList(value.impression, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["properties"].write(value.properties)
        try writer["recommendationId"].write(value.recommendationId)
        try writer["sessionId"].write(value.sessionId)
        try writer["timestamp"].writeTimestamp(value.timestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["userId"].write(value.userId)
    }
}

extension PersonalizeEventsClientTypes.Action {

    static func write(value: PersonalizeEventsClientTypes.Action?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionId"].write(value.actionId)
        try writer["properties"].write(value.properties)
    }
}

extension PersonalizeEventsClientTypes.Event {

    static func write(value: PersonalizeEventsClientTypes.Event?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventId"].write(value.eventId)
        try writer["eventType"].write(value.eventType)
        try writer["eventValue"].write(value.eventValue)
        try writer["impression"].writeList(value.impression, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["itemId"].write(value.itemId)
        try writer["metricAttribution"].write(value.metricAttribution, with: PersonalizeEventsClientTypes.MetricAttribution.write(value:to:))
        try writer["properties"].write(value.properties)
        try writer["recommendationId"].write(value.recommendationId)
        try writer["sentAt"].writeTimestamp(value.sentAt, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension PersonalizeEventsClientTypes.MetricAttribution {

    static func write(value: PersonalizeEventsClientTypes.MetricAttribution?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventAttributionSource"].write(value.eventAttributionSource)
    }
}

extension PersonalizeEventsClientTypes.Item {

    static func write(value: PersonalizeEventsClientTypes.Item?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["itemId"].write(value.itemId)
        try writer["properties"].write(value.properties)
    }
}

extension PersonalizeEventsClientTypes.User {

    static func write(value: PersonalizeEventsClientTypes.User?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["properties"].write(value.properties)
        try writer["userId"].write(value.userId)
    }
}

public enum PersonalizeEventsClientTypes {}
