// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension MediaLiveClientTypes {
    /// Aac Coding Mode
    public enum AacCodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adReceiverMix
        case codingMode10
        case codingMode11
        case codingMode20
        case codingMode51
        case sdkUnknown(Swift.String)

        public static var allCases: [AacCodingMode] {
            return [
                .adReceiverMix,
                .codingMode10,
                .codingMode11,
                .codingMode20,
                .codingMode51,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adReceiverMix: return "AD_RECEIVER_MIX"
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode11: return "CODING_MODE_1_1"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode51: return "CODING_MODE_5_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacCodingMode(rawValue: rawValue) ?? AacCodingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Aac Input Type
    public enum AacInputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case broadcasterMixedAd
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [AacInputType] {
            return [
                .broadcasterMixedAd,
                .normal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .broadcasterMixedAd: return "BROADCASTER_MIXED_AD"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacInputType(rawValue: rawValue) ?? AacInputType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Aac Profile
    public enum AacProfile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hev1
        case hev2
        case lc
        case sdkUnknown(Swift.String)

        public static var allCases: [AacProfile] {
            return [
                .hev1,
                .hev2,
                .lc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hev2: return "HEV2"
            case .lc: return "LC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacProfile(rawValue: rawValue) ?? AacProfile.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Aac Rate Control Mode
    public enum AacRateControlMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [AacRateControlMode] {
            return [
                .cbr,
                .vbr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacRateControlMode(rawValue: rawValue) ?? AacRateControlMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Aac Raw Format
    public enum AacRawFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case latmLoas
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AacRawFormat] {
            return [
                .latmLoas,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .latmLoas: return "LATM_LOAS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacRawFormat(rawValue: rawValue) ?? AacRawFormat.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AacSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case inputType = "inputType"
        case profile = "profile"
        case rateControlMode = "rateControlMode"
        case rawFormat = "rawFormat"
        case sampleRate = "sampleRate"
        case spec = "spec"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let inputType = self.inputType {
            try encodeContainer.encode(inputType.rawValue, forKey: .inputType)
        }
        if let profile = self.profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let rateControlMode = self.rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let rawFormat = self.rawFormat {
            try encodeContainer.encode(rawFormat.rawValue, forKey: .rawFormat)
        }
        if let sampleRate = self.sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let spec = self.spec {
            try encodeContainer.encode(spec.rawValue, forKey: .spec)
        }
        if let vbrQuality = self.vbrQuality {
            try encodeContainer.encode(vbrQuality.rawValue, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let inputTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacInputType.self, forKey: .inputType)
        inputType = inputTypeDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacProfile.self, forKey: .profile)
        profile = profileDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacRateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let rawFormatDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacRawFormat.self, forKey: .rawFormat)
        rawFormat = rawFormatDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let specDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacSpec.self, forKey: .spec)
        spec = specDecoded
        let vbrQualityDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacVbrQuality.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}

extension MediaLiveClientTypes {
    /// Aac Settings
    public struct AacSettings: Swift.Equatable {
        /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
        public var bitrate: Swift.Double?
        /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
        public var codingMode: MediaLiveClientTypes.AacCodingMode?
        /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
        public var inputType: MediaLiveClientTypes.AacInputType?
        /// AAC Profile.
        public var profile: MediaLiveClientTypes.AacProfile?
        /// Rate Control Mode.
        public var rateControlMode: MediaLiveClientTypes.AacRateControlMode?
        /// Sets LATM / LOAS AAC output for raw containers.
        public var rawFormat: MediaLiveClientTypes.AacRawFormat?
        /// Sample rate in Hz. Valid values depend on rate control mode and profile.
        public var sampleRate: Swift.Double?
        /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
        public var spec: MediaLiveClientTypes.AacSpec?
        /// VBR Quality Level - Only used if rateControlMode is VBR.
        public var vbrQuality: MediaLiveClientTypes.AacVbrQuality?

        public init (
            bitrate: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.AacCodingMode? = nil,
            inputType: MediaLiveClientTypes.AacInputType? = nil,
            profile: MediaLiveClientTypes.AacProfile? = nil,
            rateControlMode: MediaLiveClientTypes.AacRateControlMode? = nil,
            rawFormat: MediaLiveClientTypes.AacRawFormat? = nil,
            sampleRate: Swift.Double? = nil,
            spec: MediaLiveClientTypes.AacSpec? = nil,
            vbrQuality: MediaLiveClientTypes.AacVbrQuality? = nil
        )
        {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.inputType = inputType
            self.profile = profile
            self.rateControlMode = rateControlMode
            self.rawFormat = rawFormat
            self.sampleRate = sampleRate
            self.spec = spec
            self.vbrQuality = vbrQuality
        }
    }

}

extension MediaLiveClientTypes {
    /// Aac Spec
    public enum AacSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mpeg2
        case mpeg4
        case sdkUnknown(Swift.String)

        public static var allCases: [AacSpec] {
            return [
                .mpeg2,
                .mpeg4,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mpeg2: return "MPEG2"
            case .mpeg4: return "MPEG4"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacSpec(rawValue: rawValue) ?? AacSpec.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Aac Vbr Quality
    public enum AacVbrQuality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case mediumHigh
        case mediumLow
        case sdkUnknown(Swift.String)

        public static var allCases: [AacVbrQuality] {
            return [
                .high,
                .low,
                .mediumHigh,
                .mediumLow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .mediumHigh: return "MEDIUM_HIGH"
            case .mediumLow: return "MEDIUM_LOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AacVbrQuality(rawValue: rawValue) ?? AacVbrQuality.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Bitstream Mode
    public enum Ac3BitstreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case commentary
        case completeMain
        case dialogue
        case emergency
        case hearingImpaired
        case musicAndEffects
        case visuallyImpaired
        case voiceOver
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3BitstreamMode] {
            return [
                .commentary,
                .completeMain,
                .dialogue,
                .emergency,
                .hearingImpaired,
                .musicAndEffects,
                .visuallyImpaired,
                .voiceOver,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .commentary: return "COMMENTARY"
            case .completeMain: return "COMPLETE_MAIN"
            case .dialogue: return "DIALOGUE"
            case .emergency: return "EMERGENCY"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .musicAndEffects: return "MUSIC_AND_EFFECTS"
            case .visuallyImpaired: return "VISUALLY_IMPAIRED"
            case .voiceOver: return "VOICE_OVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Ac3BitstreamMode(rawValue: rawValue) ?? Ac3BitstreamMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Coding Mode
    public enum Ac3CodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codingMode10
        case codingMode11
        case codingMode20
        case codingMode32Lfe
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3CodingMode] {
            return [
                .codingMode10,
                .codingMode11,
                .codingMode20,
                .codingMode32Lfe,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode11: return "CODING_MODE_1_1"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode32Lfe: return "CODING_MODE_3_2_LFE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Ac3CodingMode(rawValue: rawValue) ?? Ac3CodingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Drc Profile
    public enum Ac3DrcProfile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filmStandard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3DrcProfile] {
            return [
                .filmStandard,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filmStandard: return "FILM_STANDARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Ac3DrcProfile(rawValue: rawValue) ?? Ac3DrcProfile.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Lfe Filter
    public enum Ac3LfeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3LfeFilter] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Ac3LfeFilter(rawValue: rawValue) ?? Ac3LfeFilter.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Metadata Control
    public enum Ac3MetadataControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3MetadataControl] {
            return [
                .followInput,
                .useConfigured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Ac3MetadataControl(rawValue: rawValue) ?? Ac3MetadataControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Ac3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialnorm = "dialnorm"
        case drcProfile = "drcProfile"
        case lfeFilter = "lfeFilter"
        case metadataControl = "metadataControl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = self.bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialnorm = self.dialnorm {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let drcProfile = self.drcProfile {
            try encodeContainer.encode(drcProfile.rawValue, forKey: .drcProfile)
        }
        if let lfeFilter = self.lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if let metadataControl = self.metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Ac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Ac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialnormDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let drcProfileDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Ac3DrcProfile.self, forKey: .drcProfile)
        drcProfile = drcProfileDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Ac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Ac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Settings
    public struct Ac3Settings: Swift.Equatable {
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Double?
        /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
        public var bitstreamMode: MediaLiveClientTypes.Ac3BitstreamMode?
        /// Dolby Digital coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Ac3CodingMode?
        /// Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
        public var drcProfile: MediaLiveClientTypes.Ac3DrcProfile?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
        public var lfeFilter: MediaLiveClientTypes.Ac3LfeFilter?
        /// When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaLiveClientTypes.Ac3MetadataControl?

        public init (
            bitrate: Swift.Double? = nil,
            bitstreamMode: MediaLiveClientTypes.Ac3BitstreamMode? = nil,
            codingMode: MediaLiveClientTypes.Ac3CodingMode? = nil,
            dialnorm: Swift.Int? = nil,
            drcProfile: MediaLiveClientTypes.Ac3DrcProfile? = nil,
            lfeFilter: MediaLiveClientTypes.Ac3LfeFilter? = nil,
            metadataControl: MediaLiveClientTypes.Ac3MetadataControl? = nil
        )
        {
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dialnorm = dialnorm
            self.drcProfile = drcProfile
            self.lfeFilter = lfeFilter
            self.metadataControl = metadataControl
        }
    }

}

extension MediaLiveClientTypes {
    /// The HTTP Accept header. Indicates the requested type fothe thumbnail.
    public enum AcceptHeader: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case imageJpeg
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceptHeader] {
            return [
                .imageJpeg,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .imageJpeg: return "image/jpeg"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AcceptHeader(rawValue: rawValue) ?? AcceptHeader.sdkUnknown(rawValue)
        }
    }
}

extension AcceptInputDeviceTransferInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/accept"
    }
}

/// Placeholder documentation for AcceptInputDeviceTransferRequest
public struct AcceptInputDeviceTransferInput: Swift.Equatable {
    /// The unique ID of the input device to accept. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct AcceptInputDeviceTransferInputBody: Swift.Equatable {
}

extension AcceptInputDeviceTransferInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcceptInputDeviceTransferOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptInputDeviceTransferOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcceptInputDeviceTransferOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptInputDeviceTransferOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for AcceptInputDeviceTransferResponse
public struct AcceptInputDeviceTransferOutputResponse: Swift.Equatable {

    public init () { }
}

extension MediaLiveClientTypes {
    /// Accessibility Type
    public enum AccessibilityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case doesNotImplementAccessibilityFeatures
        case implementsAccessibilityFeatures
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessibilityType] {
            return [
                .doesNotImplementAccessibilityFeatures,
                .implementsAccessibilityFeatures,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .doesNotImplementAccessibilityFeatures: return "DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES"
            case .implementsAccessibilityFeatures: return "IMPLEMENTS_ACCESSIBILITY_FEATURES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessibilityType(rawValue: rawValue) ?? AccessibilityType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Afd Signaling
    public enum AfdSignaling: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case fixed
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AfdSignaling] {
            return [
                .auto,
                .fixed,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .fixed: return "FIXED"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AfdSignaling(rawValue: rawValue) ?? AfdSignaling.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AncillarySourceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceAncillaryChannelNumber = "sourceAncillaryChannelNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceAncillaryChannelNumber = self.sourceAncillaryChannelNumber {
            try encodeContainer.encode(sourceAncillaryChannelNumber, forKey: .sourceAncillaryChannelNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceAncillaryChannelNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sourceAncillaryChannelNumber)
        sourceAncillaryChannelNumber = sourceAncillaryChannelNumberDecoded
    }
}

extension MediaLiveClientTypes {
    /// Ancillary Source Settings
    public struct AncillarySourceSettings: Swift.Equatable {
        /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
        public var sourceAncillaryChannelNumber: Swift.Int?

        public init (
            sourceAncillaryChannelNumber: Swift.Int? = nil
        )
        {
            self.sourceAncillaryChannelNumber = sourceAncillaryChannelNumber
        }
    }

}

extension MediaLiveClientTypes.ArchiveCdnSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveS3Settings = "archiveS3Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveS3Settings = self.archiveS3Settings {
            try encodeContainer.encode(archiveS3Settings, forKey: .archiveS3Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveS3SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ArchiveS3Settings.self, forKey: .archiveS3Settings)
        archiveS3Settings = archiveS3SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Archive Cdn Settings
    public struct ArchiveCdnSettings: Swift.Equatable {
        /// Archive S3 Settings
        public var archiveS3Settings: MediaLiveClientTypes.ArchiveS3Settings?

        public init (
            archiveS3Settings: MediaLiveClientTypes.ArchiveS3Settings? = nil
        )
        {
            self.archiveS3Settings = archiveS3Settings
        }
    }

}

extension MediaLiveClientTypes.ArchiveContainerSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case m2tsSettings = "m2tsSettings"
        case rawSettings = "rawSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let m2tsSettings = self.m2tsSettings {
            try encodeContainer.encode(m2tsSettings, forKey: .m2tsSettings)
        }
        if let rawSettings = self.rawSettings {
            try encodeContainer.encode(rawSettings, forKey: .rawSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let m2tsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsSettings.self, forKey: .m2tsSettings)
        m2tsSettings = m2tsSettingsDecoded
        let rawSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RawSettings.self, forKey: .rawSettings)
        rawSettings = rawSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Archive Container Settings
    public struct ArchiveContainerSettings: Swift.Equatable {
        /// M2ts Settings
        public var m2tsSettings: MediaLiveClientTypes.M2tsSettings?
        /// Raw Settings
        public var rawSettings: MediaLiveClientTypes.RawSettings?

        public init (
            m2tsSettings: MediaLiveClientTypes.M2tsSettings? = nil,
            rawSettings: MediaLiveClientTypes.RawSettings? = nil
        )
        {
            self.m2tsSettings = m2tsSettings
            self.rawSettings = rawSettings
        }
    }

}

extension MediaLiveClientTypes.ArchiveGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveCdnSettings = "archiveCdnSettings"
        case destination = "destination"
        case rolloverInterval = "rolloverInterval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveCdnSettings = self.archiveCdnSettings {
            try encodeContainer.encode(archiveCdnSettings, forKey: .archiveCdnSettings)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let rolloverInterval = self.rolloverInterval {
            try encodeContainer.encode(rolloverInterval, forKey: .rolloverInterval)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveCdnSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ArchiveCdnSettings.self, forKey: .archiveCdnSettings)
        archiveCdnSettings = archiveCdnSettingsDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let rolloverIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rolloverInterval)
        rolloverInterval = rolloverIntervalDecoded
    }
}

extension MediaLiveClientTypes {
    /// Archive Group Settings
    public struct ArchiveGroupSettings: Swift.Equatable {
        /// Parameters that control interactions with the CDN.
        public var archiveCdnSettings: MediaLiveClientTypes.ArchiveCdnSettings?
        /// A directory and base filename where archive files should be written.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Number of seconds to write to archive file before closing and starting a new one.
        public var rolloverInterval: Swift.Int?

        public init (
            archiveCdnSettings: MediaLiveClientTypes.ArchiveCdnSettings? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            rolloverInterval: Swift.Int? = nil
        )
        {
            self.archiveCdnSettings = archiveCdnSettings
            self.destination = destination
            self.rolloverInterval = rolloverInterval
        }
    }

}

extension MediaLiveClientTypes.ArchiveOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerSettings = "containerSettings"
        case `extension` = "extension"
        case nameModifier = "nameModifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerSettings = self.containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let `extension` = self.`extension` {
            try encodeContainer.encode(`extension`, forKey: .`extension`)
        }
        if let nameModifier = self.nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ArchiveContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let extensionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extension)
        `extension` = extensionDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
    }
}

extension MediaLiveClientTypes {
    /// Archive Output Settings
    public struct ArchiveOutputSettings: Swift.Equatable {
        /// Settings specific to the container type of the file.
        /// This member is required.
        public var containerSettings: MediaLiveClientTypes.ArchiveContainerSettings?
        /// Output file extension. If excluded, this will be auto-selected from the container type.
        public var `extension`: Swift.String?
        /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
        public var nameModifier: Swift.String?

        public init (
            containerSettings: MediaLiveClientTypes.ArchiveContainerSettings? = nil,
            `extension`: Swift.String? = nil,
            nameModifier: Swift.String? = nil
        )
        {
            self.containerSettings = containerSettings
            self.`extension` = `extension`
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes.ArchiveS3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = self.cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.S3CannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension MediaLiveClientTypes {
    /// Archive S3 Settings
    public struct ArchiveS3Settings: Swift.Equatable {
        /// Specify the canned ACL to apply to each S3 request. Defaults to none.
        public var cannedAcl: MediaLiveClientTypes.S3CannedAcl?

        public init (
            cannedAcl: MediaLiveClientTypes.S3CannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }

}

extension MediaLiveClientTypes.AribDestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Arib Destination Settings
    public struct AribDestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.AribSourceSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Arib Source Settings
    public struct AribSourceSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.AudioChannelMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputChannelLevels = "inputChannelLevels"
        case outputChannel = "outputChannel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputChannelLevels = inputChannelLevels {
            var inputChannelLevelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputChannelLevels)
            for inputchannellevel0 in inputChannelLevels {
                try inputChannelLevelsContainer.encode(inputchannellevel0)
            }
        }
        if let outputChannel = self.outputChannel {
            try encodeContainer.encode(outputChannel, forKey: .outputChannel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputChannelLevelsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputChannelLevel?].self, forKey: .inputChannelLevels)
        var inputChannelLevelsDecoded0:[MediaLiveClientTypes.InputChannelLevel]? = nil
        if let inputChannelLevelsContainer = inputChannelLevelsContainer {
            inputChannelLevelsDecoded0 = [MediaLiveClientTypes.InputChannelLevel]()
            for structure0 in inputChannelLevelsContainer {
                if let structure0 = structure0 {
                    inputChannelLevelsDecoded0?.append(structure0)
                }
            }
        }
        inputChannelLevels = inputChannelLevelsDecoded0
        let outputChannelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outputChannel)
        outputChannel = outputChannelDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Channel Mapping
    public struct AudioChannelMapping: Swift.Equatable {
        /// Indices and gain values for each input channel that should be remixed into this output channel.
        /// This member is required.
        public var inputChannelLevels: [MediaLiveClientTypes.InputChannelLevel]?
        /// The index of the output channel being produced.
        /// This member is required.
        public var outputChannel: Swift.Int?

        public init (
            inputChannelLevels: [MediaLiveClientTypes.InputChannelLevel]? = nil,
            outputChannel: Swift.Int? = nil
        )
        {
            self.inputChannelLevels = inputChannelLevels
            self.outputChannel = outputChannel
        }
    }

}

extension MediaLiveClientTypes.AudioCodecSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aacSettings = "aacSettings"
        case ac3Settings = "ac3Settings"
        case eac3AtmosSettings = "eac3AtmosSettings"
        case eac3Settings = "eac3Settings"
        case mp2Settings = "mp2Settings"
        case passThroughSettings = "passThroughSettings"
        case wavSettings = "wavSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aacSettings = self.aacSettings {
            try encodeContainer.encode(aacSettings, forKey: .aacSettings)
        }
        if let ac3Settings = self.ac3Settings {
            try encodeContainer.encode(ac3Settings, forKey: .ac3Settings)
        }
        if let eac3AtmosSettings = self.eac3AtmosSettings {
            try encodeContainer.encode(eac3AtmosSettings, forKey: .eac3AtmosSettings)
        }
        if let eac3Settings = self.eac3Settings {
            try encodeContainer.encode(eac3Settings, forKey: .eac3Settings)
        }
        if let mp2Settings = self.mp2Settings {
            try encodeContainer.encode(mp2Settings, forKey: .mp2Settings)
        }
        if let passThroughSettings = self.passThroughSettings {
            try encodeContainer.encode(passThroughSettings, forKey: .passThroughSettings)
        }
        if let wavSettings = self.wavSettings {
            try encodeContainer.encode(wavSettings, forKey: .wavSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aacSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AacSettings.self, forKey: .aacSettings)
        aacSettings = aacSettingsDecoded
        let ac3SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Ac3Settings.self, forKey: .ac3Settings)
        ac3Settings = ac3SettingsDecoded
        let eac3AtmosSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosSettings.self, forKey: .eac3AtmosSettings)
        eac3AtmosSettings = eac3AtmosSettingsDecoded
        let eac3SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3Settings.self, forKey: .eac3Settings)
        eac3Settings = eac3SettingsDecoded
        let mp2SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mp2Settings.self, forKey: .mp2Settings)
        mp2Settings = mp2SettingsDecoded
        let passThroughSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.PassThroughSettings.self, forKey: .passThroughSettings)
        passThroughSettings = passThroughSettingsDecoded
        let wavSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.WavSettings.self, forKey: .wavSettings)
        wavSettings = wavSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Codec Settings
    public struct AudioCodecSettings: Swift.Equatable {
        /// Aac Settings
        public var aacSettings: MediaLiveClientTypes.AacSettings?
        /// Ac3 Settings
        public var ac3Settings: MediaLiveClientTypes.Ac3Settings?
        /// Eac3 Atmos Settings
        public var eac3AtmosSettings: MediaLiveClientTypes.Eac3AtmosSettings?
        /// Eac3 Settings
        public var eac3Settings: MediaLiveClientTypes.Eac3Settings?
        /// Mp2 Settings
        public var mp2Settings: MediaLiveClientTypes.Mp2Settings?
        /// Pass Through Settings
        public var passThroughSettings: MediaLiveClientTypes.PassThroughSettings?
        /// Wav Settings
        public var wavSettings: MediaLiveClientTypes.WavSettings?

        public init (
            aacSettings: MediaLiveClientTypes.AacSettings? = nil,
            ac3Settings: MediaLiveClientTypes.Ac3Settings? = nil,
            eac3AtmosSettings: MediaLiveClientTypes.Eac3AtmosSettings? = nil,
            eac3Settings: MediaLiveClientTypes.Eac3Settings? = nil,
            mp2Settings: MediaLiveClientTypes.Mp2Settings? = nil,
            passThroughSettings: MediaLiveClientTypes.PassThroughSettings? = nil,
            wavSettings: MediaLiveClientTypes.WavSettings? = nil
        )
        {
            self.aacSettings = aacSettings
            self.ac3Settings = ac3Settings
            self.eac3AtmosSettings = eac3AtmosSettings
            self.eac3Settings = eac3Settings
            self.mp2Settings = mp2Settings
            self.passThroughSettings = passThroughSettings
            self.wavSettings = wavSettings
        }
    }

}

extension MediaLiveClientTypes.AudioDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioNormalizationSettings = "audioNormalizationSettings"
        case audioSelectorName = "audioSelectorName"
        case audioType = "audioType"
        case audioTypeControl = "audioTypeControl"
        case audioWatermarkingSettings = "audioWatermarkingSettings"
        case codecSettings = "codecSettings"
        case languageCode = "languageCode"
        case languageCodeControl = "languageCodeControl"
        case name = "name"
        case remixSettings = "remixSettings"
        case streamName = "streamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioNormalizationSettings = self.audioNormalizationSettings {
            try encodeContainer.encode(audioNormalizationSettings, forKey: .audioNormalizationSettings)
        }
        if let audioSelectorName = self.audioSelectorName {
            try encodeContainer.encode(audioSelectorName, forKey: .audioSelectorName)
        }
        if let audioType = self.audioType {
            try encodeContainer.encode(audioType.rawValue, forKey: .audioType)
        }
        if let audioTypeControl = self.audioTypeControl {
            try encodeContainer.encode(audioTypeControl.rawValue, forKey: .audioTypeControl)
        }
        if let audioWatermarkingSettings = self.audioWatermarkingSettings {
            try encodeContainer.encode(audioWatermarkingSettings, forKey: .audioWatermarkingSettings)
        }
        if let codecSettings = self.codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageCodeControl = self.languageCodeControl {
            try encodeContainer.encode(languageCodeControl.rawValue, forKey: .languageCodeControl)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let remixSettings = self.remixSettings {
            try encodeContainer.encode(remixSettings, forKey: .remixSettings)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioNormalizationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioNormalizationSettings.self, forKey: .audioNormalizationSettings)
        audioNormalizationSettings = audioNormalizationSettingsDecoded
        let audioSelectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioSelectorName)
        audioSelectorName = audioSelectorNameDecoded
        let audioTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioType.self, forKey: .audioType)
        audioType = audioTypeDecoded
        let audioTypeControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioDescriptionAudioTypeControl.self, forKey: .audioTypeControl)
        audioTypeControl = audioTypeControlDecoded
        let audioWatermarkingSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioWatermarkSettings.self, forKey: .audioWatermarkingSettings)
        audioWatermarkingSettings = audioWatermarkingSettingsDecoded
        let codecSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageCodeControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioDescriptionLanguageCodeControl.self, forKey: .languageCodeControl)
        languageCodeControl = languageCodeControlDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let remixSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RemixSettings.self, forKey: .remixSettings)
        remixSettings = remixSettingsDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Description
    public struct AudioDescription: Swift.Equatable {
        /// Advanced audio normalization settings.
        public var audioNormalizationSettings: MediaLiveClientTypes.AudioNormalizationSettings?
        /// The name of the AudioSelector used as the source for this AudioDescription.
        /// This member is required.
        public var audioSelectorName: Swift.String?
        /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
        public var audioType: MediaLiveClientTypes.AudioType?
        /// Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
        public var audioTypeControl: MediaLiveClientTypes.AudioDescriptionAudioTypeControl?
        /// Settings to configure one or more solutions that insert audio watermarks in the audio encode
        public var audioWatermarkingSettings: MediaLiveClientTypes.AudioWatermarkSettings?
        /// Audio codec settings.
        public var codecSettings: MediaLiveClientTypes.AudioCodecSettings?
        /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
        public var languageCode: Swift.String?
        /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
        public var languageCodeControl: MediaLiveClientTypes.AudioDescriptionLanguageCodeControl?
        /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
        /// This member is required.
        public var name: Swift.String?
        /// Settings that control how input audio channels are remixed into the output audio channels.
        public var remixSettings: MediaLiveClientTypes.RemixSettings?
        /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
        public var streamName: Swift.String?

        public init (
            audioNormalizationSettings: MediaLiveClientTypes.AudioNormalizationSettings? = nil,
            audioSelectorName: Swift.String? = nil,
            audioType: MediaLiveClientTypes.AudioType? = nil,
            audioTypeControl: MediaLiveClientTypes.AudioDescriptionAudioTypeControl? = nil,
            audioWatermarkingSettings: MediaLiveClientTypes.AudioWatermarkSettings? = nil,
            codecSettings: MediaLiveClientTypes.AudioCodecSettings? = nil,
            languageCode: Swift.String? = nil,
            languageCodeControl: MediaLiveClientTypes.AudioDescriptionLanguageCodeControl? = nil,
            name: Swift.String? = nil,
            remixSettings: MediaLiveClientTypes.RemixSettings? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.audioNormalizationSettings = audioNormalizationSettings
            self.audioSelectorName = audioSelectorName
            self.audioType = audioType
            self.audioTypeControl = audioTypeControl
            self.audioWatermarkingSettings = audioWatermarkingSettings
            self.codecSettings = codecSettings
            self.languageCode = languageCode
            self.languageCodeControl = languageCodeControl
            self.name = name
            self.remixSettings = remixSettings
            self.streamName = streamName
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Description Audio Type Control
    public enum AudioDescriptionAudioTypeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioDescriptionAudioTypeControl] {
            return [
                .followInput,
                .useConfigured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioDescriptionAudioTypeControl(rawValue: rawValue) ?? AudioDescriptionAudioTypeControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Description Language Code Control
    public enum AudioDescriptionLanguageCodeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioDescriptionLanguageCodeControl] {
            return [
                .followInput,
                .useConfigured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioDescriptionLanguageCodeControl(rawValue: rawValue) ?? AudioDescriptionLanguageCodeControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AudioDolbyEDecode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case programSelection = "programSelection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let programSelection = self.programSelection {
            try encodeContainer.encode(programSelection.rawValue, forKey: .programSelection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let programSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DolbyEProgramSelection.self, forKey: .programSelection)
        programSelection = programSelectionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Dolby EDecode
    public struct AudioDolbyEDecode: Swift.Equatable {
        /// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
        /// This member is required.
        public var programSelection: MediaLiveClientTypes.DolbyEProgramSelection?

        public init (
            programSelection: MediaLiveClientTypes.DolbyEProgramSelection? = nil
        )
        {
            self.programSelection = programSelection
        }
    }

}

extension MediaLiveClientTypes.AudioHlsRenditionSelection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "groupId"
        case name = "name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = self.groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Hls Rendition Selection
    public struct AudioHlsRenditionSelection: Swift.Equatable {
        /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
        /// This member is required.
        public var groupId: Swift.String?
        /// Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
        /// This member is required.
        public var name: Swift.String?

        public init (
            groupId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.name = name
        }
    }

}

extension MediaLiveClientTypes.AudioLanguageSelection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "languageCode"
        case languageSelectionPolicy = "languageSelectionPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageSelectionPolicy = self.languageSelectionPolicy {
            try encodeContainer.encode(languageSelectionPolicy.rawValue, forKey: .languageSelectionPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageSelectionPolicyDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioLanguageSelectionPolicy.self, forKey: .languageSelectionPolicy)
        languageSelectionPolicy = languageSelectionPolicyDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Language Selection
    public struct AudioLanguageSelection: Swift.Equatable {
        /// Selects a specific three-letter language code from within an audio source.
        /// This member is required.
        public var languageCode: Swift.String?
        /// When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
        public var languageSelectionPolicy: MediaLiveClientTypes.AudioLanguageSelectionPolicy?

        public init (
            languageCode: Swift.String? = nil,
            languageSelectionPolicy: MediaLiveClientTypes.AudioLanguageSelectionPolicy? = nil
        )
        {
            self.languageCode = languageCode
            self.languageSelectionPolicy = languageSelectionPolicy
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Language Selection Policy
    public enum AudioLanguageSelectionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case loose
        case strict
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioLanguageSelectionPolicy] {
            return [
                .loose,
                .strict,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .loose: return "LOOSE"
            case .strict: return "STRICT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioLanguageSelectionPolicy(rawValue: rawValue) ?? AudioLanguageSelectionPolicy.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Normalization Algorithm
    public enum AudioNormalizationAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case itu17701
        case itu17702
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationAlgorithm] {
            return [
                .itu17701,
                .itu17702,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .itu17701: return "ITU_1770_1"
            case .itu17702: return "ITU_1770_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioNormalizationAlgorithm(rawValue: rawValue) ?? AudioNormalizationAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Normalization Algorithm Control
    public enum AudioNormalizationAlgorithmControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case correctAudio
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationAlgorithmControl] {
            return [
                .correctAudio,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .correctAudio: return "CORRECT_AUDIO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioNormalizationAlgorithmControl(rawValue: rawValue) ?? AudioNormalizationAlgorithmControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AudioNormalizationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm = "algorithm"
        case algorithmControl = "algorithmControl"
        case targetLkfs = "targetLkfs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = self.algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let algorithmControl = self.algorithmControl {
            try encodeContainer.encode(algorithmControl.rawValue, forKey: .algorithmControl)
        }
        if let targetLkfs = self.targetLkfs {
            try encodeContainer.encode(targetLkfs, forKey: .targetLkfs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioNormalizationAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let algorithmControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioNormalizationAlgorithmControl.self, forKey: .algorithmControl)
        algorithmControl = algorithmControlDecoded
        let targetLkfsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetLkfs)
        targetLkfs = targetLkfsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Normalization Settings
    public struct AudioNormalizationSettings: Swift.Equatable {
        /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
        public var algorithm: MediaLiveClientTypes.AudioNormalizationAlgorithm?
        /// When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
        public var algorithmControl: MediaLiveClientTypes.AudioNormalizationAlgorithmControl?
        /// Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
        public var targetLkfs: Swift.Double?

        public init (
            algorithm: MediaLiveClientTypes.AudioNormalizationAlgorithm? = nil,
            algorithmControl: MediaLiveClientTypes.AudioNormalizationAlgorithmControl? = nil,
            targetLkfs: Swift.Double? = nil
        )
        {
            self.algorithm = algorithm
            self.algorithmControl = algorithmControl
            self.targetLkfs = targetLkfs
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Only Hls Segment Type
    public enum AudioOnlyHlsSegmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aac
        case fmp4
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioOnlyHlsSegmentType] {
            return [
                .aac,
                .fmp4,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aac: return "AAC"
            case .fmp4: return "FMP4"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioOnlyHlsSegmentType(rawValue: rawValue) ?? AudioOnlyHlsSegmentType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AudioOnlyHlsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioGroupId = "audioGroupId"
        case audioOnlyImage = "audioOnlyImage"
        case audioTrackType = "audioTrackType"
        case segmentType = "segmentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioGroupId = self.audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioOnlyImage = self.audioOnlyImage {
            try encodeContainer.encode(audioOnlyImage, forKey: .audioOnlyImage)
        }
        if let audioTrackType = self.audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let segmentType = self.segmentType {
            try encodeContainer.encode(segmentType.rawValue, forKey: .segmentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioOnlyImageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .audioOnlyImage)
        audioOnlyImage = audioOnlyImageDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioOnlyHlsTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let segmentTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioOnlyHlsSegmentType.self, forKey: .segmentType)
        segmentType = segmentTypeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Only Hls Settings
    public struct AudioOnlyHlsSettings: Swift.Equatable {
        /// Specifies the group to which the audio Rendition belongs.
        public var audioGroupId: Swift.String?
        /// Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
        public var audioOnlyImage: MediaLiveClientTypes.InputLocation?
        /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
        public var audioTrackType: MediaLiveClientTypes.AudioOnlyHlsTrackType?
        /// Specifies the segment type.
        public var segmentType: MediaLiveClientTypes.AudioOnlyHlsSegmentType?

        public init (
            audioGroupId: Swift.String? = nil,
            audioOnlyImage: MediaLiveClientTypes.InputLocation? = nil,
            audioTrackType: MediaLiveClientTypes.AudioOnlyHlsTrackType? = nil,
            segmentType: MediaLiveClientTypes.AudioOnlyHlsSegmentType? = nil
        )
        {
            self.audioGroupId = audioGroupId
            self.audioOnlyImage = audioOnlyImage
            self.audioTrackType = audioTrackType
            self.segmentType = segmentType
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Only Hls Track Type
    public enum AudioOnlyHlsTrackType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alternateAudioAutoSelect
        case alternateAudioAutoSelectDefault
        case alternateAudioNotAutoSelect
        case audioOnlyVariantStream
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioOnlyHlsTrackType] {
            return [
                .alternateAudioAutoSelect,
                .alternateAudioAutoSelectDefault,
                .alternateAudioNotAutoSelect,
                .audioOnlyVariantStream,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
            case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
            case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
            case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioOnlyHlsTrackType(rawValue: rawValue) ?? AudioOnlyHlsTrackType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AudioPidSelection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pid = self.pid {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Pid Selection
    public struct AudioPidSelection: Swift.Equatable {
        /// Selects a specific PID from within a source.
        /// This member is required.
        public var pid: Swift.Int?

        public init (
            pid: Swift.Int? = nil
        )
        {
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes.AudioSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "name"
        case selectorSettings = "selectorSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let selectorSettings = self.selectorSettings {
            try encodeContainer.encode(selectorSettings, forKey: .selectorSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let selectorSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioSelectorSettings.self, forKey: .selectorSettings)
        selectorSettings = selectorSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Selector
    public struct AudioSelector: Swift.Equatable {
        /// The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
        /// This member is required.
        public var name: Swift.String?
        /// The audio selector settings.
        public var selectorSettings: MediaLiveClientTypes.AudioSelectorSettings?

        public init (
            name: Swift.String? = nil,
            selectorSettings: MediaLiveClientTypes.AudioSelectorSettings? = nil
        )
        {
            self.name = name
            self.selectorSettings = selectorSettings
        }
    }

}

extension MediaLiveClientTypes.AudioSelectorSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioHlsRenditionSelection = "audioHlsRenditionSelection"
        case audioLanguageSelection = "audioLanguageSelection"
        case audioPidSelection = "audioPidSelection"
        case audioTrackSelection = "audioTrackSelection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioHlsRenditionSelection = self.audioHlsRenditionSelection {
            try encodeContainer.encode(audioHlsRenditionSelection, forKey: .audioHlsRenditionSelection)
        }
        if let audioLanguageSelection = self.audioLanguageSelection {
            try encodeContainer.encode(audioLanguageSelection, forKey: .audioLanguageSelection)
        }
        if let audioPidSelection = self.audioPidSelection {
            try encodeContainer.encode(audioPidSelection, forKey: .audioPidSelection)
        }
        if let audioTrackSelection = self.audioTrackSelection {
            try encodeContainer.encode(audioTrackSelection, forKey: .audioTrackSelection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioHlsRenditionSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioHlsRenditionSelection.self, forKey: .audioHlsRenditionSelection)
        audioHlsRenditionSelection = audioHlsRenditionSelectionDecoded
        let audioLanguageSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioLanguageSelection.self, forKey: .audioLanguageSelection)
        audioLanguageSelection = audioLanguageSelectionDecoded
        let audioPidSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioPidSelection.self, forKey: .audioPidSelection)
        audioPidSelection = audioPidSelectionDecoded
        let audioTrackSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioTrackSelection.self, forKey: .audioTrackSelection)
        audioTrackSelection = audioTrackSelectionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Selector Settings
    public struct AudioSelectorSettings: Swift.Equatable {
        /// Audio Hls Rendition Selection
        public var audioHlsRenditionSelection: MediaLiveClientTypes.AudioHlsRenditionSelection?
        /// Audio Language Selection
        public var audioLanguageSelection: MediaLiveClientTypes.AudioLanguageSelection?
        /// Audio Pid Selection
        public var audioPidSelection: MediaLiveClientTypes.AudioPidSelection?
        /// Audio Track Selection
        public var audioTrackSelection: MediaLiveClientTypes.AudioTrackSelection?

        public init (
            audioHlsRenditionSelection: MediaLiveClientTypes.AudioHlsRenditionSelection? = nil,
            audioLanguageSelection: MediaLiveClientTypes.AudioLanguageSelection? = nil,
            audioPidSelection: MediaLiveClientTypes.AudioPidSelection? = nil,
            audioTrackSelection: MediaLiveClientTypes.AudioTrackSelection? = nil
        )
        {
            self.audioHlsRenditionSelection = audioHlsRenditionSelection
            self.audioLanguageSelection = audioLanguageSelection
            self.audioPidSelection = audioPidSelection
            self.audioTrackSelection = audioTrackSelection
        }
    }

}

extension MediaLiveClientTypes.AudioSilenceFailoverSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioSelectorName = "audioSelectorName"
        case audioSilenceThresholdMsec = "audioSilenceThresholdMsec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorName = self.audioSelectorName {
            try encodeContainer.encode(audioSelectorName, forKey: .audioSelectorName)
        }
        if let audioSilenceThresholdMsec = self.audioSilenceThresholdMsec {
            try encodeContainer.encode(audioSilenceThresholdMsec, forKey: .audioSilenceThresholdMsec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioSelectorName)
        audioSelectorName = audioSelectorNameDecoded
        let audioSilenceThresholdMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .audioSilenceThresholdMsec)
        audioSilenceThresholdMsec = audioSilenceThresholdMsecDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for AudioSilenceFailoverSettings
    public struct AudioSilenceFailoverSettings: Swift.Equatable {
        /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
        /// This member is required.
        public var audioSelectorName: Swift.String?
        /// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
        public var audioSilenceThresholdMsec: Swift.Int?

        public init (
            audioSelectorName: Swift.String? = nil,
            audioSilenceThresholdMsec: Swift.Int? = nil
        )
        {
            self.audioSelectorName = audioSelectorName
            self.audioSilenceThresholdMsec = audioSilenceThresholdMsec
        }
    }

}

extension MediaLiveClientTypes.AudioTrack: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case track = "track"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let track = self.track {
            try encodeContainer.encode(track, forKey: .track)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trackDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .track)
        track = trackDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Track
    public struct AudioTrack: Swift.Equatable {
        /// 1-based integer value that maps to a specific audio track
        /// This member is required.
        public var track: Swift.Int?

        public init (
            track: Swift.Int? = nil
        )
        {
            self.track = track
        }
    }

}

extension MediaLiveClientTypes.AudioTrackSelection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dolbyEDecode = "dolbyEDecode"
        case tracks = "tracks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dolbyEDecode = self.dolbyEDecode {
            try encodeContainer.encode(dolbyEDecode, forKey: .dolbyEDecode)
        }
        if let tracks = tracks {
            var tracksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tracks)
            for audiotrack0 in tracks {
                try tracksContainer.encode(audiotrack0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tracksContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.AudioTrack?].self, forKey: .tracks)
        var tracksDecoded0:[MediaLiveClientTypes.AudioTrack]? = nil
        if let tracksContainer = tracksContainer {
            tracksDecoded0 = [MediaLiveClientTypes.AudioTrack]()
            for structure0 in tracksContainer {
                if let structure0 = structure0 {
                    tracksDecoded0?.append(structure0)
                }
            }
        }
        tracks = tracksDecoded0
        let dolbyEDecodeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioDolbyEDecode.self, forKey: .dolbyEDecode)
        dolbyEDecode = dolbyEDecodeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Track Selection
    public struct AudioTrackSelection: Swift.Equatable {
        /// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337
        public var dolbyEDecode: MediaLiveClientTypes.AudioDolbyEDecode?
        /// Selects one or more unique audio tracks from within a source.
        /// This member is required.
        public var tracks: [MediaLiveClientTypes.AudioTrack]?

        public init (
            dolbyEDecode: MediaLiveClientTypes.AudioDolbyEDecode? = nil,
            tracks: [MediaLiveClientTypes.AudioTrack]? = nil
        )
        {
            self.dolbyEDecode = dolbyEDecode
            self.tracks = tracks
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Type
    public enum AudioType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cleanEffects
        case hearingImpaired
        case undefined
        case visualImpairedCommentary
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioType] {
            return [
                .cleanEffects,
                .hearingImpaired,
                .undefined,
                .visualImpairedCommentary,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cleanEffects: return "CLEAN_EFFECTS"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .undefined: return "UNDEFINED"
            case .visualImpairedCommentary: return "VISUAL_IMPAIRED_COMMENTARY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AudioType(rawValue: rawValue) ?? AudioType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AudioWatermarkSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nielsenWatermarksSettings = "nielsenWatermarksSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nielsenWatermarksSettings = self.nielsenWatermarksSettings {
            try encodeContainer.encode(nielsenWatermarksSettings, forKey: .nielsenWatermarksSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nielsenWatermarksSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenWatermarksSettings.self, forKey: .nielsenWatermarksSettings)
        nielsenWatermarksSettings = nielsenWatermarksSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Audio Watermark Settings
    public struct AudioWatermarkSettings: Swift.Equatable {
        /// Settings to configure Nielsen Watermarks in the audio encode
        public var nielsenWatermarksSettings: MediaLiveClientTypes.NielsenWatermarksSettings?

        public init (
            nielsenWatermarksSettings: MediaLiveClientTypes.NielsenWatermarksSettings? = nil
        )
        {
            self.nielsenWatermarksSettings = nielsenWatermarksSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Authentication Scheme
    public enum AuthenticationScheme: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case akamai
        case common
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticationScheme] {
            return [
                .akamai,
                .common,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .akamai: return "AKAMAI"
            case .common: return "COMMON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthenticationScheme(rawValue: rawValue) ?? AuthenticationScheme.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AutomaticInputFailoverSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorClearTimeMsec = "errorClearTimeMsec"
        case failoverConditions = "failoverConditions"
        case inputPreference = "inputPreference"
        case secondaryInputId = "secondaryInputId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorClearTimeMsec = self.errorClearTimeMsec {
            try encodeContainer.encode(errorClearTimeMsec, forKey: .errorClearTimeMsec)
        }
        if let failoverConditions = failoverConditions {
            var failoverConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failoverConditions)
            for failovercondition0 in failoverConditions {
                try failoverConditionsContainer.encode(failovercondition0)
            }
        }
        if let inputPreference = self.inputPreference {
            try encodeContainer.encode(inputPreference.rawValue, forKey: .inputPreference)
        }
        if let secondaryInputId = self.secondaryInputId {
            try encodeContainer.encode(secondaryInputId, forKey: .secondaryInputId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorClearTimeMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorClearTimeMsec)
        errorClearTimeMsec = errorClearTimeMsecDecoded
        let failoverConditionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.FailoverCondition?].self, forKey: .failoverConditions)
        var failoverConditionsDecoded0:[MediaLiveClientTypes.FailoverCondition]? = nil
        if let failoverConditionsContainer = failoverConditionsContainer {
            failoverConditionsDecoded0 = [MediaLiveClientTypes.FailoverCondition]()
            for structure0 in failoverConditionsContainer {
                if let structure0 = structure0 {
                    failoverConditionsDecoded0?.append(structure0)
                }
            }
        }
        failoverConditions = failoverConditionsDecoded0
        let inputPreferenceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputPreference.self, forKey: .inputPreference)
        inputPreference = inputPreferenceDecoded
        let secondaryInputIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secondaryInputId)
        secondaryInputId = secondaryInputIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// The settings for Automatic Input Failover.
    public struct AutomaticInputFailoverSettings: Swift.Equatable {
        /// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
        public var errorClearTimeMsec: Swift.Int?
        /// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
        public var failoverConditions: [MediaLiveClientTypes.FailoverCondition]?
        /// Input preference when deciding which input to make active when a previously failed input has recovered.
        public var inputPreference: MediaLiveClientTypes.InputPreference?
        /// The input ID of the secondary input in the automatic input failover pair.
        /// This member is required.
        public var secondaryInputId: Swift.String?

        public init (
            errorClearTimeMsec: Swift.Int? = nil,
            failoverConditions: [MediaLiveClientTypes.FailoverCondition]? = nil,
            inputPreference: MediaLiveClientTypes.InputPreference? = nil,
            secondaryInputId: Swift.String? = nil
        )
        {
            self.errorClearTimeMsec = errorClearTimeMsec
            self.failoverConditions = failoverConditions
            self.inputPreference = inputPreference
            self.secondaryInputId = secondaryInputId
        }
    }

}

extension MediaLiveClientTypes.AvailBlanking: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availBlankingImage = "availBlankingImage"
        case state = "state"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availBlankingImage = self.availBlankingImage {
            try encodeContainer.encode(availBlankingImage, forKey: .availBlankingImage)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availBlankingImageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .availBlankingImage)
        availBlankingImage = availBlankingImageDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AvailBlankingState.self, forKey: .state)
        state = stateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Avail Blanking
    public struct AvailBlanking: Swift.Equatable {
        /// Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public var availBlankingImage: MediaLiveClientTypes.InputLocation?
        /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        public var state: MediaLiveClientTypes.AvailBlankingState?

        public init (
            availBlankingImage: MediaLiveClientTypes.InputLocation? = nil,
            state: MediaLiveClientTypes.AvailBlankingState? = nil
        )
        {
            self.availBlankingImage = availBlankingImage
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {
    /// Avail Blanking State
    public enum AvailBlankingState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AvailBlankingState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AvailBlankingState(rawValue: rawValue) ?? AvailBlankingState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.AvailConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availSettings = "availSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availSettings = self.availSettings {
            try encodeContainer.encode(availSettings, forKey: .availSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AvailSettings.self, forKey: .availSettings)
        availSettings = availSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Avail Configuration
    public struct AvailConfiguration: Swift.Equatable {
        /// Ad avail settings.
        public var availSettings: MediaLiveClientTypes.AvailSettings?

        public init (
            availSettings: MediaLiveClientTypes.AvailSettings? = nil
        )
        {
            self.availSettings = availSettings
        }
    }

}

extension MediaLiveClientTypes.AvailSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case esam = "esam"
        case scte35SpliceInsert = "scte35SpliceInsert"
        case scte35TimeSignalApos = "scte35TimeSignalApos"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let esam = self.esam {
            try encodeContainer.encode(esam, forKey: .esam)
        }
        if let scte35SpliceInsert = self.scte35SpliceInsert {
            try encodeContainer.encode(scte35SpliceInsert, forKey: .scte35SpliceInsert)
        }
        if let scte35TimeSignalApos = self.scte35TimeSignalApos {
            try encodeContainer.encode(scte35TimeSignalApos, forKey: .scte35TimeSignalApos)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let esamDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Esam.self, forKey: .esam)
        esam = esamDecoded
        let scte35SpliceInsertDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SpliceInsert.self, forKey: .scte35SpliceInsert)
        scte35SpliceInsert = scte35SpliceInsertDecoded
        let scte35TimeSignalAposDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35TimeSignalApos.self, forKey: .scte35TimeSignalApos)
        scte35TimeSignalApos = scte35TimeSignalAposDecoded
    }
}

extension MediaLiveClientTypes {
    /// Avail Settings
    public struct AvailSettings: Swift.Equatable {
        /// Esam
        public var esam: MediaLiveClientTypes.Esam?
        /// Scte35 Splice Insert
        public var scte35SpliceInsert: MediaLiveClientTypes.Scte35SpliceInsert?
        /// Scte35 Time Signal Apos
        public var scte35TimeSignalApos: MediaLiveClientTypes.Scte35TimeSignalApos?

        public init (
            esam: MediaLiveClientTypes.Esam? = nil,
            scte35SpliceInsert: MediaLiveClientTypes.Scte35SpliceInsert? = nil,
            scte35TimeSignalApos: MediaLiveClientTypes.Scte35TimeSignalApos? = nil
        )
        {
            self.esam = esam
            self.scte35SpliceInsert = scte35SpliceInsert
            self.scte35TimeSignalApos = scte35TimeSignalApos
        }
    }

}

extension BadGatewayException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadGatewayExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for BadGatewayException
public struct BadGatewayException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadGatewayExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadGatewayExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for BadRequestException
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchDeleteInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIds = "channelIds"
        case inputIds = "inputIds"
        case inputSecurityGroupIds = "inputSecurityGroupIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __string0 in channelIds {
                try channelIdsContainer.encode(__string0)
            }
        }
        if let inputIds = inputIds {
            var inputIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputIds)
            for __string0 in inputIds {
                try inputIdsContainer.encode(__string0)
            }
        }
        if let inputSecurityGroupIds = inputSecurityGroupIds {
            var inputSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroupIds)
            for __string0 in inputSecurityGroupIds {
                try inputSecurityGroupIdsContainer.encode(__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __string0 in multiplexIds {
                try multiplexIdsContainer.encode(__string0)
            }
        }
    }
}

extension BatchDeleteInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/batch/delete"
    }
}

/// A request to delete resources
public struct BatchDeleteInput: Swift.Equatable {
    /// List of channel IDs
    public var channelIds: [Swift.String]?
    /// List of input IDs
    public var inputIds: [Swift.String]?
    /// List of input security group IDs
    public var inputSecurityGroupIds: [Swift.String]?
    /// List of multiplex IDs
    public var multiplexIds: [Swift.String]?

    public init (
        channelIds: [Swift.String]? = nil,
        inputIds: [Swift.String]? = nil,
        inputSecurityGroupIds: [Swift.String]? = nil,
        multiplexIds: [Swift.String]? = nil
    )
    {
        self.channelIds = channelIds
        self.inputIds = inputIds
        self.inputSecurityGroupIds = inputSecurityGroupIds
        self.multiplexIds = multiplexIds
    }
}

struct BatchDeleteInputBody: Swift.Equatable {
    let channelIds: [Swift.String]?
    let inputIds: [Swift.String]?
    let inputSecurityGroupIds: [Swift.String]?
    let multiplexIds: [Swift.String]?
}

extension BatchDeleteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIds = "channelIds"
        case inputIds = "inputIds"
        case inputSecurityGroupIds = "inputSecurityGroupIds"
        case multiplexIds = "multiplexIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .channelIds)
        var channelIdsDecoded0:[Swift.String]? = nil
        if let channelIdsContainer = channelIdsContainer {
            channelIdsDecoded0 = [Swift.String]()
            for string0 in channelIdsContainer {
                if let string0 = string0 {
                    channelIdsDecoded0?.append(string0)
                }
            }
        }
        channelIds = channelIdsDecoded0
        let inputIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputIds)
        var inputIdsDecoded0:[Swift.String]? = nil
        if let inputIdsContainer = inputIdsContainer {
            inputIdsDecoded0 = [Swift.String]()
            for string0 in inputIdsContainer {
                if let string0 = string0 {
                    inputIdsDecoded0?.append(string0)
                }
            }
        }
        inputIds = inputIdsDecoded0
        let inputSecurityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputSecurityGroupIds)
        var inputSecurityGroupIdsDecoded0:[Swift.String]? = nil
        if let inputSecurityGroupIdsContainer = inputSecurityGroupIdsContainer {
            inputSecurityGroupIdsDecoded0 = [Swift.String]()
            for string0 in inputSecurityGroupIdsContainer {
                if let string0 = string0 {
                    inputSecurityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroupIds = inputSecurityGroupIdsDecoded0
        let multiplexIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .multiplexIds)
        var multiplexIdsDecoded0:[Swift.String]? = nil
        if let multiplexIdsContainer = multiplexIdsContainer {
            multiplexIdsDecoded0 = [Swift.String]()
            for string0 in multiplexIdsContainer {
                if let string0 = string0 {
                    multiplexIdsDecoded0?.append(string0)
                }
            }
        }
        multiplexIds = multiplexIdsDecoded0
    }
}

extension BatchDeleteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDeleteOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDeleteOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// Placeholder documentation for BatchDeleteResponse
public struct BatchDeleteOutputResponse: Swift.Equatable {
    /// List of failed operations
    public var failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    /// List of successful operations
    public var successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?

    public init (
        failed: [MediaLiveClientTypes.BatchFailedResultModel]? = nil,
        successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct BatchDeleteOutputResponseBody: Swift.Equatable {
    let failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    let successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?
}

extension BatchDeleteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "failed"
        case successful = "successful"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.BatchFailedResultModel?].self, forKey: .failed)
        var failedDecoded0:[MediaLiveClientTypes.BatchFailedResultModel]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [MediaLiveClientTypes.BatchFailedResultModel]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let successfulContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.BatchSuccessfulResultModel?].self, forKey: .successful)
        var successfulDecoded0:[MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
        if let successfulContainer = successfulContainer {
            successfulDecoded0 = [MediaLiveClientTypes.BatchSuccessfulResultModel]()
            for structure0 in successfulContainer {
                if let structure0 = structure0 {
                    successfulDecoded0?.append(structure0)
                }
            }
        }
        successful = successfulDecoded0
    }
}

extension MediaLiveClientTypes.BatchFailedResultModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case code = "code"
        case id = "id"
        case message = "message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaLiveClientTypes {
    /// Details from a failed operation
    public struct BatchFailedResultModel: Swift.Equatable {
        /// ARN of the resource
        public var arn: Swift.String?
        /// Error code for the failed operation
        public var code: Swift.String?
        /// ID of the resource
        public var id: Swift.String?
        /// Error message for the failed operation
        public var message: Swift.String?

        public init (
            arn: Swift.String? = nil,
            code: Swift.String? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.arn = arn
            self.code = code
            self.id = id
            self.message = message
        }
    }

}

extension MediaLiveClientTypes.BatchScheduleActionCreateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleActions = "scheduleActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleActions = scheduleActions {
            var scheduleActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleActions)
            for scheduleaction0 in scheduleActions {
                try scheduleActionsContainer.encode(scheduleaction0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleActionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[MediaLiveClientTypes.ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [MediaLiveClientTypes.ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// A list of schedule actions to create (in a request) or that have been created (in a response).
    public struct BatchScheduleActionCreateRequest: Swift.Equatable {
        /// A list of schedule actions to create.
        /// This member is required.
        public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

        public init (
            scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
        )
        {
            self.scheduleActions = scheduleActions
        }
    }

}

extension MediaLiveClientTypes.BatchScheduleActionCreateResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleActions = "scheduleActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleActions = scheduleActions {
            var scheduleActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleActions)
            for scheduleaction0 in scheduleActions {
                try scheduleActionsContainer.encode(scheduleaction0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleActionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[MediaLiveClientTypes.ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [MediaLiveClientTypes.ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// List of actions that have been created in the schedule.
    public struct BatchScheduleActionCreateResult: Swift.Equatable {
        /// List of actions that have been created in the schedule.
        /// This member is required.
        public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

        public init (
            scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
        )
        {
            self.scheduleActions = scheduleActions
        }
    }

}

extension MediaLiveClientTypes.BatchScheduleActionDeleteRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionNames = "actionNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionNames = actionNames {
            var actionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionNames)
            for __string0 in actionNames {
                try actionNamesContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .actionNames)
        var actionNamesDecoded0:[Swift.String]? = nil
        if let actionNamesContainer = actionNamesContainer {
            actionNamesDecoded0 = [Swift.String]()
            for string0 in actionNamesContainer {
                if let string0 = string0 {
                    actionNamesDecoded0?.append(string0)
                }
            }
        }
        actionNames = actionNamesDecoded0
    }
}

extension MediaLiveClientTypes {
    /// A list of schedule actions to delete.
    public struct BatchScheduleActionDeleteRequest: Swift.Equatable {
        /// A list of schedule actions to delete.
        /// This member is required.
        public var actionNames: [Swift.String]?

        public init (
            actionNames: [Swift.String]? = nil
        )
        {
            self.actionNames = actionNames
        }
    }

}

extension MediaLiveClientTypes.BatchScheduleActionDeleteResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleActions = "scheduleActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleActions = scheduleActions {
            var scheduleActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleActions)
            for scheduleaction0 in scheduleActions {
                try scheduleActionsContainer.encode(scheduleaction0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleActionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[MediaLiveClientTypes.ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [MediaLiveClientTypes.ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// List of actions that have been deleted from the schedule.
    public struct BatchScheduleActionDeleteResult: Swift.Equatable {
        /// List of actions that have been deleted from the schedule.
        /// This member is required.
        public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

        public init (
            scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
        )
        {
            self.scheduleActions = scheduleActions
        }
    }

}

extension BatchStartInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __string0 in channelIds {
                try channelIdsContainer.encode(__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __string0 in multiplexIds {
                try multiplexIdsContainer.encode(__string0)
            }
        }
    }
}

extension BatchStartInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/batch/start"
    }
}

/// A request to start resources
public struct BatchStartInput: Swift.Equatable {
    /// List of channel IDs
    public var channelIds: [Swift.String]?
    /// List of multiplex IDs
    public var multiplexIds: [Swift.String]?

    public init (
        channelIds: [Swift.String]? = nil,
        multiplexIds: [Swift.String]? = nil
    )
    {
        self.channelIds = channelIds
        self.multiplexIds = multiplexIds
    }
}

struct BatchStartInputBody: Swift.Equatable {
    let channelIds: [Swift.String]?
    let multiplexIds: [Swift.String]?
}

extension BatchStartInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .channelIds)
        var channelIdsDecoded0:[Swift.String]? = nil
        if let channelIdsContainer = channelIdsContainer {
            channelIdsDecoded0 = [Swift.String]()
            for string0 in channelIdsContainer {
                if let string0 = string0 {
                    channelIdsDecoded0?.append(string0)
                }
            }
        }
        channelIds = channelIdsDecoded0
        let multiplexIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .multiplexIds)
        var multiplexIdsDecoded0:[Swift.String]? = nil
        if let multiplexIdsContainer = multiplexIdsContainer {
            multiplexIdsDecoded0 = [Swift.String]()
            for string0 in multiplexIdsContainer {
                if let string0 = string0 {
                    multiplexIdsDecoded0?.append(string0)
                }
            }
        }
        multiplexIds = multiplexIdsDecoded0
    }
}

extension BatchStartOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchStartOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchStartOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStartOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchStartOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// Placeholder documentation for BatchStartResponse
public struct BatchStartOutputResponse: Swift.Equatable {
    /// List of failed operations
    public var failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    /// List of successful operations
    public var successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?

    public init (
        failed: [MediaLiveClientTypes.BatchFailedResultModel]? = nil,
        successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct BatchStartOutputResponseBody: Swift.Equatable {
    let failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    let successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?
}

extension BatchStartOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "failed"
        case successful = "successful"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.BatchFailedResultModel?].self, forKey: .failed)
        var failedDecoded0:[MediaLiveClientTypes.BatchFailedResultModel]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [MediaLiveClientTypes.BatchFailedResultModel]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let successfulContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.BatchSuccessfulResultModel?].self, forKey: .successful)
        var successfulDecoded0:[MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
        if let successfulContainer = successfulContainer {
            successfulDecoded0 = [MediaLiveClientTypes.BatchSuccessfulResultModel]()
            for structure0 in successfulContainer {
                if let structure0 = structure0 {
                    successfulDecoded0?.append(structure0)
                }
            }
        }
        successful = successfulDecoded0
    }
}

extension BatchStopInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIds = channelIds {
            var channelIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelIds)
            for __string0 in channelIds {
                try channelIdsContainer.encode(__string0)
            }
        }
        if let multiplexIds = multiplexIds {
            var multiplexIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .multiplexIds)
            for __string0 in multiplexIds {
                try multiplexIdsContainer.encode(__string0)
            }
        }
    }
}

extension BatchStopInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/batch/stop"
    }
}

/// A request to stop resources
public struct BatchStopInput: Swift.Equatable {
    /// List of channel IDs
    public var channelIds: [Swift.String]?
    /// List of multiplex IDs
    public var multiplexIds: [Swift.String]?

    public init (
        channelIds: [Swift.String]? = nil,
        multiplexIds: [Swift.String]? = nil
    )
    {
        self.channelIds = channelIds
        self.multiplexIds = multiplexIds
    }
}

struct BatchStopInputBody: Swift.Equatable {
    let channelIds: [Swift.String]?
    let multiplexIds: [Swift.String]?
}

extension BatchStopInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIds = "channelIds"
        case multiplexIds = "multiplexIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .channelIds)
        var channelIdsDecoded0:[Swift.String]? = nil
        if let channelIdsContainer = channelIdsContainer {
            channelIdsDecoded0 = [Swift.String]()
            for string0 in channelIdsContainer {
                if let string0 = string0 {
                    channelIdsDecoded0?.append(string0)
                }
            }
        }
        channelIds = channelIdsDecoded0
        let multiplexIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .multiplexIds)
        var multiplexIdsDecoded0:[Swift.String]? = nil
        if let multiplexIdsContainer = multiplexIdsContainer {
            multiplexIdsDecoded0 = [Swift.String]()
            for string0 in multiplexIdsContainer {
                if let string0 = string0 {
                    multiplexIdsDecoded0?.append(string0)
                }
            }
        }
        multiplexIds = multiplexIdsDecoded0
    }
}

extension BatchStopOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchStopOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchStopOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStopOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchStopOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// Placeholder documentation for BatchStopResponse
public struct BatchStopOutputResponse: Swift.Equatable {
    /// List of failed operations
    public var failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    /// List of successful operations
    public var successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?

    public init (
        failed: [MediaLiveClientTypes.BatchFailedResultModel]? = nil,
        successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct BatchStopOutputResponseBody: Swift.Equatable {
    let failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    let successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?
}

extension BatchStopOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "failed"
        case successful = "successful"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.BatchFailedResultModel?].self, forKey: .failed)
        var failedDecoded0:[MediaLiveClientTypes.BatchFailedResultModel]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [MediaLiveClientTypes.BatchFailedResultModel]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let successfulContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.BatchSuccessfulResultModel?].self, forKey: .successful)
        var successfulDecoded0:[MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
        if let successfulContainer = successfulContainer {
            successfulDecoded0 = [MediaLiveClientTypes.BatchSuccessfulResultModel]()
            for structure0 in successfulContainer {
                if let structure0 = structure0 {
                    successfulDecoded0?.append(structure0)
                }
            }
        }
        successful = successfulDecoded0
    }
}

extension MediaLiveClientTypes.BatchSuccessfulResultModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case id = "id"
        case state = "state"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Details from a successful operation
    public struct BatchSuccessfulResultModel: Swift.Equatable {
        /// ARN of the resource
        public var arn: Swift.String?
        /// ID of the resource
        public var id: Swift.String?
        /// Current state of the resource
        public var state: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.state = state
        }
    }

}

extension BatchUpdateScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creates = "creates"
        case deletes = "deletes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creates = self.creates {
            try encodeContainer.encode(creates, forKey: .creates)
        }
        if let deletes = self.deletes {
            try encodeContainer.encode(deletes, forKey: .deletes)
        }
    }
}

extension BatchUpdateScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/schedule"
    }
}

/// List of actions to create and list of actions to delete.
public struct BatchUpdateScheduleInput: Swift.Equatable {
    /// Id of the channel whose schedule is being updated.
    /// This member is required.
    public var channelId: Swift.String?
    /// Schedule actions to create in the schedule.
    public var creates: MediaLiveClientTypes.BatchScheduleActionCreateRequest?
    /// Schedule actions to delete from the schedule.
    public var deletes: MediaLiveClientTypes.BatchScheduleActionDeleteRequest?

    public init (
        channelId: Swift.String? = nil,
        creates: MediaLiveClientTypes.BatchScheduleActionCreateRequest? = nil,
        deletes: MediaLiveClientTypes.BatchScheduleActionDeleteRequest? = nil
    )
    {
        self.channelId = channelId
        self.creates = creates
        self.deletes = deletes
    }
}

struct BatchUpdateScheduleInputBody: Swift.Equatable {
    let creates: MediaLiveClientTypes.BatchScheduleActionCreateRequest?
    let deletes: MediaLiveClientTypes.BatchScheduleActionDeleteRequest?
}

extension BatchUpdateScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creates = "creates"
        case deletes = "deletes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BatchScheduleActionCreateRequest.self, forKey: .creates)
        creates = createsDecoded
        let deletesDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BatchScheduleActionDeleteRequest.self, forKey: .deletes)
        deletes = deletesDecoded
    }
}

extension BatchUpdateScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchUpdateScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchUpdateScheduleOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchUpdateScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchUpdateScheduleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creates = output.creates
            self.deletes = output.deletes
        } else {
            self.creates = nil
            self.deletes = nil
        }
    }
}

/// Placeholder documentation for BatchUpdateScheduleResponse
public struct BatchUpdateScheduleOutputResponse: Swift.Equatable {
    /// Schedule actions created in the schedule.
    public var creates: MediaLiveClientTypes.BatchScheduleActionCreateResult?
    /// Schedule actions deleted from the schedule.
    public var deletes: MediaLiveClientTypes.BatchScheduleActionDeleteResult?

    public init (
        creates: MediaLiveClientTypes.BatchScheduleActionCreateResult? = nil,
        deletes: MediaLiveClientTypes.BatchScheduleActionDeleteResult? = nil
    )
    {
        self.creates = creates
        self.deletes = deletes
    }
}

struct BatchUpdateScheduleOutputResponseBody: Swift.Equatable {
    let creates: MediaLiveClientTypes.BatchScheduleActionCreateResult?
    let deletes: MediaLiveClientTypes.BatchScheduleActionDeleteResult?
}

extension BatchUpdateScheduleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creates = "creates"
        case deletes = "deletes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BatchScheduleActionCreateResult.self, forKey: .creates)
        creates = createsDecoded
        let deletesDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BatchScheduleActionDeleteResult.self, forKey: .deletes)
        deletes = deletesDecoded
    }
}

extension MediaLiveClientTypes.BlackoutSlate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blackoutSlateImage = "blackoutSlateImage"
        case networkEndBlackout = "networkEndBlackout"
        case networkEndBlackoutImage = "networkEndBlackoutImage"
        case networkId = "networkId"
        case state = "state"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blackoutSlateImage = self.blackoutSlateImage {
            try encodeContainer.encode(blackoutSlateImage, forKey: .blackoutSlateImage)
        }
        if let networkEndBlackout = self.networkEndBlackout {
            try encodeContainer.encode(networkEndBlackout.rawValue, forKey: .networkEndBlackout)
        }
        if let networkEndBlackoutImage = self.networkEndBlackoutImage {
            try encodeContainer.encode(networkEndBlackoutImage, forKey: .networkEndBlackoutImage)
        }
        if let networkId = self.networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackoutSlateImageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .blackoutSlateImage)
        blackoutSlateImage = blackoutSlateImageDecoded
        let networkEndBlackoutDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BlackoutSlateNetworkEndBlackout.self, forKey: .networkEndBlackout)
        networkEndBlackout = networkEndBlackoutDecoded
        let networkEndBlackoutImageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .networkEndBlackoutImage)
        networkEndBlackoutImage = networkEndBlackoutImageDecoded
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BlackoutSlateState.self, forKey: .state)
        state = stateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Blackout Slate
    public struct BlackoutSlate: Swift.Equatable {
        /// Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public var blackoutSlateImage: MediaLiveClientTypes.InputLocation?
        /// Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
        public var networkEndBlackout: MediaLiveClientTypes.BlackoutSlateNetworkEndBlackout?
        /// Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
        public var networkEndBlackoutImage: MediaLiveClientTypes.InputLocation?
        /// Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
        public var networkId: Swift.String?
        /// When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        public var state: MediaLiveClientTypes.BlackoutSlateState?

        public init (
            blackoutSlateImage: MediaLiveClientTypes.InputLocation? = nil,
            networkEndBlackout: MediaLiveClientTypes.BlackoutSlateNetworkEndBlackout? = nil,
            networkEndBlackoutImage: MediaLiveClientTypes.InputLocation? = nil,
            networkId: Swift.String? = nil,
            state: MediaLiveClientTypes.BlackoutSlateState? = nil
        )
        {
            self.blackoutSlateImage = blackoutSlateImage
            self.networkEndBlackout = networkEndBlackout
            self.networkEndBlackoutImage = networkEndBlackoutImage
            self.networkId = networkId
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {
    /// Blackout Slate Network End Blackout
    public enum BlackoutSlateNetworkEndBlackout: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [BlackoutSlateNetworkEndBlackout] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlackoutSlateNetworkEndBlackout(rawValue: rawValue) ?? BlackoutSlateNetworkEndBlackout.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Blackout Slate State
    public enum BlackoutSlateState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [BlackoutSlateState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlackoutSlateState(rawValue: rawValue) ?? BlackoutSlateState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Burn In Alignment
    public enum BurnInAlignment: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case centered
        case `left`
        case smart
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInAlignment] {
            return [
                .centered,
                .left,
                .smart,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .centered: return "CENTERED"
            case .left: return "LEFT"
            case .smart: return "SMART"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurnInAlignment(rawValue: rawValue) ?? BurnInAlignment.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Burn In Background Color
    public enum BurnInBackgroundColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInBackgroundColor] {
            return [
                .black,
                .none,
                .white,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurnInBackgroundColor(rawValue: rawValue) ?? BurnInBackgroundColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.BurnInDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case font = "font"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontSize = "fontSize"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case teletextGridControl = "teletextGridControl"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = self.alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = self.backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if let backgroundOpacity = self.backgroundOpacity {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let font = self.font {
            try encodeContainer.encode(font, forKey: .font)
        }
        if let fontColor = self.fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if let fontOpacity = self.fontOpacity {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if let fontResolution = self.fontResolution {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontSize = self.fontSize {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let outlineColor = self.outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if let outlineSize = self.outlineSize {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = self.shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if let shadowOpacity = self.shadowOpacity {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if let shadowXOffset = self.shadowXOffset {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if let shadowYOffset = self.shadowYOffset {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let teletextGridControl = self.teletextGridControl {
            try encodeContainer.encode(teletextGridControl.rawValue, forKey: .teletextGridControl)
        }
        if let xPosition = self.xPosition {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if let yPosition = self.yPosition {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let fontDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .font)
        font = fontDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let teletextGridControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInTeletextGridControl.self, forKey: .teletextGridControl)
        teletextGridControl = teletextGridControlDecoded
        let xPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Burn In Destination Settings
    public struct BurnInDestinationSettings: Swift.Equatable {
        /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
        public var alignment: MediaLiveClientTypes.BurnInAlignment?
        /// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
        public var backgroundColor: MediaLiveClientTypes.BurnInBackgroundColor?
        /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var backgroundOpacity: Swift.Int?
        /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
        public var font: MediaLiveClientTypes.InputLocation?
        /// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var fontColor: MediaLiveClientTypes.BurnInFontColor?
        /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
        public var fontOpacity: Swift.Int?
        /// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
        public var fontResolution: Swift.Int?
        /// When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
        public var fontSize: Swift.String?
        /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineColor: MediaLiveClientTypes.BurnInOutlineColor?
        /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineSize: Swift.Int?
        /// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
        public var shadowColor: MediaLiveClientTypes.BurnInShadowColor?
        /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var shadowOpacity: Swift.Int?
        /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
        public var shadowXOffset: Swift.Int?
        /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
        public var shadowYOffset: Swift.Int?
        /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
        public var teletextGridControl: MediaLiveClientTypes.BurnInTeletextGridControl?
        /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
        public var xPosition: Swift.Int?
        /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
        public var yPosition: Swift.Int?

        public init (
            alignment: MediaLiveClientTypes.BurnInAlignment? = nil,
            backgroundColor: MediaLiveClientTypes.BurnInBackgroundColor? = nil,
            backgroundOpacity: Swift.Int? = nil,
            font: MediaLiveClientTypes.InputLocation? = nil,
            fontColor: MediaLiveClientTypes.BurnInFontColor? = nil,
            fontOpacity: Swift.Int? = nil,
            fontResolution: Swift.Int? = nil,
            fontSize: Swift.String? = nil,
            outlineColor: MediaLiveClientTypes.BurnInOutlineColor? = nil,
            outlineSize: Swift.Int? = nil,
            shadowColor: MediaLiveClientTypes.BurnInShadowColor? = nil,
            shadowOpacity: Swift.Int? = nil,
            shadowXOffset: Swift.Int? = nil,
            shadowYOffset: Swift.Int? = nil,
            teletextGridControl: MediaLiveClientTypes.BurnInTeletextGridControl? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.alignment = alignment
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.font = font
            self.fontColor = fontColor
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontSize = fontSize
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.teletextGridControl = teletextGridControl
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }

}

extension MediaLiveClientTypes {
    /// Burn In Font Color
    public enum BurnInFontColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInFontColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurnInFontColor(rawValue: rawValue) ?? BurnInFontColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Burn In Outline Color
    public enum BurnInOutlineColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInOutlineColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurnInOutlineColor(rawValue: rawValue) ?? BurnInOutlineColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Burn In Shadow Color
    public enum BurnInShadowColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInShadowColor] {
            return [
                .black,
                .none,
                .white,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurnInShadowColor(rawValue: rawValue) ?? BurnInShadowColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Burn In Teletext Grid Control
    public enum BurnInTeletextGridControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fixed
        case scaled
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInTeletextGridControl] {
            return [
                .fixed,
                .scaled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .scaled: return "SCALED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurnInTeletextGridControl(rawValue: rawValue) ?? BurnInTeletextGridControl.sdkUnknown(rawValue)
        }
    }
}

extension CancelInputDeviceTransferInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/cancel"
    }
}

/// Placeholder documentation for CancelInputDeviceTransferRequest
public struct CancelInputDeviceTransferInput: Swift.Equatable {
    /// The unique ID of the input device to cancel. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct CancelInputDeviceTransferInputBody: Swift.Equatable {
}

extension CancelInputDeviceTransferInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelInputDeviceTransferOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelInputDeviceTransferOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelInputDeviceTransferOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelInputDeviceTransferOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for CancelInputDeviceTransferResponse
public struct CancelInputDeviceTransferOutputResponse: Swift.Equatable {

    public init () { }
}

extension MediaLiveClientTypes.CaptionDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessibility = "accessibility"
        case captionSelectorName = "captionSelectorName"
        case destinationSettings = "destinationSettings"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
        case name = "name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessibility = self.accessibility {
            try encodeContainer.encode(accessibility.rawValue, forKey: .accessibility)
        }
        if let captionSelectorName = self.captionSelectorName {
            try encodeContainer.encode(captionSelectorName, forKey: .captionSelectorName)
        }
        if let destinationSettings = self.destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageDescription = self.languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessibilityDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AccessibilityType.self, forKey: .accessibility)
        accessibility = accessibilityDecoded
        let captionSelectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .captionSelectorName)
        captionSelectorName = captionSelectorNameDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CaptionDestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Caption Description
    public struct CaptionDescription: Swift.Equatable {
        /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
        public var accessibility: MediaLiveClientTypes.AccessibilityType?
        /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
        /// This member is required.
        public var captionSelectorName: Swift.String?
        /// Additional settings for captions destination that depend on the destination type.
        public var destinationSettings: MediaLiveClientTypes.CaptionDestinationSettings?
        /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
        public var languageCode: Swift.String?
        /// Human readable information to indicate captions available for players (eg. English, or Spanish).
        public var languageDescription: Swift.String?
        /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
        /// This member is required.
        public var name: Swift.String?

        public init (
            accessibility: MediaLiveClientTypes.AccessibilityType? = nil,
            captionSelectorName: Swift.String? = nil,
            destinationSettings: MediaLiveClientTypes.CaptionDestinationSettings? = nil,
            languageCode: Swift.String? = nil,
            languageDescription: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.accessibility = accessibility
            self.captionSelectorName = captionSelectorName
            self.destinationSettings = destinationSettings
            self.languageCode = languageCode
            self.languageDescription = languageDescription
            self.name = name
        }
    }

}

extension MediaLiveClientTypes.CaptionDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aribDestinationSettings = "aribDestinationSettings"
        case burnInDestinationSettings = "burnInDestinationSettings"
        case dvbSubDestinationSettings = "dvbSubDestinationSettings"
        case ebuTtDDestinationSettings = "ebuTtDDestinationSettings"
        case embeddedDestinationSettings = "embeddedDestinationSettings"
        case embeddedPlusScte20DestinationSettings = "embeddedPlusScte20DestinationSettings"
        case rtmpCaptionInfoDestinationSettings = "rtmpCaptionInfoDestinationSettings"
        case scte20PlusEmbeddedDestinationSettings = "scte20PlusEmbeddedDestinationSettings"
        case scte27DestinationSettings = "scte27DestinationSettings"
        case smpteTtDestinationSettings = "smpteTtDestinationSettings"
        case teletextDestinationSettings = "teletextDestinationSettings"
        case ttmlDestinationSettings = "ttmlDestinationSettings"
        case webvttDestinationSettings = "webvttDestinationSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aribDestinationSettings = self.aribDestinationSettings {
            try encodeContainer.encode(aribDestinationSettings, forKey: .aribDestinationSettings)
        }
        if let burnInDestinationSettings = self.burnInDestinationSettings {
            try encodeContainer.encode(burnInDestinationSettings, forKey: .burnInDestinationSettings)
        }
        if let dvbSubDestinationSettings = self.dvbSubDestinationSettings {
            try encodeContainer.encode(dvbSubDestinationSettings, forKey: .dvbSubDestinationSettings)
        }
        if let ebuTtDDestinationSettings = self.ebuTtDDestinationSettings {
            try encodeContainer.encode(ebuTtDDestinationSettings, forKey: .ebuTtDDestinationSettings)
        }
        if let embeddedDestinationSettings = self.embeddedDestinationSettings {
            try encodeContainer.encode(embeddedDestinationSettings, forKey: .embeddedDestinationSettings)
        }
        if let embeddedPlusScte20DestinationSettings = self.embeddedPlusScte20DestinationSettings {
            try encodeContainer.encode(embeddedPlusScte20DestinationSettings, forKey: .embeddedPlusScte20DestinationSettings)
        }
        if let rtmpCaptionInfoDestinationSettings = self.rtmpCaptionInfoDestinationSettings {
            try encodeContainer.encode(rtmpCaptionInfoDestinationSettings, forKey: .rtmpCaptionInfoDestinationSettings)
        }
        if let scte20PlusEmbeddedDestinationSettings = self.scte20PlusEmbeddedDestinationSettings {
            try encodeContainer.encode(scte20PlusEmbeddedDestinationSettings, forKey: .scte20PlusEmbeddedDestinationSettings)
        }
        if let scte27DestinationSettings = self.scte27DestinationSettings {
            try encodeContainer.encode(scte27DestinationSettings, forKey: .scte27DestinationSettings)
        }
        if let smpteTtDestinationSettings = self.smpteTtDestinationSettings {
            try encodeContainer.encode(smpteTtDestinationSettings, forKey: .smpteTtDestinationSettings)
        }
        if let teletextDestinationSettings = self.teletextDestinationSettings {
            try encodeContainer.encode(teletextDestinationSettings, forKey: .teletextDestinationSettings)
        }
        if let ttmlDestinationSettings = self.ttmlDestinationSettings {
            try encodeContainer.encode(ttmlDestinationSettings, forKey: .ttmlDestinationSettings)
        }
        if let webvttDestinationSettings = self.webvttDestinationSettings {
            try encodeContainer.encode(webvttDestinationSettings, forKey: .webvttDestinationSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aribDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AribDestinationSettings.self, forKey: .aribDestinationSettings)
        aribDestinationSettings = aribDestinationSettingsDecoded
        let burnInDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BurnInDestinationSettings.self, forKey: .burnInDestinationSettings)
        burnInDestinationSettings = burnInDestinationSettingsDecoded
        let dvbSubDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationSettings.self, forKey: .dvbSubDestinationSettings)
        dvbSubDestinationSettings = dvbSubDestinationSettingsDecoded
        let ebuTtDDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EbuTtDDestinationSettings.self, forKey: .ebuTtDDestinationSettings)
        ebuTtDDestinationSettings = ebuTtDDestinationSettingsDecoded
        let embeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EmbeddedDestinationSettings.self, forKey: .embeddedDestinationSettings)
        embeddedDestinationSettings = embeddedDestinationSettingsDecoded
        let embeddedPlusScte20DestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings.self, forKey: .embeddedPlusScte20DestinationSettings)
        embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettingsDecoded
        let rtmpCaptionInfoDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings.self, forKey: .rtmpCaptionInfoDestinationSettings)
        rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettingsDecoded
        let scte20PlusEmbeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings.self, forKey: .scte20PlusEmbeddedDestinationSettings)
        scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettingsDecoded
        let scte27DestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte27DestinationSettings.self, forKey: .scte27DestinationSettings)
        scte27DestinationSettings = scte27DestinationSettingsDecoded
        let smpteTtDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmpteTtDestinationSettings.self, forKey: .smpteTtDestinationSettings)
        smpteTtDestinationSettings = smpteTtDestinationSettingsDecoded
        let teletextDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TeletextDestinationSettings.self, forKey: .teletextDestinationSettings)
        teletextDestinationSettings = teletextDestinationSettingsDecoded
        let ttmlDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TtmlDestinationSettings.self, forKey: .ttmlDestinationSettings)
        ttmlDestinationSettings = ttmlDestinationSettingsDecoded
        let webvttDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.WebvttDestinationSettings.self, forKey: .webvttDestinationSettings)
        webvttDestinationSettings = webvttDestinationSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Caption Destination Settings
    public struct CaptionDestinationSettings: Swift.Equatable {
        /// Arib Destination Settings
        public var aribDestinationSettings: MediaLiveClientTypes.AribDestinationSettings?
        /// Burn In Destination Settings
        public var burnInDestinationSettings: MediaLiveClientTypes.BurnInDestinationSettings?
        /// Dvb Sub Destination Settings
        public var dvbSubDestinationSettings: MediaLiveClientTypes.DvbSubDestinationSettings?
        /// Ebu Tt DDestination Settings
        public var ebuTtDDestinationSettings: MediaLiveClientTypes.EbuTtDDestinationSettings?
        /// Embedded Destination Settings
        public var embeddedDestinationSettings: MediaLiveClientTypes.EmbeddedDestinationSettings?
        /// Embedded Plus Scte20 Destination Settings
        public var embeddedPlusScte20DestinationSettings: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings?
        /// Rtmp Caption Info Destination Settings
        public var rtmpCaptionInfoDestinationSettings: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings?
        /// Scte20 Plus Embedded Destination Settings
        public var scte20PlusEmbeddedDestinationSettings: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings?
        /// Scte27 Destination Settings
        public var scte27DestinationSettings: MediaLiveClientTypes.Scte27DestinationSettings?
        /// Smpte Tt Destination Settings
        public var smpteTtDestinationSettings: MediaLiveClientTypes.SmpteTtDestinationSettings?
        /// Teletext Destination Settings
        public var teletextDestinationSettings: MediaLiveClientTypes.TeletextDestinationSettings?
        /// Ttml Destination Settings
        public var ttmlDestinationSettings: MediaLiveClientTypes.TtmlDestinationSettings?
        /// Webvtt Destination Settings
        public var webvttDestinationSettings: MediaLiveClientTypes.WebvttDestinationSettings?

        public init (
            aribDestinationSettings: MediaLiveClientTypes.AribDestinationSettings? = nil,
            burnInDestinationSettings: MediaLiveClientTypes.BurnInDestinationSettings? = nil,
            dvbSubDestinationSettings: MediaLiveClientTypes.DvbSubDestinationSettings? = nil,
            ebuTtDDestinationSettings: MediaLiveClientTypes.EbuTtDDestinationSettings? = nil,
            embeddedDestinationSettings: MediaLiveClientTypes.EmbeddedDestinationSettings? = nil,
            embeddedPlusScte20DestinationSettings: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings? = nil,
            rtmpCaptionInfoDestinationSettings: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings? = nil,
            scte20PlusEmbeddedDestinationSettings: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings? = nil,
            scte27DestinationSettings: MediaLiveClientTypes.Scte27DestinationSettings? = nil,
            smpteTtDestinationSettings: MediaLiveClientTypes.SmpteTtDestinationSettings? = nil,
            teletextDestinationSettings: MediaLiveClientTypes.TeletextDestinationSettings? = nil,
            ttmlDestinationSettings: MediaLiveClientTypes.TtmlDestinationSettings? = nil,
            webvttDestinationSettings: MediaLiveClientTypes.WebvttDestinationSettings? = nil
        )
        {
            self.aribDestinationSettings = aribDestinationSettings
            self.burnInDestinationSettings = burnInDestinationSettings
            self.dvbSubDestinationSettings = dvbSubDestinationSettings
            self.ebuTtDDestinationSettings = ebuTtDDestinationSettings
            self.embeddedDestinationSettings = embeddedDestinationSettings
            self.embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettings
            self.rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettings
            self.scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettings
            self.scte27DestinationSettings = scte27DestinationSettings
            self.smpteTtDestinationSettings = smpteTtDestinationSettings
            self.teletextDestinationSettings = teletextDestinationSettings
            self.ttmlDestinationSettings = ttmlDestinationSettings
            self.webvttDestinationSettings = webvttDestinationSettings
        }
    }

}

extension MediaLiveClientTypes.CaptionLanguageMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captionChannel = "captionChannel"
        case languageCode = "languageCode"
        case languageDescription = "languageDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captionChannel = self.captionChannel {
            try encodeContainer.encode(captionChannel, forKey: .captionChannel)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let languageDescription = self.languageDescription {
            try encodeContainer.encode(languageDescription, forKey: .languageDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captionChannelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .captionChannel)
        captionChannel = captionChannelDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageDescription)
        languageDescription = languageDescriptionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
    public struct CaptionLanguageMapping: Swift.Equatable {
        /// The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
        /// This member is required.
        public var captionChannel: Swift.Int?
        /// Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
        /// This member is required.
        public var languageCode: Swift.String?
        /// Textual description of language
        /// This member is required.
        public var languageDescription: Swift.String?

        public init (
            captionChannel: Swift.Int? = nil,
            languageCode: Swift.String? = nil,
            languageDescription: Swift.String? = nil
        )
        {
            self.captionChannel = captionChannel
            self.languageCode = languageCode
            self.languageDescription = languageDescription
        }
    }

}

extension MediaLiveClientTypes.CaptionRectangle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case height = "height"
        case leftOffset = "leftOffset"
        case topOffset = "topOffset"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let leftOffset = self.leftOffset {
            try encodeContainer.encode(leftOffset, forKey: .leftOffset)
        }
        if let topOffset = self.topOffset {
            try encodeContainer.encode(topOffset, forKey: .topOffset)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .height)
        height = heightDecoded
        let leftOffsetDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .leftOffset)
        leftOffset = leftOffsetDecoded
        let topOffsetDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .topOffset)
        topOffset = topOffsetDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .width)
        width = widthDecoded
    }
}

extension MediaLiveClientTypes {
    /// Caption Rectangle
    public struct CaptionRectangle: Swift.Equatable {
        /// See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
        /// This member is required.
        public var height: Swift.Double?
        /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
        /// This member is required.
        public var leftOffset: Swift.Double?
        /// See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
        /// This member is required.
        public var topOffset: Swift.Double?
        /// See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
        /// This member is required.
        public var width: Swift.Double?

        public init (
            height: Swift.Double? = nil,
            leftOffset: Swift.Double? = nil,
            topOffset: Swift.Double? = nil,
            width: Swift.Double? = nil
        )
        {
            self.height = height
            self.leftOffset = leftOffset
            self.topOffset = topOffset
            self.width = width
        }
    }

}

extension MediaLiveClientTypes.CaptionSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "languageCode"
        case name = "name"
        case selectorSettings = "selectorSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let selectorSettings = self.selectorSettings {
            try encodeContainer.encode(selectorSettings, forKey: .selectorSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let selectorSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CaptionSelectorSettings.self, forKey: .selectorSettings)
        selectorSettings = selectorSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
    public struct CaptionSelector: Swift.Equatable {
        /// When specified this field indicates the three letter language code of the caption track to extract from the source.
        public var languageCode: Swift.String?
        /// Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
        /// This member is required.
        public var name: Swift.String?
        /// Caption selector settings.
        public var selectorSettings: MediaLiveClientTypes.CaptionSelectorSettings?

        public init (
            languageCode: Swift.String? = nil,
            name: Swift.String? = nil,
            selectorSettings: MediaLiveClientTypes.CaptionSelectorSettings? = nil
        )
        {
            self.languageCode = languageCode
            self.name = name
            self.selectorSettings = selectorSettings
        }
    }

}

extension MediaLiveClientTypes.CaptionSelectorSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ancillarySourceSettings = "ancillarySourceSettings"
        case aribSourceSettings = "aribSourceSettings"
        case dvbSubSourceSettings = "dvbSubSourceSettings"
        case embeddedSourceSettings = "embeddedSourceSettings"
        case scte20SourceSettings = "scte20SourceSettings"
        case scte27SourceSettings = "scte27SourceSettings"
        case teletextSourceSettings = "teletextSourceSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ancillarySourceSettings = self.ancillarySourceSettings {
            try encodeContainer.encode(ancillarySourceSettings, forKey: .ancillarySourceSettings)
        }
        if let aribSourceSettings = self.aribSourceSettings {
            try encodeContainer.encode(aribSourceSettings, forKey: .aribSourceSettings)
        }
        if let dvbSubSourceSettings = self.dvbSubSourceSettings {
            try encodeContainer.encode(dvbSubSourceSettings, forKey: .dvbSubSourceSettings)
        }
        if let embeddedSourceSettings = self.embeddedSourceSettings {
            try encodeContainer.encode(embeddedSourceSettings, forKey: .embeddedSourceSettings)
        }
        if let scte20SourceSettings = self.scte20SourceSettings {
            try encodeContainer.encode(scte20SourceSettings, forKey: .scte20SourceSettings)
        }
        if let scte27SourceSettings = self.scte27SourceSettings {
            try encodeContainer.encode(scte27SourceSettings, forKey: .scte27SourceSettings)
        }
        if let teletextSourceSettings = self.teletextSourceSettings {
            try encodeContainer.encode(teletextSourceSettings, forKey: .teletextSourceSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ancillarySourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AncillarySourceSettings.self, forKey: .ancillarySourceSettings)
        ancillarySourceSettings = ancillarySourceSettingsDecoded
        let aribSourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AribSourceSettings.self, forKey: .aribSourceSettings)
        aribSourceSettings = aribSourceSettingsDecoded
        let dvbSubSourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubSourceSettings.self, forKey: .dvbSubSourceSettings)
        dvbSubSourceSettings = dvbSubSourceSettingsDecoded
        let embeddedSourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EmbeddedSourceSettings.self, forKey: .embeddedSourceSettings)
        embeddedSourceSettings = embeddedSourceSettingsDecoded
        let scte20SourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte20SourceSettings.self, forKey: .scte20SourceSettings)
        scte20SourceSettings = scte20SourceSettingsDecoded
        let scte27SourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte27SourceSettings.self, forKey: .scte27SourceSettings)
        scte27SourceSettings = scte27SourceSettingsDecoded
        let teletextSourceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TeletextSourceSettings.self, forKey: .teletextSourceSettings)
        teletextSourceSettings = teletextSourceSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Caption Selector Settings
    public struct CaptionSelectorSettings: Swift.Equatable {
        /// Ancillary Source Settings
        public var ancillarySourceSettings: MediaLiveClientTypes.AncillarySourceSettings?
        /// Arib Source Settings
        public var aribSourceSettings: MediaLiveClientTypes.AribSourceSettings?
        /// Dvb Sub Source Settings
        public var dvbSubSourceSettings: MediaLiveClientTypes.DvbSubSourceSettings?
        /// Embedded Source Settings
        public var embeddedSourceSettings: MediaLiveClientTypes.EmbeddedSourceSettings?
        /// Scte20 Source Settings
        public var scte20SourceSettings: MediaLiveClientTypes.Scte20SourceSettings?
        /// Scte27 Source Settings
        public var scte27SourceSettings: MediaLiveClientTypes.Scte27SourceSettings?
        /// Teletext Source Settings
        public var teletextSourceSettings: MediaLiveClientTypes.TeletextSourceSettings?

        public init (
            ancillarySourceSettings: MediaLiveClientTypes.AncillarySourceSettings? = nil,
            aribSourceSettings: MediaLiveClientTypes.AribSourceSettings? = nil,
            dvbSubSourceSettings: MediaLiveClientTypes.DvbSubSourceSettings? = nil,
            embeddedSourceSettings: MediaLiveClientTypes.EmbeddedSourceSettings? = nil,
            scte20SourceSettings: MediaLiveClientTypes.Scte20SourceSettings? = nil,
            scte27SourceSettings: MediaLiveClientTypes.Scte27SourceSettings? = nil,
            teletextSourceSettings: MediaLiveClientTypes.TeletextSourceSettings? = nil
        )
        {
            self.ancillarySourceSettings = ancillarySourceSettings
            self.aribSourceSettings = aribSourceSettings
            self.dvbSubSourceSettings = dvbSubSourceSettings
            self.embeddedSourceSettings = embeddedSourceSettings
            self.scte20SourceSettings = scte20SourceSettings
            self.scte27SourceSettings = scte27SourceSettings
            self.teletextSourceSettings = teletextSourceSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Maximum CDI input resolution; SD is 480i and 576i up to 30 frames-per-second (fps), HD is 720p up to 60 fps / 1080i up to 30 fps, FHD is 1080p up to 60 fps, UHD is 2160p up to 60 fps
    public enum CdiInputResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fhd
        case hd
        case sd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [CdiInputResolution] {
            return [
                .fhd,
                .hd,
                .sd,
                .uhd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fhd: return "FHD"
            case .hd: return "HD"
            case .sd: return "SD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CdiInputResolution(rawValue: rawValue) ?? CdiInputResolution.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.CdiInputSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resolution = "resolution"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resolutionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for CdiInputSpecification
    public struct CdiInputSpecification: Swift.Equatable {
        /// Maximum CDI input resolution
        public var resolution: MediaLiveClientTypes.CdiInputResolution?

        public init (
            resolution: MediaLiveClientTypes.CdiInputResolution? = nil
        )
        {
            self.resolution = resolution
        }
    }

}

extension MediaLiveClientTypes.Channel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cdiInputSpecification = self.cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for outputdestination0 in destinations {
                try destinationsContainer.encode(outputdestination0)
            }
        }
        if let egressEndpoints = egressEndpoints {
            var egressEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .egressEndpoints)
            for channelegressendpoint0 in egressEndpoints {
                try egressEndpointsContainer.encode(channelegressendpoint0)
            }
        }
        if let encoderSettings = self.encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for inputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(inputattachment0)
            }
        }
        if let inputSpecification = self.inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let maintenance = self.maintenance {
            try encodeContainer.encode(maintenance, forKey: .maintenance)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelineDetails = pipelineDetails {
            var pipelineDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineDetails)
            for pipelinedetail0 in pipelineDetails {
                try pipelineDetailsContainer.encode(pipelinedetail0)
            }
        }
        if let pipelinesRunningCount = self.pipelinesRunningCount {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for Channel
    public struct Channel: Swift.Equatable {
        /// The unique arn of the channel.
        public var arn: Swift.String?
        /// Specification of CDI inputs for this channel
        public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
        public var destinations: [MediaLiveClientTypes.OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
        /// Encoder Settings
        public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
        /// The unique id of the channel.
        public var id: Swift.String?
        /// List of input attachments for channel.
        public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
        /// Specification of network and file inputs for this channel
        public var inputSpecification: MediaLiveClientTypes.InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public var logLevel: MediaLiveClientTypes.LogLevel?
        /// Maintenance settings for this channel.
        public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
        /// The name of the channel. (user-mutable)
        public var name: Swift.String?
        /// Runtime details for the pipelines of a running channel.
        public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public var roleArn: Swift.String?
        /// Placeholder documentation for ChannelState
        public var state: MediaLiveClientTypes.ChannelState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?
        /// Settings for VPC output
        public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

        public init (
            arn: Swift.String? = nil,
            cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
            egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
            encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
            id: Swift.String? = nil,
            inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
            inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
            logLevel: MediaLiveClientTypes.LogLevel? = nil,
            maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
            name: Swift.String? = nil,
            pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            state: MediaLiveClientTypes.ChannelState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
        )
        {
            self.arn = arn
            self.cdiInputSpecification = cdiInputSpecification
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.maintenance = maintenance
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
            self.vpc = vpc
        }
    }

}

extension MediaLiveClientTypes {
    /// A standard channel has two encoding pipelines and a single pipeline channel only has one.
    public enum ChannelClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case singlePipeline
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelClass] {
            return [
                .singlePipeline,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .singlePipeline: return "SINGLE_PIPELINE"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChannelClass(rawValue: rawValue) ?? ChannelClass.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.ChannelEgressEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceIp = "sourceIp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceIp = self.sourceIp {
            try encodeContainer.encode(sourceIp, forKey: .sourceIp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIp)
        sourceIp = sourceIpDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ChannelEgressEndpoint
    public struct ChannelEgressEndpoint: Swift.Equatable {
        /// Public IP of where a channel's output comes from
        public var sourceIp: Swift.String?

        public init (
            sourceIp: Swift.String? = nil
        )
        {
            self.sourceIp = sourceIp
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ChannelState
    public enum ChannelState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case creating
        case deleted
        case deleting
        case idle
        case recovering
        case running
        case starting
        case stopping
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelState] {
            return [
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .idle,
                .recovering,
                .running,
                .starting,
                .stopping,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .idle: return "IDLE"
            case .recovering: return "RECOVERING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopping: return "STOPPING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChannelState(rawValue: rawValue) ?? ChannelState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.ChannelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cdiInputSpecification = self.cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for outputdestination0 in destinations {
                try destinationsContainer.encode(outputdestination0)
            }
        }
        if let egressEndpoints = egressEndpoints {
            var egressEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .egressEndpoints)
            for channelegressendpoint0 in egressEndpoints {
                try egressEndpointsContainer.encode(channelegressendpoint0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for inputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(inputattachment0)
            }
        }
        if let inputSpecification = self.inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let maintenance = self.maintenance {
            try encodeContainer.encode(maintenance, forKey: .maintenance)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelinesRunningCount = self.pipelinesRunningCount {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ChannelSummary
    public struct ChannelSummary: Swift.Equatable {
        /// The unique arn of the channel.
        public var arn: Swift.String?
        /// Specification of CDI inputs for this channel
        public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
        public var destinations: [MediaLiveClientTypes.OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
        /// The unique id of the channel.
        public var id: Swift.String?
        /// List of input attachments for channel.
        public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
        /// Specification of network and file inputs for this channel
        public var inputSpecification: MediaLiveClientTypes.InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public var logLevel: MediaLiveClientTypes.LogLevel?
        /// Maintenance settings for this channel.
        public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
        /// The name of the channel. (user-mutable)
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public var roleArn: Swift.String?
        /// Placeholder documentation for ChannelState
        public var state: MediaLiveClientTypes.ChannelState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?
        /// Settings for any VPC outputs.
        public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

        public init (
            arn: Swift.String? = nil,
            cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
            egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
            id: Swift.String? = nil,
            inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
            inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
            logLevel: MediaLiveClientTypes.LogLevel? = nil,
            maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            state: MediaLiveClientTypes.ChannelState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
        )
        {
            self.arn = arn
            self.cdiInputSpecification = cdiInputSpecification
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.maintenance = maintenance
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
            self.vpc = vpc
        }
    }

}

extension ClaimDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

extension ClaimDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/claimDevice"
    }
}

/// A request to claim an AWS Elemental device that you have purchased from a third-party vendor.
public struct ClaimDeviceInput: Swift.Equatable {
    /// The id of the device you want to claim.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct ClaimDeviceInputBody: Swift.Equatable {
    let id: Swift.String?
}

extension ClaimDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension ClaimDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ClaimDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ClaimDeviceOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ClaimDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for ClaimDeviceResponse
public struct ClaimDeviceOutputResponse: Swift.Equatable {

    public init () { }
}

extension MediaLiveClientTypes.ColorSpacePassthroughSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Passthrough applies no color space conversion to the output
    public struct ColorSpacePassthroughSettings: Swift.Equatable {

        public init () { }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for ConflictException
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaLiveClientTypes {
    /// Specifies the media type of the thumbnail.
    public enum ContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case imageJpeg
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .imageJpeg,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .imageJpeg: return "image/jpeg"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentType(rawValue: rawValue) ?? ContentType.sdkUnknown(rawValue)
        }
    }
}

extension CreateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case requestId = "requestId"
        case reserved = "reserved"
        case roleArn = "roleArn"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdiInputSpecification = self.cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for outputdestination0 in destinations {
                try destinationsContainer.encode(outputdestination0)
            }
        }
        if let encoderSettings = self.encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for inputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(inputattachment0)
            }
        }
        if let inputSpecification = self.inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let maintenance = self.maintenance {
            try encodeContainer.encode(maintenance, forKey: .maintenance)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let reserved = self.reserved {
            try encodeContainer.encode(reserved, forKey: .reserved)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }
}

extension CreateChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/channels"
    }
}

/// A request to create a channel
public struct CreateChannelInput: Swift.Equatable {
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// Placeholder documentation for __listOfOutputDestination
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level to write to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceCreateSettings?
    /// Name of channel.
    public var name: Swift.String?
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    public var requestId: Swift.String?
    /// Deprecated field that's only usable by whitelisted customers.
    @available(*, deprecated)
    public var reserved: Swift.String?
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
    public var roleArn: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// Settings for the VPC outputs
    public var vpc: MediaLiveClientTypes.VpcOutputSettings?

    public init (
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceCreateSettings? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        reserved: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettings? = nil
    )
    {
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.encoderSettings = encoderSettings
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.requestId = requestId
        self.reserved = reserved
        self.roleArn = roleArn
        self.tags = tags
        self.vpc = vpc
    }
}

struct CreateChannelInputBody: Swift.Equatable {
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let channelClass: MediaLiveClientTypes.ChannelClass?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceCreateSettings?
    let name: Swift.String?
    let requestId: Swift.String?
    let reserved: Swift.String?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let vpc: MediaLiveClientTypes.VpcOutputSettings?
}

extension CreateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case requestId = "requestId"
        case reserved = "reserved"
        case roleArn = "roleArn"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceCreateSettings.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let reservedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reserved)
        reserved = reservedDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettings.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension CreateChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateChannelOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channel = output.channel
        } else {
            self.channel = nil
        }
    }
}

/// Placeholder documentation for CreateChannelResponse
public struct CreateChannelOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Channel
    public var channel: MediaLiveClientTypes.Channel?

    public init (
        channel: MediaLiveClientTypes.Channel? = nil
    )
    {
        self.channel = channel
    }
}

struct CreateChannelOutputResponseBody: Swift.Equatable {
    let channel: MediaLiveClientTypes.Channel?
}

extension CreateChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "channel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

extension CreateInputInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case requestId = "requestId"
        case roleArn = "roleArn"
        case sources = "sources"
        case tags = "tags"
        case type = "type"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for inputdestinationrequest0 in destinations {
                try destinationsContainer.encode(inputdestinationrequest0)
            }
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for inputdevicesettings0 in inputDevices {
                try inputDevicesContainer.encode(inputdevicesettings0)
            }
        }
        if let inputSecurityGroups = inputSecurityGroups {
            var inputSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroups)
            for __string0 in inputSecurityGroups {
                try inputSecurityGroupsContainer.encode(__string0)
            }
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for mediaconnectflowrequest0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(mediaconnectflowrequest0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for inputsourcerequest0 in sources {
                try sourcesContainer.encode(inputsourcerequest0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }
}

extension CreateInputInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/inputs"
    }
}

/// The name of the input
public struct CreateInputInput: Swift.Equatable {
    /// Destination settings for PUSH type inputs.
    public var destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    /// Settings for the devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    /// A list of security groups referenced by IDs to attach to the input.
    public var inputSecurityGroups: [Swift.String]?
    /// A list of the MediaConnect Flows that you want to use in this input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    /// Name of the input.
    public var name: Swift.String?
    /// Unique identifier of the request to ensure the request is handled exactly once in case of retries.
    public var requestId: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    public var sources: [MediaLiveClientTypes.InputSourceRequest]?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// The different types of inputs that AWS Elemental MediaLive supports.
    public var type: MediaLiveClientTypes.InputType?
    /// Settings for a private VPC Input. When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses. This property requires setting the roleArn property on Input creation. Not compatible with the inputSecurityGroups property.
    public var vpc: MediaLiveClientTypes.InputVpcRequest?

    public init (
        destinations: [MediaLiveClientTypes.InputDestinationRequest]? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
        inputSecurityGroups: [Swift.String]? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sources: [MediaLiveClientTypes.InputSourceRequest]? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: MediaLiveClientTypes.InputType? = nil,
        vpc: MediaLiveClientTypes.InputVpcRequest? = nil
    )
    {
        self.destinations = destinations
        self.inputDevices = inputDevices
        self.inputSecurityGroups = inputSecurityGroups
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.requestId = requestId
        self.roleArn = roleArn
        self.sources = sources
        self.tags = tags
        self.type = type
        self.vpc = vpc
    }
}

struct CreateInputInputBody: Swift.Equatable {
    let destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    let inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    let inputSecurityGroups: [Swift.String]?
    let mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    let name: Swift.String?
    let requestId: Swift.String?
    let roleArn: Swift.String?
    let sources: [MediaLiveClientTypes.InputSourceRequest]?
    let tags: [Swift.String:Swift.String]?
    let type: MediaLiveClientTypes.InputType?
    let vpc: MediaLiveClientTypes.InputVpcRequest?
}

extension CreateInputInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case requestId = "requestId"
        case roleArn = "roleArn"
        case sources = "sources"
        case tags = "tags"
        case type = "type"
        case vpc = "vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDestinationRequest?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.InputDestinationRequest]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.InputDestinationRequest]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[Swift.String]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in inputSecurityGroupsContainer {
                if let string0 = string0 {
                    inputSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaConnectFlowRequest?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaLiveClientTypes.MediaConnectFlowRequest]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaLiveClientTypes.MediaConnectFlowRequest]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSourceRequest?].self, forKey: .sources)
        var sourcesDecoded0:[MediaLiveClientTypes.InputSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaLiveClientTypes.InputSourceRequest]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputType.self, forKey: .type)
        type = typeDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputVpcRequest.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension CreateInputOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInputOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInputOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInputOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateInputOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.input = output.input
        } else {
            self.input = nil
        }
    }
}

/// Placeholder documentation for CreateInputResponse
public struct CreateInputOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Input
    public var input: MediaLiveClientTypes.Input?

    public init (
        input: MediaLiveClientTypes.Input? = nil
    )
    {
        self.input = input
    }
}

struct CreateInputOutputResponseBody: Swift.Equatable {
    let input: MediaLiveClientTypes.Input?
}

extension CreateInputOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "input"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Input.self, forKey: .input)
        input = inputDecoded
    }
}

extension CreateInputSecurityGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for inputwhitelistrulecidr0 in whitelistRules {
                try whitelistRulesContainer.encode(inputwhitelistrulecidr0)
            }
        }
    }
}

extension CreateInputSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/inputSecurityGroups"
    }
}

/// The IPv4 CIDRs to whitelist for this Input Security Group
public struct CreateInputSecurityGroupInput: Swift.Equatable {
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// List of IPv4 CIDR addresses to whitelist
    public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]?

    public init (
        tags: [Swift.String:Swift.String]? = nil,
        whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]? = nil
    )
    {
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

struct CreateInputSecurityGroupInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
    let whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]?
}

extension CreateInputSecurityGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputWhitelistRuleCidr?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[MediaLiveClientTypes.InputWhitelistRuleCidr]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [MediaLiveClientTypes.InputWhitelistRuleCidr]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension CreateInputSecurityGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInputSecurityGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInputSecurityGroupOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInputSecurityGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateInputSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.securityGroup = output.securityGroup
        } else {
            self.securityGroup = nil
        }
    }
}

/// Placeholder documentation for CreateInputSecurityGroupResponse
public struct CreateInputSecurityGroupOutputResponse: Swift.Equatable {
    /// An Input Security Group
    public var securityGroup: MediaLiveClientTypes.InputSecurityGroup?

    public init (
        securityGroup: MediaLiveClientTypes.InputSecurityGroup? = nil
    )
    {
        self.securityGroup = securityGroup
    }
}

struct CreateInputSecurityGroupOutputResponseBody: Swift.Equatable {
    let securityGroup: MediaLiveClientTypes.InputSecurityGroup?
}

extension CreateInputSecurityGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroup = "securityGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSecurityGroup.self, forKey: .securityGroup)
        securityGroup = securityGroupDecoded
    }
}

extension CreateMultiplexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "availabilityZones"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case requestId = "requestId"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __string0 in availabilityZones {
                try availabilityZonesContainer.encode(__string0)
            }
        }
        if let multiplexSettings = self.multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateMultiplexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/multiplexes"
    }
}

/// A request to create a multiplex.
public struct CreateMultiplexInput: Swift.Equatable {
    /// A list of availability zones for the multiplex. You must specify exactly two.
    /// This member is required.
    public var availabilityZones: [Swift.String]?
    /// Configuration for a multiplex event.
    /// This member is required.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// Name of multiplex.
    /// This member is required.
    public var name: Swift.String?
    /// Unique request ID. This prevents retries from creating multiple resources.
    /// This member is required.
    public var requestId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?

    public init (
        availabilityZones: [Swift.String]? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.requestId = requestId
        self.tags = tags
    }
}

struct CreateMultiplexInputBody: Swift.Equatable {
    let availabilityZones: [Swift.String]?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let requestId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateMultiplexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "availabilityZones"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case requestId = "requestId"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMultiplexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMultiplexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateMultiplexOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMultiplexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.multiplex = output.multiplex
        } else {
            self.multiplex = nil
        }
    }
}

/// Placeholder documentation for CreateMultiplexResponse
public struct CreateMultiplexOutputResponse: Swift.Equatable {
    /// The newly created multiplex.
    public var multiplex: MediaLiveClientTypes.Multiplex?

    public init (
        multiplex: MediaLiveClientTypes.Multiplex? = nil
    )
    {
        self.multiplex = multiplex
    }
}

struct CreateMultiplexOutputResponseBody: Swift.Equatable {
    let multiplex: MediaLiveClientTypes.Multiplex?
}

extension CreateMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplex = "multiplex"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Multiplex.self, forKey: .multiplex)
        multiplex = multiplexDecoded
    }
}

extension CreateMultiplexProgramInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
        case programName = "programName"
        case requestId = "requestId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexProgramSettings = self.multiplexProgramSettings {
            try encodeContainer.encode(multiplexProgramSettings, forKey: .multiplexProgramSettings)
        }
        if let programName = self.programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }
}

extension CreateMultiplexProgramInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs"
    }
}

/// A request to create a program in a multiplex.
public struct CreateMultiplexProgramInput: Swift.Equatable {
    /// ID of the multiplex where the program is to be created.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The settings for this multiplex program.
    /// This member is required.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// Name of multiplex program.
    /// This member is required.
    public var programName: Swift.String?
    /// Unique request ID. This prevents retries from creating multiple resources.
    /// This member is required.
    public var requestId: Swift.String?

    public init (
        multiplexId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        programName: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.programName = programName
        self.requestId = requestId
    }
}

struct CreateMultiplexProgramInputBody: Swift.Equatable {
    let multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    let programName: Swift.String?
    let requestId: Swift.String?
}

extension CreateMultiplexProgramInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
        case programName = "programName"
        case requestId = "requestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension CreateMultiplexProgramOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMultiplexProgramOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateMultiplexProgramOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMultiplexProgramOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.multiplexProgram = output.multiplexProgram
        } else {
            self.multiplexProgram = nil
        }
    }
}

/// Placeholder documentation for CreateMultiplexProgramResponse
public struct CreateMultiplexProgramOutputResponse: Swift.Equatable {
    /// The newly created multiplex program.
    public var multiplexProgram: MediaLiveClientTypes.MultiplexProgram?

    public init (
        multiplexProgram: MediaLiveClientTypes.MultiplexProgram? = nil
    )
    {
        self.multiplexProgram = multiplexProgram
    }
}

struct CreateMultiplexProgramOutputResponseBody: Swift.Equatable {
    let multiplexProgram: MediaLiveClientTypes.MultiplexProgram?
}

extension CreateMultiplexProgramOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexProgram = "multiplexProgram"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgram.self, forKey: .multiplexProgram)
        multiplexProgram = multiplexProgramDecoded
    }
}

extension CreatePartnerInputInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestId = "requestId"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreatePartnerInputInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputId = inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())/partners"
    }
}

/// A request to create a partner input
public struct CreatePartnerInputInput: Swift.Equatable {
    /// Unique ID of the input.
    /// This member is required.
    public var inputId: Swift.String?
    /// Unique identifier of the request to ensure the request is handled exactly once in case of retries.
    public var requestId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?

    public init (
        inputId: Swift.String? = nil,
        requestId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.inputId = inputId
        self.requestId = requestId
        self.tags = tags
    }
}

struct CreatePartnerInputInputBody: Swift.Equatable {
    let requestId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreatePartnerInputInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestId = "requestId"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePartnerInputOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePartnerInputOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePartnerInputOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePartnerInputOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePartnerInputOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.input = output.input
        } else {
            self.input = nil
        }
    }
}

/// Placeholder documentation for CreatePartnerInputResponse
public struct CreatePartnerInputOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Input
    public var input: MediaLiveClientTypes.Input?

    public init (
        input: MediaLiveClientTypes.Input? = nil
    )
    {
        self.input = input
    }
}

struct CreatePartnerInputOutputResponseBody: Swift.Equatable {
    let input: MediaLiveClientTypes.Input?
}

extension CreatePartnerInputOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "input"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Input.self, forKey: .input)
        input = inputDecoded
    }
}

extension CreateTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/prod/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Placeholder documentation for CreateTagsRequest
public struct CreateTagsInput: Swift.Equatable {
    /// Placeholder documentation for __string
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Placeholder documentation for Tags
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct CreateTagsInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension CreateTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateTagsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteChannelRequest
public struct DeleteChannelInput: Swift.Equatable {
    /// Unique ID of the channel.
    /// This member is required.
    public var channelId: Swift.String?

    public init (
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct DeleteChannelInputBody: Swift.Equatable {
}

extension DeleteChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteChannelOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.maintenance = output.maintenance
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.maintenance = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = nil
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for DeleteChannelResponse
public struct DeleteChannelOutputResponse: Swift.Equatable {
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init (
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct DeleteChannelOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let channelClass: MediaLiveClientTypes.ChannelClass?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let id: Swift.String?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceStatus?
    let name: Swift.String?
    let pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    let pipelinesRunningCount: Swift.Int?
    let roleArn: Swift.String?
    let state: MediaLiveClientTypes.ChannelState?
    let tags: [Swift.String:Swift.String]?
    let vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?
}

extension DeleteChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension DeleteInputInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputId = inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteInputRequest
public struct DeleteInputInput: Swift.Equatable {
    /// Unique ID of the input
    /// This member is required.
    public var inputId: Swift.String?

    public init (
        inputId: Swift.String? = nil
    )
    {
        self.inputId = inputId
    }
}

struct DeleteInputInputBody: Swift.Equatable {
}

extension DeleteInputInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInputOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInputOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInputOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInputOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for DeleteInputResponse
public struct DeleteInputOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteInputSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputSecurityGroupId = inputSecurityGroupId else {
            return nil
        }
        return "/prod/inputSecurityGroups/\(inputSecurityGroupId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteInputSecurityGroupRequest
public struct DeleteInputSecurityGroupInput: Swift.Equatable {
    /// The Input Security Group to delete
    /// This member is required.
    public var inputSecurityGroupId: Swift.String?

    public init (
        inputSecurityGroupId: Swift.String? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
    }
}

struct DeleteInputSecurityGroupInputBody: Swift.Equatable {
}

extension DeleteInputSecurityGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInputSecurityGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInputSecurityGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInputSecurityGroupOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInputSecurityGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for DeleteInputSecurityGroupResponse
public struct DeleteInputSecurityGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteMultiplexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteMultiplexRequest
public struct DeleteMultiplexInput: Swift.Equatable {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init (
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct DeleteMultiplexInputBody: Swift.Equatable {
}

extension DeleteMultiplexInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMultiplexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMultiplexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMultiplexOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMultiplexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = nil
            self.programCount = nil
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for DeleteMultiplexResponse
public struct DeleteMultiplexOutputResponse: Swift.Equatable {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct DeleteMultiplexOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let availabilityZones: [Swift.String]?
    let destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    let id: Swift.String?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let pipelinesRunningCount: Swift.Int?
    let programCount: Swift.Int?
    let state: MediaLiveClientTypes.MultiplexState?
    let tags: [Swift.String:Swift.String]?
}

extension DeleteMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DeleteMultiplexProgramInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        guard let programName = programName else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs/\(programName.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteMultiplexProgramRequest
public struct DeleteMultiplexProgramInput: Swift.Equatable {
    /// The ID of the multiplex that the program belongs to.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The multiplex program name.
    /// This member is required.
    public var programName: Swift.String?

    public init (
        multiplexId: Swift.String? = nil,
        programName: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

struct DeleteMultiplexProgramInputBody: Swift.Equatable {
}

extension DeleteMultiplexProgramInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMultiplexProgramOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMultiplexProgramOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMultiplexProgramOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMultiplexProgramOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channelId = output.channelId
            self.multiplexProgramSettings = output.multiplexProgramSettings
            self.packetIdentifiersMap = output.packetIdentifiersMap
            self.pipelineDetails = output.pipelineDetails
            self.programName = output.programName
        } else {
            self.channelId = nil
            self.multiplexProgramSettings = nil
            self.packetIdentifiersMap = nil
            self.pipelineDetails = nil
            self.programName = nil
        }
    }
}

/// Placeholder documentation for DeleteMultiplexProgramResponse
public struct DeleteMultiplexProgramOutputResponse: Swift.Equatable {
    /// The MediaLive channel associated with the program.
    public var channelId: Swift.String?
    /// The settings for this multiplex program.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public var packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public var pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public var programName: Swift.String?

    public init (
        channelId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil,
        programName: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

struct DeleteMultiplexProgramOutputResponseBody: Swift.Equatable {
    let channelId: Swift.String?
    let multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    let packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
    let pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
    let programName: Swift.String?
}

extension DeleteMultiplexProgramOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexProgramPipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension DeleteReservationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let reservationId = reservationId else {
            return nil
        }
        return "/prod/reservations/\(reservationId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteReservationRequest
public struct DeleteReservationInput: Swift.Equatable {
    /// Unique reservation ID, e.g. '1234567'
    /// This member is required.
    public var reservationId: Swift.String?

    public init (
        reservationId: Swift.String? = nil
    )
    {
        self.reservationId = reservationId
    }
}

struct DeleteReservationInputBody: Swift.Equatable {
}

extension DeleteReservationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteReservationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteReservationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteReservationOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReservationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteReservationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.count = output.count
            self.currencyCode = output.currencyCode
            self.duration = output.duration
            self.durationUnits = output.durationUnits
            self.end = output.end
            self.fixedPrice = output.fixedPrice
            self.name = output.name
            self.offeringDescription = output.offeringDescription
            self.offeringId = output.offeringId
            self.offeringType = output.offeringType
            self.region = output.region
            self.renewalSettings = output.renewalSettings
            self.reservationId = output.reservationId
            self.resourceSpecification = output.resourceSpecification
            self.start = output.start
            self.state = output.state
            self.tags = output.tags
            self.usagePrice = output.usagePrice
        } else {
            self.arn = nil
            self.count = nil
            self.currencyCode = nil
            self.duration = nil
            self.durationUnits = nil
            self.end = nil
            self.fixedPrice = nil
            self.name = nil
            self.offeringDescription = nil
            self.offeringId = nil
            self.offeringType = nil
            self.region = nil
            self.renewalSettings = nil
            self.reservationId = nil
            self.resourceSpecification = nil
            self.start = nil
            self.state = nil
            self.tags = nil
            self.usagePrice = nil
        }
    }
}

/// Placeholder documentation for DeleteReservationResponse
public struct DeleteReservationOutputResponse: Swift.Equatable {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public var arn: Swift.String?
    /// Number of reserved resources
    public var count: Swift.Int?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public var currencyCode: Swift.String?
    /// Lease duration, e.g. '12'
    public var duration: Swift.Int?
    /// Units for duration, e.g. 'MONTHS'
    public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public var end: Swift.String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public var fixedPrice: Swift.Double?
    /// User specified reservation name
    public var name: Swift.String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public var offeringDescription: Swift.String?
    /// Unique offering ID, e.g. '87654321'
    public var offeringId: Swift.String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public var offeringType: MediaLiveClientTypes.OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public var region: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique reservation ID, e.g. '1234567'
    public var reservationId: Swift.String?
    /// Resource configuration details
    public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public var start: Swift.String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public var state: MediaLiveClientTypes.ReservationState?
    /// A collection of key-value pairs
    public var tags: [Swift.String:Swift.String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public var usagePrice: Swift.Double?

    public init (
        arn: Swift.String? = nil,
        count: Swift.Int? = nil,
        currencyCode: Swift.String? = nil,
        duration: Swift.Int? = nil,
        durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
        end: Swift.String? = nil,
        fixedPrice: Swift.Double? = nil,
        name: Swift.String? = nil,
        offeringDescription: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        offeringType: MediaLiveClientTypes.OfferingType? = nil,
        region: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        reservationId: Swift.String? = nil,
        resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
        start: Swift.String? = nil,
        state: MediaLiveClientTypes.ReservationState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        usagePrice: Swift.Double? = nil
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.renewalSettings = renewalSettings
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

struct DeleteReservationOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let count: Swift.Int?
    let currencyCode: Swift.String?
    let duration: Swift.Int?
    let durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    let end: Swift.String?
    let fixedPrice: Swift.Double?
    let name: Swift.String?
    let offeringDescription: Swift.String?
    let offeringId: Swift.String?
    let offeringType: MediaLiveClientTypes.OfferingType?
    let region: Swift.String?
    let renewalSettings: MediaLiveClientTypes.RenewalSettings?
    let reservationId: Swift.String?
    let resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    let start: Swift.String?
    let state: MediaLiveClientTypes.ReservationState?
    let tags: [Swift.String:Swift.String]?
    let usagePrice: Swift.Double?
}

extension DeleteReservationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case renewalSettings = "renewalSettings"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let renewalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RenewalSettings.self, forKey: .renewalSettings)
        renewalSettings = renewalSettingsDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension DeleteScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/schedule"
    }
}

/// Placeholder documentation for DeleteScheduleRequest
public struct DeleteScheduleInput: Swift.Equatable {
    /// Id of the channel whose schedule is being deleted.
    /// This member is required.
    public var channelId: Swift.String?

    public init (
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct DeleteScheduleInputBody: Swift.Equatable {
}

extension DeleteScheduleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteScheduleOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for DeleteScheduleResponse
public struct DeleteScheduleOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteTagsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension DeleteTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/prod/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DeleteTagsRequest
public struct DeleteTagsInput: Swift.Equatable {
    /// Placeholder documentation for __string
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of tag keys to delete
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct DeleteTagsInputBody: Swift.Equatable {
}

extension DeleteTagsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteTagsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeChannelRequest
public struct DescribeChannelInput: Swift.Equatable {
    /// channel ID
    /// This member is required.
    public var channelId: Swift.String?

    public init (
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct DescribeChannelInputBody: Swift.Equatable {
}

extension DescribeChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeChannelOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .badGatewayException: return "BadGatewayException"
        case .badRequestException: return "BadRequestException"
        case .forbiddenException: return "ForbiddenException"
        case .gatewayTimeoutException: return "GatewayTimeoutException"
        case .internalServerErrorException: return "InternalServerErrorException"
        case .notFoundException: return "NotFoundException"
        case .tooManyRequestsException: return "TooManyRequestsException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeChannelOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.maintenance = output.maintenance
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.maintenance = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = nil
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for DescribeChannelResponse
public struct DescribeChannelOutputResponse: Swift.Equatable {
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init (
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct DescribeChannelOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let channelClass: MediaLiveClientTypes.ChannelClass?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let id: Swift.String?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceStatus?
    let name: Swift.String?
    let pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    let pipelinesRunningCount: Swift.Int?
    let roleArn: Swift.String?
    let state: MediaLiveClientTypes.ChannelState?
    let tags: [Swift.String:Swift.String]?
    let vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?
}

extension DescribeChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension DescribeInputDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeInputDeviceRequest
public struct DescribeInputDeviceInput: Swift.Equatable {
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct DescribeInputDeviceInputBody: Swift.Equatable {
}

extension DescribeInputDeviceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInputDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInputDeviceOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInputDeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.connectionState = output.connectionState
            self.deviceSettingsSyncState = output.deviceSettingsSyncState
            self.deviceUpdateStatus = output.deviceUpdateStatus
            self.hdDeviceSettings = output.hdDeviceSettings
            self.id = output.id
            self.macAddress = output.macAddress
            self.name = output.name
            self.networkSettings = output.networkSettings
            self.serialNumber = output.serialNumber
            self.type = output.type
            self.uhdDeviceSettings = output.uhdDeviceSettings
        } else {
            self.arn = nil
            self.connectionState = nil
            self.deviceSettingsSyncState = nil
            self.deviceUpdateStatus = nil
            self.hdDeviceSettings = nil
            self.id = nil
            self.macAddress = nil
            self.name = nil
            self.networkSettings = nil
            self.serialNumber = nil
            self.type = nil
            self.uhdDeviceSettings = nil
        }
    }
}

/// Placeholder documentation for DescribeInputDeviceResponse
public struct DescribeInputDeviceOutputResponse: Swift.Equatable {
    /// The unique ARN of the input device.
    public var arn: Swift.String?
    /// The state of the connection between the input device and AWS.
    public var connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public var deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
    /// The status of software on the input device.
    public var deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
    /// The unique ID of the input device.
    public var id: Swift.String?
    /// The network MAC address of the input device.
    public var macAddress: Swift.String?
    /// A name that you specify for the input device.
    public var name: Swift.String?
    /// The network settings for the input device.
    public var networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
    /// The unique serial number of the input device.
    public var serialNumber: Swift.String?
    /// The type of the input device.
    public var type: MediaLiveClientTypes.InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?

    public init (
        arn: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus? = nil,
        hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings? = nil,
        id: Swift.String? = nil,
        macAddress: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings? = nil,
        serialNumber: Swift.String? = nil,
        type: MediaLiveClientTypes.InputDeviceType? = nil,
        uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.name = name
        self.networkSettings = networkSettings
        self.serialNumber = serialNumber
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

struct DescribeInputDeviceOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
    let deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
    let deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
    let hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
    let id: Swift.String?
    let macAddress: Swift.String?
    let name: Swift.String?
    let networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
    let serialNumber: Swift.String?
    let type: MediaLiveClientTypes.InputDeviceType?
    let uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?
}

extension DescribeInputDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension DescribeInputDeviceThumbnailInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let accept = accept {
            items.add(Header(name: "accept", value: Swift.String(accept.rawValue)))
        }
        return items
    }
}

extension DescribeInputDeviceThumbnailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/thumbnailData"
    }
}

/// Placeholder documentation for DescribeInputDeviceThumbnailRequest
public struct DescribeInputDeviceThumbnailInput: Swift.Equatable {
    /// The HTTP Accept header. Indicates the requested type for the thumbnail.
    /// This member is required.
    public var accept: MediaLiveClientTypes.AcceptHeader?
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        accept: MediaLiveClientTypes.AcceptHeader? = nil,
        inputDeviceId: Swift.String? = nil
    )
    {
        self.accept = accept
        self.inputDeviceId = inputDeviceId
    }
}

struct DescribeInputDeviceThumbnailInputBody: Swift.Equatable {
}

extension DescribeInputDeviceThumbnailInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInputDeviceThumbnailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputDeviceThumbnailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInputDeviceThumbnailOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputDeviceThumbnailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            self.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        } else {
            self.contentLength = nil
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = MediaLiveClientTypes.ContentType(rawValue: contentTypeHeaderValue)
        } else {
            self.contentType = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if let data = httpResponse.body.toBytes()?.getData() {
            self.body = ByteStream.from(data: data)
        } else {
            self.body = nil
        }
    }
}

/// Placeholder documentation for DescribeInputDeviceThumbnailResponse
public struct DescribeInputDeviceThumbnailOutputResponse: Swift.Equatable {
    /// The binary data for the thumbnail that the Link device has most recently sent to MediaLive.
    public var body: ClientRuntime.ByteStream?
    /// The length of the content.
    public var contentLength: Swift.Int?
    /// Specifies the media type of the thumbnail.
    public var contentType: MediaLiveClientTypes.ContentType?
    /// The unique, cacheable version of this thumbnail.
    public var eTag: Swift.String?
    /// The date and time the thumbnail was last updated at the device.
    public var lastModified: ClientRuntime.Date?

    public init (
        body: ClientRuntime.ByteStream? = nil,
        contentLength: Swift.Int? = nil,
        contentType: MediaLiveClientTypes.ContentType? = nil,
        eTag: Swift.String? = nil,
        lastModified: ClientRuntime.Date? = nil
    )
    {
        self.body = body
        self.contentLength = contentLength
        self.contentType = contentType
        self.eTag = eTag
        self.lastModified = lastModified
    }
}

struct DescribeInputDeviceThumbnailOutputResponseBody: Swift.Equatable {
    let body: ClientRuntime.ByteStream?
}

extension DescribeInputDeviceThumbnailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "body"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
        body = bodyDecoded
    }
}

extension DescribeInputInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputId = inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeInputRequest
public struct DescribeInputInput: Swift.Equatable {
    /// Unique ID of the input
    /// This member is required.
    public var inputId: Swift.String?

    public init (
        inputId: Swift.String? = nil
    )
    {
        self.inputId = inputId
    }
}

struct DescribeInputInputBody: Swift.Equatable {
}

extension DescribeInputInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInputOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeInputOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .badGatewayException: return "BadGatewayException"
        case .badRequestException: return "BadRequestException"
        case .forbiddenException: return "ForbiddenException"
        case .gatewayTimeoutException: return "GatewayTimeoutException"
        case .internalServerErrorException: return "InternalServerErrorException"
        case .notFoundException: return "NotFoundException"
        case .tooManyRequestsException: return "TooManyRequestsException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeInputOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInputOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.attachedChannels = output.attachedChannels
            self.destinations = output.destinations
            self.id = output.id
            self.inputClass = output.inputClass
            self.inputDevices = output.inputDevices
            self.inputPartnerIds = output.inputPartnerIds
            self.inputSourceType = output.inputSourceType
            self.mediaConnectFlows = output.mediaConnectFlows
            self.name = output.name
            self.roleArn = output.roleArn
            self.securityGroups = output.securityGroups
            self.sources = output.sources
            self.state = output.state
            self.tags = output.tags
            self.type = output.type
        } else {
            self.arn = nil
            self.attachedChannels = nil
            self.destinations = nil
            self.id = nil
            self.inputClass = nil
            self.inputDevices = nil
            self.inputPartnerIds = nil
            self.inputSourceType = nil
            self.mediaConnectFlows = nil
            self.name = nil
            self.roleArn = nil
            self.securityGroups = nil
            self.sources = nil
            self.state = nil
            self.tags = nil
            self.type = nil
        }
    }
}

/// Placeholder documentation for DescribeInputResponse
public struct DescribeInputOutputResponse: Swift.Equatable {
    /// The Unique ARN of the input (generated, immutable).
    public var arn: Swift.String?
    /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
    public var attachedChannels: [Swift.String]?
    /// A list of the destinations of the input (PUSH-type).
    public var destinations: [MediaLiveClientTypes.InputDestination]?
    /// The generated ID of the input (unique for user account, immutable).
    public var id: Swift.String?
    /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
    public var inputClass: MediaLiveClientTypes.InputClass?
    /// Settings for the input devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    /// A list of IDs for all Inputs which are partners of this one.
    public var inputPartnerIds: [Swift.String]?
    /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE and TS_FILE inputs.
    public var inputSourceType: MediaLiveClientTypes.InputSourceType?
    /// A list of MediaConnect Flows for this input.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
    /// The user-assigned name (This is a mutable value).
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// A list of IDs for all the Input Security Groups attached to the input.
    public var securityGroups: [Swift.String]?
    /// A list of the sources of the input (PULL-type).
    public var sources: [MediaLiveClientTypes.InputSource]?
    /// Placeholder documentation for InputState
    public var state: MediaLiveClientTypes.InputState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// The different types of inputs that AWS Elemental MediaLive supports.
    public var type: MediaLiveClientTypes.InputType?

    public init (
        arn: Swift.String? = nil,
        attachedChannels: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.InputDestination]? = nil,
        id: Swift.String? = nil,
        inputClass: MediaLiveClientTypes.InputClass? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
        inputPartnerIds: [Swift.String]? = nil,
        inputSourceType: MediaLiveClientTypes.InputSourceType? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        sources: [MediaLiveClientTypes.InputSource]? = nil,
        state: MediaLiveClientTypes.InputState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: MediaLiveClientTypes.InputType? = nil
    )
    {
        self.arn = arn
        self.attachedChannels = attachedChannels
        self.destinations = destinations
        self.id = id
        self.inputClass = inputClass
        self.inputDevices = inputDevices
        self.inputPartnerIds = inputPartnerIds
        self.inputSourceType = inputSourceType
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.securityGroups = securityGroups
        self.sources = sources
        self.state = state
        self.tags = tags
        self.type = type
    }
}

struct DescribeInputOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let attachedChannels: [Swift.String]?
    let destinations: [MediaLiveClientTypes.InputDestination]?
    let id: Swift.String?
    let inputClass: MediaLiveClientTypes.InputClass?
    let inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    let inputPartnerIds: [Swift.String]?
    let inputSourceType: MediaLiveClientTypes.InputSourceType?
    let mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
    let name: Swift.String?
    let roleArn: Swift.String?
    let securityGroups: [Swift.String]?
    let sources: [MediaLiveClientTypes.InputSource]?
    let state: MediaLiveClientTypes.InputState?
    let tags: [Swift.String:Swift.String]?
    let type: MediaLiveClientTypes.InputType?
}

extension DescribeInputOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case attachedChannels = "attachedChannels"
        case destinations = "destinations"
        case id = "id"
        case inputClass = "inputClass"
        case inputDevices = "inputDevices"
        case inputPartnerIds = "inputPartnerIds"
        case inputSourceType = "inputSourceType"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case securityGroups = "securityGroups"
        case sources = "sources"
        case state = "state"
        case tags = "tags"
        case type = "type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let attachedChannelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attachedChannels)
        var attachedChannelsDecoded0:[Swift.String]? = nil
        if let attachedChannelsContainer = attachedChannelsContainer {
            attachedChannelsDecoded0 = [Swift.String]()
            for string0 in attachedChannelsContainer {
                if let string0 = string0 {
                    attachedChannelsDecoded0?.append(string0)
                }
            }
        }
        attachedChannels = attachedChannelsDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.InputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.InputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputClass.self, forKey: .inputClass)
        inputClass = inputClassDecoded
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputPartnerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputPartnerIds)
        var inputPartnerIdsDecoded0:[Swift.String]? = nil
        if let inputPartnerIdsContainer = inputPartnerIdsContainer {
            inputPartnerIdsDecoded0 = [Swift.String]()
            for string0 in inputPartnerIdsContainer {
                if let string0 = string0 {
                    inputPartnerIdsDecoded0?.append(string0)
                }
            }
        }
        inputPartnerIds = inputPartnerIdsDecoded0
        let inputSourceTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSourceType.self, forKey: .inputSourceType)
        inputSourceType = inputSourceTypeDecoded
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaConnectFlow?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaLiveClientTypes.MediaConnectFlow]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaLiveClientTypes.MediaConnectFlow]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourcesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSource?].self, forKey: .sources)
        var sourcesDecoded0:[MediaLiveClientTypes.InputSource]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaLiveClientTypes.InputSource]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DescribeInputSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputSecurityGroupId = inputSecurityGroupId else {
            return nil
        }
        return "/prod/inputSecurityGroups/\(inputSecurityGroupId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeInputSecurityGroupRequest
public struct DescribeInputSecurityGroupInput: Swift.Equatable {
    /// The id of the Input Security Group to describe
    /// This member is required.
    public var inputSecurityGroupId: Swift.String?

    public init (
        inputSecurityGroupId: Swift.String? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
    }
}

struct DescribeInputSecurityGroupInputBody: Swift.Equatable {
}

extension DescribeInputSecurityGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInputSecurityGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInputSecurityGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInputSecurityGroupOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInputSecurityGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInputSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.id = output.id
            self.inputs = output.inputs
            self.state = output.state
            self.tags = output.tags
            self.whitelistRules = output.whitelistRules
        } else {
            self.arn = nil
            self.id = nil
            self.inputs = nil
            self.state = nil
            self.tags = nil
            self.whitelistRules = nil
        }
    }
}

/// Placeholder documentation for DescribeInputSecurityGroupResponse
public struct DescribeInputSecurityGroupOutputResponse: Swift.Equatable {
    /// Unique ARN of Input Security Group
    public var arn: Swift.String?
    /// The Id of the Input Security Group
    public var id: Swift.String?
    /// The list of inputs currently using this Input Security Group.
    public var inputs: [Swift.String]?
    /// The current state of the Input Security Group.
    public var state: MediaLiveClientTypes.InputSecurityGroupState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// Whitelist rules and their sync status
    public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]?

    public init (
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        inputs: [Swift.String]? = nil,
        state: MediaLiveClientTypes.InputSecurityGroupState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.inputs = inputs
        self.state = state
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

struct DescribeInputSecurityGroupOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let id: Swift.String?
    let inputs: [Swift.String]?
    let state: MediaLiveClientTypes.InputSecurityGroupState?
    let tags: [Swift.String:Swift.String]?
    let whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]?
}

extension DescribeInputSecurityGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputWhitelistRule?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[MediaLiveClientTypes.InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [MediaLiveClientTypes.InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension DescribeMultiplexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeMultiplexRequest
public struct DescribeMultiplexInput: Swift.Equatable {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init (
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct DescribeMultiplexInputBody: Swift.Equatable {
}

extension DescribeMultiplexInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeMultiplexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMultiplexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeMultiplexOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .badGatewayException: return "BadGatewayException"
        case .badRequestException: return "BadRequestException"
        case .forbiddenException: return "ForbiddenException"
        case .gatewayTimeoutException: return "GatewayTimeoutException"
        case .internalServerErrorException: return "InternalServerErrorException"
        case .notFoundException: return "NotFoundException"
        case .tooManyRequestsException: return "TooManyRequestsException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeMultiplexOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMultiplexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = nil
            self.programCount = nil
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for DescribeMultiplexResponse
public struct DescribeMultiplexOutputResponse: Swift.Equatable {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct DescribeMultiplexOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let availabilityZones: [Swift.String]?
    let destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    let id: Swift.String?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let pipelinesRunningCount: Swift.Int?
    let programCount: Swift.Int?
    let state: MediaLiveClientTypes.MultiplexState?
    let tags: [Swift.String:Swift.String]?
}

extension DescribeMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DescribeMultiplexProgramInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        guard let programName = programName else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs/\(programName.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeMultiplexProgramRequest
public struct DescribeMultiplexProgramInput: Swift.Equatable {
    /// The ID of the multiplex that the program belongs to.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The name of the program.
    /// This member is required.
    public var programName: Swift.String?

    public init (
        multiplexId: Swift.String? = nil,
        programName: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

struct DescribeMultiplexProgramInputBody: Swift.Equatable {
}

extension DescribeMultiplexProgramInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeMultiplexProgramOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMultiplexProgramOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMultiplexProgramOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMultiplexProgramOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channelId = output.channelId
            self.multiplexProgramSettings = output.multiplexProgramSettings
            self.packetIdentifiersMap = output.packetIdentifiersMap
            self.pipelineDetails = output.pipelineDetails
            self.programName = output.programName
        } else {
            self.channelId = nil
            self.multiplexProgramSettings = nil
            self.packetIdentifiersMap = nil
            self.pipelineDetails = nil
            self.programName = nil
        }
    }
}

/// Placeholder documentation for DescribeMultiplexProgramResponse
public struct DescribeMultiplexProgramOutputResponse: Swift.Equatable {
    /// The MediaLive channel associated with the program.
    public var channelId: Swift.String?
    /// The settings for this multiplex program.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public var packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public var pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public var programName: Swift.String?

    public init (
        channelId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil,
        programName: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

struct DescribeMultiplexProgramOutputResponseBody: Swift.Equatable {
    let channelId: Swift.String?
    let multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    let packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
    let pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
    let programName: Swift.String?
}

extension DescribeMultiplexProgramOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexProgramPipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension DescribeOfferingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let offeringId = offeringId else {
            return nil
        }
        return "/prod/offerings/\(offeringId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeOfferingRequest
public struct DescribeOfferingInput: Swift.Equatable {
    /// Unique offering ID, e.g. '87654321'
    /// This member is required.
    public var offeringId: Swift.String?

    public init (
        offeringId: Swift.String? = nil
    )
    {
        self.offeringId = offeringId
    }
}

struct DescribeOfferingInputBody: Swift.Equatable {
}

extension DescribeOfferingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeOfferingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOfferingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeOfferingOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOfferingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeOfferingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.currencyCode = output.currencyCode
            self.duration = output.duration
            self.durationUnits = output.durationUnits
            self.fixedPrice = output.fixedPrice
            self.offeringDescription = output.offeringDescription
            self.offeringId = output.offeringId
            self.offeringType = output.offeringType
            self.region = output.region
            self.resourceSpecification = output.resourceSpecification
            self.usagePrice = output.usagePrice
        } else {
            self.arn = nil
            self.currencyCode = nil
            self.duration = nil
            self.durationUnits = nil
            self.fixedPrice = nil
            self.offeringDescription = nil
            self.offeringId = nil
            self.offeringType = nil
            self.region = nil
            self.resourceSpecification = nil
            self.usagePrice = nil
        }
    }
}

/// Placeholder documentation for DescribeOfferingResponse
public struct DescribeOfferingOutputResponse: Swift.Equatable {
    /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
    public var arn: Swift.String?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public var currencyCode: Swift.String?
    /// Lease duration, e.g. '12'
    public var duration: Swift.Int?
    /// Units for duration, e.g. 'MONTHS'
    public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public var fixedPrice: Swift.Double?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public var offeringDescription: Swift.String?
    /// Unique offering ID, e.g. '87654321'
    public var offeringId: Swift.String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public var offeringType: MediaLiveClientTypes.OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public var region: Swift.String?
    /// Resource configuration details
    public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public var usagePrice: Swift.Double?

    public init (
        arn: Swift.String? = nil,
        currencyCode: Swift.String? = nil,
        duration: Swift.Int? = nil,
        durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
        fixedPrice: Swift.Double? = nil,
        offeringDescription: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        offeringType: MediaLiveClientTypes.OfferingType? = nil,
        region: Swift.String? = nil,
        resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
        usagePrice: Swift.Double? = nil
    )
    {
        self.arn = arn
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.fixedPrice = fixedPrice
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.resourceSpecification = resourceSpecification
        self.usagePrice = usagePrice
    }
}

struct DescribeOfferingOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let currencyCode: Swift.String?
    let duration: Swift.Int?
    let durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    let fixedPrice: Swift.Double?
    let offeringDescription: Swift.String?
    let offeringId: Swift.String?
    let offeringType: MediaLiveClientTypes.OfferingType?
    let region: Swift.String?
    let resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    let usagePrice: Swift.Double?
}

extension DescribeOfferingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case fixedPrice = "fixedPrice"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case resourceSpecification = "resourceSpecification"
        case usagePrice = "usagePrice"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension DescribeReservationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let reservationId = reservationId else {
            return nil
        }
        return "/prod/reservations/\(reservationId.urlPercentEncoding())"
    }
}

/// Placeholder documentation for DescribeReservationRequest
public struct DescribeReservationInput: Swift.Equatable {
    /// Unique reservation ID, e.g. '1234567'
    /// This member is required.
    public var reservationId: Swift.String?

    public init (
        reservationId: Swift.String? = nil
    )
    {
        self.reservationId = reservationId
    }
}

struct DescribeReservationInputBody: Swift.Equatable {
}

extension DescribeReservationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReservationOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReservationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.count = output.count
            self.currencyCode = output.currencyCode
            self.duration = output.duration
            self.durationUnits = output.durationUnits
            self.end = output.end
            self.fixedPrice = output.fixedPrice
            self.name = output.name
            self.offeringDescription = output.offeringDescription
            self.offeringId = output.offeringId
            self.offeringType = output.offeringType
            self.region = output.region
            self.renewalSettings = output.renewalSettings
            self.reservationId = output.reservationId
            self.resourceSpecification = output.resourceSpecification
            self.start = output.start
            self.state = output.state
            self.tags = output.tags
            self.usagePrice = output.usagePrice
        } else {
            self.arn = nil
            self.count = nil
            self.currencyCode = nil
            self.duration = nil
            self.durationUnits = nil
            self.end = nil
            self.fixedPrice = nil
            self.name = nil
            self.offeringDescription = nil
            self.offeringId = nil
            self.offeringType = nil
            self.region = nil
            self.renewalSettings = nil
            self.reservationId = nil
            self.resourceSpecification = nil
            self.start = nil
            self.state = nil
            self.tags = nil
            self.usagePrice = nil
        }
    }
}

/// Placeholder documentation for DescribeReservationResponse
public struct DescribeReservationOutputResponse: Swift.Equatable {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public var arn: Swift.String?
    /// Number of reserved resources
    public var count: Swift.Int?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public var currencyCode: Swift.String?
    /// Lease duration, e.g. '12'
    public var duration: Swift.Int?
    /// Units for duration, e.g. 'MONTHS'
    public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public var end: Swift.String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public var fixedPrice: Swift.Double?
    /// User specified reservation name
    public var name: Swift.String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public var offeringDescription: Swift.String?
    /// Unique offering ID, e.g. '87654321'
    public var offeringId: Swift.String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public var offeringType: MediaLiveClientTypes.OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public var region: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique reservation ID, e.g. '1234567'
    public var reservationId: Swift.String?
    /// Resource configuration details
    public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public var start: Swift.String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public var state: MediaLiveClientTypes.ReservationState?
    /// A collection of key-value pairs
    public var tags: [Swift.String:Swift.String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public var usagePrice: Swift.Double?

    public init (
        arn: Swift.String? = nil,
        count: Swift.Int? = nil,
        currencyCode: Swift.String? = nil,
        duration: Swift.Int? = nil,
        durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
        end: Swift.String? = nil,
        fixedPrice: Swift.Double? = nil,
        name: Swift.String? = nil,
        offeringDescription: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        offeringType: MediaLiveClientTypes.OfferingType? = nil,
        region: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        reservationId: Swift.String? = nil,
        resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
        start: Swift.String? = nil,
        state: MediaLiveClientTypes.ReservationState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        usagePrice: Swift.Double? = nil
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.renewalSettings = renewalSettings
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

struct DescribeReservationOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let count: Swift.Int?
    let currencyCode: Swift.String?
    let duration: Swift.Int?
    let durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    let end: Swift.String?
    let fixedPrice: Swift.Double?
    let name: Swift.String?
    let offeringDescription: Swift.String?
    let offeringId: Swift.String?
    let offeringType: MediaLiveClientTypes.OfferingType?
    let region: Swift.String?
    let renewalSettings: MediaLiveClientTypes.RenewalSettings?
    let reservationId: Swift.String?
    let resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    let start: Swift.String?
    let state: MediaLiveClientTypes.ReservationState?
    let tags: [Swift.String:Swift.String]?
    let usagePrice: Swift.Double?
}

extension DescribeReservationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case renewalSettings = "renewalSettings"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let renewalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RenewalSettings.self, forKey: .renewalSettings)
        renewalSettings = renewalSettingsDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension DescribeScheduleInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension DescribeScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/schedule"
    }
}

/// Placeholder documentation for DescribeScheduleRequest
public struct DescribeScheduleInput: Swift.Equatable {
    /// Id of the channel whose schedule is being updated.
    /// This member is required.
    public var channelId: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        channelId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeScheduleInputBody: Swift.Equatable {
}

extension DescribeScheduleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeScheduleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScheduleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeScheduleOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeScheduleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scheduleActions = output.scheduleActions
        } else {
            self.nextToken = nil
            self.scheduleActions = nil
        }
    }
}

/// Placeholder documentation for DescribeScheduleResponse
public struct DescribeScheduleOutputResponse: Swift.Equatable {
    /// The next token; for use in pagination.
    public var nextToken: Swift.String?
    /// The list of actions in the schedule.
    public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

    public init (
        nextToken: Swift.String? = nil,
        scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduleActions = scheduleActions
    }
}

struct DescribeScheduleOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let scheduleActions: [MediaLiveClientTypes.ScheduleAction]?
}

extension DescribeScheduleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case scheduleActions = "scheduleActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let scheduleActionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ScheduleAction?].self, forKey: .scheduleActions)
        var scheduleActionsDecoded0:[MediaLiveClientTypes.ScheduleAction]? = nil
        if let scheduleActionsContainer = scheduleActionsContainer {
            scheduleActionsDecoded0 = [MediaLiveClientTypes.ScheduleAction]()
            for structure0 in scheduleActionsContainer {
                if let structure0 = structure0 {
                    scheduleActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduleActions = scheduleActionsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public enum DeviceSettingsSyncState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case synced
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceSettingsSyncState] {
            return [
                .synced,
                .syncing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .synced: return "SYNCED"
            case .syncing: return "SYNCING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeviceSettingsSyncState(rawValue: rawValue) ?? DeviceSettingsSyncState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// The status of software on the input device.
    public enum DeviceUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notUpToDate
        case updating
        case upToDate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceUpdateStatus] {
            return [
                .notUpToDate,
                .updating,
                .upToDate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notUpToDate: return "NOT_UP_TO_DATE"
            case .updating: return "UPDATING"
            case .upToDate: return "UP_TO_DATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeviceUpdateStatus(rawValue: rawValue) ?? DeviceUpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Dolby EProgram Selection
    public enum DolbyEProgramSelection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allChannels
        case program1
        case program2
        case program3
        case program4
        case program5
        case program6
        case program7
        case program8
        case sdkUnknown(Swift.String)

        public static var allCases: [DolbyEProgramSelection] {
            return [
                .allChannels,
                .program1,
                .program2,
                .program3,
                .program4,
                .program5,
                .program6,
                .program7,
                .program8,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allChannels: return "ALL_CHANNELS"
            case .program1: return "PROGRAM_1"
            case .program2: return "PROGRAM_2"
            case .program3: return "PROGRAM_3"
            case .program4: return "PROGRAM_4"
            case .program5: return "PROGRAM_5"
            case .program6: return "PROGRAM_6"
            case .program7: return "PROGRAM_7"
            case .program8: return "PROGRAM_8"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DolbyEProgramSelection(rawValue: rawValue) ?? DolbyEProgramSelection.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.DolbyVision81Settings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Dolby Vision81 Settings
    public struct DolbyVision81Settings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.DvbNitSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkId = "networkId"
        case networkName = "networkName"
        case repInterval = "repInterval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let networkId = self.networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let networkName = self.networkName {
            try encodeContainer.encode(networkName, forKey: .networkName)
        }
        if let repInterval = self.repInterval {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .networkId)
        networkId = networkIdDecoded
        let networkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkName)
        networkName = networkNameDecoded
        let repIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
    }
}

extension MediaLiveClientTypes {
    /// DVB Network Information Table (NIT)
    public struct DvbNitSettings: Swift.Equatable {
        /// The numeric value placed in the Network Information Table (NIT).
        /// This member is required.
        public var networkId: Swift.Int?
        /// The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
        /// This member is required.
        public var networkName: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var repInterval: Swift.Int?

        public init (
            networkId: Swift.Int? = nil,
            networkName: Swift.String? = nil,
            repInterval: Swift.Int? = nil
        )
        {
            self.networkId = networkId
            self.networkName = networkName
            self.repInterval = repInterval
        }
    }

}

extension MediaLiveClientTypes {
    /// Dvb Sdt Output Sdt
    public enum DvbSdtOutputSdt: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sdtFollow
        case sdtFollowIfPresent
        case sdtManual
        case sdtNone
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSdtOutputSdt] {
            return [
                .sdtFollow,
                .sdtFollowIfPresent,
                .sdtManual,
                .sdtNone,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sdtFollow: return "SDT_FOLLOW"
            case .sdtFollowIfPresent: return "SDT_FOLLOW_IF_PRESENT"
            case .sdtManual: return "SDT_MANUAL"
            case .sdtNone: return "SDT_NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSdtOutputSdt(rawValue: rawValue) ?? DvbSdtOutputSdt.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.DvbSdtSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputSdt = "outputSdt"
        case repInterval = "repInterval"
        case serviceName = "serviceName"
        case serviceProviderName = "serviceProviderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputSdt = self.outputSdt {
            try encodeContainer.encode(outputSdt.rawValue, forKey: .outputSdt)
        }
        if let repInterval = self.repInterval {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceProviderName = self.serviceProviderName {
            try encodeContainer.encode(serviceProviderName, forKey: .serviceProviderName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputSdtDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSdtOutputSdt.self, forKey: .outputSdt)
        outputSdt = outputSdtDecoded
        let repIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceProviderNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceProviderName)
        serviceProviderName = serviceProviderNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// DVB Service Description Table (SDT)
    public struct DvbSdtSettings: Swift.Equatable {
        /// Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
        public var outputSdt: MediaLiveClientTypes.DvbSdtOutputSdt?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var repInterval: Swift.Int?
        /// The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
        public var serviceName: Swift.String?
        /// The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
        public var serviceProviderName: Swift.String?

        public init (
            outputSdt: MediaLiveClientTypes.DvbSdtOutputSdt? = nil,
            repInterval: Swift.Int? = nil,
            serviceName: Swift.String? = nil,
            serviceProviderName: Swift.String? = nil
        )
        {
            self.outputSdt = outputSdt
            self.repInterval = repInterval
            self.serviceName = serviceName
            self.serviceProviderName = serviceProviderName
        }
    }

}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Alignment
    public enum DvbSubDestinationAlignment: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case centered
        case `left`
        case smart
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationAlignment] {
            return [
                .centered,
                .left,
                .smart,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .centered: return "CENTERED"
            case .left: return "LEFT"
            case .smart: return "SMART"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubDestinationAlignment(rawValue: rawValue) ?? DvbSubDestinationAlignment.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Background Color
    public enum DvbSubDestinationBackgroundColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationBackgroundColor] {
            return [
                .black,
                .none,
                .white,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubDestinationBackgroundColor(rawValue: rawValue) ?? DvbSubDestinationBackgroundColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Font Color
    public enum DvbSubDestinationFontColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationFontColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubDestinationFontColor(rawValue: rawValue) ?? DvbSubDestinationFontColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Outline Color
    public enum DvbSubDestinationOutlineColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationOutlineColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubDestinationOutlineColor(rawValue: rawValue) ?? DvbSubDestinationOutlineColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.DvbSubDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case font = "font"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontSize = "fontSize"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case teletextGridControl = "teletextGridControl"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = self.alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = self.backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if let backgroundOpacity = self.backgroundOpacity {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let font = self.font {
            try encodeContainer.encode(font, forKey: .font)
        }
        if let fontColor = self.fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if let fontOpacity = self.fontOpacity {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if let fontResolution = self.fontResolution {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontSize = self.fontSize {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let outlineColor = self.outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if let outlineSize = self.outlineSize {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = self.shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if let shadowOpacity = self.shadowOpacity {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if let shadowXOffset = self.shadowXOffset {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if let shadowYOffset = self.shadowYOffset {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let teletextGridControl = self.teletextGridControl {
            try encodeContainer.encode(teletextGridControl.rawValue, forKey: .teletextGridControl)
        }
        if let xPosition = self.xPosition {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if let yPosition = self.yPosition {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let fontDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .font)
        font = fontDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let teletextGridControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationTeletextGridControl.self, forKey: .teletextGridControl)
        teletextGridControl = teletextGridControlDecoded
        let xPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Settings
    public struct DvbSubDestinationSettings: Swift.Equatable {
        /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var alignment: MediaLiveClientTypes.DvbSubDestinationAlignment?
        /// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
        public var backgroundColor: MediaLiveClientTypes.DvbSubDestinationBackgroundColor?
        /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var backgroundOpacity: Swift.Int?
        /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
        public var font: MediaLiveClientTypes.InputLocation?
        /// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var fontColor: MediaLiveClientTypes.DvbSubDestinationFontColor?
        /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
        public var fontOpacity: Swift.Int?
        /// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
        public var fontResolution: Swift.Int?
        /// When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
        public var fontSize: Swift.String?
        /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineColor: MediaLiveClientTypes.DvbSubDestinationOutlineColor?
        /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineSize: Swift.Int?
        /// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
        public var shadowColor: MediaLiveClientTypes.DvbSubDestinationShadowColor?
        /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var shadowOpacity: Swift.Int?
        /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
        public var shadowXOffset: Swift.Int?
        /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
        public var shadowYOffset: Swift.Int?
        /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
        public var teletextGridControl: MediaLiveClientTypes.DvbSubDestinationTeletextGridControl?
        /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var xPosition: Swift.Int?
        /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var yPosition: Swift.Int?

        public init (
            alignment: MediaLiveClientTypes.DvbSubDestinationAlignment? = nil,
            backgroundColor: MediaLiveClientTypes.DvbSubDestinationBackgroundColor? = nil,
            backgroundOpacity: Swift.Int? = nil,
            font: MediaLiveClientTypes.InputLocation? = nil,
            fontColor: MediaLiveClientTypes.DvbSubDestinationFontColor? = nil,
            fontOpacity: Swift.Int? = nil,
            fontResolution: Swift.Int? = nil,
            fontSize: Swift.String? = nil,
            outlineColor: MediaLiveClientTypes.DvbSubDestinationOutlineColor? = nil,
            outlineSize: Swift.Int? = nil,
            shadowColor: MediaLiveClientTypes.DvbSubDestinationShadowColor? = nil,
            shadowOpacity: Swift.Int? = nil,
            shadowXOffset: Swift.Int? = nil,
            shadowYOffset: Swift.Int? = nil,
            teletextGridControl: MediaLiveClientTypes.DvbSubDestinationTeletextGridControl? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.alignment = alignment
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.font = font
            self.fontColor = fontColor
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontSize = fontSize
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.teletextGridControl = teletextGridControl
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }

}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Shadow Color
    public enum DvbSubDestinationShadowColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationShadowColor] {
            return [
                .black,
                .none,
                .white,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubDestinationShadowColor(rawValue: rawValue) ?? DvbSubDestinationShadowColor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Teletext Grid Control
    public enum DvbSubDestinationTeletextGridControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fixed
        case scaled
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationTeletextGridControl] {
            return [
                .fixed,
                .scaled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .scaled: return "SCALED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubDestinationTeletextGridControl(rawValue: rawValue) ?? DvbSubDestinationTeletextGridControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Ocr Language
    public enum DvbSubOcrLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deu
        case eng
        case fra
        case nld
        case por
        case spa
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubOcrLanguage] {
            return [
                .deu,
                .eng,
                .fra,
                .nld,
                .por,
                .spa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deu: return "DEU"
            case .eng: return "ENG"
            case .fra: return "FRA"
            case .nld: return "NLD"
            case .por: return "POR"
            case .spa: return "SPA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DvbSubOcrLanguage(rawValue: rawValue) ?? DvbSubOcrLanguage.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.DvbSubSourceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ocrLanguage = "ocrLanguage"
        case pid = "pid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ocrLanguage = self.ocrLanguage {
            try encodeContainer.encode(ocrLanguage.rawValue, forKey: .ocrLanguage)
        }
        if let pid = self.pid {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ocrLanguageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubOcrLanguage.self, forKey: .ocrLanguage)
        ocrLanguage = ocrLanguageDecoded
        let pidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Source Settings
    public struct DvbSubSourceSettings: Swift.Equatable {
        /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
        public var ocrLanguage: MediaLiveClientTypes.DvbSubOcrLanguage?
        /// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
        public var pid: Swift.Int?

        public init (
            ocrLanguage: MediaLiveClientTypes.DvbSubOcrLanguage? = nil,
            pid: Swift.Int? = nil
        )
        {
            self.ocrLanguage = ocrLanguage
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes.DvbTdtSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repInterval = "repInterval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let repInterval = self.repInterval {
            try encodeContainer.encode(repInterval, forKey: .repInterval)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .repInterval)
        repInterval = repIntervalDecoded
    }
}

extension MediaLiveClientTypes {
    /// DVB Time and Date Table (SDT)
    public struct DvbTdtSettings: Swift.Equatable {
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var repInterval: Swift.Int?

        public init (
            repInterval: Swift.Int? = nil
        )
        {
            self.repInterval = repInterval
        }
    }

}

extension MediaLiveClientTypes {
    /// Eac3 Atmos Coding Mode
    public enum Eac3AtmosCodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codingMode514
        case codingMode714
        case codingMode916
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosCodingMode] {
            return [
                .codingMode514,
                .codingMode714,
                .codingMode916,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codingMode514: return "CODING_MODE_5_1_4"
            case .codingMode714: return "CODING_MODE_7_1_4"
            case .codingMode916: return "CODING_MODE_9_1_6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3AtmosCodingMode(rawValue: rawValue) ?? Eac3AtmosCodingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Atmos Drc Line
    public enum Eac3AtmosDrcLine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDrcLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3AtmosDrcLine(rawValue: rawValue) ?? Eac3AtmosDrcLine.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Atmos Drc Rf
    public enum Eac3AtmosDrcRf: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDrcRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3AtmosDrcRf(rawValue: rawValue) ?? Eac3AtmosDrcRf.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Eac3AtmosSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case dialnorm = "dialnorm"
        case drcLine = "drcLine"
        case drcRf = "drcRf"
        case heightTrim = "heightTrim"
        case surroundTrim = "surroundTrim"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialnorm = self.dialnorm {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let drcLine = self.drcLine {
            try encodeContainer.encode(drcLine.rawValue, forKey: .drcLine)
        }
        if let drcRf = self.drcRf {
            try encodeContainer.encode(drcRf.rawValue, forKey: .drcRf)
        }
        if let heightTrim = self.heightTrim {
            try encodeContainer.encode(heightTrim, forKey: .heightTrim)
        }
        if let surroundTrim = self.surroundTrim {
            try encodeContainer.encode(surroundTrim, forKey: .surroundTrim)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialnormDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let drcLineDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosDrcLine.self, forKey: .drcLine)
        drcLine = drcLineDecoded
        let drcRfDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosDrcRf.self, forKey: .drcRf)
        drcRf = drcRfDecoded
        let heightTrimDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .heightTrim)
        heightTrim = heightTrimDecoded
        let surroundTrimDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .surroundTrim)
        surroundTrim = surroundTrimDecoded
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Atmos Settings
    public struct Eac3AtmosSettings: Swift.Equatable {
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode. // * @affectsRightSizing true
        public var bitrate: Swift.Double?
        /// Dolby Digital Plus with Dolby Atmos coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Eac3AtmosCodingMode?
        /// Sets the dialnorm for the output. Default 23.
        public var dialnorm: Swift.Int?
        /// Sets the Dolby dynamic range compression profile.
        public var drcLine: MediaLiveClientTypes.Eac3AtmosDrcLine?
        /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
        public var drcRf: MediaLiveClientTypes.Eac3AtmosDrcRf?
        /// Height dimensional trim. Sets the maximum amount to attenuate the height channels when the downstream player isn??t configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
        public var heightTrim: Swift.Double?
        /// Surround dimensional trim. Sets the maximum amount to attenuate the surround channels when the downstream player isn't configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
        public var surroundTrim: Swift.Double?

        public init (
            bitrate: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.Eac3AtmosCodingMode? = nil,
            dialnorm: Swift.Int? = nil,
            drcLine: MediaLiveClientTypes.Eac3AtmosDrcLine? = nil,
            drcRf: MediaLiveClientTypes.Eac3AtmosDrcRf? = nil,
            heightTrim: Swift.Double? = nil,
            surroundTrim: Swift.Double? = nil
        )
        {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.dialnorm = dialnorm
            self.drcLine = drcLine
            self.drcRf = drcRf
            self.heightTrim = heightTrim
            self.surroundTrim = surroundTrim
        }
    }

}

extension MediaLiveClientTypes {
    /// Eac3 Attenuation Control
    public enum Eac3AttenuationControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attenuate3Db
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AttenuationControl] {
            return [
                .attenuate3Db,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attenuate3Db: return "ATTENUATE_3_DB"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3AttenuationControl(rawValue: rawValue) ?? Eac3AttenuationControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Bitstream Mode
    public enum Eac3BitstreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case commentary
        case completeMain
        case emergency
        case hearingImpaired
        case visuallyImpaired
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3BitstreamMode] {
            return [
                .commentary,
                .completeMain,
                .emergency,
                .hearingImpaired,
                .visuallyImpaired,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .commentary: return "COMMENTARY"
            case .completeMain: return "COMPLETE_MAIN"
            case .emergency: return "EMERGENCY"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .visuallyImpaired: return "VISUALLY_IMPAIRED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3BitstreamMode(rawValue: rawValue) ?? Eac3BitstreamMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Coding Mode
    public enum Eac3CodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case codingMode32
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3CodingMode] {
            return [
                .codingMode10,
                .codingMode20,
                .codingMode32,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode32: return "CODING_MODE_3_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3CodingMode(rawValue: rawValue) ?? Eac3CodingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Dc Filter
    public enum Eac3DcFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DcFilter] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3DcFilter(rawValue: rawValue) ?? Eac3DcFilter.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Drc Line
    public enum Eac3DrcLine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DrcLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3DrcLine(rawValue: rawValue) ?? Eac3DrcLine.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Drc Rf
    public enum Eac3DrcRf: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DrcRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3DrcRf(rawValue: rawValue) ?? Eac3DrcRf.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Lfe Control
    public enum Eac3LfeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lfe
        case noLfe
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3LfeControl] {
            return [
                .lfe,
                .noLfe,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lfe: return "LFE"
            case .noLfe: return "NO_LFE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3LfeControl(rawValue: rawValue) ?? Eac3LfeControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Lfe Filter
    public enum Eac3LfeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3LfeFilter] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3LfeFilter(rawValue: rawValue) ?? Eac3LfeFilter.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Metadata Control
    public enum Eac3MetadataControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3MetadataControl] {
            return [
                .followInput,
                .useConfigured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3MetadataControl(rawValue: rawValue) ?? Eac3MetadataControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Passthrough Control
    public enum Eac3PassthroughControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case whenPossible
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3PassthroughControl] {
            return [
                .noPassthrough,
                .whenPossible,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .whenPossible: return "WHEN_POSSIBLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3PassthroughControl(rawValue: rawValue) ?? Eac3PassthroughControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Phase Control
    public enum Eac3PhaseControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noShift
        case shift90Degrees
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3PhaseControl] {
            return [
                .noShift,
                .shift90Degrees,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noShift: return "NO_SHIFT"
            case .shift90Degrees: return "SHIFT_90_DEGREES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3PhaseControl(rawValue: rawValue) ?? Eac3PhaseControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Eac3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attenuationControl = "attenuationControl"
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dcFilter = "dcFilter"
        case dialnorm = "dialnorm"
        case drcLine = "drcLine"
        case drcRf = "drcRf"
        case lfeControl = "lfeControl"
        case lfeFilter = "lfeFilter"
        case loRoCenterMixLevel = "loRoCenterMixLevel"
        case loRoSurroundMixLevel = "loRoSurroundMixLevel"
        case ltRtCenterMixLevel = "ltRtCenterMixLevel"
        case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
        case metadataControl = "metadataControl"
        case passthroughControl = "passthroughControl"
        case phaseControl = "phaseControl"
        case stereoDownmix = "stereoDownmix"
        case surroundExMode = "surroundExMode"
        case surroundMode = "surroundMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attenuationControl = self.attenuationControl {
            try encodeContainer.encode(attenuationControl.rawValue, forKey: .attenuationControl)
        }
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = self.bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dcFilter = self.dcFilter {
            try encodeContainer.encode(dcFilter.rawValue, forKey: .dcFilter)
        }
        if let dialnorm = self.dialnorm {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let drcLine = self.drcLine {
            try encodeContainer.encode(drcLine.rawValue, forKey: .drcLine)
        }
        if let drcRf = self.drcRf {
            try encodeContainer.encode(drcRf.rawValue, forKey: .drcRf)
        }
        if let lfeControl = self.lfeControl {
            try encodeContainer.encode(lfeControl.rawValue, forKey: .lfeControl)
        }
        if let lfeFilter = self.lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if let loRoCenterMixLevel = self.loRoCenterMixLevel {
            try encodeContainer.encode(loRoCenterMixLevel, forKey: .loRoCenterMixLevel)
        }
        if let loRoSurroundMixLevel = self.loRoSurroundMixLevel {
            try encodeContainer.encode(loRoSurroundMixLevel, forKey: .loRoSurroundMixLevel)
        }
        if let ltRtCenterMixLevel = self.ltRtCenterMixLevel {
            try encodeContainer.encode(ltRtCenterMixLevel, forKey: .ltRtCenterMixLevel)
        }
        if let ltRtSurroundMixLevel = self.ltRtSurroundMixLevel {
            try encodeContainer.encode(ltRtSurroundMixLevel, forKey: .ltRtSurroundMixLevel)
        }
        if let metadataControl = self.metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
        if let passthroughControl = self.passthroughControl {
            try encodeContainer.encode(passthroughControl.rawValue, forKey: .passthroughControl)
        }
        if let phaseControl = self.phaseControl {
            try encodeContainer.encode(phaseControl.rawValue, forKey: .phaseControl)
        }
        if let stereoDownmix = self.stereoDownmix {
            try encodeContainer.encode(stereoDownmix.rawValue, forKey: .stereoDownmix)
        }
        if let surroundExMode = self.surroundExMode {
            try encodeContainer.encode(surroundExMode.rawValue, forKey: .surroundExMode)
        }
        if let surroundMode = self.surroundMode {
            try encodeContainer.encode(surroundMode.rawValue, forKey: .surroundMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attenuationControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AttenuationControl.self, forKey: .attenuationControl)
        attenuationControl = attenuationControlDecoded
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dcFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3DcFilter.self, forKey: .dcFilter)
        dcFilter = dcFilterDecoded
        let dialnormDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let drcLineDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3DrcLine.self, forKey: .drcLine)
        drcLine = drcLineDecoded
        let drcRfDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3DrcRf.self, forKey: .drcRf)
        drcRf = drcRfDecoded
        let lfeControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3LfeControl.self, forKey: .lfeControl)
        lfeControl = lfeControlDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let loRoCenterMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .loRoCenterMixLevel)
        loRoCenterMixLevel = loRoCenterMixLevelDecoded
        let loRoSurroundMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .loRoSurroundMixLevel)
        loRoSurroundMixLevel = loRoSurroundMixLevelDecoded
        let ltRtCenterMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .ltRtCenterMixLevel)
        ltRtCenterMixLevel = ltRtCenterMixLevelDecoded
        let ltRtSurroundMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .ltRtSurroundMixLevel)
        ltRtSurroundMixLevel = ltRtSurroundMixLevelDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
        let passthroughControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3PassthroughControl.self, forKey: .passthroughControl)
        passthroughControl = passthroughControlDecoded
        let phaseControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3PhaseControl.self, forKey: .phaseControl)
        phaseControl = phaseControlDecoded
        let stereoDownmixDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3StereoDownmix.self, forKey: .stereoDownmix)
        stereoDownmix = stereoDownmixDecoded
        let surroundExModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3SurroundExMode.self, forKey: .surroundExMode)
        surroundExMode = surroundExModeDecoded
        let surroundModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3SurroundMode.self, forKey: .surroundMode)
        surroundMode = surroundModeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Settings
    public struct Eac3Settings: Swift.Equatable {
        /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
        public var attenuationControl: MediaLiveClientTypes.Eac3AttenuationControl?
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Double?
        /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
        public var bitstreamMode: MediaLiveClientTypes.Eac3BitstreamMode?
        /// Dolby Digital Plus coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Eac3CodingMode?
        /// When set to enabled, activates a DC highpass filter for all input channels.
        public var dcFilter: MediaLiveClientTypes.Eac3DcFilter?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// Sets the Dolby dynamic range compression profile.
        public var drcLine: MediaLiveClientTypes.Eac3DrcLine?
        /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
        public var drcRf: MediaLiveClientTypes.Eac3DrcRf?
        /// When encoding 3/2 audio, setting to lfe enables the LFE channel
        public var lfeControl: MediaLiveClientTypes.Eac3LfeControl?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
        public var lfeFilter: MediaLiveClientTypes.Eac3LfeFilter?
        /// Left only/Right only center mix level. Only used for 3/2 coding mode.
        public var loRoCenterMixLevel: Swift.Double?
        /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
        public var loRoSurroundMixLevel: Swift.Double?
        /// Left total/Right total center mix level. Only used for 3/2 coding mode.
        public var ltRtCenterMixLevel: Swift.Double?
        /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
        public var ltRtSurroundMixLevel: Swift.Double?
        /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaLiveClientTypes.Eac3MetadataControl?
        /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
        public var passthroughControl: MediaLiveClientTypes.Eac3PassthroughControl?
        /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
        public var phaseControl: MediaLiveClientTypes.Eac3PhaseControl?
        /// Stereo downmix preference. Only used for 3/2 coding mode.
        public var stereoDownmix: MediaLiveClientTypes.Eac3StereoDownmix?
        /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
        public var surroundExMode: MediaLiveClientTypes.Eac3SurroundExMode?
        /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
        public var surroundMode: MediaLiveClientTypes.Eac3SurroundMode?

        public init (
            attenuationControl: MediaLiveClientTypes.Eac3AttenuationControl? = nil,
            bitrate: Swift.Double? = nil,
            bitstreamMode: MediaLiveClientTypes.Eac3BitstreamMode? = nil,
            codingMode: MediaLiveClientTypes.Eac3CodingMode? = nil,
            dcFilter: MediaLiveClientTypes.Eac3DcFilter? = nil,
            dialnorm: Swift.Int? = nil,
            drcLine: MediaLiveClientTypes.Eac3DrcLine? = nil,
            drcRf: MediaLiveClientTypes.Eac3DrcRf? = nil,
            lfeControl: MediaLiveClientTypes.Eac3LfeControl? = nil,
            lfeFilter: MediaLiveClientTypes.Eac3LfeFilter? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            metadataControl: MediaLiveClientTypes.Eac3MetadataControl? = nil,
            passthroughControl: MediaLiveClientTypes.Eac3PassthroughControl? = nil,
            phaseControl: MediaLiveClientTypes.Eac3PhaseControl? = nil,
            stereoDownmix: MediaLiveClientTypes.Eac3StereoDownmix? = nil,
            surroundExMode: MediaLiveClientTypes.Eac3SurroundExMode? = nil,
            surroundMode: MediaLiveClientTypes.Eac3SurroundMode? = nil
        )
        {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dcFilter = dcFilter
            self.dialnorm = dialnorm
            self.drcLine = drcLine
            self.drcRf = drcRf
            self.lfeControl = lfeControl
            self.lfeFilter = lfeFilter
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.metadataControl = metadataControl
            self.passthroughControl = passthroughControl
            self.phaseControl = phaseControl
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
            self.surroundMode = surroundMode
        }
    }

}

extension MediaLiveClientTypes {
    /// Eac3 Stereo Downmix
    public enum Eac3StereoDownmix: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dpl2
        case loRo
        case ltRt
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3StereoDownmix] {
            return [
                .dpl2,
                .loRo,
                .ltRt,
                .notIndicated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dpl2: return "DPL2"
            case .loRo: return "LO_RO"
            case .ltRt: return "LT_RT"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3StereoDownmix(rawValue: rawValue) ?? Eac3StereoDownmix.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Surround Ex Mode
    public enum Eac3SurroundExMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3SurroundExMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3SurroundExMode(rawValue: rawValue) ?? Eac3SurroundExMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Surround Mode
    public enum Eac3SurroundMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3SurroundMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3SurroundMode(rawValue: rawValue) ?? Eac3SurroundMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.EbuTtDDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyrightHolder = "copyrightHolder"
        case fillLineGap = "fillLineGap"
        case fontFamily = "fontFamily"
        case styleControl = "styleControl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyrightHolder = self.copyrightHolder {
            try encodeContainer.encode(copyrightHolder, forKey: .copyrightHolder)
        }
        if let fillLineGap = self.fillLineGap {
            try encodeContainer.encode(fillLineGap.rawValue, forKey: .fillLineGap)
        }
        if let fontFamily = self.fontFamily {
            try encodeContainer.encode(fontFamily, forKey: .fontFamily)
        }
        if let styleControl = self.styleControl {
            try encodeContainer.encode(styleControl.rawValue, forKey: .styleControl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyrightHolderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .copyrightHolder)
        copyrightHolder = copyrightHolderDecoded
        let fillLineGapDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EbuTtDFillLineGapControl.self, forKey: .fillLineGap)
        fillLineGap = fillLineGapDecoded
        let fontFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fontFamily)
        fontFamily = fontFamilyDecoded
        let styleControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EbuTtDDestinationStyleControl.self, forKey: .styleControl)
        styleControl = styleControlDecoded
    }
}

extension MediaLiveClientTypes {
    /// Ebu Tt DDestination Settings
    public struct EbuTtDDestinationSettings: Swift.Equatable {
        /// Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
        public var copyrightHolder: Swift.String?
        /// Specifies how to handle the gap between the lines (in multi-line captions).
        ///
        /// * enabled: Fill with the captions background color (as specified in the input captions).
        ///
        /// * disabled: Leave the gap unfilled.
        public var fillLineGap: MediaLiveClientTypes.EbuTtDFillLineGapControl?
        /// Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size.
        ///
        /// * Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font).
        ///
        /// * Leave blank to set the family to “monospace”.
        public var fontFamily: Swift.String?
        /// Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions.
        ///
        /// * include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext.
        ///
        /// * exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
        public var styleControl: MediaLiveClientTypes.EbuTtDDestinationStyleControl?

        public init (
            copyrightHolder: Swift.String? = nil,
            fillLineGap: MediaLiveClientTypes.EbuTtDFillLineGapControl? = nil,
            fontFamily: Swift.String? = nil,
            styleControl: MediaLiveClientTypes.EbuTtDDestinationStyleControl? = nil
        )
        {
            self.copyrightHolder = copyrightHolder
            self.fillLineGap = fillLineGap
            self.fontFamily = fontFamily
            self.styleControl = styleControl
        }
    }

}

extension MediaLiveClientTypes {
    /// Ebu Tt DDestination Style Control
    public enum EbuTtDDestinationStyleControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [EbuTtDDestinationStyleControl] {
            return [
                .exclude,
                .include,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EbuTtDDestinationStyleControl(rawValue: rawValue) ?? EbuTtDDestinationStyleControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Ebu Tt DFill Line Gap Control
    public enum EbuTtDFillLineGapControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EbuTtDFillLineGapControl] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EbuTtDFillLineGapControl(rawValue: rawValue) ?? EbuTtDFillLineGapControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Embedded Convert608 To708
    public enum EmbeddedConvert608To708: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedConvert608To708] {
            return [
                .disabled,
                .upconvert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EmbeddedConvert608To708(rawValue: rawValue) ?? EmbeddedConvert608To708.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.EmbeddedDestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Embedded Destination Settings
    public struct EmbeddedDestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Embedded Plus Scte20 Destination Settings
    public struct EmbeddedPlusScte20DestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes {
    /// Embedded Scte20 Detection
    public enum EmbeddedScte20Detection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedScte20Detection] {
            return [
                .auto,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EmbeddedScte20Detection(rawValue: rawValue) ?? EmbeddedScte20Detection.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.EmbeddedSourceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case convert608To708 = "convert608To708"
        case scte20Detection = "scte20Detection"
        case source608ChannelNumber = "source608ChannelNumber"
        case source608TrackNumber = "source608TrackNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = self.convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if let scte20Detection = self.scte20Detection {
            try encodeContainer.encode(scte20Detection.rawValue, forKey: .scte20Detection)
        }
        if let source608ChannelNumber = self.source608ChannelNumber {
            try encodeContainer.encode(source608ChannelNumber, forKey: .source608ChannelNumber)
        }
        if let source608TrackNumber = self.source608TrackNumber {
            try encodeContainer.encode(source608TrackNumber, forKey: .source608TrackNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EmbeddedConvert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let scte20DetectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EmbeddedScte20Detection.self, forKey: .scte20Detection)
        scte20Detection = scte20DetectionDecoded
        let source608ChannelNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .source608ChannelNumber)
        source608ChannelNumber = source608ChannelNumberDecoded
        let source608TrackNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .source608TrackNumber)
        source608TrackNumber = source608TrackNumberDecoded
    }
}

extension MediaLiveClientTypes {
    /// Embedded Source Settings
    public struct EmbeddedSourceSettings: Swift.Equatable {
        /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
        public var convert608To708: MediaLiveClientTypes.EmbeddedConvert608To708?
        /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
        public var scte20Detection: MediaLiveClientTypes.EmbeddedScte20Detection?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public var source608ChannelNumber: Swift.Int?
        /// This field is unused and deprecated.
        public var source608TrackNumber: Swift.Int?

        public init (
            convert608To708: MediaLiveClientTypes.EmbeddedConvert608To708? = nil,
            scte20Detection: MediaLiveClientTypes.EmbeddedScte20Detection? = nil,
            source608ChannelNumber: Swift.Int? = nil,
            source608TrackNumber: Swift.Int? = nil
        )
        {
            self.convert608To708 = convert608To708
            self.scte20Detection = scte20Detection
            self.source608ChannelNumber = source608ChannelNumber
            self.source608TrackNumber = source608TrackNumber
        }
    }

}

extension MediaLiveClientTypes.EncoderSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioDescriptions = "audioDescriptions"
        case availBlanking = "availBlanking"
        case availConfiguration = "availConfiguration"
        case blackoutSlate = "blackoutSlate"
        case captionDescriptions = "captionDescriptions"
        case featureActivations = "featureActivations"
        case globalConfiguration = "globalConfiguration"
        case motionGraphicsConfiguration = "motionGraphicsConfiguration"
        case nielsenConfiguration = "nielsenConfiguration"
        case outputGroups = "outputGroups"
        case timecodeConfig = "timecodeConfig"
        case videoDescriptions = "videoDescriptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptions = audioDescriptions {
            var audioDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptions)
            for audiodescription0 in audioDescriptions {
                try audioDescriptionsContainer.encode(audiodescription0)
            }
        }
        if let availBlanking = self.availBlanking {
            try encodeContainer.encode(availBlanking, forKey: .availBlanking)
        }
        if let availConfiguration = self.availConfiguration {
            try encodeContainer.encode(availConfiguration, forKey: .availConfiguration)
        }
        if let blackoutSlate = self.blackoutSlate {
            try encodeContainer.encode(blackoutSlate, forKey: .blackoutSlate)
        }
        if let captionDescriptions = captionDescriptions {
            var captionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptions)
            for captiondescription0 in captionDescriptions {
                try captionDescriptionsContainer.encode(captiondescription0)
            }
        }
        if let featureActivations = self.featureActivations {
            try encodeContainer.encode(featureActivations, forKey: .featureActivations)
        }
        if let globalConfiguration = self.globalConfiguration {
            try encodeContainer.encode(globalConfiguration, forKey: .globalConfiguration)
        }
        if let motionGraphicsConfiguration = self.motionGraphicsConfiguration {
            try encodeContainer.encode(motionGraphicsConfiguration, forKey: .motionGraphicsConfiguration)
        }
        if let nielsenConfiguration = self.nielsenConfiguration {
            try encodeContainer.encode(nielsenConfiguration, forKey: .nielsenConfiguration)
        }
        if let outputGroups = outputGroups {
            var outputGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroups)
            for outputgroup0 in outputGroups {
                try outputGroupsContainer.encode(outputgroup0)
            }
        }
        if let timecodeConfig = self.timecodeConfig {
            try encodeContainer.encode(timecodeConfig, forKey: .timecodeConfig)
        }
        if let videoDescriptions = videoDescriptions {
            var videoDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .videoDescriptions)
            for videodescription0 in videoDescriptions {
                try videoDescriptionsContainer.encode(videodescription0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.AudioDescription?].self, forKey: .audioDescriptions)
        var audioDescriptionsDecoded0:[MediaLiveClientTypes.AudioDescription]? = nil
        if let audioDescriptionsContainer = audioDescriptionsContainer {
            audioDescriptionsDecoded0 = [MediaLiveClientTypes.AudioDescription]()
            for structure0 in audioDescriptionsContainer {
                if let structure0 = structure0 {
                    audioDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        audioDescriptions = audioDescriptionsDecoded0
        let availBlankingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AvailBlanking.self, forKey: .availBlanking)
        availBlanking = availBlankingDecoded
        let availConfigurationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AvailConfiguration.self, forKey: .availConfiguration)
        availConfiguration = availConfigurationDecoded
        let blackoutSlateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.BlackoutSlate.self, forKey: .blackoutSlate)
        blackoutSlate = blackoutSlateDecoded
        let captionDescriptionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.CaptionDescription?].self, forKey: .captionDescriptions)
        var captionDescriptionsDecoded0:[MediaLiveClientTypes.CaptionDescription]? = nil
        if let captionDescriptionsContainer = captionDescriptionsContainer {
            captionDescriptionsDecoded0 = [MediaLiveClientTypes.CaptionDescription]()
            for structure0 in captionDescriptionsContainer {
                if let structure0 = structure0 {
                    captionDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        captionDescriptions = captionDescriptionsDecoded0
        let featureActivationsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FeatureActivations.self, forKey: .featureActivations)
        featureActivations = featureActivationsDecoded
        let globalConfigurationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfiguration.self, forKey: .globalConfiguration)
        globalConfiguration = globalConfigurationDecoded
        let motionGraphicsConfigurationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsConfiguration.self, forKey: .motionGraphicsConfiguration)
        motionGraphicsConfiguration = motionGraphicsConfigurationDecoded
        let nielsenConfigurationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenConfiguration.self, forKey: .nielsenConfiguration)
        nielsenConfiguration = nielsenConfigurationDecoded
        let outputGroupsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputGroup?].self, forKey: .outputGroups)
        var outputGroupsDecoded0:[MediaLiveClientTypes.OutputGroup]? = nil
        if let outputGroupsContainer = outputGroupsContainer {
            outputGroupsDecoded0 = [MediaLiveClientTypes.OutputGroup]()
            for structure0 in outputGroupsContainer {
                if let structure0 = structure0 {
                    outputGroupsDecoded0?.append(structure0)
                }
            }
        }
        outputGroups = outputGroupsDecoded0
        let timecodeConfigDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeConfig.self, forKey: .timecodeConfig)
        timecodeConfig = timecodeConfigDecoded
        let videoDescriptionsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.VideoDescription?].self, forKey: .videoDescriptions)
        var videoDescriptionsDecoded0:[MediaLiveClientTypes.VideoDescription]? = nil
        if let videoDescriptionsContainer = videoDescriptionsContainer {
            videoDescriptionsDecoded0 = [MediaLiveClientTypes.VideoDescription]()
            for structure0 in videoDescriptionsContainer {
                if let structure0 = structure0 {
                    videoDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        videoDescriptions = videoDescriptionsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Encoder Settings
    public struct EncoderSettings: Swift.Equatable {
        /// Placeholder documentation for __listOfAudioDescription
        /// This member is required.
        public var audioDescriptions: [MediaLiveClientTypes.AudioDescription]?
        /// Settings for ad avail blanking.
        public var availBlanking: MediaLiveClientTypes.AvailBlanking?
        /// Event-wide configuration settings for ad avail insertion.
        public var availConfiguration: MediaLiveClientTypes.AvailConfiguration?
        /// Settings for blackout slate.
        public var blackoutSlate: MediaLiveClientTypes.BlackoutSlate?
        /// Settings for caption decriptions
        public var captionDescriptions: [MediaLiveClientTypes.CaptionDescription]?
        /// Feature Activations
        public var featureActivations: MediaLiveClientTypes.FeatureActivations?
        /// Configuration settings that apply to the event as a whole.
        public var globalConfiguration: MediaLiveClientTypes.GlobalConfiguration?
        /// Settings for motion graphics.
        public var motionGraphicsConfiguration: MediaLiveClientTypes.MotionGraphicsConfiguration?
        /// Nielsen configuration settings.
        public var nielsenConfiguration: MediaLiveClientTypes.NielsenConfiguration?
        /// Placeholder documentation for __listOfOutputGroup
        /// This member is required.
        public var outputGroups: [MediaLiveClientTypes.OutputGroup]?
        /// Contains settings used to acquire and adjust timecode information from inputs.
        /// This member is required.
        public var timecodeConfig: MediaLiveClientTypes.TimecodeConfig?
        /// Placeholder documentation for __listOfVideoDescription
        /// This member is required.
        public var videoDescriptions: [MediaLiveClientTypes.VideoDescription]?

        public init (
            audioDescriptions: [MediaLiveClientTypes.AudioDescription]? = nil,
            availBlanking: MediaLiveClientTypes.AvailBlanking? = nil,
            availConfiguration: MediaLiveClientTypes.AvailConfiguration? = nil,
            blackoutSlate: MediaLiveClientTypes.BlackoutSlate? = nil,
            captionDescriptions: [MediaLiveClientTypes.CaptionDescription]? = nil,
            featureActivations: MediaLiveClientTypes.FeatureActivations? = nil,
            globalConfiguration: MediaLiveClientTypes.GlobalConfiguration? = nil,
            motionGraphicsConfiguration: MediaLiveClientTypes.MotionGraphicsConfiguration? = nil,
            nielsenConfiguration: MediaLiveClientTypes.NielsenConfiguration? = nil,
            outputGroups: [MediaLiveClientTypes.OutputGroup]? = nil,
            timecodeConfig: MediaLiveClientTypes.TimecodeConfig? = nil,
            videoDescriptions: [MediaLiveClientTypes.VideoDescription]? = nil
        )
        {
            self.audioDescriptions = audioDescriptions
            self.availBlanking = availBlanking
            self.availConfiguration = availConfiguration
            self.blackoutSlate = blackoutSlate
            self.captionDescriptions = captionDescriptions
            self.featureActivations = featureActivations
            self.globalConfiguration = globalConfiguration
            self.motionGraphicsConfiguration = motionGraphicsConfiguration
            self.nielsenConfiguration = nielsenConfiguration
            self.outputGroups = outputGroups
            self.timecodeConfig = timecodeConfig
            self.videoDescriptions = videoDescriptions
        }
    }

}

extension MediaLiveClientTypes.Esam: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acquisitionPointId = "acquisitionPointId"
        case adAvailOffset = "adAvailOffset"
        case passwordParam = "passwordParam"
        case poisEndpoint = "poisEndpoint"
        case username = "username"
        case zoneIdentity = "zoneIdentity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acquisitionPointId = self.acquisitionPointId {
            try encodeContainer.encode(acquisitionPointId, forKey: .acquisitionPointId)
        }
        if let adAvailOffset = self.adAvailOffset {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let passwordParam = self.passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let poisEndpoint = self.poisEndpoint {
            try encodeContainer.encode(poisEndpoint, forKey: .poisEndpoint)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
        if let zoneIdentity = self.zoneIdentity {
            try encodeContainer.encode(zoneIdentity, forKey: .zoneIdentity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acquisitionPointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acquisitionPointId)
        acquisitionPointId = acquisitionPointIdDecoded
        let adAvailOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let passwordParamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let poisEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poisEndpoint)
        poisEndpoint = poisEndpointDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let zoneIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneIdentity)
        zoneIdentity = zoneIdentityDecoded
    }
}

extension MediaLiveClientTypes {
    /// Esam
    public struct Esam: Swift.Equatable {
        /// Sent as acquisitionPointIdentity to identify the MediaLive channel to the POIS.
        /// This member is required.
        public var acquisitionPointId: Swift.String?
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public var adAvailOffset: Swift.Int?
        /// Documentation update needed
        public var passwordParam: Swift.String?
        /// The URL of the signal conditioner endpoint on the Placement Opportunity Information System (POIS). MediaLive sends SignalProcessingEvents here when SCTE-35 messages are read.
        /// This member is required.
        public var poisEndpoint: Swift.String?
        /// Documentation update needed
        public var username: Swift.String?
        /// Optional data sent as zoneIdentity to identify the MediaLive channel to the POIS.
        public var zoneIdentity: Swift.String?

        public init (
            acquisitionPointId: Swift.String? = nil,
            adAvailOffset: Swift.Int? = nil,
            passwordParam: Swift.String? = nil,
            poisEndpoint: Swift.String? = nil,
            username: Swift.String? = nil,
            zoneIdentity: Swift.String? = nil
        )
        {
            self.acquisitionPointId = acquisitionPointId
            self.adAvailOffset = adAvailOffset
            self.passwordParam = passwordParam
            self.poisEndpoint = poisEndpoint
            self.username = username
            self.zoneIdentity = zoneIdentity
        }
    }

}

extension MediaLiveClientTypes.FailoverCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failoverConditionSettings = "failoverConditionSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failoverConditionSettings = self.failoverConditionSettings {
            try encodeContainer.encode(failoverConditionSettings, forKey: .failoverConditionSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failoverConditionSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FailoverConditionSettings.self, forKey: .failoverConditionSettings)
        failoverConditionSettings = failoverConditionSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
    public struct FailoverCondition: Swift.Equatable {
        /// Failover condition type-specific settings.
        public var failoverConditionSettings: MediaLiveClientTypes.FailoverConditionSettings?

        public init (
            failoverConditionSettings: MediaLiveClientTypes.FailoverConditionSettings? = nil
        )
        {
            self.failoverConditionSettings = failoverConditionSettings
        }
    }

}

extension MediaLiveClientTypes.FailoverConditionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioSilenceSettings = "audioSilenceSettings"
        case inputLossSettings = "inputLossSettings"
        case videoBlackSettings = "videoBlackSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSilenceSettings = self.audioSilenceSettings {
            try encodeContainer.encode(audioSilenceSettings, forKey: .audioSilenceSettings)
        }
        if let inputLossSettings = self.inputLossSettings {
            try encodeContainer.encode(inputLossSettings, forKey: .inputLossSettings)
        }
        if let videoBlackSettings = self.videoBlackSettings {
            try encodeContainer.encode(videoBlackSettings, forKey: .videoBlackSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSilenceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioSilenceFailoverSettings.self, forKey: .audioSilenceSettings)
        audioSilenceSettings = audioSilenceSettingsDecoded
        let inputLossSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossFailoverSettings.self, forKey: .inputLossSettings)
        inputLossSettings = inputLossSettingsDecoded
        let videoBlackSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoBlackFailoverSettings.self, forKey: .videoBlackSettings)
        videoBlackSettings = videoBlackSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for one failover condition.
    public struct FailoverConditionSettings: Swift.Equatable {
        /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
        public var audioSilenceSettings: MediaLiveClientTypes.AudioSilenceFailoverSettings?
        /// MediaLive will perform a failover if content is not detected in this input for the specified period.
        public var inputLossSettings: MediaLiveClientTypes.InputLossFailoverSettings?
        /// MediaLive will perform a failover if content is considered black for the specified period.
        public var videoBlackSettings: MediaLiveClientTypes.VideoBlackFailoverSettings?

        public init (
            audioSilenceSettings: MediaLiveClientTypes.AudioSilenceFailoverSettings? = nil,
            inputLossSettings: MediaLiveClientTypes.InputLossFailoverSettings? = nil,
            videoBlackSettings: MediaLiveClientTypes.VideoBlackFailoverSettings? = nil
        )
        {
            self.audioSilenceSettings = audioSilenceSettings
            self.inputLossSettings = inputLossSettings
            self.videoBlackSettings = videoBlackSettings
        }
    }

}

extension MediaLiveClientTypes.FeatureActivations: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputPrepareScheduleActions = "inputPrepareScheduleActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputPrepareScheduleActions = self.inputPrepareScheduleActions {
            try encodeContainer.encode(inputPrepareScheduleActions.rawValue, forKey: .inputPrepareScheduleActions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputPrepareScheduleActionsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FeatureActivationsInputPrepareScheduleActions.self, forKey: .inputPrepareScheduleActions)
        inputPrepareScheduleActions = inputPrepareScheduleActionsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Feature Activations
    public struct FeatureActivations: Swift.Equatable {
        /// Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
        public var inputPrepareScheduleActions: MediaLiveClientTypes.FeatureActivationsInputPrepareScheduleActions?

        public init (
            inputPrepareScheduleActions: MediaLiveClientTypes.FeatureActivationsInputPrepareScheduleActions? = nil
        )
        {
            self.inputPrepareScheduleActions = inputPrepareScheduleActions
        }
    }

}

extension MediaLiveClientTypes {
    /// Feature Activations Input Prepare Schedule Actions
    public enum FeatureActivationsInputPrepareScheduleActions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureActivationsInputPrepareScheduleActions] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureActivationsInputPrepareScheduleActions(rawValue: rawValue) ?? FeatureActivationsInputPrepareScheduleActions.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Fec Output Include Fec
    public enum FecOutputIncludeFec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case column
        case columnAndRow
        case sdkUnknown(Swift.String)

        public static var allCases: [FecOutputIncludeFec] {
            return [
                .column,
                .columnAndRow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .column: return "COLUMN"
            case .columnAndRow: return "COLUMN_AND_ROW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FecOutputIncludeFec(rawValue: rawValue) ?? FecOutputIncludeFec.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.FecOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnDepth = "columnDepth"
        case includeFec = "includeFec"
        case rowLength = "rowLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnDepth = self.columnDepth {
            try encodeContainer.encode(columnDepth, forKey: .columnDepth)
        }
        if let includeFec = self.includeFec {
            try encodeContainer.encode(includeFec.rawValue, forKey: .includeFec)
        }
        if let rowLength = self.rowLength {
            try encodeContainer.encode(rowLength, forKey: .rowLength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnDepthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .columnDepth)
        columnDepth = columnDepthDecoded
        let includeFecDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FecOutputIncludeFec.self, forKey: .includeFec)
        includeFec = includeFecDecoded
        let rowLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rowLength)
        rowLength = rowLengthDecoded
    }
}

extension MediaLiveClientTypes {
    /// Fec Output Settings
    public struct FecOutputSettings: Swift.Equatable {
        /// Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
        public var columnDepth: Swift.Int?
        /// Enables column only or column and row based FEC
        public var includeFec: MediaLiveClientTypes.FecOutputIncludeFec?
        /// Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
        public var rowLength: Swift.Int?

        public init (
            columnDepth: Swift.Int? = nil,
            includeFec: MediaLiveClientTypes.FecOutputIncludeFec? = nil,
            rowLength: Swift.Int? = nil
        )
        {
            self.columnDepth = columnDepth
            self.includeFec = includeFec
            self.rowLength = rowLength
        }
    }

}

extension MediaLiveClientTypes {
    /// Fixed Afd
    public enum FixedAfd: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afd0000
        case afd0010
        case afd0011
        case afd0100
        case afd1000
        case afd1001
        case afd1010
        case afd1011
        case afd1101
        case afd1110
        case afd1111
        case sdkUnknown(Swift.String)

        public static var allCases: [FixedAfd] {
            return [
                .afd0000,
                .afd0010,
                .afd0011,
                .afd0100,
                .afd1000,
                .afd1001,
                .afd1010,
                .afd1011,
                .afd1101,
                .afd1110,
                .afd1111,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afd0000: return "AFD_0000"
            case .afd0010: return "AFD_0010"
            case .afd0011: return "AFD_0011"
            case .afd0100: return "AFD_0100"
            case .afd1000: return "AFD_1000"
            case .afd1001: return "AFD_1001"
            case .afd1010: return "AFD_1010"
            case .afd1011: return "AFD_1011"
            case .afd1101: return "AFD_1101"
            case .afd1110: return "AFD_1110"
            case .afd1111: return "AFD_1111"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FixedAfd(rawValue: rawValue) ?? FixedAfd.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.FixedModeScheduleActionStartSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case time = "time"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let time = self.time {
            try encodeContainer.encode(time, forKey: .time)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .time)
        time = timeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Start time for the action.
    public struct FixedModeScheduleActionStartSettings: Swift.Equatable {
        /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
        /// This member is required.
        public var time: Swift.String?

        public init (
            time: Swift.String? = nil
        )
        {
            self.time = time
        }
    }

}

extension MediaLiveClientTypes.Fmp4HlsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioRenditionSets = "audioRenditionSets"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case timedMetadataBehavior = "timedMetadataBehavior"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioRenditionSets = self.audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let nielsenId3Behavior = self.nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if let timedMetadataBehavior = self.timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Fmp4NielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Fmp4TimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
    }
}

extension MediaLiveClientTypes {
    /// Fmp4 Hls Settings
    public struct Fmp4HlsSettings: Swift.Equatable {
        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public var audioRenditionSets: Swift.String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.Fmp4NielsenId3Behavior?
        /// When set to passthrough, timed metadata is passed through from input to output.
        public var timedMetadataBehavior: MediaLiveClientTypes.Fmp4TimedMetadataBehavior?

        public init (
            audioRenditionSets: Swift.String? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.Fmp4NielsenId3Behavior? = nil,
            timedMetadataBehavior: MediaLiveClientTypes.Fmp4TimedMetadataBehavior? = nil
        )
        {
            self.audioRenditionSets = audioRenditionSets
            self.nielsenId3Behavior = nielsenId3Behavior
            self.timedMetadataBehavior = timedMetadataBehavior
        }
    }

}

extension MediaLiveClientTypes {
    /// Fmp4 Nielsen Id3 Behavior
    public enum Fmp4NielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [Fmp4NielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Fmp4NielsenId3Behavior(rawValue: rawValue) ?? Fmp4NielsenId3Behavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Fmp4 Timed Metadata Behavior
    public enum Fmp4TimedMetadataBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [Fmp4TimedMetadataBehavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Fmp4TimedMetadataBehavior(rawValue: rawValue) ?? Fmp4TimedMetadataBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.FollowModeScheduleActionStartSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case followPoint = "followPoint"
        case referenceActionName = "referenceActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let followPoint = self.followPoint {
            try encodeContainer.encode(followPoint.rawValue, forKey: .followPoint)
        }
        if let referenceActionName = self.referenceActionName {
            try encodeContainer.encode(referenceActionName, forKey: .referenceActionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let followPointDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FollowPoint.self, forKey: .followPoint)
        followPoint = followPointDecoded
        let referenceActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceActionName)
        referenceActionName = referenceActionNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings to specify if an action follows another.
    public struct FollowModeScheduleActionStartSettings: Swift.Equatable {
        /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
        /// This member is required.
        public var followPoint: MediaLiveClientTypes.FollowPoint?
        /// The action name of another action that this one refers to.
        /// This member is required.
        public var referenceActionName: Swift.String?

        public init (
            followPoint: MediaLiveClientTypes.FollowPoint? = nil,
            referenceActionName: Swift.String? = nil
        )
        {
            self.followPoint = followPoint
            self.referenceActionName = referenceActionName
        }
    }

}

extension MediaLiveClientTypes {
    /// Follow reference point.
    public enum FollowPoint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case end
        case start
        case sdkUnknown(Swift.String)

        public static var allCases: [FollowPoint] {
            return [
                .end,
                .start,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .end: return "END"
            case .start: return "START"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FollowPoint(rawValue: rawValue) ?? FollowPoint.sdkUnknown(rawValue)
        }
    }
}

extension ForbiddenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for ForbiddenException
public struct ForbiddenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ForbiddenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ForbiddenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaLiveClientTypes.FrameCaptureCdnSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case frameCaptureS3Settings = "frameCaptureS3Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameCaptureS3Settings = self.frameCaptureS3Settings {
            try encodeContainer.encode(frameCaptureS3Settings, forKey: .frameCaptureS3Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frameCaptureS3SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureS3Settings.self, forKey: .frameCaptureS3Settings)
        frameCaptureS3Settings = frameCaptureS3SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture Cdn Settings
    public struct FrameCaptureCdnSettings: Swift.Equatable {
        /// Frame Capture S3 Settings
        public var frameCaptureS3Settings: MediaLiveClientTypes.FrameCaptureS3Settings?

        public init (
            frameCaptureS3Settings: MediaLiveClientTypes.FrameCaptureS3Settings? = nil
        )
        {
            self.frameCaptureS3Settings = frameCaptureS3Settings
        }
    }

}

extension MediaLiveClientTypes.FrameCaptureGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "destination"
        case frameCaptureCdnSettings = "frameCaptureCdnSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let frameCaptureCdnSettings = self.frameCaptureCdnSettings {
            try encodeContainer.encode(frameCaptureCdnSettings, forKey: .frameCaptureCdnSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let frameCaptureCdnSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureCdnSettings.self, forKey: .frameCaptureCdnSettings)
        frameCaptureCdnSettings = frameCaptureCdnSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture Group Settings
    public struct FrameCaptureGroupSettings: Swift.Equatable {
        /// The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Parameters that control interactions with the CDN.
        public var frameCaptureCdnSettings: MediaLiveClientTypes.FrameCaptureCdnSettings?

        public init (
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            frameCaptureCdnSettings: MediaLiveClientTypes.FrameCaptureCdnSettings? = nil
        )
        {
            self.destination = destination
            self.frameCaptureCdnSettings = frameCaptureCdnSettings
        }
    }

}

extension MediaLiveClientTypes.FrameCaptureHlsSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture Hls Settings
    public struct FrameCaptureHlsSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes {
    /// Frame Capture Interval Unit
    public enum FrameCaptureIntervalUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case milliseconds
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [FrameCaptureIntervalUnit] {
            return [
                .milliseconds,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .milliseconds: return "MILLISECONDS"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FrameCaptureIntervalUnit(rawValue: rawValue) ?? FrameCaptureIntervalUnit.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.FrameCaptureOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nameModifier = "nameModifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nameModifier = self.nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameModifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture Output Settings
    public struct FrameCaptureOutputSettings: Swift.Equatable {
        /// Required if the output group contains more than one output. This modifier forms part of the output file name.
        public var nameModifier: Swift.String?

        public init (
            nameModifier: Swift.String? = nil
        )
        {
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes.FrameCaptureS3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = self.cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.S3CannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture S3 Settings
    public struct FrameCaptureS3Settings: Swift.Equatable {
        /// Specify the canned ACL to apply to each S3 request. Defaults to none.
        public var cannedAcl: MediaLiveClientTypes.S3CannedAcl?

        public init (
            cannedAcl: MediaLiveClientTypes.S3CannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }

}

extension MediaLiveClientTypes.FrameCaptureSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captureInterval = "captureInterval"
        case captureIntervalUnits = "captureIntervalUnits"
        case timecodeBurninSettings = "timecodeBurninSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureInterval = self.captureInterval {
            try encodeContainer.encode(captureInterval, forKey: .captureInterval)
        }
        if let captureIntervalUnits = self.captureIntervalUnits {
            try encodeContainer.encode(captureIntervalUnits.rawValue, forKey: .captureIntervalUnits)
        }
        if let timecodeBurninSettings = self.timecodeBurninSettings {
            try encodeContainer.encode(timecodeBurninSettings, forKey: .timecodeBurninSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captureIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .captureInterval)
        captureInterval = captureIntervalDecoded
        let captureIntervalUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureIntervalUnit.self, forKey: .captureIntervalUnits)
        captureIntervalUnits = captureIntervalUnitsDecoded
        let timecodeBurninSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeBurninSettings.self, forKey: .timecodeBurninSettings)
        timecodeBurninSettings = timecodeBurninSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture Settings
    public struct FrameCaptureSettings: Swift.Equatable {
        /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
        public var captureInterval: Swift.Int?
        /// Unit for the frame capture interval.
        public var captureIntervalUnits: MediaLiveClientTypes.FrameCaptureIntervalUnit?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?

        public init (
            captureInterval: Swift.Int? = nil,
            captureIntervalUnits: MediaLiveClientTypes.FrameCaptureIntervalUnit? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil
        )
        {
            self.captureInterval = captureInterval
            self.captureIntervalUnits = captureIntervalUnits
            self.timecodeBurninSettings = timecodeBurninSettings
        }
    }

}

extension GatewayTimeoutException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GatewayTimeoutExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for GatewayTimeoutException
public struct GatewayTimeoutException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GatewayTimeoutExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GatewayTimeoutExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaLiveClientTypes.GlobalConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initialAudioGain = "initialAudioGain"
        case inputEndAction = "inputEndAction"
        case inputLossBehavior = "inputLossBehavior"
        case outputLockingMode = "outputLockingMode"
        case outputTimingSource = "outputTimingSource"
        case supportLowFramerateInputs = "supportLowFramerateInputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let initialAudioGain = self.initialAudioGain {
            try encodeContainer.encode(initialAudioGain, forKey: .initialAudioGain)
        }
        if let inputEndAction = self.inputEndAction {
            try encodeContainer.encode(inputEndAction.rawValue, forKey: .inputEndAction)
        }
        if let inputLossBehavior = self.inputLossBehavior {
            try encodeContainer.encode(inputLossBehavior, forKey: .inputLossBehavior)
        }
        if let outputLockingMode = self.outputLockingMode {
            try encodeContainer.encode(outputLockingMode.rawValue, forKey: .outputLockingMode)
        }
        if let outputTimingSource = self.outputTimingSource {
            try encodeContainer.encode(outputTimingSource.rawValue, forKey: .outputTimingSource)
        }
        if let supportLowFramerateInputs = self.supportLowFramerateInputs {
            try encodeContainer.encode(supportLowFramerateInputs.rawValue, forKey: .supportLowFramerateInputs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialAudioGainDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initialAudioGain)
        initialAudioGain = initialAudioGainDecoded
        let inputEndActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationInputEndAction.self, forKey: .inputEndAction)
        inputEndAction = inputEndActionDecoded
        let inputLossBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossBehavior.self, forKey: .inputLossBehavior)
        inputLossBehavior = inputLossBehaviorDecoded
        let outputLockingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationOutputLockingMode.self, forKey: .outputLockingMode)
        outputLockingMode = outputLockingModeDecoded
        let outputTimingSourceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationOutputTimingSource.self, forKey: .outputTimingSource)
        outputTimingSource = outputTimingSourceDecoded
        let supportLowFramerateInputsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationLowFramerateInputs.self, forKey: .supportLowFramerateInputs)
        supportLowFramerateInputs = supportLowFramerateInputsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Global Configuration
    public struct GlobalConfiguration: Swift.Equatable {
        /// Value to set the initial audio gain for the Live Event.
        public var initialAudioGain: Swift.Int?
        /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
        public var inputEndAction: MediaLiveClientTypes.GlobalConfigurationInputEndAction?
        /// Settings for system actions when input is lost.
        public var inputLossBehavior: MediaLiveClientTypes.InputLossBehavior?
        /// Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
        public var outputLockingMode: MediaLiveClientTypes.GlobalConfigurationOutputLockingMode?
        /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
        public var outputTimingSource: MediaLiveClientTypes.GlobalConfigurationOutputTimingSource?
        /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        public var supportLowFramerateInputs: MediaLiveClientTypes.GlobalConfigurationLowFramerateInputs?

        public init (
            initialAudioGain: Swift.Int? = nil,
            inputEndAction: MediaLiveClientTypes.GlobalConfigurationInputEndAction? = nil,
            inputLossBehavior: MediaLiveClientTypes.InputLossBehavior? = nil,
            outputLockingMode: MediaLiveClientTypes.GlobalConfigurationOutputLockingMode? = nil,
            outputTimingSource: MediaLiveClientTypes.GlobalConfigurationOutputTimingSource? = nil,
            supportLowFramerateInputs: MediaLiveClientTypes.GlobalConfigurationLowFramerateInputs? = nil
        )
        {
            self.initialAudioGain = initialAudioGain
            self.inputEndAction = inputEndAction
            self.inputLossBehavior = inputLossBehavior
            self.outputLockingMode = outputLockingMode
            self.outputTimingSource = outputTimingSource
            self.supportLowFramerateInputs = supportLowFramerateInputs
        }
    }

}

extension MediaLiveClientTypes {
    /// Global Configuration Input End Action
    public enum GlobalConfigurationInputEndAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case switchAndLoopInputs
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationInputEndAction] {
            return [
                .none,
                .switchAndLoopInputs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .switchAndLoopInputs: return "SWITCH_AND_LOOP_INPUTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalConfigurationInputEndAction(rawValue: rawValue) ?? GlobalConfigurationInputEndAction.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Global Configuration Low Framerate Inputs
    public enum GlobalConfigurationLowFramerateInputs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationLowFramerateInputs] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalConfigurationLowFramerateInputs(rawValue: rawValue) ?? GlobalConfigurationLowFramerateInputs.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Global Configuration Output Locking Mode
    public enum GlobalConfigurationOutputLockingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case epochLocking
        case pipelineLocking
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationOutputLockingMode] {
            return [
                .epochLocking,
                .pipelineLocking,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .epochLocking: return "EPOCH_LOCKING"
            case .pipelineLocking: return "PIPELINE_LOCKING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalConfigurationOutputLockingMode(rawValue: rawValue) ?? GlobalConfigurationOutputLockingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Global Configuration Output Timing Source
    public enum GlobalConfigurationOutputTimingSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inputClock
        case systemClock
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationOutputTimingSource] {
            return [
                .inputClock,
                .systemClock,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inputClock: return "INPUT_CLOCK"
            case .systemClock: return "SYSTEM_CLOCK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalConfigurationOutputTimingSource(rawValue: rawValue) ?? GlobalConfigurationOutputTimingSource.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Adaptive Quantization
    public enum H264AdaptiveQuantization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H264AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264AdaptiveQuantization(rawValue: rawValue) ?? H264AdaptiveQuantization.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Color Metadata
    public enum H264ColorMetadata: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ColorMetadata] {
            return [
                .ignore,
                .insert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264ColorMetadata(rawValue: rawValue) ?? H264ColorMetadata.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.H264ColorSpaceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case colorSpacePassthroughSettings = "colorSpacePassthroughSettings"
        case rec601Settings = "rec601Settings"
        case rec709Settings = "rec709Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorSpacePassthroughSettings = self.colorSpacePassthroughSettings {
            try encodeContainer.encode(colorSpacePassthroughSettings, forKey: .colorSpacePassthroughSettings)
        }
        if let rec601Settings = self.rec601Settings {
            try encodeContainer.encode(rec601Settings, forKey: .rec601Settings)
        }
        if let rec709Settings = self.rec709Settings {
            try encodeContainer.encode(rec709Settings, forKey: .rec709Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorSpacePassthroughSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ColorSpacePassthroughSettings.self, forKey: .colorSpacePassthroughSettings)
        colorSpacePassthroughSettings = colorSpacePassthroughSettingsDecoded
        let rec601SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Rec601Settings.self, forKey: .rec601Settings)
        rec601Settings = rec601SettingsDecoded
        let rec709SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Rec709Settings.self, forKey: .rec709Settings)
        rec709Settings = rec709SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// H264 Color Space Settings
    public struct H264ColorSpaceSettings: Swift.Equatable {
        /// Passthrough applies no color space conversion to the output
        public var colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings?
        /// Rec601 Settings
        public var rec601Settings: MediaLiveClientTypes.Rec601Settings?
        /// Rec709 Settings
        public var rec709Settings: MediaLiveClientTypes.Rec709Settings?

        public init (
            colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings? = nil,
            rec601Settings: MediaLiveClientTypes.Rec601Settings? = nil,
            rec709Settings: MediaLiveClientTypes.Rec709Settings? = nil
        )
        {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }
    }

}

extension MediaLiveClientTypes {
    /// H264 Entropy Encoding
    public enum H264EntropyEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cabac
        case cavlc
        case sdkUnknown(Swift.String)

        public static var allCases: [H264EntropyEncoding] {
            return [
                .cabac,
                .cavlc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cabac: return "CABAC"
            case .cavlc: return "CAVLC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264EntropyEncoding(rawValue: rawValue) ?? H264EntropyEncoding.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.H264FilterSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let temporalFilterSettings = self.temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// H264 Filter Settings
    public struct H264FilterSettings: Swift.Equatable {
        /// Temporal Filter Settings
        public var temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings?

        public init (
            temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings? = nil
        )
        {
            self.temporalFilterSettings = temporalFilterSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// H264 Flicker Aq
    public enum H264FlickerAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FlickerAq] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264FlickerAq(rawValue: rawValue) ?? H264FlickerAq.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Force Field Pictures
    public enum H264ForceFieldPictures: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ForceFieldPictures] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264ForceFieldPictures(rawValue: rawValue) ?? H264ForceFieldPictures.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Framerate Control
    public enum H264FramerateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FramerateControl] {
            return [
                .initializeFromSource,
                .specified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264FramerateControl(rawValue: rawValue) ?? H264FramerateControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Gop BReference
    public enum H264GopBReference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264GopBReference] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264GopBReference(rawValue: rawValue) ?? H264GopBReference.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Gop Size Units
    public enum H264GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [H264GopSizeUnits] {
            return [
                .frames,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264GopSizeUnits(rawValue: rawValue) ?? H264GopSizeUnits.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Level
    public enum H264Level: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case h264Level1
        case h264Level11
        case h264Level12
        case h264Level13
        case h264Level2
        case h264Level21
        case h264Level22
        case h264Level3
        case h264Level31
        case h264Level32
        case h264Level4
        case h264Level41
        case h264Level42
        case h264Level5
        case h264Level51
        case h264Level52
        case h264LevelAuto
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Level] {
            return [
                .h264Level1,
                .h264Level11,
                .h264Level12,
                .h264Level13,
                .h264Level2,
                .h264Level21,
                .h264Level22,
                .h264Level3,
                .h264Level31,
                .h264Level32,
                .h264Level4,
                .h264Level41,
                .h264Level42,
                .h264Level5,
                .h264Level51,
                .h264Level52,
                .h264LevelAuto,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .h264Level1: return "H264_LEVEL_1"
            case .h264Level11: return "H264_LEVEL_1_1"
            case .h264Level12: return "H264_LEVEL_1_2"
            case .h264Level13: return "H264_LEVEL_1_3"
            case .h264Level2: return "H264_LEVEL_2"
            case .h264Level21: return "H264_LEVEL_2_1"
            case .h264Level22: return "H264_LEVEL_2_2"
            case .h264Level3: return "H264_LEVEL_3"
            case .h264Level31: return "H264_LEVEL_3_1"
            case .h264Level32: return "H264_LEVEL_3_2"
            case .h264Level4: return "H264_LEVEL_4"
            case .h264Level41: return "H264_LEVEL_4_1"
            case .h264Level42: return "H264_LEVEL_4_2"
            case .h264Level5: return "H264_LEVEL_5"
            case .h264Level51: return "H264_LEVEL_5_1"
            case .h264Level52: return "H264_LEVEL_5_2"
            case .h264LevelAuto: return "H264_LEVEL_AUTO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264Level(rawValue: rawValue) ?? H264Level.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Look Ahead Rate Control
    public enum H264LookAheadRateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [H264LookAheadRateControl] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264LookAheadRateControl(rawValue: rawValue) ?? H264LookAheadRateControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Par Control
    public enum H264ParControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ParControl] {
            return [
                .initializeFromSource,
                .specified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264ParControl(rawValue: rawValue) ?? H264ParControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Profile
    public enum H264Profile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case baseline
        case high
        case high10bit
        case high422
        case high42210bit
        case main
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Profile] {
            return [
                .baseline,
                .high,
                .high10bit,
                .high422,
                .high42210bit,
                .main,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .baseline: return "BASELINE"
            case .high: return "HIGH"
            case .high10bit: return "HIGH_10BIT"
            case .high422: return "HIGH_422"
            case .high42210bit: return "HIGH_422_10BIT"
            case .main: return "MAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264Profile(rawValue: rawValue) ?? H264Profile.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Quality Level
    public enum H264QualityLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enhancedQuality
        case standardQuality
        case sdkUnknown(Swift.String)

        public static var allCases: [H264QualityLevel] {
            return [
                .enhancedQuality,
                .standardQuality,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enhancedQuality: return "ENHANCED_QUALITY"
            case .standardQuality: return "STANDARD_QUALITY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264QualityLevel(rawValue: rawValue) ?? H264QualityLevel.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Rate Control Mode
    public enum H264RateControlMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cbr
        case multiplex
        case qvbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [H264RateControlMode] {
            return [
                .cbr,
                .multiplex,
                .qvbr,
                .vbr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .multiplex: return "MULTIPLEX"
            case .qvbr: return "QVBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264RateControlMode(rawValue: rawValue) ?? H264RateControlMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Scan Type
    public enum H264ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ScanType] {
            return [
                .interlaced,
                .progressive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264ScanType(rawValue: rawValue) ?? H264ScanType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Scene Change Detect
    public enum H264SceneChangeDetect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SceneChangeDetect] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264SceneChangeDetect(rawValue: rawValue) ?? H264SceneChangeDetect.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.H264Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case bitrate = "bitrate"
        case bufFillPct = "bufFillPct"
        case bufSize = "bufSize"
        case colorMetadata = "colorMetadata"
        case colorSpaceSettings = "colorSpaceSettings"
        case entropyEncoding = "entropyEncoding"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case flickerAq = "flickerAq"
        case forceFieldPictures = "forceFieldPictures"
        case framerateControl = "framerateControl"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopBReference = "gopBReference"
        case gopClosedCadence = "gopClosedCadence"
        case gopNumBFrames = "gopNumBFrames"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case level = "level"
        case lookAheadRateControl = "lookAheadRateControl"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numRefFrames = "numRefFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case profile = "profile"
        case qualityLevel = "qualityLevel"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case rateControlMode = "rateControlMode"
        case scanType = "scanType"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case softness = "softness"
        case spatialAq = "spatialAq"
        case subgopLength = "subgopLength"
        case syntax = "syntax"
        case temporalAq = "temporalAq"
        case timecodeBurninSettings = "timecodeBurninSettings"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = self.adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = self.afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufFillPct = self.bufFillPct {
            try encodeContainer.encode(bufFillPct, forKey: .bufFillPct)
        }
        if let bufSize = self.bufSize {
            try encodeContainer.encode(bufSize, forKey: .bufSize)
        }
        if let colorMetadata = self.colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpaceSettings = self.colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let entropyEncoding = self.entropyEncoding {
            try encodeContainer.encode(entropyEncoding.rawValue, forKey: .entropyEncoding)
        }
        if let filterSettings = self.filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = self.fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let flickerAq = self.flickerAq {
            try encodeContainer.encode(flickerAq.rawValue, forKey: .flickerAq)
        }
        if let forceFieldPictures = self.forceFieldPictures {
            try encodeContainer.encode(forceFieldPictures.rawValue, forKey: .forceFieldPictures)
        }
        if let framerateControl = self.framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopBReference = self.gopBReference {
            try encodeContainer.encode(gopBReference.rawValue, forKey: .gopBReference)
        }
        if let gopClosedCadence = self.gopClosedCadence {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if let gopNumBFrames = self.gopNumBFrames {
            try encodeContainer.encode(gopNumBFrames, forKey: .gopNumBFrames)
        }
        if let gopSize = self.gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = self.gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let lookAheadRateControl = self.lookAheadRateControl {
            try encodeContainer.encode(lookAheadRateControl.rawValue, forKey: .lookAheadRateControl)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let minIInterval = self.minIInterval {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if let numRefFrames = self.numRefFrames {
            try encodeContainer.encode(numRefFrames, forKey: .numRefFrames)
        }
        if let parControl = self.parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if let parDenominator = self.parDenominator {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if let parNumerator = self.parNumerator {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let profile = self.profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let qualityLevel = self.qualityLevel {
            try encodeContainer.encode(qualityLevel.rawValue, forKey: .qualityLevel)
        }
        if let qvbrQualityLevel = self.qvbrQualityLevel {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if let rateControlMode = self.rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let sceneChangeDetect = self.sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if let slices = self.slices {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let softness = self.softness {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAq = self.spatialAq {
            try encodeContainer.encode(spatialAq.rawValue, forKey: .spatialAq)
        }
        if let subgopLength = self.subgopLength {
            try encodeContainer.encode(subgopLength.rawValue, forKey: .subgopLength)
        }
        if let syntax = self.syntax {
            try encodeContainer.encode(syntax.rawValue, forKey: .syntax)
        }
        if let temporalAq = self.temporalAq {
            try encodeContainer.encode(temporalAq.rawValue, forKey: .temporalAq)
        }
        if let timecodeBurninSettings = self.timecodeBurninSettings {
            try encodeContainer.encode(timecodeBurninSettings, forKey: .timecodeBurninSettings)
        }
        if let timecodeInsertion = self.timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufFillPctDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufFillPct)
        bufFillPct = bufFillPctDecoded
        let bufSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufSize)
        bufSize = bufSizeDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let entropyEncodingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264EntropyEncoding.self, forKey: .entropyEncoding)
        entropyEncoding = entropyEncodingDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let flickerAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264FlickerAq.self, forKey: .flickerAq)
        flickerAq = flickerAqDecoded
        let forceFieldPicturesDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ForceFieldPictures.self, forKey: .forceFieldPictures)
        forceFieldPictures = forceFieldPicturesDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopBReferenceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264GopBReference.self, forKey: .gopBReference)
        gopBReference = gopBReferenceDecoded
        let gopClosedCadenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopNumBFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopNumBFrames)
        gopNumBFrames = gopNumBFramesDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let levelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Level.self, forKey: .level)
        level = levelDecoded
        let lookAheadRateControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264LookAheadRateControl.self, forKey: .lookAheadRateControl)
        lookAheadRateControl = lookAheadRateControlDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numRefFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRefFrames)
        numRefFrames = numRefFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Profile.self, forKey: .profile)
        profile = profileDecoded
        let qualityLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264QualityLevel.self, forKey: .qualityLevel)
        qualityLevel = qualityLevelDecoded
        let qvbrQualityLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .slices)
        slices = slicesDecoded
        let softnessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264SpatialAq.self, forKey: .spatialAq)
        spatialAq = spatialAqDecoded
        let subgopLengthDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264SubGopLength.self, forKey: .subgopLength)
        subgopLength = subgopLengthDecoded
        let syntaxDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Syntax.self, forKey: .syntax)
        syntax = syntaxDecoded
        let temporalAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264TemporalAq.self, forKey: .temporalAq)
        temporalAq = temporalAqDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
        let timecodeBurninSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeBurninSettings.self, forKey: .timecodeBurninSettings)
        timecodeBurninSettings = timecodeBurninSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// H264 Settings
    public struct H264Settings: Swift.Equatable {
        /// Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
        public var adaptiveQuantization: MediaLiveClientTypes.H264AdaptiveQuantization?
        /// Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// Percentage of the buffer that should initially be filled (HRD buffer model).
        public var bufFillPct: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits.
        public var bufSize: Swift.Int?
        /// Includes colorspace metadata in the output.
        public var colorMetadata: MediaLiveClientTypes.H264ColorMetadata?
        /// Color Space settings
        public var colorSpaceSettings: MediaLiveClientTypes.H264ColorSpaceSettings?
        /// Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
        public var entropyEncoding: MediaLiveClientTypes.H264EntropyEncoding?
        /// Optional filters that you can apply to an encode.
        public var filterSettings: MediaLiveClientTypes.H264FilterSettings?
        /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
        public var flickerAq: MediaLiveClientTypes.H264FlickerAq?
        /// This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
        public var forceFieldPictures: MediaLiveClientTypes.H264ForceFieldPictures?
        /// This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
        public var framerateControl: MediaLiveClientTypes.H264FramerateControl?
        /// Framerate denominator.
        public var framerateDenominator: Swift.Int?
        /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
        public var framerateNumerator: Swift.Int?
        /// Documentation update needed
        public var gopBReference: MediaLiveClientTypes.H264GopBReference?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// Number of B-frames between reference frames.
        public var gopNumBFrames: Swift.Int?
        /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
        public var gopSize: Swift.Double?
        /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
        public var gopSizeUnits: MediaLiveClientTypes.H264GopSizeUnits?
        /// H.264 Level.
        public var level: MediaLiveClientTypes.H264Level?
        /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
        public var lookAheadRateControl: MediaLiveClientTypes.H264LookAheadRateControl?
        /// For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
        public var maxBitrate: Swift.Int?
        /// Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
        public var minIInterval: Swift.Int?
        /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
        public var numRefFrames: Swift.Int?
        /// This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
        public var parControl: MediaLiveClientTypes.H264ParControl?
        /// Pixel Aspect Ratio denominator.
        public var parDenominator: Swift.Int?
        /// Pixel Aspect Ratio numerator.
        public var parNumerator: Swift.Int?
        /// H.264 Profile.
        public var profile: MediaLiveClientTypes.H264Profile?
        /// Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel).
        ///
        /// * ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY.
        ///
        /// * STANDARD_QUALITY: Valid for any Rate control mode.
        public var qualityLevel: MediaLiveClientTypes.H264QualityLevel?
        /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are:
        ///
        /// * Primary screen: Quality level: 8 to 10. Max bitrate: 4M
        ///
        /// * PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
        ///
        /// * Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
        public var qvbrQualityLevel: Swift.Int?
        /// Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
        public var rateControlMode: MediaLiveClientTypes.H264RateControlMode?
        /// Sets the scan type of the output to progressive or top-field-first interlaced.
        public var scanType: MediaLiveClientTypes.H264ScanType?
        /// Scene change detection.
        ///
        /// * On: inserts I-frames when scene change is detected.
        ///
        /// * Off: does not force an I-frame when scene change is detected.
        public var sceneChangeDetect: MediaLiveClientTypes.H264SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
        public var slices: Swift.Int?
        /// Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
        public var softness: Swift.Int?
        /// Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
        public var spatialAq: MediaLiveClientTypes.H264SpatialAq?
        /// If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
        public var subgopLength: MediaLiveClientTypes.H264SubGopLength?
        /// Produces a bitstream compliant with SMPTE RP-2027.
        public var syntax: MediaLiveClientTypes.H264Syntax?
        /// Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
        public var temporalAq: MediaLiveClientTypes.H264TemporalAq?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?
        /// Determines how timecodes should be inserted into the video elementary stream.
        ///
        /// * 'disabled': Do not include timecodes
        ///
        /// * 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
        public var timecodeInsertion: MediaLiveClientTypes.H264TimecodeInsertionBehavior?

        public init (
            adaptiveQuantization: MediaLiveClientTypes.H264AdaptiveQuantization? = nil,
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            bitrate: Swift.Int? = nil,
            bufFillPct: Swift.Int? = nil,
            bufSize: Swift.Int? = nil,
            colorMetadata: MediaLiveClientTypes.H264ColorMetadata? = nil,
            colorSpaceSettings: MediaLiveClientTypes.H264ColorSpaceSettings? = nil,
            entropyEncoding: MediaLiveClientTypes.H264EntropyEncoding? = nil,
            filterSettings: MediaLiveClientTypes.H264FilterSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            flickerAq: MediaLiveClientTypes.H264FlickerAq? = nil,
            forceFieldPictures: MediaLiveClientTypes.H264ForceFieldPictures? = nil,
            framerateControl: MediaLiveClientTypes.H264FramerateControl? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopBReference: MediaLiveClientTypes.H264GopBReference? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopNumBFrames: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.H264GopSizeUnits? = nil,
            level: MediaLiveClientTypes.H264Level? = nil,
            lookAheadRateControl: MediaLiveClientTypes.H264LookAheadRateControl? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            numRefFrames: Swift.Int? = nil,
            parControl: MediaLiveClientTypes.H264ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            profile: MediaLiveClientTypes.H264Profile? = nil,
            qualityLevel: MediaLiveClientTypes.H264QualityLevel? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            rateControlMode: MediaLiveClientTypes.H264RateControlMode? = nil,
            scanType: MediaLiveClientTypes.H264ScanType? = nil,
            sceneChangeDetect: MediaLiveClientTypes.H264SceneChangeDetect? = nil,
            slices: Swift.Int? = nil,
            softness: Swift.Int? = nil,
            spatialAq: MediaLiveClientTypes.H264SpatialAq? = nil,
            subgopLength: MediaLiveClientTypes.H264SubGopLength? = nil,
            syntax: MediaLiveClientTypes.H264Syntax? = nil,
            temporalAq: MediaLiveClientTypes.H264TemporalAq? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil,
            timecodeInsertion: MediaLiveClientTypes.H264TimecodeInsertionBehavior? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.bitrate = bitrate
            self.bufFillPct = bufFillPct
            self.bufSize = bufSize
            self.colorMetadata = colorMetadata
            self.colorSpaceSettings = colorSpaceSettings
            self.entropyEncoding = entropyEncoding
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.flickerAq = flickerAq
            self.forceFieldPictures = forceFieldPictures
            self.framerateControl = framerateControl
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.gopNumBFrames = gopNumBFrames
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.numRefFrames = numRefFrames
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.profile = profile
            self.qualityLevel = qualityLevel
            self.qvbrQualityLevel = qvbrQualityLevel
            self.rateControlMode = rateControlMode
            self.scanType = scanType
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.softness = softness
            self.spatialAq = spatialAq
            self.subgopLength = subgopLength
            self.syntax = syntax
            self.temporalAq = temporalAq
            self.timecodeBurninSettings = timecodeBurninSettings
            self.timecodeInsertion = timecodeInsertion
        }
    }

}

extension MediaLiveClientTypes {
    /// H264 Spatial Aq
    public enum H264SpatialAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SpatialAq] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264SpatialAq(rawValue: rawValue) ?? H264SpatialAq.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Sub Gop Length
    public enum H264SubGopLength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case fixed
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SubGopLength] {
            return [
                .dynamic,
                .fixed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "DYNAMIC"
            case .fixed: return "FIXED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264SubGopLength(rawValue: rawValue) ?? H264SubGopLength.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Syntax
    public enum H264Syntax: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `default`
        case rp2027
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Syntax] {
            return [
                .default,
                .rp2027,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .rp2027: return "RP2027"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264Syntax(rawValue: rawValue) ?? H264Syntax.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Temporal Aq
    public enum H264TemporalAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264TemporalAq] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264TemporalAq(rawValue: rawValue) ?? H264TemporalAq.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Timecode Insertion Behavior
    public enum H264TimecodeInsertionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case picTimingSei
        case sdkUnknown(Swift.String)

        public static var allCases: [H264TimecodeInsertionBehavior] {
            return [
                .disabled,
                .picTimingSei,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .picTimingSei: return "PIC_TIMING_SEI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H264TimecodeInsertionBehavior(rawValue: rawValue) ?? H264TimecodeInsertionBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Adaptive Quantization
    public enum H265AdaptiveQuantization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H265AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265AdaptiveQuantization(rawValue: rawValue) ?? H265AdaptiveQuantization.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Alternative Transfer Function
    public enum H265AlternativeTransferFunction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insert
        case omit
        case sdkUnknown(Swift.String)

        public static var allCases: [H265AlternativeTransferFunction] {
            return [
                .insert,
                .omit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .omit: return "OMIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265AlternativeTransferFunction(rawValue: rawValue) ?? H265AlternativeTransferFunction.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Color Metadata
    public enum H265ColorMetadata: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [H265ColorMetadata] {
            return [
                .ignore,
                .insert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265ColorMetadata(rawValue: rawValue) ?? H265ColorMetadata.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.H265ColorSpaceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case colorSpacePassthroughSettings = "colorSpacePassthroughSettings"
        case dolbyVision81Settings = "dolbyVision81Settings"
        case hdr10Settings = "hdr10Settings"
        case rec601Settings = "rec601Settings"
        case rec709Settings = "rec709Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorSpacePassthroughSettings = self.colorSpacePassthroughSettings {
            try encodeContainer.encode(colorSpacePassthroughSettings, forKey: .colorSpacePassthroughSettings)
        }
        if let dolbyVision81Settings = self.dolbyVision81Settings {
            try encodeContainer.encode(dolbyVision81Settings, forKey: .dolbyVision81Settings)
        }
        if let hdr10Settings = self.hdr10Settings {
            try encodeContainer.encode(hdr10Settings, forKey: .hdr10Settings)
        }
        if let rec601Settings = self.rec601Settings {
            try encodeContainer.encode(rec601Settings, forKey: .rec601Settings)
        }
        if let rec709Settings = self.rec709Settings {
            try encodeContainer.encode(rec709Settings, forKey: .rec709Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorSpacePassthroughSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ColorSpacePassthroughSettings.self, forKey: .colorSpacePassthroughSettings)
        colorSpacePassthroughSettings = colorSpacePassthroughSettingsDecoded
        let dolbyVision81SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DolbyVision81Settings.self, forKey: .dolbyVision81Settings)
        dolbyVision81Settings = dolbyVision81SettingsDecoded
        let hdr10SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Hdr10Settings.self, forKey: .hdr10Settings)
        hdr10Settings = hdr10SettingsDecoded
        let rec601SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Rec601Settings.self, forKey: .rec601Settings)
        rec601Settings = rec601SettingsDecoded
        let rec709SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Rec709Settings.self, forKey: .rec709Settings)
        rec709Settings = rec709SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// H265 Color Space Settings
    public struct H265ColorSpaceSettings: Swift.Equatable {
        /// Passthrough applies no color space conversion to the output
        public var colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings?
        /// Dolby Vision81 Settings
        public var dolbyVision81Settings: MediaLiveClientTypes.DolbyVision81Settings?
        /// Hdr10 Settings
        public var hdr10Settings: MediaLiveClientTypes.Hdr10Settings?
        /// Rec601 Settings
        public var rec601Settings: MediaLiveClientTypes.Rec601Settings?
        /// Rec709 Settings
        public var rec709Settings: MediaLiveClientTypes.Rec709Settings?

        public init (
            colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings? = nil,
            dolbyVision81Settings: MediaLiveClientTypes.DolbyVision81Settings? = nil,
            hdr10Settings: MediaLiveClientTypes.Hdr10Settings? = nil,
            rec601Settings: MediaLiveClientTypes.Rec601Settings? = nil,
            rec709Settings: MediaLiveClientTypes.Rec709Settings? = nil
        )
        {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.dolbyVision81Settings = dolbyVision81Settings
            self.hdr10Settings = hdr10Settings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }
    }

}

extension MediaLiveClientTypes.H265FilterSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let temporalFilterSettings = self.temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// H265 Filter Settings
    public struct H265FilterSettings: Swift.Equatable {
        /// Temporal Filter Settings
        public var temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings?

        public init (
            temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings? = nil
        )
        {
            self.temporalFilterSettings = temporalFilterSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// H265 Flicker Aq
    public enum H265FlickerAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265FlickerAq] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265FlickerAq(rawValue: rawValue) ?? H265FlickerAq.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Gop Size Units
    public enum H265GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [H265GopSizeUnits] {
            return [
                .frames,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265GopSizeUnits(rawValue: rawValue) ?? H265GopSizeUnits.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Level
    public enum H265Level: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case h265Level1
        case h265Level2
        case h265Level21
        case h265Level3
        case h265Level31
        case h265Level4
        case h265Level41
        case h265Level5
        case h265Level51
        case h265Level52
        case h265Level6
        case h265Level61
        case h265Level62
        case h265LevelAuto
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Level] {
            return [
                .h265Level1,
                .h265Level2,
                .h265Level21,
                .h265Level3,
                .h265Level31,
                .h265Level4,
                .h265Level41,
                .h265Level5,
                .h265Level51,
                .h265Level52,
                .h265Level6,
                .h265Level61,
                .h265Level62,
                .h265LevelAuto,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .h265Level1: return "H265_LEVEL_1"
            case .h265Level2: return "H265_LEVEL_2"
            case .h265Level21: return "H265_LEVEL_2_1"
            case .h265Level3: return "H265_LEVEL_3"
            case .h265Level31: return "H265_LEVEL_3_1"
            case .h265Level4: return "H265_LEVEL_4"
            case .h265Level41: return "H265_LEVEL_4_1"
            case .h265Level5: return "H265_LEVEL_5"
            case .h265Level51: return "H265_LEVEL_5_1"
            case .h265Level52: return "H265_LEVEL_5_2"
            case .h265Level6: return "H265_LEVEL_6"
            case .h265Level61: return "H265_LEVEL_6_1"
            case .h265Level62: return "H265_LEVEL_6_2"
            case .h265LevelAuto: return "H265_LEVEL_AUTO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265Level(rawValue: rawValue) ?? H265Level.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Look Ahead Rate Control
    public enum H265LookAheadRateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [H265LookAheadRateControl] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265LookAheadRateControl(rawValue: rawValue) ?? H265LookAheadRateControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Profile
    public enum H265Profile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case main
        case main10bit
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Profile] {
            return [
                .main,
                .main10bit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .main: return "MAIN"
            case .main10bit: return "MAIN_10BIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265Profile(rawValue: rawValue) ?? H265Profile.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Rate Control Mode
    public enum H265RateControlMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cbr
        case multiplex
        case qvbr
        case sdkUnknown(Swift.String)

        public static var allCases: [H265RateControlMode] {
            return [
                .cbr,
                .multiplex,
                .qvbr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .multiplex: return "MULTIPLEX"
            case .qvbr: return "QVBR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265RateControlMode(rawValue: rawValue) ?? H265RateControlMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Scan Type
    public enum H265ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [H265ScanType] {
            return [
                .interlaced,
                .progressive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265ScanType(rawValue: rawValue) ?? H265ScanType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Scene Change Detect
    public enum H265SceneChangeDetect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265SceneChangeDetect] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265SceneChangeDetect(rawValue: rawValue) ?? H265SceneChangeDetect.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.H265Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case alternativeTransferFunction = "alternativeTransferFunction"
        case bitrate = "bitrate"
        case bufSize = "bufSize"
        case colorMetadata = "colorMetadata"
        case colorSpaceSettings = "colorSpaceSettings"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case flickerAq = "flickerAq"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case level = "level"
        case lookAheadRateControl = "lookAheadRateControl"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case profile = "profile"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case rateControlMode = "rateControlMode"
        case scanType = "scanType"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case tier = "tier"
        case timecodeBurninSettings = "timecodeBurninSettings"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = self.adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = self.afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let alternativeTransferFunction = self.alternativeTransferFunction {
            try encodeContainer.encode(alternativeTransferFunction.rawValue, forKey: .alternativeTransferFunction)
        }
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufSize = self.bufSize {
            try encodeContainer.encode(bufSize, forKey: .bufSize)
        }
        if let colorMetadata = self.colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpaceSettings = self.colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let filterSettings = self.filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = self.fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let flickerAq = self.flickerAq {
            try encodeContainer.encode(flickerAq.rawValue, forKey: .flickerAq)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopClosedCadence = self.gopClosedCadence {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if let gopSize = self.gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = self.gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let lookAheadRateControl = self.lookAheadRateControl {
            try encodeContainer.encode(lookAheadRateControl.rawValue, forKey: .lookAheadRateControl)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let minIInterval = self.minIInterval {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if let parDenominator = self.parDenominator {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if let parNumerator = self.parNumerator {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let profile = self.profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let qvbrQualityLevel = self.qvbrQualityLevel {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if let rateControlMode = self.rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let sceneChangeDetect = self.sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if let slices = self.slices {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
        if let timecodeBurninSettings = self.timecodeBurninSettings {
            try encodeContainer.encode(timecodeBurninSettings, forKey: .timecodeBurninSettings)
        }
        if let timecodeInsertion = self.timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let alternativeTransferFunctionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265AlternativeTransferFunction.self, forKey: .alternativeTransferFunction)
        alternativeTransferFunction = alternativeTransferFunctionDecoded
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufSize)
        bufSize = bufSizeDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265ColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let flickerAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265FlickerAq.self, forKey: .flickerAq)
        flickerAq = flickerAqDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let levelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Level.self, forKey: .level)
        level = levelDecoded
        let lookAheadRateControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265LookAheadRateControl.self, forKey: .lookAheadRateControl)
        lookAheadRateControl = lookAheadRateControlDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let parDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Profile.self, forKey: .profile)
        profile = profileDecoded
        let qvbrQualityLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .slices)
        slices = slicesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Tier.self, forKey: .tier)
        tier = tierDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
        let timecodeBurninSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeBurninSettings.self, forKey: .timecodeBurninSettings)
        timecodeBurninSettings = timecodeBurninSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// H265 Settings
    public struct H265Settings: Swift.Equatable {
        /// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
        public var adaptiveQuantization: MediaLiveClientTypes.H265AdaptiveQuantization?
        /// Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
        public var alternativeTransferFunction: MediaLiveClientTypes.H265AlternativeTransferFunction?
        /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits.
        public var bufSize: Swift.Int?
        /// Includes colorspace metadata in the output.
        public var colorMetadata: MediaLiveClientTypes.H265ColorMetadata?
        /// Color Space settings
        public var colorSpaceSettings: MediaLiveClientTypes.H265ColorSpaceSettings?
        /// Optional filters that you can apply to an encode.
        public var filterSettings: MediaLiveClientTypes.H265FilterSettings?
        /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
        public var flickerAq: MediaLiveClientTypes.H265FlickerAq?
        /// Framerate denominator.
        /// This member is required.
        public var framerateDenominator: Swift.Int?
        /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
        /// This member is required.
        public var framerateNumerator: Swift.Int?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
        public var gopSize: Swift.Double?
        /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
        public var gopSizeUnits: MediaLiveClientTypes.H265GopSizeUnits?
        /// H.265 Level.
        public var level: MediaLiveClientTypes.H265Level?
        /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
        public var lookAheadRateControl: MediaLiveClientTypes.H265LookAheadRateControl?
        /// For QVBR: See the tooltip for Quality level
        public var maxBitrate: Swift.Int?
        /// Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
        public var minIInterval: Swift.Int?
        /// Pixel Aspect Ratio denominator.
        public var parDenominator: Swift.Int?
        /// Pixel Aspect Ratio numerator.
        public var parNumerator: Swift.Int?
        /// H.265 Profile.
        public var profile: MediaLiveClientTypes.H265Profile?
        /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are:
        ///
        /// * Primary screen: Quality level: 8 to 10. Max bitrate: 4M
        ///
        /// * PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
        ///
        /// * Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
        public var qvbrQualityLevel: Swift.Int?
        /// Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
        public var rateControlMode: MediaLiveClientTypes.H265RateControlMode?
        /// Sets the scan type of the output to progressive or top-field-first interlaced.
        public var scanType: MediaLiveClientTypes.H265ScanType?
        /// Scene change detection.
        public var sceneChangeDetect: MediaLiveClientTypes.H265SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
        public var slices: Swift.Int?
        /// H.265 Tier.
        public var tier: MediaLiveClientTypes.H265Tier?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?
        /// Determines how timecodes should be inserted into the video elementary stream.
        ///
        /// * 'disabled': Do not include timecodes
        ///
        /// * 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
        public var timecodeInsertion: MediaLiveClientTypes.H265TimecodeInsertionBehavior?

        public init (
            adaptiveQuantization: MediaLiveClientTypes.H265AdaptiveQuantization? = nil,
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            alternativeTransferFunction: MediaLiveClientTypes.H265AlternativeTransferFunction? = nil,
            bitrate: Swift.Int? = nil,
            bufSize: Swift.Int? = nil,
            colorMetadata: MediaLiveClientTypes.H265ColorMetadata? = nil,
            colorSpaceSettings: MediaLiveClientTypes.H265ColorSpaceSettings? = nil,
            filterSettings: MediaLiveClientTypes.H265FilterSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            flickerAq: MediaLiveClientTypes.H265FlickerAq? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.H265GopSizeUnits? = nil,
            level: MediaLiveClientTypes.H265Level? = nil,
            lookAheadRateControl: MediaLiveClientTypes.H265LookAheadRateControl? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            profile: MediaLiveClientTypes.H265Profile? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            rateControlMode: MediaLiveClientTypes.H265RateControlMode? = nil,
            scanType: MediaLiveClientTypes.H265ScanType? = nil,
            sceneChangeDetect: MediaLiveClientTypes.H265SceneChangeDetect? = nil,
            slices: Swift.Int? = nil,
            tier: MediaLiveClientTypes.H265Tier? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil,
            timecodeInsertion: MediaLiveClientTypes.H265TimecodeInsertionBehavior? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.alternativeTransferFunction = alternativeTransferFunction
            self.bitrate = bitrate
            self.bufSize = bufSize
            self.colorMetadata = colorMetadata
            self.colorSpaceSettings = colorSpaceSettings
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.flickerAq = flickerAq
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopClosedCadence = gopClosedCadence
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.profile = profile
            self.qvbrQualityLevel = qvbrQualityLevel
            self.rateControlMode = rateControlMode
            self.scanType = scanType
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.tier = tier
            self.timecodeBurninSettings = timecodeBurninSettings
            self.timecodeInsertion = timecodeInsertion
        }
    }

}

extension MediaLiveClientTypes {
    /// H265 Tier
    public enum H265Tier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case main
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Tier] {
            return [
                .high,
                .main,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .main: return "MAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265Tier(rawValue: rawValue) ?? H265Tier.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Timecode Insertion Behavior
    public enum H265TimecodeInsertionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case picTimingSei
        case sdkUnknown(Swift.String)

        public static var allCases: [H265TimecodeInsertionBehavior] {
            return [
                .disabled,
                .picTimingSei,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .picTimingSei: return "PIC_TIMING_SEI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = H265TimecodeInsertionBehavior(rawValue: rawValue) ?? H265TimecodeInsertionBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Hdr10Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCll = "maxCll"
        case maxFall = "maxFall"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCll = self.maxCll {
            try encodeContainer.encode(maxCll, forKey: .maxCll)
        }
        if let maxFall = self.maxFall {
            try encodeContainer.encode(maxFall, forKey: .maxFall)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxCllDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCll)
        maxCll = maxCllDecoded
        let maxFallDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFall)
        maxFall = maxFallDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hdr10 Settings
    public struct Hdr10Settings: Swift.Equatable {
        /// Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
        public var maxCll: Swift.Int?
        /// Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
        public var maxFall: Swift.Int?

        public init (
            maxCll: Swift.Int? = nil,
            maxFall: Swift.Int? = nil
        )
        {
            self.maxCll = maxCll
            self.maxFall = maxFall
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Ad Markers
    public enum HlsAdMarkers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adobe
        case elemental
        case elementalScte35
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAdMarkers] {
            return [
                .adobe,
                .elemental,
                .elementalScte35,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adobe: return "ADOBE"
            case .elemental: return "ELEMENTAL"
            case .elementalScte35: return "ELEMENTAL_SCTE35"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsAdMarkers(rawValue: rawValue) ?? HlsAdMarkers.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Akamai Http Transfer Mode
    public enum HlsAkamaiHttpTransferMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case chunked
        case nonChunked
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAkamaiHttpTransferMode] {
            return [
                .chunked,
                .nonChunked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .chunked: return "CHUNKED"
            case .nonChunked: return "NON_CHUNKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsAkamaiHttpTransferMode(rawValue: rawValue) ?? HlsAkamaiHttpTransferMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsAkamaiSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case httpTransferMode = "httpTransferMode"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
        case salt = "salt"
        case token = "token"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let filecacheDuration = self.filecacheDuration {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let httpTransferMode = self.httpTransferMode {
            try encodeContainer.encode(httpTransferMode.rawValue, forKey: .httpTransferMode)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
        if let salt = self.salt {
            try encodeContainer.encode(salt, forKey: .salt)
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let httpTransferModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsAkamaiHttpTransferMode.self, forKey: .httpTransferMode)
        httpTransferMode = httpTransferModeDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
        let saltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .salt)
        salt = saltDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Akamai Settings
    public struct HlsAkamaiSettings: Swift.Equatable {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
        public var httpTransferMode: MediaLiveClientTypes.HlsAkamaiHttpTransferMode?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?
        /// Salt for authenticated Akamai.
        public var salt: Swift.String?
        /// Token parameter for authenticated akamai. If not specified, gda is used.
        public var token: Swift.String?

        public init (
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            httpTransferMode: MediaLiveClientTypes.HlsAkamaiHttpTransferMode? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil,
            salt: Swift.String? = nil,
            token: Swift.String? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.httpTransferMode = httpTransferMode
            self.numRetries = numRetries
            self.restartDelay = restartDelay
            self.salt = salt
            self.token = token
        }
    }

}

extension MediaLiveClientTypes.HlsBasicPutSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let filecacheDuration = self.filecacheDuration {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Basic Put Settings
    public struct HlsBasicPutSettings: Swift.Equatable {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init (
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Caption Language Setting
    public enum HlsCaptionLanguageSetting: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insert
        case `none`
        case omit
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCaptionLanguageSetting] {
            return [
                .insert,
                .none,
                .omit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case .omit: return "OMIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsCaptionLanguageSetting(rawValue: rawValue) ?? HlsCaptionLanguageSetting.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsCdnSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hlsAkamaiSettings = "hlsAkamaiSettings"
        case hlsBasicPutSettings = "hlsBasicPutSettings"
        case hlsMediaStoreSettings = "hlsMediaStoreSettings"
        case hlsS3Settings = "hlsS3Settings"
        case hlsWebdavSettings = "hlsWebdavSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsAkamaiSettings = self.hlsAkamaiSettings {
            try encodeContainer.encode(hlsAkamaiSettings, forKey: .hlsAkamaiSettings)
        }
        if let hlsBasicPutSettings = self.hlsBasicPutSettings {
            try encodeContainer.encode(hlsBasicPutSettings, forKey: .hlsBasicPutSettings)
        }
        if let hlsMediaStoreSettings = self.hlsMediaStoreSettings {
            try encodeContainer.encode(hlsMediaStoreSettings, forKey: .hlsMediaStoreSettings)
        }
        if let hlsS3Settings = self.hlsS3Settings {
            try encodeContainer.encode(hlsS3Settings, forKey: .hlsS3Settings)
        }
        if let hlsWebdavSettings = self.hlsWebdavSettings {
            try encodeContainer.encode(hlsWebdavSettings, forKey: .hlsWebdavSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsAkamaiSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsAkamaiSettings.self, forKey: .hlsAkamaiSettings)
        hlsAkamaiSettings = hlsAkamaiSettingsDecoded
        let hlsBasicPutSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsBasicPutSettings.self, forKey: .hlsBasicPutSettings)
        hlsBasicPutSettings = hlsBasicPutSettingsDecoded
        let hlsMediaStoreSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsMediaStoreSettings.self, forKey: .hlsMediaStoreSettings)
        hlsMediaStoreSettings = hlsMediaStoreSettingsDecoded
        let hlsS3SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsS3Settings.self, forKey: .hlsS3Settings)
        hlsS3Settings = hlsS3SettingsDecoded
        let hlsWebdavSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsWebdavSettings.self, forKey: .hlsWebdavSettings)
        hlsWebdavSettings = hlsWebdavSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Cdn Settings
    public struct HlsCdnSettings: Swift.Equatable {
        /// Hls Akamai Settings
        public var hlsAkamaiSettings: MediaLiveClientTypes.HlsAkamaiSettings?
        /// Hls Basic Put Settings
        public var hlsBasicPutSettings: MediaLiveClientTypes.HlsBasicPutSettings?
        /// Hls Media Store Settings
        public var hlsMediaStoreSettings: MediaLiveClientTypes.HlsMediaStoreSettings?
        /// Hls S3 Settings
        public var hlsS3Settings: MediaLiveClientTypes.HlsS3Settings?
        /// Hls Webdav Settings
        public var hlsWebdavSettings: MediaLiveClientTypes.HlsWebdavSettings?

        public init (
            hlsAkamaiSettings: MediaLiveClientTypes.HlsAkamaiSettings? = nil,
            hlsBasicPutSettings: MediaLiveClientTypes.HlsBasicPutSettings? = nil,
            hlsMediaStoreSettings: MediaLiveClientTypes.HlsMediaStoreSettings? = nil,
            hlsS3Settings: MediaLiveClientTypes.HlsS3Settings? = nil,
            hlsWebdavSettings: MediaLiveClientTypes.HlsWebdavSettings? = nil
        )
        {
            self.hlsAkamaiSettings = hlsAkamaiSettings
            self.hlsBasicPutSettings = hlsBasicPutSettings
            self.hlsMediaStoreSettings = hlsMediaStoreSettings
            self.hlsS3Settings = hlsS3Settings
            self.hlsWebdavSettings = hlsWebdavSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Client Cache
    public enum HlsClientCache: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsClientCache] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsClientCache(rawValue: rawValue) ?? HlsClientCache.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Codec Specification
    public enum HlsCodecSpecification: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rfc4281
        case rfc6381
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCodecSpecification] {
            return [
                .rfc4281,
                .rfc6381,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rfc4281: return "RFC_4281"
            case .rfc6381: return "RFC_6381"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsCodecSpecification(rawValue: rawValue) ?? HlsCodecSpecification.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Directory Structure
    public enum HlsDirectoryStructure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case singleDirectory
        case subdirectoryPerStream
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsDirectoryStructure] {
            return [
                .singleDirectory,
                .subdirectoryPerStream,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .singleDirectory: return "SINGLE_DIRECTORY"
            case .subdirectoryPerStream: return "SUBDIRECTORY_PER_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsDirectoryStructure(rawValue: rawValue) ?? HlsDirectoryStructure.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Discontinuity Tags
    public enum HlsDiscontinuityTags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insert
        case neverInsert
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsDiscontinuityTags] {
            return [
                .insert,
                .neverInsert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .neverInsert: return "NEVER_INSERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsDiscontinuityTags(rawValue: rawValue) ?? HlsDiscontinuityTags.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Encryption Type
    public enum HlsEncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes128
        case sampleAes
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsEncryptionType] {
            return [
                .aes128,
                .sampleAes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES128"
            case .sampleAes: return "SAMPLE_AES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsEncryptionType(rawValue: rawValue) ?? HlsEncryptionType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adMarkers = "adMarkers"
        case baseUrlContent = "baseUrlContent"
        case baseUrlContent1 = "baseUrlContent1"
        case baseUrlManifest = "baseUrlManifest"
        case baseUrlManifest1 = "baseUrlManifest1"
        case captionLanguageMappings = "captionLanguageMappings"
        case captionLanguageSetting = "captionLanguageSetting"
        case clientCache = "clientCache"
        case codecSpecification = "codecSpecification"
        case constantIv = "constantIv"
        case destination = "destination"
        case directoryStructure = "directoryStructure"
        case discontinuityTags = "discontinuityTags"
        case encryptionType = "encryptionType"
        case hlsCdnSettings = "hlsCdnSettings"
        case hlsId3SegmentTagging = "hlsId3SegmentTagging"
        case iFrameOnlyPlaylists = "iFrameOnlyPlaylists"
        case incompleteSegmentBehavior = "incompleteSegmentBehavior"
        case indexNSegments = "indexNSegments"
        case inputLossAction = "inputLossAction"
        case ivInManifest = "ivInManifest"
        case ivSource = "ivSource"
        case keepSegments = "keepSegments"
        case keyFormat = "keyFormat"
        case keyFormatVersions = "keyFormatVersions"
        case keyProviderSettings = "keyProviderSettings"
        case manifestCompression = "manifestCompression"
        case manifestDurationFormat = "manifestDurationFormat"
        case minSegmentLength = "minSegmentLength"
        case mode = "mode"
        case outputSelection = "outputSelection"
        case programDateTime = "programDateTime"
        case programDateTimeClock = "programDateTimeClock"
        case programDateTimePeriod = "programDateTimePeriod"
        case redundantManifest = "redundantManifest"
        case segmentLength = "segmentLength"
        case segmentationMode = "segmentationMode"
        case segmentsPerSubdirectory = "segmentsPerSubdirectory"
        case streamInfResolution = "streamInfResolution"
        case timedMetadataId3Frame = "timedMetadataId3Frame"
        case timedMetadataId3Period = "timedMetadataId3Period"
        case timestampDeltaMilliseconds = "timestampDeltaMilliseconds"
        case tsFileMode = "tsFileMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = adMarkers {
            var adMarkersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adMarkers)
            for hlsadmarkers0 in adMarkers {
                try adMarkersContainer.encode(hlsadmarkers0.rawValue)
            }
        }
        if let baseUrlContent = self.baseUrlContent {
            try encodeContainer.encode(baseUrlContent, forKey: .baseUrlContent)
        }
        if let baseUrlContent1 = self.baseUrlContent1 {
            try encodeContainer.encode(baseUrlContent1, forKey: .baseUrlContent1)
        }
        if let baseUrlManifest = self.baseUrlManifest {
            try encodeContainer.encode(baseUrlManifest, forKey: .baseUrlManifest)
        }
        if let baseUrlManifest1 = self.baseUrlManifest1 {
            try encodeContainer.encode(baseUrlManifest1, forKey: .baseUrlManifest1)
        }
        if let captionLanguageMappings = captionLanguageMappings {
            var captionLanguageMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionLanguageMappings)
            for captionlanguagemapping0 in captionLanguageMappings {
                try captionLanguageMappingsContainer.encode(captionlanguagemapping0)
            }
        }
        if let captionLanguageSetting = self.captionLanguageSetting {
            try encodeContainer.encode(captionLanguageSetting.rawValue, forKey: .captionLanguageSetting)
        }
        if let clientCache = self.clientCache {
            try encodeContainer.encode(clientCache.rawValue, forKey: .clientCache)
        }
        if let codecSpecification = self.codecSpecification {
            try encodeContainer.encode(codecSpecification.rawValue, forKey: .codecSpecification)
        }
        if let constantIv = self.constantIv {
            try encodeContainer.encode(constantIv, forKey: .constantIv)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let directoryStructure = self.directoryStructure {
            try encodeContainer.encode(directoryStructure.rawValue, forKey: .directoryStructure)
        }
        if let discontinuityTags = self.discontinuityTags {
            try encodeContainer.encode(discontinuityTags.rawValue, forKey: .discontinuityTags)
        }
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let hlsCdnSettings = self.hlsCdnSettings {
            try encodeContainer.encode(hlsCdnSettings, forKey: .hlsCdnSettings)
        }
        if let hlsId3SegmentTagging = self.hlsId3SegmentTagging {
            try encodeContainer.encode(hlsId3SegmentTagging.rawValue, forKey: .hlsId3SegmentTagging)
        }
        if let iFrameOnlyPlaylists = self.iFrameOnlyPlaylists {
            try encodeContainer.encode(iFrameOnlyPlaylists.rawValue, forKey: .iFrameOnlyPlaylists)
        }
        if let incompleteSegmentBehavior = self.incompleteSegmentBehavior {
            try encodeContainer.encode(incompleteSegmentBehavior.rawValue, forKey: .incompleteSegmentBehavior)
        }
        if let indexNSegments = self.indexNSegments {
            try encodeContainer.encode(indexNSegments, forKey: .indexNSegments)
        }
        if let inputLossAction = self.inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let ivInManifest = self.ivInManifest {
            try encodeContainer.encode(ivInManifest.rawValue, forKey: .ivInManifest)
        }
        if let ivSource = self.ivSource {
            try encodeContainer.encode(ivSource.rawValue, forKey: .ivSource)
        }
        if let keepSegments = self.keepSegments {
            try encodeContainer.encode(keepSegments, forKey: .keepSegments)
        }
        if let keyFormat = self.keyFormat {
            try encodeContainer.encode(keyFormat, forKey: .keyFormat)
        }
        if let keyFormatVersions = self.keyFormatVersions {
            try encodeContainer.encode(keyFormatVersions, forKey: .keyFormatVersions)
        }
        if let keyProviderSettings = self.keyProviderSettings {
            try encodeContainer.encode(keyProviderSettings, forKey: .keyProviderSettings)
        }
        if let manifestCompression = self.manifestCompression {
            try encodeContainer.encode(manifestCompression.rawValue, forKey: .manifestCompression)
        }
        if let manifestDurationFormat = self.manifestDurationFormat {
            try encodeContainer.encode(manifestDurationFormat.rawValue, forKey: .manifestDurationFormat)
        }
        if let minSegmentLength = self.minSegmentLength {
            try encodeContainer.encode(minSegmentLength, forKey: .minSegmentLength)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let outputSelection = self.outputSelection {
            try encodeContainer.encode(outputSelection.rawValue, forKey: .outputSelection)
        }
        if let programDateTime = self.programDateTime {
            try encodeContainer.encode(programDateTime.rawValue, forKey: .programDateTime)
        }
        if let programDateTimeClock = self.programDateTimeClock {
            try encodeContainer.encode(programDateTimeClock.rawValue, forKey: .programDateTimeClock)
        }
        if let programDateTimePeriod = self.programDateTimePeriod {
            try encodeContainer.encode(programDateTimePeriod, forKey: .programDateTimePeriod)
        }
        if let redundantManifest = self.redundantManifest {
            try encodeContainer.encode(redundantManifest.rawValue, forKey: .redundantManifest)
        }
        if let segmentLength = self.segmentLength {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if let segmentationMode = self.segmentationMode {
            try encodeContainer.encode(segmentationMode.rawValue, forKey: .segmentationMode)
        }
        if let segmentsPerSubdirectory = self.segmentsPerSubdirectory {
            try encodeContainer.encode(segmentsPerSubdirectory, forKey: .segmentsPerSubdirectory)
        }
        if let streamInfResolution = self.streamInfResolution {
            try encodeContainer.encode(streamInfResolution.rawValue, forKey: .streamInfResolution)
        }
        if let timedMetadataId3Frame = self.timedMetadataId3Frame {
            try encodeContainer.encode(timedMetadataId3Frame.rawValue, forKey: .timedMetadataId3Frame)
        }
        if let timedMetadataId3Period = self.timedMetadataId3Period {
            try encodeContainer.encode(timedMetadataId3Period, forKey: .timedMetadataId3Period)
        }
        if let timestampDeltaMilliseconds = self.timestampDeltaMilliseconds {
            try encodeContainer.encode(timestampDeltaMilliseconds, forKey: .timestampDeltaMilliseconds)
        }
        if let tsFileMode = self.tsFileMode {
            try encodeContainer.encode(tsFileMode.rawValue, forKey: .tsFileMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.HlsAdMarkers?].self, forKey: .adMarkers)
        var adMarkersDecoded0:[MediaLiveClientTypes.HlsAdMarkers]? = nil
        if let adMarkersContainer = adMarkersContainer {
            adMarkersDecoded0 = [MediaLiveClientTypes.HlsAdMarkers]()
            for enum0 in adMarkersContainer {
                if let enum0 = enum0 {
                    adMarkersDecoded0?.append(enum0)
                }
            }
        }
        adMarkers = adMarkersDecoded0
        let baseUrlContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseUrlContent)
        baseUrlContent = baseUrlContentDecoded
        let baseUrlContent1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseUrlContent1)
        baseUrlContent1 = baseUrlContent1Decoded
        let baseUrlManifestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseUrlManifest)
        baseUrlManifest = baseUrlManifestDecoded
        let baseUrlManifest1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseUrlManifest1)
        baseUrlManifest1 = baseUrlManifest1Decoded
        let captionLanguageMappingsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.CaptionLanguageMapping?].self, forKey: .captionLanguageMappings)
        var captionLanguageMappingsDecoded0:[MediaLiveClientTypes.CaptionLanguageMapping]? = nil
        if let captionLanguageMappingsContainer = captionLanguageMappingsContainer {
            captionLanguageMappingsDecoded0 = [MediaLiveClientTypes.CaptionLanguageMapping]()
            for structure0 in captionLanguageMappingsContainer {
                if let structure0 = structure0 {
                    captionLanguageMappingsDecoded0?.append(structure0)
                }
            }
        }
        captionLanguageMappings = captionLanguageMappingsDecoded0
        let captionLanguageSettingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsCaptionLanguageSetting.self, forKey: .captionLanguageSetting)
        captionLanguageSetting = captionLanguageSettingDecoded
        let clientCacheDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsClientCache.self, forKey: .clientCache)
        clientCache = clientCacheDecoded
        let codecSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsCodecSpecification.self, forKey: .codecSpecification)
        codecSpecification = codecSpecificationDecoded
        let constantIvDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .constantIv)
        constantIv = constantIvDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let directoryStructureDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsDirectoryStructure.self, forKey: .directoryStructure)
        directoryStructure = directoryStructureDecoded
        let discontinuityTagsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsDiscontinuityTags.self, forKey: .discontinuityTags)
        discontinuityTags = discontinuityTagsDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsEncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let hlsCdnSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsCdnSettings.self, forKey: .hlsCdnSettings)
        hlsCdnSettings = hlsCdnSettingsDecoded
        let hlsId3SegmentTaggingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsId3SegmentTaggingState.self, forKey: .hlsId3SegmentTagging)
        hlsId3SegmentTagging = hlsId3SegmentTaggingDecoded
        let iFrameOnlyPlaylistsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.IFrameOnlyPlaylistType.self, forKey: .iFrameOnlyPlaylists)
        iFrameOnlyPlaylists = iFrameOnlyPlaylistsDecoded
        let incompleteSegmentBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsIncompleteSegmentBehavior.self, forKey: .incompleteSegmentBehavior)
        incompleteSegmentBehavior = incompleteSegmentBehaviorDecoded
        let indexNSegmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .indexNSegments)
        indexNSegments = indexNSegmentsDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossActionForHlsOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let ivInManifestDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsIvInManifest.self, forKey: .ivInManifest)
        ivInManifest = ivInManifestDecoded
        let ivSourceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsIvSource.self, forKey: .ivSource)
        ivSource = ivSourceDecoded
        let keepSegmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .keepSegments)
        keepSegments = keepSegmentsDecoded
        let keyFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyFormat)
        keyFormat = keyFormatDecoded
        let keyFormatVersionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyFormatVersions)
        keyFormatVersions = keyFormatVersionsDecoded
        let keyProviderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.KeyProviderSettings.self, forKey: .keyProviderSettings)
        keyProviderSettings = keyProviderSettingsDecoded
        let manifestCompressionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsManifestCompression.self, forKey: .manifestCompression)
        manifestCompression = manifestCompressionDecoded
        let manifestDurationFormatDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsManifestDurationFormat.self, forKey: .manifestDurationFormat)
        manifestDurationFormat = manifestDurationFormatDecoded
        let minSegmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSegmentLength)
        minSegmentLength = minSegmentLengthDecoded
        let modeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsMode.self, forKey: .mode)
        mode = modeDecoded
        let outputSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsOutputSelection.self, forKey: .outputSelection)
        outputSelection = outputSelectionDecoded
        let programDateTimeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsProgramDateTime.self, forKey: .programDateTime)
        programDateTime = programDateTimeDecoded
        let programDateTimeClockDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsProgramDateTimeClock.self, forKey: .programDateTimeClock)
        programDateTimeClock = programDateTimeClockDecoded
        let programDateTimePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programDateTimePeriod)
        programDateTimePeriod = programDateTimePeriodDecoded
        let redundantManifestDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsRedundantManifest.self, forKey: .redundantManifest)
        redundantManifest = redundantManifestDecoded
        let segmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let segmentationModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsSegmentationMode.self, forKey: .segmentationMode)
        segmentationMode = segmentationModeDecoded
        let segmentsPerSubdirectoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsPerSubdirectory)
        segmentsPerSubdirectory = segmentsPerSubdirectoryDecoded
        let streamInfResolutionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsStreamInfResolution.self, forKey: .streamInfResolution)
        streamInfResolution = streamInfResolutionDecoded
        let timedMetadataId3FrameDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsTimedMetadataId3Frame.self, forKey: .timedMetadataId3Frame)
        timedMetadataId3Frame = timedMetadataId3FrameDecoded
        let timedMetadataId3PeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedMetadataId3Period)
        timedMetadataId3Period = timedMetadataId3PeriodDecoded
        let timestampDeltaMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestampDeltaMilliseconds)
        timestampDeltaMilliseconds = timestampDeltaMillisecondsDecoded
        let tsFileModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsTsFileMode.self, forKey: .tsFileMode)
        tsFileMode = tsFileModeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Group Settings
    public struct HlsGroupSettings: Swift.Equatable {
        /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
        public var adMarkers: [MediaLiveClientTypes.HlsAdMarkers]?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrlContent: Swift.String?
        /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
        public var baseUrlContent1: Swift.String?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrlManifest: Swift.String?
        /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
        public var baseUrlManifest1: Swift.String?
        /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
        public var captionLanguageMappings: [MediaLiveClientTypes.CaptionLanguageMapping]?
        /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
        public var captionLanguageSetting: MediaLiveClientTypes.HlsCaptionLanguageSetting?
        /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
        public var clientCache: MediaLiveClientTypes.HlsClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public var codecSpecification: MediaLiveClientTypes.HlsCodecSpecification?
        /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
        public var constantIv: Swift.String?
        /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Place segments in subdirectories.
        public var directoryStructure: MediaLiveClientTypes.HlsDirectoryStructure?
        /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
        public var discontinuityTags: MediaLiveClientTypes.HlsDiscontinuityTags?
        /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
        public var encryptionType: MediaLiveClientTypes.HlsEncryptionType?
        /// Parameters that control interactions with the CDN.
        public var hlsCdnSettings: MediaLiveClientTypes.HlsCdnSettings?
        /// State of HLS ID3 Segment Tagging
        public var hlsId3SegmentTagging: MediaLiveClientTypes.HlsId3SegmentTaggingState?
        /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
        public var iFrameOnlyPlaylists: MediaLiveClientTypes.IFrameOnlyPlaylistType?
        /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
        public var incompleteSegmentBehavior: MediaLiveClientTypes.HlsIncompleteSegmentBehavior?
        /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
        public var indexNSegments: Swift.Int?
        /// Parameter that control output group behavior on input loss.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForHlsOut?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
        public var ivInManifest: MediaLiveClientTypes.HlsIvInManifest?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
        public var ivSource: MediaLiveClientTypes.HlsIvSource?
        /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
        public var keepSegments: Swift.Int?
        /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
        public var keyFormat: Swift.String?
        /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
        public var keyFormatVersions: Swift.String?
        /// The key provider settings.
        public var keyProviderSettings: MediaLiveClientTypes.KeyProviderSettings?
        /// When set to gzip, compresses HLS playlist.
        public var manifestCompression: MediaLiveClientTypes.HlsManifestCompression?
        /// Indicates whether the output manifest should use floating point or integer values for segment duration.
        public var manifestDurationFormat: MediaLiveClientTypes.HlsManifestDurationFormat?
        /// Minimum length of MPEG-2 Transport Stream segments in seconds. When set, minimum segment length is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
        public var minSegmentLength: Swift.Int?
        /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
        public var mode: MediaLiveClientTypes.HlsMode?
        /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
        public var outputSelection: MediaLiveClientTypes.HlsOutputSelection?
        /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
        public var programDateTime: MediaLiveClientTypes.HlsProgramDateTime?
        /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
        public var programDateTimeClock: MediaLiveClientTypes.HlsProgramDateTimeClock?
        /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
        public var programDateTimePeriod: Swift.Int?
        /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
        public var redundantManifest: MediaLiveClientTypes.HlsRedundantManifest?
        /// Length of MPEG-2 Transport Stream segments to create in seconds. Note that segments will end on the next keyframe after this duration, so actual segment length may be longer.
        public var segmentLength: Swift.Int?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public var segmentationMode: MediaLiveClientTypes.HlsSegmentationMode?
        /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
        public var segmentsPerSubdirectory: Swift.Int?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public var streamInfResolution: MediaLiveClientTypes.HlsStreamInfResolution?
        /// Indicates ID3 frame that has the timecode.
        public var timedMetadataId3Frame: MediaLiveClientTypes.HlsTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public var timedMetadataId3Period: Swift.Int?
        /// Provides an extra millisecond delta offset to fine tune the timestamps.
        public var timestampDeltaMilliseconds: Swift.Int?
        /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
        public var tsFileMode: MediaLiveClientTypes.HlsTsFileMode?

        public init (
            adMarkers: [MediaLiveClientTypes.HlsAdMarkers]? = nil,
            baseUrlContent: Swift.String? = nil,
            baseUrlContent1: Swift.String? = nil,
            baseUrlManifest: Swift.String? = nil,
            baseUrlManifest1: Swift.String? = nil,
            captionLanguageMappings: [MediaLiveClientTypes.CaptionLanguageMapping]? = nil,
            captionLanguageSetting: MediaLiveClientTypes.HlsCaptionLanguageSetting? = nil,
            clientCache: MediaLiveClientTypes.HlsClientCache? = nil,
            codecSpecification: MediaLiveClientTypes.HlsCodecSpecification? = nil,
            constantIv: Swift.String? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            directoryStructure: MediaLiveClientTypes.HlsDirectoryStructure? = nil,
            discontinuityTags: MediaLiveClientTypes.HlsDiscontinuityTags? = nil,
            encryptionType: MediaLiveClientTypes.HlsEncryptionType? = nil,
            hlsCdnSettings: MediaLiveClientTypes.HlsCdnSettings? = nil,
            hlsId3SegmentTagging: MediaLiveClientTypes.HlsId3SegmentTaggingState? = nil,
            iFrameOnlyPlaylists: MediaLiveClientTypes.IFrameOnlyPlaylistType? = nil,
            incompleteSegmentBehavior: MediaLiveClientTypes.HlsIncompleteSegmentBehavior? = nil,
            indexNSegments: Swift.Int? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForHlsOut? = nil,
            ivInManifest: MediaLiveClientTypes.HlsIvInManifest? = nil,
            ivSource: MediaLiveClientTypes.HlsIvSource? = nil,
            keepSegments: Swift.Int? = nil,
            keyFormat: Swift.String? = nil,
            keyFormatVersions: Swift.String? = nil,
            keyProviderSettings: MediaLiveClientTypes.KeyProviderSettings? = nil,
            manifestCompression: MediaLiveClientTypes.HlsManifestCompression? = nil,
            manifestDurationFormat: MediaLiveClientTypes.HlsManifestDurationFormat? = nil,
            minSegmentLength: Swift.Int? = nil,
            mode: MediaLiveClientTypes.HlsMode? = nil,
            outputSelection: MediaLiveClientTypes.HlsOutputSelection? = nil,
            programDateTime: MediaLiveClientTypes.HlsProgramDateTime? = nil,
            programDateTimeClock: MediaLiveClientTypes.HlsProgramDateTimeClock? = nil,
            programDateTimePeriod: Swift.Int? = nil,
            redundantManifest: MediaLiveClientTypes.HlsRedundantManifest? = nil,
            segmentLength: Swift.Int? = nil,
            segmentationMode: MediaLiveClientTypes.HlsSegmentationMode? = nil,
            segmentsPerSubdirectory: Swift.Int? = nil,
            streamInfResolution: MediaLiveClientTypes.HlsStreamInfResolution? = nil,
            timedMetadataId3Frame: MediaLiveClientTypes.HlsTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil,
            timestampDeltaMilliseconds: Swift.Int? = nil,
            tsFileMode: MediaLiveClientTypes.HlsTsFileMode? = nil
        )
        {
            self.adMarkers = adMarkers
            self.baseUrlContent = baseUrlContent
            self.baseUrlContent1 = baseUrlContent1
            self.baseUrlManifest = baseUrlManifest
            self.baseUrlManifest1 = baseUrlManifest1
            self.captionLanguageMappings = captionLanguageMappings
            self.captionLanguageSetting = captionLanguageSetting
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.constantIv = constantIv
            self.destination = destination
            self.directoryStructure = directoryStructure
            self.discontinuityTags = discontinuityTags
            self.encryptionType = encryptionType
            self.hlsCdnSettings = hlsCdnSettings
            self.hlsId3SegmentTagging = hlsId3SegmentTagging
            self.iFrameOnlyPlaylists = iFrameOnlyPlaylists
            self.incompleteSegmentBehavior = incompleteSegmentBehavior
            self.indexNSegments = indexNSegments
            self.inputLossAction = inputLossAction
            self.ivInManifest = ivInManifest
            self.ivSource = ivSource
            self.keepSegments = keepSegments
            self.keyFormat = keyFormat
            self.keyFormatVersions = keyFormatVersions
            self.keyProviderSettings = keyProviderSettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minSegmentLength = minSegmentLength
            self.mode = mode
            self.outputSelection = outputSelection
            self.programDateTime = programDateTime
            self.programDateTimeClock = programDateTimeClock
            self.programDateTimePeriod = programDateTimePeriod
            self.redundantManifest = redundantManifest
            self.segmentLength = segmentLength
            self.segmentationMode = segmentationMode
            self.segmentsPerSubdirectory = segmentsPerSubdirectory
            self.streamInfResolution = streamInfResolution
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
            self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
            self.tsFileMode = tsFileMode
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls H265 Packaging Type
    public enum HlsH265PackagingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hev1
        case hvc1
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsH265PackagingType] {
            return [
                .hev1,
                .hvc1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hvc1: return "HVC1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsH265PackagingType(rawValue: rawValue) ?? HlsH265PackagingType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tag = "tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tag = self.tag {
            try encodeContainer.encode(tag, forKey: .tag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tag)
        tag = tagDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for the action to insert a user-defined ID3 tag in each HLS segment
    public struct HlsId3SegmentTaggingScheduleActionSettings: Swift.Equatable {
        /// ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
        /// This member is required.
        public var tag: Swift.String?

        public init (
            tag: Swift.String? = nil
        )
        {
            self.tag = tag
        }
    }

}

extension MediaLiveClientTypes {
    /// State of HLS ID3 Segment Tagging
    public enum HlsId3SegmentTaggingState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsId3SegmentTaggingState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsId3SegmentTaggingState(rawValue: rawValue) ?? HlsId3SegmentTaggingState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Incomplete Segment Behavior
    public enum HlsIncompleteSegmentBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case suppress
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIncompleteSegmentBehavior] {
            return [
                .auto,
                .suppress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .suppress: return "SUPPRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsIncompleteSegmentBehavior(rawValue: rawValue) ?? HlsIncompleteSegmentBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsInputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bandwidth = "bandwidth"
        case bufferSegments = "bufferSegments"
        case retries = "retries"
        case retryInterval = "retryInterval"
        case scte35Source = "scte35Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bandwidth = self.bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let bufferSegments = self.bufferSegments {
            try encodeContainer.encode(bufferSegments, forKey: .bufferSegments)
        }
        if let retries = self.retries {
            try encodeContainer.encode(retries, forKey: .retries)
        }
        if let retryInterval = self.retryInterval {
            try encodeContainer.encode(retryInterval, forKey: .retryInterval)
        }
        if let scte35Source = self.scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let bufferSegmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufferSegments)
        bufferSegments = bufferSegmentsDecoded
        let retriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retries)
        retries = retriesDecoded
        let retryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryInterval)
        retryInterval = retryIntervalDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsScte35SourceType.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Input Settings
    public struct HlsInputSettings: Swift.Equatable {
        /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
        public var bandwidth: Swift.Int?
        /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
        public var bufferSegments: Swift.Int?
        /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
        public var retries: Swift.Int?
        /// The number of seconds between retries when an attempt to read a manifest or segment fails.
        public var retryInterval: Swift.Int?
        /// Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
        public var scte35Source: MediaLiveClientTypes.HlsScte35SourceType?

        public init (
            bandwidth: Swift.Int? = nil,
            bufferSegments: Swift.Int? = nil,
            retries: Swift.Int? = nil,
            retryInterval: Swift.Int? = nil,
            scte35Source: MediaLiveClientTypes.HlsScte35SourceType? = nil
        )
        {
            self.bandwidth = bandwidth
            self.bufferSegments = bufferSegments
            self.retries = retries
            self.retryInterval = retryInterval
            self.scte35Source = scte35Source
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Iv In Manifest
    public enum HlsIvInManifest: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIvInManifest] {
            return [
                .exclude,
                .include,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsIvInManifest(rawValue: rawValue) ?? HlsIvInManifest.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Iv Source
    public enum HlsIvSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case explicit
        case followsSegmentNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIvSource] {
            return [
                .explicit,
                .followsSegmentNumber,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .explicit: return "EXPLICIT"
            case .followsSegmentNumber: return "FOLLOWS_SEGMENT_NUMBER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsIvSource(rawValue: rawValue) ?? HlsIvSource.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Manifest Compression
    public enum HlsManifestCompression: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsManifestCompression] {
            return [
                .gzip,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsManifestCompression(rawValue: rawValue) ?? HlsManifestCompression.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Manifest Duration Format
    public enum HlsManifestDurationFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case floatingPoint
        case integer
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsManifestDurationFormat] {
            return [
                .floatingPoint,
                .integer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .floatingPoint: return "FLOATING_POINT"
            case .integer: return "INTEGER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsManifestDurationFormat(rawValue: rawValue) ?? HlsManifestDurationFormat.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsMediaStoreSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case mediaStoreStorageClass = "mediaStoreStorageClass"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let filecacheDuration = self.filecacheDuration {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let mediaStoreStorageClass = self.mediaStoreStorageClass {
            try encodeContainer.encode(mediaStoreStorageClass.rawValue, forKey: .mediaStoreStorageClass)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let mediaStoreStorageClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsMediaStoreStorageClass.self, forKey: .mediaStoreStorageClass)
        mediaStoreStorageClass = mediaStoreStorageClassDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Media Store Settings
    public struct HlsMediaStoreSettings: Swift.Equatable {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
        public var mediaStoreStorageClass: MediaLiveClientTypes.HlsMediaStoreStorageClass?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init (
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            mediaStoreStorageClass: MediaLiveClientTypes.HlsMediaStoreStorageClass? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.mediaStoreStorageClass = mediaStoreStorageClass
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Media Store Storage Class
    public enum HlsMediaStoreStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case temporal
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsMediaStoreStorageClass] {
            return [
                .temporal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .temporal: return "TEMPORAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsMediaStoreStorageClass(rawValue: rawValue) ?? HlsMediaStoreStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Mode
    public enum HlsMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case live
        case vod
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsMode] {
            return [
                .live,
                .vod,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .live: return "LIVE"
            case .vod: return "VOD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsMode(rawValue: rawValue) ?? HlsMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Output Selection
    public enum HlsOutputSelection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case manifestsAndSegments
        case segmentsOnly
        case variantManifestsAndSegments
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsOutputSelection] {
            return [
                .manifestsAndSegments,
                .segmentsOnly,
                .variantManifestsAndSegments,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .manifestsAndSegments: return "MANIFESTS_AND_SEGMENTS"
            case .segmentsOnly: return "SEGMENTS_ONLY"
            case .variantManifestsAndSegments: return "VARIANT_MANIFESTS_AND_SEGMENTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsOutputSelection(rawValue: rawValue) ?? HlsOutputSelection.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case h265PackagingType = "h265PackagingType"
        case hlsSettings = "hlsSettings"
        case nameModifier = "nameModifier"
        case segmentModifier = "segmentModifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let h265PackagingType = self.h265PackagingType {
            try encodeContainer.encode(h265PackagingType.rawValue, forKey: .h265PackagingType)
        }
        if let hlsSettings = self.hlsSettings {
            try encodeContainer.encode(hlsSettings, forKey: .hlsSettings)
        }
        if let nameModifier = self.nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
        if let segmentModifier = self.segmentModifier {
            try encodeContainer.encode(segmentModifier, forKey: .segmentModifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let h265PackagingTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsH265PackagingType.self, forKey: .h265PackagingType)
        h265PackagingType = h265PackagingTypeDecoded
        let hlsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsSettings.self, forKey: .hlsSettings)
        hlsSettings = hlsSettingsDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
        let segmentModifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentModifier)
        segmentModifier = segmentModifierDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Output Settings
    public struct HlsOutputSettings: Swift.Equatable {
        /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
        public var h265PackagingType: MediaLiveClientTypes.HlsH265PackagingType?
        /// Settings regarding the underlying stream. These settings are different for audio-only outputs.
        /// This member is required.
        public var hlsSettings: MediaLiveClientTypes.HlsSettings?
        /// String concatenated to the end of the destination filename. Accepts "Format Identifiers":#formatIdentifierParameters.
        public var nameModifier: Swift.String?
        /// String concatenated to end of segment filenames.
        public var segmentModifier: Swift.String?

        public init (
            h265PackagingType: MediaLiveClientTypes.HlsH265PackagingType? = nil,
            hlsSettings: MediaLiveClientTypes.HlsSettings? = nil,
            nameModifier: Swift.String? = nil,
            segmentModifier: Swift.String? = nil
        )
        {
            self.h265PackagingType = h265PackagingType
            self.hlsSettings = hlsSettings
            self.nameModifier = nameModifier
            self.segmentModifier = segmentModifier
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Program Date Time
    public enum HlsProgramDateTime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsProgramDateTime] {
            return [
                .exclude,
                .include,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsProgramDateTime(rawValue: rawValue) ?? HlsProgramDateTime.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Program Date Time Clock
    public enum HlsProgramDateTimeClock: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case initializeFromOutputTimecode
        case systemClock
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsProgramDateTimeClock] {
            return [
                .initializeFromOutputTimecode,
                .systemClock,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .initializeFromOutputTimecode: return "INITIALIZE_FROM_OUTPUT_TIMECODE"
            case .systemClock: return "SYSTEM_CLOCK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsProgramDateTimeClock(rawValue: rawValue) ?? HlsProgramDateTimeClock.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Redundant Manifest
    public enum HlsRedundantManifest: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsRedundantManifest] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsRedundantManifest(rawValue: rawValue) ?? HlsRedundantManifest.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsS3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cannedAcl = "cannedAcl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cannedAcl = self.cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cannedAclDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.S3CannedAcl.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls S3 Settings
    public struct HlsS3Settings: Swift.Equatable {
        /// Specify the canned ACL to apply to each S3 request. Defaults to none.
        public var cannedAcl: MediaLiveClientTypes.S3CannedAcl?

        public init (
            cannedAcl: MediaLiveClientTypes.S3CannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Scte35 Source Type
    public enum HlsScte35SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case manifest
        case segments
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsScte35SourceType] {
            return [
                .manifest,
                .segments,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .manifest: return "MANIFEST"
            case .segments: return "SEGMENTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsScte35SourceType(rawValue: rawValue) ?? HlsScte35SourceType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Segmentation Mode
    public enum HlsSegmentationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case useInputSegmentation
        case useSegmentDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsSegmentationMode] {
            return [
                .useInputSegmentation,
                .useSegmentDuration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .useInputSegmentation: return "USE_INPUT_SEGMENTATION"
            case .useSegmentDuration: return "USE_SEGMENT_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsSegmentationMode(rawValue: rawValue) ?? HlsSegmentationMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioOnlyHlsSettings = "audioOnlyHlsSettings"
        case fmp4HlsSettings = "fmp4HlsSettings"
        case frameCaptureHlsSettings = "frameCaptureHlsSettings"
        case standardHlsSettings = "standardHlsSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioOnlyHlsSettings = self.audioOnlyHlsSettings {
            try encodeContainer.encode(audioOnlyHlsSettings, forKey: .audioOnlyHlsSettings)
        }
        if let fmp4HlsSettings = self.fmp4HlsSettings {
            try encodeContainer.encode(fmp4HlsSettings, forKey: .fmp4HlsSettings)
        }
        if let frameCaptureHlsSettings = self.frameCaptureHlsSettings {
            try encodeContainer.encode(frameCaptureHlsSettings, forKey: .frameCaptureHlsSettings)
        }
        if let standardHlsSettings = self.standardHlsSettings {
            try encodeContainer.encode(standardHlsSettings, forKey: .standardHlsSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioOnlyHlsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioOnlyHlsSettings.self, forKey: .audioOnlyHlsSettings)
        audioOnlyHlsSettings = audioOnlyHlsSettingsDecoded
        let fmp4HlsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Fmp4HlsSettings.self, forKey: .fmp4HlsSettings)
        fmp4HlsSettings = fmp4HlsSettingsDecoded
        let frameCaptureHlsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureHlsSettings.self, forKey: .frameCaptureHlsSettings)
        frameCaptureHlsSettings = frameCaptureHlsSettingsDecoded
        let standardHlsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StandardHlsSettings.self, forKey: .standardHlsSettings)
        standardHlsSettings = standardHlsSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Settings
    public struct HlsSettings: Swift.Equatable {
        /// Audio Only Hls Settings
        public var audioOnlyHlsSettings: MediaLiveClientTypes.AudioOnlyHlsSettings?
        /// Fmp4 Hls Settings
        public var fmp4HlsSettings: MediaLiveClientTypes.Fmp4HlsSettings?
        /// Frame Capture Hls Settings
        public var frameCaptureHlsSettings: MediaLiveClientTypes.FrameCaptureHlsSettings?
        /// Standard Hls Settings
        public var standardHlsSettings: MediaLiveClientTypes.StandardHlsSettings?

        public init (
            audioOnlyHlsSettings: MediaLiveClientTypes.AudioOnlyHlsSettings? = nil,
            fmp4HlsSettings: MediaLiveClientTypes.Fmp4HlsSettings? = nil,
            frameCaptureHlsSettings: MediaLiveClientTypes.FrameCaptureHlsSettings? = nil,
            standardHlsSettings: MediaLiveClientTypes.StandardHlsSettings? = nil
        )
        {
            self.audioOnlyHlsSettings = audioOnlyHlsSettings
            self.fmp4HlsSettings = fmp4HlsSettings
            self.frameCaptureHlsSettings = frameCaptureHlsSettings
            self.standardHlsSettings = standardHlsSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Stream Inf Resolution
    public enum HlsStreamInfResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsStreamInfResolution] {
            return [
                .exclude,
                .include,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsStreamInfResolution(rawValue: rawValue) ?? HlsStreamInfResolution.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Timed Metadata Id3 Frame
    public enum HlsTimedMetadataId3Frame: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case priv
        case tdrl
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsTimedMetadataId3Frame] {
            return [
                .none,
                .priv,
                .tdrl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .priv: return "PRIV"
            case .tdrl: return "TDRL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsTimedMetadataId3Frame(rawValue: rawValue) ?? HlsTimedMetadataId3Frame.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id3 = "id3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id3 = self.id3 {
            try encodeContainer.encode(id3, forKey: .id3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let id3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id3)
        id3 = id3Decoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for the action to emit HLS metadata
    public struct HlsTimedMetadataScheduleActionSettings: Swift.Equatable {
        /// Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
        /// This member is required.
        public var id3: Swift.String?

        public init (
            id3: Swift.String? = nil
        )
        {
            self.id3 = id3
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Ts File Mode
    public enum HlsTsFileMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case segmentedFiles
        case singleFile
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsTsFileMode] {
            return [
                .segmentedFiles,
                .singleFile,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .segmentedFiles: return "SEGMENTED_FILES"
            case .singleFile: return "SINGLE_FILE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsTsFileMode(rawValue: rawValue) ?? HlsTsFileMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Webdav Http Transfer Mode
    public enum HlsWebdavHttpTransferMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case chunked
        case nonChunked
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsWebdavHttpTransferMode] {
            return [
                .chunked,
                .nonChunked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .chunked: return "CHUNKED"
            case .nonChunked: return "NON_CHUNKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HlsWebdavHttpTransferMode(rawValue: rawValue) ?? HlsWebdavHttpTransferMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.HlsWebdavSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionRetryInterval = "connectionRetryInterval"
        case filecacheDuration = "filecacheDuration"
        case httpTransferMode = "httpTransferMode"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let filecacheDuration = self.filecacheDuration {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let httpTransferMode = self.httpTransferMode {
            try encodeContainer.encode(httpTransferMode.rawValue, forKey: .httpTransferMode)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let filecacheDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let httpTransferModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsWebdavHttpTransferMode.self, forKey: .httpTransferMode)
        httpTransferMode = httpTransferModeDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension MediaLiveClientTypes {
    /// Hls Webdav Settings
    public struct HlsWebdavSettings: Swift.Equatable {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Specify whether or not to use chunked transfer encoding to WebDAV.
        public var httpTransferMode: MediaLiveClientTypes.HlsWebdavHttpTransferMode?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init (
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            httpTransferMode: MediaLiveClientTypes.HlsWebdavHttpTransferMode? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.httpTransferMode = httpTransferMode
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes.HtmlMotionGraphicsSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Html Motion Graphics Settings
    public struct HtmlMotionGraphicsSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes {
    /// When set to "standard", an I-Frame only playlist will be written out for each video output in the output group. This I-Frame only playlist will contain byte range offsets pointing to the I-frame(s) in each segment.
    public enum IFrameOnlyPlaylistType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [IFrameOnlyPlaylistType] {
            return [
                .disabled,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IFrameOnlyPlaylistType(rawValue: rawValue) ?? IFrameOnlyPlaylistType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Settings to configure an action so that it occurs as soon as possible.
    public struct ImmediateModeScheduleActionStartSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.Input: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case attachedChannels = "attachedChannels"
        case destinations = "destinations"
        case id = "id"
        case inputClass = "inputClass"
        case inputDevices = "inputDevices"
        case inputPartnerIds = "inputPartnerIds"
        case inputSourceType = "inputSourceType"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case securityGroups = "securityGroups"
        case sources = "sources"
        case state = "state"
        case tags = "tags"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attachedChannels = attachedChannels {
            var attachedChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedChannels)
            for __string0 in attachedChannels {
                try attachedChannelsContainer.encode(__string0)
            }
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for inputdestination0 in destinations {
                try destinationsContainer.encode(inputdestination0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputClass = self.inputClass {
            try encodeContainer.encode(inputClass.rawValue, forKey: .inputClass)
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for inputdevicesettings0 in inputDevices {
                try inputDevicesContainer.encode(inputdevicesettings0)
            }
        }
        if let inputPartnerIds = inputPartnerIds {
            var inputPartnerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputPartnerIds)
            for __string0 in inputPartnerIds {
                try inputPartnerIdsContainer.encode(__string0)
            }
        }
        if let inputSourceType = self.inputSourceType {
            try encodeContainer.encode(inputSourceType.rawValue, forKey: .inputSourceType)
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for mediaconnectflow0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(mediaconnectflow0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for __string0 in securityGroups {
                try securityGroupsContainer.encode(__string0)
            }
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for inputsource0 in sources {
                try sourcesContainer.encode(inputsource0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let attachedChannelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attachedChannels)
        var attachedChannelsDecoded0:[Swift.String]? = nil
        if let attachedChannelsContainer = attachedChannelsContainer {
            attachedChannelsDecoded0 = [Swift.String]()
            for string0 in attachedChannelsContainer {
                if let string0 = string0 {
                    attachedChannelsDecoded0?.append(string0)
                }
            }
        }
        attachedChannels = attachedChannelsDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.InputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.InputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputClass.self, forKey: .inputClass)
        inputClass = inputClassDecoded
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputPartnerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputPartnerIds)
        var inputPartnerIdsDecoded0:[Swift.String]? = nil
        if let inputPartnerIdsContainer = inputPartnerIdsContainer {
            inputPartnerIdsDecoded0 = [Swift.String]()
            for string0 in inputPartnerIdsContainer {
                if let string0 = string0 {
                    inputPartnerIdsDecoded0?.append(string0)
                }
            }
        }
        inputPartnerIds = inputPartnerIdsDecoded0
        let inputSourceTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSourceType.self, forKey: .inputSourceType)
        inputSourceType = inputSourceTypeDecoded
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaConnectFlow?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaLiveClientTypes.MediaConnectFlow]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaLiveClientTypes.MediaConnectFlow]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourcesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSource?].self, forKey: .sources)
        var sourcesDecoded0:[MediaLiveClientTypes.InputSource]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaLiveClientTypes.InputSource]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputType.self, forKey: .type)
        type = typeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for Input
    public struct Input: Swift.Equatable {
        /// The Unique ARN of the input (generated, immutable).
        public var arn: Swift.String?
        /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
        public var attachedChannels: [Swift.String]?
        /// A list of the destinations of the input (PUSH-type).
        public var destinations: [MediaLiveClientTypes.InputDestination]?
        /// The generated ID of the input (unique for user account, immutable).
        public var id: Swift.String?
        /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
        public var inputClass: MediaLiveClientTypes.InputClass?
        /// Settings for the input devices.
        public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
        /// A list of IDs for all Inputs which are partners of this one.
        public var inputPartnerIds: [Swift.String]?
        /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE and TS_FILE inputs.
        public var inputSourceType: MediaLiveClientTypes.InputSourceType?
        /// A list of MediaConnect Flows for this input.
        public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
        /// The user-assigned name (This is a mutable value).
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
        public var roleArn: Swift.String?
        /// A list of IDs for all the Input Security Groups attached to the input.
        public var securityGroups: [Swift.String]?
        /// A list of the sources of the input (PULL-type).
        public var sources: [MediaLiveClientTypes.InputSource]?
        /// Placeholder documentation for InputState
        public var state: MediaLiveClientTypes.InputState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?
        /// The different types of inputs that AWS Elemental MediaLive supports.
        public var type: MediaLiveClientTypes.InputType?

        public init (
            arn: Swift.String? = nil,
            attachedChannels: [Swift.String]? = nil,
            destinations: [MediaLiveClientTypes.InputDestination]? = nil,
            id: Swift.String? = nil,
            inputClass: MediaLiveClientTypes.InputClass? = nil,
            inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
            inputPartnerIds: [Swift.String]? = nil,
            inputSourceType: MediaLiveClientTypes.InputSourceType? = nil,
            mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            sources: [MediaLiveClientTypes.InputSource]? = nil,
            state: MediaLiveClientTypes.InputState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: MediaLiveClientTypes.InputType? = nil
        )
        {
            self.arn = arn
            self.attachedChannels = attachedChannels
            self.destinations = destinations
            self.id = id
            self.inputClass = inputClass
            self.inputDevices = inputDevices
            self.inputPartnerIds = inputPartnerIds
            self.inputSourceType = inputSourceType
            self.mediaConnectFlows = mediaConnectFlows
            self.name = name
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.sources = sources
            self.state = state
            self.tags = tags
            self.type = type
        }
    }

}

extension MediaLiveClientTypes.InputAttachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticInputFailoverSettings = "automaticInputFailoverSettings"
        case inputAttachmentName = "inputAttachmentName"
        case inputId = "inputId"
        case inputSettings = "inputSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticInputFailoverSettings = self.automaticInputFailoverSettings {
            try encodeContainer.encode(automaticInputFailoverSettings, forKey: .automaticInputFailoverSettings)
        }
        if let inputAttachmentName = self.inputAttachmentName {
            try encodeContainer.encode(inputAttachmentName, forKey: .inputAttachmentName)
        }
        if let inputId = self.inputId {
            try encodeContainer.encode(inputId, forKey: .inputId)
        }
        if let inputSettings = self.inputSettings {
            try encodeContainer.encode(inputSettings, forKey: .inputSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticInputFailoverSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AutomaticInputFailoverSettings.self, forKey: .automaticInputFailoverSettings)
        automaticInputFailoverSettings = automaticInputFailoverSettingsDecoded
        let inputAttachmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputAttachmentName)
        inputAttachmentName = inputAttachmentNameDecoded
        let inputIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputId)
        inputId = inputIdDecoded
        let inputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSettings.self, forKey: .inputSettings)
        inputSettings = inputSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InputAttachment
    public struct InputAttachment: Swift.Equatable {
        /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
        public var automaticInputFailoverSettings: MediaLiveClientTypes.AutomaticInputFailoverSettings?
        /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
        public var inputAttachmentName: Swift.String?
        /// The ID of the input
        public var inputId: Swift.String?
        /// Settings of an input (caption selector, etc.)
        public var inputSettings: MediaLiveClientTypes.InputSettings?

        public init (
            automaticInputFailoverSettings: MediaLiveClientTypes.AutomaticInputFailoverSettings? = nil,
            inputAttachmentName: Swift.String? = nil,
            inputId: Swift.String? = nil,
            inputSettings: MediaLiveClientTypes.InputSettings? = nil
        )
        {
            self.automaticInputFailoverSettings = automaticInputFailoverSettings
            self.inputAttachmentName = inputAttachmentName
            self.inputId = inputId
            self.inputSettings = inputSettings
        }
    }

}

extension MediaLiveClientTypes.InputChannelLevel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gain = "gain"
        case inputChannel = "inputChannel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gain = self.gain {
            try encodeContainer.encode(gain, forKey: .gain)
        }
        if let inputChannel = self.inputChannel {
            try encodeContainer.encode(inputChannel, forKey: .inputChannel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gainDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gain)
        gain = gainDecoded
        let inputChannelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inputChannel)
        inputChannel = inputChannelDecoded
    }
}

extension MediaLiveClientTypes {
    /// Input Channel Level
    public struct InputChannelLevel: Swift.Equatable {
        /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
        /// This member is required.
        public var gain: Swift.Int?
        /// The index of the input channel used as a source.
        /// This member is required.
        public var inputChannel: Swift.Int?

        public init (
            gain: Swift.Int? = nil,
            inputChannel: Swift.Int? = nil
        )
        {
            self.gain = gain
            self.inputChannel = inputChannel
        }
    }

}

extension MediaLiveClientTypes {
    /// A standard input has two sources and a single pipeline input only has one.
    public enum InputClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case singlePipeline
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [InputClass] {
            return [
                .singlePipeline,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .singlePipeline: return "SINGLE_PIPELINE"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputClass(rawValue: rawValue) ?? InputClass.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputClippingSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputTimecodeSource = "inputTimecodeSource"
        case startTimecode = "startTimecode"
        case stopTimecode = "stopTimecode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputTimecodeSource = self.inputTimecodeSource {
            try encodeContainer.encode(inputTimecodeSource.rawValue, forKey: .inputTimecodeSource)
        }
        if let startTimecode = self.startTimecode {
            try encodeContainer.encode(startTimecode, forKey: .startTimecode)
        }
        if let stopTimecode = self.stopTimecode {
            try encodeContainer.encode(stopTimecode, forKey: .stopTimecode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputTimecodeSourceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputTimecodeSource.self, forKey: .inputTimecodeSource)
        inputTimecodeSource = inputTimecodeSourceDecoded
        let startTimecodeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StartTimecode.self, forKey: .startTimecode)
        startTimecode = startTimecodeDecoded
        let stopTimecodeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StopTimecode.self, forKey: .stopTimecode)
        stopTimecode = stopTimecodeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
    public struct InputClippingSettings: Swift.Equatable {
        /// The source of the timecodes in the source being clipped.
        /// This member is required.
        public var inputTimecodeSource: MediaLiveClientTypes.InputTimecodeSource?
        /// Settings to identify the start of the clip.
        public var startTimecode: MediaLiveClientTypes.StartTimecode?
        /// Settings to identify the end of the clip.
        public var stopTimecode: MediaLiveClientTypes.StopTimecode?

        public init (
            inputTimecodeSource: MediaLiveClientTypes.InputTimecodeSource? = nil,
            startTimecode: MediaLiveClientTypes.StartTimecode? = nil,
            stopTimecode: MediaLiveClientTypes.StopTimecode? = nil
        )
        {
            self.inputTimecodeSource = inputTimecodeSource
            self.startTimecode = startTimecode
            self.stopTimecode = stopTimecode
        }
    }

}

extension MediaLiveClientTypes {
    /// codec in increasing order of complexity
    public enum InputCodec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case avc
        case hevc
        case mpeg2
        case sdkUnknown(Swift.String)

        public static var allCases: [InputCodec] {
            return [
                .avc,
                .hevc,
                .mpeg2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .avc: return "AVC"
            case .hevc: return "HEVC"
            case .mpeg2: return "MPEG2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputCodec(rawValue: rawValue) ?? InputCodec.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Deblock Filter
    public enum InputDeblockFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeblockFilter] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeblockFilter(rawValue: rawValue) ?? InputDeblockFilter.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Denoise Filter
    public enum InputDenoiseFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDenoiseFilter] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDenoiseFilter(rawValue: rawValue) ?? InputDenoiseFilter.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ip = "ip"
        case port = "port"
        case url = "url"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ip = self.ip {
            try encodeContainer.encode(ip, forKey: .ip)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ip)
        ip = ipDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .port)
        port = portDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDestinationVpc.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension MediaLiveClientTypes {
    /// The settings for a PUSH type input.
    public struct InputDestination: Swift.Equatable {
        /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
        public var ip: Swift.String?
        /// The port number for the input.
        public var port: Swift.String?
        /// This represents the endpoint that the customer stream will be pushed to.
        public var url: Swift.String?
        /// The properties for a VPC type input destination.
        public var vpc: MediaLiveClientTypes.InputDestinationVpc?

        public init (
            ip: Swift.String? = nil,
            port: Swift.String? = nil,
            url: Swift.String? = nil,
            vpc: MediaLiveClientTypes.InputDestinationVpc? = nil
        )
        {
            self.ip = ip
            self.port = port
            self.url = url
            self.vpc = vpc
        }
    }

}

extension MediaLiveClientTypes.InputDestinationRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamName = "streamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Endpoint settings for a PUSH type input.
    public struct InputDestinationRequest: Swift.Equatable {
        /// A unique name for the location the RTMP stream is being pushed to.
        public var streamName: Swift.String?

        public init (
            streamName: Swift.String? = nil
        )
        {
            self.streamName = streamName
        }
    }

}

extension MediaLiveClientTypes.InputDestinationVpc: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case networkInterfaceId = "networkInterfaceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let networkInterfaceId = self.networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// The properties for a VPC type input destination.
    public struct InputDestinationVpc: Swift.Equatable {
        /// The availability zone of the Input destination.
        public var availabilityZone: Swift.String?
        /// The network interface ID of the Input destination in the VPC.
        public var networkInterfaceId: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.networkInterfaceId = networkInterfaceId
        }
    }

}

extension MediaLiveClientTypes {
    /// The source at the input device that is currently active.
    public enum InputDeviceActiveInput: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hdmi
        case sdi
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceActiveInput] {
            return [
                .hdmi,
                .sdi,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hdmi: return "HDMI"
            case .sdi: return "SDI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceActiveInput(rawValue: rawValue) ?? InputDeviceActiveInput.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDeviceConfigurableSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredInput = "configuredInput"
        case latencyMs = "latencyMs"
        case maxBitrate = "maxBitrate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuredInput = self.configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let latencyMs = self.latencyMs {
            try encodeContainer.encode(latencyMs, forKey: .latencyMs)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let latencyMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latencyMs)
        latencyMs = latencyMsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Configurable settings for the input device.
    public struct InputDeviceConfigurableSettings: Swift.Equatable {
        /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
        public var configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput?
        /// The Link device's buffer size (latency) in milliseconds (ms).
        public var latencyMs: Swift.Int?
        /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
        public var maxBitrate: Swift.Int?

        public init (
            configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput? = nil,
            latencyMs: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil
        )
        {
            self.configuredInput = configuredInput
            self.latencyMs = latencyMs
            self.maxBitrate = maxBitrate
        }
    }

}

extension MediaLiveClientTypes {
    /// The source to activate (use) from the input device.
    public enum InputDeviceConfiguredInput: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case hdmi
        case sdi
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceConfiguredInput] {
            return [
                .auto,
                .hdmi,
                .sdi,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .hdmi: return "HDMI"
            case .sdi: return "SDI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceConfiguredInput(rawValue: rawValue) ?? InputDeviceConfiguredInput.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// The state of the connection between the input device and AWS.
    public enum InputDeviceConnectionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connected
        case disconnected
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceConnectionState] {
            return [
                .connected,
                .disconnected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .disconnected: return "DISCONNECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceConnectionState(rawValue: rawValue) ?? InputDeviceConnectionState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDeviceHdSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeInput = "activeInput"
        case configuredInput = "configuredInput"
        case deviceState = "deviceState"
        case framerate = "framerate"
        case height = "height"
        case latencyMs = "latencyMs"
        case maxBitrate = "maxBitrate"
        case scanType = "scanType"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInput = self.activeInput {
            try encodeContainer.encode(activeInput.rawValue, forKey: .activeInput)
        }
        if let configuredInput = self.configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let deviceState = self.deviceState {
            try encodeContainer.encode(deviceState.rawValue, forKey: .deviceState)
        }
        if let framerate = self.framerate {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let latencyMs = self.latencyMs {
            try encodeContainer.encode(latencyMs, forKey: .latencyMs)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceActiveInput.self, forKey: .activeInput)
        activeInput = activeInputDecoded
        let configuredInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let deviceStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceState.self, forKey: .deviceState)
        deviceState = deviceStateDecoded
        let framerateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .framerate)
        framerate = framerateDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
        let latencyMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latencyMs)
        latencyMs = latencyMsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings that describe the active source from the input device, and the video characteristics of that source.
    public struct InputDeviceHdSettings: Swift.Equatable {
        /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
        public var activeInput: MediaLiveClientTypes.InputDeviceActiveInput?
        /// The source at the input device that is currently active. You can specify this source.
        public var configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput?
        /// The state of the input device.
        public var deviceState: MediaLiveClientTypes.InputDeviceState?
        /// The frame rate of the video source.
        public var framerate: Swift.Double?
        /// The height of the video source, in pixels.
        public var height: Swift.Int?
        /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
        public var latencyMs: Swift.Int?
        /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
        public var maxBitrate: Swift.Int?
        /// The scan type of the video source.
        public var scanType: MediaLiveClientTypes.InputDeviceScanType?
        /// The width of the video source, in pixels.
        public var width: Swift.Int?

        public init (
            activeInput: MediaLiveClientTypes.InputDeviceActiveInput? = nil,
            configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput? = nil,
            deviceState: MediaLiveClientTypes.InputDeviceState? = nil,
            framerate: Swift.Double? = nil,
            height: Swift.Int? = nil,
            latencyMs: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            scanType: MediaLiveClientTypes.InputDeviceScanType? = nil,
            width: Swift.Int? = nil
        )
        {
            self.activeInput = activeInput
            self.configuredInput = configuredInput
            self.deviceState = deviceState
            self.framerate = framerate
            self.height = height
            self.latencyMs = latencyMs
            self.maxBitrate = maxBitrate
            self.scanType = scanType
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
    public enum InputDeviceIpScheme: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dhcp
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceIpScheme] {
            return [
                .dhcp,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dhcp: return "DHCP"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceIpScheme(rawValue: rawValue) ?? InputDeviceIpScheme.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDeviceNetworkSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsAddresses = "dnsAddresses"
        case gateway = "gateway"
        case ipAddress = "ipAddress"
        case ipScheme = "ipScheme"
        case subnetMask = "subnetMask"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsAddresses = dnsAddresses {
            var dnsAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsAddresses)
            for __string0 in dnsAddresses {
                try dnsAddressesContainer.encode(__string0)
            }
        }
        if let gateway = self.gateway {
            try encodeContainer.encode(gateway, forKey: .gateway)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let ipScheme = self.ipScheme {
            try encodeContainer.encode(ipScheme.rawValue, forKey: .ipScheme)
        }
        if let subnetMask = self.subnetMask {
            try encodeContainer.encode(subnetMask, forKey: .subnetMask)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dnsAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsAddresses)
        var dnsAddressesDecoded0:[Swift.String]? = nil
        if let dnsAddressesContainer = dnsAddressesContainer {
            dnsAddressesDecoded0 = [Swift.String]()
            for string0 in dnsAddressesContainer {
                if let string0 = string0 {
                    dnsAddressesDecoded0?.append(string0)
                }
            }
        }
        dnsAddresses = dnsAddressesDecoded0
        let gatewayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gateway)
        gateway = gatewayDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let ipSchemeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceIpScheme.self, forKey: .ipScheme)
        ipScheme = ipSchemeDecoded
        let subnetMaskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetMask)
        subnetMask = subnetMaskDecoded
    }
}

extension MediaLiveClientTypes {
    /// The network settings for the input device.
    public struct InputDeviceNetworkSettings: Swift.Equatable {
        /// The DNS addresses of the input device.
        public var dnsAddresses: [Swift.String]?
        /// The network gateway IP address.
        public var gateway: Swift.String?
        /// The IP address of the input device.
        public var ipAddress: Swift.String?
        /// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
        public var ipScheme: MediaLiveClientTypes.InputDeviceIpScheme?
        /// The subnet mask of the input device.
        public var subnetMask: Swift.String?

        public init (
            dnsAddresses: [Swift.String]? = nil,
            gateway: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            ipScheme: MediaLiveClientTypes.InputDeviceIpScheme? = nil,
            subnetMask: Swift.String? = nil
        )
        {
            self.dnsAddresses = dnsAddresses
            self.gateway = gateway
            self.ipAddress = ipAddress
            self.ipScheme = ipScheme
            self.subnetMask = subnetMask
        }
    }

}

extension MediaLiveClientTypes.InputDeviceRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for an input device.
    public struct InputDeviceRequest: Swift.Equatable {
        /// The unique ID for the device.
        public var id: Swift.String?

        public init (
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension MediaLiveClientTypes {
    /// The scan type of the video source.
    public enum InputDeviceScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceScanType] {
            return [
                .interlaced,
                .progressive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceScanType(rawValue: rawValue) ?? InputDeviceScanType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDeviceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for an input device.
    public struct InputDeviceSettings: Swift.Equatable {
        /// The unique ID for the device.
        public var id: Swift.String?

        public init (
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension MediaLiveClientTypes {
    /// The state of the input device.
    public enum InputDeviceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case idle
        case streaming
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceState] {
            return [
                .idle,
                .streaming,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .idle: return "IDLE"
            case .streaming: return "STREAMING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceState(rawValue: rawValue) ?? InputDeviceState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDeviceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let connectionState = self.connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let deviceSettingsSyncState = self.deviceSettingsSyncState {
            try encodeContainer.encode(deviceSettingsSyncState.rawValue, forKey: .deviceSettingsSyncState)
        }
        if let deviceUpdateStatus = self.deviceUpdateStatus {
            try encodeContainer.encode(deviceUpdateStatus.rawValue, forKey: .deviceUpdateStatus)
        }
        if let hdDeviceSettings = self.hdDeviceSettings {
            try encodeContainer.encode(hdDeviceSettings, forKey: .hdDeviceSettings)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let macAddress = self.macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkSettings = self.networkSettings {
            try encodeContainer.encode(networkSettings, forKey: .networkSettings)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uhdDeviceSettings = self.uhdDeviceSettings {
            try encodeContainer.encode(uhdDeviceSettings, forKey: .uhdDeviceSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Details of the input device.
    public struct InputDeviceSummary: Swift.Equatable {
        /// The unique ARN of the input device.
        public var arn: Swift.String?
        /// The state of the connection between the input device and AWS.
        public var connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
        /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
        public var deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
        /// The status of software on the input device.
        public var deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
        /// Settings that describe an input device that is type HD.
        public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
        /// The unique ID of the input device.
        public var id: Swift.String?
        /// The network MAC address of the input device.
        public var macAddress: Swift.String?
        /// A name that you specify for the input device.
        public var name: Swift.String?
        /// Network settings for the input device.
        public var networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
        /// The unique serial number of the input device.
        public var serialNumber: Swift.String?
        /// The type of the input device.
        public var type: MediaLiveClientTypes.InputDeviceType?
        /// Settings that describe an input device that is type UHD.
        public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?

        public init (
            arn: Swift.String? = nil,
            connectionState: MediaLiveClientTypes.InputDeviceConnectionState? = nil,
            deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState? = nil,
            deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus? = nil,
            hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings? = nil,
            id: Swift.String? = nil,
            macAddress: Swift.String? = nil,
            name: Swift.String? = nil,
            networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings? = nil,
            serialNumber: Swift.String? = nil,
            type: MediaLiveClientTypes.InputDeviceType? = nil,
            uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings? = nil
        )
        {
            self.arn = arn
            self.connectionState = connectionState
            self.deviceSettingsSyncState = deviceSettingsSyncState
            self.deviceUpdateStatus = deviceUpdateStatus
            self.hdDeviceSettings = hdDeviceSettings
            self.id = id
            self.macAddress = macAddress
            self.name = name
            self.networkSettings = networkSettings
            self.serialNumber = serialNumber
            self.type = type
            self.uhdDeviceSettings = uhdDeviceSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// The type of device transfer. INCOMING for an input device that is being transferred to you, OUTGOING for an input device that you are transferring to another AWS account.
    public enum InputDeviceTransferType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case incoming
        case outgoing
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceTransferType] {
            return [
                .incoming,
                .outgoing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .incoming: return "INCOMING"
            case .outgoing: return "OUTGOING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceTransferType(rawValue: rawValue) ?? InputDeviceTransferType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
    public enum InputDeviceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceType] {
            return [
                .hd,
                .uhd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hd: return "HD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputDeviceType(rawValue: rawValue) ?? InputDeviceType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputDeviceUhdSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeInput = "activeInput"
        case configuredInput = "configuredInput"
        case deviceState = "deviceState"
        case framerate = "framerate"
        case height = "height"
        case latencyMs = "latencyMs"
        case maxBitrate = "maxBitrate"
        case scanType = "scanType"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInput = self.activeInput {
            try encodeContainer.encode(activeInput.rawValue, forKey: .activeInput)
        }
        if let configuredInput = self.configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let deviceState = self.deviceState {
            try encodeContainer.encode(deviceState.rawValue, forKey: .deviceState)
        }
        if let framerate = self.framerate {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let latencyMs = self.latencyMs {
            try encodeContainer.encode(latencyMs, forKey: .latencyMs)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceActiveInput.self, forKey: .activeInput)
        activeInput = activeInputDecoded
        let configuredInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let deviceStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceState.self, forKey: .deviceState)
        deviceState = deviceStateDecoded
        let framerateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .framerate)
        framerate = framerateDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
        let latencyMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latencyMs)
        latencyMs = latencyMsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings that describe the active source from the input device, and the video characteristics of that source.
    public struct InputDeviceUhdSettings: Swift.Equatable {
        /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
        public var activeInput: MediaLiveClientTypes.InputDeviceActiveInput?
        /// The source at the input device that is currently active. You can specify this source.
        public var configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput?
        /// The state of the input device.
        public var deviceState: MediaLiveClientTypes.InputDeviceState?
        /// The frame rate of the video source.
        public var framerate: Swift.Double?
        /// The height of the video source, in pixels.
        public var height: Swift.Int?
        /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
        public var latencyMs: Swift.Int?
        /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
        public var maxBitrate: Swift.Int?
        /// The scan type of the video source.
        public var scanType: MediaLiveClientTypes.InputDeviceScanType?
        /// The width of the video source, in pixels.
        public var width: Swift.Int?

        public init (
            activeInput: MediaLiveClientTypes.InputDeviceActiveInput? = nil,
            configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput? = nil,
            deviceState: MediaLiveClientTypes.InputDeviceState? = nil,
            framerate: Swift.Double? = nil,
            height: Swift.Int? = nil,
            latencyMs: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            scanType: MediaLiveClientTypes.InputDeviceScanType? = nil,
            width: Swift.Int? = nil
        )
        {
            self.activeInput = activeInput
            self.configuredInput = configuredInput
            self.deviceState = deviceState
            self.framerate = framerate
            self.height = height
            self.latencyMs = latencyMs
            self.maxBitrate = maxBitrate
            self.scanType = scanType
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Input Filter
    public enum InputFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case disabled
        case forced
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFilter] {
            return [
                .auto,
                .disabled,
                .forced,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case .forced: return "FORCED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputFilter(rawValue: rawValue) ?? InputFilter.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordParam = "passwordParam"
        case uri = "uri"
        case username = "username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = self.passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let uri = self.uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Input Location
    public struct InputLocation: Swift.Equatable {
        /// key used to extract the password from EC2 Parameter store
        public var passwordParam: Swift.String?
        /// Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
        /// This member is required.
        public var uri: Swift.String?
        /// Documentation update needed
        public var username: Swift.String?

        public init (
            passwordParam: Swift.String? = nil,
            uri: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.uri = uri
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {
    /// Input Loss Action For Hls Out
    public enum InputLossActionForHlsOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emitOutput
        case pauseOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForHlsOut] {
            return [
                .emitOutput,
                .pauseOutput,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emitOutput: return "EMIT_OUTPUT"
            case .pauseOutput: return "PAUSE_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputLossActionForHlsOut(rawValue: rawValue) ?? InputLossActionForHlsOut.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Loss Action For Ms Smooth Out
    public enum InputLossActionForMsSmoothOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emitOutput
        case pauseOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForMsSmoothOut] {
            return [
                .emitOutput,
                .pauseOutput,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emitOutput: return "EMIT_OUTPUT"
            case .pauseOutput: return "PAUSE_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputLossActionForMsSmoothOut(rawValue: rawValue) ?? InputLossActionForMsSmoothOut.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Loss Action For Rtmp Out
    public enum InputLossActionForRtmpOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emitOutput
        case pauseOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForRtmpOut] {
            return [
                .emitOutput,
                .pauseOutput,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emitOutput: return "EMIT_OUTPUT"
            case .pauseOutput: return "PAUSE_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputLossActionForRtmpOut(rawValue: rawValue) ?? InputLossActionForRtmpOut.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Loss Action For Udp Out
    public enum InputLossActionForUdpOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dropProgram
        case dropTs
        case emitProgram
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForUdpOut] {
            return [
                .dropProgram,
                .dropTs,
                .emitProgram,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dropProgram: return "DROP_PROGRAM"
            case .dropTs: return "DROP_TS"
            case .emitProgram: return "EMIT_PROGRAM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputLossActionForUdpOut(rawValue: rawValue) ?? InputLossActionForUdpOut.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputLossBehavior: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blackFrameMsec = "blackFrameMsec"
        case inputLossImageColor = "inputLossImageColor"
        case inputLossImageSlate = "inputLossImageSlate"
        case inputLossImageType = "inputLossImageType"
        case repeatFrameMsec = "repeatFrameMsec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blackFrameMsec = self.blackFrameMsec {
            try encodeContainer.encode(blackFrameMsec, forKey: .blackFrameMsec)
        }
        if let inputLossImageColor = self.inputLossImageColor {
            try encodeContainer.encode(inputLossImageColor, forKey: .inputLossImageColor)
        }
        if let inputLossImageSlate = self.inputLossImageSlate {
            try encodeContainer.encode(inputLossImageSlate, forKey: .inputLossImageSlate)
        }
        if let inputLossImageType = self.inputLossImageType {
            try encodeContainer.encode(inputLossImageType.rawValue, forKey: .inputLossImageType)
        }
        if let repeatFrameMsec = self.repeatFrameMsec {
            try encodeContainer.encode(repeatFrameMsec, forKey: .repeatFrameMsec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackFrameMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blackFrameMsec)
        blackFrameMsec = blackFrameMsecDecoded
        let inputLossImageColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputLossImageColor)
        inputLossImageColor = inputLossImageColorDecoded
        let inputLossImageSlateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .inputLossImageSlate)
        inputLossImageSlate = inputLossImageSlateDecoded
        let inputLossImageTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossImageType.self, forKey: .inputLossImageType)
        inputLossImageType = inputLossImageTypeDecoded
        let repeatFrameMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .repeatFrameMsec)
        repeatFrameMsec = repeatFrameMsecDecoded
    }
}

extension MediaLiveClientTypes {
    /// Input Loss Behavior
    public struct InputLossBehavior: Swift.Equatable {
        /// Documentation update needed
        public var blackFrameMsec: Swift.Int?
        /// When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
        public var inputLossImageColor: Swift.String?
        /// When input loss image type is "slate" these fields specify the parameters for accessing the slate.
        public var inputLossImageSlate: MediaLiveClientTypes.InputLocation?
        /// Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
        public var inputLossImageType: MediaLiveClientTypes.InputLossImageType?
        /// Documentation update needed
        public var repeatFrameMsec: Swift.Int?

        public init (
            blackFrameMsec: Swift.Int? = nil,
            inputLossImageColor: Swift.String? = nil,
            inputLossImageSlate: MediaLiveClientTypes.InputLocation? = nil,
            inputLossImageType: MediaLiveClientTypes.InputLossImageType? = nil,
            repeatFrameMsec: Swift.Int? = nil
        )
        {
            self.blackFrameMsec = blackFrameMsec
            self.inputLossImageColor = inputLossImageColor
            self.inputLossImageSlate = inputLossImageSlate
            self.inputLossImageType = inputLossImageType
            self.repeatFrameMsec = repeatFrameMsec
        }
    }

}

extension MediaLiveClientTypes.InputLossFailoverSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputLossThresholdMsec = "inputLossThresholdMsec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputLossThresholdMsec = self.inputLossThresholdMsec {
            try encodeContainer.encode(inputLossThresholdMsec, forKey: .inputLossThresholdMsec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputLossThresholdMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inputLossThresholdMsec)
        inputLossThresholdMsec = inputLossThresholdMsecDecoded
    }
}

extension MediaLiveClientTypes {
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    public struct InputLossFailoverSettings: Swift.Equatable {
        /// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
        public var inputLossThresholdMsec: Swift.Int?

        public init (
            inputLossThresholdMsec: Swift.Int? = nil
        )
        {
            self.inputLossThresholdMsec = inputLossThresholdMsec
        }
    }

}

extension MediaLiveClientTypes {
    /// Input Loss Image Type
    public enum InputLossImageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case color
        case slate
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossImageType] {
            return [
                .color,
                .slate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .color: return "COLOR"
            case .slate: return "SLATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputLossImageType(rawValue: rawValue) ?? InputLossImageType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Maximum input bitrate in megabits per second. Bitrates up to 50 Mbps are supported currently.
    public enum InputMaximumBitrate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case max10Mbps
        case max20Mbps
        case max50Mbps
        case sdkUnknown(Swift.String)

        public static var allCases: [InputMaximumBitrate] {
            return [
                .max10Mbps,
                .max20Mbps,
                .max50Mbps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .max10Mbps: return "MAX_10_MBPS"
            case .max20Mbps: return "MAX_20_MBPS"
            case .max50Mbps: return "MAX_50_MBPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputMaximumBitrate(rawValue: rawValue) ?? InputMaximumBitrate.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Input preference when deciding which input to make active when a previously failed input has recovered. If "EQUAL_INPUT_PREFERENCE", then the active input will stay active as long as it is healthy. If "PRIMARY_INPUT_PREFERRED", then always switch back to the primary input when it is healthy.
    public enum InputPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equalInputPreference
        case primaryInputPreferred
        case sdkUnknown(Swift.String)

        public static var allCases: [InputPreference] {
            return [
                .equalInputPreference,
                .primaryInputPreferred,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equalInputPreference: return "EQUAL_INPUT_PREFERENCE"
            case .primaryInputPreferred: return "PRIMARY_INPUT_PREFERRED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputPreference(rawValue: rawValue) ?? InputPreference.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputPrepareScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case inputClippingSettings = "inputClippingSettings"
        case urlPath = "urlPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = self.inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let inputClippingSettings = self.inputClippingSettings {
            try encodeContainer.encode(inputClippingSettings, forKey: .inputClippingSettings)
        }
        if let urlPath = urlPath {
            var urlPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlPath)
            for __string0 in urlPath {
                try urlPathContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let inputClippingSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputClippingSettings.self, forKey: .inputClippingSettings)
        inputClippingSettings = inputClippingSettingsDecoded
        let urlPathContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlPath)
        var urlPathDecoded0:[Swift.String]? = nil
        if let urlPathContainer = urlPathContainer {
            urlPathDecoded0 = [Swift.String]()
            for string0 in urlPathContainer {
                if let string0 = string0 {
                    urlPathDecoded0?.append(string0)
                }
            }
        }
        urlPath = urlPathDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Action to prepare an input for a future immediate input switch.
    public struct InputPrepareScheduleActionSettings: Swift.Equatable {
        /// The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
        public var inputAttachmentNameReference: Swift.String?
        /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
        public var inputClippingSettings: MediaLiveClientTypes.InputClippingSettings?
        /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
        public var urlPath: [Swift.String]?

        public init (
            inputAttachmentNameReference: Swift.String? = nil,
            inputClippingSettings: MediaLiveClientTypes.InputClippingSettings? = nil,
            urlPath: [Swift.String]? = nil
        )
        {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.inputClippingSettings = inputClippingSettings
            self.urlPath = urlPath
        }
    }

}

extension MediaLiveClientTypes {
    /// Input resolution based on lines of vertical resolution in the input; SD is less than 720 lines, HD is 720 to 1080 lines, UHD is greater than 1080 lines
    public enum InputResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hd
        case sd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [InputResolution] {
            return [
                .hd,
                .sd,
                .uhd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hd: return "HD"
            case .sd: return "SD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputResolution(rawValue: rawValue) ?? InputResolution.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputSecurityGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for __string0 in inputs {
                try inputsContainer.encode(__string0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for inputwhitelistrule0 in whitelistRules {
                try whitelistRulesContainer.encode(inputwhitelistrule0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputWhitelistRule?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[MediaLiveClientTypes.InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [MediaLiveClientTypes.InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension MediaLiveClientTypes {
    /// An Input Security Group
    public struct InputSecurityGroup: Swift.Equatable {
        /// Unique ARN of Input Security Group
        public var arn: Swift.String?
        /// The Id of the Input Security Group
        public var id: Swift.String?
        /// The list of inputs currently using this Input Security Group.
        public var inputs: [Swift.String]?
        /// The current state of the Input Security Group.
        public var state: MediaLiveClientTypes.InputSecurityGroupState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?
        /// Whitelist rules and their sync status
        public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            inputs: [Swift.String]? = nil,
            state: MediaLiveClientTypes.InputSecurityGroupState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.inputs = inputs
            self.state = state
            self.tags = tags
            self.whitelistRules = whitelistRules
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InputSecurityGroupState
    public enum InputSecurityGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case idle
        case inUse
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSecurityGroupState] {
            return [
                .deleted,
                .idle,
                .inUse,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .idle: return "IDLE"
            case .inUse: return "IN_USE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputSecurityGroupState(rawValue: rawValue) ?? InputSecurityGroupState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioSelectors = "audioSelectors"
        case captionSelectors = "captionSelectors"
        case deblockFilter = "deblockFilter"
        case denoiseFilter = "denoiseFilter"
        case filterStrength = "filterStrength"
        case inputFilter = "inputFilter"
        case networkInputSettings = "networkInputSettings"
        case scte35Pid = "scte35Pid"
        case smpte2038DataPreference = "smpte2038DataPreference"
        case sourceEndBehavior = "sourceEndBehavior"
        case videoSelector = "videoSelector"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectors = audioSelectors {
            var audioSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioSelectors)
            for audioselector0 in audioSelectors {
                try audioSelectorsContainer.encode(audioselector0)
            }
        }
        if let captionSelectors = captionSelectors {
            var captionSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionSelectors)
            for captionselector0 in captionSelectors {
                try captionSelectorsContainer.encode(captionselector0)
            }
        }
        if let deblockFilter = self.deblockFilter {
            try encodeContainer.encode(deblockFilter.rawValue, forKey: .deblockFilter)
        }
        if let denoiseFilter = self.denoiseFilter {
            try encodeContainer.encode(denoiseFilter.rawValue, forKey: .denoiseFilter)
        }
        if let filterStrength = self.filterStrength {
            try encodeContainer.encode(filterStrength, forKey: .filterStrength)
        }
        if let inputFilter = self.inputFilter {
            try encodeContainer.encode(inputFilter.rawValue, forKey: .inputFilter)
        }
        if let networkInputSettings = self.networkInputSettings {
            try encodeContainer.encode(networkInputSettings, forKey: .networkInputSettings)
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let smpte2038DataPreference = self.smpte2038DataPreference {
            try encodeContainer.encode(smpte2038DataPreference.rawValue, forKey: .smpte2038DataPreference)
        }
        if let sourceEndBehavior = self.sourceEndBehavior {
            try encodeContainer.encode(sourceEndBehavior.rawValue, forKey: .sourceEndBehavior)
        }
        if let videoSelector = self.videoSelector {
            try encodeContainer.encode(videoSelector, forKey: .videoSelector)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.AudioSelector?].self, forKey: .audioSelectors)
        var audioSelectorsDecoded0:[MediaLiveClientTypes.AudioSelector]? = nil
        if let audioSelectorsContainer = audioSelectorsContainer {
            audioSelectorsDecoded0 = [MediaLiveClientTypes.AudioSelector]()
            for structure0 in audioSelectorsContainer {
                if let structure0 = structure0 {
                    audioSelectorsDecoded0?.append(structure0)
                }
            }
        }
        audioSelectors = audioSelectorsDecoded0
        let captionSelectorsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.CaptionSelector?].self, forKey: .captionSelectors)
        var captionSelectorsDecoded0:[MediaLiveClientTypes.CaptionSelector]? = nil
        if let captionSelectorsContainer = captionSelectorsContainer {
            captionSelectorsDecoded0 = [MediaLiveClientTypes.CaptionSelector]()
            for structure0 in captionSelectorsContainer {
                if let structure0 = structure0 {
                    captionSelectorsDecoded0?.append(structure0)
                }
            }
        }
        captionSelectors = captionSelectorsDecoded0
        let deblockFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeblockFilter.self, forKey: .deblockFilter)
        deblockFilter = deblockFilterDecoded
        let denoiseFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDenoiseFilter.self, forKey: .denoiseFilter)
        denoiseFilter = denoiseFilterDecoded
        let filterStrengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filterStrength)
        filterStrength = filterStrengthDecoded
        let inputFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputFilter.self, forKey: .inputFilter)
        inputFilter = inputFilterDecoded
        let networkInputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NetworkInputSettings.self, forKey: .networkInputSettings)
        networkInputSettings = networkInputSettingsDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let smpte2038DataPreferenceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Smpte2038DataPreference.self, forKey: .smpte2038DataPreference)
        smpte2038DataPreference = smpte2038DataPreferenceDecoded
        let sourceEndBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSourceEndBehavior.self, forKey: .sourceEndBehavior)
        sourceEndBehavior = sourceEndBehaviorDecoded
        let videoSelectorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelector.self, forKey: .videoSelector)
        videoSelector = videoSelectorDecoded
    }
}

extension MediaLiveClientTypes {
    /// Live Event input parameters. There can be multiple inputs in a single Live Event.
    public struct InputSettings: Swift.Equatable {
        /// Used to select the audio stream to decode for inputs that have multiple available.
        public var audioSelectors: [MediaLiveClientTypes.AudioSelector]?
        /// Used to select the caption input to use for inputs that have multiple available.
        public var captionSelectors: [MediaLiveClientTypes.CaptionSelector]?
        /// Enable or disable the deblock filter when filtering.
        public var deblockFilter: MediaLiveClientTypes.InputDeblockFilter?
        /// Enable or disable the denoise filter when filtering.
        public var denoiseFilter: MediaLiveClientTypes.InputDenoiseFilter?
        /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
        public var filterStrength: Swift.Int?
        /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default.
        ///
        /// * auto - filtering will be applied depending on input type/quality
        ///
        /// * disabled - no filtering will be applied to the input
        ///
        /// * forced - filtering will be applied regardless of input type
        public var inputFilter: MediaLiveClientTypes.InputFilter?
        /// Input settings.
        public var networkInputSettings: MediaLiveClientTypes.NetworkInputSettings?
        /// PID from which to read SCTE-35 messages. If left undefined, EML will select the first SCTE-35 PID found in the input.
        public var scte35Pid: Swift.Int?
        /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages.
        ///
        /// * PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any).
        ///
        /// * IGNORE: Never extract any ancillary data from SMPTE-2038.
        public var smpte2038DataPreference: MediaLiveClientTypes.Smpte2038DataPreference?
        /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
        public var sourceEndBehavior: MediaLiveClientTypes.InputSourceEndBehavior?
        /// Informs which video elementary stream to decode for input types that have multiple available.
        public var videoSelector: MediaLiveClientTypes.VideoSelector?

        public init (
            audioSelectors: [MediaLiveClientTypes.AudioSelector]? = nil,
            captionSelectors: [MediaLiveClientTypes.CaptionSelector]? = nil,
            deblockFilter: MediaLiveClientTypes.InputDeblockFilter? = nil,
            denoiseFilter: MediaLiveClientTypes.InputDenoiseFilter? = nil,
            filterStrength: Swift.Int? = nil,
            inputFilter: MediaLiveClientTypes.InputFilter? = nil,
            networkInputSettings: MediaLiveClientTypes.NetworkInputSettings? = nil,
            scte35Pid: Swift.Int? = nil,
            smpte2038DataPreference: MediaLiveClientTypes.Smpte2038DataPreference? = nil,
            sourceEndBehavior: MediaLiveClientTypes.InputSourceEndBehavior? = nil,
            videoSelector: MediaLiveClientTypes.VideoSelector? = nil
        )
        {
            self.audioSelectors = audioSelectors
            self.captionSelectors = captionSelectors
            self.deblockFilter = deblockFilter
            self.denoiseFilter = denoiseFilter
            self.filterStrength = filterStrength
            self.inputFilter = inputFilter
            self.networkInputSettings = networkInputSettings
            self.scte35Pid = scte35Pid
            self.smpte2038DataPreference = smpte2038DataPreference
            self.sourceEndBehavior = sourceEndBehavior
            self.videoSelector = videoSelector
        }
    }

}

extension MediaLiveClientTypes.InputSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordParam = "passwordParam"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = self.passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension MediaLiveClientTypes {
    /// The settings for a PULL type input.
    public struct InputSource: Swift.Equatable {
        /// The key used to extract the password from EC2 Parameter store.
        public var passwordParam: Swift.String?
        /// This represents the customer's source URL where stream is pulled from.
        public var url: Swift.String?
        /// The username for the input source.
        public var username: Swift.String?

        public init (
            passwordParam: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {
    /// Input Source End Behavior
    public enum InputSourceEndBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `continue`
        case loop
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSourceEndBehavior] {
            return [
                .continue,
                .loop,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continue: return "CONTINUE"
            case .loop: return "LOOP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputSourceEndBehavior(rawValue: rawValue) ?? InputSourceEndBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputSourceRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordParam = "passwordParam"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = self.passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for for a PULL type input.
    public struct InputSourceRequest: Swift.Equatable {
        /// The key used to extract the password from EC2 Parameter store.
        public var passwordParam: Swift.String?
        /// This represents the customer's source URL where stream is pulled from.
        public var url: Swift.String?
        /// The username for the input source.
        public var username: Swift.String?

        public init (
            passwordParam: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {
    /// There are two types of input sources, static and dynamic. If an input source is dynamic you can change the source url of the input dynamically using an input switch action. Currently, two input types support a dynamic url at this time, MP4_FILE and TS_FILE. By default all input sources are static.
    public enum InputSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSourceType] {
            return [
                .dynamic,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "DYNAMIC"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputSourceType(rawValue: rawValue) ?? InputSourceType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codec = "codec"
        case maximumBitrate = "maximumBitrate"
        case resolution = "resolution"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codec = self.codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let maximumBitrate = self.maximumBitrate {
            try encodeContainer.encode(maximumBitrate.rawValue, forKey: .maximumBitrate)
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputCodec.self, forKey: .codec)
        codec = codecDecoded
        let maximumBitrateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputMaximumBitrate.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InputSpecification
    public struct InputSpecification: Swift.Equatable {
        /// Input codec
        public var codec: MediaLiveClientTypes.InputCodec?
        /// Maximum input bitrate, categorized coarsely
        public var maximumBitrate: MediaLiveClientTypes.InputMaximumBitrate?
        /// Input resolution, categorized coarsely
        public var resolution: MediaLiveClientTypes.InputResolution?

        public init (
            codec: MediaLiveClientTypes.InputCodec? = nil,
            maximumBitrate: MediaLiveClientTypes.InputMaximumBitrate? = nil,
            resolution: MediaLiveClientTypes.InputResolution? = nil
        )
        {
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.resolution = resolution
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InputState
    public enum InputState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attached
        case creating
        case deleted
        case deleting
        case detached
        case sdkUnknown(Swift.String)

        public static var allCases: [InputState] {
            return [
                .attached,
                .creating,
                .deleted,
                .deleting,
                .detached,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attached: return "ATTACHED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .detached: return "DETACHED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputState(rawValue: rawValue) ?? InputState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputSwitchScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case inputClippingSettings = "inputClippingSettings"
        case urlPath = "urlPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = self.inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let inputClippingSettings = self.inputClippingSettings {
            try encodeContainer.encode(inputClippingSettings, forKey: .inputClippingSettings)
        }
        if let urlPath = urlPath {
            var urlPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlPath)
            for __string0 in urlPath {
                try urlPathContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let inputClippingSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputClippingSettings.self, forKey: .inputClippingSettings)
        inputClippingSettings = inputClippingSettingsDecoded
        let urlPathContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlPath)
        var urlPathDecoded0:[Swift.String]? = nil
        if let urlPathContainer = urlPathContainer {
            urlPathDecoded0 = [Swift.String]()
            for string0 in urlPathContainer {
                if let string0 = string0 {
                    urlPathDecoded0?.append(string0)
                }
            }
        }
        urlPath = urlPathDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Settings for the "switch input" action: to switch from ingesting one input to ingesting another input.
    public struct InputSwitchScheduleActionSettings: Swift.Equatable {
        /// The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
        /// This member is required.
        public var inputAttachmentNameReference: Swift.String?
        /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
        public var inputClippingSettings: MediaLiveClientTypes.InputClippingSettings?
        /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
        public var urlPath: [Swift.String]?

        public init (
            inputAttachmentNameReference: Swift.String? = nil,
            inputClippingSettings: MediaLiveClientTypes.InputClippingSettings? = nil,
            urlPath: [Swift.String]? = nil
        )
        {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.inputClippingSettings = inputClippingSettings
            self.urlPath = urlPath
        }
    }

}

extension MediaLiveClientTypes {
    /// Documentation update needed
    public enum InputTimecodeSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case embedded
        case zerobased
        case sdkUnknown(Swift.String)

        public static var allCases: [InputTimecodeSource] {
            return [
                .embedded,
                .zerobased,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .embedded: return "EMBEDDED"
            case .zerobased: return "ZEROBASED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputTimecodeSource(rawValue: rawValue) ?? InputTimecodeSource.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// The different types of inputs that AWS Elemental MediaLive supports.
    public enum InputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsCdi
        case inputDevice
        case mediaconnect
        case mp4File
        case rtmpPull
        case rtmpPush
        case rtpPush
        case tsFile
        case udpPush
        case urlPull
        case sdkUnknown(Swift.String)

        public static var allCases: [InputType] {
            return [
                .awsCdi,
                .inputDevice,
                .mediaconnect,
                .mp4File,
                .rtmpPull,
                .rtmpPush,
                .rtpPush,
                .tsFile,
                .udpPush,
                .urlPull,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsCdi: return "AWS_CDI"
            case .inputDevice: return "INPUT_DEVICE"
            case .mediaconnect: return "MEDIACONNECT"
            case .mp4File: return "MP4_FILE"
            case .rtmpPull: return "RTMP_PULL"
            case .rtmpPush: return "RTMP_PUSH"
            case .rtpPush: return "RTP_PUSH"
            case .tsFile: return "TS_FILE"
            case .udpPush: return "UDP_PUSH"
            case .urlPull: return "URL_PULL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputType(rawValue: rawValue) ?? InputType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.InputVpcRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "securityGroupIds"
        case subnetIds = "subnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for __string0 in subnetIds {
                try subnetIdsContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Settings for a private VPC Input. When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses. This property requires setting the roleArn property on Input creation. Not compatible with the inputSecurityGroups property.
    public struct InputVpcRequest: Swift.Equatable {
        /// A list of up to 5 EC2 VPC security group IDs to attach to the Input VPC network interfaces. Requires subnetIds. If none are specified then the VPC default security group will be used.
        public var securityGroupIds: [Swift.String]?
        /// A list of 2 VPC subnet IDs from the same VPC. Subnet IDs must be mapped to two unique availability zones (AZ).
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension MediaLiveClientTypes.InputWhitelistRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "cidr"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidr = self.cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension MediaLiveClientTypes {
    /// Whitelist rule
    public struct InputWhitelistRule: Swift.Equatable {
        /// The IPv4 CIDR that's whitelisted.
        public var cidr: Swift.String?

        public init (
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension MediaLiveClientTypes.InputWhitelistRuleCidr: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "cidr"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidr = self.cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension MediaLiveClientTypes {
    /// An IPv4 CIDR to whitelist.
    public struct InputWhitelistRuleCidr: Swift.Equatable {
        /// The IPv4 CIDR to whitelist.
        public var cidr: Swift.String?

        public init (
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension InternalServerErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for InternalServerErrorException
public struct InternalServerErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaLiveClientTypes.KeyProviderSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticKeySettings = "staticKeySettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticKeySettings = self.staticKeySettings {
            try encodeContainer.encode(staticKeySettings, forKey: .staticKeySettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticKeySettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StaticKeySettings.self, forKey: .staticKeySettings)
        staticKeySettings = staticKeySettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Key Provider Settings
    public struct KeyProviderSettings: Swift.Equatable {
        /// Static Key Settings
        public var staticKeySettings: MediaLiveClientTypes.StaticKeySettings?

        public init (
            staticKeySettings: MediaLiveClientTypes.StaticKeySettings? = nil
        )
        {
            self.staticKeySettings = staticKeySettings
        }
    }

}

extension MediaLiveClientTypes {
    /// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
    public enum LastFrameClippingBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case excludeLastFrame
        case includeLastFrame
        case sdkUnknown(Swift.String)

        public static var allCases: [LastFrameClippingBehavior] {
            return [
                .excludeLastFrame,
                .includeLastFrame,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .excludeLastFrame: return "EXCLUDE_LAST_FRAME"
            case .includeLastFrame: return "INCLUDE_LAST_FRAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LastFrameClippingBehavior(rawValue: rawValue) ?? LastFrameClippingBehavior.sdkUnknown(rawValue)
        }
    }
}

extension ListChannelsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListChannelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/channels"
    }
}

/// Placeholder documentation for ListChannelsRequest
public struct ListChannelsInput: Swift.Equatable {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListChannelsInputBody: Swift.Equatable {
}

extension ListChannelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListChannelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListChannelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListChannelsOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChannelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListChannelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channels = output.channels
            self.nextToken = output.nextToken
        } else {
            self.channels = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListChannelsResponse
public struct ListChannelsOutputResponse: Swift.Equatable {
    /// Placeholder documentation for __listOfChannelSummary
    public var channels: [MediaLiveClientTypes.ChannelSummary]?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        channels: [MediaLiveClientTypes.ChannelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channels = channels
        self.nextToken = nextToken
    }
}

struct ListChannelsOutputResponseBody: Swift.Equatable {
    let channels: [MediaLiveClientTypes.ChannelSummary]?
    let nextToken: Swift.String?
}

extension ListChannelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channels = "channels"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelSummary?].self, forKey: .channels)
        var channelsDecoded0:[MediaLiveClientTypes.ChannelSummary]? = nil
        if let channelsContainer = channelsContainer {
            channelsDecoded0 = [MediaLiveClientTypes.ChannelSummary]()
            for structure0 in channelsContainer {
                if let structure0 = structure0 {
                    channelsDecoded0?.append(structure0)
                }
            }
        }
        channels = channelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputDeviceTransfersInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            guard let transferType = transferType else {
                let message = "Creating a URL Query Item failed. transferType is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let transferTypeQueryItem = ClientRuntime.URLQueryItem(name: "transferType".urlPercentEncoding(), value: Swift.String(transferType).urlPercentEncoding())
            items.append(transferTypeQueryItem)
            return items
        }
    }
}

extension ListInputDeviceTransfersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/inputDeviceTransfers"
    }
}

/// Placeholder documentation for ListInputDeviceTransfersRequest
public struct ListInputDeviceTransfersInput: Swift.Equatable {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Placeholder documentation for __string
    /// This member is required.
    public var transferType: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        transferType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.transferType = transferType
    }
}

struct ListInputDeviceTransfersInputBody: Swift.Equatable {
}

extension ListInputDeviceTransfersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInputDeviceTransfersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputDeviceTransfersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInputDeviceTransfersOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputDeviceTransfersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInputDeviceTransfersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inputDeviceTransfers = output.inputDeviceTransfers
            self.nextToken = output.nextToken
        } else {
            self.inputDeviceTransfers = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputDeviceTransfersResponse
public struct ListInputDeviceTransfersOutputResponse: Swift.Equatable {
    /// The list of devices that you are transferring or are being transferred to you.
    public var inputDeviceTransfers: [MediaLiveClientTypes.TransferringInputDeviceSummary]?
    /// A token to get additional list results.
    public var nextToken: Swift.String?

    public init (
        inputDeviceTransfers: [MediaLiveClientTypes.TransferringInputDeviceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputDeviceTransfers = inputDeviceTransfers
        self.nextToken = nextToken
    }
}

struct ListInputDeviceTransfersOutputResponseBody: Swift.Equatable {
    let inputDeviceTransfers: [MediaLiveClientTypes.TransferringInputDeviceSummary]?
    let nextToken: Swift.String?
}

extension ListInputDeviceTransfersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputDeviceTransfers = "inputDeviceTransfers"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDeviceTransfersContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.TransferringInputDeviceSummary?].self, forKey: .inputDeviceTransfers)
        var inputDeviceTransfersDecoded0:[MediaLiveClientTypes.TransferringInputDeviceSummary]? = nil
        if let inputDeviceTransfersContainer = inputDeviceTransfersContainer {
            inputDeviceTransfersDecoded0 = [MediaLiveClientTypes.TransferringInputDeviceSummary]()
            for structure0 in inputDeviceTransfersContainer {
                if let structure0 = structure0 {
                    inputDeviceTransfersDecoded0?.append(structure0)
                }
            }
        }
        inputDeviceTransfers = inputDeviceTransfersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputDevicesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListInputDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/inputDevices"
    }
}

/// Placeholder documentation for ListInputDevicesRequest
public struct ListInputDevicesInput: Swift.Equatable {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInputDevicesInputBody: Swift.Equatable {
}

extension ListInputDevicesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInputDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInputDevicesOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInputDevicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inputDevices = output.inputDevices
            self.nextToken = output.nextToken
        } else {
            self.inputDevices = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputDevicesResponse
public struct ListInputDevicesOutputResponse: Swift.Equatable {
    /// The list of input devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSummary]?
    /// A token to get additional list results.
    public var nextToken: Swift.String?

    public init (
        inputDevices: [MediaLiveClientTypes.InputDeviceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputDevices = inputDevices
        self.nextToken = nextToken
    }
}

struct ListInputDevicesOutputResponseBody: Swift.Equatable {
    let inputDevices: [MediaLiveClientTypes.InputDeviceSummary]?
    let nextToken: Swift.String?
}

extension ListInputDevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputDevices = "inputDevices"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceSummary?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceSummary]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceSummary]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputSecurityGroupsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListInputSecurityGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/inputSecurityGroups"
    }
}

/// Placeholder documentation for ListInputSecurityGroupsRequest
public struct ListInputSecurityGroupsInput: Swift.Equatable {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInputSecurityGroupsInputBody: Swift.Equatable {
}

extension ListInputSecurityGroupsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInputSecurityGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputSecurityGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInputSecurityGroupsOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputSecurityGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInputSecurityGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inputSecurityGroups = output.inputSecurityGroups
            self.nextToken = output.nextToken
        } else {
            self.inputSecurityGroups = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputSecurityGroupsResponse
public struct ListInputSecurityGroupsOutputResponse: Swift.Equatable {
    /// List of input security groups
    public var inputSecurityGroups: [MediaLiveClientTypes.InputSecurityGroup]?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        inputSecurityGroups: [MediaLiveClientTypes.InputSecurityGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputSecurityGroups = inputSecurityGroups
        self.nextToken = nextToken
    }
}

struct ListInputSecurityGroupsOutputResponseBody: Swift.Equatable {
    let inputSecurityGroups: [MediaLiveClientTypes.InputSecurityGroup]?
    let nextToken: Swift.String?
}

extension ListInputSecurityGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputSecurityGroups = "inputSecurityGroups"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSecurityGroup?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[MediaLiveClientTypes.InputSecurityGroup]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [MediaLiveClientTypes.InputSecurityGroup]()
            for structure0 in inputSecurityGroupsContainer {
                if let structure0 = structure0 {
                    inputSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInputsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListInputsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/inputs"
    }
}

/// Placeholder documentation for ListInputsRequest
public struct ListInputsInput: Swift.Equatable {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInputsInputBody: Swift.Equatable {
}

extension ListInputsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInputsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInputsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInputsOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInputsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInputsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inputs = output.inputs
            self.nextToken = output.nextToken
        } else {
            self.inputs = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListInputsResponse
public struct ListInputsOutputResponse: Swift.Equatable {
    /// Placeholder documentation for __listOfInput
    public var inputs: [MediaLiveClientTypes.Input]?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init (
        inputs: [MediaLiveClientTypes.Input]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputs = inputs
        self.nextToken = nextToken
    }
}

struct ListInputsOutputResponseBody: Swift.Equatable {
    let inputs: [MediaLiveClientTypes.Input]?
    let nextToken: Swift.String?
}

extension ListInputsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputs = "inputs"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.Input?].self, forKey: .inputs)
        var inputsDecoded0:[MediaLiveClientTypes.Input]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [MediaLiveClientTypes.Input]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMultiplexProgramsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListMultiplexProgramsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs"
    }
}

/// Placeholder documentation for ListMultiplexProgramsRequest
public struct ListMultiplexProgramsInput: Swift.Equatable {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The ID of the multiplex that the programs belong to.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        multiplexId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.multiplexId = multiplexId
        self.nextToken = nextToken
    }
}

struct ListMultiplexProgramsInputBody: Swift.Equatable {
}

extension ListMultiplexProgramsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMultiplexProgramsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMultiplexProgramsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMultiplexProgramsOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMultiplexProgramsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMultiplexProgramsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.multiplexPrograms = output.multiplexPrograms
            self.nextToken = output.nextToken
        } else {
            self.multiplexPrograms = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListMultiplexProgramsResponse
public struct ListMultiplexProgramsOutputResponse: Swift.Equatable {
    /// List of multiplex programs.
    public var multiplexPrograms: [MediaLiveClientTypes.MultiplexProgramSummary]?
    /// Token for the next ListMultiplexProgram request.
    public var nextToken: Swift.String?

    public init (
        multiplexPrograms: [MediaLiveClientTypes.MultiplexProgramSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.multiplexPrograms = multiplexPrograms
        self.nextToken = nextToken
    }
}

struct ListMultiplexProgramsOutputResponseBody: Swift.Equatable {
    let multiplexPrograms: [MediaLiveClientTypes.MultiplexProgramSummary]?
    let nextToken: Swift.String?
}

extension ListMultiplexProgramsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexPrograms = "multiplexPrograms"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexProgramSummary?].self, forKey: .multiplexPrograms)
        var multiplexProgramsDecoded0:[MediaLiveClientTypes.MultiplexProgramSummary]? = nil
        if let multiplexProgramsContainer = multiplexProgramsContainer {
            multiplexProgramsDecoded0 = [MediaLiveClientTypes.MultiplexProgramSummary]()
            for structure0 in multiplexProgramsContainer {
                if let structure0 = structure0 {
                    multiplexProgramsDecoded0?.append(structure0)
                }
            }
        }
        multiplexPrograms = multiplexProgramsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMultiplexesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListMultiplexesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/multiplexes"
    }
}

/// Placeholder documentation for ListMultiplexesRequest
public struct ListMultiplexesInput: Swift.Equatable {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListMultiplexesInputBody: Swift.Equatable {
}

extension ListMultiplexesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMultiplexesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMultiplexesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMultiplexesOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMultiplexesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMultiplexesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.multiplexes = output.multiplexes
            self.nextToken = output.nextToken
        } else {
            self.multiplexes = nil
            self.nextToken = nil
        }
    }
}

/// Placeholder documentation for ListMultiplexesResponse
public struct ListMultiplexesOutputResponse: Swift.Equatable {
    /// List of multiplexes.
    public var multiplexes: [MediaLiveClientTypes.MultiplexSummary]?
    /// Token for the next ListMultiplexes request.
    public var nextToken: Swift.String?

    public init (
        multiplexes: [MediaLiveClientTypes.MultiplexSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.multiplexes = multiplexes
        self.nextToken = nextToken
    }
}

struct ListMultiplexesOutputResponseBody: Swift.Equatable {
    let multiplexes: [MediaLiveClientTypes.MultiplexSummary]?
    let nextToken: Swift.String?
}

extension ListMultiplexesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexes = "multiplexes"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexSummary?].self, forKey: .multiplexes)
        var multiplexesDecoded0:[MediaLiveClientTypes.MultiplexSummary]? = nil
        if let multiplexesContainer = multiplexesContainer {
            multiplexesDecoded0 = [MediaLiveClientTypes.MultiplexSummary]()
            for structure0 in multiplexesContainer {
                if let structure0 = structure0 {
                    multiplexesDecoded0?.append(structure0)
                }
            }
        }
        multiplexes = multiplexesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOfferingsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let channelClass = channelClass {
                let channelClassQueryItem = ClientRuntime.URLQueryItem(name: "channelClass".urlPercentEncoding(), value: Swift.String(channelClass).urlPercentEncoding())
                items.append(channelClassQueryItem)
            }
            if let codec = codec {
                let codecQueryItem = ClientRuntime.URLQueryItem(name: "codec".urlPercentEncoding(), value: Swift.String(codec).urlPercentEncoding())
                items.append(codecQueryItem)
            }
            if let videoQuality = videoQuality {
                let videoQualityQueryItem = ClientRuntime.URLQueryItem(name: "videoQuality".urlPercentEncoding(), value: Swift.String(videoQuality).urlPercentEncoding())
                items.append(videoQualityQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let maximumBitrate = maximumBitrate {
                let maximumBitrateQueryItem = ClientRuntime.URLQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: Swift.String(maximumBitrate).urlPercentEncoding())
                items.append(maximumBitrateQueryItem)
            }
            if let specialFeature = specialFeature {
                let specialFeatureQueryItem = ClientRuntime.URLQueryItem(name: "specialFeature".urlPercentEncoding(), value: Swift.String(specialFeature).urlPercentEncoding())
                items.append(specialFeatureQueryItem)
            }
            if let duration = duration {
                let durationQueryItem = ClientRuntime.URLQueryItem(name: "duration".urlPercentEncoding(), value: Swift.String(duration).urlPercentEncoding())
                items.append(durationQueryItem)
            }
            if let resourceType = resourceType {
                let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType).urlPercentEncoding())
                items.append(resourceTypeQueryItem)
            }
            if let channelConfiguration = channelConfiguration {
                let channelConfigurationQueryItem = ClientRuntime.URLQueryItem(name: "channelConfiguration".urlPercentEncoding(), value: Swift.String(channelConfiguration).urlPercentEncoding())
                items.append(channelConfigurationQueryItem)
            }
            if let maximumFramerate = maximumFramerate {
                let maximumFramerateQueryItem = ClientRuntime.URLQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: Swift.String(maximumFramerate).urlPercentEncoding())
                items.append(maximumFramerateQueryItem)
            }
            if let resolution = resolution {
                let resolutionQueryItem = ClientRuntime.URLQueryItem(name: "resolution".urlPercentEncoding(), value: Swift.String(resolution).urlPercentEncoding())
                items.append(resolutionQueryItem)
            }
            return items
        }
    }
}

extension ListOfferingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/offerings"
    }
}

/// Placeholder documentation for ListOfferingsRequest
public struct ListOfferingsInput: Swift.Equatable {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public var channelClass: Swift.String?
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    public var channelConfiguration: Swift.String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    public var codec: Swift.String?
    /// Filter by offering duration, e.g. '12'
    public var duration: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public var maximumBitrate: Swift.String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public var maximumFramerate: Swift.String?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public var resolution: Swift.String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public var resourceType: Swift.String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public var specialFeature: Swift.String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public var videoQuality: Swift.String?

    public init (
        channelClass: Swift.String? = nil,
        channelConfiguration: Swift.String? = nil,
        codec: Swift.String? = nil,
        duration: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maximumBitrate: Swift.String? = nil,
        maximumFramerate: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        resolution: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        specialFeature: Swift.String? = nil,
        videoQuality: Swift.String? = nil
    )
    {
        self.channelClass = channelClass
        self.channelConfiguration = channelConfiguration
        self.codec = codec
        self.duration = duration
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

struct ListOfferingsInputBody: Swift.Equatable {
}

extension ListOfferingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListOfferingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOfferingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListOfferingsOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOfferingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.offerings = output.offerings
        } else {
            self.nextToken = nil
            self.offerings = nil
        }
    }
}

/// Placeholder documentation for ListOfferingsResponse
public struct ListOfferingsOutputResponse: Swift.Equatable {
    /// Token to retrieve the next page of results
    public var nextToken: Swift.String?
    /// List of offerings
    public var offerings: [MediaLiveClientTypes.Offering]?

    public init (
        nextToken: Swift.String? = nil,
        offerings: [MediaLiveClientTypes.Offering]? = nil
    )
    {
        self.nextToken = nextToken
        self.offerings = offerings
    }
}

struct ListOfferingsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let offerings: [MediaLiveClientTypes.Offering]?
}

extension ListOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case offerings = "offerings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let offeringsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.Offering?].self, forKey: .offerings)
        var offeringsDecoded0:[MediaLiveClientTypes.Offering]? = nil
        if let offeringsContainer = offeringsContainer {
            offeringsDecoded0 = [MediaLiveClientTypes.Offering]()
            for structure0 in offeringsContainer {
                if let structure0 = structure0 {
                    offeringsDecoded0?.append(structure0)
                }
            }
        }
        offerings = offeringsDecoded0
    }
}

extension ListReservationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let channelClass = channelClass {
                let channelClassQueryItem = ClientRuntime.URLQueryItem(name: "channelClass".urlPercentEncoding(), value: Swift.String(channelClass).urlPercentEncoding())
                items.append(channelClassQueryItem)
            }
            if let codec = codec {
                let codecQueryItem = ClientRuntime.URLQueryItem(name: "codec".urlPercentEncoding(), value: Swift.String(codec).urlPercentEncoding())
                items.append(codecQueryItem)
            }
            if let videoQuality = videoQuality {
                let videoQualityQueryItem = ClientRuntime.URLQueryItem(name: "videoQuality".urlPercentEncoding(), value: Swift.String(videoQuality).urlPercentEncoding())
                items.append(videoQualityQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let maximumBitrate = maximumBitrate {
                let maximumBitrateQueryItem = ClientRuntime.URLQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: Swift.String(maximumBitrate).urlPercentEncoding())
                items.append(maximumBitrateQueryItem)
            }
            if let specialFeature = specialFeature {
                let specialFeatureQueryItem = ClientRuntime.URLQueryItem(name: "specialFeature".urlPercentEncoding(), value: Swift.String(specialFeature).urlPercentEncoding())
                items.append(specialFeatureQueryItem)
            }
            if let resourceType = resourceType {
                let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType).urlPercentEncoding())
                items.append(resourceTypeQueryItem)
            }
            if let maximumFramerate = maximumFramerate {
                let maximumFramerateQueryItem = ClientRuntime.URLQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: Swift.String(maximumFramerate).urlPercentEncoding())
                items.append(maximumFramerateQueryItem)
            }
            if let resolution = resolution {
                let resolutionQueryItem = ClientRuntime.URLQueryItem(name: "resolution".urlPercentEncoding(), value: Swift.String(resolution).urlPercentEncoding())
                items.append(resolutionQueryItem)
            }
            return items
        }
    }
}

extension ListReservationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/prod/reservations"
    }
}

/// Placeholder documentation for ListReservationsRequest
public struct ListReservationsInput: Swift.Equatable {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public var channelClass: Swift.String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    public var codec: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public var maximumBitrate: Swift.String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public var maximumFramerate: Swift.String?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public var resolution: Swift.String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public var resourceType: Swift.String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public var specialFeature: Swift.String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public var videoQuality: Swift.String?

    public init (
        channelClass: Swift.String? = nil,
        codec: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maximumBitrate: Swift.String? = nil,
        maximumFramerate: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        resolution: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        specialFeature: Swift.String? = nil,
        videoQuality: Swift.String? = nil
    )
    {
        self.channelClass = channelClass
        self.codec = codec
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

struct ListReservationsInputBody: Swift.Equatable {
}

extension ListReservationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListReservationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReservationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListReservationsOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReservationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListReservationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservations = output.reservations
        } else {
            self.nextToken = nil
            self.reservations = nil
        }
    }
}

/// Placeholder documentation for ListReservationsResponse
public struct ListReservationsOutputResponse: Swift.Equatable {
    /// Token to retrieve the next page of results
    public var nextToken: Swift.String?
    /// List of reservations
    public var reservations: [MediaLiveClientTypes.Reservation]?

    public init (
        nextToken: Swift.String? = nil,
        reservations: [MediaLiveClientTypes.Reservation]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservations = reservations
    }
}

struct ListReservationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservations: [MediaLiveClientTypes.Reservation]?
}

extension ListReservationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case reservations = "reservations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.Reservation?].self, forKey: .reservations)
        var reservationsDecoded0:[MediaLiveClientTypes.Reservation]? = nil
        if let reservationsContainer = reservationsContainer {
            reservationsDecoded0 = [MediaLiveClientTypes.Reservation]()
            for structure0 in reservationsContainer {
                if let structure0 = structure0 {
                    reservationsDecoded0?.append(structure0)
                }
            }
        }
        reservations = reservationsDecoded0
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/prod/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Placeholder documentation for ListTagsForResourceRequest
public struct ListTagsForResourceInput: Swift.Equatable {
    /// Placeholder documentation for __string
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

/// Placeholder documentation for ListTagsForResourceResponse
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Tags
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// The log level the user wants for their channel.
    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case debug
        case disabled
        case error
        case info
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .debug,
                .disabled,
                .error,
                .info,
                .warning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .debug: return "DEBUG"
            case .disabled: return "DISABLED"
            case .error: return "ERROR"
            case .info: return "INFO"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogLevel(rawValue: rawValue) ?? LogLevel.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Absent Input Audio Behavior
    public enum M2tsAbsentInputAudioBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drop
        case encodeSilence
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAbsentInputAudioBehavior] {
            return [
                .drop,
                .encodeSilence,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drop: return "DROP"
            case .encodeSilence: return "ENCODE_SILENCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsAbsentInputAudioBehavior(rawValue: rawValue) ?? M2tsAbsentInputAudioBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Arib
    public enum M2tsArib: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsArib] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsArib(rawValue: rawValue) ?? M2tsArib.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Arib Captions Pid Control
    public enum M2tsAribCaptionsPidControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAribCaptionsPidControl] {
            return [
                .auto,
                .useConfigured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsAribCaptionsPidControl(rawValue: rawValue) ?? M2tsAribCaptionsPidControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Audio Buffer Model
    public enum M2tsAudioBufferModel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case atsc
        case dvb
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioBufferModel] {
            return [
                .atsc,
                .dvb,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .atsc: return "ATSC"
            case .dvb: return "DVB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsAudioBufferModel(rawValue: rawValue) ?? M2tsAudioBufferModel.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Audio Interval
    public enum M2tsAudioInterval: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case videoAndFixedIntervals
        case videoInterval
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioInterval] {
            return [
                .videoAndFixedIntervals,
                .videoInterval,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .videoAndFixedIntervals: return "VIDEO_AND_FIXED_INTERVALS"
            case .videoInterval: return "VIDEO_INTERVAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsAudioInterval(rawValue: rawValue) ?? M2tsAudioInterval.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Audio Stream Type
    public enum M2tsAudioStreamType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case atsc
        case dvb
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioStreamType] {
            return [
                .atsc,
                .dvb,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .atsc: return "ATSC"
            case .dvb: return "DVB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsAudioStreamType(rawValue: rawValue) ?? M2tsAudioStreamType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Buffer Model
    public enum M2tsBufferModel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case multiplex
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsBufferModel] {
            return [
                .multiplex,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .multiplex: return "MULTIPLEX"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsBufferModel(rawValue: rawValue) ?? M2tsBufferModel.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Cc Descriptor
    public enum M2tsCcDescriptor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsCcDescriptor] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsCcDescriptor(rawValue: rawValue) ?? M2tsCcDescriptor.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Ebif Control
    public enum M2tsEbifControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEbifControl] {
            return [
                .none,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsEbifControl(rawValue: rawValue) ?? M2tsEbifControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Ebp Placement
    public enum M2tsEbpPlacement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case videoAndAudioPids
        case videoPid
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEbpPlacement] {
            return [
                .videoAndAudioPids,
                .videoPid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .videoAndAudioPids: return "VIDEO_AND_AUDIO_PIDS"
            case .videoPid: return "VIDEO_PID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsEbpPlacement(rawValue: rawValue) ?? M2tsEbpPlacement.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Es Rate In Pes
    public enum M2tsEsRateInPes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEsRateInPes] {
            return [
                .exclude,
                .include,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsEsRateInPes(rawValue: rawValue) ?? M2tsEsRateInPes.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Klv
    public enum M2tsKlv: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsKlv] {
            return [
                .none,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsKlv(rawValue: rawValue) ?? M2tsKlv.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Nielsen Id3 Behavior
    public enum M2tsNielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsNielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsNielsenId3Behavior(rawValue: rawValue) ?? M2tsNielsenId3Behavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Pcr Control
    public enum M2tsPcrControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configuredPcrPeriod
        case pcrEveryPesPacket
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsPcrControl] {
            return [
                .configuredPcrPeriod,
                .pcrEveryPesPacket,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
            case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsPcrControl(rawValue: rawValue) ?? M2tsPcrControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Rate Mode
    public enum M2tsRateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsRateMode] {
            return [
                .cbr,
                .vbr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsRateMode(rawValue: rawValue) ?? M2tsRateMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Scte35 Control
    public enum M2tsScte35Control: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsScte35Control] {
            return [
                .none,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsScte35Control(rawValue: rawValue) ?? M2tsScte35Control.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Segmentation Markers
    public enum M2tsSegmentationMarkers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ebp
        case ebpLegacy
        case `none`
        case psiSegstart
        case raiAdapt
        case raiSegstart
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsSegmentationMarkers] {
            return [
                .ebp,
                .ebpLegacy,
                .none,
                .psiSegstart,
                .raiAdapt,
                .raiSegstart,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ebp: return "EBP"
            case .ebpLegacy: return "EBP_LEGACY"
            case .none: return "NONE"
            case .psiSegstart: return "PSI_SEGSTART"
            case .raiAdapt: return "RAI_ADAPT"
            case .raiSegstart: return "RAI_SEGSTART"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsSegmentationMarkers(rawValue: rawValue) ?? M2tsSegmentationMarkers.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Segmentation Style
    public enum M2tsSegmentationStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case maintainCadence
        case resetCadence
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsSegmentationStyle] {
            return [
                .maintainCadence,
                .resetCadence,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .maintainCadence: return "MAINTAIN_CADENCE"
            case .resetCadence: return "RESET_CADENCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsSegmentationStyle(rawValue: rawValue) ?? M2tsSegmentationStyle.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.M2tsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case absentInputAudioBehavior = "absentInputAudioBehavior"
        case arib = "arib"
        case aribCaptionsPid = "aribCaptionsPid"
        case aribCaptionsPidControl = "aribCaptionsPidControl"
        case audioBufferModel = "audioBufferModel"
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case audioStreamType = "audioStreamType"
        case bitrate = "bitrate"
        case bufferModel = "bufferModel"
        case ccDescriptor = "ccDescriptor"
        case dvbNitSettings = "dvbNitSettings"
        case dvbSdtSettings = "dvbSdtSettings"
        case dvbSubPids = "dvbSubPids"
        case dvbTdtSettings = "dvbTdtSettings"
        case dvbTeletextPid = "dvbTeletextPid"
        case ebif = "ebif"
        case ebpAudioInterval = "ebpAudioInterval"
        case ebpLookaheadMs = "ebpLookaheadMs"
        case ebpPlacement = "ebpPlacement"
        case ecmPid = "ecmPid"
        case esRateInPes = "esRateInPes"
        case etvPlatformPid = "etvPlatformPid"
        case etvSignalPid = "etvSignalPid"
        case fragmentTime = "fragmentTime"
        case klv = "klv"
        case klvDataPids = "klvDataPids"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case nullPacketBitrate = "nullPacketBitrate"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPeriod = "pcrPeriod"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case programNum = "programNum"
        case rateMode = "rateMode"
        case scte27Pids = "scte27Pids"
        case scte35Control = "scte35Control"
        case scte35Pid = "scte35Pid"
        case scte35PrerollPullupMilliseconds = "scte35PrerollPullupMilliseconds"
        case segmentationMarkers = "segmentationMarkers"
        case segmentationStyle = "segmentationStyle"
        case segmentationTime = "segmentationTime"
        case timedMetadataBehavior = "timedMetadataBehavior"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absentInputAudioBehavior = self.absentInputAudioBehavior {
            try encodeContainer.encode(absentInputAudioBehavior.rawValue, forKey: .absentInputAudioBehavior)
        }
        if let arib = self.arib {
            try encodeContainer.encode(arib.rawValue, forKey: .arib)
        }
        if let aribCaptionsPid = self.aribCaptionsPid {
            try encodeContainer.encode(aribCaptionsPid, forKey: .aribCaptionsPid)
        }
        if let aribCaptionsPidControl = self.aribCaptionsPidControl {
            try encodeContainer.encode(aribCaptionsPidControl.rawValue, forKey: .aribCaptionsPidControl)
        }
        if let audioBufferModel = self.audioBufferModel {
            try encodeContainer.encode(audioBufferModel.rawValue, forKey: .audioBufferModel)
        }
        if let audioFramesPerPes = self.audioFramesPerPes {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = self.audioPids {
            try encodeContainer.encode(audioPids, forKey: .audioPids)
        }
        if let audioStreamType = self.audioStreamType {
            try encodeContainer.encode(audioStreamType.rawValue, forKey: .audioStreamType)
        }
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufferModel = self.bufferModel {
            try encodeContainer.encode(bufferModel.rawValue, forKey: .bufferModel)
        }
        if let ccDescriptor = self.ccDescriptor {
            try encodeContainer.encode(ccDescriptor.rawValue, forKey: .ccDescriptor)
        }
        if let dvbNitSettings = self.dvbNitSettings {
            try encodeContainer.encode(dvbNitSettings, forKey: .dvbNitSettings)
        }
        if let dvbSdtSettings = self.dvbSdtSettings {
            try encodeContainer.encode(dvbSdtSettings, forKey: .dvbSdtSettings)
        }
        if let dvbSubPids = self.dvbSubPids {
            try encodeContainer.encode(dvbSubPids, forKey: .dvbSubPids)
        }
        if let dvbTdtSettings = self.dvbTdtSettings {
            try encodeContainer.encode(dvbTdtSettings, forKey: .dvbTdtSettings)
        }
        if let dvbTeletextPid = self.dvbTeletextPid {
            try encodeContainer.encode(dvbTeletextPid, forKey: .dvbTeletextPid)
        }
        if let ebif = self.ebif {
            try encodeContainer.encode(ebif.rawValue, forKey: .ebif)
        }
        if let ebpAudioInterval = self.ebpAudioInterval {
            try encodeContainer.encode(ebpAudioInterval.rawValue, forKey: .ebpAudioInterval)
        }
        if let ebpLookaheadMs = self.ebpLookaheadMs {
            try encodeContainer.encode(ebpLookaheadMs, forKey: .ebpLookaheadMs)
        }
        if let ebpPlacement = self.ebpPlacement {
            try encodeContainer.encode(ebpPlacement.rawValue, forKey: .ebpPlacement)
        }
        if let ecmPid = self.ecmPid {
            try encodeContainer.encode(ecmPid, forKey: .ecmPid)
        }
        if let esRateInPes = self.esRateInPes {
            try encodeContainer.encode(esRateInPes.rawValue, forKey: .esRateInPes)
        }
        if let etvPlatformPid = self.etvPlatformPid {
            try encodeContainer.encode(etvPlatformPid, forKey: .etvPlatformPid)
        }
        if let etvSignalPid = self.etvSignalPid {
            try encodeContainer.encode(etvSignalPid, forKey: .etvSignalPid)
        }
        if let fragmentTime = self.fragmentTime {
            try encodeContainer.encode(fragmentTime, forKey: .fragmentTime)
        }
        if let klv = self.klv {
            try encodeContainer.encode(klv.rawValue, forKey: .klv)
        }
        if let klvDataPids = self.klvDataPids {
            try encodeContainer.encode(klvDataPids, forKey: .klvDataPids)
        }
        if let nielsenId3Behavior = self.nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if let nullPacketBitrate = self.nullPacketBitrate {
            try encodeContainer.encode(nullPacketBitrate, forKey: .nullPacketBitrate)
        }
        if let patInterval = self.patInterval {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = self.pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if let pcrPeriod = self.pcrPeriod {
            try encodeContainer.encode(pcrPeriod, forKey: .pcrPeriod)
        }
        if let pcrPid = self.pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if let pmtInterval = self.pmtInterval {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if let pmtPid = self.pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if let programNum = self.programNum {
            try encodeContainer.encode(programNum, forKey: .programNum)
        }
        if let rateMode = self.rateMode {
            try encodeContainer.encode(rateMode.rawValue, forKey: .rateMode)
        }
        if let scte27Pids = self.scte27Pids {
            try encodeContainer.encode(scte27Pids, forKey: .scte27Pids)
        }
        if let scte35Control = self.scte35Control {
            try encodeContainer.encode(scte35Control.rawValue, forKey: .scte35Control)
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let scte35PrerollPullupMilliseconds = self.scte35PrerollPullupMilliseconds {
            try encodeContainer.encode(scte35PrerollPullupMilliseconds, forKey: .scte35PrerollPullupMilliseconds)
        }
        if let segmentationMarkers = self.segmentationMarkers {
            try encodeContainer.encode(segmentationMarkers.rawValue, forKey: .segmentationMarkers)
        }
        if let segmentationStyle = self.segmentationStyle {
            try encodeContainer.encode(segmentationStyle.rawValue, forKey: .segmentationStyle)
        }
        if let segmentationTime = self.segmentationTime {
            try encodeContainer.encode(segmentationTime, forKey: .segmentationTime)
        }
        if let timedMetadataBehavior = self.timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
        if let timedMetadataPid = self.timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if let transportStreamId = self.transportStreamId {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let videoPid = self.videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let absentInputAudioBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsAbsentInputAudioBehavior.self, forKey: .absentInputAudioBehavior)
        absentInputAudioBehavior = absentInputAudioBehaviorDecoded
        let aribDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsArib.self, forKey: .arib)
        arib = aribDecoded
        let aribCaptionsPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aribCaptionsPid)
        aribCaptionsPid = aribCaptionsPidDecoded
        let aribCaptionsPidControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsAribCaptionsPidControl.self, forKey: .aribCaptionsPidControl)
        aribCaptionsPidControl = aribCaptionsPidControlDecoded
        let audioBufferModelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsAudioBufferModel.self, forKey: .audioBufferModel)
        audioBufferModel = audioBufferModelDecoded
        let audioFramesPerPesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioPids)
        audioPids = audioPidsDecoded
        let audioStreamTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsAudioStreamType.self, forKey: .audioStreamType)
        audioStreamType = audioStreamTypeDecoded
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufferModelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsBufferModel.self, forKey: .bufferModel)
        bufferModel = bufferModelDecoded
        let ccDescriptorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsCcDescriptor.self, forKey: .ccDescriptor)
        ccDescriptor = ccDescriptorDecoded
        let dvbNitSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbNitSettings.self, forKey: .dvbNitSettings)
        dvbNitSettings = dvbNitSettingsDecoded
        let dvbSdtSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSdtSettings.self, forKey: .dvbSdtSettings)
        dvbSdtSettings = dvbSdtSettingsDecoded
        let dvbSubPidsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dvbSubPids)
        dvbSubPids = dvbSubPidsDecoded
        let dvbTdtSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbTdtSettings.self, forKey: .dvbTdtSettings)
        dvbTdtSettings = dvbTdtSettingsDecoded
        let dvbTeletextPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dvbTeletextPid)
        dvbTeletextPid = dvbTeletextPidDecoded
        let ebifDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsEbifControl.self, forKey: .ebif)
        ebif = ebifDecoded
        let ebpAudioIntervalDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsAudioInterval.self, forKey: .ebpAudioInterval)
        ebpAudioInterval = ebpAudioIntervalDecoded
        let ebpLookaheadMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ebpLookaheadMs)
        ebpLookaheadMs = ebpLookaheadMsDecoded
        let ebpPlacementDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsEbpPlacement.self, forKey: .ebpPlacement)
        ebpPlacement = ebpPlacementDecoded
        let ecmPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ecmPid)
        ecmPid = ecmPidDecoded
        let esRateInPesDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsEsRateInPes.self, forKey: .esRateInPes)
        esRateInPes = esRateInPesDecoded
        let etvPlatformPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .etvPlatformPid)
        etvPlatformPid = etvPlatformPidDecoded
        let etvSignalPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .etvSignalPid)
        etvSignalPid = etvSignalPidDecoded
        let fragmentTimeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fragmentTime)
        fragmentTime = fragmentTimeDecoded
        let klvDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsKlv.self, forKey: .klv)
        klv = klvDecoded
        let klvDataPidsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .klvDataPids)
        klvDataPids = klvDataPidsDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsNielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let nullPacketBitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nullPacketBitrate)
        nullPacketBitrate = nullPacketBitrateDecoded
        let patIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsPcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pcrPeriod)
        pcrPeriod = pcrPeriodDecoded
        let pcrPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let programNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNum)
        programNum = programNumDecoded
        let rateModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsRateMode.self, forKey: .rateMode)
        rateMode = rateModeDecoded
        let scte27PidsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scte27Pids)
        scte27Pids = scte27PidsDecoded
        let scte35ControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsScte35Control.self, forKey: .scte35Control)
        scte35Control = scte35ControlDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let segmentationMarkersDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsSegmentationMarkers.self, forKey: .segmentationMarkers)
        segmentationMarkers = segmentationMarkersDecoded
        let segmentationStyleDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsSegmentationStyle.self, forKey: .segmentationStyle)
        segmentationStyle = segmentationStyleDecoded
        let segmentationTimeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .segmentationTime)
        segmentationTime = segmentationTimeDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsTimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .videoPid)
        videoPid = videoPidDecoded
        let scte35PrerollPullupMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .scte35PrerollPullupMilliseconds)
        scte35PrerollPullupMilliseconds = scte35PrerollPullupMillisecondsDecoded
    }
}

extension MediaLiveClientTypes {
    /// M2ts Settings
    public struct M2tsSettings: Swift.Equatable {
        /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
        public var absentInputAudioBehavior: MediaLiveClientTypes.M2tsAbsentInputAudioBehavior?
        /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
        public var arib: MediaLiveClientTypes.M2tsArib?
        /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var aribCaptionsPid: Swift.String?
        /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
        public var aribCaptionsPidControl: MediaLiveClientTypes.M2tsAribCaptionsPidControl?
        /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
        public var audioBufferModel: MediaLiveClientTypes.M2tsAudioBufferModel?
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var audioPids: Swift.String?
        /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
        public var audioStreamType: MediaLiveClientTypes.M2tsAudioStreamType?
        /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
        public var bitrate: Swift.Int?
        /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
        public var bufferModel: MediaLiveClientTypes.M2tsBufferModel?
        /// When set to enabled, generates captionServiceDescriptor in PMT.
        public var ccDescriptor: MediaLiveClientTypes.M2tsCcDescriptor?
        /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
        public var dvbNitSettings: MediaLiveClientTypes.DvbNitSettings?
        /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
        public var dvbSdtSettings: MediaLiveClientTypes.DvbSdtSettings?
        /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var dvbSubPids: Swift.String?
        /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
        public var dvbTdtSettings: MediaLiveClientTypes.DvbTdtSettings?
        /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var dvbTeletextPid: Swift.String?
        /// If set to passthrough, passes any EBIF data from the input source to this output.
        public var ebif: MediaLiveClientTypes.M2tsEbifControl?
        /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
        public var ebpAudioInterval: MediaLiveClientTypes.M2tsAudioInterval?
        /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
        public var ebpLookaheadMs: Swift.Int?
        /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
        public var ebpPlacement: MediaLiveClientTypes.M2tsEbpPlacement?
        /// This field is unused and deprecated.
        public var ecmPid: Swift.String?
        /// Include or exclude the ES Rate field in the PES header.
        public var esRateInPes: MediaLiveClientTypes.M2tsEsRateInPes?
        /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var etvPlatformPid: Swift.String?
        /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var etvSignalPid: Swift.String?
        /// The length in seconds of each fragment. Only used with EBP markers.
        public var fragmentTime: Swift.Double?
        /// If set to passthrough, passes any KLV data from the input source to this output.
        public var klv: MediaLiveClientTypes.M2tsKlv?
        /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var klvDataPids: Swift.String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.M2tsNielsenId3Behavior?
        /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
        public var nullPacketBitrate: Swift.Double?
        /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
        public var patInterval: Swift.Int?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaLiveClientTypes.M2tsPcrControl?
        /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
        public var pcrPeriod: Swift.Int?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var pcrPid: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
        public var pmtInterval: Swift.Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var pmtPid: Swift.String?
        /// The value of the program number field in the Program Map Table.
        public var programNum: Swift.Int?
        /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
        public var rateMode: MediaLiveClientTypes.M2tsRateMode?
        /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var scte27Pids: Swift.String?
        /// Optionally pass SCTE-35 signals from the input source to this output.
        public var scte35Control: MediaLiveClientTypes.M2tsScte35Control?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var scte35Pid: Swift.String?
        /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
        public var scte35PrerollPullupMilliseconds: Swift.Double?
        /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
        public var segmentationMarkers: MediaLiveClientTypes.M2tsSegmentationMarkers?
        /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
        public var segmentationStyle: MediaLiveClientTypes.M2tsSegmentationStyle?
        /// The length in seconds of each segment. Required unless markers is set to none.
        public var segmentationTime: Swift.Double?
        /// When set to passthrough, timed metadata will be passed through from input to output.
        public var timedMetadataBehavior: MediaLiveClientTypes.M2tsTimedMetadataBehavior?
        /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var timedMetadataPid: Swift.String?
        /// The value of the transport stream ID field in the Program Map Table.
        public var transportStreamId: Swift.Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var videoPid: Swift.String?

        public init (
            absentInputAudioBehavior: MediaLiveClientTypes.M2tsAbsentInputAudioBehavior? = nil,
            arib: MediaLiveClientTypes.M2tsArib? = nil,
            aribCaptionsPid: Swift.String? = nil,
            aribCaptionsPidControl: MediaLiveClientTypes.M2tsAribCaptionsPidControl? = nil,
            audioBufferModel: MediaLiveClientTypes.M2tsAudioBufferModel? = nil,
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: Swift.String? = nil,
            audioStreamType: MediaLiveClientTypes.M2tsAudioStreamType? = nil,
            bitrate: Swift.Int? = nil,
            bufferModel: MediaLiveClientTypes.M2tsBufferModel? = nil,
            ccDescriptor: MediaLiveClientTypes.M2tsCcDescriptor? = nil,
            dvbNitSettings: MediaLiveClientTypes.DvbNitSettings? = nil,
            dvbSdtSettings: MediaLiveClientTypes.DvbSdtSettings? = nil,
            dvbSubPids: Swift.String? = nil,
            dvbTdtSettings: MediaLiveClientTypes.DvbTdtSettings? = nil,
            dvbTeletextPid: Swift.String? = nil,
            ebif: MediaLiveClientTypes.M2tsEbifControl? = nil,
            ebpAudioInterval: MediaLiveClientTypes.M2tsAudioInterval? = nil,
            ebpLookaheadMs: Swift.Int? = nil,
            ebpPlacement: MediaLiveClientTypes.M2tsEbpPlacement? = nil,
            ecmPid: Swift.String? = nil,
            esRateInPes: MediaLiveClientTypes.M2tsEsRateInPes? = nil,
            etvPlatformPid: Swift.String? = nil,
            etvSignalPid: Swift.String? = nil,
            fragmentTime: Swift.Double? = nil,
            klv: MediaLiveClientTypes.M2tsKlv? = nil,
            klvDataPids: Swift.String? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.M2tsNielsenId3Behavior? = nil,
            nullPacketBitrate: Swift.Double? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaLiveClientTypes.M2tsPcrControl? = nil,
            pcrPeriod: Swift.Int? = nil,
            pcrPid: Swift.String? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.String? = nil,
            programNum: Swift.Int? = nil,
            rateMode: MediaLiveClientTypes.M2tsRateMode? = nil,
            scte27Pids: Swift.String? = nil,
            scte35Control: MediaLiveClientTypes.M2tsScte35Control? = nil,
            scte35Pid: Swift.String? = nil,
            scte35PrerollPullupMilliseconds: Swift.Double? = nil,
            segmentationMarkers: MediaLiveClientTypes.M2tsSegmentationMarkers? = nil,
            segmentationStyle: MediaLiveClientTypes.M2tsSegmentationStyle? = nil,
            segmentationTime: Swift.Double? = nil,
            timedMetadataBehavior: MediaLiveClientTypes.M2tsTimedMetadataBehavior? = nil,
            timedMetadataPid: Swift.String? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.String? = nil
        )
        {
            self.absentInputAudioBehavior = absentInputAudioBehavior
            self.arib = arib
            self.aribCaptionsPid = aribCaptionsPid
            self.aribCaptionsPidControl = aribCaptionsPidControl
            self.audioBufferModel = audioBufferModel
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.audioStreamType = audioStreamType
            self.bitrate = bitrate
            self.bufferModel = bufferModel
            self.ccDescriptor = ccDescriptor
            self.dvbNitSettings = dvbNitSettings
            self.dvbSdtSettings = dvbSdtSettings
            self.dvbSubPids = dvbSubPids
            self.dvbTdtSettings = dvbTdtSettings
            self.dvbTeletextPid = dvbTeletextPid
            self.ebif = ebif
            self.ebpAudioInterval = ebpAudioInterval
            self.ebpLookaheadMs = ebpLookaheadMs
            self.ebpPlacement = ebpPlacement
            self.ecmPid = ecmPid
            self.esRateInPes = esRateInPes
            self.etvPlatformPid = etvPlatformPid
            self.etvSignalPid = etvSignalPid
            self.fragmentTime = fragmentTime
            self.klv = klv
            self.klvDataPids = klvDataPids
            self.nielsenId3Behavior = nielsenId3Behavior
            self.nullPacketBitrate = nullPacketBitrate
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.programNum = programNum
            self.rateMode = rateMode
            self.scte27Pids = scte27Pids
            self.scte35Control = scte35Control
            self.scte35Pid = scte35Pid
            self.scte35PrerollPullupMilliseconds = scte35PrerollPullupMilliseconds
            self.segmentationMarkers = segmentationMarkers
            self.segmentationStyle = segmentationStyle
            self.segmentationTime = segmentationTime
            self.timedMetadataBehavior = timedMetadataBehavior
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }

}

extension MediaLiveClientTypes {
    /// M2ts Timed Metadata Behavior
    public enum M2tsTimedMetadataBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsTimedMetadataBehavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M2tsTimedMetadataBehavior(rawValue: rawValue) ?? M2tsTimedMetadataBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M3u8 Nielsen Id3 Behavior
    public enum M3u8NielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8NielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M3u8NielsenId3Behavior(rawValue: rawValue) ?? M3u8NielsenId3Behavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M3u8 Pcr Control
    public enum M3u8PcrControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configuredPcrPeriod
        case pcrEveryPesPacket
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8PcrControl] {
            return [
                .configuredPcrPeriod,
                .pcrEveryPesPacket,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
            case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M3u8PcrControl(rawValue: rawValue) ?? M3u8PcrControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// M3u8 Scte35 Behavior
    public enum M3u8Scte35Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8Scte35Behavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M3u8Scte35Behavior(rawValue: rawValue) ?? M3u8Scte35Behavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.M3u8Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case ecmPid = "ecmPid"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPeriod = "pcrPeriod"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case programNum = "programNum"
        case scte35Behavior = "scte35Behavior"
        case scte35Pid = "scte35Pid"
        case timedMetadataBehavior = "timedMetadataBehavior"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioFramesPerPes = self.audioFramesPerPes {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = self.audioPids {
            try encodeContainer.encode(audioPids, forKey: .audioPids)
        }
        if let ecmPid = self.ecmPid {
            try encodeContainer.encode(ecmPid, forKey: .ecmPid)
        }
        if let nielsenId3Behavior = self.nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if let patInterval = self.patInterval {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = self.pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if let pcrPeriod = self.pcrPeriod {
            try encodeContainer.encode(pcrPeriod, forKey: .pcrPeriod)
        }
        if let pcrPid = self.pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if let pmtInterval = self.pmtInterval {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if let pmtPid = self.pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if let programNum = self.programNum {
            try encodeContainer.encode(programNum, forKey: .programNum)
        }
        if let scte35Behavior = self.scte35Behavior {
            try encodeContainer.encode(scte35Behavior.rawValue, forKey: .scte35Behavior)
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let timedMetadataBehavior = self.timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
        if let timedMetadataPid = self.timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if let transportStreamId = self.transportStreamId {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let videoPid = self.videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioFramesPerPesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioPids)
        audioPids = audioPidsDecoded
        let ecmPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ecmPid)
        ecmPid = ecmPidDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8NielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let patIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8PcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pcrPeriod)
        pcrPeriod = pcrPeriodDecoded
        let pcrPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let programNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNum)
        programNum = programNumDecoded
        let scte35BehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8Scte35Behavior.self, forKey: .scte35Behavior)
        scte35Behavior = scte35BehaviorDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8TimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings information for the .m3u8 container
    public struct M3u8Settings: Swift.Equatable {
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
        public var audioPids: Swift.String?
        /// This parameter is unused and deprecated.
        public var ecmPid: Swift.String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.M3u8NielsenId3Behavior?
        /// The number of milliseconds between instances of this table in the output transport stream. A value of "0" writes out the PMT once per segment file.
        public var patInterval: Swift.Int?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaLiveClientTypes.M3u8PcrControl?
        /// Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
        public var pcrPeriod: Swift.Int?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
        public var pcrPid: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream. A value of "0" writes out the PMT once per segment file.
        public var pmtInterval: Swift.Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
        public var pmtPid: Swift.String?
        /// The value of the program number field in the Program Map Table.
        public var programNum: Swift.Int?
        /// If set to passthrough, passes any SCTE-35 signals from the input source to this output.
        public var scte35Behavior: MediaLiveClientTypes.M3u8Scte35Behavior?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
        public var scte35Pid: Swift.String?
        /// When set to passthrough, timed metadata is passed through from input to output.
        public var timedMetadataBehavior: MediaLiveClientTypes.M3u8TimedMetadataBehavior?
        /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var timedMetadataPid: Swift.String?
        /// The value of the transport stream ID field in the Program Map Table.
        public var transportStreamId: Swift.Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
        public var videoPid: Swift.String?

        public init (
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: Swift.String? = nil,
            ecmPid: Swift.String? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.M3u8NielsenId3Behavior? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaLiveClientTypes.M3u8PcrControl? = nil,
            pcrPeriod: Swift.Int? = nil,
            pcrPid: Swift.String? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.String? = nil,
            programNum: Swift.Int? = nil,
            scte35Behavior: MediaLiveClientTypes.M3u8Scte35Behavior? = nil,
            scte35Pid: Swift.String? = nil,
            timedMetadataBehavior: MediaLiveClientTypes.M3u8TimedMetadataBehavior? = nil,
            timedMetadataPid: Swift.String? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.String? = nil
        )
        {
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.ecmPid = ecmPid
            self.nielsenId3Behavior = nielsenId3Behavior
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.programNum = programNum
            self.scte35Behavior = scte35Behavior
            self.scte35Pid = scte35Pid
            self.timedMetadataBehavior = timedMetadataBehavior
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }

}

extension MediaLiveClientTypes {
    /// M3u8 Timed Metadata Behavior
    public enum M3u8TimedMetadataBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8TimedMetadataBehavior] {
            return [
                .noPassthrough,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = M3u8TimedMetadataBehavior(rawValue: rawValue) ?? M3u8TimedMetadataBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.MaintenanceCreateSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceDay = "maintenanceDay"
        case maintenanceStartTime = "maintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maintenanceDay = self.maintenanceDay {
            try encodeContainer.encode(maintenanceDay.rawValue, forKey: .maintenanceDay)
        }
        if let maintenanceStartTime = self.maintenanceStartTime {
            try encodeContainer.encode(maintenanceStartTime, forKey: .maintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceDayDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceDay.self, forKey: .maintenanceDay)
        maintenanceDay = maintenanceDayDecoded
        let maintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceStartTime)
        maintenanceStartTime = maintenanceStartTimeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MaintenanceCreateSettings
    public struct MaintenanceCreateSettings: Swift.Equatable {
        /// Choose one day of the week for maintenance. The chosen day is used for all future maintenance windows.
        public var maintenanceDay: MediaLiveClientTypes.MaintenanceDay?
        /// Choose the hour that maintenance will start. The chosen time is used for all future maintenance windows.
        public var maintenanceStartTime: Swift.String?

        public init (
            maintenanceDay: MediaLiveClientTypes.MaintenanceDay? = nil,
            maintenanceStartTime: Swift.String? = nil
        )
        {
            self.maintenanceDay = maintenanceDay
            self.maintenanceStartTime = maintenanceStartTime
        }
    }

}

extension MediaLiveClientTypes {
    /// The currently selected maintenance day.
    public enum MaintenanceDay: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case friday
        case monday
        case saturday
        case sunday
        case thursday
        case tuesday
        case wednesday
        case sdkUnknown(Swift.String)

        public static var allCases: [MaintenanceDay] {
            return [
                .friday,
                .monday,
                .saturday,
                .sunday,
                .thursday,
                .tuesday,
                .wednesday,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .friday: return "FRIDAY"
            case .monday: return "MONDAY"
            case .saturday: return "SATURDAY"
            case .sunday: return "SUNDAY"
            case .thursday: return "THURSDAY"
            case .tuesday: return "TUESDAY"
            case .wednesday: return "WEDNESDAY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MaintenanceDay(rawValue: rawValue) ?? MaintenanceDay.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.MaintenanceStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceDay = "maintenanceDay"
        case maintenanceDeadline = "maintenanceDeadline"
        case maintenanceScheduledDate = "maintenanceScheduledDate"
        case maintenanceStartTime = "maintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maintenanceDay = self.maintenanceDay {
            try encodeContainer.encode(maintenanceDay.rawValue, forKey: .maintenanceDay)
        }
        if let maintenanceDeadline = self.maintenanceDeadline {
            try encodeContainer.encode(maintenanceDeadline, forKey: .maintenanceDeadline)
        }
        if let maintenanceScheduledDate = self.maintenanceScheduledDate {
            try encodeContainer.encode(maintenanceScheduledDate, forKey: .maintenanceScheduledDate)
        }
        if let maintenanceStartTime = self.maintenanceStartTime {
            try encodeContainer.encode(maintenanceStartTime, forKey: .maintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceDayDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceDay.self, forKey: .maintenanceDay)
        maintenanceDay = maintenanceDayDecoded
        let maintenanceDeadlineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceDeadline)
        maintenanceDeadline = maintenanceDeadlineDecoded
        let maintenanceScheduledDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceScheduledDate)
        maintenanceScheduledDate = maintenanceScheduledDateDecoded
        let maintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceStartTime)
        maintenanceStartTime = maintenanceStartTimeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MaintenanceStatus
    public struct MaintenanceStatus: Swift.Equatable {
        /// The currently selected maintenance day.
        public var maintenanceDay: MediaLiveClientTypes.MaintenanceDay?
        /// Maintenance is required by the displayed date and time. Date and time is in ISO.
        public var maintenanceDeadline: Swift.String?
        /// The currently scheduled maintenance date and time. Date and time is in ISO.
        public var maintenanceScheduledDate: Swift.String?
        /// The currently selected maintenance start time. Time is in UTC.
        public var maintenanceStartTime: Swift.String?

        public init (
            maintenanceDay: MediaLiveClientTypes.MaintenanceDay? = nil,
            maintenanceDeadline: Swift.String? = nil,
            maintenanceScheduledDate: Swift.String? = nil,
            maintenanceStartTime: Swift.String? = nil
        )
        {
            self.maintenanceDay = maintenanceDay
            self.maintenanceDeadline = maintenanceDeadline
            self.maintenanceScheduledDate = maintenanceScheduledDate
            self.maintenanceStartTime = maintenanceStartTime
        }
    }

}

extension MediaLiveClientTypes.MaintenanceUpdateSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceDay = "maintenanceDay"
        case maintenanceScheduledDate = "maintenanceScheduledDate"
        case maintenanceStartTime = "maintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maintenanceDay = self.maintenanceDay {
            try encodeContainer.encode(maintenanceDay.rawValue, forKey: .maintenanceDay)
        }
        if let maintenanceScheduledDate = self.maintenanceScheduledDate {
            try encodeContainer.encode(maintenanceScheduledDate, forKey: .maintenanceScheduledDate)
        }
        if let maintenanceStartTime = self.maintenanceStartTime {
            try encodeContainer.encode(maintenanceStartTime, forKey: .maintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceDayDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceDay.self, forKey: .maintenanceDay)
        maintenanceDay = maintenanceDayDecoded
        let maintenanceScheduledDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceScheduledDate)
        maintenanceScheduledDate = maintenanceScheduledDateDecoded
        let maintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceStartTime)
        maintenanceStartTime = maintenanceStartTimeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MaintenanceUpdateSettings
    public struct MaintenanceUpdateSettings: Swift.Equatable {
        /// Choose one day of the week for maintenance. The chosen day is used for all future maintenance windows.
        public var maintenanceDay: MediaLiveClientTypes.MaintenanceDay?
        /// Choose a specific date for maintenance to occur. The chosen date is used for the next maintenance window only.
        public var maintenanceScheduledDate: Swift.String?
        /// Choose the hour that maintenance will start. The chosen time is used for all future maintenance windows.
        public var maintenanceStartTime: Swift.String?

        public init (
            maintenanceDay: MediaLiveClientTypes.MaintenanceDay? = nil,
            maintenanceScheduledDate: Swift.String? = nil,
            maintenanceStartTime: Swift.String? = nil
        )
        {
            self.maintenanceDay = maintenanceDay
            self.maintenanceScheduledDate = maintenanceScheduledDate
            self.maintenanceStartTime = maintenanceStartTime
        }
    }

}

extension MediaLiveClientTypes.MediaConnectFlow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowArn = "flowArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowArn = self.flowArn {
            try encodeContainer.encode(flowArn, forKey: .flowArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowArn)
        flowArn = flowArnDecoded
    }
}

extension MediaLiveClientTypes {
    /// The settings for a MediaConnect Flow.
    public struct MediaConnectFlow: Swift.Equatable {
        /// The unique ARN of the MediaConnect Flow being used as a source.
        public var flowArn: Swift.String?

        public init (
            flowArn: Swift.String? = nil
        )
        {
            self.flowArn = flowArn
        }
    }

}

extension MediaLiveClientTypes.MediaConnectFlowRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowArn = "flowArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flowArn = self.flowArn {
            try encodeContainer.encode(flowArn, forKey: .flowArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowArn)
        flowArn = flowArnDecoded
    }
}

extension MediaLiveClientTypes {
    /// The settings for a MediaConnect Flow.
    public struct MediaConnectFlowRequest: Swift.Equatable {
        /// The ARN of the MediaConnect Flow that you want to use as a source.
        public var flowArn: Swift.String?

        public init (
            flowArn: Swift.String? = nil
        )
        {
            self.flowArn = flowArn
        }
    }

}

extension MediaLiveClientTypes.MediaPackageGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "destination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension MediaLiveClientTypes {
    /// Media Package Group Settings
    public struct MediaPackageGroupSettings: Swift.Equatable {
        /// MediaPackage channel destination.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?

        public init (
            destination: MediaLiveClientTypes.OutputLocationRef? = nil
        )
        {
            self.destination = destination
        }
    }

}

extension MediaLiveClientTypes.MediaPackageOutputDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId = "channelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = self.channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelId)
        channelId = channelIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// MediaPackage Output Destination Settings
    public struct MediaPackageOutputDestinationSettings: Swift.Equatable {
        /// ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
        public var channelId: Swift.String?

        public init (
            channelId: Swift.String? = nil
        )
        {
            self.channelId = channelId
        }
    }

}

extension MediaLiveClientTypes.MediaPackageOutputSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Media Package Output Settings
    public struct MediaPackageOutputSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "duration"
        case passwordParam = "passwordParam"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let passwordParam = self.passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let passwordParamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings to specify the rendering of motion graphics into the video stream.
    public struct MotionGraphicsActivateScheduleActionSettings: Swift.Equatable {
        /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
        public var duration: Swift.Int?
        /// Key used to extract the password from EC2 Parameter store
        public var passwordParam: Swift.String?
        /// URI of the HTML5 content to be rendered into the live stream.
        public var url: Swift.String?
        /// Documentation update needed
        public var username: Swift.String?

        public init (
            duration: Swift.Int? = nil,
            passwordParam: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.duration = duration
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes.MotionGraphicsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case motionGraphicsInsertion = "motionGraphicsInsertion"
        case motionGraphicsSettings = "motionGraphicsSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let motionGraphicsInsertion = self.motionGraphicsInsertion {
            try encodeContainer.encode(motionGraphicsInsertion.rawValue, forKey: .motionGraphicsInsertion)
        }
        if let motionGraphicsSettings = self.motionGraphicsSettings {
            try encodeContainer.encode(motionGraphicsSettings, forKey: .motionGraphicsSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let motionGraphicsInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsInsertion.self, forKey: .motionGraphicsInsertion)
        motionGraphicsInsertion = motionGraphicsInsertionDecoded
        let motionGraphicsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsSettings.self, forKey: .motionGraphicsSettings)
        motionGraphicsSettings = motionGraphicsSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Motion Graphics Configuration
    public struct MotionGraphicsConfiguration: Swift.Equatable {
        /// Motion Graphics Insertion
        public var motionGraphicsInsertion: MediaLiveClientTypes.MotionGraphicsInsertion?
        /// Motion Graphics Settings
        /// This member is required.
        public var motionGraphicsSettings: MediaLiveClientTypes.MotionGraphicsSettings?

        public init (
            motionGraphicsInsertion: MediaLiveClientTypes.MotionGraphicsInsertion? = nil,
            motionGraphicsSettings: MediaLiveClientTypes.MotionGraphicsSettings? = nil
        )
        {
            self.motionGraphicsInsertion = motionGraphicsInsertion
            self.motionGraphicsSettings = motionGraphicsSettings
        }
    }

}

extension MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Settings to specify the ending of rendering motion graphics into the video stream.
    public struct MotionGraphicsDeactivateScheduleActionSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes {
    /// Motion Graphics Insertion
    public enum MotionGraphicsInsertion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MotionGraphicsInsertion] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MotionGraphicsInsertion(rawValue: rawValue) ?? MotionGraphicsInsertion.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.MotionGraphicsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case htmlMotionGraphicsSettings = "htmlMotionGraphicsSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let htmlMotionGraphicsSettings = self.htmlMotionGraphicsSettings {
            try encodeContainer.encode(htmlMotionGraphicsSettings, forKey: .htmlMotionGraphicsSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let htmlMotionGraphicsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HtmlMotionGraphicsSettings.self, forKey: .htmlMotionGraphicsSettings)
        htmlMotionGraphicsSettings = htmlMotionGraphicsSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Motion Graphics Settings
    public struct MotionGraphicsSettings: Swift.Equatable {
        /// Html Motion Graphics Settings
        public var htmlMotionGraphicsSettings: MediaLiveClientTypes.HtmlMotionGraphicsSettings?

        public init (
            htmlMotionGraphicsSettings: MediaLiveClientTypes.HtmlMotionGraphicsSettings? = nil
        )
        {
            self.htmlMotionGraphicsSettings = htmlMotionGraphicsSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Mp2 Coding Mode
    public enum Mp2CodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case sdkUnknown(Swift.String)

        public static var allCases: [Mp2CodingMode] {
            return [
                .codingMode10,
                .codingMode20,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mp2CodingMode(rawValue: rawValue) ?? Mp2CodingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Mp2Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let sampleRate = self.sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mp2CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Mp2 Settings
    public struct Mp2Settings: Swift.Equatable {
        /// Average bitrate in bits/second.
        public var bitrate: Swift.Double?
        /// The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
        public var codingMode: MediaLiveClientTypes.Mp2CodingMode?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Double?

        public init (
            bitrate: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.Mp2CodingMode? = nil,
            sampleRate: Swift.Double? = nil
        )
        {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.sampleRate = sampleRate
        }
    }

}

extension MediaLiveClientTypes {
    /// Mpeg2 Adaptive Quantization
    public enum Mpeg2AdaptiveQuantization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case high
        case low
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .low,
                .medium,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2AdaptiveQuantization(rawValue: rawValue) ?? Mpeg2AdaptiveQuantization.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Color Metadata
    public enum Mpeg2ColorMetadata: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ColorMetadata] {
            return [
                .ignore,
                .insert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2ColorMetadata(rawValue: rawValue) ?? Mpeg2ColorMetadata.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Color Space
    public enum Mpeg2ColorSpace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ColorSpace] {
            return [
                .auto,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2ColorSpace(rawValue: rawValue) ?? Mpeg2ColorSpace.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Display Ratio
    public enum Mpeg2DisplayRatio: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case displayratio16x9
        case displayratio4x3
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2DisplayRatio] {
            return [
                .displayratio16x9,
                .displayratio4x3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .displayratio16x9: return "DISPLAYRATIO16X9"
            case .displayratio4x3: return "DISPLAYRATIO4X3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2DisplayRatio(rawValue: rawValue) ?? Mpeg2DisplayRatio.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Mpeg2FilterSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case temporalFilterSettings = "temporalFilterSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let temporalFilterSettings = self.temporalFilterSettings {
            try encodeContainer.encode(temporalFilterSettings, forKey: .temporalFilterSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let temporalFilterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TemporalFilterSettings.self, forKey: .temporalFilterSettings)
        temporalFilterSettings = temporalFilterSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Filter Settings
    public struct Mpeg2FilterSettings: Swift.Equatable {
        /// Temporal Filter Settings
        public var temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings?

        public init (
            temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings? = nil
        )
        {
            self.temporalFilterSettings = temporalFilterSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Mpeg2 Gop Size Units
    public enum Mpeg2GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2GopSizeUnits] {
            return [
                .frames,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2GopSizeUnits(rawValue: rawValue) ?? Mpeg2GopSizeUnits.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Scan Type
    public enum Mpeg2ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ScanType] {
            return [
                .interlaced,
                .progressive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2ScanType(rawValue: rawValue) ?? Mpeg2ScanType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Mpeg2Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case colorMetadata = "colorMetadata"
        case colorSpace = "colorSpace"
        case displayAspectRatio = "displayAspectRatio"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopNumBFrames = "gopNumBFrames"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case scanType = "scanType"
        case subgopLength = "subgopLength"
        case timecodeBurninSettings = "timecodeBurninSettings"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = self.adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = self.afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let colorMetadata = self.colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpace = self.colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let displayAspectRatio = self.displayAspectRatio {
            try encodeContainer.encode(displayAspectRatio.rawValue, forKey: .displayAspectRatio)
        }
        if let filterSettings = self.filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = self.fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopClosedCadence = self.gopClosedCadence {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if let gopNumBFrames = self.gopNumBFrames {
            try encodeContainer.encode(gopNumBFrames, forKey: .gopNumBFrames)
        }
        if let gopSize = self.gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = self.gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let subgopLength = self.subgopLength {
            try encodeContainer.encode(subgopLength.rawValue, forKey: .subgopLength)
        }
        if let timecodeBurninSettings = self.timecodeBurninSettings {
            try encodeContainer.encode(timecodeBurninSettings, forKey: .timecodeBurninSettings)
        }
        if let timecodeInsertion = self.timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2ColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let displayAspectRatioDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2DisplayRatio.self, forKey: .displayAspectRatio)
        displayAspectRatio = displayAspectRatioDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopNumBFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopNumBFrames)
        gopNumBFrames = gopNumBFramesDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let subgopLengthDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2SubGopLength.self, forKey: .subgopLength)
        subgopLength = subgopLengthDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
        let timecodeBurninSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeBurninSettings.self, forKey: .timecodeBurninSettings)
        timecodeBurninSettings = timecodeBurninSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Settings
    public struct Mpeg2Settings: Swift.Equatable {
        /// Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
        public var adaptiveQuantization: MediaLiveClientTypes.Mpeg2AdaptiveQuantization?
        /// Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
        public var colorMetadata: MediaLiveClientTypes.Mpeg2ColorMetadata?
        /// Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on "MediaLive Features - Video - color space" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
        public var colorSpace: MediaLiveClientTypes.Mpeg2ColorSpace?
        /// Sets the pixel aspect ratio for the encode.
        public var displayAspectRatio: MediaLiveClientTypes.Mpeg2DisplayRatio?
        /// Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
        public var filterSettings: MediaLiveClientTypes.Mpeg2FilterSettings?
        /// Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
        /// This member is required.
        public var framerateDenominator: Swift.Int?
        /// The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
        /// This member is required.
        public var framerateNumerator: Swift.Int?
        /// MPEG2: default is open GOP.
        public var gopClosedCadence: Swift.Int?
        /// Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
        public var gopNumBFrames: Swift.Int?
        /// Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
        public var gopSize: Swift.Double?
        /// Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
        public var gopSizeUnits: MediaLiveClientTypes.Mpeg2GopSizeUnits?
        /// Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
        public var scanType: MediaLiveClientTypes.Mpeg2ScanType?
        /// Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
        public var subgopLength: MediaLiveClientTypes.Mpeg2SubGopLength?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?
        /// Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on "MediaLive Features - Timecode configuration" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
        public var timecodeInsertion: MediaLiveClientTypes.Mpeg2TimecodeInsertionBehavior?

        public init (
            adaptiveQuantization: MediaLiveClientTypes.Mpeg2AdaptiveQuantization? = nil,
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            colorMetadata: MediaLiveClientTypes.Mpeg2ColorMetadata? = nil,
            colorSpace: MediaLiveClientTypes.Mpeg2ColorSpace? = nil,
            displayAspectRatio: MediaLiveClientTypes.Mpeg2DisplayRatio? = nil,
            filterSettings: MediaLiveClientTypes.Mpeg2FilterSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopNumBFrames: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.Mpeg2GopSizeUnits? = nil,
            scanType: MediaLiveClientTypes.Mpeg2ScanType? = nil,
            subgopLength: MediaLiveClientTypes.Mpeg2SubGopLength? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil,
            timecodeInsertion: MediaLiveClientTypes.Mpeg2TimecodeInsertionBehavior? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.colorMetadata = colorMetadata
            self.colorSpace = colorSpace
            self.displayAspectRatio = displayAspectRatio
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopClosedCadence = gopClosedCadence
            self.gopNumBFrames = gopNumBFrames
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.scanType = scanType
            self.subgopLength = subgopLength
            self.timecodeBurninSettings = timecodeBurninSettings
            self.timecodeInsertion = timecodeInsertion
        }
    }

}

extension MediaLiveClientTypes {
    /// Mpeg2 Sub Gop Length
    public enum Mpeg2SubGopLength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case fixed
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2SubGopLength] {
            return [
                .dynamic,
                .fixed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "DYNAMIC"
            case .fixed: return "FIXED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2SubGopLength(rawValue: rawValue) ?? Mpeg2SubGopLength.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Timecode Insertion Behavior
    public enum Mpeg2TimecodeInsertionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case gopTimecode
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2TimecodeInsertionBehavior] {
            return [
                .disabled,
                .gopTimecode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .gopTimecode: return "GOP_TIMECODE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mpeg2TimecodeInsertionBehavior(rawValue: rawValue) ?? Mpeg2TimecodeInsertionBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.MsSmoothGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acquisitionPointId = "acquisitionPointId"
        case audioOnlyTimecodeControl = "audioOnlyTimecodeControl"
        case certificateMode = "certificateMode"
        case connectionRetryInterval = "connectionRetryInterval"
        case destination = "destination"
        case eventId = "eventId"
        case eventIdMode = "eventIdMode"
        case eventStopBehavior = "eventStopBehavior"
        case filecacheDuration = "filecacheDuration"
        case fragmentLength = "fragmentLength"
        case inputLossAction = "inputLossAction"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
        case segmentationMode = "segmentationMode"
        case sendDelayMs = "sendDelayMs"
        case sparseTrackType = "sparseTrackType"
        case streamManifestBehavior = "streamManifestBehavior"
        case timestampOffset = "timestampOffset"
        case timestampOffsetMode = "timestampOffsetMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acquisitionPointId = self.acquisitionPointId {
            try encodeContainer.encode(acquisitionPointId, forKey: .acquisitionPointId)
        }
        if let audioOnlyTimecodeControl = self.audioOnlyTimecodeControl {
            try encodeContainer.encode(audioOnlyTimecodeControl.rawValue, forKey: .audioOnlyTimecodeControl)
        }
        if let certificateMode = self.certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventIdMode = self.eventIdMode {
            try encodeContainer.encode(eventIdMode.rawValue, forKey: .eventIdMode)
        }
        if let eventStopBehavior = self.eventStopBehavior {
            try encodeContainer.encode(eventStopBehavior.rawValue, forKey: .eventStopBehavior)
        }
        if let filecacheDuration = self.filecacheDuration {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let fragmentLength = self.fragmentLength {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let inputLossAction = self.inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
        if let segmentationMode = self.segmentationMode {
            try encodeContainer.encode(segmentationMode.rawValue, forKey: .segmentationMode)
        }
        if let sendDelayMs = self.sendDelayMs {
            try encodeContainer.encode(sendDelayMs, forKey: .sendDelayMs)
        }
        if let sparseTrackType = self.sparseTrackType {
            try encodeContainer.encode(sparseTrackType.rawValue, forKey: .sparseTrackType)
        }
        if let streamManifestBehavior = self.streamManifestBehavior {
            try encodeContainer.encode(streamManifestBehavior.rawValue, forKey: .streamManifestBehavior)
        }
        if let timestampOffset = self.timestampOffset {
            try encodeContainer.encode(timestampOffset, forKey: .timestampOffset)
        }
        if let timestampOffsetMode = self.timestampOffsetMode {
            try encodeContainer.encode(timestampOffsetMode.rawValue, forKey: .timestampOffsetMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acquisitionPointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acquisitionPointId)
        acquisitionPointId = acquisitionPointIdDecoded
        let audioOnlyTimecodeControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupAudioOnlyTimecodeControl.self, forKey: .audioOnlyTimecodeControl)
        audioOnlyTimecodeControl = audioOnlyTimecodeControlDecoded
        let certificateModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupCertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventIdModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupEventIdMode.self, forKey: .eventIdMode)
        eventIdMode = eventIdModeDecoded
        let eventStopBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupEventStopBehavior.self, forKey: .eventStopBehavior)
        eventStopBehavior = eventStopBehaviorDecoded
        let filecacheDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let fragmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossActionForMsSmoothOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
        let segmentationModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupSegmentationMode.self, forKey: .segmentationMode)
        segmentationMode = segmentationModeDecoded
        let sendDelayMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sendDelayMs)
        sendDelayMs = sendDelayMsDecoded
        let sparseTrackTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupSparseTrackType.self, forKey: .sparseTrackType)
        sparseTrackType = sparseTrackTypeDecoded
        let streamManifestBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupStreamManifestBehavior.self, forKey: .streamManifestBehavior)
        streamManifestBehavior = streamManifestBehaviorDecoded
        let timestampOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestampOffset)
        timestampOffset = timestampOffsetDecoded
        let timestampOffsetModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupTimestampOffsetMode.self, forKey: .timestampOffsetMode)
        timestampOffsetMode = timestampOffsetModeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Ms Smooth Group Settings
    public struct MsSmoothGroupSettings: Swift.Equatable {
        /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
        public var acquisitionPointId: Swift.String?
        /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
        public var audioOnlyTimecodeControl: MediaLiveClientTypes.SmoothGroupAudioOnlyTimecodeControl?
        /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
        public var certificateMode: MediaLiveClientTypes.SmoothGroupCertificateMode?
        /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
        public var connectionRetryInterval: Swift.Int?
        /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
        public var eventId: Swift.String?
        /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options:
        ///
        /// * "useConfigured" - use the value provided in eventId
        ///
        /// * "useTimestamp" - generate and send an event ID based on the current timestamp
        ///
        /// * "noEventId" - do not send an event ID to the IIS server.
        public var eventIdMode: MediaLiveClientTypes.SmoothGroupEventIdMode?
        /// When set to sendEos, send EOS signal to IIS server when stopping the event
        public var eventStopBehavior: MediaLiveClientTypes.SmoothGroupEventStopBehavior?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
        public var fragmentLength: Swift.Int?
        /// Parameter that control output group behavior on input loss.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForMsSmoothOut?
        /// Number of retry attempts.
        public var numRetries: Swift.Int?
        /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
        public var restartDelay: Swift.Int?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public var segmentationMode: MediaLiveClientTypes.SmoothGroupSegmentationMode?
        /// Number of milliseconds to delay the output from the second pipeline.
        public var sendDelayMs: Swift.Int?
        /// Identifies the type of data to place in the sparse track:
        ///
        /// * SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment.
        ///
        /// * SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment.
        ///
        /// * NONE: Don't generate a sparse track for any outputs in this output group.
        public var sparseTrackType: MediaLiveClientTypes.SmoothGroupSparseTrackType?
        /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
        public var streamManifestBehavior: MediaLiveClientTypes.SmoothGroupStreamManifestBehavior?
        /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
        public var timestampOffset: Swift.String?
        /// Type of timestamp date offset to use.
        ///
        /// * useEventStartDate: Use the date the event was started as the offset
        ///
        /// * useConfiguredOffset: Use an explicitly configured date as the offset
        public var timestampOffsetMode: MediaLiveClientTypes.SmoothGroupTimestampOffsetMode?

        public init (
            acquisitionPointId: Swift.String? = nil,
            audioOnlyTimecodeControl: MediaLiveClientTypes.SmoothGroupAudioOnlyTimecodeControl? = nil,
            certificateMode: MediaLiveClientTypes.SmoothGroupCertificateMode? = nil,
            connectionRetryInterval: Swift.Int? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            eventId: Swift.String? = nil,
            eventIdMode: MediaLiveClientTypes.SmoothGroupEventIdMode? = nil,
            eventStopBehavior: MediaLiveClientTypes.SmoothGroupEventStopBehavior? = nil,
            filecacheDuration: Swift.Int? = nil,
            fragmentLength: Swift.Int? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForMsSmoothOut? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil,
            segmentationMode: MediaLiveClientTypes.SmoothGroupSegmentationMode? = nil,
            sendDelayMs: Swift.Int? = nil,
            sparseTrackType: MediaLiveClientTypes.SmoothGroupSparseTrackType? = nil,
            streamManifestBehavior: MediaLiveClientTypes.SmoothGroupStreamManifestBehavior? = nil,
            timestampOffset: Swift.String? = nil,
            timestampOffsetMode: MediaLiveClientTypes.SmoothGroupTimestampOffsetMode? = nil
        )
        {
            self.acquisitionPointId = acquisitionPointId
            self.audioOnlyTimecodeControl = audioOnlyTimecodeControl
            self.certificateMode = certificateMode
            self.connectionRetryInterval = connectionRetryInterval
            self.destination = destination
            self.eventId = eventId
            self.eventIdMode = eventIdMode
            self.eventStopBehavior = eventStopBehavior
            self.filecacheDuration = filecacheDuration
            self.fragmentLength = fragmentLength
            self.inputLossAction = inputLossAction
            self.numRetries = numRetries
            self.restartDelay = restartDelay
            self.segmentationMode = segmentationMode
            self.sendDelayMs = sendDelayMs
            self.sparseTrackType = sparseTrackType
            self.streamManifestBehavior = streamManifestBehavior
            self.timestampOffset = timestampOffset
            self.timestampOffsetMode = timestampOffsetMode
        }
    }

}

extension MediaLiveClientTypes {
    /// Ms Smooth H265 Packaging Type
    public enum MsSmoothH265PackagingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hev1
        case hvc1
        case sdkUnknown(Swift.String)

        public static var allCases: [MsSmoothH265PackagingType] {
            return [
                .hev1,
                .hvc1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hvc1: return "HVC1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MsSmoothH265PackagingType(rawValue: rawValue) ?? MsSmoothH265PackagingType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.MsSmoothOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case h265PackagingType = "h265PackagingType"
        case nameModifier = "nameModifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let h265PackagingType = self.h265PackagingType {
            try encodeContainer.encode(h265PackagingType.rawValue, forKey: .h265PackagingType)
        }
        if let nameModifier = self.nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let h265PackagingTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MsSmoothH265PackagingType.self, forKey: .h265PackagingType)
        h265PackagingType = h265PackagingTypeDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
    }
}

extension MediaLiveClientTypes {
    /// Ms Smooth Output Settings
    public struct MsSmoothOutputSettings: Swift.Equatable {
        /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
        public var h265PackagingType: MediaLiveClientTypes.MsSmoothH265PackagingType?
        /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
        public var nameModifier: Swift.String?

        public init (
            h265PackagingType: MediaLiveClientTypes.MsSmoothH265PackagingType? = nil,
            nameModifier: Swift.String? = nil
        )
        {
            self.h265PackagingType = h265PackagingType
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes.Multiplex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __string0 in availabilityZones {
                try availabilityZonesContainer.encode(__string0)
            }
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for multiplexoutputdestination0 in destinations {
                try destinationsContainer.encode(multiplexoutputdestination0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let multiplexSettings = self.multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelinesRunningCount = self.pipelinesRunningCount {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let programCount = self.programCount {
            try encodeContainer.encode(programCount, forKey: .programCount)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// The multiplex object.
    public struct Multiplex: Swift.Equatable {
        /// The unique arn of the multiplex.
        public var arn: Swift.String?
        /// A list of availability zones for the multiplex.
        public var availabilityZones: [Swift.String]?
        /// A list of the multiplex output destinations.
        public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
        /// The unique id of the multiplex.
        public var id: Swift.String?
        /// Configuration for a multiplex event.
        public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
        /// The name of the multiplex.
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The number of programs in the multiplex.
        public var programCount: Swift.Int?
        /// The current state of the multiplex.
        public var state: MediaLiveClientTypes.MultiplexState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
            id: Swift.String? = nil,
            multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            programCount: Swift.Int? = nil,
            state: MediaLiveClientTypes.MultiplexState? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }
    }

}

extension MediaLiveClientTypes.MultiplexGroupSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Multiplex Group Settings
    public struct MultiplexGroupSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entitlementArn = "entitlementArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entitlementArn = self.entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitlementArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entitlementArn)
        entitlementArn = entitlementArnDecoded
    }
}

extension MediaLiveClientTypes {
    /// Multiplex MediaConnect output destination settings.
    public struct MultiplexMediaConnectOutputDestinationSettings: Swift.Equatable {
        /// The MediaConnect entitlement ARN available as a Flow source.
        public var entitlementArn: Swift.String?

        public init (
            entitlementArn: Swift.String? = nil
        )
        {
            self.entitlementArn = entitlementArn
        }
    }

}

extension MediaLiveClientTypes.MultiplexOutputDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mediaConnectSettings = "mediaConnectSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mediaConnectSettings = self.mediaConnectSettings {
            try encodeContainer.encode(mediaConnectSettings, forKey: .mediaConnectSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaConnectSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings.self, forKey: .mediaConnectSettings)
        mediaConnectSettings = mediaConnectSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Multiplex output destination settings
    public struct MultiplexOutputDestination: Swift.Equatable {
        /// Multiplex MediaConnect output destination settings.
        public var mediaConnectSettings: MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings?

        public init (
            mediaConnectSettings: MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings? = nil
        )
        {
            self.mediaConnectSettings = mediaConnectSettings
        }
    }

}

extension MediaLiveClientTypes.MultiplexOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "destination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension MediaLiveClientTypes {
    /// Multiplex Output Settings
    public struct MultiplexOutputSettings: Swift.Equatable {
        /// Destination is a Multiplex.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?

        public init (
            destination: MediaLiveClientTypes.OutputLocationRef? = nil
        )
        {
            self.destination = destination
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgram: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId = "channelId"
        case multiplexProgramSettings = "multiplexProgramSettings"
        case packetIdentifiersMap = "packetIdentifiersMap"
        case pipelineDetails = "pipelineDetails"
        case programName = "programName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = self.channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let multiplexProgramSettings = self.multiplexProgramSettings {
            try encodeContainer.encode(multiplexProgramSettings, forKey: .multiplexProgramSettings)
        }
        if let packetIdentifiersMap = self.packetIdentifiersMap {
            try encodeContainer.encode(packetIdentifiersMap, forKey: .packetIdentifiersMap)
        }
        if let pipelineDetails = pipelineDetails {
            var pipelineDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineDetails)
            for multiplexprogrampipelinedetail0 in pipelineDetails {
                try pipelineDetailsContainer.encode(multiplexprogrampipelinedetail0)
            }
        }
        if let programName = self.programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
        let packetIdentifiersMapDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.self, forKey: .packetIdentifiersMap)
        packetIdentifiersMap = packetIdentifiersMapDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexProgramPipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.MultiplexProgramPipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// The multiplex program object.
    public struct MultiplexProgram: Swift.Equatable {
        /// The MediaLive channel associated with the program.
        public var channelId: Swift.String?
        /// The settings for this multiplex program.
        public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
        /// The packet identifier map for this multiplex program.
        public var packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
        /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
        public var pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
        /// The name of the multiplex program.
        public var programName: Swift.String?

        public init (
            channelId: Swift.String? = nil,
            multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
            packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap? = nil,
            pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil,
            programName: Swift.String? = nil
        )
        {
            self.channelId = channelId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.packetIdentifiersMap = packetIdentifiersMap
            self.pipelineDetails = pipelineDetails
            self.programName = programName
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexId = "multiplexId"
        case programName = "programName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexId = self.multiplexId {
            try encodeContainer.encode(multiplexId, forKey: .multiplexId)
        }
        if let programName = self.programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multiplexId)
        multiplexId = multiplexIdDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Multiplex Program Input Destination Settings for outputting a Channel to a Multiplex
    public struct MultiplexProgramChannelDestinationSettings: Swift.Equatable {
        /// The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
        public var multiplexId: Swift.String?
        /// The program name of the Multiplex program that the encoder is providing output to.
        public var programName: Swift.String?

        public init (
            multiplexId: Swift.String? = nil,
            programName: Swift.String? = nil
        )
        {
            self.multiplexId = multiplexId
            self.programName = programName
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioPids = "audioPids"
        case dvbSubPids = "dvbSubPids"
        case dvbTeletextPid = "dvbTeletextPid"
        case etvPlatformPid = "etvPlatformPid"
        case etvSignalPid = "etvSignalPid"
        case klvDataPids = "klvDataPids"
        case pcrPid = "pcrPid"
        case pmtPid = "pmtPid"
        case privateMetadataPid = "privateMetadataPid"
        case scte27Pids = "scte27Pids"
        case scte35Pid = "scte35Pid"
        case timedMetadataPid = "timedMetadataPid"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioPids = audioPids {
            var audioPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioPids)
            for __integer0 in audioPids {
                try audioPidsContainer.encode(__integer0)
            }
        }
        if let dvbSubPids = dvbSubPids {
            var dvbSubPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dvbSubPids)
            for __integer0 in dvbSubPids {
                try dvbSubPidsContainer.encode(__integer0)
            }
        }
        if let dvbTeletextPid = self.dvbTeletextPid {
            try encodeContainer.encode(dvbTeletextPid, forKey: .dvbTeletextPid)
        }
        if let etvPlatformPid = self.etvPlatformPid {
            try encodeContainer.encode(etvPlatformPid, forKey: .etvPlatformPid)
        }
        if let etvSignalPid = self.etvSignalPid {
            try encodeContainer.encode(etvSignalPid, forKey: .etvSignalPid)
        }
        if let klvDataPids = klvDataPids {
            var klvDataPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .klvDataPids)
            for __integer0 in klvDataPids {
                try klvDataPidsContainer.encode(__integer0)
            }
        }
        if let pcrPid = self.pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if let pmtPid = self.pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if let privateMetadataPid = self.privateMetadataPid {
            try encodeContainer.encode(privateMetadataPid, forKey: .privateMetadataPid)
        }
        if let scte27Pids = scte27Pids {
            var scte27PidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scte27Pids)
            for __integer0 in scte27Pids {
                try scte27PidsContainer.encode(__integer0)
            }
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let timedMetadataPid = self.timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if let videoPid = self.videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioPidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .audioPids)
        var audioPidsDecoded0:[Swift.Int]? = nil
        if let audioPidsContainer = audioPidsContainer {
            audioPidsDecoded0 = [Swift.Int]()
            for integer0 in audioPidsContainer {
                if let integer0 = integer0 {
                    audioPidsDecoded0?.append(integer0)
                }
            }
        }
        audioPids = audioPidsDecoded0
        let dvbSubPidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .dvbSubPids)
        var dvbSubPidsDecoded0:[Swift.Int]? = nil
        if let dvbSubPidsContainer = dvbSubPidsContainer {
            dvbSubPidsDecoded0 = [Swift.Int]()
            for integer0 in dvbSubPidsContainer {
                if let integer0 = integer0 {
                    dvbSubPidsDecoded0?.append(integer0)
                }
            }
        }
        dvbSubPids = dvbSubPidsDecoded0
        let dvbTeletextPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dvbTeletextPid)
        dvbTeletextPid = dvbTeletextPidDecoded
        let etvPlatformPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .etvPlatformPid)
        etvPlatformPid = etvPlatformPidDecoded
        let etvSignalPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .etvSignalPid)
        etvSignalPid = etvSignalPidDecoded
        let klvDataPidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .klvDataPids)
        var klvDataPidsDecoded0:[Swift.Int]? = nil
        if let klvDataPidsContainer = klvDataPidsContainer {
            klvDataPidsDecoded0 = [Swift.Int]()
            for integer0 in klvDataPidsContainer {
                if let integer0 = integer0 {
                    klvDataPidsDecoded0?.append(integer0)
                }
            }
        }
        klvDataPids = klvDataPidsDecoded0
        let pcrPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let privateMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .privateMetadataPid)
        privateMetadataPid = privateMetadataPidDecoded
        let scte27PidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .scte27Pids)
        var scte27PidsDecoded0:[Swift.Int]? = nil
        if let scte27PidsContainer = scte27PidsContainer {
            scte27PidsDecoded0 = [Swift.Int]()
            for integer0 in scte27PidsContainer {
                if let integer0 = integer0 {
                    scte27PidsDecoded0?.append(integer0)
                }
            }
        }
        scte27Pids = scte27PidsDecoded0
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Packet identifiers map for a given Multiplex program.
    public struct MultiplexProgramPacketIdentifiersMap: Swift.Equatable {
        /// Placeholder documentation for __listOf__integer
        public var audioPids: [Swift.Int]?
        /// Placeholder documentation for __listOf__integer
        public var dvbSubPids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var dvbTeletextPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var etvPlatformPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var etvSignalPid: Swift.Int?
        /// Placeholder documentation for __listOf__integer
        public var klvDataPids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var pcrPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var pmtPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var privateMetadataPid: Swift.Int?
        /// Placeholder documentation for __listOf__integer
        public var scte27Pids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var scte35Pid: Swift.Int?
        /// Placeholder documentation for __integer
        public var timedMetadataPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var videoPid: Swift.Int?

        public init (
            audioPids: [Swift.Int]? = nil,
            dvbSubPids: [Swift.Int]? = nil,
            dvbTeletextPid: Swift.Int? = nil,
            etvPlatformPid: Swift.Int? = nil,
            etvSignalPid: Swift.Int? = nil,
            klvDataPids: [Swift.Int]? = nil,
            pcrPid: Swift.Int? = nil,
            pmtPid: Swift.Int? = nil,
            privateMetadataPid: Swift.Int? = nil,
            scte27Pids: [Swift.Int]? = nil,
            scte35Pid: Swift.Int? = nil,
            timedMetadataPid: Swift.Int? = nil,
            videoPid: Swift.Int? = nil
        )
        {
            self.audioPids = audioPids
            self.dvbSubPids = dvbSubPids
            self.dvbTeletextPid = dvbTeletextPid
            self.etvPlatformPid = etvPlatformPid
            self.etvSignalPid = etvSignalPid
            self.klvDataPids = klvDataPids
            self.pcrPid = pcrPid
            self.pmtPid = pmtPid
            self.privateMetadataPid = privateMetadataPid
            self.scte27Pids = scte27Pids
            self.scte35Pid = scte35Pid
            self.timedMetadataPid = timedMetadataPid
            self.videoPid = videoPid
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgramPipelineDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeChannelPipeline = "activeChannelPipeline"
        case pipelineId = "pipelineId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeChannelPipeline = self.activeChannelPipeline {
            try encodeContainer.encode(activeChannelPipeline, forKey: .activeChannelPipeline)
        }
        if let pipelineId = self.pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeChannelPipelineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeChannelPipeline)
        activeChannelPipeline = activeChannelPipelineDecoded
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// The current source for one of the pipelines in the multiplex.
    public struct MultiplexProgramPipelineDetail: Swift.Equatable {
        /// Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
        public var activeChannelPipeline: Swift.String?
        /// Identifies a specific pipeline in the multiplex.
        public var pipelineId: Swift.String?

        public init (
            activeChannelPipeline: Swift.String? = nil,
            pipelineId: Swift.String? = nil
        )
        {
            self.activeChannelPipeline = activeChannelPipeline
            self.pipelineId = pipelineId
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgramServiceDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case providerName = "providerName"
        case serviceName = "serviceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Transport stream service descriptor configuration for the Multiplex program.
    public struct MultiplexProgramServiceDescriptor: Swift.Equatable {
        /// Name of the provider.
        /// This member is required.
        public var providerName: Swift.String?
        /// Name of the service.
        /// This member is required.
        public var serviceName: Swift.String?

        public init (
            providerName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.providerName = providerName
            self.serviceName = serviceName
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgramSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case preferredChannelPipeline = "preferredChannelPipeline"
        case programNumber = "programNumber"
        case serviceDescriptor = "serviceDescriptor"
        case videoSettings = "videoSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let preferredChannelPipeline = self.preferredChannelPipeline {
            try encodeContainer.encode(preferredChannelPipeline.rawValue, forKey: .preferredChannelPipeline)
        }
        if let programNumber = self.programNumber {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let serviceDescriptor = self.serviceDescriptor {
            try encodeContainer.encode(serviceDescriptor, forKey: .serviceDescriptor)
        }
        if let videoSettings = self.videoSettings {
            try encodeContainer.encode(videoSettings, forKey: .videoSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preferredChannelPipelineDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.PreferredChannelPipeline.self, forKey: .preferredChannelPipeline)
        preferredChannelPipeline = preferredChannelPipelineDecoded
        let programNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let serviceDescriptorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramServiceDescriptor.self, forKey: .serviceDescriptor)
        serviceDescriptor = serviceDescriptorDecoded
        let videoSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexVideoSettings.self, forKey: .videoSettings)
        videoSettings = videoSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Multiplex Program settings configuration.
    public struct MultiplexProgramSettings: Swift.Equatable {
        /// Indicates which pipeline is preferred by the multiplex for program ingest.
        public var preferredChannelPipeline: MediaLiveClientTypes.PreferredChannelPipeline?
        /// Unique program number.
        /// This member is required.
        public var programNumber: Swift.Int?
        /// Transport stream service descriptor configuration for the Multiplex program.
        public var serviceDescriptor: MediaLiveClientTypes.MultiplexProgramServiceDescriptor?
        /// Program video settings configuration.
        public var videoSettings: MediaLiveClientTypes.MultiplexVideoSettings?

        public init (
            preferredChannelPipeline: MediaLiveClientTypes.PreferredChannelPipeline? = nil,
            programNumber: Swift.Int? = nil,
            serviceDescriptor: MediaLiveClientTypes.MultiplexProgramServiceDescriptor? = nil,
            videoSettings: MediaLiveClientTypes.MultiplexVideoSettings? = nil
        )
        {
            self.preferredChannelPipeline = preferredChannelPipeline
            self.programNumber = programNumber
            self.serviceDescriptor = serviceDescriptor
            self.videoSettings = videoSettings
        }
    }

}

extension MediaLiveClientTypes.MultiplexProgramSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId = "channelId"
        case programName = "programName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = self.channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let programName = self.programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MultiplexProgramSummary
    public struct MultiplexProgramSummary: Swift.Equatable {
        /// The MediaLive Channel associated with the program.
        public var channelId: Swift.String?
        /// The name of the multiplex program.
        public var programName: Swift.String?

        public init (
            channelId: Swift.String? = nil,
            programName: Swift.String? = nil
        )
        {
            self.channelId = channelId
            self.programName = programName
        }
    }

}

extension MediaLiveClientTypes.MultiplexSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumVideoBufferDelayMilliseconds = "maximumVideoBufferDelayMilliseconds"
        case transportStreamBitrate = "transportStreamBitrate"
        case transportStreamId = "transportStreamId"
        case transportStreamReservedBitrate = "transportStreamReservedBitrate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumVideoBufferDelayMilliseconds = self.maximumVideoBufferDelayMilliseconds {
            try encodeContainer.encode(maximumVideoBufferDelayMilliseconds, forKey: .maximumVideoBufferDelayMilliseconds)
        }
        if let transportStreamBitrate = self.transportStreamBitrate {
            try encodeContainer.encode(transportStreamBitrate, forKey: .transportStreamBitrate)
        }
        if let transportStreamId = self.transportStreamId {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let transportStreamReservedBitrate = self.transportStreamReservedBitrate {
            try encodeContainer.encode(transportStreamReservedBitrate, forKey: .transportStreamReservedBitrate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumVideoBufferDelayMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumVideoBufferDelayMilliseconds)
        maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMillisecondsDecoded
        let transportStreamBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamBitrate)
        transportStreamBitrate = transportStreamBitrateDecoded
        let transportStreamIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let transportStreamReservedBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamReservedBitrate)
        transportStreamReservedBitrate = transportStreamReservedBitrateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Contains configuration for a Multiplex event
    public struct MultiplexSettings: Swift.Equatable {
        /// Maximum video buffer delay in milliseconds.
        public var maximumVideoBufferDelayMilliseconds: Swift.Int?
        /// Transport stream bit rate.
        /// This member is required.
        public var transportStreamBitrate: Swift.Int?
        /// Transport stream ID.
        /// This member is required.
        public var transportStreamId: Swift.Int?
        /// Transport stream reserved bit rate.
        public var transportStreamReservedBitrate: Swift.Int?

        public init (
            maximumVideoBufferDelayMilliseconds: Swift.Int? = nil,
            transportStreamBitrate: Swift.Int? = nil,
            transportStreamId: Swift.Int? = nil,
            transportStreamReservedBitrate: Swift.Int? = nil
        )
        {
            self.maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMilliseconds
            self.transportStreamBitrate = transportStreamBitrate
            self.transportStreamId = transportStreamId
            self.transportStreamReservedBitrate = transportStreamReservedBitrate
        }
    }

}

extension MediaLiveClientTypes.MultiplexSettingsSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transportStreamBitrate = "transportStreamBitrate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transportStreamBitrate = self.transportStreamBitrate {
            try encodeContainer.encode(transportStreamBitrate, forKey: .transportStreamBitrate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transportStreamBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamBitrate)
        transportStreamBitrate = transportStreamBitrateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Contains summary configuration for a Multiplex event.
    public struct MultiplexSettingsSummary: Swift.Equatable {
        /// Transport stream bit rate.
        public var transportStreamBitrate: Swift.Int?

        public init (
            transportStreamBitrate: Swift.Int? = nil
        )
        {
            self.transportStreamBitrate = transportStreamBitrate
        }
    }

}

extension MediaLiveClientTypes {
    /// The current state of the multiplex.
    public enum MultiplexState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case creating
        case deleted
        case deleting
        case idle
        case recovering
        case running
        case starting
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [MultiplexState] {
            return [
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .idle,
                .recovering,
                .running,
                .starting,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .idle: return "IDLE"
            case .recovering: return "RECOVERING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MultiplexState(rawValue: rawValue) ?? MultiplexState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.MultiplexStatmuxVideoSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumBitrate = "maximumBitrate"
        case minimumBitrate = "minimumBitrate"
        case priority = "priority"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumBitrate = self.maximumBitrate {
            try encodeContainer.encode(maximumBitrate, forKey: .maximumBitrate)
        }
        if let minimumBitrate = self.minimumBitrate {
            try encodeContainer.encode(minimumBitrate, forKey: .minimumBitrate)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let minimumBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumBitrate)
        minimumBitrate = minimumBitrateDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
    }
}

extension MediaLiveClientTypes {
    /// Statmux rate control settings
    public struct MultiplexStatmuxVideoSettings: Swift.Equatable {
        /// Maximum statmux bitrate.
        public var maximumBitrate: Swift.Int?
        /// Minimum statmux bitrate.
        public var minimumBitrate: Swift.Int?
        /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
        public var priority: Swift.Int?

        public init (
            maximumBitrate: Swift.Int? = nil,
            minimumBitrate: Swift.Int? = nil,
            priority: Swift.Int? = nil
        )
        {
            self.maximumBitrate = maximumBitrate
            self.minimumBitrate = minimumBitrate
            self.priority = priority
        }
    }

}

extension MediaLiveClientTypes.MultiplexSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __string0 in availabilityZones {
                try availabilityZonesContainer.encode(__string0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let multiplexSettings = self.multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelinesRunningCount = self.pipelinesRunningCount {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let programCount = self.programCount {
            try encodeContainer.encode(programCount, forKey: .programCount)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettingsSummary.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MultiplexSummary
    public struct MultiplexSummary: Swift.Equatable {
        /// The unique arn of the multiplex.
        public var arn: Swift.String?
        /// A list of availability zones for the multiplex.
        public var availabilityZones: [Swift.String]?
        /// The unique id of the multiplex.
        public var id: Swift.String?
        /// Configuration for a multiplex event.
        public var multiplexSettings: MediaLiveClientTypes.MultiplexSettingsSummary?
        /// The name of the multiplex.
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The number of programs in the multiplex.
        public var programCount: Swift.Int?
        /// The current state of the multiplex.
        public var state: MediaLiveClientTypes.MultiplexState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            id: Swift.String? = nil,
            multiplexSettings: MediaLiveClientTypes.MultiplexSettingsSummary? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            programCount: Swift.Int? = nil,
            state: MediaLiveClientTypes.MultiplexState? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }
    }

}

extension MediaLiveClientTypes.MultiplexVideoSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constantBitrate = "constantBitrate"
        case statmuxSettings = "statmuxSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constantBitrate = self.constantBitrate {
            try encodeContainer.encode(constantBitrate, forKey: .constantBitrate)
        }
        if let statmuxSettings = self.statmuxSettings {
            try encodeContainer.encode(statmuxSettings, forKey: .statmuxSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constantBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .constantBitrate)
        constantBitrate = constantBitrateDecoded
        let statmuxSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexStatmuxVideoSettings.self, forKey: .statmuxSettings)
        statmuxSettings = statmuxSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// The video configuration for each program in a multiplex.
    public struct MultiplexVideoSettings: Swift.Equatable {
        /// The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.
        public var constantBitrate: Swift.Int?
        /// Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.
        public var statmuxSettings: MediaLiveClientTypes.MultiplexStatmuxVideoSettings?

        public init (
            constantBitrate: Swift.Int? = nil,
            statmuxSettings: MediaLiveClientTypes.MultiplexStatmuxVideoSettings? = nil
        )
        {
            self.constantBitrate = constantBitrate
            self.statmuxSettings = statmuxSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Network Input Server Validation
    public enum NetworkInputServerValidation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case checkCryptographyAndValidateName
        case checkCryptographyOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkInputServerValidation] {
            return [
                .checkCryptographyAndValidateName,
                .checkCryptographyOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .checkCryptographyAndValidateName: return "CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME"
            case .checkCryptographyOnly: return "CHECK_CRYPTOGRAPHY_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkInputServerValidation(rawValue: rawValue) ?? NetworkInputServerValidation.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.NetworkInputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hlsInputSettings = "hlsInputSettings"
        case serverValidation = "serverValidation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsInputSettings = self.hlsInputSettings {
            try encodeContainer.encode(hlsInputSettings, forKey: .hlsInputSettings)
        }
        if let serverValidation = self.serverValidation {
            try encodeContainer.encode(serverValidation.rawValue, forKey: .serverValidation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsInputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsInputSettings.self, forKey: .hlsInputSettings)
        hlsInputSettings = hlsInputSettingsDecoded
        let serverValidationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NetworkInputServerValidation.self, forKey: .serverValidation)
        serverValidation = serverValidationDecoded
    }
}

extension MediaLiveClientTypes {
    /// Network source to transcode. Must be accessible to the Elemental Live node that is running the live event through a network connection.
    public struct NetworkInputSettings: Swift.Equatable {
        /// Specifies HLS input settings when the uri is for a HLS manifest.
        public var hlsInputSettings: MediaLiveClientTypes.HlsInputSettings?
        /// Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
        public var serverValidation: MediaLiveClientTypes.NetworkInputServerValidation?

        public init (
            hlsInputSettings: MediaLiveClientTypes.HlsInputSettings? = nil,
            serverValidation: MediaLiveClientTypes.NetworkInputServerValidation? = nil
        )
        {
            self.hlsInputSettings = hlsInputSettings
            self.serverValidation = serverValidation
        }
    }

}

extension MediaLiveClientTypes.NielsenCBET: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cbetCheckDigitString = "cbetCheckDigitString"
        case cbetStepaside = "cbetStepaside"
        case csid = "csid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cbetCheckDigitString = self.cbetCheckDigitString {
            try encodeContainer.encode(cbetCheckDigitString, forKey: .cbetCheckDigitString)
        }
        if let cbetStepaside = self.cbetStepaside {
            try encodeContainer.encode(cbetStepaside.rawValue, forKey: .cbetStepaside)
        }
        if let csid = self.csid {
            try encodeContainer.encode(csid, forKey: .csid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cbetCheckDigitStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cbetCheckDigitString)
        cbetCheckDigitString = cbetCheckDigitStringDecoded
        let cbetStepasideDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenWatermarksCbetStepaside.self, forKey: .cbetStepaside)
        cbetStepaside = cbetStepasideDecoded
        let csidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .csid)
        csid = csidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Nielsen CBET
    public struct NielsenCBET: Swift.Equatable {
        /// Enter the CBET check digits to use in the watermark.
        /// This member is required.
        public var cbetCheckDigitString: Swift.String?
        /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
        /// This member is required.
        public var cbetStepaside: MediaLiveClientTypes.NielsenWatermarksCbetStepaside?
        /// Enter the CBET Source ID (CSID) to use in the watermark
        /// This member is required.
        public var csid: Swift.String?

        public init (
            cbetCheckDigitString: Swift.String? = nil,
            cbetStepaside: MediaLiveClientTypes.NielsenWatermarksCbetStepaside? = nil,
            csid: Swift.String? = nil
        )
        {
            self.cbetCheckDigitString = cbetCheckDigitString
            self.cbetStepaside = cbetStepaside
            self.csid = csid
        }
    }

}

extension MediaLiveClientTypes.NielsenConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributorId = "distributorId"
        case nielsenPcmToId3Tagging = "nielsenPcmToId3Tagging"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributorId = self.distributorId {
            try encodeContainer.encode(distributorId, forKey: .distributorId)
        }
        if let nielsenPcmToId3Tagging = self.nielsenPcmToId3Tagging {
            try encodeContainer.encode(nielsenPcmToId3Tagging.rawValue, forKey: .nielsenPcmToId3Tagging)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributorId)
        distributorId = distributorIdDecoded
        let nielsenPcmToId3TaggingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenPcmToId3TaggingState.self, forKey: .nielsenPcmToId3Tagging)
        nielsenPcmToId3Tagging = nielsenPcmToId3TaggingDecoded
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Configuration
    public struct NielsenConfiguration: Swift.Equatable {
        /// Enter the Distributor ID assigned to your organization by Nielsen.
        public var distributorId: Swift.String?
        /// Enables Nielsen PCM to ID3 tagging
        public var nielsenPcmToId3Tagging: MediaLiveClientTypes.NielsenPcmToId3TaggingState?

        public init (
            distributorId: Swift.String? = nil,
            nielsenPcmToId3Tagging: MediaLiveClientTypes.NielsenPcmToId3TaggingState? = nil
        )
        {
            self.distributorId = distributorId
            self.nielsenPcmToId3Tagging = nielsenPcmToId3Tagging
        }
    }

}

extension MediaLiveClientTypes.NielsenNaesIiNw: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkDigitString = "checkDigitString"
        case sid = "sid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkDigitString = self.checkDigitString {
            try encodeContainer.encode(checkDigitString, forKey: .checkDigitString)
        }
        if let sid = self.sid {
            try encodeContainer.encode(sid, forKey: .sid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkDigitStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkDigitString)
        checkDigitString = checkDigitStringDecoded
        let sidDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sid)
        sid = sidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Naes Ii Nw
    public struct NielsenNaesIiNw: Swift.Equatable {
        /// Enter the check digit string for the watermark
        /// This member is required.
        public var checkDigitString: Swift.String?
        /// Enter the Nielsen Source ID (SID) to include in the watermark
        /// This member is required.
        public var sid: Swift.Double?

        public init (
            checkDigitString: Swift.String? = nil,
            sid: Swift.Double? = nil
        )
        {
            self.checkDigitString = checkDigitString
            self.sid = sid
        }
    }

}

extension MediaLiveClientTypes {
    /// State of Nielsen PCM to ID3 tagging
    public enum NielsenPcmToId3TaggingState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenPcmToId3TaggingState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NielsenPcmToId3TaggingState(rawValue: rawValue) ?? NielsenPcmToId3TaggingState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Watermarks Cbet Stepaside
    public enum NielsenWatermarksCbetStepaside: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenWatermarksCbetStepaside] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NielsenWatermarksCbetStepaside(rawValue: rawValue) ?? NielsenWatermarksCbetStepaside.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Watermarks Distribution Types
    public enum NielsenWatermarksDistributionTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finalDistributor
        case programContent
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenWatermarksDistributionTypes] {
            return [
                .finalDistributor,
                .programContent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finalDistributor: return "FINAL_DISTRIBUTOR"
            case .programContent: return "PROGRAM_CONTENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NielsenWatermarksDistributionTypes(rawValue: rawValue) ?? NielsenWatermarksDistributionTypes.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.NielsenWatermarksSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nielsenCbetSettings = "nielsenCbetSettings"
        case nielsenDistributionType = "nielsenDistributionType"
        case nielsenNaesIiNwSettings = "nielsenNaesIiNwSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nielsenCbetSettings = self.nielsenCbetSettings {
            try encodeContainer.encode(nielsenCbetSettings, forKey: .nielsenCbetSettings)
        }
        if let nielsenDistributionType = self.nielsenDistributionType {
            try encodeContainer.encode(nielsenDistributionType.rawValue, forKey: .nielsenDistributionType)
        }
        if let nielsenNaesIiNwSettings = self.nielsenNaesIiNwSettings {
            try encodeContainer.encode(nielsenNaesIiNwSettings, forKey: .nielsenNaesIiNwSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nielsenCbetSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenCBET.self, forKey: .nielsenCbetSettings)
        nielsenCbetSettings = nielsenCbetSettingsDecoded
        let nielsenDistributionTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenWatermarksDistributionTypes.self, forKey: .nielsenDistributionType)
        nielsenDistributionType = nielsenDistributionTypeDecoded
        let nielsenNaesIiNwSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NielsenNaesIiNw.self, forKey: .nielsenNaesIiNwSettings)
        nielsenNaesIiNwSettings = nielsenNaesIiNwSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Watermarks Settings
    public struct NielsenWatermarksSettings: Swift.Equatable {
        /// Complete these fields only if you want to insert watermarks of type Nielsen CBET
        public var nielsenCbetSettings: MediaLiveClientTypes.NielsenCBET?
        /// Choose the distribution types that you want to assign to the watermarks:
        ///
        /// * PROGRAM_CONTENT
        ///
        /// * FINAL_DISTRIBUTOR
        public var nielsenDistributionType: MediaLiveClientTypes.NielsenWatermarksDistributionTypes?
        /// Complete these fields only if you want to insert watermarks of type Nielsen NAES II (N2) and Nielsen NAES VI (NW).
        public var nielsenNaesIiNwSettings: MediaLiveClientTypes.NielsenNaesIiNw?

        public init (
            nielsenCbetSettings: MediaLiveClientTypes.NielsenCBET? = nil,
            nielsenDistributionType: MediaLiveClientTypes.NielsenWatermarksDistributionTypes? = nil,
            nielsenNaesIiNwSettings: MediaLiveClientTypes.NielsenNaesIiNw? = nil
        )
        {
            self.nielsenCbetSettings = nielsenCbetSettings
            self.nielsenDistributionType = nielsenDistributionType
            self.nielsenNaesIiNwSettings = nielsenNaesIiNwSettings
        }
    }

}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for NotFoundException
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MediaLiveClientTypes.Offering: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case fixedPrice = "fixedPrice"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case resourceSpecification = "resourceSpecification"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let durationUnits = self.durationUnits {
            try encodeContainer.encode(durationUnits.rawValue, forKey: .durationUnits)
        }
        if let fixedPrice = self.fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let offeringDescription = self.offeringDescription {
            try encodeContainer.encode(offeringDescription, forKey: .offeringDescription)
        }
        if let offeringId = self.offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let offeringType = self.offeringType {
            try encodeContainer.encode(offeringType.rawValue, forKey: .offeringType)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceSpecification = self.resourceSpecification {
            try encodeContainer.encode(resourceSpecification, forKey: .resourceSpecification)
        }
        if let usagePrice = self.usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension MediaLiveClientTypes {
    /// Reserved resources available for purchase
    public struct Offering: Swift.Equatable {
        /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
        public var arn: Swift.String?
        /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        public var currencyCode: Swift.String?
        /// Lease duration, e.g. '12'
        public var duration: Swift.Int?
        /// Units for duration, e.g. 'MONTHS'
        public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
        /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        public var fixedPrice: Swift.Double?
        /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        public var offeringDescription: Swift.String?
        /// Unique offering ID, e.g. '87654321'
        public var offeringId: Swift.String?
        /// Offering type, e.g. 'NO_UPFRONT'
        public var offeringType: MediaLiveClientTypes.OfferingType?
        /// AWS region, e.g. 'us-west-2'
        public var region: Swift.String?
        /// Resource configuration details
        public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
        /// Recurring usage charge for each reserved resource, e.g. '157.0'
        public var usagePrice: Swift.Double?

        public init (
            arn: Swift.String? = nil,
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
            fixedPrice: Swift.Double? = nil,
            offeringDescription: Swift.String? = nil,
            offeringId: Swift.String? = nil,
            offeringType: MediaLiveClientTypes.OfferingType? = nil,
            region: Swift.String? = nil,
            resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.arn = arn
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.fixedPrice = fixedPrice
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.resourceSpecification = resourceSpecification
            self.usagePrice = usagePrice
        }
    }

}

extension MediaLiveClientTypes {
    /// Units for duration, e.g. 'MONTHS'
    public enum OfferingDurationUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case months
        case sdkUnknown(Swift.String)

        public static var allCases: [OfferingDurationUnits] {
            return [
                .months,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .months: return "MONTHS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OfferingDurationUnits(rawValue: rawValue) ?? OfferingDurationUnits.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Offering type, e.g. 'NO_UPFRONT'
    public enum OfferingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [OfferingType] {
            return [
                .noUpfront,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noUpfront: return "NO_UPFRONT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OfferingType(rawValue: rawValue) ?? OfferingType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Output: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioDescriptionNames = "audioDescriptionNames"
        case captionDescriptionNames = "captionDescriptionNames"
        case outputName = "outputName"
        case outputSettings = "outputSettings"
        case videoDescriptionName = "videoDescriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptionNames = audioDescriptionNames {
            var audioDescriptionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptionNames)
            for __string0 in audioDescriptionNames {
                try audioDescriptionNamesContainer.encode(__string0)
            }
        }
        if let captionDescriptionNames = captionDescriptionNames {
            var captionDescriptionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptionNames)
            for __string0 in captionDescriptionNames {
                try captionDescriptionNamesContainer.encode(__string0)
            }
        }
        if let outputName = self.outputName {
            try encodeContainer.encode(outputName, forKey: .outputName)
        }
        if let outputSettings = self.outputSettings {
            try encodeContainer.encode(outputSettings, forKey: .outputSettings)
        }
        if let videoDescriptionName = self.videoDescriptionName {
            try encodeContainer.encode(videoDescriptionName, forKey: .videoDescriptionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .audioDescriptionNames)
        var audioDescriptionNamesDecoded0:[Swift.String]? = nil
        if let audioDescriptionNamesContainer = audioDescriptionNamesContainer {
            audioDescriptionNamesDecoded0 = [Swift.String]()
            for string0 in audioDescriptionNamesContainer {
                if let string0 = string0 {
                    audioDescriptionNamesDecoded0?.append(string0)
                }
            }
        }
        audioDescriptionNames = audioDescriptionNamesDecoded0
        let captionDescriptionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .captionDescriptionNames)
        var captionDescriptionNamesDecoded0:[Swift.String]? = nil
        if let captionDescriptionNamesContainer = captionDescriptionNamesContainer {
            captionDescriptionNamesDecoded0 = [Swift.String]()
            for string0 in captionDescriptionNamesContainer {
                if let string0 = string0 {
                    captionDescriptionNamesDecoded0?.append(string0)
                }
            }
        }
        captionDescriptionNames = captionDescriptionNamesDecoded0
        let outputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputName)
        outputName = outputNameDecoded
        let outputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputSettings.self, forKey: .outputSettings)
        outputSettings = outputSettingsDecoded
        let videoDescriptionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .videoDescriptionName)
        videoDescriptionName = videoDescriptionNameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Output settings. There can be multiple outputs within a group.
    public struct Output: Swift.Equatable {
        /// The names of the AudioDescriptions used as audio sources for this output.
        public var audioDescriptionNames: [Swift.String]?
        /// The names of the CaptionDescriptions used as caption sources for this output.
        public var captionDescriptionNames: [Swift.String]?
        /// The name used to identify an output.
        public var outputName: Swift.String?
        /// Output type-specific settings.
        /// This member is required.
        public var outputSettings: MediaLiveClientTypes.OutputSettings?
        /// The name of the VideoDescription used as the source for this output.
        public var videoDescriptionName: Swift.String?

        public init (
            audioDescriptionNames: [Swift.String]? = nil,
            captionDescriptionNames: [Swift.String]? = nil,
            outputName: Swift.String? = nil,
            outputSettings: MediaLiveClientTypes.OutputSettings? = nil,
            videoDescriptionName: Swift.String? = nil
        )
        {
            self.audioDescriptionNames = audioDescriptionNames
            self.captionDescriptionNames = captionDescriptionNames
            self.outputName = outputName
            self.outputSettings = outputSettings
            self.videoDescriptionName = videoDescriptionName
        }
    }

}

extension MediaLiveClientTypes.OutputDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
        case mediaPackageSettings = "mediaPackageSettings"
        case multiplexSettings = "multiplexSettings"
        case settings = "settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let mediaPackageSettings = mediaPackageSettings {
            var mediaPackageSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaPackageSettings)
            for mediapackageoutputdestinationsettings0 in mediaPackageSettings {
                try mediaPackageSettingsContainer.encode(mediapackageoutputdestinationsettings0)
            }
        }
        if let multiplexSettings = self.multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let settings = settings {
            var settingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .settings)
            for outputdestinationsettings0 in settings {
                try settingsContainer.encode(outputdestinationsettings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let mediaPackageSettingsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaPackageOutputDestinationSettings?].self, forKey: .mediaPackageSettings)
        var mediaPackageSettingsDecoded0:[MediaLiveClientTypes.MediaPackageOutputDestinationSettings]? = nil
        if let mediaPackageSettingsContainer = mediaPackageSettingsContainer {
            mediaPackageSettingsDecoded0 = [MediaLiveClientTypes.MediaPackageOutputDestinationSettings]()
            for structure0 in mediaPackageSettingsContainer {
                if let structure0 = structure0 {
                    mediaPackageSettingsDecoded0?.append(structure0)
                }
            }
        }
        mediaPackageSettings = mediaPackageSettingsDecoded0
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let settingsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestinationSettings?].self, forKey: .settings)
        var settingsDecoded0:[MediaLiveClientTypes.OutputDestinationSettings]? = nil
        if let settingsContainer = settingsContainer {
            settingsDecoded0 = [MediaLiveClientTypes.OutputDestinationSettings]()
            for structure0 in settingsContainer {
                if let structure0 = structure0 {
                    settingsDecoded0?.append(structure0)
                }
            }
        }
        settings = settingsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for OutputDestination
    public struct OutputDestination: Swift.Equatable {
        /// User-specified id. This is used in an output group or an output.
        public var id: Swift.String?
        /// Destination settings for a MediaPackage output; one destination for both encoders.
        public var mediaPackageSettings: [MediaLiveClientTypes.MediaPackageOutputDestinationSettings]?
        /// Destination settings for a Multiplex output; one destination for both encoders.
        public var multiplexSettings: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings?
        /// Destination settings for a standard output; one destination for each redundant encoder.
        public var settings: [MediaLiveClientTypes.OutputDestinationSettings]?

        public init (
            id: Swift.String? = nil,
            mediaPackageSettings: [MediaLiveClientTypes.MediaPackageOutputDestinationSettings]? = nil,
            multiplexSettings: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings? = nil,
            settings: [MediaLiveClientTypes.OutputDestinationSettings]? = nil
        )
        {
            self.id = id
            self.mediaPackageSettings = mediaPackageSettings
            self.multiplexSettings = multiplexSettings
            self.settings = settings
        }
    }

}

extension MediaLiveClientTypes.OutputDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordParam = "passwordParam"
        case streamName = "streamName"
        case url = "url"
        case username = "username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordParam = self.passwordParam {
            try encodeContainer.encode(passwordParam, forKey: .passwordParam)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordParamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordParam)
        passwordParam = passwordParamDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for OutputDestinationSettings
    public struct OutputDestinationSettings: Swift.Equatable {
        /// key used to extract the password from EC2 Parameter store
        public var passwordParam: Swift.String?
        /// Stream name for RTMP destinations (URLs of type rtmp://)
        public var streamName: Swift.String?
        /// A URL specifying a destination
        public var url: Swift.String?
        /// username for destination
        public var username: Swift.String?

        public init (
            passwordParam: Swift.String? = nil,
            streamName: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.streamName = streamName
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes.OutputGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "name"
        case outputGroupSettings = "outputGroupSettings"
        case outputs = "outputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputGroupSettings = self.outputGroupSettings {
            try encodeContainer.encode(outputGroupSettings, forKey: .outputGroupSettings)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for output0 in outputs {
                try outputsContainer.encode(output0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let outputGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputGroupSettings.self, forKey: .outputGroupSettings)
        outputGroupSettings = outputGroupSettingsDecoded
        let outputsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.Output?].self, forKey: .outputs)
        var outputsDecoded0:[MediaLiveClientTypes.Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [MediaLiveClientTypes.Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
    public struct OutputGroup: Swift.Equatable {
        /// Custom output group name optionally defined by the user.
        public var name: Swift.String?
        /// Settings associated with the output group.
        /// This member is required.
        public var outputGroupSettings: MediaLiveClientTypes.OutputGroupSettings?
        /// Placeholder documentation for __listOfOutput
        /// This member is required.
        public var outputs: [MediaLiveClientTypes.Output]?

        public init (
            name: Swift.String? = nil,
            outputGroupSettings: MediaLiveClientTypes.OutputGroupSettings? = nil,
            outputs: [MediaLiveClientTypes.Output]? = nil
        )
        {
            self.name = name
            self.outputGroupSettings = outputGroupSettings
            self.outputs = outputs
        }
    }

}

extension MediaLiveClientTypes.OutputGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveGroupSettings = "archiveGroupSettings"
        case frameCaptureGroupSettings = "frameCaptureGroupSettings"
        case hlsGroupSettings = "hlsGroupSettings"
        case mediaPackageGroupSettings = "mediaPackageGroupSettings"
        case msSmoothGroupSettings = "msSmoothGroupSettings"
        case multiplexGroupSettings = "multiplexGroupSettings"
        case rtmpGroupSettings = "rtmpGroupSettings"
        case udpGroupSettings = "udpGroupSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveGroupSettings = self.archiveGroupSettings {
            try encodeContainer.encode(archiveGroupSettings, forKey: .archiveGroupSettings)
        }
        if let frameCaptureGroupSettings = self.frameCaptureGroupSettings {
            try encodeContainer.encode(frameCaptureGroupSettings, forKey: .frameCaptureGroupSettings)
        }
        if let hlsGroupSettings = self.hlsGroupSettings {
            try encodeContainer.encode(hlsGroupSettings, forKey: .hlsGroupSettings)
        }
        if let mediaPackageGroupSettings = self.mediaPackageGroupSettings {
            try encodeContainer.encode(mediaPackageGroupSettings, forKey: .mediaPackageGroupSettings)
        }
        if let msSmoothGroupSettings = self.msSmoothGroupSettings {
            try encodeContainer.encode(msSmoothGroupSettings, forKey: .msSmoothGroupSettings)
        }
        if let multiplexGroupSettings = self.multiplexGroupSettings {
            try encodeContainer.encode(multiplexGroupSettings, forKey: .multiplexGroupSettings)
        }
        if let rtmpGroupSettings = self.rtmpGroupSettings {
            try encodeContainer.encode(rtmpGroupSettings, forKey: .rtmpGroupSettings)
        }
        if let udpGroupSettings = self.udpGroupSettings {
            try encodeContainer.encode(udpGroupSettings, forKey: .udpGroupSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ArchiveGroupSettings.self, forKey: .archiveGroupSettings)
        archiveGroupSettings = archiveGroupSettingsDecoded
        let frameCaptureGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureGroupSettings.self, forKey: .frameCaptureGroupSettings)
        frameCaptureGroupSettings = frameCaptureGroupSettingsDecoded
        let hlsGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsGroupSettings.self, forKey: .hlsGroupSettings)
        hlsGroupSettings = hlsGroupSettingsDecoded
        let mediaPackageGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MediaPackageGroupSettings.self, forKey: .mediaPackageGroupSettings)
        mediaPackageGroupSettings = mediaPackageGroupSettingsDecoded
        let msSmoothGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MsSmoothGroupSettings.self, forKey: .msSmoothGroupSettings)
        msSmoothGroupSettings = msSmoothGroupSettingsDecoded
        let multiplexGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexGroupSettings.self, forKey: .multiplexGroupSettings)
        multiplexGroupSettings = multiplexGroupSettingsDecoded
        let rtmpGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpGroupSettings.self, forKey: .rtmpGroupSettings)
        rtmpGroupSettings = rtmpGroupSettingsDecoded
        let udpGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.UdpGroupSettings.self, forKey: .udpGroupSettings)
        udpGroupSettings = udpGroupSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Output Group Settings
    public struct OutputGroupSettings: Swift.Equatable {
        /// Archive Group Settings
        public var archiveGroupSettings: MediaLiveClientTypes.ArchiveGroupSettings?
        /// Frame Capture Group Settings
        public var frameCaptureGroupSettings: MediaLiveClientTypes.FrameCaptureGroupSettings?
        /// Hls Group Settings
        public var hlsGroupSettings: MediaLiveClientTypes.HlsGroupSettings?
        /// Media Package Group Settings
        public var mediaPackageGroupSettings: MediaLiveClientTypes.MediaPackageGroupSettings?
        /// Ms Smooth Group Settings
        public var msSmoothGroupSettings: MediaLiveClientTypes.MsSmoothGroupSettings?
        /// Multiplex Group Settings
        public var multiplexGroupSettings: MediaLiveClientTypes.MultiplexGroupSettings?
        /// Rtmp Group Settings
        public var rtmpGroupSettings: MediaLiveClientTypes.RtmpGroupSettings?
        /// Udp Group Settings
        public var udpGroupSettings: MediaLiveClientTypes.UdpGroupSettings?

        public init (
            archiveGroupSettings: MediaLiveClientTypes.ArchiveGroupSettings? = nil,
            frameCaptureGroupSettings: MediaLiveClientTypes.FrameCaptureGroupSettings? = nil,
            hlsGroupSettings: MediaLiveClientTypes.HlsGroupSettings? = nil,
            mediaPackageGroupSettings: MediaLiveClientTypes.MediaPackageGroupSettings? = nil,
            msSmoothGroupSettings: MediaLiveClientTypes.MsSmoothGroupSettings? = nil,
            multiplexGroupSettings: MediaLiveClientTypes.MultiplexGroupSettings? = nil,
            rtmpGroupSettings: MediaLiveClientTypes.RtmpGroupSettings? = nil,
            udpGroupSettings: MediaLiveClientTypes.UdpGroupSettings? = nil
        )
        {
            self.archiveGroupSettings = archiveGroupSettings
            self.frameCaptureGroupSettings = frameCaptureGroupSettings
            self.hlsGroupSettings = hlsGroupSettings
            self.mediaPackageGroupSettings = mediaPackageGroupSettings
            self.msSmoothGroupSettings = msSmoothGroupSettings
            self.multiplexGroupSettings = multiplexGroupSettings
            self.rtmpGroupSettings = rtmpGroupSettings
            self.udpGroupSettings = udpGroupSettings
        }
    }

}

extension MediaLiveClientTypes.OutputLocationRef: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationRefId = "destinationRefId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationRefId = self.destinationRefId {
            try encodeContainer.encode(destinationRefId, forKey: .destinationRefId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationRefIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationRefId)
        destinationRefId = destinationRefIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Reference to an OutputDestination ID defined in the channel
    public struct OutputLocationRef: Swift.Equatable {
        /// Placeholder documentation for __string
        public var destinationRefId: Swift.String?

        public init (
            destinationRefId: Swift.String? = nil
        )
        {
            self.destinationRefId = destinationRefId
        }
    }

}

extension MediaLiveClientTypes.OutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveOutputSettings = "archiveOutputSettings"
        case frameCaptureOutputSettings = "frameCaptureOutputSettings"
        case hlsOutputSettings = "hlsOutputSettings"
        case mediaPackageOutputSettings = "mediaPackageOutputSettings"
        case msSmoothOutputSettings = "msSmoothOutputSettings"
        case multiplexOutputSettings = "multiplexOutputSettings"
        case rtmpOutputSettings = "rtmpOutputSettings"
        case udpOutputSettings = "udpOutputSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveOutputSettings = self.archiveOutputSettings {
            try encodeContainer.encode(archiveOutputSettings, forKey: .archiveOutputSettings)
        }
        if let frameCaptureOutputSettings = self.frameCaptureOutputSettings {
            try encodeContainer.encode(frameCaptureOutputSettings, forKey: .frameCaptureOutputSettings)
        }
        if let hlsOutputSettings = self.hlsOutputSettings {
            try encodeContainer.encode(hlsOutputSettings, forKey: .hlsOutputSettings)
        }
        if let mediaPackageOutputSettings = self.mediaPackageOutputSettings {
            try encodeContainer.encode(mediaPackageOutputSettings, forKey: .mediaPackageOutputSettings)
        }
        if let msSmoothOutputSettings = self.msSmoothOutputSettings {
            try encodeContainer.encode(msSmoothOutputSettings, forKey: .msSmoothOutputSettings)
        }
        if let multiplexOutputSettings = self.multiplexOutputSettings {
            try encodeContainer.encode(multiplexOutputSettings, forKey: .multiplexOutputSettings)
        }
        if let rtmpOutputSettings = self.rtmpOutputSettings {
            try encodeContainer.encode(rtmpOutputSettings, forKey: .rtmpOutputSettings)
        }
        if let udpOutputSettings = self.udpOutputSettings {
            try encodeContainer.encode(udpOutputSettings, forKey: .udpOutputSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ArchiveOutputSettings.self, forKey: .archiveOutputSettings)
        archiveOutputSettings = archiveOutputSettingsDecoded
        let frameCaptureOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureOutputSettings.self, forKey: .frameCaptureOutputSettings)
        frameCaptureOutputSettings = frameCaptureOutputSettingsDecoded
        let hlsOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsOutputSettings.self, forKey: .hlsOutputSettings)
        hlsOutputSettings = hlsOutputSettingsDecoded
        let mediaPackageOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MediaPackageOutputSettings.self, forKey: .mediaPackageOutputSettings)
        mediaPackageOutputSettings = mediaPackageOutputSettingsDecoded
        let msSmoothOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MsSmoothOutputSettings.self, forKey: .msSmoothOutputSettings)
        msSmoothOutputSettings = msSmoothOutputSettingsDecoded
        let multiplexOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexOutputSettings.self, forKey: .multiplexOutputSettings)
        multiplexOutputSettings = multiplexOutputSettingsDecoded
        let rtmpOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpOutputSettings.self, forKey: .rtmpOutputSettings)
        rtmpOutputSettings = rtmpOutputSettingsDecoded
        let udpOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.UdpOutputSettings.self, forKey: .udpOutputSettings)
        udpOutputSettings = udpOutputSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Output Settings
    public struct OutputSettings: Swift.Equatable {
        /// Archive Output Settings
        public var archiveOutputSettings: MediaLiveClientTypes.ArchiveOutputSettings?
        /// Frame Capture Output Settings
        public var frameCaptureOutputSettings: MediaLiveClientTypes.FrameCaptureOutputSettings?
        /// Hls Output Settings
        public var hlsOutputSettings: MediaLiveClientTypes.HlsOutputSettings?
        /// Media Package Output Settings
        public var mediaPackageOutputSettings: MediaLiveClientTypes.MediaPackageOutputSettings?
        /// Ms Smooth Output Settings
        public var msSmoothOutputSettings: MediaLiveClientTypes.MsSmoothOutputSettings?
        /// Multiplex Output Settings
        public var multiplexOutputSettings: MediaLiveClientTypes.MultiplexOutputSettings?
        /// Rtmp Output Settings
        public var rtmpOutputSettings: MediaLiveClientTypes.RtmpOutputSettings?
        /// Udp Output Settings
        public var udpOutputSettings: MediaLiveClientTypes.UdpOutputSettings?

        public init (
            archiveOutputSettings: MediaLiveClientTypes.ArchiveOutputSettings? = nil,
            frameCaptureOutputSettings: MediaLiveClientTypes.FrameCaptureOutputSettings? = nil,
            hlsOutputSettings: MediaLiveClientTypes.HlsOutputSettings? = nil,
            mediaPackageOutputSettings: MediaLiveClientTypes.MediaPackageOutputSettings? = nil,
            msSmoothOutputSettings: MediaLiveClientTypes.MsSmoothOutputSettings? = nil,
            multiplexOutputSettings: MediaLiveClientTypes.MultiplexOutputSettings? = nil,
            rtmpOutputSettings: MediaLiveClientTypes.RtmpOutputSettings? = nil,
            udpOutputSettings: MediaLiveClientTypes.UdpOutputSettings? = nil
        )
        {
            self.archiveOutputSettings = archiveOutputSettings
            self.frameCaptureOutputSettings = frameCaptureOutputSettings
            self.hlsOutputSettings = hlsOutputSettings
            self.mediaPackageOutputSettings = mediaPackageOutputSettings
            self.msSmoothOutputSettings = msSmoothOutputSettings
            self.multiplexOutputSettings = multiplexOutputSettings
            self.rtmpOutputSettings = rtmpOutputSettings
            self.udpOutputSettings = udpOutputSettings
        }
    }

}

extension MediaLiveClientTypes.PassThroughSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Pass Through Settings
    public struct PassThroughSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.PauseStateScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelines = "pipelines"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelines = pipelines {
            var pipelinesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelines)
            for pipelinepausestatesettings0 in pipelines {
                try pipelinesContainer.encode(pipelinepausestatesettings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelinesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.PipelinePauseStateSettings?].self, forKey: .pipelines)
        var pipelinesDecoded0:[MediaLiveClientTypes.PipelinePauseStateSettings]? = nil
        if let pipelinesContainer = pipelinesContainer {
            pipelinesDecoded0 = [MediaLiveClientTypes.PipelinePauseStateSettings]()
            for structure0 in pipelinesContainer {
                if let structure0 = structure0 {
                    pipelinesDecoded0?.append(structure0)
                }
            }
        }
        pipelines = pipelinesDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Settings for the action to set pause state of a channel.
    public struct PauseStateScheduleActionSettings: Swift.Equatable {
        /// Placeholder documentation for __listOfPipelinePauseStateSettings
        public var pipelines: [MediaLiveClientTypes.PipelinePauseStateSettings]?

        public init (
            pipelines: [MediaLiveClientTypes.PipelinePauseStateSettings]? = nil
        )
        {
            self.pipelines = pipelines
        }
    }

}

extension MediaLiveClientTypes.PipelineDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeInputAttachmentName = "activeInputAttachmentName"
        case activeInputSwitchActionName = "activeInputSwitchActionName"
        case activeMotionGraphicsActionName = "activeMotionGraphicsActionName"
        case activeMotionGraphicsUri = "activeMotionGraphicsUri"
        case pipelineId = "pipelineId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInputAttachmentName = self.activeInputAttachmentName {
            try encodeContainer.encode(activeInputAttachmentName, forKey: .activeInputAttachmentName)
        }
        if let activeInputSwitchActionName = self.activeInputSwitchActionName {
            try encodeContainer.encode(activeInputSwitchActionName, forKey: .activeInputSwitchActionName)
        }
        if let activeMotionGraphicsActionName = self.activeMotionGraphicsActionName {
            try encodeContainer.encode(activeMotionGraphicsActionName, forKey: .activeMotionGraphicsActionName)
        }
        if let activeMotionGraphicsUri = self.activeMotionGraphicsUri {
            try encodeContainer.encode(activeMotionGraphicsUri, forKey: .activeMotionGraphicsUri)
        }
        if let pipelineId = self.pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputAttachmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeInputAttachmentName)
        activeInputAttachmentName = activeInputAttachmentNameDecoded
        let activeInputSwitchActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeInputSwitchActionName)
        activeInputSwitchActionName = activeInputSwitchActionNameDecoded
        let activeMotionGraphicsActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeMotionGraphicsActionName)
        activeMotionGraphicsActionName = activeMotionGraphicsActionNameDecoded
        let activeMotionGraphicsUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeMotionGraphicsUri)
        activeMotionGraphicsUri = activeMotionGraphicsUriDecoded
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Runtime details of a pipeline when a channel is running.
    public struct PipelineDetail: Swift.Equatable {
        /// The name of the active input attachment currently being ingested by this pipeline.
        public var activeInputAttachmentName: Swift.String?
        /// The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
        public var activeInputSwitchActionName: Swift.String?
        /// The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
        public var activeMotionGraphicsActionName: Swift.String?
        /// The current URI being used for HTML5 motion graphics for this pipeline.
        public var activeMotionGraphicsUri: Swift.String?
        /// Pipeline ID
        public var pipelineId: Swift.String?

        public init (
            activeInputAttachmentName: Swift.String? = nil,
            activeInputSwitchActionName: Swift.String? = nil,
            activeMotionGraphicsActionName: Swift.String? = nil,
            activeMotionGraphicsUri: Swift.String? = nil,
            pipelineId: Swift.String? = nil
        )
        {
            self.activeInputAttachmentName = activeInputAttachmentName
            self.activeInputSwitchActionName = activeInputSwitchActionName
            self.activeMotionGraphicsActionName = activeMotionGraphicsActionName
            self.activeMotionGraphicsUri = activeMotionGraphicsUri
            self.pipelineId = pipelineId
        }
    }

}

extension MediaLiveClientTypes {
    /// Pipeline ID
    public enum PipelineId: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pipeline0
        case pipeline1
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineId] {
            return [
                .pipeline0,
                .pipeline1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pipeline0: return "PIPELINE_0"
            case .pipeline1: return "PIPELINE_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PipelineId(rawValue: rawValue) ?? PipelineId.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.PipelinePauseStateSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId = "pipelineId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineId = self.pipelineId {
            try encodeContainer.encode(pipelineId.rawValue, forKey: .pipelineId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.PipelineId.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for pausing a pipeline.
    public struct PipelinePauseStateSettings: Swift.Equatable {
        /// Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
        /// This member is required.
        public var pipelineId: MediaLiveClientTypes.PipelineId?

        public init (
            pipelineId: MediaLiveClientTypes.PipelineId? = nil
        )
        {
            self.pipelineId = pipelineId
        }
    }

}

extension MediaLiveClientTypes {
    /// Indicates which pipeline is preferred by the multiplex for program ingest. If set to "PIPELINE_0" or "PIPELINE_1" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline, it will switch back once that ingest is healthy again. If set to "CURRENTLY_ACTIVE", it will not switch back to the other pipeline based on it recovering to a healthy state, it will only switch if the active pipeline becomes unhealthy.
    public enum PreferredChannelPipeline: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case currentlyActive
        case pipeline0
        case pipeline1
        case sdkUnknown(Swift.String)

        public static var allCases: [PreferredChannelPipeline] {
            return [
                .currentlyActive,
                .pipeline0,
                .pipeline1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .currentlyActive: return "CURRENTLY_ACTIVE"
            case .pipeline0: return "PIPELINE_0"
            case .pipeline1: return "PIPELINE_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PreferredChannelPipeline(rawValue: rawValue) ?? PreferredChannelPipeline.sdkUnknown(rawValue)
        }
    }
}

extension PurchaseOfferingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "count"
        case name = "name"
        case renewalSettings = "renewalSettings"
        case requestId = "requestId"
        case start = "start"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let renewalSettings = self.renewalSettings {
            try encodeContainer.encode(renewalSettings, forKey: .renewalSettings)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let start = self.start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PurchaseOfferingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let offeringId = offeringId else {
            return nil
        }
        return "/prod/offerings/\(offeringId.urlPercentEncoding())/purchase"
    }
}

/// Placeholder documentation for PurchaseOfferingRequest
public struct PurchaseOfferingInput: Swift.Equatable {
    /// Number of resources
    /// This member is required.
    public var count: Swift.Int?
    /// Name for the new reservation
    public var name: Swift.String?
    /// Offering to purchase, e.g. '87654321'
    /// This member is required.
    public var offeringId: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    public var requestId: Swift.String?
    /// Requested reservation start time (UTC) in ISO-8601 format. The specified time must be between the first day of the current month and one year from now. If no value is given, the default is now.
    public var start: Swift.String?
    /// A collection of key-value pairs
    public var tags: [Swift.String:Swift.String]?

    public init (
        count: Swift.Int? = nil,
        name: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        requestId: Swift.String? = nil,
        start: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.count = count
        self.name = name
        self.offeringId = offeringId
        self.renewalSettings = renewalSettings
        self.requestId = requestId
        self.start = start
        self.tags = tags
    }
}

struct PurchaseOfferingInputBody: Swift.Equatable {
    let count: Swift.Int?
    let name: Swift.String?
    let renewalSettings: MediaLiveClientTypes.RenewalSettings?
    let requestId: Swift.String?
    let start: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension PurchaseOfferingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "count"
        case name = "name"
        case renewalSettings = "renewalSettings"
        case requestId = "requestId"
        case start = "start"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let renewalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RenewalSettings.self, forKey: .renewalSettings)
        renewalSettings = renewalSettingsDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PurchaseOfferingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PurchaseOfferingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PurchaseOfferingOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseOfferingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PurchaseOfferingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reservation = output.reservation
        } else {
            self.reservation = nil
        }
    }
}

/// Placeholder documentation for PurchaseOfferingResponse
public struct PurchaseOfferingOutputResponse: Swift.Equatable {
    /// Reserved resources available to use
    public var reservation: MediaLiveClientTypes.Reservation?

    public init (
        reservation: MediaLiveClientTypes.Reservation? = nil
    )
    {
        self.reservation = reservation
    }
}

struct PurchaseOfferingOutputResponseBody: Swift.Equatable {
    let reservation: MediaLiveClientTypes.Reservation?
}

extension PurchaseOfferingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservation = "reservation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Reservation.self, forKey: .reservation)
        reservation = reservationDecoded
    }
}

extension MediaLiveClientTypes.RawSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Raw Settings
    public struct RawSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes {
    /// Whether or not to force reboot the input device.
    public enum RebootInputDeviceForce: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [RebootInputDeviceForce] {
            return [
                .no,
                .yes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .no: return "NO"
            case .yes: return "YES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RebootInputDeviceForce(rawValue: rawValue) ?? RebootInputDeviceForce.sdkUnknown(rawValue)
        }
    }
}

extension RebootInputDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force = "force"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let force = self.force {
            try encodeContainer.encode(force.rawValue, forKey: .force)
        }
    }
}

extension RebootInputDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/reboot"
    }
}

/// A request to reboot an AWS Elemental device.
public struct RebootInputDeviceInput: Swift.Equatable {
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    public var force: MediaLiveClientTypes.RebootInputDeviceForce?
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        force: MediaLiveClientTypes.RebootInputDeviceForce? = nil,
        inputDeviceId: Swift.String? = nil
    )
    {
        self.force = force
        self.inputDeviceId = inputDeviceId
    }
}

struct RebootInputDeviceInputBody: Swift.Equatable {
    let force: MediaLiveClientTypes.RebootInputDeviceForce?
}

extension RebootInputDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force = "force"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let forceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RebootInputDeviceForce.self, forKey: .force)
        force = forceDecoded
    }
}

extension RebootInputDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RebootInputDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RebootInputDeviceOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootInputDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for RebootInputDeviceResponse
public struct RebootInputDeviceOutputResponse: Swift.Equatable {

    public init () { }
}

extension MediaLiveClientTypes.Rec601Settings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Rec601 Settings
    public struct Rec601Settings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.Rec709Settings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Rec709 Settings
    public struct Rec709Settings: Swift.Equatable {

        public init () { }
    }

}

extension RejectInputDeviceTransferInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/reject"
    }
}

/// Placeholder documentation for RejectInputDeviceTransferRequest
public struct RejectInputDeviceTransferInput: Swift.Equatable {
    /// The unique ID of the input device to reject. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct RejectInputDeviceTransferInputBody: Swift.Equatable {
}

extension RejectInputDeviceTransferInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RejectInputDeviceTransferOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInputDeviceTransferOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RejectInputDeviceTransferOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInputDeviceTransferOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for RejectInputDeviceTransferResponse
public struct RejectInputDeviceTransferOutputResponse: Swift.Equatable {

    public init () { }
}

extension MediaLiveClientTypes.RemixSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelMappings = "channelMappings"
        case channelsIn = "channelsIn"
        case channelsOut = "channelsOut"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelMappings = channelMappings {
            var channelMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelMappings)
            for audiochannelmapping0 in channelMappings {
                try channelMappingsContainer.encode(audiochannelmapping0)
            }
        }
        if let channelsIn = self.channelsIn {
            try encodeContainer.encode(channelsIn, forKey: .channelsIn)
        }
        if let channelsOut = self.channelsOut {
            try encodeContainer.encode(channelsOut, forKey: .channelsOut)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelMappingsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.AudioChannelMapping?].self, forKey: .channelMappings)
        var channelMappingsDecoded0:[MediaLiveClientTypes.AudioChannelMapping]? = nil
        if let channelMappingsContainer = channelMappingsContainer {
            channelMappingsDecoded0 = [MediaLiveClientTypes.AudioChannelMapping]()
            for structure0 in channelMappingsContainer {
                if let structure0 = structure0 {
                    channelMappingsDecoded0?.append(structure0)
                }
            }
        }
        channelMappings = channelMappingsDecoded0
        let channelsInDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .channelsIn)
        channelsIn = channelsInDecoded
        let channelsOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .channelsOut)
        channelsOut = channelsOutDecoded
    }
}

extension MediaLiveClientTypes {
    /// Remix Settings
    public struct RemixSettings: Swift.Equatable {
        /// Mapping of input channels to output channels, with appropriate gain adjustments.
        /// This member is required.
        public var channelMappings: [MediaLiveClientTypes.AudioChannelMapping]?
        /// Number of input channels to be used.
        public var channelsIn: Swift.Int?
        /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
        public var channelsOut: Swift.Int?

        public init (
            channelMappings: [MediaLiveClientTypes.AudioChannelMapping]? = nil,
            channelsIn: Swift.Int? = nil,
            channelsOut: Swift.Int? = nil
        )
        {
            self.channelMappings = channelMappings
            self.channelsIn = channelsIn
            self.channelsOut = channelsOut
        }
    }

}

extension MediaLiveClientTypes.RenewalSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticRenewal = "automaticRenewal"
        case renewalCount = "renewalCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticRenewal = self.automaticRenewal {
            try encodeContainer.encode(automaticRenewal.rawValue, forKey: .automaticRenewal)
        }
        if let renewalCount = self.renewalCount {
            try encodeContainer.encode(renewalCount, forKey: .renewalCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticRenewalDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationAutomaticRenewal.self, forKey: .automaticRenewal)
        automaticRenewal = automaticRenewalDecoded
        let renewalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .renewalCount)
        renewalCount = renewalCountDecoded
    }
}

extension MediaLiveClientTypes {
    /// The Renewal settings for Reservations
    public struct RenewalSettings: Swift.Equatable {
        /// Automatic renewal status for the reservation
        public var automaticRenewal: MediaLiveClientTypes.ReservationAutomaticRenewal?
        /// Count for the reservation renewal
        public var renewalCount: Swift.Int?

        public init (
            automaticRenewal: MediaLiveClientTypes.ReservationAutomaticRenewal? = nil,
            renewalCount: Swift.Int? = nil
        )
        {
            self.automaticRenewal = automaticRenewal
            self.renewalCount = renewalCount
        }
    }

}

extension MediaLiveClientTypes.Reservation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case durationUnits = "durationUnits"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case name = "name"
        case offeringDescription = "offeringDescription"
        case offeringId = "offeringId"
        case offeringType = "offeringType"
        case region = "region"
        case renewalSettings = "renewalSettings"
        case reservationId = "reservationId"
        case resourceSpecification = "resourceSpecification"
        case start = "start"
        case state = "state"
        case tags = "tags"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let durationUnits = self.durationUnits {
            try encodeContainer.encode(durationUnits.rawValue, forKey: .durationUnits)
        }
        if let end = self.end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if let fixedPrice = self.fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let offeringDescription = self.offeringDescription {
            try encodeContainer.encode(offeringDescription, forKey: .offeringDescription)
        }
        if let offeringId = self.offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let offeringType = self.offeringType {
            try encodeContainer.encode(offeringType.rawValue, forKey: .offeringType)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let renewalSettings = self.renewalSettings {
            try encodeContainer.encode(renewalSettings, forKey: .renewalSettings)
        }
        if let reservationId = self.reservationId {
            try encodeContainer.encode(reservationId, forKey: .reservationId)
        }
        if let resourceSpecification = self.resourceSpecification {
            try encodeContainer.encode(resourceSpecification, forKey: .resourceSpecification)
        }
        if let start = self.start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let usagePrice = self.usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let durationUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingDurationUnits.self, forKey: .durationUnits)
        durationUnits = durationUnitsDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        end = endDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let offeringDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringDescription)
        offeringDescription = offeringDescriptionDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OfferingType.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let renewalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RenewalSettings.self, forKey: .renewalSettings)
        renewalSettings = renewalSettingsDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
    }
}

extension MediaLiveClientTypes {
    /// Reserved resources available to use
    public struct Reservation: Swift.Equatable {
        /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
        public var arn: Swift.String?
        /// Number of reserved resources
        public var count: Swift.Int?
        /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        public var currencyCode: Swift.String?
        /// Lease duration, e.g. '12'
        public var duration: Swift.Int?
        /// Units for duration, e.g. 'MONTHS'
        public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
        /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
        public var end: Swift.String?
        /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        public var fixedPrice: Swift.Double?
        /// User specified reservation name
        public var name: Swift.String?
        /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        public var offeringDescription: Swift.String?
        /// Unique offering ID, e.g. '87654321'
        public var offeringId: Swift.String?
        /// Offering type, e.g. 'NO_UPFRONT'
        public var offeringType: MediaLiveClientTypes.OfferingType?
        /// AWS region, e.g. 'us-west-2'
        public var region: Swift.String?
        /// Renewal settings for the reservation
        public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
        /// Unique reservation ID, e.g. '1234567'
        public var reservationId: Swift.String?
        /// Resource configuration details
        public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
        /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
        public var start: Swift.String?
        /// Current state of reservation, e.g. 'ACTIVE'
        public var state: MediaLiveClientTypes.ReservationState?
        /// A collection of key-value pairs
        public var tags: [Swift.String:Swift.String]?
        /// Recurring usage charge for each reserved resource, e.g. '157.0'
        public var usagePrice: Swift.Double?

        public init (
            arn: Swift.String? = nil,
            count: Swift.Int? = nil,
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
            end: Swift.String? = nil,
            fixedPrice: Swift.Double? = nil,
            name: Swift.String? = nil,
            offeringDescription: Swift.String? = nil,
            offeringId: Swift.String? = nil,
            offeringType: MediaLiveClientTypes.OfferingType? = nil,
            region: Swift.String? = nil,
            renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
            reservationId: Swift.String? = nil,
            resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
            start: Swift.String? = nil,
            state: MediaLiveClientTypes.ReservationState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.arn = arn
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.end = end
            self.fixedPrice = fixedPrice
            self.name = name
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.renewalSettings = renewalSettings
            self.reservationId = reservationId
            self.resourceSpecification = resourceSpecification
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }
    }

}

extension MediaLiveClientTypes {
    /// Automatic Renewal Status for Reservation
    public enum ReservationAutomaticRenewal: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationAutomaticRenewal] {
            return [
                .disabled,
                .enabled,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationAutomaticRenewal(rawValue: rawValue) ?? ReservationAutomaticRenewal.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Codec, 'MPEG2', 'AVC', 'HEVC', or 'AUDIO'
    public enum ReservationCodec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case audio
        case avc
        case hevc
        case link
        case mpeg2
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationCodec] {
            return [
                .audio,
                .avc,
                .hevc,
                .link,
                .mpeg2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .audio: return "AUDIO"
            case .avc: return "AVC"
            case .hevc: return "HEVC"
            case .link: return "LINK"
            case .mpeg2: return "MPEG2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationCodec(rawValue: rawValue) ?? ReservationCodec.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Maximum bitrate in megabits per second
    public enum ReservationMaximumBitrate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case max10Mbps
        case max20Mbps
        case max50Mbps
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationMaximumBitrate] {
            return [
                .max10Mbps,
                .max20Mbps,
                .max50Mbps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .max10Mbps: return "MAX_10_MBPS"
            case .max20Mbps: return "MAX_20_MBPS"
            case .max50Mbps: return "MAX_50_MBPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationMaximumBitrate(rawValue: rawValue) ?? ReservationMaximumBitrate.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Maximum framerate in frames per second (Outputs only)
    public enum ReservationMaximumFramerate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case max30Fps
        case max60Fps
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationMaximumFramerate] {
            return [
                .max30Fps,
                .max60Fps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .max30Fps: return "MAX_30_FPS"
            case .max60Fps: return "MAX_60_FPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationMaximumFramerate(rawValue: rawValue) ?? ReservationMaximumFramerate.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Resolution based on lines of vertical resolution; SD is less than 720 lines, HD is 720 to 1080 lines, FHD is 1080 lines, UHD is greater than 1080 lines
    public enum ReservationResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fhd
        case hd
        case sd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationResolution] {
            return [
                .fhd,
                .hd,
                .sd,
                .uhd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fhd: return "FHD"
            case .hd: return "HD"
            case .sd: return "SD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationResolution(rawValue: rawValue) ?? ReservationResolution.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.ReservationResourceSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelClass = "channelClass"
        case codec = "codec"
        case maximumBitrate = "maximumBitrate"
        case maximumFramerate = "maximumFramerate"
        case resolution = "resolution"
        case resourceType = "resourceType"
        case specialFeature = "specialFeature"
        case videoQuality = "videoQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let codec = self.codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let maximumBitrate = self.maximumBitrate {
            try encodeContainer.encode(maximumBitrate.rawValue, forKey: .maximumBitrate)
        }
        if let maximumFramerate = self.maximumFramerate {
            try encodeContainer.encode(maximumFramerate.rawValue, forKey: .maximumFramerate)
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let specialFeature = self.specialFeature {
            try encodeContainer.encode(specialFeature.rawValue, forKey: .specialFeature)
        }
        if let videoQuality = self.videoQuality {
            try encodeContainer.encode(videoQuality.rawValue, forKey: .videoQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let codecDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationCodec.self, forKey: .codec)
        codec = codecDecoded
        let maximumBitrateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationMaximumBitrate.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let maximumFramerateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationMaximumFramerate.self, forKey: .maximumFramerate)
        maximumFramerate = maximumFramerateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let specialFeatureDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationSpecialFeature.self, forKey: .specialFeature)
        specialFeature = specialFeatureDecoded
        let videoQualityDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationVideoQuality.self, forKey: .videoQuality)
        videoQuality = videoQualityDecoded
    }
}

extension MediaLiveClientTypes {
    /// Resource configuration (codec, resolution, bitrate, ...)
    public struct ReservationResourceSpecification: Swift.Equatable {
        /// Channel class, e.g. 'STANDARD'
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// Codec, e.g. 'AVC'
        public var codec: MediaLiveClientTypes.ReservationCodec?
        /// Maximum bitrate, e.g. 'MAX_20_MBPS'
        public var maximumBitrate: MediaLiveClientTypes.ReservationMaximumBitrate?
        /// Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
        public var maximumFramerate: MediaLiveClientTypes.ReservationMaximumFramerate?
        /// Resolution, e.g. 'HD'
        public var resolution: MediaLiveClientTypes.ReservationResolution?
        /// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
        public var resourceType: MediaLiveClientTypes.ReservationResourceType?
        /// Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
        public var specialFeature: MediaLiveClientTypes.ReservationSpecialFeature?
        /// Video quality, e.g. 'STANDARD' (Outputs only)
        public var videoQuality: MediaLiveClientTypes.ReservationVideoQuality?

        public init (
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            codec: MediaLiveClientTypes.ReservationCodec? = nil,
            maximumBitrate: MediaLiveClientTypes.ReservationMaximumBitrate? = nil,
            maximumFramerate: MediaLiveClientTypes.ReservationMaximumFramerate? = nil,
            resolution: MediaLiveClientTypes.ReservationResolution? = nil,
            resourceType: MediaLiveClientTypes.ReservationResourceType? = nil,
            specialFeature: MediaLiveClientTypes.ReservationSpecialFeature? = nil,
            videoQuality: MediaLiveClientTypes.ReservationVideoQuality? = nil
        )
        {
            self.channelClass = channelClass
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.maximumFramerate = maximumFramerate
            self.resolution = resolution
            self.resourceType = resourceType
            self.specialFeature = specialFeature
            self.videoQuality = videoQuality
        }
    }

}

extension MediaLiveClientTypes {
    /// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public enum ReservationResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case channel
        case input
        case multiplex
        case output
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationResourceType] {
            return [
                .channel,
                .input,
                .multiplex,
                .output,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .channel: return "CHANNEL"
            case .input: return "INPUT"
            case .multiplex: return "MULTIPLEX"
            case .output: return "OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationResourceType(rawValue: rawValue) ?? ReservationResourceType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Special features, 'ADVANCED_AUDIO' 'AUDIO_NORMALIZATION' 'MGHD' or 'MGUHD'
    public enum ReservationSpecialFeature: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case advancedAudio
        case audioNormalization
        case mghd
        case mguhd
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationSpecialFeature] {
            return [
                .advancedAudio,
                .audioNormalization,
                .mghd,
                .mguhd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .advancedAudio: return "ADVANCED_AUDIO"
            case .audioNormalization: return "AUDIO_NORMALIZATION"
            case .mghd: return "MGHD"
            case .mguhd: return "MGUHD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationSpecialFeature(rawValue: rawValue) ?? ReservationSpecialFeature.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Current reservation state
    public enum ReservationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case canceled
        case deleted
        case expired
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationState] {
            return [
                .active,
                .canceled,
                .deleted,
                .expired,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .canceled: return "CANCELED"
            case .deleted: return "DELETED"
            case .expired: return "EXPIRED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationState(rawValue: rawValue) ?? ReservationState.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Video quality, e.g. 'STANDARD' (Outputs only)
    public enum ReservationVideoQuality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enhanced
        case premium
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationVideoQuality] {
            return [
                .enhanced,
                .premium,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enhanced: return "ENHANCED"
            case .premium: return "PREMIUM"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservationVideoQuality(rawValue: rawValue) ?? ReservationVideoQuality.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Ad Markers
    public enum RtmpAdMarkers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onCuePointScte35
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpAdMarkers] {
            return [
                .onCuePointScte35,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onCuePointScte35: return "ON_CUE_POINT_SCTE35"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RtmpAdMarkers(rawValue: rawValue) ?? RtmpAdMarkers.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Cache Full Behavior
    public enum RtmpCacheFullBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disconnectImmediately
        case waitForServer
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpCacheFullBehavior] {
            return [
                .disconnectImmediately,
                .waitForServer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disconnectImmediately: return "DISCONNECT_IMMEDIATELY"
            case .waitForServer: return "WAIT_FOR_SERVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RtmpCacheFullBehavior(rawValue: rawValue) ?? RtmpCacheFullBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Caption Data
    public enum RtmpCaptionData: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case field1608
        case field1AndField2608
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpCaptionData] {
            return [
                .all,
                .field1608,
                .field1AndField2608,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .field1608: return "FIELD1_608"
            case .field1AndField2608: return "FIELD1_AND_FIELD2_608"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RtmpCaptionData(rawValue: rawValue) ?? RtmpCaptionData.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Caption Info Destination Settings
    public struct RtmpCaptionInfoDestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.RtmpGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adMarkers = "adMarkers"
        case authenticationScheme = "authenticationScheme"
        case cacheFullBehavior = "cacheFullBehavior"
        case cacheLength = "cacheLength"
        case captionData = "captionData"
        case inputLossAction = "inputLossAction"
        case restartDelay = "restartDelay"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = adMarkers {
            var adMarkersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adMarkers)
            for rtmpadmarkers0 in adMarkers {
                try adMarkersContainer.encode(rtmpadmarkers0.rawValue)
            }
        }
        if let authenticationScheme = self.authenticationScheme {
            try encodeContainer.encode(authenticationScheme.rawValue, forKey: .authenticationScheme)
        }
        if let cacheFullBehavior = self.cacheFullBehavior {
            try encodeContainer.encode(cacheFullBehavior.rawValue, forKey: .cacheFullBehavior)
        }
        if let cacheLength = self.cacheLength {
            try encodeContainer.encode(cacheLength, forKey: .cacheLength)
        }
        if let captionData = self.captionData {
            try encodeContainer.encode(captionData.rawValue, forKey: .captionData)
        }
        if let inputLossAction = self.inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.RtmpAdMarkers?].self, forKey: .adMarkers)
        var adMarkersDecoded0:[MediaLiveClientTypes.RtmpAdMarkers]? = nil
        if let adMarkersContainer = adMarkersContainer {
            adMarkersDecoded0 = [MediaLiveClientTypes.RtmpAdMarkers]()
            for enum0 in adMarkersContainer {
                if let enum0 = enum0 {
                    adMarkersDecoded0?.append(enum0)
                }
            }
        }
        adMarkers = adMarkersDecoded0
        let authenticationSchemeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AuthenticationScheme.self, forKey: .authenticationScheme)
        authenticationScheme = authenticationSchemeDecoded
        let cacheFullBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpCacheFullBehavior.self, forKey: .cacheFullBehavior)
        cacheFullBehavior = cacheFullBehaviorDecoded
        let cacheLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cacheLength)
        cacheLength = cacheLengthDecoded
        let captionDataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpCaptionData.self, forKey: .captionData)
        captionData = captionDataDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossActionForRtmpOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Group Settings
    public struct RtmpGroupSettings: Swift.Equatable {
        /// Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
        public var adMarkers: [MediaLiveClientTypes.RtmpAdMarkers]?
        /// Authentication scheme to use when connecting with CDN
        public var authenticationScheme: MediaLiveClientTypes.AuthenticationScheme?
        /// Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
        public var cacheFullBehavior: MediaLiveClientTypes.RtmpCacheFullBehavior?
        /// Cache length, in seconds, is used to calculate buffer size.
        public var cacheLength: Swift.Int?
        /// Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
        public var captionData: MediaLiveClientTypes.RtmpCaptionData?
        /// Controls the behavior of this RTMP group if input becomes unavailable.
        ///
        /// * emitOutput: Emit a slate until input returns.
        ///
        /// * pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForRtmpOut?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init (
            adMarkers: [MediaLiveClientTypes.RtmpAdMarkers]? = nil,
            authenticationScheme: MediaLiveClientTypes.AuthenticationScheme? = nil,
            cacheFullBehavior: MediaLiveClientTypes.RtmpCacheFullBehavior? = nil,
            cacheLength: Swift.Int? = nil,
            captionData: MediaLiveClientTypes.RtmpCaptionData? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForRtmpOut? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.adMarkers = adMarkers
            self.authenticationScheme = authenticationScheme
            self.cacheFullBehavior = cacheFullBehavior
            self.cacheLength = cacheLength
            self.captionData = captionData
            self.inputLossAction = inputLossAction
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {
    /// Rtmp Output Certificate Mode
    public enum RtmpOutputCertificateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case selfSigned
        case verifyAuthenticity
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpOutputCertificateMode] {
            return [
                .selfSigned,
                .verifyAuthenticity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .selfSigned: return "SELF_SIGNED"
            case .verifyAuthenticity: return "VERIFY_AUTHENTICITY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RtmpOutputCertificateMode(rawValue: rawValue) ?? RtmpOutputCertificateMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.RtmpOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateMode = "certificateMode"
        case connectionRetryInterval = "connectionRetryInterval"
        case destination = "destination"
        case numRetries = "numRetries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateMode = self.certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpOutputCertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Output Settings
    public struct RtmpOutputSettings: Swift.Equatable {
        /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
        public var certificateMode: MediaLiveClientTypes.RtmpOutputCertificateMode?
        /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Number of retry attempts.
        public var numRetries: Swift.Int?

        public init (
            certificateMode: MediaLiveClientTypes.RtmpOutputCertificateMode? = nil,
            connectionRetryInterval: Swift.Int? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            numRetries: Swift.Int? = nil
        )
        {
            self.certificateMode = certificateMode
            self.connectionRetryInterval = connectionRetryInterval
            self.destination = destination
            self.numRetries = numRetries
        }
    }

}

extension MediaLiveClientTypes {
    /// S3 Canned Acl
    public enum S3CannedAcl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticatedRead
        case bucketOwnerFullControl
        case bucketOwnerRead
        case publicRead
        case sdkUnknown(Swift.String)

        public static var allCases: [S3CannedAcl] {
            return [
                .authenticatedRead,
                .bucketOwnerFullControl,
                .bucketOwnerRead,
                .publicRead,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "AUTHENTICATED_READ"
            case .bucketOwnerFullControl: return "BUCKET_OWNER_FULL_CONTROL"
            case .bucketOwnerRead: return "BUCKET_OWNER_READ"
            case .publicRead: return "PUBLIC_READ"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3CannedAcl(rawValue: rawValue) ?? S3CannedAcl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.ScheduleAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "actionName"
        case scheduleActionSettings = "scheduleActionSettings"
        case scheduleActionStartSettings = "scheduleActionStartSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let scheduleActionSettings = self.scheduleActionSettings {
            try encodeContainer.encode(scheduleActionSettings, forKey: .scheduleActionSettings)
        }
        if let scheduleActionStartSettings = self.scheduleActionStartSettings {
            try encodeContainer.encode(scheduleActionStartSettings, forKey: .scheduleActionStartSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let scheduleActionSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ScheduleActionSettings.self, forKey: .scheduleActionSettings)
        scheduleActionSettings = scheduleActionSettingsDecoded
        let scheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ScheduleActionStartSettings.self, forKey: .scheduleActionStartSettings)
        scheduleActionStartSettings = scheduleActionStartSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Contains information on a single schedule action.
    public struct ScheduleAction: Swift.Equatable {
        /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
        /// This member is required.
        public var actionName: Swift.String?
        /// Settings for this schedule action.
        /// This member is required.
        public var scheduleActionSettings: MediaLiveClientTypes.ScheduleActionSettings?
        /// The time for the action to start in the channel.
        /// This member is required.
        public var scheduleActionStartSettings: MediaLiveClientTypes.ScheduleActionStartSettings?

        public init (
            actionName: Swift.String? = nil,
            scheduleActionSettings: MediaLiveClientTypes.ScheduleActionSettings? = nil,
            scheduleActionStartSettings: MediaLiveClientTypes.ScheduleActionStartSettings? = nil
        )
        {
            self.actionName = actionName
            self.scheduleActionSettings = scheduleActionSettings
            self.scheduleActionStartSettings = scheduleActionStartSettings
        }
    }

}

extension MediaLiveClientTypes.ScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hlsId3SegmentTaggingSettings = "hlsId3SegmentTaggingSettings"
        case hlsTimedMetadataSettings = "hlsTimedMetadataSettings"
        case inputPrepareSettings = "inputPrepareSettings"
        case inputSwitchSettings = "inputSwitchSettings"
        case motionGraphicsImageActivateSettings = "motionGraphicsImageActivateSettings"
        case motionGraphicsImageDeactivateSettings = "motionGraphicsImageDeactivateSettings"
        case pauseStateSettings = "pauseStateSettings"
        case scte35InputSettings = "scte35InputSettings"
        case scte35ReturnToNetworkSettings = "scte35ReturnToNetworkSettings"
        case scte35SpliceInsertSettings = "scte35SpliceInsertSettings"
        case scte35TimeSignalSettings = "scte35TimeSignalSettings"
        case staticImageActivateSettings = "staticImageActivateSettings"
        case staticImageDeactivateSettings = "staticImageDeactivateSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsId3SegmentTaggingSettings = self.hlsId3SegmentTaggingSettings {
            try encodeContainer.encode(hlsId3SegmentTaggingSettings, forKey: .hlsId3SegmentTaggingSettings)
        }
        if let hlsTimedMetadataSettings = self.hlsTimedMetadataSettings {
            try encodeContainer.encode(hlsTimedMetadataSettings, forKey: .hlsTimedMetadataSettings)
        }
        if let inputPrepareSettings = self.inputPrepareSettings {
            try encodeContainer.encode(inputPrepareSettings, forKey: .inputPrepareSettings)
        }
        if let inputSwitchSettings = self.inputSwitchSettings {
            try encodeContainer.encode(inputSwitchSettings, forKey: .inputSwitchSettings)
        }
        if let motionGraphicsImageActivateSettings = self.motionGraphicsImageActivateSettings {
            try encodeContainer.encode(motionGraphicsImageActivateSettings, forKey: .motionGraphicsImageActivateSettings)
        }
        if let motionGraphicsImageDeactivateSettings = self.motionGraphicsImageDeactivateSettings {
            try encodeContainer.encode(motionGraphicsImageDeactivateSettings, forKey: .motionGraphicsImageDeactivateSettings)
        }
        if let pauseStateSettings = self.pauseStateSettings {
            try encodeContainer.encode(pauseStateSettings, forKey: .pauseStateSettings)
        }
        if let scte35InputSettings = self.scte35InputSettings {
            try encodeContainer.encode(scte35InputSettings, forKey: .scte35InputSettings)
        }
        if let scte35ReturnToNetworkSettings = self.scte35ReturnToNetworkSettings {
            try encodeContainer.encode(scte35ReturnToNetworkSettings, forKey: .scte35ReturnToNetworkSettings)
        }
        if let scte35SpliceInsertSettings = self.scte35SpliceInsertSettings {
            try encodeContainer.encode(scte35SpliceInsertSettings, forKey: .scte35SpliceInsertSettings)
        }
        if let scte35TimeSignalSettings = self.scte35TimeSignalSettings {
            try encodeContainer.encode(scte35TimeSignalSettings, forKey: .scte35TimeSignalSettings)
        }
        if let staticImageActivateSettings = self.staticImageActivateSettings {
            try encodeContainer.encode(staticImageActivateSettings, forKey: .staticImageActivateSettings)
        }
        if let staticImageDeactivateSettings = self.staticImageDeactivateSettings {
            try encodeContainer.encode(staticImageDeactivateSettings, forKey: .staticImageDeactivateSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsId3SegmentTaggingSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings.self, forKey: .hlsId3SegmentTaggingSettings)
        hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettingsDecoded
        let hlsTimedMetadataSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings.self, forKey: .hlsTimedMetadataSettings)
        hlsTimedMetadataSettings = hlsTimedMetadataSettingsDecoded
        let inputPrepareSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputPrepareScheduleActionSettings.self, forKey: .inputPrepareSettings)
        inputPrepareSettings = inputPrepareSettingsDecoded
        let inputSwitchSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSwitchScheduleActionSettings.self, forKey: .inputSwitchSettings)
        inputSwitchSettings = inputSwitchSettingsDecoded
        let motionGraphicsImageActivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings.self, forKey: .motionGraphicsImageActivateSettings)
        motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettingsDecoded
        let motionGraphicsImageDeactivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings.self, forKey: .motionGraphicsImageDeactivateSettings)
        motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettingsDecoded
        let pauseStateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.PauseStateScheduleActionSettings.self, forKey: .pauseStateSettings)
        pauseStateSettings = pauseStateSettingsDecoded
        let scte35InputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35InputScheduleActionSettings.self, forKey: .scte35InputSettings)
        scte35InputSettings = scte35InputSettingsDecoded
        let scte35ReturnToNetworkSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings.self, forKey: .scte35ReturnToNetworkSettings)
        scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettingsDecoded
        let scte35SpliceInsertSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings.self, forKey: .scte35SpliceInsertSettings)
        scte35SpliceInsertSettings = scte35SpliceInsertSettingsDecoded
        let scte35TimeSignalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings.self, forKey: .scte35TimeSignalSettings)
        scte35TimeSignalSettings = scte35TimeSignalSettingsDecoded
        let staticImageActivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StaticImageActivateScheduleActionSettings.self, forKey: .staticImageActivateSettings)
        staticImageActivateSettings = staticImageActivateSettingsDecoded
        let staticImageDeactivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings.self, forKey: .staticImageDeactivateSettings)
        staticImageDeactivateSettings = staticImageDeactivateSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Holds the settings for a single schedule action.
    public struct ScheduleActionSettings: Swift.Equatable {
        /// Action to insert HLS ID3 segment tagging
        public var hlsId3SegmentTaggingSettings: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings?
        /// Action to insert HLS metadata
        public var hlsTimedMetadataSettings: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings?
        /// Action to prepare an input for a future immediate input switch
        public var inputPrepareSettings: MediaLiveClientTypes.InputPrepareScheduleActionSettings?
        /// Action to switch the input
        public var inputSwitchSettings: MediaLiveClientTypes.InputSwitchScheduleActionSettings?
        /// Action to activate a motion graphics image overlay
        public var motionGraphicsImageActivateSettings: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings?
        /// Action to deactivate a motion graphics image overlay
        public var motionGraphicsImageDeactivateSettings: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings?
        /// Action to pause or unpause one or both channel pipelines
        public var pauseStateSettings: MediaLiveClientTypes.PauseStateScheduleActionSettings?
        /// Action to specify scte35 input
        public var scte35InputSettings: MediaLiveClientTypes.Scte35InputScheduleActionSettings?
        /// Action to insert SCTE-35 return_to_network message
        public var scte35ReturnToNetworkSettings: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings?
        /// Action to insert SCTE-35 splice_insert message
        public var scte35SpliceInsertSettings: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings?
        /// Action to insert SCTE-35 time_signal message
        public var scte35TimeSignalSettings: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings?
        /// Action to activate a static image overlay
        public var staticImageActivateSettings: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings?
        /// Action to deactivate a static image overlay
        public var staticImageDeactivateSettings: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings?

        public init (
            hlsId3SegmentTaggingSettings: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings? = nil,
            hlsTimedMetadataSettings: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings? = nil,
            inputPrepareSettings: MediaLiveClientTypes.InputPrepareScheduleActionSettings? = nil,
            inputSwitchSettings: MediaLiveClientTypes.InputSwitchScheduleActionSettings? = nil,
            motionGraphicsImageActivateSettings: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings? = nil,
            motionGraphicsImageDeactivateSettings: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings? = nil,
            pauseStateSettings: MediaLiveClientTypes.PauseStateScheduleActionSettings? = nil,
            scte35InputSettings: MediaLiveClientTypes.Scte35InputScheduleActionSettings? = nil,
            scte35ReturnToNetworkSettings: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings? = nil,
            scte35SpliceInsertSettings: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings? = nil,
            scte35TimeSignalSettings: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings? = nil,
            staticImageActivateSettings: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings? = nil,
            staticImageDeactivateSettings: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings? = nil
        )
        {
            self.hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettings
            self.hlsTimedMetadataSettings = hlsTimedMetadataSettings
            self.inputPrepareSettings = inputPrepareSettings
            self.inputSwitchSettings = inputSwitchSettings
            self.motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettings
            self.motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettings
            self.pauseStateSettings = pauseStateSettings
            self.scte35InputSettings = scte35InputSettings
            self.scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettings
            self.scte35SpliceInsertSettings = scte35SpliceInsertSettings
            self.scte35TimeSignalSettings = scte35TimeSignalSettings
            self.staticImageActivateSettings = staticImageActivateSettings
            self.staticImageDeactivateSettings = staticImageDeactivateSettings
        }
    }

}

extension MediaLiveClientTypes.ScheduleActionStartSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fixedModeScheduleActionStartSettings = "fixedModeScheduleActionStartSettings"
        case followModeScheduleActionStartSettings = "followModeScheduleActionStartSettings"
        case immediateModeScheduleActionStartSettings = "immediateModeScheduleActionStartSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fixedModeScheduleActionStartSettings = self.fixedModeScheduleActionStartSettings {
            try encodeContainer.encode(fixedModeScheduleActionStartSettings, forKey: .fixedModeScheduleActionStartSettings)
        }
        if let followModeScheduleActionStartSettings = self.followModeScheduleActionStartSettings {
            try encodeContainer.encode(followModeScheduleActionStartSettings, forKey: .followModeScheduleActionStartSettings)
        }
        if let immediateModeScheduleActionStartSettings = self.immediateModeScheduleActionStartSettings {
            try encodeContainer.encode(immediateModeScheduleActionStartSettings, forKey: .immediateModeScheduleActionStartSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fixedModeScheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedModeScheduleActionStartSettings.self, forKey: .fixedModeScheduleActionStartSettings)
        fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettingsDecoded
        let followModeScheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FollowModeScheduleActionStartSettings.self, forKey: .followModeScheduleActionStartSettings)
        followModeScheduleActionStartSettings = followModeScheduleActionStartSettingsDecoded
        let immediateModeScheduleActionStartSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings.self, forKey: .immediateModeScheduleActionStartSettings)
        immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings to specify when an action should occur. Only one of the options must be selected.
    public struct ScheduleActionStartSettings: Swift.Equatable {
        /// Option for specifying the start time for an action.
        public var fixedModeScheduleActionStartSettings: MediaLiveClientTypes.FixedModeScheduleActionStartSettings?
        /// Option for specifying an action as relative to another action.
        public var followModeScheduleActionStartSettings: MediaLiveClientTypes.FollowModeScheduleActionStartSettings?
        /// Option for specifying an action that should be applied immediately.
        public var immediateModeScheduleActionStartSettings: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings?

        public init (
            fixedModeScheduleActionStartSettings: MediaLiveClientTypes.FixedModeScheduleActionStartSettings? = nil,
            followModeScheduleActionStartSettings: MediaLiveClientTypes.FollowModeScheduleActionStartSettings? = nil,
            immediateModeScheduleActionStartSettings: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings? = nil
        )
        {
            self.fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettings
            self.followModeScheduleActionStartSettings = followModeScheduleActionStartSettings
            self.immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Scte20 Convert608 To708
    public enum Scte20Convert608To708: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte20Convert608To708] {
            return [
                .disabled,
                .upconvert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte20Convert608To708(rawValue: rawValue) ?? Scte20Convert608To708.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Scte20 Plus Embedded Destination Settings
    public struct Scte20PlusEmbeddedDestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.Scte20SourceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case convert608To708 = "convert608To708"
        case source608ChannelNumber = "source608ChannelNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let convert608To708 = self.convert608To708 {
            try encodeContainer.encode(convert608To708.rawValue, forKey: .convert608To708)
        }
        if let source608ChannelNumber = self.source608ChannelNumber {
            try encodeContainer.encode(source608ChannelNumber, forKey: .source608ChannelNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convert608To708Decoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte20Convert608To708.self, forKey: .convert608To708)
        convert608To708 = convert608To708Decoded
        let source608ChannelNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .source608ChannelNumber)
        source608ChannelNumber = source608ChannelNumberDecoded
    }
}

extension MediaLiveClientTypes {
    /// Scte20 Source Settings
    public struct Scte20SourceSettings: Swift.Equatable {
        /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
        public var convert608To708: MediaLiveClientTypes.Scte20Convert608To708?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public var source608ChannelNumber: Swift.Int?

        public init (
            convert608To708: MediaLiveClientTypes.Scte20Convert608To708? = nil,
            source608ChannelNumber: Swift.Int? = nil
        )
        {
            self.convert608To708 = convert608To708
            self.source608ChannelNumber = source608ChannelNumber
        }
    }

}

extension MediaLiveClientTypes.Scte27DestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Scte27 Destination Settings
    public struct Scte27DestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes {
    /// Scte27 Ocr Language
    public enum Scte27OcrLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deu
        case eng
        case fra
        case nld
        case por
        case spa
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte27OcrLanguage] {
            return [
                .deu,
                .eng,
                .fra,
                .nld,
                .por,
                .spa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deu: return "DEU"
            case .eng: return "ENG"
            case .fra: return "FRA"
            case .nld: return "NLD"
            case .por: return "POR"
            case .spa: return "SPA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte27OcrLanguage(rawValue: rawValue) ?? Scte27OcrLanguage.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte27SourceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ocrLanguage = "ocrLanguage"
        case pid = "pid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ocrLanguage = self.ocrLanguage {
            try encodeContainer.encode(ocrLanguage.rawValue, forKey: .ocrLanguage)
        }
        if let pid = self.pid {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ocrLanguageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte27OcrLanguage.self, forKey: .ocrLanguage)
        ocrLanguage = ocrLanguageDecoded
        let pidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Scte27 Source Settings
    public struct Scte27SourceSettings: Swift.Equatable {
        /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
        public var ocrLanguage: MediaLiveClientTypes.Scte27OcrLanguage?
        /// The pid field is used in conjunction with the caption selector languageCode field as follows:
        ///
        /// * Specify PID and Language: Extracts captions from that PID; the language is "informational".
        ///
        /// * Specify PID and omit Language: Extracts the specified PID.
        ///
        /// * Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be.
        ///
        /// * Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
        public var pid: Swift.Int?

        public init (
            ocrLanguage: MediaLiveClientTypes.Scte27OcrLanguage? = nil,
            pid: Swift.Int? = nil
        )
        {
            self.ocrLanguage = ocrLanguage
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes {
    /// Scte35 Apos No Regional Blackout Behavior
    public enum Scte35AposNoRegionalBlackoutBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35AposNoRegionalBlackoutBehavior] {
            return [
                .follow,
                .ignore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35AposNoRegionalBlackoutBehavior(rawValue: rawValue) ?? Scte35AposNoRegionalBlackoutBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Scte35 Apos Web Delivery Allowed Behavior
    public enum Scte35AposWebDeliveryAllowedBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35AposWebDeliveryAllowedBehavior] {
            return [
                .follow,
                .ignore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35AposWebDeliveryAllowedBehavior(rawValue: rawValue) ?? Scte35AposWebDeliveryAllowedBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Corresponds to the archive_allowed parameter. A value of ARCHIVE_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35ArchiveAllowedFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archiveAllowed
        case archiveNotAllowed
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35ArchiveAllowedFlag] {
            return [
                .archiveAllowed,
                .archiveNotAllowed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archiveAllowed: return "ARCHIVE_ALLOWED"
            case .archiveNotAllowed: return "ARCHIVE_NOT_ALLOWED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35ArchiveAllowedFlag(rawValue: rawValue) ?? Scte35ArchiveAllowedFlag.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte35DeliveryRestrictions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveAllowedFlag = "archiveAllowedFlag"
        case deviceRestrictions = "deviceRestrictions"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveAllowedFlag = self.archiveAllowedFlag {
            try encodeContainer.encode(archiveAllowedFlag.rawValue, forKey: .archiveAllowedFlag)
        }
        if let deviceRestrictions = self.deviceRestrictions {
            try encodeContainer.encode(deviceRestrictions.rawValue, forKey: .deviceRestrictions)
        }
        if let noRegionalBlackoutFlag = self.noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = self.webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveAllowedFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35ArchiveAllowedFlag.self, forKey: .archiveAllowedFlag)
        archiveAllowedFlag = archiveAllowedFlagDecoded
        let deviceRestrictionsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35DeviceRestrictions.self, forKey: .deviceRestrictions)
        deviceRestrictions = deviceRestrictionsDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35NoRegionalBlackoutFlag.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35WebDeliveryAllowedFlag.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}

extension MediaLiveClientTypes {
    /// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
    public struct Scte35DeliveryRestrictions: Swift.Equatable {
        /// Corresponds to SCTE-35 archive_allowed_flag.
        /// This member is required.
        public var archiveAllowedFlag: MediaLiveClientTypes.Scte35ArchiveAllowedFlag?
        /// Corresponds to SCTE-35 device_restrictions parameter.
        /// This member is required.
        public var deviceRestrictions: MediaLiveClientTypes.Scte35DeviceRestrictions?
        /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
        /// This member is required.
        public var noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35NoRegionalBlackoutFlag?
        /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
        /// This member is required.
        public var webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35WebDeliveryAllowedFlag?

        public init (
            archiveAllowedFlag: MediaLiveClientTypes.Scte35ArchiveAllowedFlag? = nil,
            deviceRestrictions: MediaLiveClientTypes.Scte35DeviceRestrictions? = nil,
            noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35NoRegionalBlackoutFlag? = nil,
            webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35WebDeliveryAllowedFlag? = nil
        )
        {
            self.archiveAllowedFlag = archiveAllowedFlag
            self.deviceRestrictions = deviceRestrictions
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }
    }

}

extension MediaLiveClientTypes.Scte35Descriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scte35DescriptorSettings = "scte35DescriptorSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scte35DescriptorSettings = self.scte35DescriptorSettings {
            try encodeContainer.encode(scte35DescriptorSettings, forKey: .scte35DescriptorSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scte35DescriptorSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35DescriptorSettings.self, forKey: .scte35DescriptorSettings)
        scte35DescriptorSettings = scte35DescriptorSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Holds one set of SCTE-35 Descriptor Settings.
    public struct Scte35Descriptor: Swift.Equatable {
        /// SCTE-35 Descriptor Settings.
        /// This member is required.
        public var scte35DescriptorSettings: MediaLiveClientTypes.Scte35DescriptorSettings?

        public init (
            scte35DescriptorSettings: MediaLiveClientTypes.Scte35DescriptorSettings? = nil
        )
        {
            self.scte35DescriptorSettings = scte35DescriptorSettings
        }
    }

}

extension MediaLiveClientTypes.Scte35DescriptorSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentationDescriptorScte35DescriptorSettings = "segmentationDescriptorScte35DescriptorSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let segmentationDescriptorScte35DescriptorSettings = self.segmentationDescriptorScte35DescriptorSettings {
            try encodeContainer.encode(segmentationDescriptorScte35DescriptorSettings, forKey: .segmentationDescriptorScte35DescriptorSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentationDescriptorScte35DescriptorSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SegmentationDescriptor.self, forKey: .segmentationDescriptorScte35DescriptorSettings)
        segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// SCTE-35 Descriptor settings.
    public struct Scte35DescriptorSettings: Swift.Equatable {
        /// SCTE-35 Segmentation Descriptor.
        /// This member is required.
        public var segmentationDescriptorScte35DescriptorSettings: MediaLiveClientTypes.Scte35SegmentationDescriptor?

        public init (
            segmentationDescriptorScte35DescriptorSettings: MediaLiveClientTypes.Scte35SegmentationDescriptor? = nil
        )
        {
            self.segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Corresponds to the device_restrictions parameter in a segmentation_descriptor. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35DeviceRestrictions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case restrictGroup0
        case restrictGroup1
        case restrictGroup2
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35DeviceRestrictions] {
            return [
                .none,
                .restrictGroup0,
                .restrictGroup1,
                .restrictGroup2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .restrictGroup0: return "RESTRICT_GROUP0"
            case .restrictGroup1: return "RESTRICT_GROUP1"
            case .restrictGroup2: return "RESTRICT_GROUP2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35DeviceRestrictions(rawValue: rawValue) ?? Scte35DeviceRestrictions.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Whether the SCTE-35 input should be the active input or a fixed input.
    public enum Scte35InputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fixed
        case followActive
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35InputMode] {
            return [
                .fixed,
                .followActive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .followActive: return "FOLLOW_ACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35InputMode(rawValue: rawValue) ?? Scte35InputMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte35InputScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case mode = "mode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = self.inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let modeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35InputMode.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Scte35Input Schedule Action Settings
    public struct Scte35InputScheduleActionSettings: Swift.Equatable {
        /// In fixed mode, enter the name of the input attachment that you want to use as a SCTE-35 input. (Don't enter the ID of the input.)"
        public var inputAttachmentNameReference: Swift.String?
        /// Whether the SCTE-35 input should be the active input or a fixed input.
        /// This member is required.
        public var mode: MediaLiveClientTypes.Scte35InputMode?

        public init (
            inputAttachmentNameReference: Swift.String? = nil,
            mode: MediaLiveClientTypes.Scte35InputMode? = nil
        )
        {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.mode = mode
        }
    }

}

extension MediaLiveClientTypes {
    /// Corresponds to the no_regional_blackout_flag parameter. A value of REGIONAL_BLACKOUT corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35NoRegionalBlackoutFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noRegionalBlackout
        case regionalBlackout
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35NoRegionalBlackoutFlag] {
            return [
                .noRegionalBlackout,
                .regionalBlackout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noRegionalBlackout: return "NO_REGIONAL_BLACKOUT"
            case .regionalBlackout: return "REGIONAL_BLACKOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35NoRegionalBlackoutFlag(rawValue: rawValue) ?? Scte35NoRegionalBlackoutFlag.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case spliceEventId = "spliceEventId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let spliceEventId = self.spliceEventId {
            try encodeContainer.encode(spliceEventId, forKey: .spliceEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let spliceEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spliceEventId)
        spliceEventId = spliceEventIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for a SCTE-35 return_to_network message.
    public struct Scte35ReturnToNetworkScheduleActionSettings: Swift.Equatable {
        /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
        /// This member is required.
        public var spliceEventId: Swift.Int?

        public init (
            spliceEventId: Swift.Int? = nil
        )
        {
            self.spliceEventId = spliceEventId
        }
    }

}

extension MediaLiveClientTypes {
    /// Corresponds to SCTE-35 segmentation_event_cancel_indicator. SEGMENTATION_EVENT_NOT_CANCELED corresponds to 0 in the SCTE-35 specification and indicates that this is an insertion request. SEGMENTATION_EVENT_CANCELED corresponds to 1 in the SCTE-35 specification and indicates that this is a cancelation request, in which case complete this field and the existing event ID to cancel.
    public enum Scte35SegmentationCancelIndicator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case segmentationEventCanceled
        case segmentationEventNotCanceled
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SegmentationCancelIndicator] {
            return [
                .segmentationEventCanceled,
                .segmentationEventNotCanceled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .segmentationEventCanceled: return "SEGMENTATION_EVENT_CANCELED"
            case .segmentationEventNotCanceled: return "SEGMENTATION_EVENT_NOT_CANCELED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35SegmentationCancelIndicator(rawValue: rawValue) ?? Scte35SegmentationCancelIndicator.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte35SegmentationDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryRestrictions = "deliveryRestrictions"
        case segmentNum = "segmentNum"
        case segmentationCancelIndicator = "segmentationCancelIndicator"
        case segmentationDuration = "segmentationDuration"
        case segmentationEventId = "segmentationEventId"
        case segmentationTypeId = "segmentationTypeId"
        case segmentationUpid = "segmentationUpid"
        case segmentationUpidType = "segmentationUpidType"
        case segmentsExpected = "segmentsExpected"
        case subSegmentNum = "subSegmentNum"
        case subSegmentsExpected = "subSegmentsExpected"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryRestrictions = self.deliveryRestrictions {
            try encodeContainer.encode(deliveryRestrictions, forKey: .deliveryRestrictions)
        }
        if let segmentNum = self.segmentNum {
            try encodeContainer.encode(segmentNum, forKey: .segmentNum)
        }
        if let segmentationCancelIndicator = self.segmentationCancelIndicator {
            try encodeContainer.encode(segmentationCancelIndicator.rawValue, forKey: .segmentationCancelIndicator)
        }
        if let segmentationDuration = self.segmentationDuration {
            try encodeContainer.encode(segmentationDuration, forKey: .segmentationDuration)
        }
        if let segmentationEventId = self.segmentationEventId {
            try encodeContainer.encode(segmentationEventId, forKey: .segmentationEventId)
        }
        if let segmentationTypeId = self.segmentationTypeId {
            try encodeContainer.encode(segmentationTypeId, forKey: .segmentationTypeId)
        }
        if let segmentationUpid = self.segmentationUpid {
            try encodeContainer.encode(segmentationUpid, forKey: .segmentationUpid)
        }
        if let segmentationUpidType = self.segmentationUpidType {
            try encodeContainer.encode(segmentationUpidType, forKey: .segmentationUpidType)
        }
        if let segmentsExpected = self.segmentsExpected {
            try encodeContainer.encode(segmentsExpected, forKey: .segmentsExpected)
        }
        if let subSegmentNum = self.subSegmentNum {
            try encodeContainer.encode(subSegmentNum, forKey: .subSegmentNum)
        }
        if let subSegmentsExpected = self.subSegmentsExpected {
            try encodeContainer.encode(subSegmentsExpected, forKey: .subSegmentsExpected)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryRestrictionsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35DeliveryRestrictions.self, forKey: .deliveryRestrictions)
        deliveryRestrictions = deliveryRestrictionsDecoded
        let segmentNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentNum)
        segmentNum = segmentNumDecoded
        let segmentationCancelIndicatorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SegmentationCancelIndicator.self, forKey: .segmentationCancelIndicator)
        segmentationCancelIndicator = segmentationCancelIndicatorDecoded
        let segmentationDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationDuration)
        segmentationDuration = segmentationDurationDecoded
        let segmentationEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationEventId)
        segmentationEventId = segmentationEventIdDecoded
        let segmentationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationTypeId)
        segmentationTypeId = segmentationTypeIdDecoded
        let segmentationUpidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentationUpid)
        segmentationUpid = segmentationUpidDecoded
        let segmentationUpidTypeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationUpidType)
        segmentationUpidType = segmentationUpidTypeDecoded
        let segmentsExpectedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsExpected)
        segmentsExpected = segmentsExpectedDecoded
        let subSegmentNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .subSegmentNum)
        subSegmentNum = subSegmentNumDecoded
        let subSegmentsExpectedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .subSegmentsExpected)
        subSegmentsExpected = subSegmentsExpectedDecoded
    }
}

extension MediaLiveClientTypes {
    /// Corresponds to SCTE-35 segmentation_descriptor.
    public struct Scte35SegmentationDescriptor: Swift.Equatable {
        /// Holds the four SCTE-35 delivery restriction parameters.
        public var deliveryRestrictions: MediaLiveClientTypes.Scte35DeliveryRestrictions?
        /// Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
        public var segmentNum: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_event_cancel_indicator.
        /// This member is required.
        public var segmentationCancelIndicator: MediaLiveClientTypes.Scte35SegmentationCancelIndicator?
        /// Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
        public var segmentationDuration: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_event_id.
        /// This member is required.
        public var segmentationEventId: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
        public var segmentationTypeId: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
        public var segmentationUpid: Swift.String?
        /// Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
        public var segmentationUpidType: Swift.Int?
        /// Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
        public var segmentsExpected: Swift.Int?
        /// Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
        public var subSegmentNum: Swift.Int?
        /// Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
        public var subSegmentsExpected: Swift.Int?

        public init (
            deliveryRestrictions: MediaLiveClientTypes.Scte35DeliveryRestrictions? = nil,
            segmentNum: Swift.Int? = nil,
            segmentationCancelIndicator: MediaLiveClientTypes.Scte35SegmentationCancelIndicator? = nil,
            segmentationDuration: Swift.Int? = nil,
            segmentationEventId: Swift.Int? = nil,
            segmentationTypeId: Swift.Int? = nil,
            segmentationUpid: Swift.String? = nil,
            segmentationUpidType: Swift.Int? = nil,
            segmentsExpected: Swift.Int? = nil,
            subSegmentNum: Swift.Int? = nil,
            subSegmentsExpected: Swift.Int? = nil
        )
        {
            self.deliveryRestrictions = deliveryRestrictions
            self.segmentNum = segmentNum
            self.segmentationCancelIndicator = segmentationCancelIndicator
            self.segmentationDuration = segmentationDuration
            self.segmentationEventId = segmentationEventId
            self.segmentationTypeId = segmentationTypeId
            self.segmentationUpid = segmentationUpid
            self.segmentationUpidType = segmentationUpidType
            self.segmentsExpected = segmentsExpected
            self.subSegmentNum = subSegmentNum
            self.subSegmentsExpected = subSegmentsExpected
        }
    }

}

extension MediaLiveClientTypes.Scte35SpliceInsert: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adAvailOffset = "adAvailOffset"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adAvailOffset = self.adAvailOffset {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let noRegionalBlackoutFlag = self.noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = self.webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SpliceInsertNoRegionalBlackoutBehavior.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SpliceInsertWebDeliveryAllowedBehavior.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}

extension MediaLiveClientTypes {
    /// Scte35 Splice Insert
    public struct Scte35SpliceInsert: Swift.Equatable {
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public var adAvailOffset: Swift.Int?
        /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35SpliceInsertNoRegionalBlackoutBehavior?
        /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35SpliceInsertWebDeliveryAllowedBehavior?

        public init (
            adAvailOffset: Swift.Int? = nil,
            noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35SpliceInsertNoRegionalBlackoutBehavior? = nil,
            webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35SpliceInsertWebDeliveryAllowedBehavior? = nil
        )
        {
            self.adAvailOffset = adAvailOffset
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }
    }

}

extension MediaLiveClientTypes {
    /// Scte35 Splice Insert No Regional Blackout Behavior
    public enum Scte35SpliceInsertNoRegionalBlackoutBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SpliceInsertNoRegionalBlackoutBehavior] {
            return [
                .follow,
                .ignore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35SpliceInsertNoRegionalBlackoutBehavior(rawValue: rawValue) ?? Scte35SpliceInsertNoRegionalBlackoutBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "duration"
        case spliceEventId = "spliceEventId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let spliceEventId = self.spliceEventId {
            try encodeContainer.encode(spliceEventId, forKey: .spliceEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let spliceEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spliceEventId)
        spliceEventId = spliceEventIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for a SCTE-35 splice_insert message.
    public struct Scte35SpliceInsertScheduleActionSettings: Swift.Equatable {
        /// Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
        public var duration: Swift.Int?
        /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
        /// This member is required.
        public var spliceEventId: Swift.Int?

        public init (
            duration: Swift.Int? = nil,
            spliceEventId: Swift.Int? = nil
        )
        {
            self.duration = duration
            self.spliceEventId = spliceEventId
        }
    }

}

extension MediaLiveClientTypes {
    /// Scte35 Splice Insert Web Delivery Allowed Behavior
    public enum Scte35SpliceInsertWebDeliveryAllowedBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SpliceInsertWebDeliveryAllowedBehavior] {
            return [
                .follow,
                .ignore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35SpliceInsertWebDeliveryAllowedBehavior(rawValue: rawValue) ?? Scte35SpliceInsertWebDeliveryAllowedBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.Scte35TimeSignalApos: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adAvailOffset = "adAvailOffset"
        case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
        case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adAvailOffset = self.adAvailOffset {
            try encodeContainer.encode(adAvailOffset, forKey: .adAvailOffset)
        }
        if let noRegionalBlackoutFlag = self.noRegionalBlackoutFlag {
            try encodeContainer.encode(noRegionalBlackoutFlag.rawValue, forKey: .noRegionalBlackoutFlag)
        }
        if let webDeliveryAllowedFlag = self.webDeliveryAllowedFlag {
            try encodeContainer.encode(webDeliveryAllowedFlag.rawValue, forKey: .webDeliveryAllowedFlag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adAvailOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .adAvailOffset)
        adAvailOffset = adAvailOffsetDecoded
        let noRegionalBlackoutFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35AposNoRegionalBlackoutBehavior.self, forKey: .noRegionalBlackoutFlag)
        noRegionalBlackoutFlag = noRegionalBlackoutFlagDecoded
        let webDeliveryAllowedFlagDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35AposWebDeliveryAllowedBehavior.self, forKey: .webDeliveryAllowedFlag)
        webDeliveryAllowedFlag = webDeliveryAllowedFlagDecoded
    }
}

extension MediaLiveClientTypes {
    /// Scte35 Time Signal Apos
    public struct Scte35TimeSignalApos: Swift.Equatable {
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public var adAvailOffset: Swift.Int?
        /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35AposNoRegionalBlackoutBehavior?
        /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35AposWebDeliveryAllowedBehavior?

        public init (
            adAvailOffset: Swift.Int? = nil,
            noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35AposNoRegionalBlackoutBehavior? = nil,
            webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35AposWebDeliveryAllowedBehavior? = nil
        )
        {
            self.adAvailOffset = adAvailOffset
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }
    }

}

extension MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scte35Descriptors = "scte35Descriptors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scte35Descriptors = scte35Descriptors {
            var scte35DescriptorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scte35Descriptors)
            for scte35descriptor0 in scte35Descriptors {
                try scte35DescriptorsContainer.encode(scte35descriptor0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scte35DescriptorsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.Scte35Descriptor?].self, forKey: .scte35Descriptors)
        var scte35DescriptorsDecoded0:[MediaLiveClientTypes.Scte35Descriptor]? = nil
        if let scte35DescriptorsContainer = scte35DescriptorsContainer {
            scte35DescriptorsDecoded0 = [MediaLiveClientTypes.Scte35Descriptor]()
            for structure0 in scte35DescriptorsContainer {
                if let structure0 = structure0 {
                    scte35DescriptorsDecoded0?.append(structure0)
                }
            }
        }
        scte35Descriptors = scte35DescriptorsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// Settings for a SCTE-35 time_signal.
    public struct Scte35TimeSignalScheduleActionSettings: Swift.Equatable {
        /// The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
        /// This member is required.
        public var scte35Descriptors: [MediaLiveClientTypes.Scte35Descriptor]?

        public init (
            scte35Descriptors: [MediaLiveClientTypes.Scte35Descriptor]? = nil
        )
        {
            self.scte35Descriptors = scte35Descriptors
        }
    }

}

extension MediaLiveClientTypes {
    /// Corresponds to the web_delivery_allowed_flag parameter. A value of WEB_DELIVERY_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35WebDeliveryAllowedFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case webDeliveryAllowed
        case webDeliveryNotAllowed
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35WebDeliveryAllowedFlag] {
            return [
                .webDeliveryAllowed,
                .webDeliveryNotAllowed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .webDeliveryAllowed: return "WEB_DELIVERY_ALLOWED"
            case .webDeliveryNotAllowed: return "WEB_DELIVERY_NOT_ALLOWED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scte35WebDeliveryAllowedFlag(rawValue: rawValue) ?? Scte35WebDeliveryAllowedFlag.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Audio Only Timecode Control
    public enum SmoothGroupAudioOnlyTimecodeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case passthrough
        case useConfiguredClock
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupAudioOnlyTimecodeControl] {
            return [
                .passthrough,
                .useConfiguredClock,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .useConfiguredClock: return "USE_CONFIGURED_CLOCK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupAudioOnlyTimecodeControl(rawValue: rawValue) ?? SmoothGroupAudioOnlyTimecodeControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Certificate Mode
    public enum SmoothGroupCertificateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case selfSigned
        case verifyAuthenticity
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupCertificateMode] {
            return [
                .selfSigned,
                .verifyAuthenticity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .selfSigned: return "SELF_SIGNED"
            case .verifyAuthenticity: return "VERIFY_AUTHENTICITY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupCertificateMode(rawValue: rawValue) ?? SmoothGroupCertificateMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Event Id Mode
    public enum SmoothGroupEventIdMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noEventId
        case useConfigured
        case useTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupEventIdMode] {
            return [
                .noEventId,
                .useConfigured,
                .useTimestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noEventId: return "NO_EVENT_ID"
            case .useConfigured: return "USE_CONFIGURED"
            case .useTimestamp: return "USE_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupEventIdMode(rawValue: rawValue) ?? SmoothGroupEventIdMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Event Stop Behavior
    public enum SmoothGroupEventStopBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case sendEos
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupEventStopBehavior] {
            return [
                .none,
                .sendEos,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .sendEos: return "SEND_EOS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupEventStopBehavior(rawValue: rawValue) ?? SmoothGroupEventStopBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Segmentation Mode
    public enum SmoothGroupSegmentationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case useInputSegmentation
        case useSegmentDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupSegmentationMode] {
            return [
                .useInputSegmentation,
                .useSegmentDuration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .useInputSegmentation: return "USE_INPUT_SEGMENTATION"
            case .useSegmentDuration: return "USE_SEGMENT_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupSegmentationMode(rawValue: rawValue) ?? SmoothGroupSegmentationMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Sparse Track Type
    public enum SmoothGroupSparseTrackType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case scte35
        case scte35WithoutSegmentation
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupSparseTrackType] {
            return [
                .none,
                .scte35,
                .scte35WithoutSegmentation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .scte35: return "SCTE_35"
            case .scte35WithoutSegmentation: return "SCTE_35_WITHOUT_SEGMENTATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupSparseTrackType(rawValue: rawValue) ?? SmoothGroupSparseTrackType.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Stream Manifest Behavior
    public enum SmoothGroupStreamManifestBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case doNotSend
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupStreamManifestBehavior] {
            return [
                .doNotSend,
                .send,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .doNotSend: return "DO_NOT_SEND"
            case .send: return "SEND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupStreamManifestBehavior(rawValue: rawValue) ?? SmoothGroupStreamManifestBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smooth Group Timestamp Offset Mode
    public enum SmoothGroupTimestampOffsetMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case useConfiguredOffset
        case useEventStartDate
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupTimestampOffsetMode] {
            return [
                .useConfiguredOffset,
                .useEventStartDate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .useConfiguredOffset: return "USE_CONFIGURED_OFFSET"
            case .useEventStartDate: return "USE_EVENT_START_DATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmoothGroupTimestampOffsetMode(rawValue: rawValue) ?? SmoothGroupTimestampOffsetMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Smpte2038 Data Preference
    public enum Smpte2038DataPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case prefer
        case sdkUnknown(Swift.String)

        public static var allCases: [Smpte2038DataPreference] {
            return [
                .ignore,
                .prefer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .prefer: return "PREFER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Smpte2038DataPreference(rawValue: rawValue) ?? Smpte2038DataPreference.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.SmpteTtDestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Smpte Tt Destination Settings
    public struct SmpteTtDestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.StandardHlsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioRenditionSets = "audioRenditionSets"
        case m3u8Settings = "m3u8Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioRenditionSets = self.audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let m3u8Settings = self.m3u8Settings {
            try encodeContainer.encode(m3u8Settings, forKey: .m3u8Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let m3u8SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8Settings.self, forKey: .m3u8Settings)
        m3u8Settings = m3u8SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Standard Hls Settings
    public struct StandardHlsSettings: Swift.Equatable {
        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public var audioRenditionSets: Swift.String?
        /// Settings information for the .m3u8 container
        /// This member is required.
        public var m3u8Settings: MediaLiveClientTypes.M3u8Settings?

        public init (
            audioRenditionSets: Swift.String? = nil,
            m3u8Settings: MediaLiveClientTypes.M3u8Settings? = nil
        )
        {
            self.audioRenditionSets = audioRenditionSets
            self.m3u8Settings = m3u8Settings
        }
    }

}

extension StartChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/start"
    }
}

/// Placeholder documentation for StartChannelRequest
public struct StartChannelInput: Swift.Equatable {
    /// A request to start a channel
    /// This member is required.
    public var channelId: Swift.String?

    public init (
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct StartChannelInputBody: Swift.Equatable {
}

extension StartChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StartChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartChannelOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.maintenance = output.maintenance
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.maintenance = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = nil
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for StartChannelResponse
public struct StartChannelOutputResponse: Swift.Equatable {
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init (
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct StartChannelOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let channelClass: MediaLiveClientTypes.ChannelClass?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let id: Swift.String?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceStatus?
    let name: Swift.String?
    let pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    let pipelinesRunningCount: Swift.Int?
    let roleArn: Swift.String?
    let state: MediaLiveClientTypes.ChannelState?
    let tags: [Swift.String:Swift.String]?
    let vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?
}

extension StartChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension StartInputDeviceMaintenanceWindowInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/startInputDeviceMaintenanceWindow"
    }
}

/// Placeholder documentation for StartInputDeviceMaintenanceWindowRequest
public struct StartInputDeviceMaintenanceWindowInput: Swift.Equatable {
    /// The unique ID of the input device to start a maintenance window for. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init (
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

struct StartInputDeviceMaintenanceWindowInputBody: Swift.Equatable {
}

extension StartInputDeviceMaintenanceWindowInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StartInputDeviceMaintenanceWindowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartInputDeviceMaintenanceWindowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartInputDeviceMaintenanceWindowOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInputDeviceMaintenanceWindowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for StartInputDeviceMaintenanceWindowResponse
public struct StartInputDeviceMaintenanceWindowOutputResponse: Swift.Equatable {

    public init () { }
}

extension StartMultiplexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/start"
    }
}

/// Placeholder documentation for StartMultiplexRequest
public struct StartMultiplexInput: Swift.Equatable {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init (
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct StartMultiplexInputBody: Swift.Equatable {
}

extension StartMultiplexInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StartMultiplexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMultiplexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartMultiplexOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMultiplexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = nil
            self.programCount = nil
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for StartMultiplexResponse
public struct StartMultiplexOutputResponse: Swift.Equatable {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct StartMultiplexOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let availabilityZones: [Swift.String]?
    let destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    let id: Swift.String?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let pipelinesRunningCount: Swift.Int?
    let programCount: Swift.Int?
    let state: MediaLiveClientTypes.MultiplexState?
    let tags: [Swift.String:Swift.String]?
}

extension StartMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MediaLiveClientTypes.StartTimecode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timecode = "timecode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timecode = self.timecode {
            try encodeContainer.encode(timecode, forKey: .timecode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timecodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timecode)
        timecode = timecodeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings to identify the start of the clip.
    public struct StartTimecode: Swift.Equatable {
        /// The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
        public var timecode: Swift.String?

        public init (
            timecode: Swift.String? = nil
        )
        {
            self.timecode = timecode
        }
    }

}

extension MediaLiveClientTypes.StaticImageActivateScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "duration"
        case fadeIn = "fadeIn"
        case fadeOut = "fadeOut"
        case height = "height"
        case image = "image"
        case imagex = "imageX"
        case imagey = "imageY"
        case layer = "layer"
        case opacity = "opacity"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let fadeIn = self.fadeIn {
            try encodeContainer.encode(fadeIn, forKey: .fadeIn)
        }
        if let fadeOut = self.fadeOut {
            try encodeContainer.encode(fadeOut, forKey: .fadeOut)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imagex = self.imagex {
            try encodeContainer.encode(imagex, forKey: .imagex)
        }
        if let imagey = self.imagey {
            try encodeContainer.encode(imagey, forKey: .imagey)
        }
        if let layer = self.layer {
            try encodeContainer.encode(layer, forKey: .layer)
        }
        if let opacity = self.opacity {
            try encodeContainer.encode(opacity, forKey: .opacity)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fadeInDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fadeIn)
        fadeIn = fadeInDecoded
        let fadeOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fadeOut)
        fadeOut = fadeOutDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let imageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .image)
        image = imageDecoded
        let imagexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .imagex)
        imagex = imagexDecoded
        let imageyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .imagey)
        imagey = imageyDecoded
        let layerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .layer)
        layer = layerDecoded
        let opacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .opacity)
        opacity = opacityDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for the action to activate a static image.
    public struct StaticImageActivateScheduleActionSettings: Swift.Equatable {
        /// The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
        public var duration: Swift.Int?
        /// The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
        public var fadeIn: Swift.Int?
        /// Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
        public var fadeOut: Swift.Int?
        /// The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
        public var height: Swift.Int?
        /// The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
        /// This member is required.
        public var image: MediaLiveClientTypes.InputLocation?
        /// Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
        public var imagex: Swift.Int?
        /// Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
        public var imagey: Swift.Int?
        /// The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
        public var layer: Swift.Int?
        /// Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
        public var opacity: Swift.Int?
        /// The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
        public var width: Swift.Int?

        public init (
            duration: Swift.Int? = nil,
            fadeIn: Swift.Int? = nil,
            fadeOut: Swift.Int? = nil,
            height: Swift.Int? = nil,
            image: MediaLiveClientTypes.InputLocation? = nil,
            imagex: Swift.Int? = nil,
            imagey: Swift.Int? = nil,
            layer: Swift.Int? = nil,
            opacity: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.duration = duration
            self.fadeIn = fadeIn
            self.fadeOut = fadeOut
            self.height = height
            self.image = image
            self.imagex = imagex
            self.imagey = imagey
            self.layer = layer
            self.opacity = opacity
            self.width = width
        }
    }

}

extension MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fadeOut = "fadeOut"
        case layer = "layer"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fadeOut = self.fadeOut {
            try encodeContainer.encode(fadeOut, forKey: .fadeOut)
        }
        if let layer = self.layer {
            try encodeContainer.encode(layer, forKey: .layer)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fadeOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fadeOut)
        fadeOut = fadeOutDecoded
        let layerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .layer)
        layer = layerDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings for the action to deactivate the image in a specific layer.
    public struct StaticImageDeactivateScheduleActionSettings: Swift.Equatable {
        /// The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
        public var fadeOut: Swift.Int?
        /// The image overlay layer to deactivate, 0 to 7. Default is 0.
        public var layer: Swift.Int?

        public init (
            fadeOut: Swift.Int? = nil,
            layer: Swift.Int? = nil
        )
        {
            self.fadeOut = fadeOut
            self.layer = layer
        }
    }

}

extension MediaLiveClientTypes.StaticKeySettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyProviderServer = "keyProviderServer"
        case staticKeyValue = "staticKeyValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyProviderServer = self.keyProviderServer {
            try encodeContainer.encode(keyProviderServer, forKey: .keyProviderServer)
        }
        if let staticKeyValue = self.staticKeyValue {
            try encodeContainer.encode(staticKeyValue, forKey: .staticKeyValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyProviderServerDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .keyProviderServer)
        keyProviderServer = keyProviderServerDecoded
        let staticKeyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticKeyValue)
        staticKeyValue = staticKeyValueDecoded
    }
}

extension MediaLiveClientTypes {
    /// Static Key Settings
    public struct StaticKeySettings: Swift.Equatable {
        /// The URL of the license server used for protecting content.
        public var keyProviderServer: MediaLiveClientTypes.InputLocation?
        /// Static key value as a 32 character hexadecimal string.
        /// This member is required.
        public var staticKeyValue: Swift.String?

        public init (
            keyProviderServer: MediaLiveClientTypes.InputLocation? = nil,
            staticKeyValue: Swift.String? = nil
        )
        {
            self.keyProviderServer = keyProviderServer
            self.staticKeyValue = staticKeyValue
        }
    }

}

extension StopChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/stop"
    }
}

/// Placeholder documentation for StopChannelRequest
public struct StopChannelInput: Swift.Equatable {
    /// A request to stop a running channel
    /// This member is required.
    public var channelId: Swift.String?

    public init (
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

struct StopChannelInputBody: Swift.Equatable {
}

extension StopChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StopChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopChannelOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.cdiInputSpecification = output.cdiInputSpecification
            self.channelClass = output.channelClass
            self.destinations = output.destinations
            self.egressEndpoints = output.egressEndpoints
            self.encoderSettings = output.encoderSettings
            self.id = output.id
            self.inputAttachments = output.inputAttachments
            self.inputSpecification = output.inputSpecification
            self.logLevel = output.logLevel
            self.maintenance = output.maintenance
            self.name = output.name
            self.pipelineDetails = output.pipelineDetails
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.roleArn = output.roleArn
            self.state = output.state
            self.tags = output.tags
            self.vpc = output.vpc
        } else {
            self.arn = nil
            self.cdiInputSpecification = nil
            self.channelClass = nil
            self.destinations = nil
            self.egressEndpoints = nil
            self.encoderSettings = nil
            self.id = nil
            self.inputAttachments = nil
            self.inputSpecification = nil
            self.logLevel = nil
            self.maintenance = nil
            self.name = nil
            self.pipelineDetails = nil
            self.pipelinesRunningCount = nil
            self.roleArn = nil
            self.state = nil
            self.tags = nil
            self.vpc = nil
        }
    }
}

/// Placeholder documentation for StopChannelResponse
public struct StopChannelOutputResponse: Swift.Equatable {
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init (
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

struct StopChannelOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let channelClass: MediaLiveClientTypes.ChannelClass?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let id: Swift.String?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceStatus?
    let name: Swift.String?
    let pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    let pipelinesRunningCount: Swift.Int?
    let roleArn: Swift.String?
    let state: MediaLiveClientTypes.ChannelState?
    let tags: [Swift.String:Swift.String]?
    let vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?
}

extension StopChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case encoderSettings = "encoderSettings"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelineDetails = "pipelineDetails"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelineDetailsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.PipelineDetail?].self, forKey: .pipelineDetails)
        var pipelineDetailsDecoded0:[MediaLiveClientTypes.PipelineDetail]? = nil
        if let pipelineDetailsContainer = pipelineDetailsContainer {
            pipelineDetailsDecoded0 = [MediaLiveClientTypes.PipelineDetail]()
            for structure0 in pipelineDetailsContainer {
                if let structure0 = structure0 {
                    pipelineDetailsDecoded0?.append(structure0)
                }
            }
        }
        pipelineDetails = pipelineDetailsDecoded0
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}

extension StopMultiplexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/stop"
    }
}

/// Placeholder documentation for StopMultiplexRequest
public struct StopMultiplexInput: Swift.Equatable {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init (
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

struct StopMultiplexInputBody: Swift.Equatable {
}

extension StopMultiplexInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StopMultiplexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopMultiplexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopMultiplexOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMultiplexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.availabilityZones = output.availabilityZones
            self.destinations = output.destinations
            self.id = output.id
            self.multiplexSettings = output.multiplexSettings
            self.name = output.name
            self.pipelinesRunningCount = output.pipelinesRunningCount
            self.programCount = output.programCount
            self.state = output.state
            self.tags = output.tags
        } else {
            self.arn = nil
            self.availabilityZones = nil
            self.destinations = nil
            self.id = nil
            self.multiplexSettings = nil
            self.name = nil
            self.pipelinesRunningCount = nil
            self.programCount = nil
            self.state = nil
            self.tags = nil
        }
    }
}

/// Placeholder documentation for StopMultiplexResponse
public struct StopMultiplexOutputResponse: Swift.Equatable {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

struct StopMultiplexOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let availabilityZones: [Swift.String]?
    let destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    let id: Swift.String?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let pipelinesRunningCount: Swift.Int?
    let programCount: Swift.Int?
    let state: MediaLiveClientTypes.MultiplexState?
    let tags: [Swift.String:Swift.String]?
}

extension StopMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MediaLiveClientTypes.StopTimecode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFrameClippingBehavior = "lastFrameClippingBehavior"
        case timecode = "timecode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastFrameClippingBehavior = self.lastFrameClippingBehavior {
            try encodeContainer.encode(lastFrameClippingBehavior.rawValue, forKey: .lastFrameClippingBehavior)
        }
        if let timecode = self.timecode {
            try encodeContainer.encode(timecode, forKey: .timecode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastFrameClippingBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LastFrameClippingBehavior.self, forKey: .lastFrameClippingBehavior)
        lastFrameClippingBehavior = lastFrameClippingBehaviorDecoded
        let timecodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timecode)
        timecode = timecodeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Settings to identify the end of the clip.
    public struct StopTimecode: Swift.Equatable {
        /// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
        public var lastFrameClippingBehavior: MediaLiveClientTypes.LastFrameClippingBehavior?
        /// The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
        public var timecode: Swift.String?

        public init (
            lastFrameClippingBehavior: MediaLiveClientTypes.LastFrameClippingBehavior? = nil,
            timecode: Swift.String? = nil
        )
        {
            self.lastFrameClippingBehavior = lastFrameClippingBehavior
            self.timecode = timecode
        }
    }

}

extension MediaLiveClientTypes.TeletextDestinationSettings: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension MediaLiveClientTypes {
    /// Teletext Destination Settings
    public struct TeletextDestinationSettings: Swift.Equatable {

        public init () { }
    }

}

extension MediaLiveClientTypes.TeletextSourceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputRectangle = "outputRectangle"
        case pageNumber = "pageNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputRectangle = self.outputRectangle {
            try encodeContainer.encode(outputRectangle, forKey: .outputRectangle)
        }
        if let pageNumber = self.pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputRectangleDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CaptionRectangle.self, forKey: .outputRectangle)
        outputRectangle = outputRectangleDecoded
        let pageNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
    }
}

extension MediaLiveClientTypes {
    /// Teletext Source Settings
    public struct TeletextSourceSettings: Swift.Equatable {
        /// Optionally defines a region where TTML style captions will be displayed
        public var outputRectangle: MediaLiveClientTypes.CaptionRectangle?
        /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
        public var pageNumber: Swift.String?

        public init (
            outputRectangle: MediaLiveClientTypes.CaptionRectangle? = nil,
            pageNumber: Swift.String? = nil
        )
        {
            self.outputRectangle = outputRectangle
            self.pageNumber = pageNumber
        }
    }

}

extension MediaLiveClientTypes {
    /// Temporal Filter Post Filter Sharpening
    public enum TemporalFilterPostFilterSharpening: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [TemporalFilterPostFilterSharpening] {
            return [
                .auto,
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemporalFilterPostFilterSharpening(rawValue: rawValue) ?? TemporalFilterPostFilterSharpening.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.TemporalFilterSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case postFilterSharpening = "postFilterSharpening"
        case strength = "strength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let postFilterSharpening = self.postFilterSharpening {
            try encodeContainer.encode(postFilterSharpening.rawValue, forKey: .postFilterSharpening)
        }
        if let strength = self.strength {
            try encodeContainer.encode(strength.rawValue, forKey: .strength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let postFilterSharpeningDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TemporalFilterPostFilterSharpening.self, forKey: .postFilterSharpening)
        postFilterSharpening = postFilterSharpeningDecoded
        let strengthDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TemporalFilterStrength.self, forKey: .strength)
        strength = strengthDecoded
    }
}

extension MediaLiveClientTypes {
    /// Temporal Filter Settings
    public struct TemporalFilterSettings: Swift.Equatable {
        /// If you enable this filter, the results are the following:
        ///
        /// * If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source.
        ///
        /// * If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
        public var postFilterSharpening: MediaLiveClientTypes.TemporalFilterPostFilterSharpening?
        /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
        public var strength: MediaLiveClientTypes.TemporalFilterStrength?

        public init (
            postFilterSharpening: MediaLiveClientTypes.TemporalFilterPostFilterSharpening? = nil,
            strength: MediaLiveClientTypes.TemporalFilterStrength? = nil
        )
        {
            self.postFilterSharpening = postFilterSharpening
            self.strength = strength
        }
    }

}

extension MediaLiveClientTypes {
    /// Temporal Filter Strength
    public enum TemporalFilterStrength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case strength1
        case strength10
        case strength11
        case strength12
        case strength13
        case strength14
        case strength15
        case strength16
        case strength2
        case strength3
        case strength4
        case strength5
        case strength6
        case strength7
        case strength8
        case strength9
        case sdkUnknown(Swift.String)

        public static var allCases: [TemporalFilterStrength] {
            return [
                .auto,
                .strength1,
                .strength10,
                .strength11,
                .strength12,
                .strength13,
                .strength14,
                .strength15,
                .strength16,
                .strength2,
                .strength3,
                .strength4,
                .strength5,
                .strength6,
                .strength7,
                .strength8,
                .strength9,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .strength1: return "STRENGTH_1"
            case .strength10: return "STRENGTH_10"
            case .strength11: return "STRENGTH_11"
            case .strength12: return "STRENGTH_12"
            case .strength13: return "STRENGTH_13"
            case .strength14: return "STRENGTH_14"
            case .strength15: return "STRENGTH_15"
            case .strength16: return "STRENGTH_16"
            case .strength2: return "STRENGTH_2"
            case .strength3: return "STRENGTH_3"
            case .strength4: return "STRENGTH_4"
            case .strength5: return "STRENGTH_5"
            case .strength6: return "STRENGTH_6"
            case .strength7: return "STRENGTH_7"
            case .strength8: return "STRENGTH_8"
            case .strength9: return "STRENGTH_9"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemporalFilterStrength(rawValue: rawValue) ?? TemporalFilterStrength.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Timecode Burnin Font Size
    public enum TimecodeBurninFontSize: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case extraSmall10
        case large48
        case medium32
        case small16
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeBurninFontSize] {
            return [
                .extraSmall10,
                .large48,
                .medium32,
                .small16,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .extraSmall10: return "EXTRA_SMALL_10"
            case .large48: return "LARGE_48"
            case .medium32: return "MEDIUM_32"
            case .small16: return "SMALL_16"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimecodeBurninFontSize(rawValue: rawValue) ?? TimecodeBurninFontSize.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Timecode Burnin Position
    public enum TimecodeBurninPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bottomCenter
        case bottomLeft
        case bottomRight
        case middleCenter
        case middleLeft
        case middleRight
        case topCenter
        case topLeft
        case topRight
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeBurninPosition] {
            return [
                .bottomCenter,
                .bottomLeft,
                .bottomRight,
                .middleCenter,
                .middleLeft,
                .middleRight,
                .topCenter,
                .topLeft,
                .topRight,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bottomCenter: return "BOTTOM_CENTER"
            case .bottomLeft: return "BOTTOM_LEFT"
            case .bottomRight: return "BOTTOM_RIGHT"
            case .middleCenter: return "MIDDLE_CENTER"
            case .middleLeft: return "MIDDLE_LEFT"
            case .middleRight: return "MIDDLE_RIGHT"
            case .topCenter: return "TOP_CENTER"
            case .topLeft: return "TOP_LEFT"
            case .topRight: return "TOP_RIGHT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimecodeBurninPosition(rawValue: rawValue) ?? TimecodeBurninPosition.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.TimecodeBurninSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fontSize = "fontSize"
        case position = "position"
        case `prefix` = "prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fontSize = self.fontSize {
            try encodeContainer.encode(fontSize.rawValue, forKey: .fontSize)
        }
        if let position = self.position {
            try encodeContainer.encode(position.rawValue, forKey: .position)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fontSizeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeBurninFontSize.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let positionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeBurninPosition.self, forKey: .position)
        position = positionDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension MediaLiveClientTypes {
    /// Timecode Burnin Settings
    public struct TimecodeBurninSettings: Swift.Equatable {
        /// Choose a timecode burn-in font size
        /// This member is required.
        public var fontSize: MediaLiveClientTypes.TimecodeBurninFontSize?
        /// Choose a timecode burn-in output position
        /// This member is required.
        public var position: MediaLiveClientTypes.TimecodeBurninPosition?
        /// Create a timecode burn-in prefix (optional)
        public var `prefix`: Swift.String?

        public init (
            fontSize: MediaLiveClientTypes.TimecodeBurninFontSize? = nil,
            position: MediaLiveClientTypes.TimecodeBurninPosition? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.fontSize = fontSize
            self.position = position
            self.`prefix` = `prefix`
        }
    }

}

extension MediaLiveClientTypes.TimecodeConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case source = "source"
        case syncThreshold = "syncThreshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = self.source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
        if let syncThreshold = self.syncThreshold {
            try encodeContainer.encode(syncThreshold, forKey: .syncThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TimecodeConfigSource.self, forKey: .source)
        source = sourceDecoded
        let syncThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .syncThreshold)
        syncThreshold = syncThresholdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Timecode Config
    public struct TimecodeConfig: Swift.Equatable {
        /// Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
        /// This member is required.
        public var source: MediaLiveClientTypes.TimecodeConfigSource?
        /// Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        public var syncThreshold: Swift.Int?

        public init (
            source: MediaLiveClientTypes.TimecodeConfigSource? = nil,
            syncThreshold: Swift.Int? = nil
        )
        {
            self.source = source
            self.syncThreshold = syncThreshold
        }
    }

}

extension MediaLiveClientTypes {
    /// Timecode Config Source
    public enum TimecodeConfigSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case embedded
        case systemclock
        case zerobased
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeConfigSource] {
            return [
                .embedded,
                .systemclock,
                .zerobased,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .embedded: return "EMBEDDED"
            case .systemclock: return "SYSTEMCLOCK"
            case .zerobased: return "ZEROBASED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimecodeConfigSource(rawValue: rawValue) ?? TimecodeConfigSource.sdkUnknown(rawValue)
        }
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for TooManyRequestsException
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Placeholder documentation for __string
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TransferInputDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetCustomerId = "targetCustomerId"
        case targetRegion = "targetRegion"
        case transferMessage = "transferMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetCustomerId = self.targetCustomerId {
            try encodeContainer.encode(targetCustomerId, forKey: .targetCustomerId)
        }
        if let targetRegion = self.targetRegion {
            try encodeContainer.encode(targetRegion, forKey: .targetRegion)
        }
        if let transferMessage = self.transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
    }
}

extension TransferInputDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/transfer"
    }
}

/// A request to transfer an input device.
public struct TransferInputDeviceInput: Swift.Equatable {
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?
    /// The AWS account ID (12 digits) for the recipient of the device transfer.
    public var targetCustomerId: Swift.String?
    /// The target AWS region to transfer the device.
    public var targetRegion: Swift.String?
    /// An optional message for the recipient. Maximum 280 characters.
    public var transferMessage: Swift.String?

    public init (
        inputDeviceId: Swift.String? = nil,
        targetCustomerId: Swift.String? = nil,
        targetRegion: Swift.String? = nil,
        transferMessage: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
        self.targetCustomerId = targetCustomerId
        self.targetRegion = targetRegion
        self.transferMessage = transferMessage
    }
}

struct TransferInputDeviceInputBody: Swift.Equatable {
    let targetCustomerId: Swift.String?
    let targetRegion: Swift.String?
    let transferMessage: Swift.String?
}

extension TransferInputDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetCustomerId = "targetCustomerId"
        case targetRegion = "targetRegion"
        case transferMessage = "transferMessage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetCustomerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetCustomerId)
        targetCustomerId = targetCustomerIdDecoded
        let targetRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetRegion)
        targetRegion = targetRegionDecoded
        let transferMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
    }
}

extension TransferInputDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransferInputDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TransferInputDeviceOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransferInputDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Placeholder documentation for TransferInputDeviceResponse
public struct TransferInputDeviceOutputResponse: Swift.Equatable {

    public init () { }
}

extension MediaLiveClientTypes.TransferringInputDeviceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
        case message = "message"
        case targetCustomerId = "targetCustomerId"
        case transferType = "transferType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let targetCustomerId = self.targetCustomerId {
            try encodeContainer.encode(targetCustomerId, forKey: .targetCustomerId)
        }
        if let transferType = self.transferType {
            try encodeContainer.encode(transferType.rawValue, forKey: .transferType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let targetCustomerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetCustomerId)
        targetCustomerId = targetCustomerIdDecoded
        let transferTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceTransferType.self, forKey: .transferType)
        transferType = transferTypeDecoded
    }
}

extension MediaLiveClientTypes {
    /// Details about the input device that is being transferred.
    public struct TransferringInputDeviceSummary: Swift.Equatable {
        /// The unique ID of the input device.
        public var id: Swift.String?
        /// The optional message that the sender has attached to the transfer.
        public var message: Swift.String?
        /// The AWS account ID for the recipient of the input device transfer.
        public var targetCustomerId: Swift.String?
        /// The type (direction) of the input device transfer.
        public var transferType: MediaLiveClientTypes.InputDeviceTransferType?

        public init (
            id: Swift.String? = nil,
            message: Swift.String? = nil,
            targetCustomerId: Swift.String? = nil,
            transferType: MediaLiveClientTypes.InputDeviceTransferType? = nil
        )
        {
            self.id = id
            self.message = message
            self.targetCustomerId = targetCustomerId
            self.transferType = transferType
        }
    }

}

extension MediaLiveClientTypes.TtmlDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case styleControl = "styleControl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let styleControl = self.styleControl {
            try encodeContainer.encode(styleControl.rawValue, forKey: .styleControl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let styleControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.TtmlDestinationStyleControl.self, forKey: .styleControl)
        styleControl = styleControlDecoded
    }
}

extension MediaLiveClientTypes {
    /// Ttml Destination Settings
    public struct TtmlDestinationSettings: Swift.Equatable {
        /// This field is not currently supported and will not affect the output styling. Leave the default value.
        public var styleControl: MediaLiveClientTypes.TtmlDestinationStyleControl?

        public init (
            styleControl: MediaLiveClientTypes.TtmlDestinationStyleControl? = nil
        )
        {
            self.styleControl = styleControl
        }
    }

}

extension MediaLiveClientTypes {
    /// Ttml Destination Style Control
    public enum TtmlDestinationStyleControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case passthrough
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [TtmlDestinationStyleControl] {
            return [
                .passthrough,
                .useConfigured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TtmlDestinationStyleControl(rawValue: rawValue) ?? TtmlDestinationStyleControl.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.UdpContainerSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case m2tsSettings = "m2tsSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let m2tsSettings = self.m2tsSettings {
            try encodeContainer.encode(m2tsSettings, forKey: .m2tsSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let m2tsSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M2tsSettings.self, forKey: .m2tsSettings)
        m2tsSettings = m2tsSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Udp Container Settings
    public struct UdpContainerSettings: Swift.Equatable {
        /// M2ts Settings
        public var m2tsSettings: MediaLiveClientTypes.M2tsSettings?

        public init (
            m2tsSettings: MediaLiveClientTypes.M2tsSettings? = nil
        )
        {
            self.m2tsSettings = m2tsSettings
        }
    }

}

extension MediaLiveClientTypes.UdpGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputLossAction = "inputLossAction"
        case timedMetadataId3Frame = "timedMetadataId3Frame"
        case timedMetadataId3Period = "timedMetadataId3Period"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputLossAction = self.inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let timedMetadataId3Frame = self.timedMetadataId3Frame {
            try encodeContainer.encode(timedMetadataId3Frame.rawValue, forKey: .timedMetadataId3Frame)
        }
        if let timedMetadataId3Period = self.timedMetadataId3Period {
            try encodeContainer.encode(timedMetadataId3Period, forKey: .timedMetadataId3Period)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputLossActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossActionForUdpOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let timedMetadataId3FrameDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.UdpTimedMetadataId3Frame.self, forKey: .timedMetadataId3Frame)
        timedMetadataId3Frame = timedMetadataId3FrameDecoded
        let timedMetadataId3PeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedMetadataId3Period)
        timedMetadataId3Period = timedMetadataId3PeriodDecoded
    }
}

extension MediaLiveClientTypes {
    /// Udp Group Settings
    public struct UdpGroupSettings: Swift.Equatable {
        /// Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForUdpOut?
        /// Indicates ID3 frame that has the timecode.
        public var timedMetadataId3Frame: MediaLiveClientTypes.UdpTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public var timedMetadataId3Period: Swift.Int?

        public init (
            inputLossAction: MediaLiveClientTypes.InputLossActionForUdpOut? = nil,
            timedMetadataId3Frame: MediaLiveClientTypes.UdpTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil
        )
        {
            self.inputLossAction = inputLossAction
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
        }
    }

}

extension MediaLiveClientTypes.UdpOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bufferMsec = "bufferMsec"
        case containerSettings = "containerSettings"
        case destination = "destination"
        case fecOutputSettings = "fecOutputSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferMsec = self.bufferMsec {
            try encodeContainer.encode(bufferMsec, forKey: .bufferMsec)
        }
        if let containerSettings = self.containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let fecOutputSettings = self.fecOutputSettings {
            try encodeContainer.encode(fecOutputSettings, forKey: .fecOutputSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bufferMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufferMsec)
        bufferMsec = bufferMsecDecoded
        let containerSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.UdpContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let fecOutputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FecOutputSettings.self, forKey: .fecOutputSettings)
        fecOutputSettings = fecOutputSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Udp Output Settings
    public struct UdpOutputSettings: Swift.Equatable {
        /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
        public var bufferMsec: Swift.Int?
        /// Udp Container Settings
        /// This member is required.
        public var containerSettings: MediaLiveClientTypes.UdpContainerSettings?
        /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
        public var fecOutputSettings: MediaLiveClientTypes.FecOutputSettings?

        public init (
            bufferMsec: Swift.Int? = nil,
            containerSettings: MediaLiveClientTypes.UdpContainerSettings? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            fecOutputSettings: MediaLiveClientTypes.FecOutputSettings? = nil
        )
        {
            self.bufferMsec = bufferMsec
            self.containerSettings = containerSettings
            self.destination = destination
            self.fecOutputSettings = fecOutputSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Udp Timed Metadata Id3 Frame
    public enum UdpTimedMetadataId3Frame: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case priv
        case tdrl
        case sdkUnknown(Swift.String)

        public static var allCases: [UdpTimedMetadataId3Frame] {
            return [
                .none,
                .priv,
                .tdrl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .priv: return "PRIV"
            case .tdrl: return "TDRL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UdpTimedMetadataId3Frame(rawValue: rawValue) ?? UdpTimedMetadataId3Frame.sdkUnknown(rawValue)
        }
    }
}

extension UnprocessableEntityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnprocessableEntityExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.validationErrors = output.validationErrors
        } else {
            self.message = nil
            self.validationErrors = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Placeholder documentation for UnprocessableEntityException
public struct UnprocessableEntityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The error message.
    public var message: Swift.String?
    /// A collection of validation error responses.
    public var validationErrors: [MediaLiveClientTypes.ValidationError]?

    public init (
        message: Swift.String? = nil,
        validationErrors: [MediaLiveClientTypes.ValidationError]? = nil
    )
    {
        self.message = message
        self.validationErrors = validationErrors
    }
}

struct UnprocessableEntityExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let validationErrors: [MediaLiveClientTypes.ValidationError]?
}

extension UnprocessableEntityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
        case validationErrors = "validationErrors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let validationErrorsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ValidationError?].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[MediaLiveClientTypes.ValidationError]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [MediaLiveClientTypes.ValidationError]()
            for structure0 in validationErrorsContainer {
                if let structure0 = structure0 {
                    validationErrorsDecoded0?.append(structure0)
                }
            }
        }
        validationErrors = validationErrorsDecoded0
    }
}

extension UpdateChannelClassInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelClass = "channelClass"
        case destinations = "destinations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for outputdestination0 in destinations {
                try destinationsContainer.encode(outputdestination0)
            }
        }
    }
}

extension UpdateChannelClassInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/channelClass"
    }
}

/// Channel class that the channel should be updated to.
public struct UpdateChannelClassInput: Swift.Equatable {
    /// The channel class that you wish to update this channel to use.
    /// This member is required.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// Channel Id of the channel whose class should be updated.
    /// This member is required.
    public var channelId: Swift.String?
    /// A list of output destinations for this channel.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?

    public init (
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        channelId: Swift.String? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil
    )
    {
        self.channelClass = channelClass
        self.channelId = channelId
        self.destinations = destinations
    }
}

struct UpdateChannelClassInputBody: Swift.Equatable {
    let channelClass: MediaLiveClientTypes.ChannelClass?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
}

extension UpdateChannelClassInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelClass = "channelClass"
        case destinations = "destinations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
    }
}

extension UpdateChannelClassOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateChannelClassOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateChannelClassOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateChannelClassOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateChannelClassOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channel = output.channel
        } else {
            self.channel = nil
        }
    }
}

/// Placeholder documentation for UpdateChannelClassResponse
public struct UpdateChannelClassOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Channel
    public var channel: MediaLiveClientTypes.Channel?

    public init (
        channel: MediaLiveClientTypes.Channel? = nil
    )
    {
        self.channel = channel
    }
}

struct UpdateChannelClassOutputResponseBody: Swift.Equatable {
    let channel: MediaLiveClientTypes.Channel?
}

extension UpdateChannelClassOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "channel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

extension UpdateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case roleArn = "roleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdiInputSpecification = self.cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for outputdestination0 in destinations {
                try destinationsContainer.encode(outputdestination0)
            }
        }
        if let encoderSettings = self.encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for inputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(inputattachment0)
            }
        }
        if let inputSpecification = self.inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let maintenance = self.maintenance {
            try encodeContainer.encode(maintenance, forKey: .maintenance)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelId = channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())"
    }
}

/// A request to update a channel.
public struct UpdateChannelInput: Swift.Equatable {
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// channel ID
    /// This member is required.
    public var channelId: Swift.String?
    /// A list of output destinations for this channel.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The encoder settings for this channel.
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// Placeholder documentation for __listOfInputAttachment
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level to write to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceUpdateSettings?
    /// The name of the channel.
    public var name: Swift.String?
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
    public var roleArn: Swift.String?

    public init (
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelId: Swift.String? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceUpdateSettings? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.cdiInputSpecification = cdiInputSpecification
        self.channelId = channelId
        self.destinations = destinations
        self.encoderSettings = encoderSettings
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.roleArn = roleArn
    }
}

struct UpdateChannelInputBody: Swift.Equatable {
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceUpdateSettings?
    let name: Swift.String?
    let roleArn: Swift.String?
}

extension UpdateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case roleArn = "roleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceUpdateSettings.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateChannelOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channel = output.channel
        } else {
            self.channel = nil
        }
    }
}

/// Placeholder documentation for UpdateChannelResponse
public struct UpdateChannelOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Channel
    public var channel: MediaLiveClientTypes.Channel?

    public init (
        channel: MediaLiveClientTypes.Channel? = nil
    )
    {
        self.channel = channel
    }
}

struct UpdateChannelOutputResponseBody: Swift.Equatable {
    let channel: MediaLiveClientTypes.Channel?
}

extension UpdateChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "channel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

extension UpdateInputDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hdDeviceSettings = "hdDeviceSettings"
        case name = "name"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hdDeviceSettings = self.hdDeviceSettings {
            try encodeContainer.encode(hdDeviceSettings, forKey: .hdDeviceSettings)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let uhdDeviceSettings = self.uhdDeviceSettings {
            try encodeContainer.encode(uhdDeviceSettings, forKey: .uhdDeviceSettings)
        }
    }
}

extension UpdateInputDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputDeviceId = inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())"
    }
}

/// A request to update an input device.
public struct UpdateInputDeviceInput: Swift.Equatable {
    /// The settings that you want to apply to the HD input device.
    public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings?
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?
    /// The name that you assigned to this input device (not the unique ID).
    public var name: Swift.String?
    /// The settings that you want to apply to the UHD input device.
    public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings?

    public init (
        hdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings? = nil,
        inputDeviceId: Swift.String? = nil,
        name: Swift.String? = nil,
        uhdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings? = nil
    )
    {
        self.hdDeviceSettings = hdDeviceSettings
        self.inputDeviceId = inputDeviceId
        self.name = name
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

struct UpdateInputDeviceInputBody: Swift.Equatable {
    let hdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings?
    let name: Swift.String?
    let uhdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings?
}

extension UpdateInputDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hdDeviceSettings = "hdDeviceSettings"
        case name = "name"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConfigurableSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConfigurableSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension UpdateInputDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInputDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateInputDeviceOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInputDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateInputDeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.connectionState = output.connectionState
            self.deviceSettingsSyncState = output.deviceSettingsSyncState
            self.deviceUpdateStatus = output.deviceUpdateStatus
            self.hdDeviceSettings = output.hdDeviceSettings
            self.id = output.id
            self.macAddress = output.macAddress
            self.name = output.name
            self.networkSettings = output.networkSettings
            self.serialNumber = output.serialNumber
            self.type = output.type
            self.uhdDeviceSettings = output.uhdDeviceSettings
        } else {
            self.arn = nil
            self.connectionState = nil
            self.deviceSettingsSyncState = nil
            self.deviceUpdateStatus = nil
            self.hdDeviceSettings = nil
            self.id = nil
            self.macAddress = nil
            self.name = nil
            self.networkSettings = nil
            self.serialNumber = nil
            self.type = nil
            self.uhdDeviceSettings = nil
        }
    }
}

/// Placeholder documentation for UpdateInputDeviceResponse
public struct UpdateInputDeviceOutputResponse: Swift.Equatable {
    /// The unique ARN of the input device.
    public var arn: Swift.String?
    /// The state of the connection between the input device and AWS.
    public var connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public var deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
    /// The status of software on the input device.
    public var deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
    /// The unique ID of the input device.
    public var id: Swift.String?
    /// The network MAC address of the input device.
    public var macAddress: Swift.String?
    /// A name that you specify for the input device.
    public var name: Swift.String?
    /// The network settings for the input device.
    public var networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
    /// The unique serial number of the input device.
    public var serialNumber: Swift.String?
    /// The type of the input device.
    public var type: MediaLiveClientTypes.InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?

    public init (
        arn: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus? = nil,
        hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings? = nil,
        id: Swift.String? = nil,
        macAddress: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings? = nil,
        serialNumber: Swift.String? = nil,
        type: MediaLiveClientTypes.InputDeviceType? = nil,
        uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.name = name
        self.networkSettings = networkSettings
        self.serialNumber = serialNumber
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

struct UpdateInputDeviceOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
    let deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
    let deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
    let hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
    let id: Swift.String?
    let macAddress: Swift.String?
    let name: Swift.String?
    let networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
    let serialNumber: Swift.String?
    let type: MediaLiveClientTypes.InputDeviceType?
    let uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?
}

extension UpdateInputDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}

extension UpdateInputInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case sources = "sources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for inputdestinationrequest0 in destinations {
                try destinationsContainer.encode(inputdestinationrequest0)
            }
        }
        if let inputDevices = inputDevices {
            var inputDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDevices)
            for inputdevicerequest0 in inputDevices {
                try inputDevicesContainer.encode(inputdevicerequest0)
            }
        }
        if let inputSecurityGroups = inputSecurityGroups {
            var inputSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputSecurityGroups)
            for __string0 in inputSecurityGroups {
                try inputSecurityGroupsContainer.encode(__string0)
            }
        }
        if let mediaConnectFlows = mediaConnectFlows {
            var mediaConnectFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConnectFlows)
            for mediaconnectflowrequest0 in mediaConnectFlows {
                try mediaConnectFlowsContainer.encode(mediaconnectflowrequest0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for inputsourcerequest0 in sources {
                try sourcesContainer.encode(inputsourcerequest0)
            }
        }
    }
}

extension UpdateInputInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputId = inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())"
    }
}

/// A request to update an input.
public struct UpdateInputInput: Swift.Equatable {
    /// Destination settings for PUSH type inputs.
    public var destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    /// Settings for the devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceRequest]?
    /// Unique ID of the input.
    /// This member is required.
    public var inputId: Swift.String?
    /// A list of security groups referenced by IDs to attach to the input.
    public var inputSecurityGroups: [Swift.String]?
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    /// Name of the input.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    public var sources: [MediaLiveClientTypes.InputSourceRequest]?

    public init (
        destinations: [MediaLiveClientTypes.InputDestinationRequest]? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceRequest]? = nil,
        inputId: Swift.String? = nil,
        inputSecurityGroups: [Swift.String]? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sources: [MediaLiveClientTypes.InputSourceRequest]? = nil
    )
    {
        self.destinations = destinations
        self.inputDevices = inputDevices
        self.inputId = inputId
        self.inputSecurityGroups = inputSecurityGroups
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.sources = sources
    }
}

struct UpdateInputInputBody: Swift.Equatable {
    let destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    let inputDevices: [MediaLiveClientTypes.InputDeviceRequest]?
    let inputSecurityGroups: [Swift.String]?
    let mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    let name: Swift.String?
    let roleArn: Swift.String?
    let sources: [MediaLiveClientTypes.InputSourceRequest]?
}

extension UpdateInputInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case sources = "sources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDestinationRequest?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.InputDestinationRequest]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.InputDestinationRequest]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceRequest?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceRequest]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceRequest]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[Swift.String]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in inputSecurityGroupsContainer {
                if let string0 = string0 {
                    inputSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaConnectFlowRequest?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaLiveClientTypes.MediaConnectFlowRequest]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaLiveClientTypes.MediaConnectFlowRequest]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSourceRequest?].self, forKey: .sources)
        var sourcesDecoded0:[MediaLiveClientTypes.InputSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaLiveClientTypes.InputSourceRequest]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
    }
}

extension UpdateInputOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInputOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateInputOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInputOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateInputOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.input = output.input
        } else {
            self.input = nil
        }
    }
}

/// Placeholder documentation for UpdateInputResponse
public struct UpdateInputOutputResponse: Swift.Equatable {
    /// Placeholder documentation for Input
    public var input: MediaLiveClientTypes.Input?

    public init (
        input: MediaLiveClientTypes.Input? = nil
    )
    {
        self.input = input
    }
}

struct UpdateInputOutputResponseBody: Swift.Equatable {
    let input: MediaLiveClientTypes.Input?
}

extension UpdateInputOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "input"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Input.self, forKey: .input)
        input = inputDecoded
    }
}

extension UpdateInputSecurityGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let whitelistRules = whitelistRules {
            var whitelistRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .whitelistRules)
            for inputwhitelistrulecidr0 in whitelistRules {
                try whitelistRulesContainer.encode(inputwhitelistrulecidr0)
            }
        }
    }
}

extension UpdateInputSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let inputSecurityGroupId = inputSecurityGroupId else {
            return nil
        }
        return "/prod/inputSecurityGroups/\(inputSecurityGroupId.urlPercentEncoding())"
    }
}

/// The request to update some combination of the Input Security Group name and the IPv4 CIDRs the Input Security Group should allow.
public struct UpdateInputSecurityGroupInput: Swift.Equatable {
    /// The id of the Input Security Group to update.
    /// This member is required.
    public var inputSecurityGroupId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// List of IPv4 CIDR addresses to whitelist
    public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]?

    public init (
        inputSecurityGroupId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

struct UpdateInputSecurityGroupInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
    let whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]?
}

extension UpdateInputSecurityGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputWhitelistRuleCidr?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[MediaLiveClientTypes.InputWhitelistRuleCidr]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [MediaLiveClientTypes.InputWhitelistRuleCidr]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}

extension UpdateInputSecurityGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInputSecurityGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateInputSecurityGroupOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInputSecurityGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateInputSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.securityGroup = output.securityGroup
        } else {
            self.securityGroup = nil
        }
    }
}

/// Placeholder documentation for UpdateInputSecurityGroupResponse
public struct UpdateInputSecurityGroupOutputResponse: Swift.Equatable {
    /// An Input Security Group
    public var securityGroup: MediaLiveClientTypes.InputSecurityGroup?

    public init (
        securityGroup: MediaLiveClientTypes.InputSecurityGroup? = nil
    )
    {
        self.securityGroup = securityGroup
    }
}

struct UpdateInputSecurityGroupOutputResponseBody: Swift.Equatable {
    let securityGroup: MediaLiveClientTypes.InputSecurityGroup?
}

extension UpdateInputSecurityGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroup = "securityGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSecurityGroup.self, forKey: .securityGroup)
        securityGroup = securityGroupDecoded
    }
}

extension UpdateMultiplexInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexSettings = "multiplexSettings"
        case name = "name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexSettings = self.multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateMultiplexInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())"
    }
}

/// A request to update a multiplex.
public struct UpdateMultiplexInput: Swift.Equatable {
    /// ID of the multiplex to update.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The new settings for a multiplex.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// Name of the multiplex.
    public var name: Swift.String?

    public init (
        multiplexId: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexSettings = multiplexSettings
        self.name = name
    }
}

struct UpdateMultiplexInputBody: Swift.Equatable {
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
}

extension UpdateMultiplexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexSettings = "multiplexSettings"
        case name = "name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateMultiplexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMultiplexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateMultiplexOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMultiplexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateMultiplexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.multiplex = output.multiplex
        } else {
            self.multiplex = nil
        }
    }
}

/// Placeholder documentation for UpdateMultiplexResponse
public struct UpdateMultiplexOutputResponse: Swift.Equatable {
    /// The updated multiplex.
    public var multiplex: MediaLiveClientTypes.Multiplex?

    public init (
        multiplex: MediaLiveClientTypes.Multiplex? = nil
    )
    {
        self.multiplex = multiplex
    }
}

struct UpdateMultiplexOutputResponseBody: Swift.Equatable {
    let multiplex: MediaLiveClientTypes.Multiplex?
}

extension UpdateMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplex = "multiplex"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Multiplex.self, forKey: .multiplex)
        multiplex = multiplexDecoded
    }
}

extension UpdateMultiplexProgramInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiplexProgramSettings = self.multiplexProgramSettings {
            try encodeContainer.encode(multiplexProgramSettings, forKey: .multiplexProgramSettings)
        }
    }
}

extension UpdateMultiplexProgramInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let multiplexId = multiplexId else {
            return nil
        }
        guard let programName = programName else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs/\(programName.urlPercentEncoding())"
    }
}

/// A request to update a program in a multiplex.
public struct UpdateMultiplexProgramInput: Swift.Equatable {
    /// The ID of the multiplex of the program to update.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The new settings for a multiplex program.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// The name of the program to update.
    /// This member is required.
    public var programName: Swift.String?

    public init (
        multiplexId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        programName: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.programName = programName
    }
}

struct UpdateMultiplexProgramInputBody: Swift.Equatable {
    let multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
}

extension UpdateMultiplexProgramInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexProgramSettings = "multiplexProgramSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramSettings.self, forKey: .multiplexProgramSettings)
        multiplexProgramSettings = multiplexProgramSettingsDecoded
    }
}

extension UpdateMultiplexProgramOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMultiplexProgramOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnprocessableEntityException" : self = .unprocessableEntityException(try UnprocessableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateMultiplexProgramOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case unprocessableEntityException(UnprocessableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMultiplexProgramOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateMultiplexProgramOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.multiplexProgram = output.multiplexProgram
        } else {
            self.multiplexProgram = nil
        }
    }
}

/// Placeholder documentation for UpdateMultiplexProgramResponse
public struct UpdateMultiplexProgramOutputResponse: Swift.Equatable {
    /// The updated multiplex program.
    public var multiplexProgram: MediaLiveClientTypes.MultiplexProgram?

    public init (
        multiplexProgram: MediaLiveClientTypes.MultiplexProgram? = nil
    )
    {
        self.multiplexProgram = multiplexProgram
    }
}

struct UpdateMultiplexProgramOutputResponseBody: Swift.Equatable {
    let multiplexProgram: MediaLiveClientTypes.MultiplexProgram?
}

extension UpdateMultiplexProgramOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiplexProgram = "multiplexProgram"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiplexProgramDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgram.self, forKey: .multiplexProgram)
        multiplexProgram = multiplexProgramDecoded
    }
}

extension UpdateReservationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "name"
        case renewalSettings = "renewalSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let renewalSettings = self.renewalSettings {
            try encodeContainer.encode(renewalSettings, forKey: .renewalSettings)
        }
    }
}

extension UpdateReservationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let reservationId = reservationId else {
            return nil
        }
        return "/prod/reservations/\(reservationId.urlPercentEncoding())"
    }
}

/// Request to update a reservation
public struct UpdateReservationInput: Swift.Equatable {
    /// Name of the reservation
    public var name: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique reservation ID, e.g. '1234567'
    /// This member is required.
    public var reservationId: Swift.String?

    public init (
        name: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        reservationId: Swift.String? = nil
    )
    {
        self.name = name
        self.renewalSettings = renewalSettings
        self.reservationId = reservationId
    }
}

struct UpdateReservationInputBody: Swift.Equatable {
    let name: Swift.String?
    let renewalSettings: MediaLiveClientTypes.RenewalSettings?
}

extension UpdateReservationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "name"
        case renewalSettings = "renewalSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let renewalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RenewalSettings.self, forKey: .renewalSettings)
        renewalSettings = renewalSettingsDecoded
    }
}

extension UpdateReservationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateReservationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadGatewayException" : self = .badGatewayException(try BadGatewayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GatewayTimeoutException" : self = .gatewayTimeoutException(try GatewayTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateReservationOutputError: Swift.Error, Swift.Equatable {
    case badGatewayException(BadGatewayException)
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case gatewayTimeoutException(GatewayTimeoutException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateReservationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateReservationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reservation = output.reservation
        } else {
            self.reservation = nil
        }
    }
}

/// Placeholder documentation for UpdateReservationResponse
public struct UpdateReservationOutputResponse: Swift.Equatable {
    /// Reserved resources available to use
    public var reservation: MediaLiveClientTypes.Reservation?

    public init (
        reservation: MediaLiveClientTypes.Reservation? = nil
    )
    {
        self.reservation = reservation
    }
}

struct UpdateReservationOutputResponseBody: Swift.Equatable {
    let reservation: MediaLiveClientTypes.Reservation?
}

extension UpdateReservationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservation = "reservation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Reservation.self, forKey: .reservation)
        reservation = reservationDecoded
    }
}

extension MediaLiveClientTypes.ValidationError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elementPath = "elementPath"
        case errorMessage = "errorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elementPath = self.elementPath {
            try encodeContainer.encode(elementPath, forKey: .elementPath)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elementPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elementPath)
        elementPath = elementPathDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ValidationError
    public struct ValidationError: Swift.Equatable {
        /// Path to the source of the error.
        public var elementPath: Swift.String?
        /// The error message.
        public var errorMessage: Swift.String?

        public init (
            elementPath: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.elementPath = elementPath
            self.errorMessage = errorMessage
        }
    }

}

extension MediaLiveClientTypes.VideoBlackFailoverSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blackDetectThreshold = "blackDetectThreshold"
        case videoBlackThresholdMsec = "videoBlackThresholdMsec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blackDetectThreshold = self.blackDetectThreshold {
            try encodeContainer.encode(blackDetectThreshold, forKey: .blackDetectThreshold)
        }
        if let videoBlackThresholdMsec = self.videoBlackThresholdMsec {
            try encodeContainer.encode(videoBlackThresholdMsec, forKey: .videoBlackThresholdMsec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blackDetectThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .blackDetectThreshold)
        blackDetectThreshold = blackDetectThresholdDecoded
        let videoBlackThresholdMsecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .videoBlackThresholdMsec)
        videoBlackThresholdMsec = videoBlackThresholdMsecDecoded
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for VideoBlackFailoverSettings
    public struct VideoBlackFailoverSettings: Swift.Equatable {
        /// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
        public var blackDetectThreshold: Swift.Double?
        /// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
        public var videoBlackThresholdMsec: Swift.Int?

        public init (
            blackDetectThreshold: Swift.Double? = nil,
            videoBlackThresholdMsec: Swift.Int? = nil
        )
        {
            self.blackDetectThreshold = blackDetectThreshold
            self.videoBlackThresholdMsec = videoBlackThresholdMsec
        }
    }

}

extension MediaLiveClientTypes.VideoCodecSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case frameCaptureSettings = "frameCaptureSettings"
        case h264Settings = "h264Settings"
        case h265Settings = "h265Settings"
        case mpeg2Settings = "mpeg2Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameCaptureSettings = self.frameCaptureSettings {
            try encodeContainer.encode(frameCaptureSettings, forKey: .frameCaptureSettings)
        }
        if let h264Settings = self.h264Settings {
            try encodeContainer.encode(h264Settings, forKey: .h264Settings)
        }
        if let h265Settings = self.h265Settings {
            try encodeContainer.encode(h265Settings, forKey: .h265Settings)
        }
        if let mpeg2Settings = self.mpeg2Settings {
            try encodeContainer.encode(mpeg2Settings, forKey: .mpeg2Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frameCaptureSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureSettings.self, forKey: .frameCaptureSettings)
        frameCaptureSettings = frameCaptureSettingsDecoded
        let h264SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Settings.self, forKey: .h264Settings)
        h264Settings = h264SettingsDecoded
        let h265SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Settings.self, forKey: .h265Settings)
        h265Settings = h265SettingsDecoded
        let mpeg2SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2Settings.self, forKey: .mpeg2Settings)
        mpeg2Settings = mpeg2SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Video Codec Settings
    public struct VideoCodecSettings: Swift.Equatable {
        /// Frame Capture Settings
        public var frameCaptureSettings: MediaLiveClientTypes.FrameCaptureSettings?
        /// H264 Settings
        public var h264Settings: MediaLiveClientTypes.H264Settings?
        /// H265 Settings
        public var h265Settings: MediaLiveClientTypes.H265Settings?
        /// Mpeg2 Settings
        public var mpeg2Settings: MediaLiveClientTypes.Mpeg2Settings?

        public init (
            frameCaptureSettings: MediaLiveClientTypes.FrameCaptureSettings? = nil,
            h264Settings: MediaLiveClientTypes.H264Settings? = nil,
            h265Settings: MediaLiveClientTypes.H265Settings? = nil,
            mpeg2Settings: MediaLiveClientTypes.Mpeg2Settings? = nil
        )
        {
            self.frameCaptureSettings = frameCaptureSettings
            self.h264Settings = h264Settings
            self.h265Settings = h265Settings
            self.mpeg2Settings = mpeg2Settings
        }
    }

}

extension MediaLiveClientTypes.VideoDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codecSettings = "codecSettings"
        case height = "height"
        case name = "name"
        case respondToAfd = "respondToAfd"
        case scalingBehavior = "scalingBehavior"
        case sharpness = "sharpness"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codecSettings = self.codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let respondToAfd = self.respondToAfd {
            try encodeContainer.encode(respondToAfd.rawValue, forKey: .respondToAfd)
        }
        if let scalingBehavior = self.scalingBehavior {
            try encodeContainer.encode(scalingBehavior.rawValue, forKey: .scalingBehavior)
        }
        if let sharpness = self.sharpness {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let respondToAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoDescriptionRespondToAfd.self, forKey: .respondToAfd)
        respondToAfd = respondToAfdDecoded
        let scalingBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoDescriptionScalingBehavior.self, forKey: .scalingBehavior)
        scalingBehavior = scalingBehaviorDecoded
        let sharpnessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
    }
}

extension MediaLiveClientTypes {
    /// Video settings for this stream.
    public struct VideoDescription: Swift.Equatable {
        /// Video codec settings.
        public var codecSettings: MediaLiveClientTypes.VideoCodecSettings?
        /// Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
        public var height: Swift.Int?
        /// The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
        public var respondToAfd: MediaLiveClientTypes.VideoDescriptionRespondToAfd?
        /// STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
        public var scalingBehavior: MediaLiveClientTypes.VideoDescriptionScalingBehavior?
        /// Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
        public var sharpness: Swift.Int?
        /// Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
        public var width: Swift.Int?

        public init (
            codecSettings: MediaLiveClientTypes.VideoCodecSettings? = nil,
            height: Swift.Int? = nil,
            name: Swift.String? = nil,
            respondToAfd: MediaLiveClientTypes.VideoDescriptionRespondToAfd? = nil,
            scalingBehavior: MediaLiveClientTypes.VideoDescriptionScalingBehavior? = nil,
            sharpness: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.codecSettings = codecSettings
            self.height = height
            self.name = name
            self.respondToAfd = respondToAfd
            self.scalingBehavior = scalingBehavior
            self.sharpness = sharpness
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Description Respond To Afd
    public enum VideoDescriptionRespondToAfd: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case passthrough
        case respond
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoDescriptionRespondToAfd] {
            return [
                .none,
                .passthrough,
                .respond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case .respond: return "RESPOND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VideoDescriptionRespondToAfd(rawValue: rawValue) ?? VideoDescriptionRespondToAfd.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes {
    /// Video Description Scaling Behavior
    public enum VideoDescriptionScalingBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `default`
        case stretchToOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoDescriptionScalingBehavior] {
            return [
                .default,
                .stretchToOutput,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .stretchToOutput: return "STRETCH_TO_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VideoDescriptionScalingBehavior(rawValue: rawValue) ?? VideoDescriptionScalingBehavior.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.VideoSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case colorSpace = "colorSpace"
        case colorSpaceSettings = "colorSpaceSettings"
        case colorSpaceUsage = "colorSpaceUsage"
        case selectorSettings = "selectorSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorSpace = self.colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let colorSpaceSettings = self.colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let colorSpaceUsage = self.colorSpaceUsage {
            try encodeContainer.encode(colorSpaceUsage.rawValue, forKey: .colorSpaceUsage)
        }
        if let selectorSettings = self.selectorSettings {
            try encodeContainer.encode(selectorSettings, forKey: .selectorSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorSpaceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelectorColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelectorColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let colorSpaceUsageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelectorColorSpaceUsage.self, forKey: .colorSpaceUsage)
        colorSpaceUsage = colorSpaceUsageDecoded
        let selectorSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelectorSettings.self, forKey: .selectorSettings)
        selectorSettings = selectorSettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Specifies a particular video stream within an input source. An input may have only a single video selector.
    public struct VideoSelector: Swift.Equatable {
        /// Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
        public var colorSpace: MediaLiveClientTypes.VideoSelectorColorSpace?
        /// Color space settings
        public var colorSpaceSettings: MediaLiveClientTypes.VideoSelectorColorSpaceSettings?
        /// Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
        public var colorSpaceUsage: MediaLiveClientTypes.VideoSelectorColorSpaceUsage?
        /// The video selector settings.
        public var selectorSettings: MediaLiveClientTypes.VideoSelectorSettings?

        public init (
            colorSpace: MediaLiveClientTypes.VideoSelectorColorSpace? = nil,
            colorSpaceSettings: MediaLiveClientTypes.VideoSelectorColorSpaceSettings? = nil,
            colorSpaceUsage: MediaLiveClientTypes.VideoSelectorColorSpaceUsage? = nil,
            selectorSettings: MediaLiveClientTypes.VideoSelectorSettings? = nil
        )
        {
            self.colorSpace = colorSpace
            self.colorSpaceSettings = colorSpaceSettings
            self.colorSpaceUsage = colorSpaceUsage
            self.selectorSettings = selectorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Selector Color Space
    public enum VideoSelectorColorSpace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case follow
        case hdr10
        case hlg2020
        case rec601
        case rec709
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoSelectorColorSpace] {
            return [
                .follow,
                .hdr10,
                .hlg2020,
                .rec601,
                .rec709,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .hdr10: return "HDR10"
            case .hlg2020: return "HLG_2020"
            case .rec601: return "REC_601"
            case .rec709: return "REC_709"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VideoSelectorColorSpace(rawValue: rawValue) ?? VideoSelectorColorSpace.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.VideoSelectorColorSpaceSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hdr10Settings = "hdr10Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hdr10Settings = self.hdr10Settings {
            try encodeContainer.encode(hdr10Settings, forKey: .hdr10Settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hdr10SettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Hdr10Settings.self, forKey: .hdr10Settings)
        hdr10Settings = hdr10SettingsDecoded
    }
}

extension MediaLiveClientTypes {
    /// Video Selector Color Space Settings
    public struct VideoSelectorColorSpaceSettings: Swift.Equatable {
        /// Hdr10 Settings
        public var hdr10Settings: MediaLiveClientTypes.Hdr10Settings?

        public init (
            hdr10Settings: MediaLiveClientTypes.Hdr10Settings? = nil
        )
        {
            self.hdr10Settings = hdr10Settings
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Selector Color Space Usage
    public enum VideoSelectorColorSpaceUsage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fallback
        case force
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoSelectorColorSpaceUsage] {
            return [
                .fallback,
                .force,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fallback: return "FALLBACK"
            case .force: return "FORCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VideoSelectorColorSpaceUsage(rawValue: rawValue) ?? VideoSelectorColorSpaceUsage.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.VideoSelectorPid: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pid = "pid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pid = self.pid {
            try encodeContainer.encode(pid, forKey: .pid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pid)
        pid = pidDecoded
    }
}

extension MediaLiveClientTypes {
    /// Video Selector Pid
    public struct VideoSelectorPid: Swift.Equatable {
        /// Selects a specific PID from within a video source.
        public var pid: Swift.Int?

        public init (
            pid: Swift.Int? = nil
        )
        {
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes.VideoSelectorProgramId: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case programId = "programId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let programId = self.programId {
            try encodeContainer.encode(programId, forKey: .programId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let programIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programId)
        programId = programIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Video Selector Program Id
    public struct VideoSelectorProgramId: Swift.Equatable {
        /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
        public var programId: Swift.Int?

        public init (
            programId: Swift.Int? = nil
        )
        {
            self.programId = programId
        }
    }

}

extension MediaLiveClientTypes.VideoSelectorSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case videoSelectorPid = "videoSelectorPid"
        case videoSelectorProgramId = "videoSelectorProgramId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let videoSelectorPid = self.videoSelectorPid {
            try encodeContainer.encode(videoSelectorPid, forKey: .videoSelectorPid)
        }
        if let videoSelectorProgramId = self.videoSelectorProgramId {
            try encodeContainer.encode(videoSelectorProgramId, forKey: .videoSelectorProgramId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let videoSelectorPidDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelectorPid.self, forKey: .videoSelectorPid)
        videoSelectorPid = videoSelectorPidDecoded
        let videoSelectorProgramIdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelectorProgramId.self, forKey: .videoSelectorProgramId)
        videoSelectorProgramId = videoSelectorProgramIdDecoded
    }
}

extension MediaLiveClientTypes {
    /// Video Selector Settings
    public struct VideoSelectorSettings: Swift.Equatable {
        /// Video Selector Pid
        public var videoSelectorPid: MediaLiveClientTypes.VideoSelectorPid?
        /// Video Selector Program Id
        public var videoSelectorProgramId: MediaLiveClientTypes.VideoSelectorProgramId?

        public init (
            videoSelectorPid: MediaLiveClientTypes.VideoSelectorPid? = nil,
            videoSelectorProgramId: MediaLiveClientTypes.VideoSelectorProgramId? = nil
        )
        {
            self.videoSelectorPid = videoSelectorPid
            self.videoSelectorProgramId = videoSelectorProgramId
        }
    }

}

extension MediaLiveClientTypes.VpcOutputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAddressAllocationIds = "publicAddressAllocationIds"
        case securityGroupIds = "securityGroupIds"
        case subnetIds = "subnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let publicAddressAllocationIds = publicAddressAllocationIds {
            var publicAddressAllocationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAddressAllocationIds)
            for __string0 in publicAddressAllocationIds {
                try publicAddressAllocationIdsContainer.encode(__string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for __string0 in subnetIds {
                try subnetIdsContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicAddressAllocationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicAddressAllocationIds)
        var publicAddressAllocationIdsDecoded0:[Swift.String]? = nil
        if let publicAddressAllocationIdsContainer = publicAddressAllocationIdsContainer {
            publicAddressAllocationIdsDecoded0 = [Swift.String]()
            for string0 in publicAddressAllocationIdsContainer {
                if let string0 = string0 {
                    publicAddressAllocationIdsDecoded0?.append(string0)
                }
            }
        }
        publicAddressAllocationIds = publicAddressAllocationIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// The properties for a private VPC Output When this property is specified, the output egress addresses will be created in a user specified VPC
    public struct VpcOutputSettings: Swift.Equatable {
        /// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels
        public var publicAddressAllocationIds: [Swift.String]?
        /// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used
        public var securityGroupIds: [Swift.String]?
        /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init (
            publicAddressAllocationIds: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.publicAddressAllocationIds = publicAddressAllocationIds
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension MediaLiveClientTypes.VpcOutputSettingsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "availabilityZones"
        case networkInterfaceIds = "networkInterfaceIds"
        case securityGroupIds = "securityGroupIds"
        case subnetIds = "subnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for __string0 in availabilityZones {
                try availabilityZonesContainer.encode(__string0)
            }
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for __string0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(__string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for __string0 in subnetIds {
                try subnetIdsContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[Swift.String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [Swift.String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension MediaLiveClientTypes {
    /// The properties for a private VPC Output
    public struct VpcOutputSettingsDescription: Swift.Equatable {
        /// The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet.
        public var availabilityZones: [Swift.String]?
        /// A list of Elastic Network Interfaces created by MediaLive in the customer's VPC
        public var networkInterfaceIds: [Swift.String]?
        /// A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces.
        public var securityGroupIds: [Swift.String]?
        /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
        public var subnetIds: [Swift.String]?

        public init (
            availabilityZones: [Swift.String]? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.networkInterfaceIds = networkInterfaceIds
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension MediaLiveClientTypes {
    /// Wav Coding Mode
    public enum WavCodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case codingMode40
        case codingMode80
        case sdkUnknown(Swift.String)

        public static var allCases: [WavCodingMode] {
            return [
                .codingMode10,
                .codingMode20,
                .codingMode40,
                .codingMode80,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode40: return "CODING_MODE_4_0"
            case .codingMode80: return "CODING_MODE_8_0"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WavCodingMode(rawValue: rawValue) ?? WavCodingMode.sdkUnknown(rawValue)
        }
    }
}

extension MediaLiveClientTypes.WavSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitDepth = "bitDepth"
        case codingMode = "codingMode"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitDepth = self.bitDepth {
            try encodeContainer.encode(bitDepth, forKey: .bitDepth)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let sampleRate = self.sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitDepthDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitDepth)
        bitDepth = bitDepthDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.WavCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}

extension MediaLiveClientTypes {
    /// Wav Settings
    public struct WavSettings: Swift.Equatable {
        /// Bits per sample.
        public var bitDepth: Swift.Double?
        /// The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
        public var codingMode: MediaLiveClientTypes.WavCodingMode?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Double?

        public init (
            bitDepth: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.WavCodingMode? = nil,
            sampleRate: Swift.Double? = nil
        )
        {
            self.bitDepth = bitDepth
            self.codingMode = codingMode
            self.sampleRate = sampleRate
        }
    }

}

extension MediaLiveClientTypes.WebvttDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case styleControl = "styleControl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let styleControl = self.styleControl {
            try encodeContainer.encode(styleControl.rawValue, forKey: .styleControl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let styleControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.WebvttDestinationStyleControl.self, forKey: .styleControl)
        styleControl = styleControlDecoded
    }
}

extension MediaLiveClientTypes {
    /// Webvtt Destination Settings
    public struct WebvttDestinationSettings: Swift.Equatable {
        /// Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
        public var styleControl: MediaLiveClientTypes.WebvttDestinationStyleControl?

        public init (
            styleControl: MediaLiveClientTypes.WebvttDestinationStyleControl? = nil
        )
        {
            self.styleControl = styleControl
        }
    }

}

extension MediaLiveClientTypes {
    /// Webvtt Destination Style Control
    public enum WebvttDestinationStyleControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noStyleData
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [WebvttDestinationStyleControl] {
            return [
                .noStyleData,
                .passthrough,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noStyleData: return "NO_STYLE_DATA"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WebvttDestinationStyleControl(rawValue: rawValue) ?? WebvttDestinationStyleControl.sdkUnknown(rawValue)
        }
    }
}
