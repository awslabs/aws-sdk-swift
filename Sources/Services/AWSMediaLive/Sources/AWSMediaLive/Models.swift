//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ByteStream
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct CreateTagsOutput {

    public init() { }
}

public struct DeleteCloudWatchAlarmTemplateGroupOutput {

    public init() { }
}

public struct DeleteCloudWatchAlarmTemplateOutput {

    public init() { }
}

public struct DeleteEventBridgeRuleTemplateGroupOutput {

    public init() { }
}

public struct DeleteEventBridgeRuleTemplateOutput {

    public init() { }
}

public struct DeleteSignalMapOutput {

    public init() { }
}

public struct DeleteTagsOutput {

    public init() { }
}

extension MediaLiveClientTypes {
    /// Input Channel Level
    public struct InputChannelLevel {
        /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
        /// This member is required.
        public var gain: Swift.Int?
        /// The index of the input channel used as a source.
        /// This member is required.
        public var inputChannel: Swift.Int?

        public init(
            gain: Swift.Int? = nil,
            inputChannel: Swift.Int? = nil
        )
        {
            self.gain = gain
            self.inputChannel = inputChannel
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Channel Mapping
    public struct AudioChannelMapping {
        /// Indices and gain values for each input channel that should be remixed into this output channel.
        /// This member is required.
        public var inputChannelLevels: [MediaLiveClientTypes.InputChannelLevel]?
        /// The index of the output channel being produced.
        /// This member is required.
        public var outputChannel: Swift.Int?

        public init(
            inputChannelLevels: [MediaLiveClientTypes.InputChannelLevel]? = nil,
            outputChannel: Swift.Int? = nil
        )
        {
            self.inputChannelLevels = inputChannelLevels
            self.outputChannel = outputChannel
        }
    }

}

extension MediaLiveClientTypes {

    /// Dash Role Audio
    public enum DashRoleAudio: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alternate
        case commentary
        case description
        case dub
        case emergency
        case enhancedAudioIntelligibility
        case karaoke
        case main
        case supplementary
        case sdkUnknown(Swift.String)

        public static var allCases: [DashRoleAudio] {
            return [
                .alternate,
                .commentary,
                .description,
                .dub,
                .emergency,
                .enhancedAudioIntelligibility,
                .karaoke,
                .main,
                .supplementary
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alternate: return "ALTERNATE"
            case .commentary: return "COMMENTARY"
            case .description: return "DESCRIPTION"
            case .dub: return "DUB"
            case .emergency: return "EMERGENCY"
            case .enhancedAudioIntelligibility: return "ENHANCED-AUDIO-INTELLIGIBILITY"
            case .karaoke: return "KARAOKE"
            case .main: return "MAIN"
            case .supplementary: return "SUPPLEMENTARY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Audio Normalization Algorithm
    public enum AudioNormalizationAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case itu17701
        case itu17702
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationAlgorithm] {
            return [
                .itu17701,
                .itu17702
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .itu17701: return "ITU_1770_1"
            case .itu17702: return "ITU_1770_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Audio Normalization Algorithm Control
    public enum AudioNormalizationAlgorithmControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case correctAudio
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationAlgorithmControl] {
            return [
                .correctAudio
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .correctAudio: return "CORRECT_AUDIO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Normalization Settings
    public struct AudioNormalizationSettings {
        /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
        public var algorithm: MediaLiveClientTypes.AudioNormalizationAlgorithm?
        /// When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
        public var algorithmControl: MediaLiveClientTypes.AudioNormalizationAlgorithmControl?
        /// Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
        public var targetLkfs: Swift.Double?

        public init(
            algorithm: MediaLiveClientTypes.AudioNormalizationAlgorithm? = nil,
            algorithmControl: MediaLiveClientTypes.AudioNormalizationAlgorithmControl? = nil,
            targetLkfs: Swift.Double? = nil
        )
        {
            self.algorithm = algorithm
            self.algorithmControl = algorithmControl
            self.targetLkfs = targetLkfs
        }
    }

}

extension MediaLiveClientTypes {

    /// Audio Type
    public enum AudioType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cleanEffects
        case hearingImpaired
        case undefined
        case visualImpairedCommentary
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioType] {
            return [
                .cleanEffects,
                .hearingImpaired,
                .undefined,
                .visualImpairedCommentary
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cleanEffects: return "CLEAN_EFFECTS"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .undefined: return "UNDEFINED"
            case .visualImpairedCommentary: return "VISUAL_IMPAIRED_COMMENTARY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Audio Description Audio Type Control
    public enum AudioDescriptionAudioTypeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioDescriptionAudioTypeControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Nielsen Watermarks Cbet Stepaside
    public enum NielsenWatermarksCbetStepaside: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenWatermarksCbetStepaside] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Nielsen CBET
    public struct NielsenCBET {
        /// Enter the CBET check digits to use in the watermark.
        /// This member is required.
        public var cbetCheckDigitString: Swift.String?
        /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
        /// This member is required.
        public var cbetStepaside: MediaLiveClientTypes.NielsenWatermarksCbetStepaside?
        /// Enter the CBET Source ID (CSID) to use in the watermark
        /// This member is required.
        public var csid: Swift.String?

        public init(
            cbetCheckDigitString: Swift.String? = nil,
            cbetStepaside: MediaLiveClientTypes.NielsenWatermarksCbetStepaside? = nil,
            csid: Swift.String? = nil
        )
        {
            self.cbetCheckDigitString = cbetCheckDigitString
            self.cbetStepaside = cbetStepaside
            self.csid = csid
        }
    }

}

extension MediaLiveClientTypes {

    /// Nielsen Watermarks Distribution Types
    public enum NielsenWatermarksDistributionTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case finalDistributor
        case programContent
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenWatermarksDistributionTypes] {
            return [
                .finalDistributor,
                .programContent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .finalDistributor: return "FINAL_DISTRIBUTOR"
            case .programContent: return "PROGRAM_CONTENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Nielsen Watermark Timezones
    public enum NielsenWatermarkTimezones: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case americaPuertoRico
        case usAlaska
        case usArizona
        case usCentral
        case usEastern
        case usHawaii
        case usMountain
        case usPacific
        case usSamoa
        case utc
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenWatermarkTimezones] {
            return [
                .americaPuertoRico,
                .usAlaska,
                .usArizona,
                .usCentral,
                .usEastern,
                .usHawaii,
                .usMountain,
                .usPacific,
                .usSamoa,
                .utc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .americaPuertoRico: return "AMERICA_PUERTO_RICO"
            case .usAlaska: return "US_ALASKA"
            case .usArizona: return "US_ARIZONA"
            case .usCentral: return "US_CENTRAL"
            case .usEastern: return "US_EASTERN"
            case .usHawaii: return "US_HAWAII"
            case .usMountain: return "US_MOUNTAIN"
            case .usPacific: return "US_PACIFIC"
            case .usSamoa: return "US_SAMOA"
            case .utc: return "UTC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Naes Ii Nw
    public struct NielsenNaesIiNw {
        /// Enter the check digit string for the watermark
        /// This member is required.
        public var checkDigitString: Swift.String?
        /// Enter the Nielsen Source ID (SID) to include in the watermark
        /// This member is required.
        public var sid: Swift.Double?
        /// Choose the timezone for the time stamps in the watermark. If not provided, the timestamps will be in Coordinated Universal Time (UTC)
        public var timezone: MediaLiveClientTypes.NielsenWatermarkTimezones?

        public init(
            checkDigitString: Swift.String? = nil,
            sid: Swift.Double? = nil,
            timezone: MediaLiveClientTypes.NielsenWatermarkTimezones? = nil
        )
        {
            self.checkDigitString = checkDigitString
            self.sid = sid
            self.timezone = timezone
        }
    }

}

extension MediaLiveClientTypes {
    /// Nielsen Watermarks Settings
    public struct NielsenWatermarksSettings {
        /// Complete these fields only if you want to insert watermarks of type Nielsen CBET
        public var nielsenCbetSettings: MediaLiveClientTypes.NielsenCBET?
        /// Choose the distribution types that you want to assign to the watermarks:
        ///
        /// * PROGRAM_CONTENT
        ///
        /// * FINAL_DISTRIBUTOR
        public var nielsenDistributionType: MediaLiveClientTypes.NielsenWatermarksDistributionTypes?
        /// Complete these fields only if you want to insert watermarks of type Nielsen NAES II (N2) and Nielsen NAES VI (NW).
        public var nielsenNaesIiNwSettings: MediaLiveClientTypes.NielsenNaesIiNw?

        public init(
            nielsenCbetSettings: MediaLiveClientTypes.NielsenCBET? = nil,
            nielsenDistributionType: MediaLiveClientTypes.NielsenWatermarksDistributionTypes? = nil,
            nielsenNaesIiNwSettings: MediaLiveClientTypes.NielsenNaesIiNw? = nil
        )
        {
            self.nielsenCbetSettings = nielsenCbetSettings
            self.nielsenDistributionType = nielsenDistributionType
            self.nielsenNaesIiNwSettings = nielsenNaesIiNwSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Watermark Settings
    public struct AudioWatermarkSettings {
        /// Settings to configure Nielsen Watermarks in the audio encode
        public var nielsenWatermarksSettings: MediaLiveClientTypes.NielsenWatermarksSettings?

        public init(
            nielsenWatermarksSettings: MediaLiveClientTypes.NielsenWatermarksSettings? = nil
        )
        {
            self.nielsenWatermarksSettings = nielsenWatermarksSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Aac Coding Mode
    public enum AacCodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adReceiverMix
        case codingMode10
        case codingMode11
        case codingMode20
        case codingMode51
        case sdkUnknown(Swift.String)

        public static var allCases: [AacCodingMode] {
            return [
                .adReceiverMix,
                .codingMode10,
                .codingMode11,
                .codingMode20,
                .codingMode51
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adReceiverMix: return "AD_RECEIVER_MIX"
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode11: return "CODING_MODE_1_1"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode51: return "CODING_MODE_5_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Aac Input Type
    public enum AacInputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case broadcasterMixedAd
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [AacInputType] {
            return [
                .broadcasterMixedAd,
                .normal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .broadcasterMixedAd: return "BROADCASTER_MIXED_AD"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Aac Profile
    public enum AacProfile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hev1
        case hev2
        case lc
        case sdkUnknown(Swift.String)

        public static var allCases: [AacProfile] {
            return [
                .hev1,
                .hev2,
                .lc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hev2: return "HEV2"
            case .lc: return "LC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Aac Rate Control Mode
    public enum AacRateControlMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [AacRateControlMode] {
            return [
                .cbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Aac Raw Format
    public enum AacRawFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case latmLoas
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AacRawFormat] {
            return [
                .latmLoas,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .latmLoas: return "LATM_LOAS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Aac Spec
    public enum AacSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mpeg2
        case mpeg4
        case sdkUnknown(Swift.String)

        public static var allCases: [AacSpec] {
            return [
                .mpeg2,
                .mpeg4
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mpeg2: return "MPEG2"
            case .mpeg4: return "MPEG4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Aac Vbr Quality
    public enum AacVbrQuality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case mediumHigh
        case mediumLow
        case sdkUnknown(Swift.String)

        public static var allCases: [AacVbrQuality] {
            return [
                .high,
                .low,
                .mediumHigh,
                .mediumLow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .mediumHigh: return "MEDIUM_HIGH"
            case .mediumLow: return "MEDIUM_LOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Aac Settings
    public struct AacSettings {
        /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
        public var bitrate: Swift.Double?
        /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
        public var codingMode: MediaLiveClientTypes.AacCodingMode?
        /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
        public var inputType: MediaLiveClientTypes.AacInputType?
        /// AAC Profile.
        public var profile: MediaLiveClientTypes.AacProfile?
        /// Rate Control Mode.
        public var rateControlMode: MediaLiveClientTypes.AacRateControlMode?
        /// Sets LATM / LOAS AAC output for raw containers.
        public var rawFormat: MediaLiveClientTypes.AacRawFormat?
        /// Sample rate in Hz. Valid values depend on rate control mode and profile.
        public var sampleRate: Swift.Double?
        /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
        public var spec: MediaLiveClientTypes.AacSpec?
        /// VBR Quality Level - Only used if rateControlMode is VBR.
        public var vbrQuality: MediaLiveClientTypes.AacVbrQuality?

        public init(
            bitrate: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.AacCodingMode? = nil,
            inputType: MediaLiveClientTypes.AacInputType? = nil,
            profile: MediaLiveClientTypes.AacProfile? = nil,
            rateControlMode: MediaLiveClientTypes.AacRateControlMode? = nil,
            rawFormat: MediaLiveClientTypes.AacRawFormat? = nil,
            sampleRate: Swift.Double? = nil,
            spec: MediaLiveClientTypes.AacSpec? = nil,
            vbrQuality: MediaLiveClientTypes.AacVbrQuality? = nil
        )
        {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.inputType = inputType
            self.profile = profile
            self.rateControlMode = rateControlMode
            self.rawFormat = rawFormat
            self.sampleRate = sampleRate
            self.spec = spec
            self.vbrQuality = vbrQuality
        }
    }

}

extension MediaLiveClientTypes {

    /// Ac3 Attenuation Control
    public enum Ac3AttenuationControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attenuate3Db
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3AttenuationControl] {
            return [
                .attenuate3Db,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attenuate3Db: return "ATTENUATE_3_DB"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Ac3 Bitstream Mode
    public enum Ac3BitstreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commentary
        case completeMain
        case dialogue
        case emergency
        case hearingImpaired
        case musicAndEffects
        case visuallyImpaired
        case voiceOver
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3BitstreamMode] {
            return [
                .commentary,
                .completeMain,
                .dialogue,
                .emergency,
                .hearingImpaired,
                .musicAndEffects,
                .visuallyImpaired,
                .voiceOver
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commentary: return "COMMENTARY"
            case .completeMain: return "COMPLETE_MAIN"
            case .dialogue: return "DIALOGUE"
            case .emergency: return "EMERGENCY"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .musicAndEffects: return "MUSIC_AND_EFFECTS"
            case .visuallyImpaired: return "VISUALLY_IMPAIRED"
            case .voiceOver: return "VOICE_OVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Ac3 Coding Mode
    public enum Ac3CodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode10
        case codingMode11
        case codingMode20
        case codingMode32Lfe
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3CodingMode] {
            return [
                .codingMode10,
                .codingMode11,
                .codingMode20,
                .codingMode32Lfe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode11: return "CODING_MODE_1_1"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode32Lfe: return "CODING_MODE_3_2_LFE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Ac3 Drc Profile
    public enum Ac3DrcProfile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmStandard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3DrcProfile] {
            return [
                .filmStandard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmStandard: return "FILM_STANDARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Ac3 Lfe Filter
    public enum Ac3LfeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3LfeFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Ac3 Metadata Control
    public enum Ac3MetadataControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3MetadataControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Ac3 Settings
    public struct Ac3Settings {
        /// Applies a 3 dB attenuation to the surround channels. Applies only when the coding mode parameter is CODING_MODE_3_2_LFE.
        public var attenuationControl: MediaLiveClientTypes.Ac3AttenuationControl?
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Double?
        /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
        public var bitstreamMode: MediaLiveClientTypes.Ac3BitstreamMode?
        /// Dolby Digital coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Ac3CodingMode?
        /// Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
        public var drcProfile: MediaLiveClientTypes.Ac3DrcProfile?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
        public var lfeFilter: MediaLiveClientTypes.Ac3LfeFilter?
        /// When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaLiveClientTypes.Ac3MetadataControl?

        public init(
            attenuationControl: MediaLiveClientTypes.Ac3AttenuationControl? = nil,
            bitrate: Swift.Double? = nil,
            bitstreamMode: MediaLiveClientTypes.Ac3BitstreamMode? = nil,
            codingMode: MediaLiveClientTypes.Ac3CodingMode? = nil,
            dialnorm: Swift.Int? = nil,
            drcProfile: MediaLiveClientTypes.Ac3DrcProfile? = nil,
            lfeFilter: MediaLiveClientTypes.Ac3LfeFilter? = nil,
            metadataControl: MediaLiveClientTypes.Ac3MetadataControl? = nil
        )
        {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dialnorm = dialnorm
            self.drcProfile = drcProfile
            self.lfeFilter = lfeFilter
            self.metadataControl = metadataControl
        }
    }

}

extension MediaLiveClientTypes {

    /// Eac3 Atmos Coding Mode
    public enum Eac3AtmosCodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode514
        case codingMode714
        case codingMode916
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosCodingMode] {
            return [
                .codingMode514,
                .codingMode714,
                .codingMode916
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode514: return "CODING_MODE_5_1_4"
            case .codingMode714: return "CODING_MODE_7_1_4"
            case .codingMode916: return "CODING_MODE_9_1_6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Atmos Drc Line
    public enum Eac3AtmosDrcLine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDrcLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Atmos Drc Rf
    public enum Eac3AtmosDrcRf: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDrcRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Atmos Settings
    public struct Eac3AtmosSettings {
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Double?
        /// Dolby Digital Plus with Dolby Atmos coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Eac3AtmosCodingMode?
        /// Sets the dialnorm for the output. Default 23.
        public var dialnorm: Swift.Int?
        /// Sets the Dolby dynamic range compression profile.
        public var drcLine: MediaLiveClientTypes.Eac3AtmosDrcLine?
        /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
        public var drcRf: MediaLiveClientTypes.Eac3AtmosDrcRf?
        /// Height dimensional trim. Sets the maximum amount to attenuate the height channels when the downstream player isn??t configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
        public var heightTrim: Swift.Double?
        /// Surround dimensional trim. Sets the maximum amount to attenuate the surround channels when the downstream player isn't configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
        public var surroundTrim: Swift.Double?

        public init(
            bitrate: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.Eac3AtmosCodingMode? = nil,
            dialnorm: Swift.Int? = nil,
            drcLine: MediaLiveClientTypes.Eac3AtmosDrcLine? = nil,
            drcRf: MediaLiveClientTypes.Eac3AtmosDrcRf? = nil,
            heightTrim: Swift.Double? = nil,
            surroundTrim: Swift.Double? = nil
        )
        {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.dialnorm = dialnorm
            self.drcLine = drcLine
            self.drcRf = drcRf
            self.heightTrim = heightTrim
            self.surroundTrim = surroundTrim
        }
    }

}

extension MediaLiveClientTypes {

    /// Eac3 Attenuation Control
    public enum Eac3AttenuationControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attenuate3Db
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AttenuationControl] {
            return [
                .attenuate3Db,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attenuate3Db: return "ATTENUATE_3_DB"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Bitstream Mode
    public enum Eac3BitstreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commentary
        case completeMain
        case emergency
        case hearingImpaired
        case visuallyImpaired
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3BitstreamMode] {
            return [
                .commentary,
                .completeMain,
                .emergency,
                .hearingImpaired,
                .visuallyImpaired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commentary: return "COMMENTARY"
            case .completeMain: return "COMPLETE_MAIN"
            case .emergency: return "EMERGENCY"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .visuallyImpaired: return "VISUALLY_IMPAIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Coding Mode
    public enum Eac3CodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case codingMode32
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3CodingMode] {
            return [
                .codingMode10,
                .codingMode20,
                .codingMode32
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode32: return "CODING_MODE_3_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Dc Filter
    public enum Eac3DcFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DcFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Drc Line
    public enum Eac3DrcLine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DrcLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Drc Rf
    public enum Eac3DrcRf: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DrcRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Lfe Control
    public enum Eac3LfeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lfe
        case noLfe
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3LfeControl] {
            return [
                .lfe,
                .noLfe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lfe: return "LFE"
            case .noLfe: return "NO_LFE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Lfe Filter
    public enum Eac3LfeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3LfeFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Metadata Control
    public enum Eac3MetadataControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3MetadataControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Passthrough Control
    public enum Eac3PassthroughControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case whenPossible
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3PassthroughControl] {
            return [
                .noPassthrough,
                .whenPossible
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .whenPossible: return "WHEN_POSSIBLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Phase Control
    public enum Eac3PhaseControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noShift
        case shift90Degrees
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3PhaseControl] {
            return [
                .noShift,
                .shift90Degrees
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noShift: return "NO_SHIFT"
            case .shift90Degrees: return "SHIFT_90_DEGREES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Stereo Downmix
    public enum Eac3StereoDownmix: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dpl2
        case loRo
        case ltRt
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3StereoDownmix] {
            return [
                .dpl2,
                .loRo,
                .ltRt,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dpl2: return "DPL2"
            case .loRo: return "LO_RO"
            case .ltRt: return "LT_RT"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Surround Ex Mode
    public enum Eac3SurroundExMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3SurroundExMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Eac3 Surround Mode
    public enum Eac3SurroundMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3SurroundMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Eac3 Settings
    public struct Eac3Settings {
        /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
        public var attenuationControl: MediaLiveClientTypes.Eac3AttenuationControl?
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Double?
        /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
        public var bitstreamMode: MediaLiveClientTypes.Eac3BitstreamMode?
        /// Dolby Digital Plus coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Eac3CodingMode?
        /// When set to enabled, activates a DC highpass filter for all input channels.
        public var dcFilter: MediaLiveClientTypes.Eac3DcFilter?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// Sets the Dolby dynamic range compression profile.
        public var drcLine: MediaLiveClientTypes.Eac3DrcLine?
        /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
        public var drcRf: MediaLiveClientTypes.Eac3DrcRf?
        /// When encoding 3/2 audio, setting to lfe enables the LFE channel
        public var lfeControl: MediaLiveClientTypes.Eac3LfeControl?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
        public var lfeFilter: MediaLiveClientTypes.Eac3LfeFilter?
        /// Left only/Right only center mix level. Only used for 3/2 coding mode.
        public var loRoCenterMixLevel: Swift.Double?
        /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
        public var loRoSurroundMixLevel: Swift.Double?
        /// Left total/Right total center mix level. Only used for 3/2 coding mode.
        public var ltRtCenterMixLevel: Swift.Double?
        /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
        public var ltRtSurroundMixLevel: Swift.Double?
        /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaLiveClientTypes.Eac3MetadataControl?
        /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
        public var passthroughControl: MediaLiveClientTypes.Eac3PassthroughControl?
        /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
        public var phaseControl: MediaLiveClientTypes.Eac3PhaseControl?
        /// Stereo downmix preference. Only used for 3/2 coding mode.
        public var stereoDownmix: MediaLiveClientTypes.Eac3StereoDownmix?
        /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
        public var surroundExMode: MediaLiveClientTypes.Eac3SurroundExMode?
        /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
        public var surroundMode: MediaLiveClientTypes.Eac3SurroundMode?

        public init(
            attenuationControl: MediaLiveClientTypes.Eac3AttenuationControl? = nil,
            bitrate: Swift.Double? = nil,
            bitstreamMode: MediaLiveClientTypes.Eac3BitstreamMode? = nil,
            codingMode: MediaLiveClientTypes.Eac3CodingMode? = nil,
            dcFilter: MediaLiveClientTypes.Eac3DcFilter? = nil,
            dialnorm: Swift.Int? = nil,
            drcLine: MediaLiveClientTypes.Eac3DrcLine? = nil,
            drcRf: MediaLiveClientTypes.Eac3DrcRf? = nil,
            lfeControl: MediaLiveClientTypes.Eac3LfeControl? = nil,
            lfeFilter: MediaLiveClientTypes.Eac3LfeFilter? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            metadataControl: MediaLiveClientTypes.Eac3MetadataControl? = nil,
            passthroughControl: MediaLiveClientTypes.Eac3PassthroughControl? = nil,
            phaseControl: MediaLiveClientTypes.Eac3PhaseControl? = nil,
            stereoDownmix: MediaLiveClientTypes.Eac3StereoDownmix? = nil,
            surroundExMode: MediaLiveClientTypes.Eac3SurroundExMode? = nil,
            surroundMode: MediaLiveClientTypes.Eac3SurroundMode? = nil
        )
        {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dcFilter = dcFilter
            self.dialnorm = dialnorm
            self.drcLine = drcLine
            self.drcRf = drcRf
            self.lfeControl = lfeControl
            self.lfeFilter = lfeFilter
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.metadataControl = metadataControl
            self.passthroughControl = passthroughControl
            self.phaseControl = phaseControl
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
            self.surroundMode = surroundMode
        }
    }

}

extension MediaLiveClientTypes {

    /// Mp2 Coding Mode
    public enum Mp2CodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case sdkUnknown(Swift.String)

        public static var allCases: [Mp2CodingMode] {
            return [
                .codingMode10,
                .codingMode20
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Mp2 Settings
    public struct Mp2Settings {
        /// Average bitrate in bits/second.
        public var bitrate: Swift.Double?
        /// The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
        public var codingMode: MediaLiveClientTypes.Mp2CodingMode?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Double?

        public init(
            bitrate: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.Mp2CodingMode? = nil,
            sampleRate: Swift.Double? = nil
        )
        {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.sampleRate = sampleRate
        }
    }

}

extension MediaLiveClientTypes {
    /// Pass Through Settings
    public struct PassThroughSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// Wav Coding Mode
    public enum WavCodingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case codingMode40
        case codingMode80
        case sdkUnknown(Swift.String)

        public static var allCases: [WavCodingMode] {
            return [
                .codingMode10,
                .codingMode20,
                .codingMode40,
                .codingMode80
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode40: return "CODING_MODE_4_0"
            case .codingMode80: return "CODING_MODE_8_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Wav Settings
    public struct WavSettings {
        /// Bits per sample.
        public var bitDepth: Swift.Double?
        /// The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
        public var codingMode: MediaLiveClientTypes.WavCodingMode?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Double?

        public init(
            bitDepth: Swift.Double? = nil,
            codingMode: MediaLiveClientTypes.WavCodingMode? = nil,
            sampleRate: Swift.Double? = nil
        )
        {
            self.bitDepth = bitDepth
            self.codingMode = codingMode
            self.sampleRate = sampleRate
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Codec Settings
    public struct AudioCodecSettings {
        /// Aac Settings
        public var aacSettings: MediaLiveClientTypes.AacSettings?
        /// Ac3 Settings
        public var ac3Settings: MediaLiveClientTypes.Ac3Settings?
        /// Eac3 Atmos Settings
        public var eac3AtmosSettings: MediaLiveClientTypes.Eac3AtmosSettings?
        /// Eac3 Settings
        public var eac3Settings: MediaLiveClientTypes.Eac3Settings?
        /// Mp2 Settings
        public var mp2Settings: MediaLiveClientTypes.Mp2Settings?
        /// Pass Through Settings
        public var passThroughSettings: MediaLiveClientTypes.PassThroughSettings?
        /// Wav Settings
        public var wavSettings: MediaLiveClientTypes.WavSettings?

        public init(
            aacSettings: MediaLiveClientTypes.AacSettings? = nil,
            ac3Settings: MediaLiveClientTypes.Ac3Settings? = nil,
            eac3AtmosSettings: MediaLiveClientTypes.Eac3AtmosSettings? = nil,
            eac3Settings: MediaLiveClientTypes.Eac3Settings? = nil,
            mp2Settings: MediaLiveClientTypes.Mp2Settings? = nil,
            passThroughSettings: MediaLiveClientTypes.PassThroughSettings? = nil,
            wavSettings: MediaLiveClientTypes.WavSettings? = nil
        )
        {
            self.aacSettings = aacSettings
            self.ac3Settings = ac3Settings
            self.eac3AtmosSettings = eac3AtmosSettings
            self.eac3Settings = eac3Settings
            self.mp2Settings = mp2Settings
            self.passThroughSettings = passThroughSettings
            self.wavSettings = wavSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Dvb Dash Accessibility
    public enum DvbDashAccessibility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dvbdash1VisuallyImpaired
        case dvbdash2HardOfHearing
        case dvbdash3SupplementalCommentary
        case dvbdash4DirectorsCommentary
        case dvbdash5EducationalNotes
        case dvbdash6MainProgram
        case dvbdash7CleanFeed
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbDashAccessibility] {
            return [
                .dvbdash1VisuallyImpaired,
                .dvbdash2HardOfHearing,
                .dvbdash3SupplementalCommentary,
                .dvbdash4DirectorsCommentary,
                .dvbdash5EducationalNotes,
                .dvbdash6MainProgram,
                .dvbdash7CleanFeed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dvbdash1VisuallyImpaired: return "DVBDASH_1_VISUALLY_IMPAIRED"
            case .dvbdash2HardOfHearing: return "DVBDASH_2_HARD_OF_HEARING"
            case .dvbdash3SupplementalCommentary: return "DVBDASH_3_SUPPLEMENTAL_COMMENTARY"
            case .dvbdash4DirectorsCommentary: return "DVBDASH_4_DIRECTORS_COMMENTARY"
            case .dvbdash5EducationalNotes: return "DVBDASH_5_EDUCATIONAL_NOTES"
            case .dvbdash6MainProgram: return "DVBDASH_6_MAIN_PROGRAM"
            case .dvbdash7CleanFeed: return "DVBDASH_7_CLEAN_FEED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Audio Description Language Code Control
    public enum AudioDescriptionLanguageCodeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioDescriptionLanguageCodeControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Remix Settings
    public struct RemixSettings {
        /// Mapping of input channels to output channels, with appropriate gain adjustments.
        /// This member is required.
        public var channelMappings: [MediaLiveClientTypes.AudioChannelMapping]?
        /// Number of input channels to be used.
        public var channelsIn: Swift.Int?
        /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
        public var channelsOut: Swift.Int?

        public init(
            channelMappings: [MediaLiveClientTypes.AudioChannelMapping]? = nil,
            channelsIn: Swift.Int? = nil,
            channelsOut: Swift.Int? = nil
        )
        {
            self.channelMappings = channelMappings
            self.channelsIn = channelsIn
            self.channelsOut = channelsOut
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Description
    public struct AudioDescription {
        /// Identifies the DASH roles to assign to this audio output. Applies only when the audio output is configured for DVB DASH accessibility signaling.
        public var audioDashRoles: [MediaLiveClientTypes.DashRoleAudio]?
        /// Advanced audio normalization settings.
        public var audioNormalizationSettings: MediaLiveClientTypes.AudioNormalizationSettings?
        /// The name of the AudioSelector used as the source for this AudioDescription.
        /// This member is required.
        public var audioSelectorName: Swift.String?
        /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
        public var audioType: MediaLiveClientTypes.AudioType?
        /// Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
        public var audioTypeControl: MediaLiveClientTypes.AudioDescriptionAudioTypeControl?
        /// Settings to configure one or more solutions that insert audio watermarks in the audio encode
        public var audioWatermarkingSettings: MediaLiveClientTypes.AudioWatermarkSettings?
        /// Audio codec settings.
        public var codecSettings: MediaLiveClientTypes.AudioCodecSettings?
        /// Identifies DVB DASH accessibility signaling in this audio output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
        public var dvbDashAccessibility: MediaLiveClientTypes.DvbDashAccessibility?
        /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
        public var languageCode: Swift.String?
        /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
        public var languageCodeControl: MediaLiveClientTypes.AudioDescriptionLanguageCodeControl?
        /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
        /// This member is required.
        public var name: Swift.String?
        /// Settings that control how input audio channels are remixed into the output audio channels.
        public var remixSettings: MediaLiveClientTypes.RemixSettings?
        /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
        public var streamName: Swift.String?

        public init(
            audioDashRoles: [MediaLiveClientTypes.DashRoleAudio]? = nil,
            audioNormalizationSettings: MediaLiveClientTypes.AudioNormalizationSettings? = nil,
            audioSelectorName: Swift.String? = nil,
            audioType: MediaLiveClientTypes.AudioType? = nil,
            audioTypeControl: MediaLiveClientTypes.AudioDescriptionAudioTypeControl? = nil,
            audioWatermarkingSettings: MediaLiveClientTypes.AudioWatermarkSettings? = nil,
            codecSettings: MediaLiveClientTypes.AudioCodecSettings? = nil,
            dvbDashAccessibility: MediaLiveClientTypes.DvbDashAccessibility? = nil,
            languageCode: Swift.String? = nil,
            languageCodeControl: MediaLiveClientTypes.AudioDescriptionLanguageCodeControl? = nil,
            name: Swift.String? = nil,
            remixSettings: MediaLiveClientTypes.RemixSettings? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.audioDashRoles = audioDashRoles
            self.audioNormalizationSettings = audioNormalizationSettings
            self.audioSelectorName = audioSelectorName
            self.audioType = audioType
            self.audioTypeControl = audioTypeControl
            self.audioWatermarkingSettings = audioWatermarkingSettings
            self.codecSettings = codecSettings
            self.dvbDashAccessibility = dvbDashAccessibility
            self.languageCode = languageCode
            self.languageCodeControl = languageCodeControl
            self.name = name
            self.remixSettings = remixSettings
            self.streamName = streamName
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Hls Rendition Selection
    public struct AudioHlsRenditionSelection {
        /// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
        /// This member is required.
        public var groupId: Swift.String?
        /// Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
        /// This member is required.
        public var name: Swift.String?

        public init(
            groupId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.name = name
        }
    }

}

extension MediaLiveClientTypes {

    /// Audio Language Selection Policy
    public enum AudioLanguageSelectionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case loose
        case strict
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioLanguageSelectionPolicy] {
            return [
                .loose,
                .strict
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .loose: return "LOOSE"
            case .strict: return "STRICT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Language Selection
    public struct AudioLanguageSelection {
        /// Selects a specific three-letter language code from within an audio source.
        /// This member is required.
        public var languageCode: Swift.String?
        /// When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
        public var languageSelectionPolicy: MediaLiveClientTypes.AudioLanguageSelectionPolicy?

        public init(
            languageCode: Swift.String? = nil,
            languageSelectionPolicy: MediaLiveClientTypes.AudioLanguageSelectionPolicy? = nil
        )
        {
            self.languageCode = languageCode
            self.languageSelectionPolicy = languageSelectionPolicy
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Pid Selection
    public struct AudioPidSelection {
        /// Selects a specific PID from within a source.
        /// This member is required.
        public var pid: Swift.Int?

        public init(
            pid: Swift.Int? = nil
        )
        {
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes {

    /// Dolby EProgram Selection
    public enum DolbyEProgramSelection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allChannels
        case program1
        case program2
        case program3
        case program4
        case program5
        case program6
        case program7
        case program8
        case sdkUnknown(Swift.String)

        public static var allCases: [DolbyEProgramSelection] {
            return [
                .allChannels,
                .program1,
                .program2,
                .program3,
                .program4,
                .program5,
                .program6,
                .program7,
                .program8
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allChannels: return "ALL_CHANNELS"
            case .program1: return "PROGRAM_1"
            case .program2: return "PROGRAM_2"
            case .program3: return "PROGRAM_3"
            case .program4: return "PROGRAM_4"
            case .program5: return "PROGRAM_5"
            case .program6: return "PROGRAM_6"
            case .program7: return "PROGRAM_7"
            case .program8: return "PROGRAM_8"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Dolby EDecode
    public struct AudioDolbyEDecode {
        /// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
        /// This member is required.
        public var programSelection: MediaLiveClientTypes.DolbyEProgramSelection?

        public init(
            programSelection: MediaLiveClientTypes.DolbyEProgramSelection? = nil
        )
        {
            self.programSelection = programSelection
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Track
    public struct AudioTrack {
        /// 1-based integer value that maps to a specific audio track
        /// This member is required.
        public var track: Swift.Int?

        public init(
            track: Swift.Int? = nil
        )
        {
            self.track = track
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Track Selection
    public struct AudioTrackSelection {
        /// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337
        public var dolbyEDecode: MediaLiveClientTypes.AudioDolbyEDecode?
        /// Selects one or more unique audio tracks from within a source.
        /// This member is required.
        public var tracks: [MediaLiveClientTypes.AudioTrack]?

        public init(
            dolbyEDecode: MediaLiveClientTypes.AudioDolbyEDecode? = nil,
            tracks: [MediaLiveClientTypes.AudioTrack]? = nil
        )
        {
            self.dolbyEDecode = dolbyEDecode
            self.tracks = tracks
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Selector Settings
    public struct AudioSelectorSettings {
        /// Audio Hls Rendition Selection
        public var audioHlsRenditionSelection: MediaLiveClientTypes.AudioHlsRenditionSelection?
        /// Audio Language Selection
        public var audioLanguageSelection: MediaLiveClientTypes.AudioLanguageSelection?
        /// Audio Pid Selection
        public var audioPidSelection: MediaLiveClientTypes.AudioPidSelection?
        /// Audio Track Selection
        public var audioTrackSelection: MediaLiveClientTypes.AudioTrackSelection?

        public init(
            audioHlsRenditionSelection: MediaLiveClientTypes.AudioHlsRenditionSelection? = nil,
            audioLanguageSelection: MediaLiveClientTypes.AudioLanguageSelection? = nil,
            audioPidSelection: MediaLiveClientTypes.AudioPidSelection? = nil,
            audioTrackSelection: MediaLiveClientTypes.AudioTrackSelection? = nil
        )
        {
            self.audioHlsRenditionSelection = audioHlsRenditionSelection
            self.audioLanguageSelection = audioLanguageSelection
            self.audioPidSelection = audioPidSelection
            self.audioTrackSelection = audioTrackSelection
        }
    }

}

extension MediaLiveClientTypes {
    /// Audio Selector
    public struct AudioSelector {
        /// The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
        /// This member is required.
        public var name: Swift.String?
        /// The audio selector settings.
        public var selectorSettings: MediaLiveClientTypes.AudioSelectorSettings?

        public init(
            name: Swift.String? = nil,
            selectorSettings: MediaLiveClientTypes.AudioSelectorSettings? = nil
        )
        {
            self.name = name
            self.selectorSettings = selectorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Details from a failed operation
    public struct BatchFailedResultModel {
        /// ARN of the resource
        public var arn: Swift.String?
        /// Error code for the failed operation
        public var code: Swift.String?
        /// ID of the resource
        public var id: Swift.String?
        /// Error message for the failed operation
        public var message: Swift.String?

        public init(
            arn: Swift.String? = nil,
            code: Swift.String? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.arn = arn
            self.code = code
            self.id = id
            self.message = message
        }
    }

}

extension MediaLiveClientTypes {
    /// Details from a successful operation
    public struct BatchSuccessfulResultModel {
        /// ARN of the resource
        public var arn: Swift.String?
        /// ID of the resource
        public var id: Swift.String?
        /// Current state of the resource
        public var state: Swift.String?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {

    /// Accessibility Type
    public enum AccessibilityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case doesNotImplementAccessibilityFeatures
        case implementsAccessibilityFeatures
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessibilityType] {
            return [
                .doesNotImplementAccessibilityFeatures,
                .implementsAccessibilityFeatures
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .doesNotImplementAccessibilityFeatures: return "DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES"
            case .implementsAccessibilityFeatures: return "IMPLEMENTS_ACCESSIBILITY_FEATURES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Dash Role Caption
    public enum DashRoleCaption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alternate
        case caption
        case commentary
        case description
        case dub
        case easyreader
        case emergency
        case forcedSubtitle
        case karaoke
        case main
        case metadata
        case subtitle
        case supplementary
        case sdkUnknown(Swift.String)

        public static var allCases: [DashRoleCaption] {
            return [
                .alternate,
                .caption,
                .commentary,
                .description,
                .dub,
                .easyreader,
                .emergency,
                .forcedSubtitle,
                .karaoke,
                .main,
                .metadata,
                .subtitle,
                .supplementary
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alternate: return "ALTERNATE"
            case .caption: return "CAPTION"
            case .commentary: return "COMMENTARY"
            case .description: return "DESCRIPTION"
            case .dub: return "DUB"
            case .easyreader: return "EASYREADER"
            case .emergency: return "EMERGENCY"
            case .forcedSubtitle: return "FORCED-SUBTITLE"
            case .karaoke: return "KARAOKE"
            case .main: return "MAIN"
            case .metadata: return "METADATA"
            case .subtitle: return "SUBTITLE"
            case .supplementary: return "SUPPLEMENTARY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Arib Destination Settings
    public struct AribDestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// Burn In Alignment
    public enum BurnInAlignment: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case centered
        case `left`
        case smart
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInAlignment] {
            return [
                .centered,
                .left,
                .smart
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .centered: return "CENTERED"
            case .left: return "LEFT"
            case .smart: return "SMART"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Burn In Background Color
    public enum BurnInBackgroundColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInBackgroundColor] {
            return [
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Location
    public struct InputLocation {
        /// key used to extract the password from EC2 Parameter store
        public var passwordParam: Swift.String?
        /// Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
        /// This member is required.
        public var uri: Swift.String?
        /// Documentation update needed
        public var username: Swift.String?

        public init(
            passwordParam: Swift.String? = nil,
            uri: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.uri = uri
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {

    /// Burn In Font Color
    public enum BurnInFontColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInFontColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Burn In Outline Color
    public enum BurnInOutlineColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInOutlineColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Burn In Shadow Color
    public enum BurnInShadowColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInShadowColor] {
            return [
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Burn In Teletext Grid Control
    public enum BurnInTeletextGridControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fixed
        case scaled
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInTeletextGridControl] {
            return [
                .fixed,
                .scaled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .scaled: return "SCALED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Burn In Destination Settings
    public struct BurnInDestinationSettings {
        /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
        public var alignment: MediaLiveClientTypes.BurnInAlignment?
        /// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
        public var backgroundColor: MediaLiveClientTypes.BurnInBackgroundColor?
        /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var backgroundOpacity: Swift.Int?
        /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
        public var font: MediaLiveClientTypes.InputLocation?
        /// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var fontColor: MediaLiveClientTypes.BurnInFontColor?
        /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
        public var fontOpacity: Swift.Int?
        /// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
        public var fontResolution: Swift.Int?
        /// When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
        public var fontSize: Swift.String?
        /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineColor: MediaLiveClientTypes.BurnInOutlineColor?
        /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineSize: Swift.Int?
        /// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
        public var shadowColor: MediaLiveClientTypes.BurnInShadowColor?
        /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var shadowOpacity: Swift.Int?
        /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
        public var shadowXOffset: Swift.Int?
        /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
        public var shadowYOffset: Swift.Int?
        /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
        public var teletextGridControl: MediaLiveClientTypes.BurnInTeletextGridControl?
        /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
        public var xPosition: Swift.Int?
        /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
        public var yPosition: Swift.Int?

        public init(
            alignment: MediaLiveClientTypes.BurnInAlignment? = nil,
            backgroundColor: MediaLiveClientTypes.BurnInBackgroundColor? = nil,
            backgroundOpacity: Swift.Int? = nil,
            font: MediaLiveClientTypes.InputLocation? = nil,
            fontColor: MediaLiveClientTypes.BurnInFontColor? = nil,
            fontOpacity: Swift.Int? = nil,
            fontResolution: Swift.Int? = nil,
            fontSize: Swift.String? = nil,
            outlineColor: MediaLiveClientTypes.BurnInOutlineColor? = nil,
            outlineSize: Swift.Int? = nil,
            shadowColor: MediaLiveClientTypes.BurnInShadowColor? = nil,
            shadowOpacity: Swift.Int? = nil,
            shadowXOffset: Swift.Int? = nil,
            shadowYOffset: Swift.Int? = nil,
            teletextGridControl: MediaLiveClientTypes.BurnInTeletextGridControl? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.alignment = alignment
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.font = font
            self.fontColor = fontColor
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontSize = fontSize
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.teletextGridControl = teletextGridControl
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }

}

extension MediaLiveClientTypes {

    /// Dvb Sub Destination Alignment
    public enum DvbSubDestinationAlignment: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case centered
        case `left`
        case smart
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationAlignment] {
            return [
                .centered,
                .left,
                .smart
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .centered: return "CENTERED"
            case .left: return "LEFT"
            case .smart: return "SMART"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Dvb Sub Destination Background Color
    public enum DvbSubDestinationBackgroundColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationBackgroundColor] {
            return [
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Dvb Sub Destination Font Color
    public enum DvbSubDestinationFontColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationFontColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Dvb Sub Destination Outline Color
    public enum DvbSubDestinationOutlineColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationOutlineColor] {
            return [
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Dvb Sub Destination Shadow Color
    public enum DvbSubDestinationShadowColor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationShadowColor] {
            return [
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Dvb Sub Destination Teletext Grid Control
    public enum DvbSubDestinationTeletextGridControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fixed
        case scaled
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubDestinationTeletextGridControl] {
            return [
                .fixed,
                .scaled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .scaled: return "SCALED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Destination Settings
    public struct DvbSubDestinationSettings {
        /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var alignment: MediaLiveClientTypes.DvbSubDestinationAlignment?
        /// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
        public var backgroundColor: MediaLiveClientTypes.DvbSubDestinationBackgroundColor?
        /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var backgroundOpacity: Swift.Int?
        /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
        public var font: MediaLiveClientTypes.InputLocation?
        /// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var fontColor: MediaLiveClientTypes.DvbSubDestinationFontColor?
        /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
        public var fontOpacity: Swift.Int?
        /// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
        public var fontResolution: Swift.Int?
        /// When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
        public var fontSize: Swift.String?
        /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineColor: MediaLiveClientTypes.DvbSubDestinationOutlineColor?
        /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var outlineSize: Swift.Int?
        /// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
        public var shadowColor: MediaLiveClientTypes.DvbSubDestinationShadowColor?
        /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
        public var shadowOpacity: Swift.Int?
        /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
        public var shadowXOffset: Swift.Int?
        /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
        public var shadowYOffset: Swift.Int?
        /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
        public var teletextGridControl: MediaLiveClientTypes.DvbSubDestinationTeletextGridControl?
        /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var xPosition: Swift.Int?
        /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public var yPosition: Swift.Int?

        public init(
            alignment: MediaLiveClientTypes.DvbSubDestinationAlignment? = nil,
            backgroundColor: MediaLiveClientTypes.DvbSubDestinationBackgroundColor? = nil,
            backgroundOpacity: Swift.Int? = nil,
            font: MediaLiveClientTypes.InputLocation? = nil,
            fontColor: MediaLiveClientTypes.DvbSubDestinationFontColor? = nil,
            fontOpacity: Swift.Int? = nil,
            fontResolution: Swift.Int? = nil,
            fontSize: Swift.String? = nil,
            outlineColor: MediaLiveClientTypes.DvbSubDestinationOutlineColor? = nil,
            outlineSize: Swift.Int? = nil,
            shadowColor: MediaLiveClientTypes.DvbSubDestinationShadowColor? = nil,
            shadowOpacity: Swift.Int? = nil,
            shadowXOffset: Swift.Int? = nil,
            shadowYOffset: Swift.Int? = nil,
            teletextGridControl: MediaLiveClientTypes.DvbSubDestinationTeletextGridControl? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.alignment = alignment
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.font = font
            self.fontColor = fontColor
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontSize = fontSize
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.teletextGridControl = teletextGridControl
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }

}

extension MediaLiveClientTypes {

    /// Ebu Tt DFill Line Gap Control
    public enum EbuTtDFillLineGapControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EbuTtDFillLineGapControl] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Ebu Tt DDestination Style Control
    public enum EbuTtDDestinationStyleControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [EbuTtDDestinationStyleControl] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Ebu Tt DDestination Settings
    public struct EbuTtDDestinationSettings {
        /// Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
        public var copyrightHolder: Swift.String?
        /// Specifies how to handle the gap between the lines (in multi-line captions).
        ///
        /// * enabled: Fill with the captions background color (as specified in the input captions).
        ///
        /// * disabled: Leave the gap unfilled.
        public var fillLineGap: MediaLiveClientTypes.EbuTtDFillLineGapControl?
        /// Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size.
        ///
        /// * Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font).
        ///
        /// * Leave blank to set the family to “monospace”.
        public var fontFamily: Swift.String?
        /// Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions.
        ///
        /// * include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext.
        ///
        /// * exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
        public var styleControl: MediaLiveClientTypes.EbuTtDDestinationStyleControl?

        public init(
            copyrightHolder: Swift.String? = nil,
            fillLineGap: MediaLiveClientTypes.EbuTtDFillLineGapControl? = nil,
            fontFamily: Swift.String? = nil,
            styleControl: MediaLiveClientTypes.EbuTtDDestinationStyleControl? = nil
        )
        {
            self.copyrightHolder = copyrightHolder
            self.fillLineGap = fillLineGap
            self.fontFamily = fontFamily
            self.styleControl = styleControl
        }
    }

}

extension MediaLiveClientTypes {
    /// Embedded Destination Settings
    public struct EmbeddedDestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Embedded Plus Scte20 Destination Settings
    public struct EmbeddedPlusScte20DestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Rtmp Caption Info Destination Settings
    public struct RtmpCaptionInfoDestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Scte20 Plus Embedded Destination Settings
    public struct Scte20PlusEmbeddedDestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Scte27 Destination Settings
    public struct Scte27DestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Smpte Tt Destination Settings
    public struct SmpteTtDestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Teletext Destination Settings
    public struct TeletextDestinationSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// Ttml Destination Style Control
    public enum TtmlDestinationStyleControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case passthrough
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [TtmlDestinationStyleControl] {
            return [
                .passthrough,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Ttml Destination Settings
    public struct TtmlDestinationSettings {
        /// This field is not currently supported and will not affect the output styling. Leave the default value.
        public var styleControl: MediaLiveClientTypes.TtmlDestinationStyleControl?

        public init(
            styleControl: MediaLiveClientTypes.TtmlDestinationStyleControl? = nil
        )
        {
            self.styleControl = styleControl
        }
    }

}

extension MediaLiveClientTypes {

    /// Webvtt Destination Style Control
    public enum WebvttDestinationStyleControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noStyleData
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [WebvttDestinationStyleControl] {
            return [
                .noStyleData,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noStyleData: return "NO_STYLE_DATA"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Webvtt Destination Settings
    public struct WebvttDestinationSettings {
        /// Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
        public var styleControl: MediaLiveClientTypes.WebvttDestinationStyleControl?

        public init(
            styleControl: MediaLiveClientTypes.WebvttDestinationStyleControl? = nil
        )
        {
            self.styleControl = styleControl
        }
    }

}

extension MediaLiveClientTypes {
    /// Caption Destination Settings
    public struct CaptionDestinationSettings {
        /// Arib Destination Settings
        public var aribDestinationSettings: MediaLiveClientTypes.AribDestinationSettings?
        /// Burn In Destination Settings
        public var burnInDestinationSettings: MediaLiveClientTypes.BurnInDestinationSettings?
        /// Dvb Sub Destination Settings
        public var dvbSubDestinationSettings: MediaLiveClientTypes.DvbSubDestinationSettings?
        /// Ebu Tt DDestination Settings
        public var ebuTtDDestinationSettings: MediaLiveClientTypes.EbuTtDDestinationSettings?
        /// Embedded Destination Settings
        public var embeddedDestinationSettings: MediaLiveClientTypes.EmbeddedDestinationSettings?
        /// Embedded Plus Scte20 Destination Settings
        public var embeddedPlusScte20DestinationSettings: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings?
        /// Rtmp Caption Info Destination Settings
        public var rtmpCaptionInfoDestinationSettings: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings?
        /// Scte20 Plus Embedded Destination Settings
        public var scte20PlusEmbeddedDestinationSettings: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings?
        /// Scte27 Destination Settings
        public var scte27DestinationSettings: MediaLiveClientTypes.Scte27DestinationSettings?
        /// Smpte Tt Destination Settings
        public var smpteTtDestinationSettings: MediaLiveClientTypes.SmpteTtDestinationSettings?
        /// Teletext Destination Settings
        public var teletextDestinationSettings: MediaLiveClientTypes.TeletextDestinationSettings?
        /// Ttml Destination Settings
        public var ttmlDestinationSettings: MediaLiveClientTypes.TtmlDestinationSettings?
        /// Webvtt Destination Settings
        public var webvttDestinationSettings: MediaLiveClientTypes.WebvttDestinationSettings?

        public init(
            aribDestinationSettings: MediaLiveClientTypes.AribDestinationSettings? = nil,
            burnInDestinationSettings: MediaLiveClientTypes.BurnInDestinationSettings? = nil,
            dvbSubDestinationSettings: MediaLiveClientTypes.DvbSubDestinationSettings? = nil,
            ebuTtDDestinationSettings: MediaLiveClientTypes.EbuTtDDestinationSettings? = nil,
            embeddedDestinationSettings: MediaLiveClientTypes.EmbeddedDestinationSettings? = nil,
            embeddedPlusScte20DestinationSettings: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings? = nil,
            rtmpCaptionInfoDestinationSettings: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings? = nil,
            scte20PlusEmbeddedDestinationSettings: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings? = nil,
            scte27DestinationSettings: MediaLiveClientTypes.Scte27DestinationSettings? = nil,
            smpteTtDestinationSettings: MediaLiveClientTypes.SmpteTtDestinationSettings? = nil,
            teletextDestinationSettings: MediaLiveClientTypes.TeletextDestinationSettings? = nil,
            ttmlDestinationSettings: MediaLiveClientTypes.TtmlDestinationSettings? = nil,
            webvttDestinationSettings: MediaLiveClientTypes.WebvttDestinationSettings? = nil
        )
        {
            self.aribDestinationSettings = aribDestinationSettings
            self.burnInDestinationSettings = burnInDestinationSettings
            self.dvbSubDestinationSettings = dvbSubDestinationSettings
            self.ebuTtDDestinationSettings = ebuTtDDestinationSettings
            self.embeddedDestinationSettings = embeddedDestinationSettings
            self.embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettings
            self.rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettings
            self.scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettings
            self.scte27DestinationSettings = scte27DestinationSettings
            self.smpteTtDestinationSettings = smpteTtDestinationSettings
            self.teletextDestinationSettings = teletextDestinationSettings
            self.ttmlDestinationSettings = ttmlDestinationSettings
            self.webvttDestinationSettings = webvttDestinationSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Caption Description
    public struct CaptionDescription {
        /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds. This signaling is added to HLS output group and MediaPackage output group.
        public var accessibility: MediaLiveClientTypes.AccessibilityType?
        /// Identifies the DASH roles to assign to this captions output. Applies only when the captions output is configured for DVB DASH accessibility signaling.
        public var captionDashRoles: [MediaLiveClientTypes.DashRoleCaption]?
        /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
        /// This member is required.
        public var captionSelectorName: Swift.String?
        /// Additional settings for captions destination that depend on the destination type.
        public var destinationSettings: MediaLiveClientTypes.CaptionDestinationSettings?
        /// Identifies DVB DASH accessibility signaling in this captions output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
        public var dvbDashAccessibility: MediaLiveClientTypes.DvbDashAccessibility?
        /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
        public var languageCode: Swift.String?
        /// Human readable information to indicate captions available for players (eg. English, or Spanish).
        public var languageDescription: Swift.String?
        /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
        /// This member is required.
        public var name: Swift.String?

        public init(
            accessibility: MediaLiveClientTypes.AccessibilityType? = nil,
            captionDashRoles: [MediaLiveClientTypes.DashRoleCaption]? = nil,
            captionSelectorName: Swift.String? = nil,
            destinationSettings: MediaLiveClientTypes.CaptionDestinationSettings? = nil,
            dvbDashAccessibility: MediaLiveClientTypes.DvbDashAccessibility? = nil,
            languageCode: Swift.String? = nil,
            languageDescription: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.accessibility = accessibility
            self.captionDashRoles = captionDashRoles
            self.captionSelectorName = captionSelectorName
            self.destinationSettings = destinationSettings
            self.dvbDashAccessibility = dvbDashAccessibility
            self.languageCode = languageCode
            self.languageDescription = languageDescription
            self.name = name
        }
    }

}

extension MediaLiveClientTypes {
    /// Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
    public struct CaptionLanguageMapping {
        /// The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
        /// This member is required.
        public var captionChannel: Swift.Int?
        /// Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
        /// This member is required.
        public var languageCode: Swift.String?
        /// Textual description of language
        /// This member is required.
        public var languageDescription: Swift.String?

        public init(
            captionChannel: Swift.Int? = nil,
            languageCode: Swift.String? = nil,
            languageDescription: Swift.String? = nil
        )
        {
            self.captionChannel = captionChannel
            self.languageCode = languageCode
            self.languageDescription = languageDescription
        }
    }

}

extension MediaLiveClientTypes {
    /// Ancillary Source Settings
    public struct AncillarySourceSettings {
        /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
        public var sourceAncillaryChannelNumber: Swift.Int?

        public init(
            sourceAncillaryChannelNumber: Swift.Int? = nil
        )
        {
            self.sourceAncillaryChannelNumber = sourceAncillaryChannelNumber
        }
    }

}

extension MediaLiveClientTypes {
    /// Arib Source Settings
    public struct AribSourceSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// Dvb Sub Ocr Language
    public enum DvbSubOcrLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deu
        case eng
        case fra
        case nld
        case por
        case spa
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubOcrLanguage] {
            return [
                .deu,
                .eng,
                .fra,
                .nld,
                .por,
                .spa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deu: return "DEU"
            case .eng: return "ENG"
            case .fra: return "FRA"
            case .nld: return "NLD"
            case .por: return "POR"
            case .spa: return "SPA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Dvb Sub Source Settings
    public struct DvbSubSourceSettings {
        /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
        public var ocrLanguage: MediaLiveClientTypes.DvbSubOcrLanguage?
        /// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
        public var pid: Swift.Int?

        public init(
            ocrLanguage: MediaLiveClientTypes.DvbSubOcrLanguage? = nil,
            pid: Swift.Int? = nil
        )
        {
            self.ocrLanguage = ocrLanguage
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes {

    /// Embedded Convert608 To708
    public enum EmbeddedConvert608To708: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedConvert608To708] {
            return [
                .disabled,
                .upconvert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Embedded Scte20 Detection
    public enum EmbeddedScte20Detection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedScte20Detection] {
            return [
                .auto,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Embedded Source Settings
    public struct EmbeddedSourceSettings {
        /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
        public var convert608To708: MediaLiveClientTypes.EmbeddedConvert608To708?
        /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
        public var scte20Detection: MediaLiveClientTypes.EmbeddedScte20Detection?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public var source608ChannelNumber: Swift.Int?
        /// This field is unused and deprecated.
        public var source608TrackNumber: Swift.Int?

        public init(
            convert608To708: MediaLiveClientTypes.EmbeddedConvert608To708? = nil,
            scte20Detection: MediaLiveClientTypes.EmbeddedScte20Detection? = nil,
            source608ChannelNumber: Swift.Int? = nil,
            source608TrackNumber: Swift.Int? = nil
        )
        {
            self.convert608To708 = convert608To708
            self.scte20Detection = scte20Detection
            self.source608ChannelNumber = source608ChannelNumber
            self.source608TrackNumber = source608TrackNumber
        }
    }

}

extension MediaLiveClientTypes {

    /// Scte20 Convert608 To708
    public enum Scte20Convert608To708: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte20Convert608To708] {
            return [
                .disabled,
                .upconvert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Scte20 Source Settings
    public struct Scte20SourceSettings {
        /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
        public var convert608To708: MediaLiveClientTypes.Scte20Convert608To708?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public var source608ChannelNumber: Swift.Int?

        public init(
            convert608To708: MediaLiveClientTypes.Scte20Convert608To708? = nil,
            source608ChannelNumber: Swift.Int? = nil
        )
        {
            self.convert608To708 = convert608To708
            self.source608ChannelNumber = source608ChannelNumber
        }
    }

}

extension MediaLiveClientTypes {

    /// Scte27 Ocr Language
    public enum Scte27OcrLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deu
        case eng
        case fra
        case nld
        case por
        case spa
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte27OcrLanguage] {
            return [
                .deu,
                .eng,
                .fra,
                .nld,
                .por,
                .spa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deu: return "DEU"
            case .eng: return "ENG"
            case .fra: return "FRA"
            case .nld: return "NLD"
            case .por: return "POR"
            case .spa: return "SPA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Scte27 Source Settings
    public struct Scte27SourceSettings {
        /// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
        public var ocrLanguage: MediaLiveClientTypes.Scte27OcrLanguage?
        /// The pid field is used in conjunction with the caption selector languageCode field as follows:
        ///
        /// * Specify PID and Language: Extracts captions from that PID; the language is "informational".
        ///
        /// * Specify PID and omit Language: Extracts the specified PID.
        ///
        /// * Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be.
        ///
        /// * Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
        public var pid: Swift.Int?

        public init(
            ocrLanguage: MediaLiveClientTypes.Scte27OcrLanguage? = nil,
            pid: Swift.Int? = nil
        )
        {
            self.ocrLanguage = ocrLanguage
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes {
    /// Caption Rectangle
    public struct CaptionRectangle {
        /// See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
        /// This member is required.
        public var height: Swift.Double?
        /// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
        /// This member is required.
        public var leftOffset: Swift.Double?
        /// See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
        /// This member is required.
        public var topOffset: Swift.Double?
        /// See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
        /// This member is required.
        public var width: Swift.Double?

        public init(
            height: Swift.Double? = nil,
            leftOffset: Swift.Double? = nil,
            topOffset: Swift.Double? = nil,
            width: Swift.Double? = nil
        )
        {
            self.height = height
            self.leftOffset = leftOffset
            self.topOffset = topOffset
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Teletext Source Settings
    public struct TeletextSourceSettings {
        /// Optionally defines a region where TTML style captions will be displayed
        public var outputRectangle: MediaLiveClientTypes.CaptionRectangle?
        /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
        public var pageNumber: Swift.String?

        public init(
            outputRectangle: MediaLiveClientTypes.CaptionRectangle? = nil,
            pageNumber: Swift.String? = nil
        )
        {
            self.outputRectangle = outputRectangle
            self.pageNumber = pageNumber
        }
    }

}

extension MediaLiveClientTypes {
    /// Caption Selector Settings
    public struct CaptionSelectorSettings {
        /// Ancillary Source Settings
        public var ancillarySourceSettings: MediaLiveClientTypes.AncillarySourceSettings?
        /// Arib Source Settings
        public var aribSourceSettings: MediaLiveClientTypes.AribSourceSettings?
        /// Dvb Sub Source Settings
        public var dvbSubSourceSettings: MediaLiveClientTypes.DvbSubSourceSettings?
        /// Embedded Source Settings
        public var embeddedSourceSettings: MediaLiveClientTypes.EmbeddedSourceSettings?
        /// Scte20 Source Settings
        public var scte20SourceSettings: MediaLiveClientTypes.Scte20SourceSettings?
        /// Scte27 Source Settings
        public var scte27SourceSettings: MediaLiveClientTypes.Scte27SourceSettings?
        /// Teletext Source Settings
        public var teletextSourceSettings: MediaLiveClientTypes.TeletextSourceSettings?

        public init(
            ancillarySourceSettings: MediaLiveClientTypes.AncillarySourceSettings? = nil,
            aribSourceSettings: MediaLiveClientTypes.AribSourceSettings? = nil,
            dvbSubSourceSettings: MediaLiveClientTypes.DvbSubSourceSettings? = nil,
            embeddedSourceSettings: MediaLiveClientTypes.EmbeddedSourceSettings? = nil,
            scte20SourceSettings: MediaLiveClientTypes.Scte20SourceSettings? = nil,
            scte27SourceSettings: MediaLiveClientTypes.Scte27SourceSettings? = nil,
            teletextSourceSettings: MediaLiveClientTypes.TeletextSourceSettings? = nil
        )
        {
            self.ancillarySourceSettings = ancillarySourceSettings
            self.aribSourceSettings = aribSourceSettings
            self.dvbSubSourceSettings = dvbSubSourceSettings
            self.embeddedSourceSettings = embeddedSourceSettings
            self.scte20SourceSettings = scte20SourceSettings
            self.scte27SourceSettings = scte27SourceSettings
            self.teletextSourceSettings = teletextSourceSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Caption Selector
    public struct CaptionSelector {
        /// When specified this field indicates the three letter language code of the caption track to extract from the source.
        public var languageCode: Swift.String?
        /// Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
        /// This member is required.
        public var name: Swift.String?
        /// Caption selector settings.
        public var selectorSettings: MediaLiveClientTypes.CaptionSelectorSettings?

        public init(
            languageCode: Swift.String? = nil,
            name: Swift.String? = nil,
            selectorSettings: MediaLiveClientTypes.CaptionSelectorSettings? = nil
        )
        {
            self.languageCode = languageCode
            self.name = name
            self.selectorSettings = selectorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ChannelEgressEndpoint
    public struct ChannelEgressEndpoint {
        /// Public IP of where a channel's output comes from
        public var sourceIp: Swift.String?

        public init(
            sourceIp: Swift.String? = nil
        )
        {
            self.sourceIp = sourceIp
        }
    }

}

extension MediaLiveClientTypes {

    /// Property of RestartChannelPipelinesRequest
    public enum ChannelPipelineIdToRestart: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pipeline0
        case pipeline1
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelPipelineIdToRestart] {
            return [
                .pipeline0,
                .pipeline1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pipeline0: return "PIPELINE_0"
            case .pipeline1: return "PIPELINE_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Elemental anywhere settings
    public struct DescribeAnywhereSettings {
        /// The ID of the channel placement group for the channel.
        public var channelPlacementGroupId: Swift.String?
        /// The ID of the cluster for the channel.
        public var clusterId: Swift.String?

        public init(
            channelPlacementGroupId: Swift.String? = nil,
            clusterId: Swift.String? = nil
        )
        {
            self.channelPlacementGroupId = channelPlacementGroupId
            self.clusterId = clusterId
        }
    }

}

extension MediaLiveClientTypes {

    /// Maximum CDI input resolution; SD is 480i and 576i up to 30 frames-per-second (fps), HD is 720p up to 60 fps / 1080i up to 30 fps, FHD is 1080p up to 60 fps, UHD is 2160p up to 60 fps
    public enum CdiInputResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fhd
        case hd
        case sd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [CdiInputResolution] {
            return [
                .fhd,
                .hd,
                .sd,
                .uhd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fhd: return "FHD"
            case .hd: return "HD"
            case .sd: return "SD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for CdiInputSpecification
    public struct CdiInputSpecification {
        /// Maximum CDI input resolution
        public var resolution: MediaLiveClientTypes.CdiInputResolution?

        public init(
            resolution: MediaLiveClientTypes.CdiInputResolution? = nil
        )
        {
            self.resolution = resolution
        }
    }

}

extension MediaLiveClientTypes {

    /// A standard channel has two encoding pipelines and a single pipeline channel only has one.
    public enum ChannelClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case singlePipeline
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelClass] {
            return [
                .singlePipeline,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .singlePipeline: return "SINGLE_PIPELINE"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// MediaPackage Output Destination Settings
    public struct MediaPackageOutputDestinationSettings {
        /// ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
        public var channelId: Swift.String?

        public init(
            channelId: Swift.String? = nil
        )
        {
            self.channelId = channelId
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex Program Input Destination Settings for outputting a Channel to a Multiplex
    public struct MultiplexProgramChannelDestinationSettings {
        /// The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
        public var multiplexId: Swift.String?
        /// The program name of the Multiplex program that the encoder is providing output to.
        public var programName: Swift.String?

        public init(
            multiplexId: Swift.String? = nil,
            programName: Swift.String? = nil
        )
        {
            self.multiplexId = multiplexId
            self.programName = programName
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for OutputDestinationSettings
    public struct OutputDestinationSettings {
        /// key used to extract the password from EC2 Parameter store
        public var passwordParam: Swift.String?
        /// Stream name for RTMP destinations (URLs of type rtmp://)
        public var streamName: Swift.String?
        /// A URL specifying a destination
        public var url: Swift.String?
        /// username for destination
        public var username: Swift.String?

        public init(
            passwordParam: Swift.String? = nil,
            streamName: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.streamName = streamName
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for SrtOutputDestinationSettings
    public struct SrtOutputDestinationSettings {
        /// Arn used to extract the password from Secrets Manager
        public var encryptionPassphraseSecretArn: Swift.String?
        /// Stream id for SRT destinations (URLs of type srt://)
        public var streamId: Swift.String?
        /// A URL specifying a destination
        public var url: Swift.String?

        public init(
            encryptionPassphraseSecretArn: Swift.String? = nil,
            streamId: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.encryptionPassphraseSecretArn = encryptionPassphraseSecretArn
            self.streamId = streamId
            self.url = url
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for OutputDestination
    public struct OutputDestination {
        /// User-specified id. This is used in an output group or an output.
        public var id: Swift.String?
        /// Destination settings for a MediaPackage output; one destination for both encoders.
        public var mediaPackageSettings: [MediaLiveClientTypes.MediaPackageOutputDestinationSettings]?
        /// Destination settings for a Multiplex output; one destination for both encoders.
        public var multiplexSettings: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings?
        /// Destination settings for a standard output; one destination for each redundant encoder.
        public var settings: [MediaLiveClientTypes.OutputDestinationSettings]?
        /// SRT settings for an SRT output; one destination for each redundant encoder.
        public var srtSettings: [MediaLiveClientTypes.SrtOutputDestinationSettings]?

        public init(
            id: Swift.String? = nil,
            mediaPackageSettings: [MediaLiveClientTypes.MediaPackageOutputDestinationSettings]? = nil,
            multiplexSettings: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings? = nil,
            settings: [MediaLiveClientTypes.OutputDestinationSettings]? = nil,
            srtSettings: [MediaLiveClientTypes.SrtOutputDestinationSettings]? = nil
        )
        {
            self.id = id
            self.mediaPackageSettings = mediaPackageSettings
            self.multiplexSettings = multiplexSettings
            self.settings = settings
            self.srtSettings = srtSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for AudioSilenceFailoverSettings
    public struct AudioSilenceFailoverSettings {
        /// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
        /// This member is required.
        public var audioSelectorName: Swift.String?
        /// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
        public var audioSilenceThresholdMsec: Swift.Int?

        public init(
            audioSelectorName: Swift.String? = nil,
            audioSilenceThresholdMsec: Swift.Int? = nil
        )
        {
            self.audioSelectorName = audioSelectorName
            self.audioSilenceThresholdMsec = audioSilenceThresholdMsec
        }
    }

}

extension MediaLiveClientTypes {
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    public struct InputLossFailoverSettings {
        /// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
        public var inputLossThresholdMsec: Swift.Int?

        public init(
            inputLossThresholdMsec: Swift.Int? = nil
        )
        {
            self.inputLossThresholdMsec = inputLossThresholdMsec
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for VideoBlackFailoverSettings
    public struct VideoBlackFailoverSettings {
        /// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
        public var blackDetectThreshold: Swift.Double?
        /// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
        public var videoBlackThresholdMsec: Swift.Int?

        public init(
            blackDetectThreshold: Swift.Double? = nil,
            videoBlackThresholdMsec: Swift.Int? = nil
        )
        {
            self.blackDetectThreshold = blackDetectThreshold
            self.videoBlackThresholdMsec = videoBlackThresholdMsec
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for one failover condition.
    public struct FailoverConditionSettings {
        /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
        public var audioSilenceSettings: MediaLiveClientTypes.AudioSilenceFailoverSettings?
        /// MediaLive will perform a failover if content is not detected in this input for the specified period.
        public var inputLossSettings: MediaLiveClientTypes.InputLossFailoverSettings?
        /// MediaLive will perform a failover if content is considered black for the specified period.
        public var videoBlackSettings: MediaLiveClientTypes.VideoBlackFailoverSettings?

        public init(
            audioSilenceSettings: MediaLiveClientTypes.AudioSilenceFailoverSettings? = nil,
            inputLossSettings: MediaLiveClientTypes.InputLossFailoverSettings? = nil,
            videoBlackSettings: MediaLiveClientTypes.VideoBlackFailoverSettings? = nil
        )
        {
            self.audioSilenceSettings = audioSilenceSettings
            self.inputLossSettings = inputLossSettings
            self.videoBlackSettings = videoBlackSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
    public struct FailoverCondition {
        /// Failover condition type-specific settings.
        public var failoverConditionSettings: MediaLiveClientTypes.FailoverConditionSettings?

        public init(
            failoverConditionSettings: MediaLiveClientTypes.FailoverConditionSettings? = nil
        )
        {
            self.failoverConditionSettings = failoverConditionSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Input preference when deciding which input to make active when a previously failed input has recovered. If "EQUAL_INPUT_PREFERENCE", then the active input will stay active as long as it is healthy. If "PRIMARY_INPUT_PREFERRED", then always switch back to the primary input when it is healthy.
    public enum InputPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case equalInputPreference
        case primaryInputPreferred
        case sdkUnknown(Swift.String)

        public static var allCases: [InputPreference] {
            return [
                .equalInputPreference,
                .primaryInputPreferred
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .equalInputPreference: return "EQUAL_INPUT_PREFERENCE"
            case .primaryInputPreferred: return "PRIMARY_INPUT_PREFERRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// The settings for Automatic Input Failover.
    public struct AutomaticInputFailoverSettings {
        /// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
        public var errorClearTimeMsec: Swift.Int?
        /// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
        public var failoverConditions: [MediaLiveClientTypes.FailoverCondition]?
        /// Input preference when deciding which input to make active when a previously failed input has recovered.
        public var inputPreference: MediaLiveClientTypes.InputPreference?
        /// The input ID of the secondary input in the automatic input failover pair.
        /// This member is required.
        public var secondaryInputId: Swift.String?

        public init(
            errorClearTimeMsec: Swift.Int? = nil,
            failoverConditions: [MediaLiveClientTypes.FailoverCondition]? = nil,
            inputPreference: MediaLiveClientTypes.InputPreference? = nil,
            secondaryInputId: Swift.String? = nil
        )
        {
            self.errorClearTimeMsec = errorClearTimeMsec
            self.failoverConditions = failoverConditions
            self.inputPreference = inputPreference
            self.secondaryInputId = secondaryInputId
        }
    }

}

extension MediaLiveClientTypes {

    /// Input Deblock Filter
    public enum InputDeblockFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeblockFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Denoise Filter
    public enum InputDenoiseFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDenoiseFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Filter
    public enum InputFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disabled
        case forced
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFilter] {
            return [
                .auto,
                .disabled,
                .forced
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case .forced: return "FORCED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Scte35 Source Type
    public enum HlsScte35SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case manifest
        case segments
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsScte35SourceType] {
            return [
                .manifest,
                .segments
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .manifest: return "MANIFEST"
            case .segments: return "SEGMENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Input Settings
    public struct HlsInputSettings {
        /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
        public var bandwidth: Swift.Int?
        /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
        public var bufferSegments: Swift.Int?
        /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
        public var retries: Swift.Int?
        /// The number of seconds between retries when an attempt to read a manifest or segment fails.
        public var retryInterval: Swift.Int?
        /// Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
        public var scte35Source: MediaLiveClientTypes.HlsScte35SourceType?

        public init(
            bandwidth: Swift.Int? = nil,
            bufferSegments: Swift.Int? = nil,
            retries: Swift.Int? = nil,
            retryInterval: Swift.Int? = nil,
            scte35Source: MediaLiveClientTypes.HlsScte35SourceType? = nil
        )
        {
            self.bandwidth = bandwidth
            self.bufferSegments = bufferSegments
            self.retries = retries
            self.retryInterval = retryInterval
            self.scte35Source = scte35Source
        }
    }

}

extension MediaLiveClientTypes {
    /// Multicast-specific input settings.
    public struct MulticastInputSettings {
        /// Optionally, a source ip address to filter by for Source-specific Multicast (SSM)
        public var sourceIpAddress: Swift.String?

        public init(
            sourceIpAddress: Swift.String? = nil
        )
        {
            self.sourceIpAddress = sourceIpAddress
        }
    }

}

extension MediaLiveClientTypes {

    /// Network Input Server Validation
    public enum NetworkInputServerValidation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case checkCryptographyAndValidateName
        case checkCryptographyOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkInputServerValidation] {
            return [
                .checkCryptographyAndValidateName,
                .checkCryptographyOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .checkCryptographyAndValidateName: return "CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME"
            case .checkCryptographyOnly: return "CHECK_CRYPTOGRAPHY_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Network source to transcode. Must be accessible to the Elemental Live node that is running the live event through a network connection.
    public struct NetworkInputSettings {
        /// Specifies HLS input settings when the uri is for a HLS manifest.
        public var hlsInputSettings: MediaLiveClientTypes.HlsInputSettings?
        /// Specifies multicast input settings when the uri is for a multicast event.
        public var multicastInputSettings: MediaLiveClientTypes.MulticastInputSettings?
        /// Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
        public var serverValidation: MediaLiveClientTypes.NetworkInputServerValidation?

        public init(
            hlsInputSettings: MediaLiveClientTypes.HlsInputSettings? = nil,
            multicastInputSettings: MediaLiveClientTypes.MulticastInputSettings? = nil,
            serverValidation: MediaLiveClientTypes.NetworkInputServerValidation? = nil
        )
        {
            self.hlsInputSettings = hlsInputSettings
            self.multicastInputSettings = multicastInputSettings
            self.serverValidation = serverValidation
        }
    }

}

extension MediaLiveClientTypes {

    /// Smpte2038 Data Preference
    public enum Smpte2038DataPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case prefer
        case sdkUnknown(Swift.String)

        public static var allCases: [Smpte2038DataPreference] {
            return [
                .ignore,
                .prefer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .prefer: return "PREFER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Source End Behavior
    public enum InputSourceEndBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `continue`
        case loop
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSourceEndBehavior] {
            return [
                .continue,
                .loop
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .continue: return "CONTINUE"
            case .loop: return "LOOP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Video Selector Color Space
    public enum VideoSelectorColorSpace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case hdr10
        case hlg2020
        case rec601
        case rec709
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoSelectorColorSpace] {
            return [
                .follow,
                .hdr10,
                .hlg2020,
                .rec601,
                .rec709
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .hdr10: return "HDR10"
            case .hlg2020: return "HLG_2020"
            case .rec601: return "REC_601"
            case .rec709: return "REC_709"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Hdr10 Settings
    public struct Hdr10Settings {
        /// Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
        public var maxCll: Swift.Int?
        /// Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
        public var maxFall: Swift.Int?

        public init(
            maxCll: Swift.Int? = nil,
            maxFall: Swift.Int? = nil
        )
        {
            self.maxCll = maxCll
            self.maxFall = maxFall
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Selector Color Space Settings
    public struct VideoSelectorColorSpaceSettings {
        /// Hdr10 Settings
        public var hdr10Settings: MediaLiveClientTypes.Hdr10Settings?

        public init(
            hdr10Settings: MediaLiveClientTypes.Hdr10Settings? = nil
        )
        {
            self.hdr10Settings = hdr10Settings
        }
    }

}

extension MediaLiveClientTypes {

    /// Video Selector Color Space Usage
    public enum VideoSelectorColorSpaceUsage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fallback
        case force
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoSelectorColorSpaceUsage] {
            return [
                .fallback,
                .force
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fallback: return "FALLBACK"
            case .force: return "FORCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Video Selector Pid
    public struct VideoSelectorPid {
        /// Selects a specific PID from within a video source.
        public var pid: Swift.Int?

        public init(
            pid: Swift.Int? = nil
        )
        {
            self.pid = pid
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Selector Program Id
    public struct VideoSelectorProgramId {
        /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
        public var programId: Swift.Int?

        public init(
            programId: Swift.Int? = nil
        )
        {
            self.programId = programId
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Selector Settings
    public struct VideoSelectorSettings {
        /// Video Selector Pid
        public var videoSelectorPid: MediaLiveClientTypes.VideoSelectorPid?
        /// Video Selector Program Id
        public var videoSelectorProgramId: MediaLiveClientTypes.VideoSelectorProgramId?

        public init(
            videoSelectorPid: MediaLiveClientTypes.VideoSelectorPid? = nil,
            videoSelectorProgramId: MediaLiveClientTypes.VideoSelectorProgramId? = nil
        )
        {
            self.videoSelectorPid = videoSelectorPid
            self.videoSelectorProgramId = videoSelectorProgramId
        }
    }

}

extension MediaLiveClientTypes {
    /// Specifies a particular video stream within an input source. An input may have only a single video selector.
    public struct VideoSelector {
        /// Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
        public var colorSpace: MediaLiveClientTypes.VideoSelectorColorSpace?
        /// Color space settings
        public var colorSpaceSettings: MediaLiveClientTypes.VideoSelectorColorSpaceSettings?
        /// Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
        public var colorSpaceUsage: MediaLiveClientTypes.VideoSelectorColorSpaceUsage?
        /// The video selector settings.
        public var selectorSettings: MediaLiveClientTypes.VideoSelectorSettings?

        public init(
            colorSpace: MediaLiveClientTypes.VideoSelectorColorSpace? = nil,
            colorSpaceSettings: MediaLiveClientTypes.VideoSelectorColorSpaceSettings? = nil,
            colorSpaceUsage: MediaLiveClientTypes.VideoSelectorColorSpaceUsage? = nil,
            selectorSettings: MediaLiveClientTypes.VideoSelectorSettings? = nil
        )
        {
            self.colorSpace = colorSpace
            self.colorSpaceSettings = colorSpaceSettings
            self.colorSpaceUsage = colorSpaceUsage
            self.selectorSettings = selectorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Live Event input parameters. There can be multiple inputs in a single Live Event.
    public struct InputSettings {
        /// Used to select the audio stream to decode for inputs that have multiple available.
        public var audioSelectors: [MediaLiveClientTypes.AudioSelector]?
        /// Used to select the caption input to use for inputs that have multiple available.
        public var captionSelectors: [MediaLiveClientTypes.CaptionSelector]?
        /// Enable or disable the deblock filter when filtering.
        public var deblockFilter: MediaLiveClientTypes.InputDeblockFilter?
        /// Enable or disable the denoise filter when filtering.
        public var denoiseFilter: MediaLiveClientTypes.InputDenoiseFilter?
        /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
        public var filterStrength: Swift.Int?
        /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default.
        ///
        /// * auto - filtering will be applied depending on input type/quality
        ///
        /// * disabled - no filtering will be applied to the input
        ///
        /// * forced - filtering will be applied regardless of input type
        public var inputFilter: MediaLiveClientTypes.InputFilter?
        /// Input settings.
        public var networkInputSettings: MediaLiveClientTypes.NetworkInputSettings?
        /// PID from which to read SCTE-35 messages. If left undefined, EML will select the first SCTE-35 PID found in the input.
        public var scte35Pid: Swift.Int?
        /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages.
        ///
        /// * PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any).
        ///
        /// * IGNORE: Never extract any ancillary data from SMPTE-2038.
        public var smpte2038DataPreference: MediaLiveClientTypes.Smpte2038DataPreference?
        /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
        public var sourceEndBehavior: MediaLiveClientTypes.InputSourceEndBehavior?
        /// Informs which video elementary stream to decode for input types that have multiple available.
        public var videoSelector: MediaLiveClientTypes.VideoSelector?

        public init(
            audioSelectors: [MediaLiveClientTypes.AudioSelector]? = nil,
            captionSelectors: [MediaLiveClientTypes.CaptionSelector]? = nil,
            deblockFilter: MediaLiveClientTypes.InputDeblockFilter? = nil,
            denoiseFilter: MediaLiveClientTypes.InputDenoiseFilter? = nil,
            filterStrength: Swift.Int? = nil,
            inputFilter: MediaLiveClientTypes.InputFilter? = nil,
            networkInputSettings: MediaLiveClientTypes.NetworkInputSettings? = nil,
            scte35Pid: Swift.Int? = nil,
            smpte2038DataPreference: MediaLiveClientTypes.Smpte2038DataPreference? = nil,
            sourceEndBehavior: MediaLiveClientTypes.InputSourceEndBehavior? = nil,
            videoSelector: MediaLiveClientTypes.VideoSelector? = nil
        )
        {
            self.audioSelectors = audioSelectors
            self.captionSelectors = captionSelectors
            self.deblockFilter = deblockFilter
            self.denoiseFilter = denoiseFilter
            self.filterStrength = filterStrength
            self.inputFilter = inputFilter
            self.networkInputSettings = networkInputSettings
            self.scte35Pid = scte35Pid
            self.smpte2038DataPreference = smpte2038DataPreference
            self.sourceEndBehavior = sourceEndBehavior
            self.videoSelector = videoSelector
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InputAttachment
    public struct InputAttachment {
        /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
        public var automaticInputFailoverSettings: MediaLiveClientTypes.AutomaticInputFailoverSettings?
        /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
        public var inputAttachmentName: Swift.String?
        /// The ID of the input
        public var inputId: Swift.String?
        /// Settings of an input (caption selector, etc.)
        public var inputSettings: MediaLiveClientTypes.InputSettings?
        /// Optional assignment of an input to a logical interface on the Node. Only applies to on premises channels.
        public var logicalInterfaceNames: [Swift.String]?

        public init(
            automaticInputFailoverSettings: MediaLiveClientTypes.AutomaticInputFailoverSettings? = nil,
            inputAttachmentName: Swift.String? = nil,
            inputId: Swift.String? = nil,
            inputSettings: MediaLiveClientTypes.InputSettings? = nil,
            logicalInterfaceNames: [Swift.String]? = nil
        )
        {
            self.automaticInputFailoverSettings = automaticInputFailoverSettings
            self.inputAttachmentName = inputAttachmentName
            self.inputId = inputId
            self.inputSettings = inputSettings
            self.logicalInterfaceNames = logicalInterfaceNames
        }
    }

}

extension MediaLiveClientTypes {

    /// codec in increasing order of complexity
    public enum InputCodec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avc
        case hevc
        case mpeg2
        case sdkUnknown(Swift.String)

        public static var allCases: [InputCodec] {
            return [
                .avc,
                .hevc,
                .mpeg2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avc: return "AVC"
            case .hevc: return "HEVC"
            case .mpeg2: return "MPEG2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Maximum input bitrate in megabits per second. Bitrates up to 50 Mbps are supported currently.
    public enum InputMaximumBitrate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case max10Mbps
        case max20Mbps
        case max50Mbps
        case sdkUnknown(Swift.String)

        public static var allCases: [InputMaximumBitrate] {
            return [
                .max10Mbps,
                .max20Mbps,
                .max50Mbps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .max10Mbps: return "MAX_10_MBPS"
            case .max20Mbps: return "MAX_20_MBPS"
            case .max50Mbps: return "MAX_50_MBPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input resolution based on lines of vertical resolution in the input; SD is less than 720 lines, HD is 720 to 1080 lines, UHD is greater than 1080 lines
    public enum InputResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hd
        case sd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [InputResolution] {
            return [
                .hd,
                .sd,
                .uhd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hd: return "HD"
            case .sd: return "SD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InputSpecification
    public struct InputSpecification {
        /// Input codec
        public var codec: MediaLiveClientTypes.InputCodec?
        /// Maximum input bitrate, categorized coarsely
        public var maximumBitrate: MediaLiveClientTypes.InputMaximumBitrate?
        /// Input resolution, categorized coarsely
        public var resolution: MediaLiveClientTypes.InputResolution?

        public init(
            codec: MediaLiveClientTypes.InputCodec? = nil,
            maximumBitrate: MediaLiveClientTypes.InputMaximumBitrate? = nil,
            resolution: MediaLiveClientTypes.InputResolution? = nil
        )
        {
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.resolution = resolution
        }
    }

}

extension MediaLiveClientTypes {

    /// The log level the user wants for their channel.
    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case debug
        case disabled
        case error
        case info
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .debug,
                .disabled,
                .error,
                .info,
                .warning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .debug: return "DEBUG"
            case .disabled: return "DISABLED"
            case .error: return "ERROR"
            case .info: return "INFO"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The currently selected maintenance day.
    public enum MaintenanceDay: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case friday
        case monday
        case saturday
        case sunday
        case thursday
        case tuesday
        case wednesday
        case sdkUnknown(Swift.String)

        public static var allCases: [MaintenanceDay] {
            return [
                .friday,
                .monday,
                .saturday,
                .sunday,
                .thursday,
                .tuesday,
                .wednesday
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .friday: return "FRIDAY"
            case .monday: return "MONDAY"
            case .saturday: return "SATURDAY"
            case .sunday: return "SUNDAY"
            case .thursday: return "THURSDAY"
            case .tuesday: return "TUESDAY"
            case .wednesday: return "WEDNESDAY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MaintenanceStatus
    public struct MaintenanceStatus {
        /// The currently selected maintenance day.
        public var maintenanceDay: MediaLiveClientTypes.MaintenanceDay?
        /// Maintenance is required by the displayed date and time. Date and time is in ISO.
        public var maintenanceDeadline: Swift.String?
        /// The currently scheduled maintenance date and time. Date and time is in ISO.
        public var maintenanceScheduledDate: Swift.String?
        /// The currently selected maintenance start time. Time is in UTC.
        public var maintenanceStartTime: Swift.String?

        public init(
            maintenanceDay: MediaLiveClientTypes.MaintenanceDay? = nil,
            maintenanceDeadline: Swift.String? = nil,
            maintenanceScheduledDate: Swift.String? = nil,
            maintenanceStartTime: Swift.String? = nil
        )
        {
            self.maintenanceDay = maintenanceDay
            self.maintenanceDeadline = maintenanceDeadline
            self.maintenanceScheduledDate = maintenanceScheduledDate
            self.maintenanceStartTime = maintenanceStartTime
        }
    }

}

extension MediaLiveClientTypes {

    /// Placeholder documentation for ChannelState
    public enum ChannelState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createFailed
        case creating
        case deleted
        case deleting
        case idle
        case recovering
        case running
        case starting
        case stopping
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelState] {
            return [
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .idle,
                .recovering,
                .running,
                .starting,
                .stopping,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .idle: return "IDLE"
            case .recovering: return "RECOVERING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopping: return "STOPPING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// The properties for a private VPC Output
    public struct VpcOutputSettingsDescription {
        /// The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet.
        public var availabilityZones: [Swift.String]?
        /// A list of Elastic Network Interfaces created by MediaLive in the customer's VPC
        public var networkInterfaceIds: [Swift.String]?
        /// A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces.
        public var securityGroupIds: [Swift.String]?
        /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
        public var subnetIds: [Swift.String]?

        public init(
            availabilityZones: [Swift.String]? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.networkInterfaceIds = networkInterfaceIds
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ChannelSummary
    public struct ChannelSummary {
        /// AnywhereSettings settings for this channel.
        public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
        /// The unique arn of the channel.
        public var arn: Swift.String?
        /// Specification of CDI inputs for this channel
        public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
        public var destinations: [MediaLiveClientTypes.OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
        /// The unique id of the channel.
        public var id: Swift.String?
        /// List of input attachments for channel.
        public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
        /// Specification of network and file inputs for this channel
        public var inputSpecification: MediaLiveClientTypes.InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public var logLevel: MediaLiveClientTypes.LogLevel?
        /// Maintenance settings for this channel.
        public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
        /// The name of the channel. (user-mutable)
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public var roleArn: Swift.String?
        /// Placeholder documentation for ChannelState
        public var state: MediaLiveClientTypes.ChannelState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?
        /// Settings for any VPC outputs.
        public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

        public init(
            anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
            arn: Swift.String? = nil,
            cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
            egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
            id: Swift.String? = nil,
            inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
            inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
            logLevel: MediaLiveClientTypes.LogLevel? = nil,
            maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            state: MediaLiveClientTypes.ChannelState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
        )
        {
            self.anywhereSettings = anywhereSettings
            self.arn = arn
            self.cdiInputSpecification = cdiInputSpecification
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.maintenance = maintenance
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
            self.vpc = vpc
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for CloudWatchAlarmTemplateGroupSummary
    public struct CloudWatchAlarmTemplateGroupSummary {
        /// A cloudwatch alarm template group's ARN (Amazon Resource Name)
        /// This member is required.
        public var arn: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A resource's optional description.
        public var description: Swift.String?
        /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
        /// This member is required.
        public var id: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        public var modifiedAt: Foundation.Date?
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// This member is required.
        public var name: Swift.String?
        /// Represents the tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?
        /// The number of templates in a group.
        /// This member is required.
        public var templateCount: Swift.Int?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            templateCount: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.tags = tags
            self.templateCount = templateCount
        }
    }

}

extension MediaLiveClientTypes {

    /// The comparison operator used to compare the specified statistic and the threshold.
    public enum CloudWatchAlarmTemplateComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchAlarmTemplateComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The statistic to apply to the alarm's metric data.
    public enum CloudWatchAlarmTemplateStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchAlarmTemplateStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    public enum CloudWatchAlarmTemplateTargetResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudfrontDistribution
        case mediaconnectFlow
        case medialiveChannel
        case medialiveInputDevice
        case medialiveMultiplex
        case mediapackageChannel
        case mediapackageOriginEndpoint
        case s3Bucket
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchAlarmTemplateTargetResourceType] {
            return [
                .cloudfrontDistribution,
                .mediaconnectFlow,
                .medialiveChannel,
                .medialiveInputDevice,
                .medialiveMultiplex,
                .mediapackageChannel,
                .mediapackageOriginEndpoint,
                .s3Bucket
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudfrontDistribution: return "CLOUDFRONT_DISTRIBUTION"
            case .mediaconnectFlow: return "MEDIACONNECT_FLOW"
            case .medialiveChannel: return "MEDIALIVE_CHANNEL"
            case .medialiveInputDevice: return "MEDIALIVE_INPUT_DEVICE"
            case .medialiveMultiplex: return "MEDIALIVE_MULTIPLEX"
            case .mediapackageChannel: return "MEDIAPACKAGE_CHANNEL"
            case .mediapackageOriginEndpoint: return "MEDIAPACKAGE_ORIGIN_ENDPOINT"
            case .s3Bucket: return "S3_BUCKET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    public enum CloudWatchAlarmTemplateTreatMissingData: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case breaching
        case ignore
        case missing
        case notbreaching
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchAlarmTemplateTreatMissingData] {
            return [
                .breaching,
                .ignore,
                .missing,
                .notbreaching
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .breaching: return "breaching"
            case .ignore: return "ignore"
            case .missing: return "missing"
            case .notbreaching: return "notBreaching"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for CloudWatchAlarmTemplateSummary
    public struct CloudWatchAlarmTemplateSummary {
        /// A cloudwatch alarm template's ARN (Amazon Resource Name)
        /// This member is required.
        public var arn: Swift.String?
        /// The comparison operator used to compare the specified statistic and the threshold.
        /// This member is required.
        public var comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator?
        /// Placeholder documentation for __timestampIso8601
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
        public var datapointsToAlarm: Swift.Int?
        /// A resource's optional description.
        public var description: Swift.String?
        /// The number of periods over which data is compared to the specified threshold.
        /// This member is required.
        public var evaluationPeriods: Swift.Int?
        /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
        /// This member is required.
        public var groupId: Swift.String?
        /// A cloudwatch alarm template's id. AWS provided templates have ids that start with aws-
        /// This member is required.
        public var id: Swift.String?
        /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
        /// This member is required.
        public var metricName: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        public var modifiedAt: Foundation.Date?
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// This member is required.
        public var name: Swift.String?
        /// The period, in seconds, over which the specified statistic is applied.
        /// This member is required.
        public var period: Swift.Int?
        /// The statistic to apply to the alarm's metric data.
        /// This member is required.
        public var statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic?
        /// Represents the tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?
        /// The resource type this template should dynamically generate cloudwatch metric alarms for.
        /// This member is required.
        public var targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType?
        /// The threshold value to compare with the specified statistic.
        /// This member is required.
        public var threshold: Swift.Double?
        /// Specifies how missing data points are treated when evaluating the alarm's condition.
        /// This member is required.
        public var treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData?

        public init(
            arn: Swift.String? = nil,
            comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator? = nil,
            createdAt: Foundation.Date? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            description: Swift.String? = nil,
            evaluationPeriods: Swift.Int? = nil,
            groupId: Swift.String? = nil,
            id: Swift.String? = nil,
            metricName: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            period: Swift.Int? = nil,
            statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType? = nil,
            threshold: Swift.Double? = nil,
            treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData? = nil
        )
        {
            self.arn = arn
            self.comparisonOperator = comparisonOperator
            self.createdAt = createdAt
            self.datapointsToAlarm = datapointsToAlarm
            self.description = description
            self.evaluationPeriods = evaluationPeriods
            self.groupId = groupId
            self.id = id
            self.metricName = metricName
            self.modifiedAt = modifiedAt
            self.name = name
            self.period = period
            self.statistic = statistic
            self.tags = tags
            self.targetResourceType = targetResourceType
            self.threshold = threshold
            self.treatMissingData = treatMissingData
        }
    }

}

extension MediaLiveClientTypes {

    /// Property of colorCorrections. When you are using 3D LUT files to perform color conversion on video, these are the supported color spaces.
    public enum ColorSpace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hdr10
        case hlg2020
        case rec601
        case rec709
        case sdkUnknown(Swift.String)

        public static var allCases: [ColorSpace] {
            return [
                .hdr10,
                .hlg2020,
                .rec601,
                .rec709
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hdr10: return "HDR10"
            case .hlg2020: return "HLG_2020"
            case .rec601: return "REC_601"
            case .rec709: return "REC_709"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Property of ColorCorrectionSettings. Used for custom color space conversion. The object identifies one 3D LUT file and specifies the input/output color space combination that the file will be used for.
    public struct ColorCorrection {
        /// The color space of the input.
        /// This member is required.
        public var inputColorSpace: MediaLiveClientTypes.ColorSpace?
        /// The color space of the output.
        /// This member is required.
        public var outputColorSpace: MediaLiveClientTypes.ColorSpace?
        /// The URI of the 3D LUT file. The protocol must be 's3:' or 's3ssl:':.
        /// This member is required.
        public var uri: Swift.String?

        public init(
            inputColorSpace: MediaLiveClientTypes.ColorSpace? = nil,
            outputColorSpace: MediaLiveClientTypes.ColorSpace? = nil,
            uri: Swift.String? = nil
        )
        {
            self.inputColorSpace = inputColorSpace
            self.outputColorSpace = outputColorSpace
            self.uri = uri
        }
    }

}

extension MediaLiveClientTypes {

    /// Used in DescribeChannelPlacementGroupResult
    public enum ChannelPlacementGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case assigned
        case assigning
        case deleted
        case deleteFailed
        case deleting
        case unassigned
        case unassigning
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelPlacementGroupState] {
            return [
                .assigned,
                .assigning,
                .deleted,
                .deleteFailed,
                .deleting,
                .unassigned,
                .unassigning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .assigned: return "ASSIGNED"
            case .assigning: return "ASSIGNING"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .unassigned: return "UNASSIGNED"
            case .unassigning: return "UNASSIGNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Contains the response for ListChannelPlacementGroups
    public struct DescribeChannelPlacementGroupSummary {
        /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
        public var arn: Swift.String?
        /// Used in ListChannelPlacementGroupsResult
        public var channels: [Swift.String]?
        /// The ID of the Cluster that the Node belongs to.
        public var clusterId: Swift.String?
        /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
        public var id: Swift.String?
        /// The name that you specified for the ChannelPlacementGroup.
        public var name: Swift.String?
        /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
        public var nodes: [Swift.String]?
        /// The current state of the ChannelPlacementGroup.
        public var state: MediaLiveClientTypes.ChannelPlacementGroupState?

        public init(
            arn: Swift.String? = nil,
            channels: [Swift.String]? = nil,
            clusterId: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            nodes: [Swift.String]? = nil,
            state: MediaLiveClientTypes.ChannelPlacementGroupState? = nil
        )
        {
            self.arn = arn
            self.channels = channels
            self.clusterId = clusterId
            self.id = id
            self.name = name
            self.nodes = nodes
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {

    /// Used in CreateClusterSummary, DescribeClusterSummary, DescribeClusterResult, UpdateClusterResult.
    public enum ClusterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onPremises
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterType] {
            return [
                .onPremises
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onPremises: return "ON_PREMISES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Used in ClusterNetworkSettings
    public struct InterfaceMapping {
        /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
        public var logicalInterfaceName: Swift.String?
        /// The ID of the network that you want to connect to the specified logicalInterfaceName.
        public var networkId: Swift.String?

        public init(
            logicalInterfaceName: Swift.String? = nil,
            networkId: Swift.String? = nil
        )
        {
            self.logicalInterfaceName = logicalInterfaceName
            self.networkId = networkId
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in DescribeClusterResult, DescribeClusterSummary, UpdateClusterResult.
    public struct ClusterNetworkSettings {
        /// The network interface that is the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
        public var defaultRoute: Swift.String?
        /// An array of interfaceMapping objects for this Cluster. Each mapping logically connects one interface on the nodes with one Network. You need only one mapping for each interface because all the Nodes share the mapping.
        public var interfaceMappings: [MediaLiveClientTypes.InterfaceMapping]?

        public init(
            defaultRoute: Swift.String? = nil,
            interfaceMappings: [MediaLiveClientTypes.InterfaceMapping]? = nil
        )
        {
            self.defaultRoute = defaultRoute
            self.interfaceMappings = interfaceMappings
        }
    }

}

extension MediaLiveClientTypes {

    /// Used in DescribeClusterSummary, DescribeClusterResult, UpdateClusterResult.
    public enum ClusterState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleted
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterState] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleted,
                .deleteFailed,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Used in ListClustersResult.
    public struct DescribeClusterSummary {
        /// The ARN of this Cluster. It is automatically assigned when the Cluster is created.
        public var arn: Swift.String?
        /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
        public var channelIds: [Swift.String]?
        /// The hardware type for the Cluster.
        public var clusterType: MediaLiveClientTypes.ClusterType?
        /// The ID of the Cluster. Unique in the AWS account. The ID is the resource-id portion of the ARN.
        public var id: Swift.String?
        /// The ARN of the IAM role for the Node in this Cluster. Any Nodes that are associated with this Cluster assume this role. The role gives permissions to the operations that you expect these Node to perform.
        public var instanceRoleArn: Swift.String?
        /// The name that you specified for the Cluster.
        public var name: Swift.String?
        /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
        public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettings?
        /// The current state of the Cluster.
        public var state: MediaLiveClientTypes.ClusterState?

        public init(
            arn: Swift.String? = nil,
            channelIds: [Swift.String]? = nil,
            clusterType: MediaLiveClientTypes.ClusterType? = nil,
            id: Swift.String? = nil,
            instanceRoleArn: Swift.String? = nil,
            name: Swift.String? = nil,
            networkSettings: MediaLiveClientTypes.ClusterNetworkSettings? = nil,
            state: MediaLiveClientTypes.ClusterState? = nil
        )
        {
            self.arn = arn
            self.channelIds = channelIds
            self.clusterType = clusterType
            self.id = id
            self.instanceRoleArn = instanceRoleArn
            self.name = name
            self.networkSettings = networkSettings
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in DescribeNetworkResult, DescribeNetworkSummary, UpdateNetworkResult.
    public struct IpPool {
        /// A CIDR block of IP addresses that are reserved for MediaLive Anywhere.
        public var cidr: Swift.String?

        public init(
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in DescribeNetworkResult, DescribeNetworkSummary, UpdateNetworkResult.
    public struct Route {
        /// A CIDR block for one Route.
        public var cidr: Swift.String?
        /// The IP address of the Gateway for this route, if applicable.
        public var gateway: Swift.String?

        public init(
            cidr: Swift.String? = nil,
            gateway: Swift.String? = nil
        )
        {
            self.cidr = cidr
            self.gateway = gateway
        }
    }

}

extension MediaLiveClientTypes {

    /// Used in DescribeNetworkResult, DescribeNetworkSummary, UpdateNetworkResult.
    public enum NetworkState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleted
        case deleteFailed
        case deleting
        case idle
        case inUse
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkState] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleted,
                .deleteFailed,
                .deleting,
                .idle,
                .inUse,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .idle: return "IDLE"
            case .inUse: return "IN_USE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Used in ListNetworksResult.
    public struct DescribeNetworkSummary {
        /// The ARN of this Network. It is automatically assigned when the Network is created.
        public var arn: Swift.String?
        /// Placeholder documentation for __listOf__string
        public var associatedClusterIds: [Swift.String]?
        /// The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
        public var id: Swift.String?
        /// An array of IpPools in your organization's network that identify a collection of IP addresses in your organization's network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
        public var ipPools: [MediaLiveClientTypes.IpPool]?
        /// The name that you specified for this Network.
        public var name: Swift.String?
        /// An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
        public var routes: [MediaLiveClientTypes.Route]?
        /// The current state of the Network. Only MediaLive Anywhere can change the state.
        public var state: MediaLiveClientTypes.NetworkState?

        public init(
            arn: Swift.String? = nil,
            associatedClusterIds: [Swift.String]? = nil,
            id: Swift.String? = nil,
            ipPools: [MediaLiveClientTypes.IpPool]? = nil,
            name: Swift.String? = nil,
            routes: [MediaLiveClientTypes.Route]? = nil,
            state: MediaLiveClientTypes.NetworkState? = nil
        )
        {
            self.arn = arn
            self.associatedClusterIds = associatedClusterIds
            self.id = id
            self.ipPools = ipPools
            self.name = name
            self.routes = routes
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {

    /// Used in DescribeNodeSummary.
    public enum NodeConnectionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connected
        case disconnected
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeConnectionState] {
            return [
                .connected,
                .disconnected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .disconnected: return "DISCONNECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
    public enum NetworkInterfaceMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bridge
        case nat
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkInterfaceMode] {
            return [
                .bridge,
                .nat
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bridge: return "BRIDGE"
            case .nat: return "NAT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// A mapping that's used to pair a logical network interface name on a Node with the physical interface name exposed in the operating system.
    public struct NodeInterfaceMapping {
        /// A uniform logical interface name to address in a MediaLive channel configuration.
        public var logicalInterfaceName: Swift.String?
        /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
        public var networkInterfaceMode: MediaLiveClientTypes.NetworkInterfaceMode?
        /// The name of the physical interface on the hardware that will be running Elemental anywhere.
        public var physicalInterfaceName: Swift.String?

        public init(
            logicalInterfaceName: Swift.String? = nil,
            networkInterfaceMode: MediaLiveClientTypes.NetworkInterfaceMode? = nil,
            physicalInterfaceName: Swift.String? = nil
        )
        {
            self.logicalInterfaceName = logicalInterfaceName
            self.networkInterfaceMode = networkInterfaceMode
            self.physicalInterfaceName = physicalInterfaceName
        }
    }

}

extension MediaLiveClientTypes {

    /// Used in CreateNodeRequest, CreateNodeRegistrationScriptRequest, DescribeNodeResult, DescribeNodeSummary, UpdateNodeRequest.
    public enum NodeRole: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case backup
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeRole] {
            return [
                .active,
                .backup
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .backup: return "BACKUP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Used in DescribeNodeSummary.
    public enum NodeState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activationFailed
        case active
        case created
        case deregistered
        case deregistering
        case deregistrationFailed
        case draining
        case inUse
        case ready
        case readyToActivate
        case registering
        case registrationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeState] {
            return [
                .activationFailed,
                .active,
                .created,
                .deregistered,
                .deregistering,
                .deregistrationFailed,
                .draining,
                .inUse,
                .ready,
                .readyToActivate,
                .registering,
                .registrationFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activationFailed: return "ACTIVATION_FAILED"
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .deregistered: return "DEREGISTERED"
            case .deregistering: return "DEREGISTERING"
            case .deregistrationFailed: return "DEREGISTRATION_FAILED"
            case .draining: return "DRAINING"
            case .inUse: return "IN_USE"
            case .ready: return "READY"
            case .readyToActivate: return "READY_TO_ACTIVATE"
            case .registering: return "REGISTERING"
            case .registrationFailed: return "REGISTRATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for DescribeNodeSummary
    public struct DescribeNodeSummary {
        /// The ARN of the Node. It is automatically assigned when the Node is created.
        public var arn: Swift.String?
        /// An array of IDs. Each ID is one ChannelPlacementGroup that is associated with this Node. Empty if the Node is not yet associated with any groups.
        public var channelPlacementGroups: [Swift.String]?
        /// The ID of the Cluster that the Node belongs to.
        public var clusterId: Swift.String?
        /// The current connection state of the Node.
        public var connectionState: MediaLiveClientTypes.NodeConnectionState?
        /// The unique ID of the Node. Unique in the Cluster. The ID is the resource-id portion of the ARN.
        public var id: Swift.String?
        /// The EC2 ARN of the Instance associated with the Node.
        public var instanceArn: Swift.String?
        /// At the routing layer will get it from the callerId/context for use with bring your own device.
        public var managedInstanceId: Swift.String?
        /// The name that you specified for the Node.
        public var name: Swift.String?
        /// Documentation update needed
        public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
        /// The initial role current role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
        public var role: MediaLiveClientTypes.NodeRole?
        /// The current state of the Node.
        public var state: MediaLiveClientTypes.NodeState?

        public init(
            arn: Swift.String? = nil,
            channelPlacementGroups: [Swift.String]? = nil,
            clusterId: Swift.String? = nil,
            connectionState: MediaLiveClientTypes.NodeConnectionState? = nil,
            id: Swift.String? = nil,
            instanceArn: Swift.String? = nil,
            managedInstanceId: Swift.String? = nil,
            name: Swift.String? = nil,
            nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
            role: MediaLiveClientTypes.NodeRole? = nil,
            state: MediaLiveClientTypes.NodeState? = nil
        )
        {
            self.arn = arn
            self.channelPlacementGroups = channelPlacementGroups
            self.clusterId = clusterId
            self.connectionState = connectionState
            self.id = id
            self.instanceArn = instanceArn
            self.managedInstanceId = managedInstanceId
            self.name = name
            self.nodeInterfaceMappings = nodeInterfaceMappings
            self.role = role
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for EventBridgeRuleTemplateGroupSummary
    public struct EventBridgeRuleTemplateGroupSummary {
        /// An eventbridge rule template group's ARN (Amazon Resource Name)
        /// This member is required.
        public var arn: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A resource's optional description.
        public var description: Swift.String?
        /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
        /// This member is required.
        public var id: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        public var modifiedAt: Foundation.Date?
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// This member is required.
        public var name: Swift.String?
        /// Represents the tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?
        /// The number of templates in a group.
        /// This member is required.
        public var templateCount: Swift.Int?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            templateCount: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.tags = tags
            self.templateCount = templateCount
        }
    }

}

extension MediaLiveClientTypes {

    /// The type of event to match with the rule.
    public enum EventBridgeRuleTemplateEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mediaconnectAlert
        case mediaconnectFlowStatusChange
        case mediaconnectOutputHealth
        case mediaconnectSourceHealth
        case medialiveChannelAlert
        case medialiveChannelInputChange
        case medialiveChannelStateChange
        case medialiveMultiplexAlert
        case medialiveMultiplexStateChange
        case mediapackageHarvestJobNotification
        case mediapackageInputNotification
        case mediapackageKeyProviderNotification
        case signalMapActiveAlarm
        case sdkUnknown(Swift.String)

        public static var allCases: [EventBridgeRuleTemplateEventType] {
            return [
                .mediaconnectAlert,
                .mediaconnectFlowStatusChange,
                .mediaconnectOutputHealth,
                .mediaconnectSourceHealth,
                .medialiveChannelAlert,
                .medialiveChannelInputChange,
                .medialiveChannelStateChange,
                .medialiveMultiplexAlert,
                .medialiveMultiplexStateChange,
                .mediapackageHarvestJobNotification,
                .mediapackageInputNotification,
                .mediapackageKeyProviderNotification,
                .signalMapActiveAlarm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mediaconnectAlert: return "MEDIACONNECT_ALERT"
            case .mediaconnectFlowStatusChange: return "MEDIACONNECT_FLOW_STATUS_CHANGE"
            case .mediaconnectOutputHealth: return "MEDIACONNECT_OUTPUT_HEALTH"
            case .mediaconnectSourceHealth: return "MEDIACONNECT_SOURCE_HEALTH"
            case .medialiveChannelAlert: return "MEDIALIVE_CHANNEL_ALERT"
            case .medialiveChannelInputChange: return "MEDIALIVE_CHANNEL_INPUT_CHANGE"
            case .medialiveChannelStateChange: return "MEDIALIVE_CHANNEL_STATE_CHANGE"
            case .medialiveMultiplexAlert: return "MEDIALIVE_MULTIPLEX_ALERT"
            case .medialiveMultiplexStateChange: return "MEDIALIVE_MULTIPLEX_STATE_CHANGE"
            case .mediapackageHarvestJobNotification: return "MEDIAPACKAGE_HARVEST_JOB_NOTIFICATION"
            case .mediapackageInputNotification: return "MEDIAPACKAGE_INPUT_NOTIFICATION"
            case .mediapackageKeyProviderNotification: return "MEDIAPACKAGE_KEY_PROVIDER_NOTIFICATION"
            case .signalMapActiveAlarm: return "SIGNAL_MAP_ACTIVE_ALARM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for EventBridgeRuleTemplateSummary
    public struct EventBridgeRuleTemplateSummary {
        /// An eventbridge rule template's ARN (Amazon Resource Name)
        /// This member is required.
        public var arn: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A resource's optional description.
        public var description: Swift.String?
        /// The number of targets configured to send matching events.
        /// This member is required.
        public var eventTargetCount: Swift.Int?
        /// The type of event to match with the rule.
        /// This member is required.
        public var eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType?
        /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
        /// This member is required.
        public var groupId: Swift.String?
        /// An eventbridge rule template's id. AWS provided templates have ids that start with aws-
        /// This member is required.
        public var id: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        public var modifiedAt: Foundation.Date?
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// This member is required.
        public var name: Swift.String?
        /// Represents the tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            eventTargetCount: Swift.Int? = nil,
            eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType? = nil,
            groupId: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.eventTargetCount = eventTargetCount
            self.eventType = eventType
            self.groupId = groupId
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.tags = tags
        }
    }

}

extension MediaLiveClientTypes {
    /// The target to which to send matching events.
    public struct EventBridgeRuleTemplateTarget {
        /// Target ARNs must be either an SNS topic or CloudWatch log group.
        /// This member is required.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension MediaLiveClientTypes {

    /// Hls Ad Markers
    public enum HlsAdMarkers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adobe
        case elemental
        case elementalScte35
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAdMarkers] {
            return [
                .adobe,
                .elemental,
                .elementalScte35
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adobe: return "ADOBE"
            case .elemental: return "ELEMENTAL"
            case .elementalScte35: return "ELEMENTAL_SCTE35"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// A network route configuration.
    public struct InputDestinationRoute {
        /// The CIDR of the route.
        public var cidr: Swift.String?
        /// An optional gateway for the route.
        public var gateway: Swift.String?

        public init(
            cidr: Swift.String? = nil,
            gateway: Swift.String? = nil
        )
        {
            self.cidr = cidr
            self.gateway = gateway
        }
    }

}

extension MediaLiveClientTypes {
    /// The properties for a VPC type input destination.
    public struct InputDestinationVpc {
        /// The availability zone of the Input destination.
        public var availabilityZone: Swift.String?
        /// The network interface ID of the Input destination in the VPC.
        public var networkInterfaceId: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.networkInterfaceId = networkInterfaceId
        }
    }

}

extension MediaLiveClientTypes {
    /// The settings for a PUSH type input.
    public struct InputDestination {
        /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
        public var ip: Swift.String?
        /// The ID of the attached network.
        public var network: Swift.String?
        /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
        public var networkRoutes: [MediaLiveClientTypes.InputDestinationRoute]?
        /// The port number for the input.
        public var port: Swift.String?
        /// This represents the endpoint that the customer stream will be pushed to.
        public var url: Swift.String?
        /// The properties for a VPC type input destination.
        public var vpc: MediaLiveClientTypes.InputDestinationVpc?

        public init(
            ip: Swift.String? = nil,
            network: Swift.String? = nil,
            networkRoutes: [MediaLiveClientTypes.InputDestinationRoute]? = nil,
            port: Swift.String? = nil,
            url: Swift.String? = nil,
            vpc: MediaLiveClientTypes.InputDestinationVpc? = nil
        )
        {
            self.ip = ip
            self.network = network
            self.networkRoutes = networkRoutes
            self.port = port
            self.url = url
            self.vpc = vpc
        }
    }

}

extension MediaLiveClientTypes {

    /// A standard input has two sources and a single pipeline input only has one.
    public enum InputClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case singlePipeline
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [InputClass] {
            return [
                .singlePipeline,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .singlePipeline: return "SINGLE_PIPELINE"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings for an input device.
    public struct InputDeviceSettings {
        /// The unique ID for the device.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension MediaLiveClientTypes {

    /// With the introduction of MediaLive Anywhere, a MediaLive input can now exist in two different places: AWS or inside an on-premises datacenter. By default all inputs will continue to be AWS inputs.
    public enum InputNetworkLocation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aws
        case onPremises
        case sdkUnknown(Swift.String)

        public static var allCases: [InputNetworkLocation] {
            return [
                .aws,
                .onPremises
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .onPremises: return "ON_PREMISES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// There are two types of input sources, static and dynamic. If an input source is dynamic you can change the source url of the input dynamically using an input switch action. Currently, two input types support a dynamic url at this time, MP4_FILE and TS_FILE. By default all input sources are static.
    public enum InputSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSourceType] {
            return [
                .dynamic,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "DYNAMIC"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// The settings for a MediaConnect Flow.
    public struct MediaConnectFlow {
        /// The unique ARN of the MediaConnect Flow being used as a source.
        public var flowArn: Swift.String?

        public init(
            flowArn: Swift.String? = nil
        )
        {
            self.flowArn = flowArn
        }
    }

}

extension MediaLiveClientTypes {
    /// Pair of multicast url and source ip address (optional) that make up a multicast source.
    public struct MulticastSource {
        /// This represents the ip address of the device sending the multicast stream.
        public var sourceIp: Swift.String?
        /// This represents the customer's source URL where multicast stream is pulled from.
        /// This member is required.
        public var url: Swift.String?

        public init(
            sourceIp: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.sourceIp = sourceIp
            self.url = url
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for a Multicast input. Contains a list of multicast Urls and optional source ip addresses.
    public struct MulticastSettings {
        /// Placeholder documentation for __listOfMulticastSource
        public var sources: [MediaLiveClientTypes.MulticastSource]?

        public init(
            sources: [MediaLiveClientTypes.MulticastSource]? = nil
        )
        {
            self.sources = sources
        }
    }

}

extension MediaLiveClientTypes {
    /// The settings for a PULL type input.
    public struct InputSource {
        /// The key used to extract the password from EC2 Parameter store.
        public var passwordParam: Swift.String?
        /// This represents the customer's source URL where stream is pulled from.
        public var url: Swift.String?
        /// The username for the input source.
        public var username: Swift.String?

        public init(
            passwordParam: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {

    /// Placeholder documentation for Algorithm
    public enum Algorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case aes192
        case aes256
        case sdkUnknown(Swift.String)

        public static var allCases: [Algorithm] {
            return [
                .aes128,
                .aes192,
                .aes256
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES128"
            case .aes192: return "AES192"
            case .aes256: return "AES256"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
    public struct SrtCallerDecryption {
        /// The algorithm used to encrypt content.
        public var algorithm: MediaLiveClientTypes.Algorithm?
        /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. The secret holds the passphrase that MediaLive uses to decrypt the source content.
        public var passphraseSecretArn: Swift.String?

        public init(
            algorithm: MediaLiveClientTypes.Algorithm? = nil,
            passphraseSecretArn: Swift.String? = nil
        )
        {
            self.algorithm = algorithm
            self.passphraseSecretArn = passphraseSecretArn
        }
    }

}

extension MediaLiveClientTypes {
    /// The configuration for a source that uses SRT as the connection protocol. In terms of establishing the connection, MediaLive is always caller and the upstream system is always the listener. In terms of transmission of the source content, MediaLive is always the receiver and the upstream system is always the sender.
    public struct SrtCallerSource {
        /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
        public var decryption: MediaLiveClientTypes.SrtCallerDecryption?
        /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT.
        public var minimumLatency: Swift.Int?
        /// The IP address at the upstream system (the listener) that MediaLive (the caller) connects to.
        public var srtListenerAddress: Swift.String?
        /// The port at the upstream system (the listener) that MediaLive (the caller) connects to.
        public var srtListenerPort: Swift.String?
        /// The stream ID, if the upstream system uses this identifier.
        public var streamId: Swift.String?

        public init(
            decryption: MediaLiveClientTypes.SrtCallerDecryption? = nil,
            minimumLatency: Swift.Int? = nil,
            srtListenerAddress: Swift.String? = nil,
            srtListenerPort: Swift.String? = nil,
            streamId: Swift.String? = nil
        )
        {
            self.decryption = decryption
            self.minimumLatency = minimumLatency
            self.srtListenerAddress = srtListenerAddress
            self.srtListenerPort = srtListenerPort
            self.streamId = streamId
        }
    }

}

extension MediaLiveClientTypes {
    /// The configured sources for this SRT input.
    public struct SrtSettings {
        /// Placeholder documentation for __listOfSrtCallerSource
        public var srtCallerSources: [MediaLiveClientTypes.SrtCallerSource]?

        public init(
            srtCallerSources: [MediaLiveClientTypes.SrtCallerSource]? = nil
        )
        {
            self.srtCallerSources = srtCallerSources
        }
    }

}

extension MediaLiveClientTypes {

    /// Placeholder documentation for InputState
    public enum InputState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attached
        case creating
        case deleted
        case deleting
        case detached
        case sdkUnknown(Swift.String)

        public static var allCases: [InputState] {
            return [
                .attached,
                .creating,
                .deleted,
                .deleting,
                .detached
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attached: return "ATTACHED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .detached: return "DETACHED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The different types of inputs that AWS Elemental MediaLive supports.
    public enum InputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsCdi
        case inputDevice
        case mediaconnect
        case mp4File
        case multicast
        case rtmpPull
        case rtmpPush
        case rtpPush
        case srtCaller
        case tsFile
        case udpPush
        case urlPull
        case sdkUnknown(Swift.String)

        public static var allCases: [InputType] {
            return [
                .awsCdi,
                .inputDevice,
                .mediaconnect,
                .mp4File,
                .multicast,
                .rtmpPull,
                .rtmpPush,
                .rtpPush,
                .srtCaller,
                .tsFile,
                .udpPush,
                .urlPull
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsCdi: return "AWS_CDI"
            case .inputDevice: return "INPUT_DEVICE"
            case .mediaconnect: return "MEDIACONNECT"
            case .mp4File: return "MP4_FILE"
            case .multicast: return "MULTICAST"
            case .rtmpPull: return "RTMP_PULL"
            case .rtmpPush: return "RTMP_PUSH"
            case .rtpPush: return "RTP_PUSH"
            case .srtCaller: return "SRT_CALLER"
            case .tsFile: return "TS_FILE"
            case .udpPush: return "UDP_PUSH"
            case .urlPull: return "URL_PULL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for Input
    public struct Input {
        /// The Unique ARN of the input (generated, immutable).
        public var arn: Swift.String?
        /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
        public var attachedChannels: [Swift.String]?
        /// A list of the destinations of the input (PUSH-type).
        public var destinations: [MediaLiveClientTypes.InputDestination]?
        /// The generated ID of the input (unique for user account, immutable).
        public var id: Swift.String?
        /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
        public var inputClass: MediaLiveClientTypes.InputClass?
        /// Settings for the input devices.
        public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
        /// The location of this input. AWS, for an input existing in the AWS Cloud, On-Prem for an input in a customer network.
        public var inputNetworkLocation: MediaLiveClientTypes.InputNetworkLocation?
        /// A list of IDs for all Inputs which are partners of this one.
        public var inputPartnerIds: [Swift.String]?
        /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE and TS_FILE inputs.
        public var inputSourceType: MediaLiveClientTypes.InputSourceType?
        /// A list of MediaConnect Flows for this input.
        public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
        /// Multicast Input settings.
        public var multicastSettings: MediaLiveClientTypes.MulticastSettings?
        /// The user-assigned name (This is a mutable value).
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
        public var roleArn: Swift.String?
        /// A list of IDs for all the Input Security Groups attached to the input.
        public var securityGroups: [Swift.String]?
        /// A list of the sources of the input (PULL-type).
        public var sources: [MediaLiveClientTypes.InputSource]?
        /// The settings associated with an SRT input.
        public var srtSettings: MediaLiveClientTypes.SrtSettings?
        /// Placeholder documentation for InputState
        public var state: MediaLiveClientTypes.InputState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?
        /// The different types of inputs that AWS Elemental MediaLive supports.
        public var type: MediaLiveClientTypes.InputType?

        public init(
            arn: Swift.String? = nil,
            attachedChannels: [Swift.String]? = nil,
            destinations: [MediaLiveClientTypes.InputDestination]? = nil,
            id: Swift.String? = nil,
            inputClass: MediaLiveClientTypes.InputClass? = nil,
            inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
            inputNetworkLocation: MediaLiveClientTypes.InputNetworkLocation? = nil,
            inputPartnerIds: [Swift.String]? = nil,
            inputSourceType: MediaLiveClientTypes.InputSourceType? = nil,
            mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]? = nil,
            multicastSettings: MediaLiveClientTypes.MulticastSettings? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            sources: [MediaLiveClientTypes.InputSource]? = nil,
            srtSettings: MediaLiveClientTypes.SrtSettings? = nil,
            state: MediaLiveClientTypes.InputState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: MediaLiveClientTypes.InputType? = nil
        )
        {
            self.arn = arn
            self.attachedChannels = attachedChannels
            self.destinations = destinations
            self.id = id
            self.inputClass = inputClass
            self.inputDevices = inputDevices
            self.inputNetworkLocation = inputNetworkLocation
            self.inputPartnerIds = inputPartnerIds
            self.inputSourceType = inputSourceType
            self.mediaConnectFlows = mediaConnectFlows
            self.multicastSettings = multicastSettings
            self.name = name
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.sources = sources
            self.srtSettings = srtSettings
            self.state = state
            self.tags = tags
            self.type = type
        }
    }

}

extension MediaLiveClientTypes {
    /// A network route configuration.
    public struct InputRequestDestinationRoute {
        /// The CIDR of the route.
        public var cidr: Swift.String?
        /// An optional gateway for the route.
        public var gateway: Swift.String?

        public init(
            cidr: Swift.String? = nil,
            gateway: Swift.String? = nil
        )
        {
            self.cidr = cidr
            self.gateway = gateway
        }
    }

}

extension MediaLiveClientTypes {
    /// Endpoint settings for a PUSH type input.
    public struct InputDestinationRequest {
        /// If the push input has an input location of ON-PREM, ID the ID of the attached network.
        public var network: Swift.String?
        /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
        public var networkRoutes: [MediaLiveClientTypes.InputRequestDestinationRoute]?
        /// If the push input has an input location of ON-PREM it's optional to specify what the ip address of the input is going to be on the customer local network.
        public var staticIpAddress: Swift.String?
        /// A unique name for the location the RTMP stream is being pushed to.
        public var streamName: Swift.String?

        public init(
            network: Swift.String? = nil,
            networkRoutes: [MediaLiveClientTypes.InputRequestDestinationRoute]? = nil,
            staticIpAddress: Swift.String? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.network = network
            self.networkRoutes = networkRoutes
            self.staticIpAddress = staticIpAddress
            self.streamName = streamName
        }
    }

}

extension MediaLiveClientTypes {

    /// Property of InputDeviceConfigurableAudioChannelPairConfig, which configures one audio channel that the device produces.
    public enum InputDeviceConfigurableAudioChannelPairProfile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbrAacHq192000
        case cbrAacHq256000
        case cbrAacHq384000
        case cbrAacHq512000
        case disabled
        case vbrAacHe64000
        case vbrAacHhe16000
        case vbrAacLc128000
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceConfigurableAudioChannelPairProfile] {
            return [
                .cbrAacHq192000,
                .cbrAacHq256000,
                .cbrAacHq384000,
                .cbrAacHq512000,
                .disabled,
                .vbrAacHe64000,
                .vbrAacHhe16000,
                .vbrAacLc128000
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbrAacHq192000: return "CBR-AAC_HQ-192000"
            case .cbrAacHq256000: return "CBR-AAC_HQ-256000"
            case .cbrAacHq384000: return "CBR-AAC_HQ-384000"
            case .cbrAacHq512000: return "CBR-AAC_HQ-512000"
            case .disabled: return "DISABLED"
            case .vbrAacHe64000: return "VBR-AAC_HE-64000"
            case .vbrAacHhe16000: return "VBR-AAC_HHE-16000"
            case .vbrAacLc128000: return "VBR-AAC_LC-128000"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// One audio configuration that specifies the format for one audio pair that the device produces as output.
    public struct InputDeviceConfigurableAudioChannelPairConfig {
        /// The ID for one audio pair configuration, a value from 1 to 8.
        public var id: Swift.Int?
        /// The profile to set for one audio pair configuration. Choose an enumeration value. Each value describes one audio configuration using the format (rate control algorithm)-(codec)_(quality)-(bitrate in bytes). For example, CBR-AAC_HQ-192000. Or choose DISABLED, in which case the device won't produce audio for this pair.
        public var profile: MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairProfile?

        public init(
            id: Swift.Int? = nil,
            profile: MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairProfile? = nil
        )
        {
            self.id = id
            self.profile = profile
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for an input device.
    public struct InputDeviceRequest {
        /// The unique ID for the device.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension MediaLiveClientTypes {

    /// The state of the connection between the input device and AWS.
    public enum InputDeviceConnectionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connected
        case disconnected
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceConnectionState] {
            return [
                .connected,
                .disconnected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .disconnected: return "DISCONNECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public enum DeviceSettingsSyncState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case synced
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceSettingsSyncState] {
            return [
                .synced,
                .syncing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .synced: return "SYNCED"
            case .syncing: return "SYNCING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The status of software on the input device.
    public enum DeviceUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notUpToDate
        case updating
        case upToDate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceUpdateStatus] {
            return [
                .notUpToDate,
                .updating,
                .upToDate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notUpToDate: return "NOT_UP_TO_DATE"
            case .updating: return "UPDATING"
            case .upToDate: return "UP_TO_DATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The source at the input device that is currently active.
    public enum InputDeviceActiveInput: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hdmi
        case sdi
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceActiveInput] {
            return [
                .hdmi,
                .sdi
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hdmi: return "HDMI"
            case .sdi: return "SDI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The source to activate (use) from the input device.
    public enum InputDeviceConfiguredInput: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case hdmi
        case sdi
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceConfiguredInput] {
            return [
                .auto,
                .hdmi,
                .sdi
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .hdmi: return "HDMI"
            case .sdi: return "SDI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The state of the input device.
    public enum InputDeviceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case idle
        case streaming
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceState] {
            return [
                .idle,
                .streaming
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .idle: return "IDLE"
            case .streaming: return "STREAMING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The scan type of the video source.
    public enum InputDeviceScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceScanType] {
            return [
                .interlaced,
                .progressive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings that describe the active source from the input device, and the video characteristics of that source.
    public struct InputDeviceHdSettings {
        /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
        public var activeInput: MediaLiveClientTypes.InputDeviceActiveInput?
        /// The source at the input device that is currently active. You can specify this source.
        public var configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput?
        /// The state of the input device.
        public var deviceState: MediaLiveClientTypes.InputDeviceState?
        /// The frame rate of the video source.
        public var framerate: Swift.Double?
        /// The height of the video source, in pixels.
        public var height: Swift.Int?
        /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
        public var latencyMs: Swift.Int?
        /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
        public var maxBitrate: Swift.Int?
        /// The scan type of the video source.
        public var scanType: MediaLiveClientTypes.InputDeviceScanType?
        /// The width of the video source, in pixels.
        public var width: Swift.Int?

        public init(
            activeInput: MediaLiveClientTypes.InputDeviceActiveInput? = nil,
            configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput? = nil,
            deviceState: MediaLiveClientTypes.InputDeviceState? = nil,
            framerate: Swift.Double? = nil,
            height: Swift.Int? = nil,
            latencyMs: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            scanType: MediaLiveClientTypes.InputDeviceScanType? = nil,
            width: Swift.Int? = nil
        )
        {
            self.activeInput = activeInput
            self.configuredInput = configuredInput
            self.deviceState = deviceState
            self.framerate = framerate
            self.height = height
            self.latencyMs = latencyMs
            self.maxBitrate = maxBitrate
            self.scanType = scanType
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {

    /// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
    public enum InputDeviceIpScheme: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dhcp
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceIpScheme] {
            return [
                .dhcp,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dhcp: return "DHCP"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// The network settings for the input device.
    public struct InputDeviceNetworkSettings {
        /// The DNS addresses of the input device.
        public var dnsAddresses: [Swift.String]?
        /// The network gateway IP address.
        public var gateway: Swift.String?
        /// The IP address of the input device.
        public var ipAddress: Swift.String?
        /// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
        public var ipScheme: MediaLiveClientTypes.InputDeviceIpScheme?
        /// The subnet mask of the input device.
        public var subnetMask: Swift.String?

        public init(
            dnsAddresses: [Swift.String]? = nil,
            gateway: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            ipScheme: MediaLiveClientTypes.InputDeviceIpScheme? = nil,
            subnetMask: Swift.String? = nil
        )
        {
            self.dnsAddresses = dnsAddresses
            self.gateway = gateway
            self.ipAddress = ipAddress
            self.ipScheme = ipScheme
            self.subnetMask = subnetMask
        }
    }

}

extension MediaLiveClientTypes {

    /// The output attachment type of the input device.
    public enum InputDeviceOutputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mediaconnectFlow
        case medialiveInput
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceOutputType] {
            return [
                .mediaconnectFlow,
                .medialiveInput,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mediaconnectFlow: return "MEDIACONNECT_FLOW"
            case .medialiveInput: return "MEDIALIVE_INPUT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
    public enum InputDeviceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceType] {
            return [
                .hd,
                .uhd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hd: return "HD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Property of InputDeviceUhdAudioChannelPairConfig, which describes one audio channel that the device is configured to produce.
    public enum InputDeviceUhdAudioChannelPairProfile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbrAacHq192000
        case cbrAacHq256000
        case cbrAacHq384000
        case cbrAacHq512000
        case disabled
        case vbrAacHe64000
        case vbrAacHhe16000
        case vbrAacLc128000
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceUhdAudioChannelPairProfile] {
            return [
                .cbrAacHq192000,
                .cbrAacHq256000,
                .cbrAacHq384000,
                .cbrAacHq512000,
                .disabled,
                .vbrAacHe64000,
                .vbrAacHhe16000,
                .vbrAacLc128000
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbrAacHq192000: return "CBR-AAC_HQ-192000"
            case .cbrAacHq256000: return "CBR-AAC_HQ-256000"
            case .cbrAacHq384000: return "CBR-AAC_HQ-384000"
            case .cbrAacHq512000: return "CBR-AAC_HQ-512000"
            case .disabled: return "DISABLED"
            case .vbrAacHe64000: return "VBR-AAC_HE-64000"
            case .vbrAacHhe16000: return "VBR-AAC_HHE-16000"
            case .vbrAacLc128000: return "VBR-AAC_LC-128000"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// One audio configuration that specifies the format for one audio pair that the device produces as output.
    public struct InputDeviceUhdAudioChannelPairConfig {
        /// The ID for one audio pair configuration, a value from 1 to 8.
        public var id: Swift.Int?
        /// The profile for one audio pair configuration. This property describes one audio configuration in the format (rate control algorithm)-(codec)_(quality)-(bitrate in bytes). For example, CBR-AAC_HQ-192000. Or DISABLED, in which case the device won't produce audio for this pair.
        public var profile: MediaLiveClientTypes.InputDeviceUhdAudioChannelPairProfile?

        public init(
            id: Swift.Int? = nil,
            profile: MediaLiveClientTypes.InputDeviceUhdAudioChannelPairProfile? = nil
        )
        {
            self.id = id
            self.profile = profile
        }
    }

}

extension MediaLiveClientTypes {

    /// The codec to use on the video that the device produces.
    public enum InputDeviceCodec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avc
        case hevc
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceCodec] {
            return [
                .avc,
                .hevc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avc: return "AVC"
            case .hevc: return "HEVC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Information about the MediaConnect flow attached to the device.
    public struct InputDeviceMediaConnectSettings {
        /// The ARN of the MediaConnect flow.
        public var flowArn: Swift.String?
        /// The ARN for the role that MediaLive assumes to access the attached flow and secret.
        public var roleArn: Swift.String?
        /// The ARN of the secret used to encrypt the stream.
        public var secretArn: Swift.String?
        /// The name of the MediaConnect flow source.
        public var sourceName: Swift.String?

        public init(
            flowArn: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            secretArn: Swift.String? = nil,
            sourceName: Swift.String? = nil
        )
        {
            self.flowArn = flowArn
            self.roleArn = roleArn
            self.secretArn = secretArn
            self.sourceName = sourceName
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings that describe the active source from the input device, and the video characteristics of that source.
    public struct InputDeviceUhdSettings {
        /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
        public var activeInput: MediaLiveClientTypes.InputDeviceActiveInput?
        /// An array of eight audio configurations, one for each audio pair in the source. Each audio configuration specifies either to exclude the pair, or to format it and include it in the output from the UHD device. Applies only when the device is configured as the source for a MediaConnect flow.
        public var audioChannelPairs: [MediaLiveClientTypes.InputDeviceUhdAudioChannelPairConfig]?
        /// The codec for the video that the device produces.
        public var codec: MediaLiveClientTypes.InputDeviceCodec?
        /// The source at the input device that is currently active. You can specify this source.
        public var configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput?
        /// The state of the input device.
        public var deviceState: MediaLiveClientTypes.InputDeviceState?
        /// The frame rate of the video source.
        public var framerate: Swift.Double?
        /// The height of the video source, in pixels.
        public var height: Swift.Int?
        /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
        public var latencyMs: Swift.Int?
        /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
        public var maxBitrate: Swift.Int?
        /// Information about the MediaConnect flow attached to the device. Returned only if the outputType is MEDIACONNECT_FLOW.
        public var mediaconnectSettings: MediaLiveClientTypes.InputDeviceMediaConnectSettings?
        /// The scan type of the video source.
        public var scanType: MediaLiveClientTypes.InputDeviceScanType?
        /// The width of the video source, in pixels.
        public var width: Swift.Int?

        public init(
            activeInput: MediaLiveClientTypes.InputDeviceActiveInput? = nil,
            audioChannelPairs: [MediaLiveClientTypes.InputDeviceUhdAudioChannelPairConfig]? = nil,
            codec: MediaLiveClientTypes.InputDeviceCodec? = nil,
            configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput? = nil,
            deviceState: MediaLiveClientTypes.InputDeviceState? = nil,
            framerate: Swift.Double? = nil,
            height: Swift.Int? = nil,
            latencyMs: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            mediaconnectSettings: MediaLiveClientTypes.InputDeviceMediaConnectSettings? = nil,
            scanType: MediaLiveClientTypes.InputDeviceScanType? = nil,
            width: Swift.Int? = nil
        )
        {
            self.activeInput = activeInput
            self.audioChannelPairs = audioChannelPairs
            self.codec = codec
            self.configuredInput = configuredInput
            self.deviceState = deviceState
            self.framerate = framerate
            self.height = height
            self.latencyMs = latencyMs
            self.maxBitrate = maxBitrate
            self.mediaconnectSettings = mediaconnectSettings
            self.scanType = scanType
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Details of the input device.
    public struct InputDeviceSummary {
        /// The unique ARN of the input device.
        public var arn: Swift.String?
        /// The Availability Zone associated with this input device.
        public var availabilityZone: Swift.String?
        /// The state of the connection between the input device and AWS.
        public var connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
        /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
        public var deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
        /// The status of software on the input device.
        public var deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
        /// Settings that describe an input device that is type HD.
        public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
        /// The unique ID of the input device.
        public var id: Swift.String?
        /// The network MAC address of the input device.
        public var macAddress: Swift.String?
        /// An array of the ARNs for the MediaLive inputs attached to the device. Returned only if the outputType is MEDIALIVE_INPUT.
        public var medialiveInputArns: [Swift.String]?
        /// A name that you specify for the input device.
        public var name: Swift.String?
        /// Network settings for the input device.
        public var networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
        /// The output attachment type of the input device. Specifies MEDIACONNECT_FLOW if this device is the source for a MediaConnect flow. Specifies MEDIALIVE_INPUT if this device is the source for a MediaLive input.
        public var outputType: MediaLiveClientTypes.InputDeviceOutputType?
        /// The unique serial number of the input device.
        public var serialNumber: Swift.String?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?
        /// The type of the input device.
        public var type: MediaLiveClientTypes.InputDeviceType?
        /// Settings that describe an input device that is type UHD.
        public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?

        public init(
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            connectionState: MediaLiveClientTypes.InputDeviceConnectionState? = nil,
            deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState? = nil,
            deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus? = nil,
            hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings? = nil,
            id: Swift.String? = nil,
            macAddress: Swift.String? = nil,
            medialiveInputArns: [Swift.String]? = nil,
            name: Swift.String? = nil,
            networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings? = nil,
            outputType: MediaLiveClientTypes.InputDeviceOutputType? = nil,
            serialNumber: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: MediaLiveClientTypes.InputDeviceType? = nil,
            uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings? = nil
        )
        {
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.connectionState = connectionState
            self.deviceSettingsSyncState = deviceSettingsSyncState
            self.deviceUpdateStatus = deviceUpdateStatus
            self.hdDeviceSettings = hdDeviceSettings
            self.id = id
            self.macAddress = macAddress
            self.medialiveInputArns = medialiveInputArns
            self.name = name
            self.networkSettings = networkSettings
            self.outputType = outputType
            self.serialNumber = serialNumber
            self.tags = tags
            self.type = type
            self.uhdDeviceSettings = uhdDeviceSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Placeholder documentation for InputSecurityGroupState
    public enum InputSecurityGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleted
        case idle
        case inUse
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSecurityGroupState] {
            return [
                .deleted,
                .idle,
                .inUse,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .idle: return "IDLE"
            case .inUse: return "IN_USE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Whitelist rule
    public struct InputWhitelistRule {
        /// The IPv4 CIDR that's whitelisted.
        public var cidr: Swift.String?

        public init(
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension MediaLiveClientTypes {
    /// An Input Security Group
    public struct InputSecurityGroup {
        /// Unique ARN of Input Security Group
        public var arn: Swift.String?
        /// The Id of the Input Security Group
        public var id: Swift.String?
        /// The list of inputs currently using this Input Security Group.
        public var inputs: [Swift.String]?
        /// The current state of the Input Security Group.
        public var state: MediaLiveClientTypes.InputSecurityGroupState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?
        /// Whitelist rules and their sync status
        public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            inputs: [Swift.String]? = nil,
            state: MediaLiveClientTypes.InputSecurityGroupState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.inputs = inputs
            self.state = state
            self.tags = tags
            self.whitelistRules = whitelistRules
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for for a PULL type input.
    public struct InputSourceRequest {
        /// The key used to extract the password from EC2 Parameter store.
        public var passwordParam: Swift.String?
        /// This represents the customer's source URL where stream is pulled from.
        public var url: Swift.String?
        /// The username for the input source.
        public var username: Swift.String?

        public init(
            passwordParam: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {
    /// An IPv4 CIDR to whitelist.
    public struct InputWhitelistRuleCidr {
        /// The IPv4 CIDR to whitelist.
        public var cidr: Swift.String?

        public init(
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in ClusterNetworkSettingsCreateRequest.
    public struct InterfaceMappingCreateRequest {
        /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
        public var logicalInterfaceName: Swift.String?
        /// The ID of the network that you want to connect to the specified logicalInterfaceName.
        public var networkId: Swift.String?

        public init(
            logicalInterfaceName: Swift.String? = nil,
            networkId: Swift.String? = nil
        )
        {
            self.logicalInterfaceName = logicalInterfaceName
            self.networkId = networkId
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for InterfaceMappingUpdateRequest
    public struct InterfaceMappingUpdateRequest {
        /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
        public var logicalInterfaceName: Swift.String?
        /// The ID of the network that you want to connect to the specified logicalInterfaceName. You can use the ListNetworks operation to discover all the IDs.
        public var networkId: Swift.String?

        public init(
            logicalInterfaceName: Swift.String? = nil,
            networkId: Swift.String? = nil
        )
        {
            self.logicalInterfaceName = logicalInterfaceName
            self.networkId = networkId
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in CreateNetworkRequest.
    public struct IpPoolCreateRequest {
        /// A CIDR block of IP addresses to reserve for MediaLive Anywhere.
        public var cidr: Swift.String?

        public init(
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in UpdateNetworkRequest.
    public struct IpPoolUpdateRequest {
        /// A CIDR block of IP addresses to reserve for MediaLive Anywhere.
        public var cidr: Swift.String?

        public init(
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension MediaLiveClientTypes {
    /// The settings for a MediaConnect Flow.
    public struct MediaConnectFlowRequest {
        /// The ARN of the MediaConnect Flow that you want to use as a source.
        public var flowArn: Swift.String?

        public init(
            flowArn: Swift.String? = nil
        )
        {
            self.flowArn = flowArn
        }
    }

}

extension MediaLiveClientTypes {
    /// A direct source or destination neighbor to an AWS media resource.
    public struct MediaResourceNeighbor {
        /// The ARN of a resource used in AWS media workflows.
        /// This member is required.
        public var arn: Swift.String?
        /// The logical name of an AWS media resource.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

extension MediaLiveClientTypes {
    /// Pair of multicast url and source ip address (optional) that make up a multicast source.
    public struct MulticastSourceCreateRequest {
        /// This represents the ip address of the device sending the multicast stream.
        public var sourceIp: Swift.String?
        /// This represents the customer's source URL where multicast stream is pulled from.
        /// This member is required.
        public var url: Swift.String?

        public init(
            sourceIp: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.sourceIp = sourceIp
            self.url = url
        }
    }

}

extension MediaLiveClientTypes {
    /// Pair of multicast url and source ip address (optional) that make up a multicast source.
    public struct MulticastSourceUpdateRequest {
        /// This represents the ip address of the device sending the multicast stream.
        public var sourceIp: Swift.String?
        /// This represents the customer's source URL where multicast stream is pulled from.
        /// This member is required.
        public var url: Swift.String?

        public init(
            sourceIp: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.sourceIp = sourceIp
            self.url = url
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex MediaConnect output destination settings.
    public struct MultiplexMediaConnectOutputDestinationSettings {
        /// The MediaConnect entitlement ARN available as a Flow source.
        public var entitlementArn: Swift.String?

        public init(
            entitlementArn: Swift.String? = nil
        )
        {
            self.entitlementArn = entitlementArn
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex output destination settings
    public struct MultiplexOutputDestination {
        /// Multiplex MediaConnect output destination settings.
        public var mediaConnectSettings: MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings?

        public init(
            mediaConnectSettings: MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings? = nil
        )
        {
            self.mediaConnectSettings = mediaConnectSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// The current source for one of the pipelines in the multiplex.
    public struct MultiplexProgramPipelineDetail {
        /// Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
        public var activeChannelPipeline: Swift.String?
        /// Identifies a specific pipeline in the multiplex.
        public var pipelineId: Swift.String?

        public init(
            activeChannelPipeline: Swift.String? = nil,
            pipelineId: Swift.String? = nil
        )
        {
            self.activeChannelPipeline = activeChannelPipeline
            self.pipelineId = pipelineId
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MultiplexProgramSummary
    public struct MultiplexProgramSummary {
        /// The MediaLive Channel associated with the program.
        public var channelId: Swift.String?
        /// The name of the multiplex program.
        public var programName: Swift.String?

        public init(
            channelId: Swift.String? = nil,
            programName: Swift.String? = nil
        )
        {
            self.channelId = channelId
            self.programName = programName
        }
    }

}

extension MediaLiveClientTypes {
    /// Contains summary configuration for a Multiplex event.
    public struct MultiplexSettingsSummary {
        /// Transport stream bit rate.
        public var transportStreamBitrate: Swift.Int?

        public init(
            transportStreamBitrate: Swift.Int? = nil
        )
        {
            self.transportStreamBitrate = transportStreamBitrate
        }
    }

}

extension MediaLiveClientTypes {

    /// The current state of the multiplex.
    public enum MultiplexState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createFailed
        case creating
        case deleted
        case deleting
        case idle
        case recovering
        case running
        case starting
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [MultiplexState] {
            return [
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .idle,
                .recovering,
                .running,
                .starting,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .idle: return "IDLE"
            case .recovering: return "RECOVERING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MultiplexSummary
    public struct MultiplexSummary {
        /// The unique arn of the multiplex.
        public var arn: Swift.String?
        /// A list of availability zones for the multiplex.
        public var availabilityZones: [Swift.String]?
        /// The unique id of the multiplex.
        public var id: Swift.String?
        /// Configuration for a multiplex event.
        public var multiplexSettings: MediaLiveClientTypes.MultiplexSettingsSummary?
        /// The name of the multiplex.
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The number of programs in the multiplex.
        public var programCount: Swift.Int?
        /// The current state of the multiplex.
        public var state: MediaLiveClientTypes.MultiplexState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            id: Swift.String? = nil,
            multiplexSettings: MediaLiveClientTypes.MultiplexSettingsSummary? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            programCount: Swift.Int? = nil,
            state: MediaLiveClientTypes.MultiplexState? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in CreateNodeRequest.
    public struct NodeInterfaceMappingCreateRequest {
        /// Specify one of the logicalInterfaceNames that you created in the Cluster that this node belongs to. For example, my-Inputs-Interface.
        public var logicalInterfaceName: Swift.String?
        /// The style of the network -- NAT or BRIDGE.
        public var networkInterfaceMode: MediaLiveClientTypes.NetworkInterfaceMode?
        /// Specify the physical name that corresponds to the logicalInterfaceName that you specified in this interface mapping. For example, Eth1 or ENO1234EXAMPLE.
        public var physicalInterfaceName: Swift.String?

        public init(
            logicalInterfaceName: Swift.String? = nil,
            networkInterfaceMode: MediaLiveClientTypes.NetworkInterfaceMode? = nil,
            physicalInterfaceName: Swift.String? = nil
        )
        {
            self.logicalInterfaceName = logicalInterfaceName
            self.networkInterfaceMode = networkInterfaceMode
            self.physicalInterfaceName = physicalInterfaceName
        }
    }

}

extension MediaLiveClientTypes {

    /// Units for duration, e.g. 'MONTHS'
    public enum OfferingDurationUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case months
        case sdkUnknown(Swift.String)

        public static var allCases: [OfferingDurationUnits] {
            return [
                .months
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .months: return "MONTHS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Offering type, e.g. 'NO_UPFRONT'
    public enum OfferingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [OfferingType] {
            return [
                .noUpfront
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noUpfront: return "NO_UPFRONT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Codec, 'MPEG2', 'AVC', 'HEVC', 'AUDIO', 'LINK', or 'AV1'
    public enum ReservationCodec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audio
        case av1
        case avc
        case hevc
        case link
        case mpeg2
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationCodec] {
            return [
                .audio,
                .av1,
                .avc,
                .hevc,
                .link,
                .mpeg2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audio: return "AUDIO"
            case .av1: return "AV1"
            case .avc: return "AVC"
            case .hevc: return "HEVC"
            case .link: return "LINK"
            case .mpeg2: return "MPEG2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Maximum bitrate in megabits per second
    public enum ReservationMaximumBitrate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case max10Mbps
        case max20Mbps
        case max50Mbps
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationMaximumBitrate] {
            return [
                .max10Mbps,
                .max20Mbps,
                .max50Mbps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .max10Mbps: return "MAX_10_MBPS"
            case .max20Mbps: return "MAX_20_MBPS"
            case .max50Mbps: return "MAX_50_MBPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Maximum framerate in frames per second (Outputs only)
    public enum ReservationMaximumFramerate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case max30Fps
        case max60Fps
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationMaximumFramerate] {
            return [
                .max30Fps,
                .max60Fps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .max30Fps: return "MAX_30_FPS"
            case .max60Fps: return "MAX_60_FPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Resolution based on lines of vertical resolution; SD is less than 720 lines, HD is 720 to 1080 lines, FHD is 1080 lines, UHD is greater than 1080 lines
    public enum ReservationResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fhd
        case hd
        case sd
        case uhd
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationResolution] {
            return [
                .fhd,
                .hd,
                .sd,
                .uhd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fhd: return "FHD"
            case .hd: return "HD"
            case .sd: return "SD"
            case .uhd: return "UHD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public enum ReservationResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case channel
        case input
        case multiplex
        case output
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationResourceType] {
            return [
                .channel,
                .input,
                .multiplex,
                .output
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .channel: return "CHANNEL"
            case .input: return "INPUT"
            case .multiplex: return "MULTIPLEX"
            case .output: return "OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Special features, 'ADVANCED_AUDIO' 'AUDIO_NORMALIZATION' 'MGHD' or 'MGUHD'
    public enum ReservationSpecialFeature: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case advancedAudio
        case audioNormalization
        case mghd
        case mguhd
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationSpecialFeature] {
            return [
                .advancedAudio,
                .audioNormalization,
                .mghd,
                .mguhd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .advancedAudio: return "ADVANCED_AUDIO"
            case .audioNormalization: return "AUDIO_NORMALIZATION"
            case .mghd: return "MGHD"
            case .mguhd: return "MGUHD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Video quality, e.g. 'STANDARD' (Outputs only)
    public enum ReservationVideoQuality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enhanced
        case premium
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationVideoQuality] {
            return [
                .enhanced,
                .premium,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enhanced: return "ENHANCED"
            case .premium: return "PREMIUM"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Resource configuration (codec, resolution, bitrate, ...)
    public struct ReservationResourceSpecification {
        /// Channel class, e.g. 'STANDARD'
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// Codec, e.g. 'AVC'
        public var codec: MediaLiveClientTypes.ReservationCodec?
        /// Maximum bitrate, e.g. 'MAX_20_MBPS'
        public var maximumBitrate: MediaLiveClientTypes.ReservationMaximumBitrate?
        /// Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
        public var maximumFramerate: MediaLiveClientTypes.ReservationMaximumFramerate?
        /// Resolution, e.g. 'HD'
        public var resolution: MediaLiveClientTypes.ReservationResolution?
        /// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
        public var resourceType: MediaLiveClientTypes.ReservationResourceType?
        /// Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
        public var specialFeature: MediaLiveClientTypes.ReservationSpecialFeature?
        /// Video quality, e.g. 'STANDARD' (Outputs only)
        public var videoQuality: MediaLiveClientTypes.ReservationVideoQuality?

        public init(
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            codec: MediaLiveClientTypes.ReservationCodec? = nil,
            maximumBitrate: MediaLiveClientTypes.ReservationMaximumBitrate? = nil,
            maximumFramerate: MediaLiveClientTypes.ReservationMaximumFramerate? = nil,
            resolution: MediaLiveClientTypes.ReservationResolution? = nil,
            resourceType: MediaLiveClientTypes.ReservationResourceType? = nil,
            specialFeature: MediaLiveClientTypes.ReservationSpecialFeature? = nil,
            videoQuality: MediaLiveClientTypes.ReservationVideoQuality? = nil
        )
        {
            self.channelClass = channelClass
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.maximumFramerate = maximumFramerate
            self.resolution = resolution
            self.resourceType = resourceType
            self.specialFeature = specialFeature
            self.videoQuality = videoQuality
        }
    }

}

extension MediaLiveClientTypes {
    /// Reserved resources available for purchase
    public struct Offering {
        /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
        public var arn: Swift.String?
        /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        public var currencyCode: Swift.String?
        /// Lease duration, e.g. '12'
        public var duration: Swift.Int?
        /// Units for duration, e.g. 'MONTHS'
        public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
        /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        public var fixedPrice: Swift.Double?
        /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        public var offeringDescription: Swift.String?
        /// Unique offering ID, e.g. '87654321'
        public var offeringId: Swift.String?
        /// Offering type, e.g. 'NO_UPFRONT'
        public var offeringType: MediaLiveClientTypes.OfferingType?
        /// AWS region, e.g. 'us-west-2'
        public var region: Swift.String?
        /// Resource configuration details
        public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
        /// Recurring usage charge for each reserved resource, e.g. '157.0'
        public var usagePrice: Swift.Double?

        public init(
            arn: Swift.String? = nil,
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
            fixedPrice: Swift.Double? = nil,
            offeringDescription: Swift.String? = nil,
            offeringId: Swift.String? = nil,
            offeringType: MediaLiveClientTypes.OfferingType? = nil,
            region: Swift.String? = nil,
            resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.arn = arn
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.fixedPrice = fixedPrice
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.resourceSpecification = resourceSpecification
            self.usagePrice = usagePrice
        }
    }

}

extension MediaLiveClientTypes {

    /// M2ts Absent Input Audio Behavior
    public enum M2tsAbsentInputAudioBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case drop
        case encodeSilence
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAbsentInputAudioBehavior] {
            return [
                .drop,
                .encodeSilence
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .drop: return "DROP"
            case .encodeSilence: return "ENCODE_SILENCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Arib
    public enum M2tsArib: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsArib] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Arib Captions Pid Control
    public enum M2tsAribCaptionsPidControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAribCaptionsPidControl] {
            return [
                .auto,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Audio Buffer Model
    public enum M2tsAudioBufferModel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case atsc
        case dvb
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioBufferModel] {
            return [
                .atsc,
                .dvb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .atsc: return "ATSC"
            case .dvb: return "DVB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Audio Stream Type
    public enum M2tsAudioStreamType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case atsc
        case dvb
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioStreamType] {
            return [
                .atsc,
                .dvb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .atsc: return "ATSC"
            case .dvb: return "DVB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Buffer Model
    public enum M2tsBufferModel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiplex
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsBufferModel] {
            return [
                .multiplex,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiplex: return "MULTIPLEX"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Cc Descriptor
    public enum M2tsCcDescriptor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsCcDescriptor] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// DVB Network Information Table (NIT)
    public struct DvbNitSettings {
        /// The numeric value placed in the Network Information Table (NIT).
        /// This member is required.
        public var networkId: Swift.Int?
        /// The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
        /// This member is required.
        public var networkName: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var repInterval: Swift.Int?

        public init(
            networkId: Swift.Int? = nil,
            networkName: Swift.String? = nil,
            repInterval: Swift.Int? = nil
        )
        {
            self.networkId = networkId
            self.networkName = networkName
            self.repInterval = repInterval
        }
    }

}

extension MediaLiveClientTypes {

    /// Dvb Sdt Output Sdt
    public enum DvbSdtOutputSdt: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sdtFollow
        case sdtFollowIfPresent
        case sdtManual
        case sdtNone
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSdtOutputSdt] {
            return [
                .sdtFollow,
                .sdtFollowIfPresent,
                .sdtManual,
                .sdtNone
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sdtFollow: return "SDT_FOLLOW"
            case .sdtFollowIfPresent: return "SDT_FOLLOW_IF_PRESENT"
            case .sdtManual: return "SDT_MANUAL"
            case .sdtNone: return "SDT_NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// DVB Service Description Table (SDT)
    public struct DvbSdtSettings {
        /// Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
        public var outputSdt: MediaLiveClientTypes.DvbSdtOutputSdt?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var repInterval: Swift.Int?
        /// The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
        public var serviceName: Swift.String?
        /// The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
        public var serviceProviderName: Swift.String?

        public init(
            outputSdt: MediaLiveClientTypes.DvbSdtOutputSdt? = nil,
            repInterval: Swift.Int? = nil,
            serviceName: Swift.String? = nil,
            serviceProviderName: Swift.String? = nil
        )
        {
            self.outputSdt = outputSdt
            self.repInterval = repInterval
            self.serviceName = serviceName
            self.serviceProviderName = serviceProviderName
        }
    }

}

extension MediaLiveClientTypes {
    /// DVB Time and Date Table (SDT)
    public struct DvbTdtSettings {
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var repInterval: Swift.Int?

        public init(
            repInterval: Swift.Int? = nil
        )
        {
            self.repInterval = repInterval
        }
    }

}

extension MediaLiveClientTypes {

    /// M2ts Ebif Control
    public enum M2tsEbifControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEbifControl] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Audio Interval
    public enum M2tsAudioInterval: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case videoAndFixedIntervals
        case videoInterval
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioInterval] {
            return [
                .videoAndFixedIntervals,
                .videoInterval
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .videoAndFixedIntervals: return "VIDEO_AND_FIXED_INTERVALS"
            case .videoInterval: return "VIDEO_INTERVAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Ebp Placement
    public enum M2tsEbpPlacement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case videoAndAudioPids
        case videoPid
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEbpPlacement] {
            return [
                .videoAndAudioPids,
                .videoPid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .videoAndAudioPids: return "VIDEO_AND_AUDIO_PIDS"
            case .videoPid: return "VIDEO_PID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Es Rate In Pes
    public enum M2tsEsRateInPes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEsRateInPes] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Klv
    public enum M2tsKlv: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsKlv] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Nielsen Id3 Behavior
    public enum M2tsNielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsNielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Pcr Control
    public enum M2tsPcrControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configuredPcrPeriod
        case pcrEveryPesPacket
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsPcrControl] {
            return [
                .configuredPcrPeriod,
                .pcrEveryPesPacket
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
            case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Rate Mode
    public enum M2tsRateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsRateMode] {
            return [
                .cbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Scte35 Control
    public enum M2tsScte35Control: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsScte35Control] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Segmentation Markers
    public enum M2tsSegmentationMarkers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ebp
        case ebpLegacy
        case `none`
        case psiSegstart
        case raiAdapt
        case raiSegstart
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsSegmentationMarkers] {
            return [
                .ebp,
                .ebpLegacy,
                .none,
                .psiSegstart,
                .raiAdapt,
                .raiSegstart
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ebp: return "EBP"
            case .ebpLegacy: return "EBP_LEGACY"
            case .none: return "NONE"
            case .psiSegstart: return "PSI_SEGSTART"
            case .raiAdapt: return "RAI_ADAPT"
            case .raiSegstart: return "RAI_SEGSTART"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Segmentation Style
    public enum M2tsSegmentationStyle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case maintainCadence
        case resetCadence
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsSegmentationStyle] {
            return [
                .maintainCadence,
                .resetCadence
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .maintainCadence: return "MAINTAIN_CADENCE"
            case .resetCadence: return "RESET_CADENCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M2ts Timed Metadata Behavior
    public enum M2tsTimedMetadataBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsTimedMetadataBehavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// M2ts Settings
    public struct M2tsSettings {
        /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
        public var absentInputAudioBehavior: MediaLiveClientTypes.M2tsAbsentInputAudioBehavior?
        /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
        public var arib: MediaLiveClientTypes.M2tsArib?
        /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var aribCaptionsPid: Swift.String?
        /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
        public var aribCaptionsPidControl: MediaLiveClientTypes.M2tsAribCaptionsPidControl?
        /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
        public var audioBufferModel: MediaLiveClientTypes.M2tsAudioBufferModel?
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var audioPids: Swift.String?
        /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
        public var audioStreamType: MediaLiveClientTypes.M2tsAudioStreamType?
        /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
        public var bitrate: Swift.Int?
        /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
        public var bufferModel: MediaLiveClientTypes.M2tsBufferModel?
        /// When set to enabled, generates captionServiceDescriptor in PMT.
        public var ccDescriptor: MediaLiveClientTypes.M2tsCcDescriptor?
        /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
        public var dvbNitSettings: MediaLiveClientTypes.DvbNitSettings?
        /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
        public var dvbSdtSettings: MediaLiveClientTypes.DvbSdtSettings?
        /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var dvbSubPids: Swift.String?
        /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
        public var dvbTdtSettings: MediaLiveClientTypes.DvbTdtSettings?
        /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var dvbTeletextPid: Swift.String?
        /// If set to passthrough, passes any EBIF data from the input source to this output.
        public var ebif: MediaLiveClientTypes.M2tsEbifControl?
        /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
        public var ebpAudioInterval: MediaLiveClientTypes.M2tsAudioInterval?
        /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
        public var ebpLookaheadMs: Swift.Int?
        /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
        public var ebpPlacement: MediaLiveClientTypes.M2tsEbpPlacement?
        /// This field is unused and deprecated.
        public var ecmPid: Swift.String?
        /// Include or exclude the ES Rate field in the PES header.
        public var esRateInPes: MediaLiveClientTypes.M2tsEsRateInPes?
        /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var etvPlatformPid: Swift.String?
        /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var etvSignalPid: Swift.String?
        /// The length in seconds of each fragment. Only used with EBP markers.
        public var fragmentTime: Swift.Double?
        /// If set to passthrough, passes any KLV data from the input source to this output.
        public var klv: MediaLiveClientTypes.M2tsKlv?
        /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var klvDataPids: Swift.String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.M2tsNielsenId3Behavior?
        /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
        public var nullPacketBitrate: Swift.Double?
        /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
        public var patInterval: Swift.Int?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaLiveClientTypes.M2tsPcrControl?
        /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
        public var pcrPeriod: Swift.Int?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var pcrPid: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
        public var pmtInterval: Swift.Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var pmtPid: Swift.String?
        /// The value of the program number field in the Program Map Table.
        public var programNum: Swift.Int?
        /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
        public var rateMode: MediaLiveClientTypes.M2tsRateMode?
        /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var scte27Pids: Swift.String?
        /// Optionally pass SCTE-35 signals from the input source to this output.
        public var scte35Control: MediaLiveClientTypes.M2tsScte35Control?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var scte35Pid: Swift.String?
        /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
        public var scte35PrerollPullupMilliseconds: Swift.Double?
        /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
        public var segmentationMarkers: MediaLiveClientTypes.M2tsSegmentationMarkers?
        /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
        public var segmentationStyle: MediaLiveClientTypes.M2tsSegmentationStyle?
        /// The length in seconds of each segment. Required unless markers is set to none.
        public var segmentationTime: Swift.Double?
        /// When set to passthrough, timed metadata will be passed through from input to output.
        public var timedMetadataBehavior: MediaLiveClientTypes.M2tsTimedMetadataBehavior?
        /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var timedMetadataPid: Swift.String?
        /// The value of the transport stream ID field in the Program Map Table.
        public var transportStreamId: Swift.Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var videoPid: Swift.String?

        public init(
            absentInputAudioBehavior: MediaLiveClientTypes.M2tsAbsentInputAudioBehavior? = nil,
            arib: MediaLiveClientTypes.M2tsArib? = nil,
            aribCaptionsPid: Swift.String? = nil,
            aribCaptionsPidControl: MediaLiveClientTypes.M2tsAribCaptionsPidControl? = nil,
            audioBufferModel: MediaLiveClientTypes.M2tsAudioBufferModel? = nil,
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: Swift.String? = nil,
            audioStreamType: MediaLiveClientTypes.M2tsAudioStreamType? = nil,
            bitrate: Swift.Int? = nil,
            bufferModel: MediaLiveClientTypes.M2tsBufferModel? = nil,
            ccDescriptor: MediaLiveClientTypes.M2tsCcDescriptor? = nil,
            dvbNitSettings: MediaLiveClientTypes.DvbNitSettings? = nil,
            dvbSdtSettings: MediaLiveClientTypes.DvbSdtSettings? = nil,
            dvbSubPids: Swift.String? = nil,
            dvbTdtSettings: MediaLiveClientTypes.DvbTdtSettings? = nil,
            dvbTeletextPid: Swift.String? = nil,
            ebif: MediaLiveClientTypes.M2tsEbifControl? = nil,
            ebpAudioInterval: MediaLiveClientTypes.M2tsAudioInterval? = nil,
            ebpLookaheadMs: Swift.Int? = nil,
            ebpPlacement: MediaLiveClientTypes.M2tsEbpPlacement? = nil,
            ecmPid: Swift.String? = nil,
            esRateInPes: MediaLiveClientTypes.M2tsEsRateInPes? = nil,
            etvPlatformPid: Swift.String? = nil,
            etvSignalPid: Swift.String? = nil,
            fragmentTime: Swift.Double? = nil,
            klv: MediaLiveClientTypes.M2tsKlv? = nil,
            klvDataPids: Swift.String? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.M2tsNielsenId3Behavior? = nil,
            nullPacketBitrate: Swift.Double? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaLiveClientTypes.M2tsPcrControl? = nil,
            pcrPeriod: Swift.Int? = nil,
            pcrPid: Swift.String? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.String? = nil,
            programNum: Swift.Int? = nil,
            rateMode: MediaLiveClientTypes.M2tsRateMode? = nil,
            scte27Pids: Swift.String? = nil,
            scte35Control: MediaLiveClientTypes.M2tsScte35Control? = nil,
            scte35Pid: Swift.String? = nil,
            scte35PrerollPullupMilliseconds: Swift.Double? = nil,
            segmentationMarkers: MediaLiveClientTypes.M2tsSegmentationMarkers? = nil,
            segmentationStyle: MediaLiveClientTypes.M2tsSegmentationStyle? = nil,
            segmentationTime: Swift.Double? = nil,
            timedMetadataBehavior: MediaLiveClientTypes.M2tsTimedMetadataBehavior? = nil,
            timedMetadataPid: Swift.String? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.String? = nil
        )
        {
            self.absentInputAudioBehavior = absentInputAudioBehavior
            self.arib = arib
            self.aribCaptionsPid = aribCaptionsPid
            self.aribCaptionsPidControl = aribCaptionsPidControl
            self.audioBufferModel = audioBufferModel
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.audioStreamType = audioStreamType
            self.bitrate = bitrate
            self.bufferModel = bufferModel
            self.ccDescriptor = ccDescriptor
            self.dvbNitSettings = dvbNitSettings
            self.dvbSdtSettings = dvbSdtSettings
            self.dvbSubPids = dvbSubPids
            self.dvbTdtSettings = dvbTdtSettings
            self.dvbTeletextPid = dvbTeletextPid
            self.ebif = ebif
            self.ebpAudioInterval = ebpAudioInterval
            self.ebpLookaheadMs = ebpLookaheadMs
            self.ebpPlacement = ebpPlacement
            self.ecmPid = ecmPid
            self.esRateInPes = esRateInPes
            self.etvPlatformPid = etvPlatformPid
            self.etvSignalPid = etvSignalPid
            self.fragmentTime = fragmentTime
            self.klv = klv
            self.klvDataPids = klvDataPids
            self.nielsenId3Behavior = nielsenId3Behavior
            self.nullPacketBitrate = nullPacketBitrate
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.programNum = programNum
            self.rateMode = rateMode
            self.scte27Pids = scte27Pids
            self.scte35Control = scte35Control
            self.scte35Pid = scte35Pid
            self.scte35PrerollPullupMilliseconds = scte35PrerollPullupMilliseconds
            self.segmentationMarkers = segmentationMarkers
            self.segmentationStyle = segmentationStyle
            self.segmentationTime = segmentationTime
            self.timedMetadataBehavior = timedMetadataBehavior
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }

}

extension MediaLiveClientTypes {
    /// Raw Settings
    public struct RawSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Archive Container Settings
    public struct ArchiveContainerSettings {
        /// M2ts Settings
        public var m2tsSettings: MediaLiveClientTypes.M2tsSettings?
        /// Raw Settings
        public var rawSettings: MediaLiveClientTypes.RawSettings?

        public init(
            m2tsSettings: MediaLiveClientTypes.M2tsSettings? = nil,
            rawSettings: MediaLiveClientTypes.RawSettings? = nil
        )
        {
            self.m2tsSettings = m2tsSettings
            self.rawSettings = rawSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Archive Output Settings
    public struct ArchiveOutputSettings {
        /// Settings specific to the container type of the file.
        /// This member is required.
        public var containerSettings: MediaLiveClientTypes.ArchiveContainerSettings?
        /// Output file extension. If excluded, this will be auto-selected from the container type.
        public var `extension`: Swift.String?
        /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
        public var nameModifier: Swift.String?

        public init(
            containerSettings: MediaLiveClientTypes.ArchiveContainerSettings? = nil,
            `extension`: Swift.String? = nil,
            nameModifier: Swift.String? = nil
        )
        {
            self.containerSettings = containerSettings
            self.`extension` = `extension`
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes {
    /// Cmaf Ingest Output Settings
    public struct CmafIngestOutputSettings {
        /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
        public var nameModifier: Swift.String?

        public init(
            nameModifier: Swift.String? = nil
        )
        {
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes {
    /// Frame Capture Output Settings
    public struct FrameCaptureOutputSettings {
        /// Required if the output group contains more than one output. This modifier forms part of the output file name.
        public var nameModifier: Swift.String?

        public init(
            nameModifier: Swift.String? = nil
        )
        {
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes {

    /// Hls H265 Packaging Type
    public enum HlsH265PackagingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hev1
        case hvc1
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsH265PackagingType] {
            return [
                .hev1,
                .hvc1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hvc1: return "HVC1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Audio Only Hls Track Type
    public enum AudioOnlyHlsTrackType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alternateAudioAutoSelect
        case alternateAudioAutoSelectDefault
        case alternateAudioNotAutoSelect
        case audioOnlyVariantStream
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioOnlyHlsTrackType] {
            return [
                .alternateAudioAutoSelect,
                .alternateAudioAutoSelectDefault,
                .alternateAudioNotAutoSelect,
                .audioOnlyVariantStream
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
            case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
            case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
            case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Audio Only Hls Segment Type
    public enum AudioOnlyHlsSegmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aac
        case fmp4
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioOnlyHlsSegmentType] {
            return [
                .aac,
                .fmp4
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aac: return "AAC"
            case .fmp4: return "FMP4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Audio Only Hls Settings
    public struct AudioOnlyHlsSettings {
        /// Specifies the group to which the audio Rendition belongs.
        public var audioGroupId: Swift.String?
        /// Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
        public var audioOnlyImage: MediaLiveClientTypes.InputLocation?
        /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
        public var audioTrackType: MediaLiveClientTypes.AudioOnlyHlsTrackType?
        /// Specifies the segment type.
        public var segmentType: MediaLiveClientTypes.AudioOnlyHlsSegmentType?

        public init(
            audioGroupId: Swift.String? = nil,
            audioOnlyImage: MediaLiveClientTypes.InputLocation? = nil,
            audioTrackType: MediaLiveClientTypes.AudioOnlyHlsTrackType? = nil,
            segmentType: MediaLiveClientTypes.AudioOnlyHlsSegmentType? = nil
        )
        {
            self.audioGroupId = audioGroupId
            self.audioOnlyImage = audioOnlyImage
            self.audioTrackType = audioTrackType
            self.segmentType = segmentType
        }
    }

}

extension MediaLiveClientTypes {

    /// Fmp4 Nielsen Id3 Behavior
    public enum Fmp4NielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [Fmp4NielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Fmp4 Timed Metadata Behavior
    public enum Fmp4TimedMetadataBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [Fmp4TimedMetadataBehavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Fmp4 Hls Settings
    public struct Fmp4HlsSettings {
        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public var audioRenditionSets: Swift.String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.Fmp4NielsenId3Behavior?
        /// When set to passthrough, timed metadata is passed through from input to output.
        public var timedMetadataBehavior: MediaLiveClientTypes.Fmp4TimedMetadataBehavior?

        public init(
            audioRenditionSets: Swift.String? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.Fmp4NielsenId3Behavior? = nil,
            timedMetadataBehavior: MediaLiveClientTypes.Fmp4TimedMetadataBehavior? = nil
        )
        {
            self.audioRenditionSets = audioRenditionSets
            self.nielsenId3Behavior = nielsenId3Behavior
            self.timedMetadataBehavior = timedMetadataBehavior
        }
    }

}

extension MediaLiveClientTypes {
    /// Frame Capture Hls Settings
    public struct FrameCaptureHlsSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// M3u8 Klv Behavior
    public enum M3u8KlvBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8KlvBehavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M3u8 Nielsen Id3 Behavior
    public enum M3u8NielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8NielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M3u8 Pcr Control
    public enum M3u8PcrControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configuredPcrPeriod
        case pcrEveryPesPacket
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8PcrControl] {
            return [
                .configuredPcrPeriod,
                .pcrEveryPesPacket
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
            case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M3u8 Scte35 Behavior
    public enum M3u8Scte35Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8Scte35Behavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// M3u8 Timed Metadata Behavior
    public enum M3u8TimedMetadataBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8TimedMetadataBehavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings information for the .m3u8 container
    public struct M3u8Settings {
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
        public var audioPids: Swift.String?
        /// This parameter is unused and deprecated.
        public var ecmPid: Swift.String?
        /// If set to passthrough, passes any KLV data from the input source to this output.
        public var klvBehavior: MediaLiveClientTypes.M3u8KlvBehavior?
        /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public var klvDataPids: Swift.String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.M3u8NielsenId3Behavior?
        /// The number of milliseconds between instances of this table in the output transport stream. A value of "0" writes out the PMT once per segment file.
        public var patInterval: Swift.Int?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaLiveClientTypes.M3u8PcrControl?
        /// Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
        public var pcrPeriod: Swift.Int?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
        public var pcrPid: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream. A value of "0" writes out the PMT once per segment file.
        public var pmtInterval: Swift.Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
        public var pmtPid: Swift.String?
        /// The value of the program number field in the Program Map Table.
        public var programNum: Swift.Int?
        /// If set to passthrough, passes any SCTE-35 signals from the input source to this output.
        public var scte35Behavior: MediaLiveClientTypes.M3u8Scte35Behavior?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
        public var scte35Pid: Swift.String?
        /// When set to passthrough, timed metadata is passed through from input to output.
        public var timedMetadataBehavior: MediaLiveClientTypes.M3u8TimedMetadataBehavior?
        /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public var timedMetadataPid: Swift.String?
        /// The value of the transport stream ID field in the Program Map Table.
        public var transportStreamId: Swift.Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
        public var videoPid: Swift.String?

        public init(
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: Swift.String? = nil,
            ecmPid: Swift.String? = nil,
            klvBehavior: MediaLiveClientTypes.M3u8KlvBehavior? = nil,
            klvDataPids: Swift.String? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.M3u8NielsenId3Behavior? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaLiveClientTypes.M3u8PcrControl? = nil,
            pcrPeriod: Swift.Int? = nil,
            pcrPid: Swift.String? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.String? = nil,
            programNum: Swift.Int? = nil,
            scte35Behavior: MediaLiveClientTypes.M3u8Scte35Behavior? = nil,
            scte35Pid: Swift.String? = nil,
            timedMetadataBehavior: MediaLiveClientTypes.M3u8TimedMetadataBehavior? = nil,
            timedMetadataPid: Swift.String? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.String? = nil
        )
        {
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.ecmPid = ecmPid
            self.klvBehavior = klvBehavior
            self.klvDataPids = klvDataPids
            self.nielsenId3Behavior = nielsenId3Behavior
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.programNum = programNum
            self.scte35Behavior = scte35Behavior
            self.scte35Pid = scte35Pid
            self.timedMetadataBehavior = timedMetadataBehavior
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }

}

extension MediaLiveClientTypes {
    /// Standard Hls Settings
    public struct StandardHlsSettings {
        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public var audioRenditionSets: Swift.String?
        /// Settings information for the .m3u8 container
        /// This member is required.
        public var m3u8Settings: MediaLiveClientTypes.M3u8Settings?

        public init(
            audioRenditionSets: Swift.String? = nil,
            m3u8Settings: MediaLiveClientTypes.M3u8Settings? = nil
        )
        {
            self.audioRenditionSets = audioRenditionSets
            self.m3u8Settings = m3u8Settings
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Settings
    public struct HlsSettings {
        /// Audio Only Hls Settings
        public var audioOnlyHlsSettings: MediaLiveClientTypes.AudioOnlyHlsSettings?
        /// Fmp4 Hls Settings
        public var fmp4HlsSettings: MediaLiveClientTypes.Fmp4HlsSettings?
        /// Frame Capture Hls Settings
        public var frameCaptureHlsSettings: MediaLiveClientTypes.FrameCaptureHlsSettings?
        /// Standard Hls Settings
        public var standardHlsSettings: MediaLiveClientTypes.StandardHlsSettings?

        public init(
            audioOnlyHlsSettings: MediaLiveClientTypes.AudioOnlyHlsSettings? = nil,
            fmp4HlsSettings: MediaLiveClientTypes.Fmp4HlsSettings? = nil,
            frameCaptureHlsSettings: MediaLiveClientTypes.FrameCaptureHlsSettings? = nil,
            standardHlsSettings: MediaLiveClientTypes.StandardHlsSettings? = nil
        )
        {
            self.audioOnlyHlsSettings = audioOnlyHlsSettings
            self.fmp4HlsSettings = fmp4HlsSettings
            self.frameCaptureHlsSettings = frameCaptureHlsSettings
            self.standardHlsSettings = standardHlsSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Output Settings
    public struct HlsOutputSettings {
        /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
        public var h265PackagingType: MediaLiveClientTypes.HlsH265PackagingType?
        /// Settings regarding the underlying stream. These settings are different for audio-only outputs.
        /// This member is required.
        public var hlsSettings: MediaLiveClientTypes.HlsSettings?
        /// String concatenated to the end of the destination filename. Accepts "Format Identifiers":#formatIdentifierParameters.
        public var nameModifier: Swift.String?
        /// String concatenated to end of segment filenames.
        public var segmentModifier: Swift.String?

        public init(
            h265PackagingType: MediaLiveClientTypes.HlsH265PackagingType? = nil,
            hlsSettings: MediaLiveClientTypes.HlsSettings? = nil,
            nameModifier: Swift.String? = nil,
            segmentModifier: Swift.String? = nil
        )
        {
            self.h265PackagingType = h265PackagingType
            self.hlsSettings = hlsSettings
            self.nameModifier = nameModifier
            self.segmentModifier = segmentModifier
        }
    }

}

extension MediaLiveClientTypes {
    /// Media Package Output Settings
    public struct MediaPackageOutputSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// Ms Smooth H265 Packaging Type
    public enum MsSmoothH265PackagingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hev1
        case hvc1
        case sdkUnknown(Swift.String)

        public static var allCases: [MsSmoothH265PackagingType] {
            return [
                .hev1,
                .hvc1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hvc1: return "HVC1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Ms Smooth Output Settings
    public struct MsSmoothOutputSettings {
        /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
        public var h265PackagingType: MediaLiveClientTypes.MsSmoothH265PackagingType?
        /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
        public var nameModifier: Swift.String?

        public init(
            h265PackagingType: MediaLiveClientTypes.MsSmoothH265PackagingType? = nil,
            nameModifier: Swift.String? = nil
        )
        {
            self.h265PackagingType = h265PackagingType
            self.nameModifier = nameModifier
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex M2ts Settings
    public struct MultiplexM2tsSettings {
        /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
        public var absentInputAudioBehavior: MediaLiveClientTypes.M2tsAbsentInputAudioBehavior?
        /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
        public var arib: MediaLiveClientTypes.M2tsArib?
        /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
        public var audioBufferModel: MediaLiveClientTypes.M2tsAudioBufferModel?
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
        public var audioStreamType: MediaLiveClientTypes.M2tsAudioStreamType?
        /// When set to enabled, generates captionServiceDescriptor in PMT.
        public var ccDescriptor: MediaLiveClientTypes.M2tsCcDescriptor?
        /// If set to passthrough, passes any EBIF data from the input source to this output.
        public var ebif: MediaLiveClientTypes.M2tsEbifControl?
        /// Include or exclude the ES Rate field in the PES header.
        public var esRateInPes: MediaLiveClientTypes.M2tsEsRateInPes?
        /// If set to passthrough, passes any KLV data from the input source to this output.
        public var klv: MediaLiveClientTypes.M2tsKlv?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.M2tsNielsenId3Behavior?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaLiveClientTypes.M2tsPcrControl?
        /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
        public var pcrPeriod: Swift.Int?
        /// Optionally pass SCTE-35 signals from the input source to this output.
        public var scte35Control: MediaLiveClientTypes.M2tsScte35Control?
        /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
        public var scte35PrerollPullupMilliseconds: Swift.Double?

        public init(
            absentInputAudioBehavior: MediaLiveClientTypes.M2tsAbsentInputAudioBehavior? = nil,
            arib: MediaLiveClientTypes.M2tsArib? = nil,
            audioBufferModel: MediaLiveClientTypes.M2tsAudioBufferModel? = nil,
            audioFramesPerPes: Swift.Int? = nil,
            audioStreamType: MediaLiveClientTypes.M2tsAudioStreamType? = nil,
            ccDescriptor: MediaLiveClientTypes.M2tsCcDescriptor? = nil,
            ebif: MediaLiveClientTypes.M2tsEbifControl? = nil,
            esRateInPes: MediaLiveClientTypes.M2tsEsRateInPes? = nil,
            klv: MediaLiveClientTypes.M2tsKlv? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.M2tsNielsenId3Behavior? = nil,
            pcrControl: MediaLiveClientTypes.M2tsPcrControl? = nil,
            pcrPeriod: Swift.Int? = nil,
            scte35Control: MediaLiveClientTypes.M2tsScte35Control? = nil,
            scte35PrerollPullupMilliseconds: Swift.Double? = nil
        )
        {
            self.absentInputAudioBehavior = absentInputAudioBehavior
            self.arib = arib
            self.audioBufferModel = audioBufferModel
            self.audioFramesPerPes = audioFramesPerPes
            self.audioStreamType = audioStreamType
            self.ccDescriptor = ccDescriptor
            self.ebif = ebif
            self.esRateInPes = esRateInPes
            self.klv = klv
            self.nielsenId3Behavior = nielsenId3Behavior
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.scte35Control = scte35Control
            self.scte35PrerollPullupMilliseconds = scte35PrerollPullupMilliseconds
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex Container Settings
    public struct MultiplexContainerSettings {
        /// Multiplex M2ts Settings
        public var multiplexM2tsSettings: MediaLiveClientTypes.MultiplexM2tsSettings?

        public init(
            multiplexM2tsSettings: MediaLiveClientTypes.MultiplexM2tsSettings? = nil
        )
        {
            self.multiplexM2tsSettings = multiplexM2tsSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Reference to an OutputDestination ID defined in the channel
    public struct OutputLocationRef {
        /// Placeholder documentation for __string
        public var destinationRefId: Swift.String?

        public init(
            destinationRefId: Swift.String? = nil
        )
        {
            self.destinationRefId = destinationRefId
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex Output Settings
    public struct MultiplexOutputSettings {
        /// Multiplex Container Settings
        public var containerSettings: MediaLiveClientTypes.MultiplexContainerSettings?
        /// Destination is a Multiplex.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?

        public init(
            containerSettings: MediaLiveClientTypes.MultiplexContainerSettings? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil
        )
        {
            self.containerSettings = containerSettings
            self.destination = destination
        }
    }

}

extension MediaLiveClientTypes {

    /// Rtmp Output Certificate Mode
    public enum RtmpOutputCertificateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case selfSigned
        case verifyAuthenticity
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpOutputCertificateMode] {
            return [
                .selfSigned,
                .verifyAuthenticity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .selfSigned: return "SELF_SIGNED"
            case .verifyAuthenticity: return "VERIFY_AUTHENTICITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Output Settings
    public struct RtmpOutputSettings {
        /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
        public var certificateMode: MediaLiveClientTypes.RtmpOutputCertificateMode?
        /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Number of retry attempts.
        public var numRetries: Swift.Int?

        public init(
            certificateMode: MediaLiveClientTypes.RtmpOutputCertificateMode? = nil,
            connectionRetryInterval: Swift.Int? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            numRetries: Swift.Int? = nil
        )
        {
            self.certificateMode = certificateMode
            self.connectionRetryInterval = connectionRetryInterval
            self.destination = destination
            self.numRetries = numRetries
        }
    }

}

extension MediaLiveClientTypes {
    /// Udp Container Settings
    public struct UdpContainerSettings {
        /// M2ts Settings
        public var m2tsSettings: MediaLiveClientTypes.M2tsSettings?

        public init(
            m2tsSettings: MediaLiveClientTypes.M2tsSettings? = nil
        )
        {
            self.m2tsSettings = m2tsSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Srt Encryption Type
    public enum SrtEncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case aes192
        case aes256
        case sdkUnknown(Swift.String)

        public static var allCases: [SrtEncryptionType] {
            return [
                .aes128,
                .aes192,
                .aes256
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES128"
            case .aes192: return "AES192"
            case .aes256: return "AES256"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Srt Output Settings
    public struct SrtOutputSettings {
        /// SRT output buffering in milliseconds. A higher value increases latency through the encoder. But the benefits are that it helps to maintain a constant, low-jitter SRT output, and it accommodates clock recovery, input switching, input disruptions, picture reordering, and so on. Range: 0-10000 milliseconds.
        public var bufferMsec: Swift.Int?
        /// Udp Container Settings
        /// This member is required.
        public var containerSettings: MediaLiveClientTypes.UdpContainerSettings?
        /// Reference to an OutputDestination ID defined in the channel
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// The encryption level for the content. Valid values are AES128, AES192, AES256. You and the downstream system should plan how to set this field because the values must not conflict with each other.
        public var encryptionType: MediaLiveClientTypes.SrtEncryptionType?
        /// The latency value, in milliseconds, that is proposed during the SRT connection handshake. SRT will choose the maximum of the values proposed by the sender and receiver. On the sender side, latency is the amount of time a packet is held to give it a chance to be delivered successfully. On the receiver side, latency is the amount of time the packet is held before delivering to the application, aiding in packet recovery and matching as closely as possible the packet timing of the sender. Range: 40-16000 milliseconds.
        public var latency: Swift.Int?

        public init(
            bufferMsec: Swift.Int? = nil,
            containerSettings: MediaLiveClientTypes.UdpContainerSettings? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            encryptionType: MediaLiveClientTypes.SrtEncryptionType? = nil,
            latency: Swift.Int? = nil
        )
        {
            self.bufferMsec = bufferMsec
            self.containerSettings = containerSettings
            self.destination = destination
            self.encryptionType = encryptionType
            self.latency = latency
        }
    }

}

extension MediaLiveClientTypes {

    /// Fec Output Include Fec
    public enum FecOutputIncludeFec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case column
        case columnAndRow
        case sdkUnknown(Swift.String)

        public static var allCases: [FecOutputIncludeFec] {
            return [
                .column,
                .columnAndRow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .column: return "COLUMN"
            case .columnAndRow: return "COLUMN_AND_ROW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Fec Output Settings
    public struct FecOutputSettings {
        /// Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
        public var columnDepth: Swift.Int?
        /// Enables column only or column and row based FEC
        public var includeFec: MediaLiveClientTypes.FecOutputIncludeFec?
        /// Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
        public var rowLength: Swift.Int?

        public init(
            columnDepth: Swift.Int? = nil,
            includeFec: MediaLiveClientTypes.FecOutputIncludeFec? = nil,
            rowLength: Swift.Int? = nil
        )
        {
            self.columnDepth = columnDepth
            self.includeFec = includeFec
            self.rowLength = rowLength
        }
    }

}

extension MediaLiveClientTypes {
    /// Udp Output Settings
    public struct UdpOutputSettings {
        /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
        public var bufferMsec: Swift.Int?
        /// Udp Container Settings
        /// This member is required.
        public var containerSettings: MediaLiveClientTypes.UdpContainerSettings?
        /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
        public var fecOutputSettings: MediaLiveClientTypes.FecOutputSettings?

        public init(
            bufferMsec: Swift.Int? = nil,
            containerSettings: MediaLiveClientTypes.UdpContainerSettings? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            fecOutputSettings: MediaLiveClientTypes.FecOutputSettings? = nil
        )
        {
            self.bufferMsec = bufferMsec
            self.containerSettings = containerSettings
            self.destination = destination
            self.fecOutputSettings = fecOutputSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Output Settings
    public struct OutputSettings {
        /// Archive Output Settings
        public var archiveOutputSettings: MediaLiveClientTypes.ArchiveOutputSettings?
        /// Cmaf Ingest Output Settings
        public var cmafIngestOutputSettings: MediaLiveClientTypes.CmafIngestOutputSettings?
        /// Frame Capture Output Settings
        public var frameCaptureOutputSettings: MediaLiveClientTypes.FrameCaptureOutputSettings?
        /// Hls Output Settings
        public var hlsOutputSettings: MediaLiveClientTypes.HlsOutputSettings?
        /// Media Package Output Settings
        public var mediaPackageOutputSettings: MediaLiveClientTypes.MediaPackageOutputSettings?
        /// Ms Smooth Output Settings
        public var msSmoothOutputSettings: MediaLiveClientTypes.MsSmoothOutputSettings?
        /// Multiplex Output Settings
        public var multiplexOutputSettings: MediaLiveClientTypes.MultiplexOutputSettings?
        /// Rtmp Output Settings
        public var rtmpOutputSettings: MediaLiveClientTypes.RtmpOutputSettings?
        /// Srt Output Settings
        public var srtOutputSettings: MediaLiveClientTypes.SrtOutputSettings?
        /// Udp Output Settings
        public var udpOutputSettings: MediaLiveClientTypes.UdpOutputSettings?

        public init(
            archiveOutputSettings: MediaLiveClientTypes.ArchiveOutputSettings? = nil,
            cmafIngestOutputSettings: MediaLiveClientTypes.CmafIngestOutputSettings? = nil,
            frameCaptureOutputSettings: MediaLiveClientTypes.FrameCaptureOutputSettings? = nil,
            hlsOutputSettings: MediaLiveClientTypes.HlsOutputSettings? = nil,
            mediaPackageOutputSettings: MediaLiveClientTypes.MediaPackageOutputSettings? = nil,
            msSmoothOutputSettings: MediaLiveClientTypes.MsSmoothOutputSettings? = nil,
            multiplexOutputSettings: MediaLiveClientTypes.MultiplexOutputSettings? = nil,
            rtmpOutputSettings: MediaLiveClientTypes.RtmpOutputSettings? = nil,
            srtOutputSettings: MediaLiveClientTypes.SrtOutputSettings? = nil,
            udpOutputSettings: MediaLiveClientTypes.UdpOutputSettings? = nil
        )
        {
            self.archiveOutputSettings = archiveOutputSettings
            self.cmafIngestOutputSettings = cmafIngestOutputSettings
            self.frameCaptureOutputSettings = frameCaptureOutputSettings
            self.hlsOutputSettings = hlsOutputSettings
            self.mediaPackageOutputSettings = mediaPackageOutputSettings
            self.msSmoothOutputSettings = msSmoothOutputSettings
            self.multiplexOutputSettings = multiplexOutputSettings
            self.rtmpOutputSettings = rtmpOutputSettings
            self.srtOutputSettings = srtOutputSettings
            self.udpOutputSettings = udpOutputSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Output settings. There can be multiple outputs within a group.
    public struct Output {
        /// The names of the AudioDescriptions used as audio sources for this output.
        public var audioDescriptionNames: [Swift.String]?
        /// The names of the CaptionDescriptions used as caption sources for this output.
        public var captionDescriptionNames: [Swift.String]?
        /// The name used to identify an output.
        public var outputName: Swift.String?
        /// Output type-specific settings.
        /// This member is required.
        public var outputSettings: MediaLiveClientTypes.OutputSettings?
        /// The name of the VideoDescription used as the source for this output.
        public var videoDescriptionName: Swift.String?

        public init(
            audioDescriptionNames: [Swift.String]? = nil,
            captionDescriptionNames: [Swift.String]? = nil,
            outputName: Swift.String? = nil,
            outputSettings: MediaLiveClientTypes.OutputSettings? = nil,
            videoDescriptionName: Swift.String? = nil
        )
        {
            self.audioDescriptionNames = audioDescriptionNames
            self.captionDescriptionNames = captionDescriptionNames
            self.outputName = outputName
            self.outputSettings = outputSettings
            self.videoDescriptionName = videoDescriptionName
        }
    }

}

extension MediaLiveClientTypes {

    /// S3 Canned Acl
    public enum S3CannedAcl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authenticatedRead
        case bucketOwnerFullControl
        case bucketOwnerRead
        case publicRead
        case sdkUnknown(Swift.String)

        public static var allCases: [S3CannedAcl] {
            return [
                .authenticatedRead,
                .bucketOwnerFullControl,
                .bucketOwnerRead,
                .publicRead
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "AUTHENTICATED_READ"
            case .bucketOwnerFullControl: return "BUCKET_OWNER_FULL_CONTROL"
            case .bucketOwnerRead: return "BUCKET_OWNER_READ"
            case .publicRead: return "PUBLIC_READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Archive S3 Settings
    public struct ArchiveS3Settings {
        /// Specify the canned ACL to apply to each S3 request. Defaults to none.
        public var cannedAcl: MediaLiveClientTypes.S3CannedAcl?

        public init(
            cannedAcl: MediaLiveClientTypes.S3CannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }

}

extension MediaLiveClientTypes {
    /// Archive Cdn Settings
    public struct ArchiveCdnSettings {
        /// Archive S3 Settings
        public var archiveS3Settings: MediaLiveClientTypes.ArchiveS3Settings?

        public init(
            archiveS3Settings: MediaLiveClientTypes.ArchiveS3Settings? = nil
        )
        {
            self.archiveS3Settings = archiveS3Settings
        }
    }

}

extension MediaLiveClientTypes {
    /// Archive Group Settings
    public struct ArchiveGroupSettings {
        /// Parameters that control interactions with the CDN.
        public var archiveCdnSettings: MediaLiveClientTypes.ArchiveCdnSettings?
        /// A directory and base filename where archive files should be written.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Number of seconds to write to archive file before closing and starting a new one.
        public var rolloverInterval: Swift.Int?

        public init(
            archiveCdnSettings: MediaLiveClientTypes.ArchiveCdnSettings? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            rolloverInterval: Swift.Int? = nil
        )
        {
            self.archiveCdnSettings = archiveCdnSettings
            self.destination = destination
            self.rolloverInterval = rolloverInterval
        }
    }

}

extension MediaLiveClientTypes {

    /// Cmaf Nielsen Id3 Behavior
    public enum CmafNielsenId3Behavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafNielsenId3Behavior] {
            return [
                .noPassthrough,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Scte35 Type
    public enum Scte35Type: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case scte35WithoutSegmentation
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35Type] {
            return [
                .none,
                .scte35WithoutSegmentation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .scte35WithoutSegmentation: return "SCTE_35_WITHOUT_SEGMENTATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Cmaf Ingest Segment Length Units
    public enum CmafIngestSegmentLengthUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case milliseconds
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafIngestSegmentLengthUnits] {
            return [
                .milliseconds,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .milliseconds: return "MILLISECONDS"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Cmaf Ingest Group Settings
    public struct CmafIngestGroupSettings {
        /// A HTTP destination for the tracks
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3Behavior: MediaLiveClientTypes.CmafNielsenId3Behavior?
        /// Type of scte35 track to add. none or scte35WithoutSegmentation
        public var scte35Type: MediaLiveClientTypes.Scte35Type?
        /// The nominal duration of segments. The units are specified in SegmentLengthUnits. The segments will end on the next keyframe after the specified duration, so the actual segment length might be longer, and it might be a fraction of the units.
        public var segmentLength: Swift.Int?
        /// Time unit for segment length parameter.
        public var segmentLengthUnits: MediaLiveClientTypes.CmafIngestSegmentLengthUnits?
        /// Number of milliseconds to delay the output from the second pipeline.
        public var sendDelayMs: Swift.Int?

        public init(
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            nielsenId3Behavior: MediaLiveClientTypes.CmafNielsenId3Behavior? = nil,
            scte35Type: MediaLiveClientTypes.Scte35Type? = nil,
            segmentLength: Swift.Int? = nil,
            segmentLengthUnits: MediaLiveClientTypes.CmafIngestSegmentLengthUnits? = nil,
            sendDelayMs: Swift.Int? = nil
        )
        {
            self.destination = destination
            self.nielsenId3Behavior = nielsenId3Behavior
            self.scte35Type = scte35Type
            self.segmentLength = segmentLength
            self.segmentLengthUnits = segmentLengthUnits
            self.sendDelayMs = sendDelayMs
        }
    }

}

extension MediaLiveClientTypes {
    /// Frame Capture S3 Settings
    public struct FrameCaptureS3Settings {
        /// Specify the canned ACL to apply to each S3 request. Defaults to none.
        public var cannedAcl: MediaLiveClientTypes.S3CannedAcl?

        public init(
            cannedAcl: MediaLiveClientTypes.S3CannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }

}

extension MediaLiveClientTypes {
    /// Frame Capture Cdn Settings
    public struct FrameCaptureCdnSettings {
        /// Frame Capture S3 Settings
        public var frameCaptureS3Settings: MediaLiveClientTypes.FrameCaptureS3Settings?

        public init(
            frameCaptureS3Settings: MediaLiveClientTypes.FrameCaptureS3Settings? = nil
        )
        {
            self.frameCaptureS3Settings = frameCaptureS3Settings
        }
    }

}

extension MediaLiveClientTypes {
    /// Frame Capture Group Settings
    public struct FrameCaptureGroupSettings {
        /// The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Parameters that control interactions with the CDN.
        public var frameCaptureCdnSettings: MediaLiveClientTypes.FrameCaptureCdnSettings?

        public init(
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            frameCaptureCdnSettings: MediaLiveClientTypes.FrameCaptureCdnSettings? = nil
        )
        {
            self.destination = destination
            self.frameCaptureCdnSettings = frameCaptureCdnSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Hls Caption Language Setting
    public enum HlsCaptionLanguageSetting: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case `none`
        case omit
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCaptionLanguageSetting] {
            return [
                .insert,
                .none,
                .omit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case .omit: return "OMIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Client Cache
    public enum HlsClientCache: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsClientCache] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Codec Specification
    public enum HlsCodecSpecification: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rfc4281
        case rfc6381
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCodecSpecification] {
            return [
                .rfc4281,
                .rfc6381
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rfc4281: return "RFC_4281"
            case .rfc6381: return "RFC_6381"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Directory Structure
    public enum HlsDirectoryStructure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case singleDirectory
        case subdirectoryPerStream
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsDirectoryStructure] {
            return [
                .singleDirectory,
                .subdirectoryPerStream
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .singleDirectory: return "SINGLE_DIRECTORY"
            case .subdirectoryPerStream: return "SUBDIRECTORY_PER_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Discontinuity Tags
    public enum HlsDiscontinuityTags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case neverInsert
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsDiscontinuityTags] {
            return [
                .insert,
                .neverInsert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .neverInsert: return "NEVER_INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Encryption Type
    public enum HlsEncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case sampleAes
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsEncryptionType] {
            return [
                .aes128,
                .sampleAes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES128"
            case .sampleAes: return "SAMPLE_AES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Akamai Http Transfer Mode
    public enum HlsAkamaiHttpTransferMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case chunked
        case nonChunked
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAkamaiHttpTransferMode] {
            return [
                .chunked,
                .nonChunked
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .chunked: return "CHUNKED"
            case .nonChunked: return "NON_CHUNKED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Akamai Settings
    public struct HlsAkamaiSettings {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
        public var httpTransferMode: MediaLiveClientTypes.HlsAkamaiHttpTransferMode?
        /// Number of retry attempts that will be made before the Live Event is put into an error state. Applies only if the CDN destination URI begins with "s3" or "mediastore". For other URIs, the value is always 3.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?
        /// Salt for authenticated Akamai.
        public var salt: Swift.String?
        /// Token parameter for authenticated akamai. If not specified, gda is used.
        public var token: Swift.String?

        public init(
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            httpTransferMode: MediaLiveClientTypes.HlsAkamaiHttpTransferMode? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil,
            salt: Swift.String? = nil,
            token: Swift.String? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.httpTransferMode = httpTransferMode
            self.numRetries = numRetries
            self.restartDelay = restartDelay
            self.salt = salt
            self.token = token
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Basic Put Settings
    public struct HlsBasicPutSettings {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Number of retry attempts that will be made before the Live Event is put into an error state. Applies only if the CDN destination URI begins with "s3" or "mediastore". For other URIs, the value is always 3.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init(
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {

    /// Hls Media Store Storage Class
    public enum HlsMediaStoreStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case temporal
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsMediaStoreStorageClass] {
            return [
                .temporal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .temporal: return "TEMPORAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Media Store Settings
    public struct HlsMediaStoreSettings {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
        public var mediaStoreStorageClass: MediaLiveClientTypes.HlsMediaStoreStorageClass?
        /// Number of retry attempts that will be made before the Live Event is put into an error state. Applies only if the CDN destination URI begins with "s3" or "mediastore". For other URIs, the value is always 3.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init(
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            mediaStoreStorageClass: MediaLiveClientTypes.HlsMediaStoreStorageClass? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.mediaStoreStorageClass = mediaStoreStorageClass
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls S3 Settings
    public struct HlsS3Settings {
        /// Specify the canned ACL to apply to each S3 request. Defaults to none.
        public var cannedAcl: MediaLiveClientTypes.S3CannedAcl?

        public init(
            cannedAcl: MediaLiveClientTypes.S3CannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }

}

extension MediaLiveClientTypes {

    /// Hls Webdav Http Transfer Mode
    public enum HlsWebdavHttpTransferMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case chunked
        case nonChunked
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsWebdavHttpTransferMode] {
            return [
                .chunked,
                .nonChunked
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .chunked: return "CHUNKED"
            case .nonChunked: return "NON_CHUNKED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Webdav Settings
    public struct HlsWebdavSettings {
        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public var connectionRetryInterval: Swift.Int?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Specify whether or not to use chunked transfer encoding to WebDAV.
        public var httpTransferMode: MediaLiveClientTypes.HlsWebdavHttpTransferMode?
        /// Number of retry attempts that will be made before the Live Event is put into an error state. Applies only if the CDN destination URI begins with "s3" or "mediastore". For other URIs, the value is always 3.
        public var numRetries: Swift.Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init(
            connectionRetryInterval: Swift.Int? = nil,
            filecacheDuration: Swift.Int? = nil,
            httpTransferMode: MediaLiveClientTypes.HlsWebdavHttpTransferMode? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.httpTransferMode = httpTransferMode
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {
    /// Hls Cdn Settings
    public struct HlsCdnSettings {
        /// Hls Akamai Settings
        public var hlsAkamaiSettings: MediaLiveClientTypes.HlsAkamaiSettings?
        /// Hls Basic Put Settings
        public var hlsBasicPutSettings: MediaLiveClientTypes.HlsBasicPutSettings?
        /// Hls Media Store Settings
        public var hlsMediaStoreSettings: MediaLiveClientTypes.HlsMediaStoreSettings?
        /// Hls S3 Settings
        public var hlsS3Settings: MediaLiveClientTypes.HlsS3Settings?
        /// Hls Webdav Settings
        public var hlsWebdavSettings: MediaLiveClientTypes.HlsWebdavSettings?

        public init(
            hlsAkamaiSettings: MediaLiveClientTypes.HlsAkamaiSettings? = nil,
            hlsBasicPutSettings: MediaLiveClientTypes.HlsBasicPutSettings? = nil,
            hlsMediaStoreSettings: MediaLiveClientTypes.HlsMediaStoreSettings? = nil,
            hlsS3Settings: MediaLiveClientTypes.HlsS3Settings? = nil,
            hlsWebdavSettings: MediaLiveClientTypes.HlsWebdavSettings? = nil
        )
        {
            self.hlsAkamaiSettings = hlsAkamaiSettings
            self.hlsBasicPutSettings = hlsBasicPutSettings
            self.hlsMediaStoreSettings = hlsMediaStoreSettings
            self.hlsS3Settings = hlsS3Settings
            self.hlsWebdavSettings = hlsWebdavSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// State of HLS ID3 Segment Tagging
    public enum HlsId3SegmentTaggingState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsId3SegmentTaggingState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// When set to "standard", an I-Frame only playlist will be written out for each video output in the output group. This I-Frame only playlist will contain byte range offsets pointing to the I-frame(s) in each segment.
    public enum IFrameOnlyPlaylistType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [IFrameOnlyPlaylistType] {
            return [
                .disabled,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Incomplete Segment Behavior
    public enum HlsIncompleteSegmentBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case suppress
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIncompleteSegmentBehavior] {
            return [
                .auto,
                .suppress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .suppress: return "SUPPRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Loss Action For Hls Out
    public enum InputLossActionForHlsOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case emitOutput
        case pauseOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForHlsOut] {
            return [
                .emitOutput,
                .pauseOutput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .emitOutput: return "EMIT_OUTPUT"
            case .pauseOutput: return "PAUSE_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Iv In Manifest
    public enum HlsIvInManifest: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIvInManifest] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Iv Source
    public enum HlsIvSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case explicit
        case followsSegmentNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIvSource] {
            return [
                .explicit,
                .followsSegmentNumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .explicit: return "EXPLICIT"
            case .followsSegmentNumber: return "FOLLOWS_SEGMENT_NUMBER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Static Key Settings
    public struct StaticKeySettings {
        /// The URL of the license server used for protecting content.
        public var keyProviderServer: MediaLiveClientTypes.InputLocation?
        /// Static key value as a 32 character hexadecimal string.
        /// This member is required.
        public var staticKeyValue: Swift.String?

        public init(
            keyProviderServer: MediaLiveClientTypes.InputLocation? = nil,
            staticKeyValue: Swift.String? = nil
        )
        {
            self.keyProviderServer = keyProviderServer
            self.staticKeyValue = staticKeyValue
        }
    }

}

extension MediaLiveClientTypes {
    /// Key Provider Settings
    public struct KeyProviderSettings {
        /// Static Key Settings
        public var staticKeySettings: MediaLiveClientTypes.StaticKeySettings?

        public init(
            staticKeySettings: MediaLiveClientTypes.StaticKeySettings? = nil
        )
        {
            self.staticKeySettings = staticKeySettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Hls Manifest Compression
    public enum HlsManifestCompression: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsManifestCompression] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Manifest Duration Format
    public enum HlsManifestDurationFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case floatingPoint
        case integer
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsManifestDurationFormat] {
            return [
                .floatingPoint,
                .integer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .floatingPoint: return "FLOATING_POINT"
            case .integer: return "INTEGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Mode
    public enum HlsMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case live
        case vod
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsMode] {
            return [
                .live,
                .vod
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .live: return "LIVE"
            case .vod: return "VOD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Output Selection
    public enum HlsOutputSelection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case manifestsAndSegments
        case segmentsOnly
        case variantManifestsAndSegments
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsOutputSelection] {
            return [
                .manifestsAndSegments,
                .segmentsOnly,
                .variantManifestsAndSegments
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .manifestsAndSegments: return "MANIFESTS_AND_SEGMENTS"
            case .segmentsOnly: return "SEGMENTS_ONLY"
            case .variantManifestsAndSegments: return "VARIANT_MANIFESTS_AND_SEGMENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Program Date Time
    public enum HlsProgramDateTime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsProgramDateTime] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Program Date Time Clock
    public enum HlsProgramDateTimeClock: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromOutputTimecode
        case systemClock
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsProgramDateTimeClock] {
            return [
                .initializeFromOutputTimecode,
                .systemClock
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromOutputTimecode: return "INITIALIZE_FROM_OUTPUT_TIMECODE"
            case .systemClock: return "SYSTEM_CLOCK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Redundant Manifest
    public enum HlsRedundantManifest: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsRedundantManifest] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Segmentation Mode
    public enum HlsSegmentationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case useInputSegmentation
        case useSegmentDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsSegmentationMode] {
            return [
                .useInputSegmentation,
                .useSegmentDuration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .useInputSegmentation: return "USE_INPUT_SEGMENTATION"
            case .useSegmentDuration: return "USE_SEGMENT_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Stream Inf Resolution
    public enum HlsStreamInfResolution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsStreamInfResolution] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Timed Metadata Id3 Frame
    public enum HlsTimedMetadataId3Frame: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case priv
        case tdrl
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsTimedMetadataId3Frame] {
            return [
                .none,
                .priv,
                .tdrl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .priv: return "PRIV"
            case .tdrl: return "TDRL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Hls Ts File Mode
    public enum HlsTsFileMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segmentedFiles
        case singleFile
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsTsFileMode] {
            return [
                .segmentedFiles,
                .singleFile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segmentedFiles: return "SEGMENTED_FILES"
            case .singleFile: return "SINGLE_FILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Hls Group Settings
    public struct HlsGroupSettings {
        /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
        public var adMarkers: [MediaLiveClientTypes.HlsAdMarkers]?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrlContent: Swift.String?
        /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
        public var baseUrlContent1: Swift.String?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrlManifest: Swift.String?
        /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
        public var baseUrlManifest1: Swift.String?
        /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
        public var captionLanguageMappings: [MediaLiveClientTypes.CaptionLanguageMapping]?
        /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
        public var captionLanguageSetting: MediaLiveClientTypes.HlsCaptionLanguageSetting?
        /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
        public var clientCache: MediaLiveClientTypes.HlsClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public var codecSpecification: MediaLiveClientTypes.HlsCodecSpecification?
        /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
        public var constantIv: Swift.String?
        /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Place segments in subdirectories.
        public var directoryStructure: MediaLiveClientTypes.HlsDirectoryStructure?
        /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
        public var discontinuityTags: MediaLiveClientTypes.HlsDiscontinuityTags?
        /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
        public var encryptionType: MediaLiveClientTypes.HlsEncryptionType?
        /// Parameters that control interactions with the CDN.
        public var hlsCdnSettings: MediaLiveClientTypes.HlsCdnSettings?
        /// State of HLS ID3 Segment Tagging
        public var hlsId3SegmentTagging: MediaLiveClientTypes.HlsId3SegmentTaggingState?
        /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
        public var iFrameOnlyPlaylists: MediaLiveClientTypes.IFrameOnlyPlaylistType?
        /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
        public var incompleteSegmentBehavior: MediaLiveClientTypes.HlsIncompleteSegmentBehavior?
        /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
        public var indexNSegments: Swift.Int?
        /// Parameter that control output group behavior on input loss.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForHlsOut?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
        public var ivInManifest: MediaLiveClientTypes.HlsIvInManifest?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
        public var ivSource: MediaLiveClientTypes.HlsIvSource?
        /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
        public var keepSegments: Swift.Int?
        /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
        public var keyFormat: Swift.String?
        /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
        public var keyFormatVersions: Swift.String?
        /// The key provider settings.
        public var keyProviderSettings: MediaLiveClientTypes.KeyProviderSettings?
        /// When set to gzip, compresses HLS playlist.
        public var manifestCompression: MediaLiveClientTypes.HlsManifestCompression?
        /// Indicates whether the output manifest should use floating point or integer values for segment duration.
        public var manifestDurationFormat: MediaLiveClientTypes.HlsManifestDurationFormat?
        /// Minimum length of MPEG-2 Transport Stream segments in seconds. When set, minimum segment length is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
        public var minSegmentLength: Swift.Int?
        /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
        public var mode: MediaLiveClientTypes.HlsMode?
        /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
        public var outputSelection: MediaLiveClientTypes.HlsOutputSelection?
        /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
        public var programDateTime: MediaLiveClientTypes.HlsProgramDateTime?
        /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
        public var programDateTimeClock: MediaLiveClientTypes.HlsProgramDateTimeClock?
        /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
        public var programDateTimePeriod: Swift.Int?
        /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
        public var redundantManifest: MediaLiveClientTypes.HlsRedundantManifest?
        /// Length of MPEG-2 Transport Stream segments to create in seconds. Note that segments will end on the next keyframe after this duration, so actual segment length may be longer.
        public var segmentLength: Swift.Int?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public var segmentationMode: MediaLiveClientTypes.HlsSegmentationMode?
        /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
        public var segmentsPerSubdirectory: Swift.Int?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public var streamInfResolution: MediaLiveClientTypes.HlsStreamInfResolution?
        /// Indicates ID3 frame that has the timecode.
        public var timedMetadataId3Frame: MediaLiveClientTypes.HlsTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public var timedMetadataId3Period: Swift.Int?
        /// Provides an extra millisecond delta offset to fine tune the timestamps.
        public var timestampDeltaMilliseconds: Swift.Int?
        /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
        public var tsFileMode: MediaLiveClientTypes.HlsTsFileMode?

        public init(
            adMarkers: [MediaLiveClientTypes.HlsAdMarkers]? = nil,
            baseUrlContent: Swift.String? = nil,
            baseUrlContent1: Swift.String? = nil,
            baseUrlManifest: Swift.String? = nil,
            baseUrlManifest1: Swift.String? = nil,
            captionLanguageMappings: [MediaLiveClientTypes.CaptionLanguageMapping]? = nil,
            captionLanguageSetting: MediaLiveClientTypes.HlsCaptionLanguageSetting? = nil,
            clientCache: MediaLiveClientTypes.HlsClientCache? = nil,
            codecSpecification: MediaLiveClientTypes.HlsCodecSpecification? = nil,
            constantIv: Swift.String? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            directoryStructure: MediaLiveClientTypes.HlsDirectoryStructure? = nil,
            discontinuityTags: MediaLiveClientTypes.HlsDiscontinuityTags? = nil,
            encryptionType: MediaLiveClientTypes.HlsEncryptionType? = nil,
            hlsCdnSettings: MediaLiveClientTypes.HlsCdnSettings? = nil,
            hlsId3SegmentTagging: MediaLiveClientTypes.HlsId3SegmentTaggingState? = nil,
            iFrameOnlyPlaylists: MediaLiveClientTypes.IFrameOnlyPlaylistType? = nil,
            incompleteSegmentBehavior: MediaLiveClientTypes.HlsIncompleteSegmentBehavior? = nil,
            indexNSegments: Swift.Int? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForHlsOut? = nil,
            ivInManifest: MediaLiveClientTypes.HlsIvInManifest? = nil,
            ivSource: MediaLiveClientTypes.HlsIvSource? = nil,
            keepSegments: Swift.Int? = nil,
            keyFormat: Swift.String? = nil,
            keyFormatVersions: Swift.String? = nil,
            keyProviderSettings: MediaLiveClientTypes.KeyProviderSettings? = nil,
            manifestCompression: MediaLiveClientTypes.HlsManifestCompression? = nil,
            manifestDurationFormat: MediaLiveClientTypes.HlsManifestDurationFormat? = nil,
            minSegmentLength: Swift.Int? = nil,
            mode: MediaLiveClientTypes.HlsMode? = nil,
            outputSelection: MediaLiveClientTypes.HlsOutputSelection? = nil,
            programDateTime: MediaLiveClientTypes.HlsProgramDateTime? = nil,
            programDateTimeClock: MediaLiveClientTypes.HlsProgramDateTimeClock? = nil,
            programDateTimePeriod: Swift.Int? = nil,
            redundantManifest: MediaLiveClientTypes.HlsRedundantManifest? = nil,
            segmentLength: Swift.Int? = nil,
            segmentationMode: MediaLiveClientTypes.HlsSegmentationMode? = nil,
            segmentsPerSubdirectory: Swift.Int? = nil,
            streamInfResolution: MediaLiveClientTypes.HlsStreamInfResolution? = nil,
            timedMetadataId3Frame: MediaLiveClientTypes.HlsTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil,
            timestampDeltaMilliseconds: Swift.Int? = nil,
            tsFileMode: MediaLiveClientTypes.HlsTsFileMode? = nil
        )
        {
            self.adMarkers = adMarkers
            self.baseUrlContent = baseUrlContent
            self.baseUrlContent1 = baseUrlContent1
            self.baseUrlManifest = baseUrlManifest
            self.baseUrlManifest1 = baseUrlManifest1
            self.captionLanguageMappings = captionLanguageMappings
            self.captionLanguageSetting = captionLanguageSetting
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.constantIv = constantIv
            self.destination = destination
            self.directoryStructure = directoryStructure
            self.discontinuityTags = discontinuityTags
            self.encryptionType = encryptionType
            self.hlsCdnSettings = hlsCdnSettings
            self.hlsId3SegmentTagging = hlsId3SegmentTagging
            self.iFrameOnlyPlaylists = iFrameOnlyPlaylists
            self.incompleteSegmentBehavior = incompleteSegmentBehavior
            self.indexNSegments = indexNSegments
            self.inputLossAction = inputLossAction
            self.ivInManifest = ivInManifest
            self.ivSource = ivSource
            self.keepSegments = keepSegments
            self.keyFormat = keyFormat
            self.keyFormatVersions = keyFormatVersions
            self.keyProviderSettings = keyProviderSettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minSegmentLength = minSegmentLength
            self.mode = mode
            self.outputSelection = outputSelection
            self.programDateTime = programDateTime
            self.programDateTimeClock = programDateTimeClock
            self.programDateTimePeriod = programDateTimePeriod
            self.redundantManifest = redundantManifest
            self.segmentLength = segmentLength
            self.segmentationMode = segmentationMode
            self.segmentsPerSubdirectory = segmentsPerSubdirectory
            self.streamInfResolution = streamInfResolution
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
            self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
            self.tsFileMode = tsFileMode
        }
    }

}

extension MediaLiveClientTypes {
    /// Media Package Group Settings
    public struct MediaPackageGroupSettings {
        /// MediaPackage channel destination.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?

        public init(
            destination: MediaLiveClientTypes.OutputLocationRef? = nil
        )
        {
            self.destination = destination
        }
    }

}

extension MediaLiveClientTypes {

    /// Smooth Group Audio Only Timecode Control
    public enum SmoothGroupAudioOnlyTimecodeControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case passthrough
        case useConfiguredClock
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupAudioOnlyTimecodeControl] {
            return [
                .passthrough,
                .useConfiguredClock
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .useConfiguredClock: return "USE_CONFIGURED_CLOCK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Certificate Mode
    public enum SmoothGroupCertificateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case selfSigned
        case verifyAuthenticity
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupCertificateMode] {
            return [
                .selfSigned,
                .verifyAuthenticity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .selfSigned: return "SELF_SIGNED"
            case .verifyAuthenticity: return "VERIFY_AUTHENTICITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Event Id Mode
    public enum SmoothGroupEventIdMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noEventId
        case useConfigured
        case useTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupEventIdMode] {
            return [
                .noEventId,
                .useConfigured,
                .useTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noEventId: return "NO_EVENT_ID"
            case .useConfigured: return "USE_CONFIGURED"
            case .useTimestamp: return "USE_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Event Stop Behavior
    public enum SmoothGroupEventStopBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case sendEos
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupEventStopBehavior] {
            return [
                .none,
                .sendEos
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .sendEos: return "SEND_EOS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Loss Action For Ms Smooth Out
    public enum InputLossActionForMsSmoothOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case emitOutput
        case pauseOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForMsSmoothOut] {
            return [
                .emitOutput,
                .pauseOutput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .emitOutput: return "EMIT_OUTPUT"
            case .pauseOutput: return "PAUSE_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Segmentation Mode
    public enum SmoothGroupSegmentationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case useInputSegmentation
        case useSegmentDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupSegmentationMode] {
            return [
                .useInputSegmentation,
                .useSegmentDuration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .useInputSegmentation: return "USE_INPUT_SEGMENTATION"
            case .useSegmentDuration: return "USE_SEGMENT_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Sparse Track Type
    public enum SmoothGroupSparseTrackType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case scte35
        case scte35WithoutSegmentation
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupSparseTrackType] {
            return [
                .none,
                .scte35,
                .scte35WithoutSegmentation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .scte35: return "SCTE_35"
            case .scte35WithoutSegmentation: return "SCTE_35_WITHOUT_SEGMENTATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Stream Manifest Behavior
    public enum SmoothGroupStreamManifestBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case doNotSend
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupStreamManifestBehavior] {
            return [
                .doNotSend,
                .send
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .doNotSend: return "DO_NOT_SEND"
            case .send: return "SEND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Smooth Group Timestamp Offset Mode
    public enum SmoothGroupTimestampOffsetMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case useConfiguredOffset
        case useEventStartDate
        case sdkUnknown(Swift.String)

        public static var allCases: [SmoothGroupTimestampOffsetMode] {
            return [
                .useConfiguredOffset,
                .useEventStartDate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .useConfiguredOffset: return "USE_CONFIGURED_OFFSET"
            case .useEventStartDate: return "USE_EVENT_START_DATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Ms Smooth Group Settings
    public struct MsSmoothGroupSettings {
        /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
        public var acquisitionPointId: Swift.String?
        /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
        public var audioOnlyTimecodeControl: MediaLiveClientTypes.SmoothGroupAudioOnlyTimecodeControl?
        /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
        public var certificateMode: MediaLiveClientTypes.SmoothGroupCertificateMode?
        /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
        public var connectionRetryInterval: Swift.Int?
        /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
        public var eventId: Swift.String?
        /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options:
        ///
        /// * "useConfigured" - use the value provided in eventId
        ///
        /// * "useTimestamp" - generate and send an event ID based on the current timestamp
        ///
        /// * "noEventId" - do not send an event ID to the IIS server.
        public var eventIdMode: MediaLiveClientTypes.SmoothGroupEventIdMode?
        /// When set to sendEos, send EOS signal to IIS server when stopping the event
        public var eventStopBehavior: MediaLiveClientTypes.SmoothGroupEventStopBehavior?
        /// Size in seconds of file cache for streaming outputs.
        public var filecacheDuration: Swift.Int?
        /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
        public var fragmentLength: Swift.Int?
        /// Parameter that control output group behavior on input loss.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForMsSmoothOut?
        /// Number of retry attempts.
        public var numRetries: Swift.Int?
        /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
        public var restartDelay: Swift.Int?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public var segmentationMode: MediaLiveClientTypes.SmoothGroupSegmentationMode?
        /// Number of milliseconds to delay the output from the second pipeline.
        public var sendDelayMs: Swift.Int?
        /// Identifies the type of data to place in the sparse track:
        ///
        /// * SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment.
        ///
        /// * SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment.
        ///
        /// * NONE: Don't generate a sparse track for any outputs in this output group.
        public var sparseTrackType: MediaLiveClientTypes.SmoothGroupSparseTrackType?
        /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
        public var streamManifestBehavior: MediaLiveClientTypes.SmoothGroupStreamManifestBehavior?
        /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
        public var timestampOffset: Swift.String?
        /// Type of timestamp date offset to use.
        ///
        /// * useEventStartDate: Use the date the event was started as the offset
        ///
        /// * useConfiguredOffset: Use an explicitly configured date as the offset
        public var timestampOffsetMode: MediaLiveClientTypes.SmoothGroupTimestampOffsetMode?

        public init(
            acquisitionPointId: Swift.String? = nil,
            audioOnlyTimecodeControl: MediaLiveClientTypes.SmoothGroupAudioOnlyTimecodeControl? = nil,
            certificateMode: MediaLiveClientTypes.SmoothGroupCertificateMode? = nil,
            connectionRetryInterval: Swift.Int? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            eventId: Swift.String? = nil,
            eventIdMode: MediaLiveClientTypes.SmoothGroupEventIdMode? = nil,
            eventStopBehavior: MediaLiveClientTypes.SmoothGroupEventStopBehavior? = nil,
            filecacheDuration: Swift.Int? = nil,
            fragmentLength: Swift.Int? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForMsSmoothOut? = nil,
            numRetries: Swift.Int? = nil,
            restartDelay: Swift.Int? = nil,
            segmentationMode: MediaLiveClientTypes.SmoothGroupSegmentationMode? = nil,
            sendDelayMs: Swift.Int? = nil,
            sparseTrackType: MediaLiveClientTypes.SmoothGroupSparseTrackType? = nil,
            streamManifestBehavior: MediaLiveClientTypes.SmoothGroupStreamManifestBehavior? = nil,
            timestampOffset: Swift.String? = nil,
            timestampOffsetMode: MediaLiveClientTypes.SmoothGroupTimestampOffsetMode? = nil
        )
        {
            self.acquisitionPointId = acquisitionPointId
            self.audioOnlyTimecodeControl = audioOnlyTimecodeControl
            self.certificateMode = certificateMode
            self.connectionRetryInterval = connectionRetryInterval
            self.destination = destination
            self.eventId = eventId
            self.eventIdMode = eventIdMode
            self.eventStopBehavior = eventStopBehavior
            self.filecacheDuration = filecacheDuration
            self.fragmentLength = fragmentLength
            self.inputLossAction = inputLossAction
            self.numRetries = numRetries
            self.restartDelay = restartDelay
            self.segmentationMode = segmentationMode
            self.sendDelayMs = sendDelayMs
            self.sparseTrackType = sparseTrackType
            self.streamManifestBehavior = streamManifestBehavior
            self.timestampOffset = timestampOffset
            self.timestampOffsetMode = timestampOffsetMode
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex Group Settings
    public struct MultiplexGroupSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {

    /// Rtmp Ad Markers
    public enum RtmpAdMarkers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onCuePointScte35
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpAdMarkers] {
            return [
                .onCuePointScte35
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onCuePointScte35: return "ON_CUE_POINT_SCTE35"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Authentication Scheme
    public enum AuthenticationScheme: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case akamai
        case common
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticationScheme] {
            return [
                .akamai,
                .common
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .akamai: return "AKAMAI"
            case .common: return "COMMON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Rtmp Cache Full Behavior
    public enum RtmpCacheFullBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disconnectImmediately
        case waitForServer
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpCacheFullBehavior] {
            return [
                .disconnectImmediately,
                .waitForServer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disconnectImmediately: return "DISCONNECT_IMMEDIATELY"
            case .waitForServer: return "WAIT_FOR_SERVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Rtmp Caption Data
    public enum RtmpCaptionData: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case field1608
        case field1AndField2608
        case sdkUnknown(Swift.String)

        public static var allCases: [RtmpCaptionData] {
            return [
                .all,
                .field1608,
                .field1AndField2608
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .field1608: return "FIELD1_608"
            case .field1AndField2608: return "FIELD1_AND_FIELD2_608"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Include Filler Nal Units
    public enum IncludeFillerNalUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case drop
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [IncludeFillerNalUnits] {
            return [
                .auto,
                .drop,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .drop: return "DROP"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Loss Action For Rtmp Out
    public enum InputLossActionForRtmpOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case emitOutput
        case pauseOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForRtmpOut] {
            return [
                .emitOutput,
                .pauseOutput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .emitOutput: return "EMIT_OUTPUT"
            case .pauseOutput: return "PAUSE_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Rtmp Group Settings
    public struct RtmpGroupSettings {
        /// Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
        public var adMarkers: [MediaLiveClientTypes.RtmpAdMarkers]?
        /// Authentication scheme to use when connecting with CDN
        public var authenticationScheme: MediaLiveClientTypes.AuthenticationScheme?
        /// Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
        public var cacheFullBehavior: MediaLiveClientTypes.RtmpCacheFullBehavior?
        /// Cache length, in seconds, is used to calculate buffer size.
        public var cacheLength: Swift.Int?
        /// Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
        public var captionData: MediaLiveClientTypes.RtmpCaptionData?
        /// Applies only when the rate control mode (in the codec settings) is CBR (constant bit rate). Controls whether the RTMP output stream is padded (with FILL NAL units) in order to achieve a constant bit rate that is truly constant. When there is no padding, the bandwidth varies (up to the bitrate value in the codec settings). We recommend that you choose Auto.
        public var includeFillerNalUnits: MediaLiveClientTypes.IncludeFillerNalUnits?
        /// Controls the behavior of this RTMP group if input becomes unavailable.
        ///
        /// * emitOutput: Emit a slate until input returns.
        ///
        /// * pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForRtmpOut?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public var restartDelay: Swift.Int?

        public init(
            adMarkers: [MediaLiveClientTypes.RtmpAdMarkers]? = nil,
            authenticationScheme: MediaLiveClientTypes.AuthenticationScheme? = nil,
            cacheFullBehavior: MediaLiveClientTypes.RtmpCacheFullBehavior? = nil,
            cacheLength: Swift.Int? = nil,
            captionData: MediaLiveClientTypes.RtmpCaptionData? = nil,
            includeFillerNalUnits: MediaLiveClientTypes.IncludeFillerNalUnits? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForRtmpOut? = nil,
            restartDelay: Swift.Int? = nil
        )
        {
            self.adMarkers = adMarkers
            self.authenticationScheme = authenticationScheme
            self.cacheFullBehavior = cacheFullBehavior
            self.cacheLength = cacheLength
            self.captionData = captionData
            self.includeFillerNalUnits = includeFillerNalUnits
            self.inputLossAction = inputLossAction
            self.restartDelay = restartDelay
        }
    }

}

extension MediaLiveClientTypes {

    /// Input Loss Action For Udp Out
    public enum InputLossActionForUdpOut: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dropProgram
        case dropTs
        case emitProgram
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossActionForUdpOut] {
            return [
                .dropProgram,
                .dropTs,
                .emitProgram
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dropProgram: return "DROP_PROGRAM"
            case .dropTs: return "DROP_TS"
            case .emitProgram: return "EMIT_PROGRAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Srt Group Settings
    public struct SrtGroupSettings {
        /// Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForUdpOut?

        public init(
            inputLossAction: MediaLiveClientTypes.InputLossActionForUdpOut? = nil
        )
        {
            self.inputLossAction = inputLossAction
        }
    }

}

extension MediaLiveClientTypes {

    /// Udp Timed Metadata Id3 Frame
    public enum UdpTimedMetadataId3Frame: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case priv
        case tdrl
        case sdkUnknown(Swift.String)

        public static var allCases: [UdpTimedMetadataId3Frame] {
            return [
                .none,
                .priv,
                .tdrl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .priv: return "PRIV"
            case .tdrl: return "TDRL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Udp Group Settings
    public struct UdpGroupSettings {
        /// Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForUdpOut?
        /// Indicates ID3 frame that has the timecode.
        public var timedMetadataId3Frame: MediaLiveClientTypes.UdpTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public var timedMetadataId3Period: Swift.Int?

        public init(
            inputLossAction: MediaLiveClientTypes.InputLossActionForUdpOut? = nil,
            timedMetadataId3Frame: MediaLiveClientTypes.UdpTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil
        )
        {
            self.inputLossAction = inputLossAction
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
        }
    }

}

extension MediaLiveClientTypes {
    /// Output Group Settings
    public struct OutputGroupSettings {
        /// Archive Group Settings
        public var archiveGroupSettings: MediaLiveClientTypes.ArchiveGroupSettings?
        /// Cmaf Ingest Group Settings
        public var cmafIngestGroupSettings: MediaLiveClientTypes.CmafIngestGroupSettings?
        /// Frame Capture Group Settings
        public var frameCaptureGroupSettings: MediaLiveClientTypes.FrameCaptureGroupSettings?
        /// Hls Group Settings
        public var hlsGroupSettings: MediaLiveClientTypes.HlsGroupSettings?
        /// Media Package Group Settings
        public var mediaPackageGroupSettings: MediaLiveClientTypes.MediaPackageGroupSettings?
        /// Ms Smooth Group Settings
        public var msSmoothGroupSettings: MediaLiveClientTypes.MsSmoothGroupSettings?
        /// Multiplex Group Settings
        public var multiplexGroupSettings: MediaLiveClientTypes.MultiplexGroupSettings?
        /// Rtmp Group Settings
        public var rtmpGroupSettings: MediaLiveClientTypes.RtmpGroupSettings?
        /// Srt Group Settings
        public var srtGroupSettings: MediaLiveClientTypes.SrtGroupSettings?
        /// Udp Group Settings
        public var udpGroupSettings: MediaLiveClientTypes.UdpGroupSettings?

        public init(
            archiveGroupSettings: MediaLiveClientTypes.ArchiveGroupSettings? = nil,
            cmafIngestGroupSettings: MediaLiveClientTypes.CmafIngestGroupSettings? = nil,
            frameCaptureGroupSettings: MediaLiveClientTypes.FrameCaptureGroupSettings? = nil,
            hlsGroupSettings: MediaLiveClientTypes.HlsGroupSettings? = nil,
            mediaPackageGroupSettings: MediaLiveClientTypes.MediaPackageGroupSettings? = nil,
            msSmoothGroupSettings: MediaLiveClientTypes.MsSmoothGroupSettings? = nil,
            multiplexGroupSettings: MediaLiveClientTypes.MultiplexGroupSettings? = nil,
            rtmpGroupSettings: MediaLiveClientTypes.RtmpGroupSettings? = nil,
            srtGroupSettings: MediaLiveClientTypes.SrtGroupSettings? = nil,
            udpGroupSettings: MediaLiveClientTypes.UdpGroupSettings? = nil
        )
        {
            self.archiveGroupSettings = archiveGroupSettings
            self.cmafIngestGroupSettings = cmafIngestGroupSettings
            self.frameCaptureGroupSettings = frameCaptureGroupSettings
            self.hlsGroupSettings = hlsGroupSettings
            self.mediaPackageGroupSettings = mediaPackageGroupSettings
            self.msSmoothGroupSettings = msSmoothGroupSettings
            self.multiplexGroupSettings = multiplexGroupSettings
            self.rtmpGroupSettings = rtmpGroupSettings
            self.srtGroupSettings = srtGroupSettings
            self.udpGroupSettings = udpGroupSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
    public struct OutputGroup {
        /// Custom output group name optionally defined by the user.
        public var name: Swift.String?
        /// Settings associated with the output group.
        /// This member is required.
        public var outputGroupSettings: MediaLiveClientTypes.OutputGroupSettings?
        /// Placeholder documentation for __listOfOutput
        /// This member is required.
        public var outputs: [MediaLiveClientTypes.Output]?

        public init(
            name: Swift.String? = nil,
            outputGroupSettings: MediaLiveClientTypes.OutputGroupSettings? = nil,
            outputs: [MediaLiveClientTypes.Output]? = nil
        )
        {
            self.name = name
            self.outputGroupSettings = outputGroupSettings
            self.outputs = outputs
        }
    }

}

extension MediaLiveClientTypes {
    /// Runtime details of a pipeline when a channel is running.
    public struct PipelineDetail {
        /// The name of the active input attachment currently being ingested by this pipeline.
        public var activeInputAttachmentName: Swift.String?
        /// The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
        public var activeInputSwitchActionName: Swift.String?
        /// The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
        public var activeMotionGraphicsActionName: Swift.String?
        /// The current URI being used for HTML5 motion graphics for this pipeline.
        public var activeMotionGraphicsUri: Swift.String?
        /// Pipeline ID
        public var pipelineId: Swift.String?

        public init(
            activeInputAttachmentName: Swift.String? = nil,
            activeInputSwitchActionName: Swift.String? = nil,
            activeMotionGraphicsActionName: Swift.String? = nil,
            activeMotionGraphicsUri: Swift.String? = nil,
            pipelineId: Swift.String? = nil
        )
        {
            self.activeInputAttachmentName = activeInputAttachmentName
            self.activeInputSwitchActionName = activeInputSwitchActionName
            self.activeMotionGraphicsActionName = activeMotionGraphicsActionName
            self.activeMotionGraphicsUri = activeMotionGraphicsUri
            self.pipelineId = pipelineId
        }
    }

}

extension MediaLiveClientTypes {

    /// Pipeline ID
    public enum PipelineId: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pipeline0
        case pipeline1
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineId] {
            return [
                .pipeline0,
                .pipeline1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pipeline0: return "PIPELINE_0"
            case .pipeline1: return "PIPELINE_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings for pausing a pipeline.
    public struct PipelinePauseStateSettings {
        /// Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
        /// This member is required.
        public var pipelineId: MediaLiveClientTypes.PipelineId?

        public init(
            pipelineId: MediaLiveClientTypes.PipelineId? = nil
        )
        {
            self.pipelineId = pipelineId
        }
    }

}

extension MediaLiveClientTypes {

    /// Automatic Renewal Status for Reservation
    public enum ReservationAutomaticRenewal: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationAutomaticRenewal] {
            return [
                .disabled,
                .enabled,
                .unavailable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// The Renewal settings for Reservations
    public struct RenewalSettings {
        /// Automatic renewal status for the reservation
        public var automaticRenewal: MediaLiveClientTypes.ReservationAutomaticRenewal?
        /// Count for the reservation renewal
        public var renewalCount: Swift.Int?

        public init(
            automaticRenewal: MediaLiveClientTypes.ReservationAutomaticRenewal? = nil,
            renewalCount: Swift.Int? = nil
        )
        {
            self.automaticRenewal = automaticRenewal
            self.renewalCount = renewalCount
        }
    }

}

extension MediaLiveClientTypes {

    /// Current reservation state
    public enum ReservationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case canceled
        case deleted
        case expired
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationState] {
            return [
                .active,
                .canceled,
                .deleted,
                .expired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .canceled: return "CANCELED"
            case .deleted: return "DELETED"
            case .expired: return "EXPIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Reserved resources available to use
    public struct Reservation {
        /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
        public var arn: Swift.String?
        /// Number of reserved resources
        public var count: Swift.Int?
        /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        public var currencyCode: Swift.String?
        /// Lease duration, e.g. '12'
        public var duration: Swift.Int?
        /// Units for duration, e.g. 'MONTHS'
        public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
        /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
        public var end: Swift.String?
        /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        public var fixedPrice: Swift.Double?
        /// User specified reservation name
        public var name: Swift.String?
        /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        public var offeringDescription: Swift.String?
        /// Unique offering ID, e.g. '87654321'
        public var offeringId: Swift.String?
        /// Offering type, e.g. 'NO_UPFRONT'
        public var offeringType: MediaLiveClientTypes.OfferingType?
        /// AWS region, e.g. 'us-west-2'
        public var region: Swift.String?
        /// Renewal settings for the reservation
        public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
        /// Unique reservation ID, e.g. '1234567'
        public var reservationId: Swift.String?
        /// Resource configuration details
        public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
        /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
        public var start: Swift.String?
        /// Current state of reservation, e.g. 'ACTIVE'
        public var state: MediaLiveClientTypes.ReservationState?
        /// A collection of key-value pairs
        public var tags: [Swift.String: Swift.String]?
        /// Recurring usage charge for each reserved resource, e.g. '157.0'
        public var usagePrice: Swift.Double?

        public init(
            arn: Swift.String? = nil,
            count: Swift.Int? = nil,
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
            end: Swift.String? = nil,
            fixedPrice: Swift.Double? = nil,
            name: Swift.String? = nil,
            offeringDescription: Swift.String? = nil,
            offeringId: Swift.String? = nil,
            offeringType: MediaLiveClientTypes.OfferingType? = nil,
            region: Swift.String? = nil,
            renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
            reservationId: Swift.String? = nil,
            resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
            start: Swift.String? = nil,
            state: MediaLiveClientTypes.ReservationState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.arn = arn
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.end = end
            self.fixedPrice = fixedPrice
            self.name = name
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.renewalSettings = renewalSettings
            self.reservationId = reservationId
            self.resourceSpecification = resourceSpecification
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in CreateNetworkRequest.
    public struct RouteCreateRequest {
        /// A CIDR block for one Route.
        public var cidr: Swift.String?
        /// The IP address of the Gateway for this route, if applicable.
        public var gateway: Swift.String?

        public init(
            cidr: Swift.String? = nil,
            gateway: Swift.String? = nil
        )
        {
            self.cidr = cidr
            self.gateway = gateway
        }
    }

}

extension MediaLiveClientTypes {
    /// Used in UpdateNetworkRequest.
    public struct RouteUpdateRequest {
        /// A CIDR block for one Route.
        public var cidr: Swift.String?
        /// The IP address of the Gateway for this route, if applicable.
        public var gateway: Swift.String?

        public init(
            cidr: Swift.String? = nil,
            gateway: Swift.String? = nil
        )
        {
            self.cidr = cidr
            self.gateway = gateway
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to insert a user-defined ID3 tag in each HLS segment
    public struct HlsId3SegmentTaggingScheduleActionSettings {
        /// Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
        public var id3: Swift.String?
        /// ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
        public var tag: Swift.String?

        public init(
            id3: Swift.String? = nil,
            tag: Swift.String? = nil
        )
        {
            self.id3 = id3
            self.tag = tag
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to emit HLS metadata
    public struct HlsTimedMetadataScheduleActionSettings {
        /// Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
        /// This member is required.
        public var id3: Swift.String?

        public init(
            id3: Swift.String? = nil
        )
        {
            self.id3 = id3
        }
    }

}

extension MediaLiveClientTypes {

    /// Documentation update needed
    public enum InputTimecodeSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case embedded
        case zerobased
        case sdkUnknown(Swift.String)

        public static var allCases: [InputTimecodeSource] {
            return [
                .embedded,
                .zerobased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .embedded: return "EMBEDDED"
            case .zerobased: return "ZEROBASED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings to identify the start of the clip.
    public struct StartTimecode {
        /// The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
        public var timecode: Swift.String?

        public init(
            timecode: Swift.String? = nil
        )
        {
            self.timecode = timecode
        }
    }

}

extension MediaLiveClientTypes {

    /// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
    public enum LastFrameClippingBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case excludeLastFrame
        case includeLastFrame
        case sdkUnknown(Swift.String)

        public static var allCases: [LastFrameClippingBehavior] {
            return [
                .excludeLastFrame,
                .includeLastFrame
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .excludeLastFrame: return "EXCLUDE_LAST_FRAME"
            case .includeLastFrame: return "INCLUDE_LAST_FRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings to identify the end of the clip.
    public struct StopTimecode {
        /// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
        public var lastFrameClippingBehavior: MediaLiveClientTypes.LastFrameClippingBehavior?
        /// The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
        public var timecode: Swift.String?

        public init(
            lastFrameClippingBehavior: MediaLiveClientTypes.LastFrameClippingBehavior? = nil,
            timecode: Swift.String? = nil
        )
        {
            self.lastFrameClippingBehavior = lastFrameClippingBehavior
            self.timecode = timecode
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
    public struct InputClippingSettings {
        /// The source of the timecodes in the source being clipped.
        /// This member is required.
        public var inputTimecodeSource: MediaLiveClientTypes.InputTimecodeSource?
        /// Settings to identify the start of the clip.
        public var startTimecode: MediaLiveClientTypes.StartTimecode?
        /// Settings to identify the end of the clip.
        public var stopTimecode: MediaLiveClientTypes.StopTimecode?

        public init(
            inputTimecodeSource: MediaLiveClientTypes.InputTimecodeSource? = nil,
            startTimecode: MediaLiveClientTypes.StartTimecode? = nil,
            stopTimecode: MediaLiveClientTypes.StopTimecode? = nil
        )
        {
            self.inputTimecodeSource = inputTimecodeSource
            self.startTimecode = startTimecode
            self.stopTimecode = stopTimecode
        }
    }

}

extension MediaLiveClientTypes {
    /// Action to prepare an input for a future immediate input switch.
    public struct InputPrepareScheduleActionSettings {
        /// The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
        public var inputAttachmentNameReference: Swift.String?
        /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
        public var inputClippingSettings: MediaLiveClientTypes.InputClippingSettings?
        /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
        public var urlPath: [Swift.String]?

        public init(
            inputAttachmentNameReference: Swift.String? = nil,
            inputClippingSettings: MediaLiveClientTypes.InputClippingSettings? = nil,
            urlPath: [Swift.String]? = nil
        )
        {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.inputClippingSettings = inputClippingSettings
            self.urlPath = urlPath
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the "switch input" action: to switch from ingesting one input to ingesting another input.
    public struct InputSwitchScheduleActionSettings {
        /// The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
        /// This member is required.
        public var inputAttachmentNameReference: Swift.String?
        /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
        public var inputClippingSettings: MediaLiveClientTypes.InputClippingSettings?
        /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
        public var urlPath: [Swift.String]?

        public init(
            inputAttachmentNameReference: Swift.String? = nil,
            inputClippingSettings: MediaLiveClientTypes.InputClippingSettings? = nil,
            urlPath: [Swift.String]? = nil
        )
        {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.inputClippingSettings = inputClippingSettings
            self.urlPath = urlPath
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings to specify the rendering of motion graphics into the video stream.
    public struct MotionGraphicsActivateScheduleActionSettings {
        /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
        public var duration: Swift.Int?
        /// Key used to extract the password from EC2 Parameter store
        public var passwordParam: Swift.String?
        /// URI of the HTML5 content to be rendered into the live stream.
        public var url: Swift.String?
        /// Documentation update needed
        public var username: Swift.String?

        public init(
            duration: Swift.Int? = nil,
            passwordParam: Swift.String? = nil,
            url: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.duration = duration
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings to specify the ending of rendering motion graphics into the video stream.
    public struct MotionGraphicsDeactivateScheduleActionSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to set pause state of a channel.
    public struct PauseStateScheduleActionSettings {
        /// Placeholder documentation for __listOfPipelinePauseStateSettings
        public var pipelines: [MediaLiveClientTypes.PipelinePauseStateSettings]?

        public init(
            pipelines: [MediaLiveClientTypes.PipelinePauseStateSettings]? = nil
        )
        {
            self.pipelines = pipelines
        }
    }

}

extension MediaLiveClientTypes {

    /// Whether the SCTE-35 input should be the active input or a fixed input.
    public enum Scte35InputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fixed
        case followActive
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35InputMode] {
            return [
                .fixed,
                .followActive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .followActive: return "FOLLOW_ACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Scte35Input Schedule Action Settings
    public struct Scte35InputScheduleActionSettings {
        /// In fixed mode, enter the name of the input attachment that you want to use as a SCTE-35 input. (Don't enter the ID of the input.)"
        public var inputAttachmentNameReference: Swift.String?
        /// Whether the SCTE-35 input should be the active input or a fixed input.
        /// This member is required.
        public var mode: MediaLiveClientTypes.Scte35InputMode?

        public init(
            inputAttachmentNameReference: Swift.String? = nil,
            mode: MediaLiveClientTypes.Scte35InputMode? = nil
        )
        {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.mode = mode
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for a SCTE-35 return_to_network message.
    public struct Scte35ReturnToNetworkScheduleActionSettings {
        /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
        /// This member is required.
        public var spliceEventId: Swift.Int?

        public init(
            spliceEventId: Swift.Int? = nil
        )
        {
            self.spliceEventId = spliceEventId
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for a SCTE-35 splice_insert message.
    public struct Scte35SpliceInsertScheduleActionSettings {
        /// Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
        public var duration: Swift.Int?
        /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
        /// This member is required.
        public var spliceEventId: Swift.Int?

        public init(
            duration: Swift.Int? = nil,
            spliceEventId: Swift.Int? = nil
        )
        {
            self.duration = duration
            self.spliceEventId = spliceEventId
        }
    }

}

extension MediaLiveClientTypes {

    /// Corresponds to the archive_allowed parameter. A value of ARCHIVE_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35ArchiveAllowedFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archiveAllowed
        case archiveNotAllowed
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35ArchiveAllowedFlag] {
            return [
                .archiveAllowed,
                .archiveNotAllowed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archiveAllowed: return "ARCHIVE_ALLOWED"
            case .archiveNotAllowed: return "ARCHIVE_NOT_ALLOWED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Corresponds to the device_restrictions parameter in a segmentation_descriptor. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35DeviceRestrictions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case restrictGroup0
        case restrictGroup1
        case restrictGroup2
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35DeviceRestrictions] {
            return [
                .none,
                .restrictGroup0,
                .restrictGroup1,
                .restrictGroup2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .restrictGroup0: return "RESTRICT_GROUP0"
            case .restrictGroup1: return "RESTRICT_GROUP1"
            case .restrictGroup2: return "RESTRICT_GROUP2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Corresponds to the no_regional_blackout_flag parameter. A value of REGIONAL_BLACKOUT corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35NoRegionalBlackoutFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noRegionalBlackout
        case regionalBlackout
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35NoRegionalBlackoutFlag] {
            return [
                .noRegionalBlackout,
                .regionalBlackout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noRegionalBlackout: return "NO_REGIONAL_BLACKOUT"
            case .regionalBlackout: return "REGIONAL_BLACKOUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Corresponds to the web_delivery_allowed_flag parameter. A value of WEB_DELIVERY_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
    public enum Scte35WebDeliveryAllowedFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case webDeliveryAllowed
        case webDeliveryNotAllowed
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35WebDeliveryAllowedFlag] {
            return [
                .webDeliveryAllowed,
                .webDeliveryNotAllowed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .webDeliveryAllowed: return "WEB_DELIVERY_ALLOWED"
            case .webDeliveryNotAllowed: return "WEB_DELIVERY_NOT_ALLOWED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
    public struct Scte35DeliveryRestrictions {
        /// Corresponds to SCTE-35 archive_allowed_flag.
        /// This member is required.
        public var archiveAllowedFlag: MediaLiveClientTypes.Scte35ArchiveAllowedFlag?
        /// Corresponds to SCTE-35 device_restrictions parameter.
        /// This member is required.
        public var deviceRestrictions: MediaLiveClientTypes.Scte35DeviceRestrictions?
        /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
        /// This member is required.
        public var noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35NoRegionalBlackoutFlag?
        /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
        /// This member is required.
        public var webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35WebDeliveryAllowedFlag?

        public init(
            archiveAllowedFlag: MediaLiveClientTypes.Scte35ArchiveAllowedFlag? = nil,
            deviceRestrictions: MediaLiveClientTypes.Scte35DeviceRestrictions? = nil,
            noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35NoRegionalBlackoutFlag? = nil,
            webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35WebDeliveryAllowedFlag? = nil
        )
        {
            self.archiveAllowedFlag = archiveAllowedFlag
            self.deviceRestrictions = deviceRestrictions
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }
    }

}

extension MediaLiveClientTypes {

    /// Corresponds to SCTE-35 segmentation_event_cancel_indicator. SEGMENTATION_EVENT_NOT_CANCELED corresponds to 0 in the SCTE-35 specification and indicates that this is an insertion request. SEGMENTATION_EVENT_CANCELED corresponds to 1 in the SCTE-35 specification and indicates that this is a cancelation request, in which case complete this field and the existing event ID to cancel.
    public enum Scte35SegmentationCancelIndicator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segmentationEventCanceled
        case segmentationEventNotCanceled
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SegmentationCancelIndicator] {
            return [
                .segmentationEventCanceled,
                .segmentationEventNotCanceled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segmentationEventCanceled: return "SEGMENTATION_EVENT_CANCELED"
            case .segmentationEventNotCanceled: return "SEGMENTATION_EVENT_NOT_CANCELED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Corresponds to SCTE-35 segmentation_descriptor.
    public struct Scte35SegmentationDescriptor {
        /// Holds the four SCTE-35 delivery restriction parameters.
        public var deliveryRestrictions: MediaLiveClientTypes.Scte35DeliveryRestrictions?
        /// Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
        public var segmentNum: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_event_cancel_indicator.
        /// This member is required.
        public var segmentationCancelIndicator: MediaLiveClientTypes.Scte35SegmentationCancelIndicator?
        /// Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
        public var segmentationDuration: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_event_id.
        /// This member is required.
        public var segmentationEventId: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
        public var segmentationTypeId: Swift.Int?
        /// Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
        public var segmentationUpid: Swift.String?
        /// Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
        public var segmentationUpidType: Swift.Int?
        /// Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
        public var segmentsExpected: Swift.Int?
        /// Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
        public var subSegmentNum: Swift.Int?
        /// Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
        public var subSegmentsExpected: Swift.Int?

        public init(
            deliveryRestrictions: MediaLiveClientTypes.Scte35DeliveryRestrictions? = nil,
            segmentNum: Swift.Int? = nil,
            segmentationCancelIndicator: MediaLiveClientTypes.Scte35SegmentationCancelIndicator? = nil,
            segmentationDuration: Swift.Int? = nil,
            segmentationEventId: Swift.Int? = nil,
            segmentationTypeId: Swift.Int? = nil,
            segmentationUpid: Swift.String? = nil,
            segmentationUpidType: Swift.Int? = nil,
            segmentsExpected: Swift.Int? = nil,
            subSegmentNum: Swift.Int? = nil,
            subSegmentsExpected: Swift.Int? = nil
        )
        {
            self.deliveryRestrictions = deliveryRestrictions
            self.segmentNum = segmentNum
            self.segmentationCancelIndicator = segmentationCancelIndicator
            self.segmentationDuration = segmentationDuration
            self.segmentationEventId = segmentationEventId
            self.segmentationTypeId = segmentationTypeId
            self.segmentationUpid = segmentationUpid
            self.segmentationUpidType = segmentationUpidType
            self.segmentsExpected = segmentsExpected
            self.subSegmentNum = subSegmentNum
            self.subSegmentsExpected = subSegmentsExpected
        }
    }

}

extension MediaLiveClientTypes {
    /// SCTE-35 Descriptor settings.
    public struct Scte35DescriptorSettings {
        /// SCTE-35 Segmentation Descriptor.
        /// This member is required.
        public var segmentationDescriptorScte35DescriptorSettings: MediaLiveClientTypes.Scte35SegmentationDescriptor?

        public init(
            segmentationDescriptorScte35DescriptorSettings: MediaLiveClientTypes.Scte35SegmentationDescriptor? = nil
        )
        {
            self.segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Holds one set of SCTE-35 Descriptor Settings.
    public struct Scte35Descriptor {
        /// SCTE-35 Descriptor Settings.
        /// This member is required.
        public var scte35DescriptorSettings: MediaLiveClientTypes.Scte35DescriptorSettings?

        public init(
            scte35DescriptorSettings: MediaLiveClientTypes.Scte35DescriptorSettings? = nil
        )
        {
            self.scte35DescriptorSettings = scte35DescriptorSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for a SCTE-35 time_signal.
    public struct Scte35TimeSignalScheduleActionSettings {
        /// The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
        /// This member is required.
        public var scte35Descriptors: [MediaLiveClientTypes.Scte35Descriptor]?

        public init(
            scte35Descriptors: [MediaLiveClientTypes.Scte35Descriptor]? = nil
        )
        {
            self.scte35Descriptors = scte35Descriptors
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to activate a static image.
    public struct StaticImageActivateScheduleActionSettings {
        /// The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
        public var duration: Swift.Int?
        /// The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
        public var fadeIn: Swift.Int?
        /// Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
        public var fadeOut: Swift.Int?
        /// The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
        public var height: Swift.Int?
        /// The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
        /// This member is required.
        public var image: MediaLiveClientTypes.InputLocation?
        /// Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
        public var imagex: Swift.Int?
        /// Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
        public var imagey: Swift.Int?
        /// The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
        public var layer: Swift.Int?
        /// Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
        public var opacity: Swift.Int?
        /// The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
        public var width: Swift.Int?

        public init(
            duration: Swift.Int? = nil,
            fadeIn: Swift.Int? = nil,
            fadeOut: Swift.Int? = nil,
            height: Swift.Int? = nil,
            image: MediaLiveClientTypes.InputLocation? = nil,
            imagex: Swift.Int? = nil,
            imagey: Swift.Int? = nil,
            layer: Swift.Int? = nil,
            opacity: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.duration = duration
            self.fadeIn = fadeIn
            self.fadeOut = fadeOut
            self.height = height
            self.image = image
            self.imagex = imagex
            self.imagey = imagey
            self.layer = layer
            self.opacity = opacity
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to deactivate the image in a specific layer.
    public struct StaticImageDeactivateScheduleActionSettings {
        /// The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
        public var fadeOut: Swift.Int?
        /// The image overlay layer to deactivate, 0 to 7. Default is 0.
        public var layer: Swift.Int?

        public init(
            fadeOut: Swift.Int? = nil,
            layer: Swift.Int? = nil
        )
        {
            self.fadeOut = fadeOut
            self.layer = layer
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to activate a static image.
    public struct StaticImageOutputActivateScheduleActionSettings {
        /// The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
        public var duration: Swift.Int?
        /// The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
        public var fadeIn: Swift.Int?
        /// Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
        public var fadeOut: Swift.Int?
        /// The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
        public var height: Swift.Int?
        /// The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
        /// This member is required.
        public var image: MediaLiveClientTypes.InputLocation?
        /// Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
        public var imagex: Swift.Int?
        /// Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
        public var imagey: Swift.Int?
        /// The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
        public var layer: Swift.Int?
        /// Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
        public var opacity: Swift.Int?
        /// The name(s) of the output(s) the activation should apply to.
        /// This member is required.
        public var outputNames: [Swift.String]?
        /// The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
        public var width: Swift.Int?

        public init(
            duration: Swift.Int? = nil,
            fadeIn: Swift.Int? = nil,
            fadeOut: Swift.Int? = nil,
            height: Swift.Int? = nil,
            image: MediaLiveClientTypes.InputLocation? = nil,
            imagex: Swift.Int? = nil,
            imagey: Swift.Int? = nil,
            layer: Swift.Int? = nil,
            opacity: Swift.Int? = nil,
            outputNames: [Swift.String]? = nil,
            width: Swift.Int? = nil
        )
        {
            self.duration = duration
            self.fadeIn = fadeIn
            self.fadeOut = fadeOut
            self.height = height
            self.image = image
            self.imagex = imagex
            self.imagey = imagey
            self.layer = layer
            self.opacity = opacity
            self.outputNames = outputNames
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for the action to deactivate the image in a specific layer.
    public struct StaticImageOutputDeactivateScheduleActionSettings {
        /// The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
        public var fadeOut: Swift.Int?
        /// The image overlay layer to deactivate, 0 to 7. Default is 0.
        public var layer: Swift.Int?
        /// The name(s) of the output(s) the deactivation should apply to.
        /// This member is required.
        public var outputNames: [Swift.String]?

        public init(
            fadeOut: Swift.Int? = nil,
            layer: Swift.Int? = nil,
            outputNames: [Swift.String]? = nil
        )
        {
            self.fadeOut = fadeOut
            self.layer = layer
            self.outputNames = outputNames
        }
    }

}

extension MediaLiveClientTypes {
    /// Holds the settings for a single schedule action.
    public struct ScheduleActionSettings {
        /// Action to insert HLS ID3 segment tagging
        public var hlsId3SegmentTaggingSettings: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings?
        /// Action to insert HLS metadata
        public var hlsTimedMetadataSettings: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings?
        /// Action to prepare an input for a future immediate input switch
        public var inputPrepareSettings: MediaLiveClientTypes.InputPrepareScheduleActionSettings?
        /// Action to switch the input
        public var inputSwitchSettings: MediaLiveClientTypes.InputSwitchScheduleActionSettings?
        /// Action to activate a motion graphics image overlay
        public var motionGraphicsImageActivateSettings: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings?
        /// Action to deactivate a motion graphics image overlay
        public var motionGraphicsImageDeactivateSettings: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings?
        /// Action to pause or unpause one or both channel pipelines
        public var pauseStateSettings: MediaLiveClientTypes.PauseStateScheduleActionSettings?
        /// Action to specify scte35 input
        public var scte35InputSettings: MediaLiveClientTypes.Scte35InputScheduleActionSettings?
        /// Action to insert SCTE-35 return_to_network message
        public var scte35ReturnToNetworkSettings: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings?
        /// Action to insert SCTE-35 splice_insert message
        public var scte35SpliceInsertSettings: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings?
        /// Action to insert SCTE-35 time_signal message
        public var scte35TimeSignalSettings: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings?
        /// Action to activate a static image overlay
        public var staticImageActivateSettings: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings?
        /// Action to deactivate a static image overlay
        public var staticImageDeactivateSettings: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings?
        /// Action to activate a static image overlay in one or more specified outputs
        public var staticImageOutputActivateSettings: MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings?
        /// Action to deactivate a static image overlay in one or more specified outputs
        public var staticImageOutputDeactivateSettings: MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings?

        public init(
            hlsId3SegmentTaggingSettings: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings? = nil,
            hlsTimedMetadataSettings: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings? = nil,
            inputPrepareSettings: MediaLiveClientTypes.InputPrepareScheduleActionSettings? = nil,
            inputSwitchSettings: MediaLiveClientTypes.InputSwitchScheduleActionSettings? = nil,
            motionGraphicsImageActivateSettings: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings? = nil,
            motionGraphicsImageDeactivateSettings: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings? = nil,
            pauseStateSettings: MediaLiveClientTypes.PauseStateScheduleActionSettings? = nil,
            scte35InputSettings: MediaLiveClientTypes.Scte35InputScheduleActionSettings? = nil,
            scte35ReturnToNetworkSettings: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings? = nil,
            scte35SpliceInsertSettings: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings? = nil,
            scte35TimeSignalSettings: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings? = nil,
            staticImageActivateSettings: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings? = nil,
            staticImageDeactivateSettings: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings? = nil,
            staticImageOutputActivateSettings: MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings? = nil,
            staticImageOutputDeactivateSettings: MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings? = nil
        )
        {
            self.hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettings
            self.hlsTimedMetadataSettings = hlsTimedMetadataSettings
            self.inputPrepareSettings = inputPrepareSettings
            self.inputSwitchSettings = inputSwitchSettings
            self.motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettings
            self.motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettings
            self.pauseStateSettings = pauseStateSettings
            self.scte35InputSettings = scte35InputSettings
            self.scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettings
            self.scte35SpliceInsertSettings = scte35SpliceInsertSettings
            self.scte35TimeSignalSettings = scte35TimeSignalSettings
            self.staticImageActivateSettings = staticImageActivateSettings
            self.staticImageDeactivateSettings = staticImageDeactivateSettings
            self.staticImageOutputActivateSettings = staticImageOutputActivateSettings
            self.staticImageOutputDeactivateSettings = staticImageOutputDeactivateSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Start time for the action.
    public struct FixedModeScheduleActionStartSettings {
        /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
        /// This member is required.
        public var time: Swift.String?

        public init(
            time: Swift.String? = nil
        )
        {
            self.time = time
        }
    }

}

extension MediaLiveClientTypes {

    /// Follow reference point.
    public enum FollowPoint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case end
        case start
        case sdkUnknown(Swift.String)

        public static var allCases: [FollowPoint] {
            return [
                .end,
                .start
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .end: return "END"
            case .start: return "START"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Settings to specify if an action follows another.
    public struct FollowModeScheduleActionStartSettings {
        /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
        /// This member is required.
        public var followPoint: MediaLiveClientTypes.FollowPoint?
        /// The action name of another action that this one refers to.
        /// This member is required.
        public var referenceActionName: Swift.String?

        public init(
            followPoint: MediaLiveClientTypes.FollowPoint? = nil,
            referenceActionName: Swift.String? = nil
        )
        {
            self.followPoint = followPoint
            self.referenceActionName = referenceActionName
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings to configure an action so that it occurs as soon as possible.
    public struct ImmediateModeScheduleActionStartSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Settings to specify when an action should occur. Only one of the options must be selected.
    public struct ScheduleActionStartSettings {
        /// Option for specifying the start time for an action.
        public var fixedModeScheduleActionStartSettings: MediaLiveClientTypes.FixedModeScheduleActionStartSettings?
        /// Option for specifying an action as relative to another action.
        public var followModeScheduleActionStartSettings: MediaLiveClientTypes.FollowModeScheduleActionStartSettings?
        /// Option for specifying an action that should be applied immediately.
        public var immediateModeScheduleActionStartSettings: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings?

        public init(
            fixedModeScheduleActionStartSettings: MediaLiveClientTypes.FixedModeScheduleActionStartSettings? = nil,
            followModeScheduleActionStartSettings: MediaLiveClientTypes.FollowModeScheduleActionStartSettings? = nil,
            immediateModeScheduleActionStartSettings: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings? = nil
        )
        {
            self.fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettings
            self.followModeScheduleActionStartSettings = followModeScheduleActionStartSettings
            self.immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Contains information on a single schedule action.
    public struct ScheduleAction {
        /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
        /// This member is required.
        public var actionName: Swift.String?
        /// Settings for this schedule action.
        /// This member is required.
        public var scheduleActionSettings: MediaLiveClientTypes.ScheduleActionSettings?
        /// The time for the action to start in the channel.
        /// This member is required.
        public var scheduleActionStartSettings: MediaLiveClientTypes.ScheduleActionStartSettings?

        public init(
            actionName: Swift.String? = nil,
            scheduleActionSettings: MediaLiveClientTypes.ScheduleActionSettings? = nil,
            scheduleActionStartSettings: MediaLiveClientTypes.ScheduleActionStartSettings? = nil
        )
        {
            self.actionName = actionName
            self.scheduleActionSettings = scheduleActionSettings
            self.scheduleActionStartSettings = scheduleActionStartSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// A signal map's monitor deployment status.
    public enum SignalMapMonitorDeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deploymentComplete
        case deploymentFailed
        case deploymentInProgress
        case dryRunDeploymentComplete
        case dryRunDeploymentFailed
        case dryRunDeploymentInProgress
        case notDeployed
        case sdkUnknown(Swift.String)

        public static var allCases: [SignalMapMonitorDeploymentStatus] {
            return [
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deploymentComplete,
                .deploymentFailed,
                .deploymentInProgress,
                .dryRunDeploymentComplete,
                .dryRunDeploymentFailed,
                .dryRunDeploymentInProgress,
                .notDeployed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deploymentComplete: return "DEPLOYMENT_COMPLETE"
            case .deploymentFailed: return "DEPLOYMENT_FAILED"
            case .deploymentInProgress: return "DEPLOYMENT_IN_PROGRESS"
            case .dryRunDeploymentComplete: return "DRY_RUN_DEPLOYMENT_COMPLETE"
            case .dryRunDeploymentFailed: return "DRY_RUN_DEPLOYMENT_FAILED"
            case .dryRunDeploymentInProgress: return "DRY_RUN_DEPLOYMENT_IN_PROGRESS"
            case .notDeployed: return "NOT_DEPLOYED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    public enum SignalMapStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case notReady
        case ready
        case updateComplete
        case updateFailed
        case updateInProgress
        case updateReverted
        case sdkUnknown(Swift.String)

        public static var allCases: [SignalMapStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .notReady,
                .ready,
                .updateComplete,
                .updateFailed,
                .updateInProgress,
                .updateReverted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .notReady: return "NOT_READY"
            case .ready: return "READY"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateReverted: return "UPDATE_REVERTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for SignalMapSummary
    public struct SignalMapSummary {
        /// A signal map's ARN (Amazon Resource Name)
        /// This member is required.
        public var arn: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A resource's optional description.
        public var description: Swift.String?
        /// A signal map's id.
        /// This member is required.
        public var id: Swift.String?
        /// Placeholder documentation for __timestampIso8601
        public var modifiedAt: Foundation.Date?
        /// A signal map's monitor deployment status.
        /// This member is required.
        public var monitorDeploymentStatus: MediaLiveClientTypes.SignalMapMonitorDeploymentStatus?
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// This member is required.
        public var name: Swift.String?
        /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
        /// This member is required.
        public var status: MediaLiveClientTypes.SignalMapStatus?
        /// Represents the tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            monitorDeploymentStatus: MediaLiveClientTypes.SignalMapMonitorDeploymentStatus? = nil,
            name: Swift.String? = nil,
            status: MediaLiveClientTypes.SignalMapStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.modifiedAt = modifiedAt
            self.monitorDeploymentStatus = monitorDeploymentStatus
            self.name = name
            self.status = status
            self.tags = tags
        }
    }

}

extension MediaLiveClientTypes {
    /// Complete these parameters only if the content is encrypted.
    public struct SrtCallerDecryptionRequest {
        /// The algorithm used to encrypt content.
        public var algorithm: MediaLiveClientTypes.Algorithm?
        /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. This secret holds the passphrase that MediaLive will use to decrypt the source content.
        public var passphraseSecretArn: Swift.String?

        public init(
            algorithm: MediaLiveClientTypes.Algorithm? = nil,
            passphraseSecretArn: Swift.String? = nil
        )
        {
            self.algorithm = algorithm
            self.passphraseSecretArn = passphraseSecretArn
        }
    }

}

extension MediaLiveClientTypes {
    /// Configures the connection for a source that uses SRT as the connection protocol. In terms of establishing the connection, MediaLive is always the caller and the upstream system is always the listener. In terms of transmission of the source content, MediaLive is always the receiver and the upstream system is always the sender.
    public struct SrtCallerSourceRequest {
        /// Complete these parameters only if the content is encrypted.
        public var decryption: MediaLiveClientTypes.SrtCallerDecryptionRequest?
        /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT. Obtain this value from the operator at the upstream system.
        public var minimumLatency: Swift.Int?
        /// The IP address at the upstream system (the listener) that MediaLive (the caller) will connect to.
        public var srtListenerAddress: Swift.String?
        /// The port at the upstream system (the listener) that MediaLive (the caller) will connect to.
        public var srtListenerPort: Swift.String?
        /// This value is required if the upstream system uses this identifier because without it, the SRT handshake between MediaLive (the caller) and the upstream system (the listener) might fail.
        public var streamId: Swift.String?

        public init(
            decryption: MediaLiveClientTypes.SrtCallerDecryptionRequest? = nil,
            minimumLatency: Swift.Int? = nil,
            srtListenerAddress: Swift.String? = nil,
            srtListenerPort: Swift.String? = nil,
            streamId: Swift.String? = nil
        )
        {
            self.decryption = decryption
            self.minimumLatency = minimumLatency
            self.srtListenerAddress = srtListenerAddress
            self.srtListenerPort = srtListenerPort
            self.streamId = streamId
        }
    }

}

extension MediaLiveClientTypes {

    /// Thumbnail type.
    public enum ThumbnailType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case currentActive
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [ThumbnailType] {
            return [
                .currentActive,
                .unspecified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .currentActive: return "CURRENT_ACTIVE"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Details of a single thumbnail
    public struct Thumbnail {
        /// The binary data for the latest thumbnail.
        public var body: Swift.String?
        /// The content type for the latest thumbnail.
        public var contentType: Swift.String?
        /// Thumbnail Type
        public var thumbnailType: MediaLiveClientTypes.ThumbnailType?
        /// Time stamp for the latest thumbnail.
        public var timeStamp: Foundation.Date?

        public init(
            body: Swift.String? = nil,
            contentType: Swift.String? = nil,
            thumbnailType: MediaLiveClientTypes.ThumbnailType? = nil,
            timeStamp: Foundation.Date? = nil
        )
        {
            self.body = body
            self.contentType = contentType
            self.thumbnailType = thumbnailType
            self.timeStamp = timeStamp
        }
    }

}

extension MediaLiveClientTypes {
    /// Thumbnail details for one pipeline of a running channel.
    public struct ThumbnailDetail {
        /// Pipeline ID
        public var pipelineId: Swift.String?
        /// thumbnails of a single pipeline
        public var thumbnails: [MediaLiveClientTypes.Thumbnail]?

        public init(
            pipelineId: Swift.String? = nil,
            thumbnails: [MediaLiveClientTypes.Thumbnail]? = nil
        )
        {
            self.pipelineId = pipelineId
            self.thumbnails = thumbnails
        }
    }

}

extension MediaLiveClientTypes {

    /// The type of device transfer. INCOMING for an input device that is being transferred to you, OUTGOING for an input device that you are transferring to another AWS account.
    public enum InputDeviceTransferType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case incoming
        case outgoing
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeviceTransferType] {
            return [
                .incoming,
                .outgoing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .incoming: return "INCOMING"
            case .outgoing: return "OUTGOING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Details about the input device that is being transferred.
    public struct TransferringInputDeviceSummary {
        /// The unique ID of the input device.
        public var id: Swift.String?
        /// The optional message that the sender has attached to the transfer.
        public var message: Swift.String?
        /// The AWS account ID for the recipient of the input device transfer.
        public var targetCustomerId: Swift.String?
        /// The type (direction) of the input device transfer.
        public var transferType: MediaLiveClientTypes.InputDeviceTransferType?

        public init(
            id: Swift.String? = nil,
            message: Swift.String? = nil,
            targetCustomerId: Swift.String? = nil,
            transferType: MediaLiveClientTypes.InputDeviceTransferType? = nil
        )
        {
            self.id = id
            self.message = message
            self.targetCustomerId = targetCustomerId
            self.transferType = transferType
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ValidationError
    public struct ValidationError {
        /// Path to the source of the error.
        public var elementPath: Swift.String?
        /// The error message.
        public var errorMessage: Swift.String?

        public init(
            elementPath: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.elementPath = elementPath
            self.errorMessage = errorMessage
        }
    }

}

extension MediaLiveClientTypes {

    /// Afd Signaling
    public enum AfdSignaling: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case fixed
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AfdSignaling] {
            return [
                .auto,
                .fixed,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .fixed: return "FIXED"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Passthrough applies no color space conversion to the output
    public struct ColorSpacePassthroughSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Rec601 Settings
    public struct Rec601Settings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Rec709 Settings
    public struct Rec709Settings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Av1 Color Space Settings
    public struct Av1ColorSpaceSettings {
        /// Passthrough applies no color space conversion to the output
        public var colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings?
        /// Hdr10 Settings
        public var hdr10Settings: MediaLiveClientTypes.Hdr10Settings?
        /// Rec601 Settings
        public var rec601Settings: MediaLiveClientTypes.Rec601Settings?
        /// Rec709 Settings
        public var rec709Settings: MediaLiveClientTypes.Rec709Settings?

        public init(
            colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings? = nil,
            hdr10Settings: MediaLiveClientTypes.Hdr10Settings? = nil,
            rec601Settings: MediaLiveClientTypes.Rec601Settings? = nil,
            rec709Settings: MediaLiveClientTypes.Rec709Settings? = nil
        )
        {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.hdr10Settings = hdr10Settings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }
    }

}

extension MediaLiveClientTypes {

    /// Fixed Afd
    public enum FixedAfd: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case afd0000
        case afd0010
        case afd0011
        case afd0100
        case afd1000
        case afd1001
        case afd1010
        case afd1011
        case afd1101
        case afd1110
        case afd1111
        case sdkUnknown(Swift.String)

        public static var allCases: [FixedAfd] {
            return [
                .afd0000,
                .afd0010,
                .afd0011,
                .afd0100,
                .afd1000,
                .afd1001,
                .afd1010,
                .afd1011,
                .afd1101,
                .afd1110,
                .afd1111
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .afd0000: return "AFD_0000"
            case .afd0010: return "AFD_0010"
            case .afd0011: return "AFD_0011"
            case .afd0100: return "AFD_0100"
            case .afd1000: return "AFD_1000"
            case .afd1001: return "AFD_1001"
            case .afd1010: return "AFD_1010"
            case .afd1011: return "AFD_1011"
            case .afd1101: return "AFD_1101"
            case .afd1110: return "AFD_1110"
            case .afd1111: return "AFD_1111"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Av1 Gop Size Units
    public enum Av1GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1GopSizeUnits] {
            return [
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Av1 Level
    public enum Av1Level: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case av1Level2
        case av1Level21
        case av1Level3
        case av1Level31
        case av1Level4
        case av1Level41
        case av1Level5
        case av1Level51
        case av1Level52
        case av1Level53
        case av1Level6
        case av1Level61
        case av1Level62
        case av1Level63
        case av1LevelAuto
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1Level] {
            return [
                .av1Level2,
                .av1Level21,
                .av1Level3,
                .av1Level31,
                .av1Level4,
                .av1Level41,
                .av1Level5,
                .av1Level51,
                .av1Level52,
                .av1Level53,
                .av1Level6,
                .av1Level61,
                .av1Level62,
                .av1Level63,
                .av1LevelAuto
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .av1Level2: return "AV1_LEVEL_2"
            case .av1Level21: return "AV1_LEVEL_2_1"
            case .av1Level3: return "AV1_LEVEL_3"
            case .av1Level31: return "AV1_LEVEL_3_1"
            case .av1Level4: return "AV1_LEVEL_4"
            case .av1Level41: return "AV1_LEVEL_4_1"
            case .av1Level5: return "AV1_LEVEL_5"
            case .av1Level51: return "AV1_LEVEL_5_1"
            case .av1Level52: return "AV1_LEVEL_5_2"
            case .av1Level53: return "AV1_LEVEL_5_3"
            case .av1Level6: return "AV1_LEVEL_6"
            case .av1Level61: return "AV1_LEVEL_6_1"
            case .av1Level62: return "AV1_LEVEL_6_2"
            case .av1Level63: return "AV1_LEVEL_6_3"
            case .av1LevelAuto: return "AV1_LEVEL_AUTO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Av1 Look Ahead Rate Control
    public enum Av1LookAheadRateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1LookAheadRateControl] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Av1 Scene Change Detect
    public enum Av1SceneChangeDetect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1SceneChangeDetect] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Timecode Burnin Font Size
    public enum TimecodeBurninFontSize: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case extraSmall10
        case large48
        case medium32
        case small16
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeBurninFontSize] {
            return [
                .extraSmall10,
                .large48,
                .medium32,
                .small16
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .extraSmall10: return "EXTRA_SMALL_10"
            case .large48: return "LARGE_48"
            case .medium32: return "MEDIUM_32"
            case .small16: return "SMALL_16"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Timecode Burnin Position
    public enum TimecodeBurninPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomCenter
        case bottomLeft
        case bottomRight
        case middleCenter
        case middleLeft
        case middleRight
        case topCenter
        case topLeft
        case topRight
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeBurninPosition] {
            return [
                .bottomCenter,
                .bottomLeft,
                .bottomRight,
                .middleCenter,
                .middleLeft,
                .middleRight,
                .topCenter,
                .topLeft,
                .topRight
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomCenter: return "BOTTOM_CENTER"
            case .bottomLeft: return "BOTTOM_LEFT"
            case .bottomRight: return "BOTTOM_RIGHT"
            case .middleCenter: return "MIDDLE_CENTER"
            case .middleLeft: return "MIDDLE_LEFT"
            case .middleRight: return "MIDDLE_RIGHT"
            case .topCenter: return "TOP_CENTER"
            case .topLeft: return "TOP_LEFT"
            case .topRight: return "TOP_RIGHT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Timecode Burnin Settings
    public struct TimecodeBurninSettings {
        /// Choose a timecode burn-in font size
        /// This member is required.
        public var fontSize: MediaLiveClientTypes.TimecodeBurninFontSize?
        /// Choose a timecode burn-in output position
        /// This member is required.
        public var position: MediaLiveClientTypes.TimecodeBurninPosition?
        /// Create a timecode burn-in prefix (optional)
        public var `prefix`: Swift.String?

        public init(
            fontSize: MediaLiveClientTypes.TimecodeBurninFontSize? = nil,
            position: MediaLiveClientTypes.TimecodeBurninPosition? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.fontSize = fontSize
            self.position = position
            self.`prefix` = `prefix`
        }
    }

}

extension MediaLiveClientTypes {
    /// Av1 Settings
    public struct Av1Settings {
        /// Configures whether MediaLive will write AFD values into the video. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: the AFD value will be the value configured in the fixedAfd parameter. NONE: MediaLive won't write AFD into the video
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// The size of the buffer (HRD buffer model) in bits.
        public var bufSize: Swift.Int?
        /// Color Space settings
        public var colorSpaceSettings: MediaLiveClientTypes.Av1ColorSpaceSettings?
        /// Complete this property only if you set the afdSignaling property to FIXED. Choose the AFD value (4 bits) to write on all frames of the video encode.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// The denominator for the framerate. Framerate is a fraction, for example, 24000 / 1001.
        /// This member is required.
        public var framerateDenominator: Swift.Int?
        /// The numerator for the framerate. Framerate is a fraction, for example, 24000 / 1001.
        /// This member is required.
        public var framerateNumerator: Swift.Int?
        /// The GOP size (keyframe interval). If GopSizeUnits is frames, GopSize must be a whole number and must be greater than or equal to 1. If GopSizeUnits is seconds, GopSize must be greater than 0, but it can be a decimal.
        public var gopSize: Swift.Double?
        /// Choose the units for the GOP size: FRAMES or SECONDS. For SECONDS, MediaLive converts the size into a frame count at run time.
        public var gopSizeUnits: MediaLiveClientTypes.Av1GopSizeUnits?
        /// Sets the level. This parameter is one of the properties of the encoding scheme for AV1.
        public var level: MediaLiveClientTypes.Av1Level?
        /// Sets the amount of lookahead. A value of LOW can decrease latency and memory usage. A value of HIGH can produce better quality for certain content.
        public var lookAheadRateControl: MediaLiveClientTypes.Av1LookAheadRateControl?
        /// The maximum bitrate to assign. For recommendations, see the description for qvbrQualityLevel.
        public var maxBitrate: Swift.Int?
        /// Applies only if you enable SceneChangeDetect. Sets the interval between frames. This property ensures a minimum separation between repeated (cadence) I-frames and any I-frames inserted by scene change detection (SCD frames). Enter a number for the interval, measured in number of frames. If an SCD frame and a cadence frame are closer than the specified number of frames, MediaLive shrinks or stretches the GOP to include the SCD frame. Then normal cadence resumes in the next GOP. For GOP stretch to succeed, you must enable LookAheadRateControl. Note that the maximum GOP stretch = (GOP size) + (Minimum I-interval) - 1
        public var minIInterval: Swift.Int?
        /// The denominator for the output pixel aspect ratio (PAR).
        public var parDenominator: Swift.Int?
        /// The numerator for the output pixel aspect ratio (PAR).
        public var parNumerator: Swift.Int?
        /// Controls the target quality for the video encode. With QVBR rate control mode, the final quality is the target quality, constrained by the maxBitrate. Set values for the qvbrQualityLevel property and maxBitrate property that suit your most important viewing devices. To let MediaLive set the quality level (AUTO mode), leave the qvbrQualityLevel field empty. In this case, MediaLive uses the maximum bitrate, and the quality follows from that: more complex content might have a lower quality. Or set a target quality level and a maximum bitrate. With more complex content, MediaLive will try to achieve the target quality, but it won't exceed the maximum bitrate. With less complex content, This option will use only the bitrate needed to reach the target quality. Recommended values are: Primary screen: qvbrQualityLevel: Leave empty. maxBitrate: 4,000,000 PC or tablet: qvbrQualityLevel: Leave empty. maxBitrate: 1,500,000 to 3,000,000 Smartphone: qvbrQualityLevel: Leave empty. maxBitrate: 1,000,000 to 1,500,000
        public var qvbrQualityLevel: Swift.Int?
        /// Controls whether MediaLive inserts I-frames when it detects a scene change. ENABLED or DISABLED.
        public var sceneChangeDetect: MediaLiveClientTypes.Av1SceneChangeDetect?
        /// Configures the timecode burn-in feature. If you enable this feature, the timecode will become part of the video.
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?

        public init(
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            bufSize: Swift.Int? = nil,
            colorSpaceSettings: MediaLiveClientTypes.Av1ColorSpaceSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.Av1GopSizeUnits? = nil,
            level: MediaLiveClientTypes.Av1Level? = nil,
            lookAheadRateControl: MediaLiveClientTypes.Av1LookAheadRateControl? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            sceneChangeDetect: MediaLiveClientTypes.Av1SceneChangeDetect? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil
        )
        {
            self.afdSignaling = afdSignaling
            self.bufSize = bufSize
            self.colorSpaceSettings = colorSpaceSettings
            self.fixedAfd = fixedAfd
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.qvbrQualityLevel = qvbrQualityLevel
            self.sceneChangeDetect = sceneChangeDetect
            self.timecodeBurninSettings = timecodeBurninSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Frame Capture Interval Unit
    public enum FrameCaptureIntervalUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case milliseconds
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [FrameCaptureIntervalUnit] {
            return [
                .milliseconds,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .milliseconds: return "MILLISECONDS"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Frame Capture Settings
    public struct FrameCaptureSettings {
        /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
        public var captureInterval: Swift.Int?
        /// Unit for the frame capture interval.
        public var captureIntervalUnits: MediaLiveClientTypes.FrameCaptureIntervalUnit?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?

        public init(
            captureInterval: Swift.Int? = nil,
            captureIntervalUnits: MediaLiveClientTypes.FrameCaptureIntervalUnit? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil
        )
        {
            self.captureInterval = captureInterval
            self.captureIntervalUnits = captureIntervalUnits
            self.timecodeBurninSettings = timecodeBurninSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// H264 Adaptive Quantization
    public enum H264AdaptiveQuantization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H264AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Color Metadata
    public enum H264ColorMetadata: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ColorMetadata] {
            return [
                .ignore,
                .insert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Color Space Settings
    public struct H264ColorSpaceSettings {
        /// Passthrough applies no color space conversion to the output
        public var colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings?
        /// Rec601 Settings
        public var rec601Settings: MediaLiveClientTypes.Rec601Settings?
        /// Rec709 Settings
        public var rec709Settings: MediaLiveClientTypes.Rec709Settings?

        public init(
            colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings? = nil,
            rec601Settings: MediaLiveClientTypes.Rec601Settings? = nil,
            rec709Settings: MediaLiveClientTypes.Rec709Settings? = nil
        )
        {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }
    }

}

extension MediaLiveClientTypes {

    /// H264 Entropy Encoding
    public enum H264EntropyEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cabac
        case cavlc
        case sdkUnknown(Swift.String)

        public static var allCases: [H264EntropyEncoding] {
            return [
                .cabac,
                .cavlc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cabac: return "CABAC"
            case .cavlc: return "CAVLC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Bandwidth Reduction Post Filter Sharpening
    public enum BandwidthReductionPostFilterSharpening: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case sharpening1
        case sharpening2
        case sharpening3
        case sdkUnknown(Swift.String)

        public static var allCases: [BandwidthReductionPostFilterSharpening] {
            return [
                .disabled,
                .sharpening1,
                .sharpening2,
                .sharpening3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .sharpening1: return "SHARPENING_1"
            case .sharpening2: return "SHARPENING_2"
            case .sharpening3: return "SHARPENING_3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Bandwidth Reduction Filter Strength
    public enum BandwidthReductionFilterStrength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case strength1
        case strength2
        case strength3
        case strength4
        case sdkUnknown(Swift.String)

        public static var allCases: [BandwidthReductionFilterStrength] {
            return [
                .auto,
                .strength1,
                .strength2,
                .strength3,
                .strength4
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .strength1: return "STRENGTH_1"
            case .strength2: return "STRENGTH_2"
            case .strength3: return "STRENGTH_3"
            case .strength4: return "STRENGTH_4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Bandwidth Reduction Filter Settings
    public struct BandwidthReductionFilterSettings {
        /// Configures the sharpening control, which is available when the bandwidth reduction filter is enabled. This control sharpens edges and contours, which produces a specific artistic effect that you might want. We recommend that you test each of the values (including DISABLED) to observe the sharpening effect on the content.
        public var postFilterSharpening: MediaLiveClientTypes.BandwidthReductionPostFilterSharpening?
        /// Enables the bandwidth reduction filter. The filter strengths range from 1 to 4. We recommend that you always enable this filter and use AUTO, to let MediaLive apply the optimum filtering for the context.
        public var strength: MediaLiveClientTypes.BandwidthReductionFilterStrength?

        public init(
            postFilterSharpening: MediaLiveClientTypes.BandwidthReductionPostFilterSharpening? = nil,
            strength: MediaLiveClientTypes.BandwidthReductionFilterStrength? = nil
        )
        {
            self.postFilterSharpening = postFilterSharpening
            self.strength = strength
        }
    }

}

extension MediaLiveClientTypes {

    /// Temporal Filter Post Filter Sharpening
    public enum TemporalFilterPostFilterSharpening: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [TemporalFilterPostFilterSharpening] {
            return [
                .auto,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Temporal Filter Strength
    public enum TemporalFilterStrength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case strength1
        case strength10
        case strength11
        case strength12
        case strength13
        case strength14
        case strength15
        case strength16
        case strength2
        case strength3
        case strength4
        case strength5
        case strength6
        case strength7
        case strength8
        case strength9
        case sdkUnknown(Swift.String)

        public static var allCases: [TemporalFilterStrength] {
            return [
                .auto,
                .strength1,
                .strength10,
                .strength11,
                .strength12,
                .strength13,
                .strength14,
                .strength15,
                .strength16,
                .strength2,
                .strength3,
                .strength4,
                .strength5,
                .strength6,
                .strength7,
                .strength8,
                .strength9
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .strength1: return "STRENGTH_1"
            case .strength10: return "STRENGTH_10"
            case .strength11: return "STRENGTH_11"
            case .strength12: return "STRENGTH_12"
            case .strength13: return "STRENGTH_13"
            case .strength14: return "STRENGTH_14"
            case .strength15: return "STRENGTH_15"
            case .strength16: return "STRENGTH_16"
            case .strength2: return "STRENGTH_2"
            case .strength3: return "STRENGTH_3"
            case .strength4: return "STRENGTH_4"
            case .strength5: return "STRENGTH_5"
            case .strength6: return "STRENGTH_6"
            case .strength7: return "STRENGTH_7"
            case .strength8: return "STRENGTH_8"
            case .strength9: return "STRENGTH_9"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Temporal Filter Settings
    public struct TemporalFilterSettings {
        /// If you enable this filter, the results are the following:
        ///
        /// * If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source.
        ///
        /// * If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
        public var postFilterSharpening: MediaLiveClientTypes.TemporalFilterPostFilterSharpening?
        /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
        public var strength: MediaLiveClientTypes.TemporalFilterStrength?

        public init(
            postFilterSharpening: MediaLiveClientTypes.TemporalFilterPostFilterSharpening? = nil,
            strength: MediaLiveClientTypes.TemporalFilterStrength? = nil
        )
        {
            self.postFilterSharpening = postFilterSharpening
            self.strength = strength
        }
    }

}

extension MediaLiveClientTypes {
    /// H264 Filter Settings
    public struct H264FilterSettings {
        /// Bandwidth Reduction Filter Settings
        public var bandwidthReductionFilterSettings: MediaLiveClientTypes.BandwidthReductionFilterSettings?
        /// Temporal Filter Settings
        public var temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings?

        public init(
            bandwidthReductionFilterSettings: MediaLiveClientTypes.BandwidthReductionFilterSettings? = nil,
            temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings? = nil
        )
        {
            self.bandwidthReductionFilterSettings = bandwidthReductionFilterSettings
            self.temporalFilterSettings = temporalFilterSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// H264 Flicker Aq
    public enum H264FlickerAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FlickerAq] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Force Field Pictures
    public enum H264ForceFieldPictures: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ForceFieldPictures] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Framerate Control
    public enum H264FramerateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Gop BReference
    public enum H264GopBReference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264GopBReference] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Gop Size Units
    public enum H264GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [H264GopSizeUnits] {
            return [
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Level
    public enum H264Level: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case h264Level1
        case h264Level11
        case h264Level12
        case h264Level13
        case h264Level2
        case h264Level21
        case h264Level22
        case h264Level3
        case h264Level31
        case h264Level32
        case h264Level4
        case h264Level41
        case h264Level42
        case h264Level5
        case h264Level51
        case h264Level52
        case h264LevelAuto
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Level] {
            return [
                .h264Level1,
                .h264Level11,
                .h264Level12,
                .h264Level13,
                .h264Level2,
                .h264Level21,
                .h264Level22,
                .h264Level3,
                .h264Level31,
                .h264Level32,
                .h264Level4,
                .h264Level41,
                .h264Level42,
                .h264Level5,
                .h264Level51,
                .h264Level52,
                .h264LevelAuto
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .h264Level1: return "H264_LEVEL_1"
            case .h264Level11: return "H264_LEVEL_1_1"
            case .h264Level12: return "H264_LEVEL_1_2"
            case .h264Level13: return "H264_LEVEL_1_3"
            case .h264Level2: return "H264_LEVEL_2"
            case .h264Level21: return "H264_LEVEL_2_1"
            case .h264Level22: return "H264_LEVEL_2_2"
            case .h264Level3: return "H264_LEVEL_3"
            case .h264Level31: return "H264_LEVEL_3_1"
            case .h264Level32: return "H264_LEVEL_3_2"
            case .h264Level4: return "H264_LEVEL_4"
            case .h264Level41: return "H264_LEVEL_4_1"
            case .h264Level42: return "H264_LEVEL_4_2"
            case .h264Level5: return "H264_LEVEL_5"
            case .h264Level51: return "H264_LEVEL_5_1"
            case .h264Level52: return "H264_LEVEL_5_2"
            case .h264LevelAuto: return "H264_LEVEL_AUTO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Look Ahead Rate Control
    public enum H264LookAheadRateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [H264LookAheadRateControl] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Par Control
    public enum H264ParControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Profile
    public enum H264Profile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case baseline
        case high
        case high10bit
        case high422
        case high42210bit
        case main
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Profile] {
            return [
                .baseline,
                .high,
                .high10bit,
                .high422,
                .high42210bit,
                .main
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .baseline: return "BASELINE"
            case .high: return "HIGH"
            case .high10bit: return "HIGH_10BIT"
            case .high422: return "HIGH_422"
            case .high42210bit: return "HIGH_422_10BIT"
            case .main: return "MAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Quality Level
    public enum H264QualityLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enhancedQuality
        case standardQuality
        case sdkUnknown(Swift.String)

        public static var allCases: [H264QualityLevel] {
            return [
                .enhancedQuality,
                .standardQuality
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enhancedQuality: return "ENHANCED_QUALITY"
            case .standardQuality: return "STANDARD_QUALITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Rate Control Mode
    public enum H264RateControlMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case multiplex
        case qvbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [H264RateControlMode] {
            return [
                .cbr,
                .multiplex,
                .qvbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .multiplex: return "MULTIPLEX"
            case .qvbr: return "QVBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Scan Type
    public enum H264ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ScanType] {
            return [
                .interlaced,
                .progressive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Scene Change Detect
    public enum H264SceneChangeDetect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SceneChangeDetect] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Spatial Aq
    public enum H264SpatialAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SpatialAq] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Sub Gop Length
    public enum H264SubGopLength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `dynamic`
        case fixed
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SubGopLength] {
            return [
                .dynamic,
                .fixed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "DYNAMIC"
            case .fixed: return "FIXED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Syntax
    public enum H264Syntax: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case rp2027
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Syntax] {
            return [
                .default,
                .rp2027
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .rp2027: return "RP2027"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Temporal Aq
    public enum H264TemporalAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264TemporalAq] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H264 Timecode Insertion Behavior
    public enum H264TimecodeInsertionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case picTimingSei
        case sdkUnknown(Swift.String)

        public static var allCases: [H264TimecodeInsertionBehavior] {
            return [
                .disabled,
                .picTimingSei
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .picTimingSei: return "PIC_TIMING_SEI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// H264 Settings
    public struct H264Settings {
        /// Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
        public var adaptiveQuantization: MediaLiveClientTypes.H264AdaptiveQuantization?
        /// Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// Percentage of the buffer that should initially be filled (HRD buffer model).
        public var bufFillPct: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits.
        public var bufSize: Swift.Int?
        /// Includes colorspace metadata in the output.
        public var colorMetadata: MediaLiveClientTypes.H264ColorMetadata?
        /// Color Space settings
        public var colorSpaceSettings: MediaLiveClientTypes.H264ColorSpaceSettings?
        /// Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
        public var entropyEncoding: MediaLiveClientTypes.H264EntropyEncoding?
        /// Optional. Both filters reduce bandwidth by removing imperceptible details. You can enable one of the filters. We recommend that you try both filters and observe the results to decide which one to use. The Temporal Filter reduces bandwidth by removing imperceptible details in the content. It combines perceptual filtering and motion compensated temporal filtering (MCTF). It operates independently of the compression level. The Bandwidth Reduction filter is a perceptual filter located within the encoding loop. It adapts to the current compression level to filter imperceptible signals. This filter works only when the resolution is 1080p or lower.
        public var filterSettings: MediaLiveClientTypes.H264FilterSettings?
        /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
        public var flickerAq: MediaLiveClientTypes.H264FlickerAq?
        /// This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
        public var forceFieldPictures: MediaLiveClientTypes.H264ForceFieldPictures?
        /// This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
        public var framerateControl: MediaLiveClientTypes.H264FramerateControl?
        /// Framerate denominator.
        public var framerateDenominator: Swift.Int?
        /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
        public var framerateNumerator: Swift.Int?
        /// Documentation update needed
        public var gopBReference: MediaLiveClientTypes.H264GopBReference?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// Number of B-frames between reference frames.
        public var gopNumBFrames: Swift.Int?
        /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
        public var gopSize: Swift.Double?
        /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
        public var gopSizeUnits: MediaLiveClientTypes.H264GopSizeUnits?
        /// H.264 Level.
        public var level: MediaLiveClientTypes.H264Level?
        /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
        public var lookAheadRateControl: MediaLiveClientTypes.H264LookAheadRateControl?
        /// For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
        public var maxBitrate: Swift.Int?
        /// Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
        public var minIInterval: Swift.Int?
        /// Sets the minimum QP. If you aren't familiar with quantization adjustment, leave the field empty. MediaLive will apply an appropriate value.
        public var minQp: Swift.Int?
        /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
        public var numRefFrames: Swift.Int?
        /// This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
        public var parControl: MediaLiveClientTypes.H264ParControl?
        /// Pixel Aspect Ratio denominator.
        public var parDenominator: Swift.Int?
        /// Pixel Aspect Ratio numerator.
        public var parNumerator: Swift.Int?
        /// H.264 Profile.
        public var profile: MediaLiveClientTypes.H264Profile?
        /// Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel).
        ///
        /// * ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY.
        ///
        /// * STANDARD_QUALITY: Valid for any Rate control mode.
        public var qualityLevel: MediaLiveClientTypes.H264QualityLevel?
        /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are:
        ///
        /// * Primary screen: Quality level: 8 to 10. Max bitrate: 4M
        ///
        /// * PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
        ///
        /// * Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
        public var qvbrQualityLevel: Swift.Int?
        /// Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
        public var rateControlMode: MediaLiveClientTypes.H264RateControlMode?
        /// Sets the scan type of the output to progressive or top-field-first interlaced.
        public var scanType: MediaLiveClientTypes.H264ScanType?
        /// Scene change detection.
        ///
        /// * On: inserts I-frames when scene change is detected.
        ///
        /// * Off: does not force an I-frame when scene change is detected.
        public var sceneChangeDetect: MediaLiveClientTypes.H264SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
        public var slices: Swift.Int?
        /// Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
        public var softness: Swift.Int?
        /// Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
        public var spatialAq: MediaLiveClientTypes.H264SpatialAq?
        /// If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
        public var subgopLength: MediaLiveClientTypes.H264SubGopLength?
        /// Produces a bitstream compliant with SMPTE RP-2027.
        public var syntax: MediaLiveClientTypes.H264Syntax?
        /// Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
        public var temporalAq: MediaLiveClientTypes.H264TemporalAq?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?
        /// Determines how timecodes should be inserted into the video elementary stream.
        ///
        /// * 'disabled': Do not include timecodes
        ///
        /// * 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
        public var timecodeInsertion: MediaLiveClientTypes.H264TimecodeInsertionBehavior?

        public init(
            adaptiveQuantization: MediaLiveClientTypes.H264AdaptiveQuantization? = nil,
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            bitrate: Swift.Int? = nil,
            bufFillPct: Swift.Int? = nil,
            bufSize: Swift.Int? = nil,
            colorMetadata: MediaLiveClientTypes.H264ColorMetadata? = nil,
            colorSpaceSettings: MediaLiveClientTypes.H264ColorSpaceSettings? = nil,
            entropyEncoding: MediaLiveClientTypes.H264EntropyEncoding? = nil,
            filterSettings: MediaLiveClientTypes.H264FilterSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            flickerAq: MediaLiveClientTypes.H264FlickerAq? = nil,
            forceFieldPictures: MediaLiveClientTypes.H264ForceFieldPictures? = nil,
            framerateControl: MediaLiveClientTypes.H264FramerateControl? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopBReference: MediaLiveClientTypes.H264GopBReference? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopNumBFrames: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.H264GopSizeUnits? = nil,
            level: MediaLiveClientTypes.H264Level? = nil,
            lookAheadRateControl: MediaLiveClientTypes.H264LookAheadRateControl? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            minQp: Swift.Int? = nil,
            numRefFrames: Swift.Int? = nil,
            parControl: MediaLiveClientTypes.H264ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            profile: MediaLiveClientTypes.H264Profile? = nil,
            qualityLevel: MediaLiveClientTypes.H264QualityLevel? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            rateControlMode: MediaLiveClientTypes.H264RateControlMode? = nil,
            scanType: MediaLiveClientTypes.H264ScanType? = nil,
            sceneChangeDetect: MediaLiveClientTypes.H264SceneChangeDetect? = nil,
            slices: Swift.Int? = nil,
            softness: Swift.Int? = nil,
            spatialAq: MediaLiveClientTypes.H264SpatialAq? = nil,
            subgopLength: MediaLiveClientTypes.H264SubGopLength? = nil,
            syntax: MediaLiveClientTypes.H264Syntax? = nil,
            temporalAq: MediaLiveClientTypes.H264TemporalAq? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil,
            timecodeInsertion: MediaLiveClientTypes.H264TimecodeInsertionBehavior? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.bitrate = bitrate
            self.bufFillPct = bufFillPct
            self.bufSize = bufSize
            self.colorMetadata = colorMetadata
            self.colorSpaceSettings = colorSpaceSettings
            self.entropyEncoding = entropyEncoding
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.flickerAq = flickerAq
            self.forceFieldPictures = forceFieldPictures
            self.framerateControl = framerateControl
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.gopNumBFrames = gopNumBFrames
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.minQp = minQp
            self.numRefFrames = numRefFrames
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.profile = profile
            self.qualityLevel = qualityLevel
            self.qvbrQualityLevel = qvbrQualityLevel
            self.rateControlMode = rateControlMode
            self.scanType = scanType
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.softness = softness
            self.spatialAq = spatialAq
            self.subgopLength = subgopLength
            self.syntax = syntax
            self.temporalAq = temporalAq
            self.timecodeBurninSettings = timecodeBurninSettings
            self.timecodeInsertion = timecodeInsertion
        }
    }

}

extension MediaLiveClientTypes {

    /// H265 Adaptive Quantization
    public enum H265AdaptiveQuantization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H265AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Alternative Transfer Function
    public enum H265AlternativeTransferFunction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case omit
        case sdkUnknown(Swift.String)

        public static var allCases: [H265AlternativeTransferFunction] {
            return [
                .insert,
                .omit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .omit: return "OMIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Color Metadata
    public enum H265ColorMetadata: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [H265ColorMetadata] {
            return [
                .ignore,
                .insert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Dolby Vision81 Settings
    public struct DolbyVision81Settings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// H265 Color Space Settings
    public struct H265ColorSpaceSettings {
        /// Passthrough applies no color space conversion to the output
        public var colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings?
        /// Dolby Vision81 Settings
        public var dolbyVision81Settings: MediaLiveClientTypes.DolbyVision81Settings?
        /// Hdr10 Settings
        public var hdr10Settings: MediaLiveClientTypes.Hdr10Settings?
        /// Rec601 Settings
        public var rec601Settings: MediaLiveClientTypes.Rec601Settings?
        /// Rec709 Settings
        public var rec709Settings: MediaLiveClientTypes.Rec709Settings?

        public init(
            colorSpacePassthroughSettings: MediaLiveClientTypes.ColorSpacePassthroughSettings? = nil,
            dolbyVision81Settings: MediaLiveClientTypes.DolbyVision81Settings? = nil,
            hdr10Settings: MediaLiveClientTypes.Hdr10Settings? = nil,
            rec601Settings: MediaLiveClientTypes.Rec601Settings? = nil,
            rec709Settings: MediaLiveClientTypes.Rec709Settings? = nil
        )
        {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.dolbyVision81Settings = dolbyVision81Settings
            self.hdr10Settings = hdr10Settings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }
    }

}

extension MediaLiveClientTypes {
    /// H265 Filter Settings
    public struct H265FilterSettings {
        /// Bandwidth Reduction Filter Settings
        public var bandwidthReductionFilterSettings: MediaLiveClientTypes.BandwidthReductionFilterSettings?
        /// Temporal Filter Settings
        public var temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings?

        public init(
            bandwidthReductionFilterSettings: MediaLiveClientTypes.BandwidthReductionFilterSettings? = nil,
            temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings? = nil
        )
        {
            self.bandwidthReductionFilterSettings = bandwidthReductionFilterSettings
            self.temporalFilterSettings = temporalFilterSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// H265 Flicker Aq
    public enum H265FlickerAq: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265FlickerAq] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Gop Size Units
    public enum H265GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [H265GopSizeUnits] {
            return [
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Level
    public enum H265Level: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case h265Level1
        case h265Level2
        case h265Level21
        case h265Level3
        case h265Level31
        case h265Level4
        case h265Level41
        case h265Level5
        case h265Level51
        case h265Level52
        case h265Level6
        case h265Level61
        case h265Level62
        case h265LevelAuto
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Level] {
            return [
                .h265Level1,
                .h265Level2,
                .h265Level21,
                .h265Level3,
                .h265Level31,
                .h265Level4,
                .h265Level41,
                .h265Level5,
                .h265Level51,
                .h265Level52,
                .h265Level6,
                .h265Level61,
                .h265Level62,
                .h265LevelAuto
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .h265Level1: return "H265_LEVEL_1"
            case .h265Level2: return "H265_LEVEL_2"
            case .h265Level21: return "H265_LEVEL_2_1"
            case .h265Level3: return "H265_LEVEL_3"
            case .h265Level31: return "H265_LEVEL_3_1"
            case .h265Level4: return "H265_LEVEL_4"
            case .h265Level41: return "H265_LEVEL_4_1"
            case .h265Level5: return "H265_LEVEL_5"
            case .h265Level51: return "H265_LEVEL_5_1"
            case .h265Level52: return "H265_LEVEL_5_2"
            case .h265Level6: return "H265_LEVEL_6"
            case .h265Level61: return "H265_LEVEL_6_1"
            case .h265Level62: return "H265_LEVEL_6_2"
            case .h265LevelAuto: return "H265_LEVEL_AUTO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Look Ahead Rate Control
    public enum H265LookAheadRateControl: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [H265LookAheadRateControl] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Mv Over Picture Boundaries
    public enum H265MvOverPictureBoundaries: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265MvOverPictureBoundaries] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Mv Temporal Predictor
    public enum H265MvTemporalPredictor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265MvTemporalPredictor] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Profile
    public enum H265Profile: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case main
        case main10bit
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Profile] {
            return [
                .main,
                .main10bit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .main: return "MAIN"
            case .main10bit: return "MAIN_10BIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Rate Control Mode
    public enum H265RateControlMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case multiplex
        case qvbr
        case sdkUnknown(Swift.String)

        public static var allCases: [H265RateControlMode] {
            return [
                .cbr,
                .multiplex,
                .qvbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .multiplex: return "MULTIPLEX"
            case .qvbr: return "QVBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Scan Type
    public enum H265ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [H265ScanType] {
            return [
                .interlaced,
                .progressive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Scene Change Detect
    public enum H265SceneChangeDetect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265SceneChangeDetect] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Tier
    public enum H265Tier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case main
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Tier] {
            return [
                .high,
                .main
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .main: return "MAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Tile Padding
    public enum H265TilePadding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case padded
        case sdkUnknown(Swift.String)

        public static var allCases: [H265TilePadding] {
            return [
                .none,
                .padded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .padded: return "PADDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Timecode Insertion Behavior
    public enum H265TimecodeInsertionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case picTimingSei
        case sdkUnknown(Swift.String)

        public static var allCases: [H265TimecodeInsertionBehavior] {
            return [
                .disabled,
                .picTimingSei
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .picTimingSei: return "PIC_TIMING_SEI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// H265 Treeblock Size
    public enum H265TreeblockSize: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case treeSize32x32
        case sdkUnknown(Swift.String)

        public static var allCases: [H265TreeblockSize] {
            return [
                .auto,
                .treeSize32x32
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .treeSize32x32: return "TREE_SIZE_32X32"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// H265 Settings
    public struct H265Settings {
        /// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
        public var adaptiveQuantization: MediaLiveClientTypes.H265AdaptiveQuantization?
        /// Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
        public var alternativeTransferFunction: MediaLiveClientTypes.H265AlternativeTransferFunction?
        /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits.
        public var bufSize: Swift.Int?
        /// Includes colorspace metadata in the output.
        public var colorMetadata: MediaLiveClientTypes.H265ColorMetadata?
        /// Color Space settings
        public var colorSpaceSettings: MediaLiveClientTypes.H265ColorSpaceSettings?
        /// Optional. Both filters reduce bandwidth by removing imperceptible details. You can enable one of the filters. We recommend that you try both filters and observe the results to decide which one to use. The Temporal Filter reduces bandwidth by removing imperceptible details in the content. It combines perceptual filtering and motion compensated temporal filtering (MCTF). It operates independently of the compression level. The Bandwidth Reduction filter is a perceptual filter located within the encoding loop. It adapts to the current compression level to filter imperceptible signals. This filter works only when the resolution is 1080p or lower.
        public var filterSettings: MediaLiveClientTypes.H265FilterSettings?
        /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
        public var flickerAq: MediaLiveClientTypes.H265FlickerAq?
        /// Framerate denominator.
        /// This member is required.
        public var framerateDenominator: Swift.Int?
        /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
        /// This member is required.
        public var framerateNumerator: Swift.Int?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
        public var gopSize: Swift.Double?
        /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
        public var gopSizeUnits: MediaLiveClientTypes.H265GopSizeUnits?
        /// H.265 Level.
        public var level: MediaLiveClientTypes.H265Level?
        /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
        public var lookAheadRateControl: MediaLiveClientTypes.H265LookAheadRateControl?
        /// For QVBR: See the tooltip for Quality level
        public var maxBitrate: Swift.Int?
        /// Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
        public var minIInterval: Swift.Int?
        /// Sets the minimum QP. If you aren't familiar with quantization adjustment, leave the field empty. MediaLive will apply an appropriate value.
        public var minQp: Swift.Int?
        /// If you are setting up the picture as a tile, you must set this to "disabled". In all other configurations, you typically enter "enabled".
        public var mvOverPictureBoundaries: MediaLiveClientTypes.H265MvOverPictureBoundaries?
        /// If you are setting up the picture as a tile, you must set this to "disabled". In other configurations, you typically enter "enabled".
        public var mvTemporalPredictor: MediaLiveClientTypes.H265MvTemporalPredictor?
        /// Pixel Aspect Ratio denominator.
        public var parDenominator: Swift.Int?
        /// Pixel Aspect Ratio numerator.
        public var parNumerator: Swift.Int?
        /// H.265 Profile.
        public var profile: MediaLiveClientTypes.H265Profile?
        /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are:
        ///
        /// * Primary screen: Quality level: 8 to 10. Max bitrate: 4M
        ///
        /// * PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
        ///
        /// * Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
        public var qvbrQualityLevel: Swift.Int?
        /// Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
        public var rateControlMode: MediaLiveClientTypes.H265RateControlMode?
        /// Sets the scan type of the output to progressive or top-field-first interlaced.
        public var scanType: MediaLiveClientTypes.H265ScanType?
        /// Scene change detection.
        public var sceneChangeDetect: MediaLiveClientTypes.H265SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
        public var slices: Swift.Int?
        /// H.265 Tier.
        public var tier: MediaLiveClientTypes.H265Tier?
        /// Set this field to set up the picture as a tile. You must also set tileWidth. The tile height must result in 22 or fewer rows in the frame. The tile width must result in 20 or fewer columns in the frame. And finally, the product of the column count and row count must be 64 of less. If the tile width and height are specified, MediaLive will override the video codec slices field with a value that MediaLive calculates
        public var tileHeight: Swift.Int?
        /// Set to "padded" to force MediaLive to add padding to the frame, to obtain a frame that is a whole multiple of the tile size. If you are setting up the picture as a tile, you must enter "padded". In all other configurations, you typically enter "none".
        public var tilePadding: MediaLiveClientTypes.H265TilePadding?
        /// Set this field to set up the picture as a tile. See tileHeight for more information.
        public var tileWidth: Swift.Int?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?
        /// Determines how timecodes should be inserted into the video elementary stream.
        ///
        /// * 'disabled': Do not include timecodes
        ///
        /// * 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
        public var timecodeInsertion: MediaLiveClientTypes.H265TimecodeInsertionBehavior?
        /// Select the tree block size used for encoding. If you enter "auto", the encoder will pick the best size. If you are setting up the picture as a tile, you must set this to 32x32. In all other configurations, you typically enter "auto".
        public var treeblockSize: MediaLiveClientTypes.H265TreeblockSize?

        public init(
            adaptiveQuantization: MediaLiveClientTypes.H265AdaptiveQuantization? = nil,
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            alternativeTransferFunction: MediaLiveClientTypes.H265AlternativeTransferFunction? = nil,
            bitrate: Swift.Int? = nil,
            bufSize: Swift.Int? = nil,
            colorMetadata: MediaLiveClientTypes.H265ColorMetadata? = nil,
            colorSpaceSettings: MediaLiveClientTypes.H265ColorSpaceSettings? = nil,
            filterSettings: MediaLiveClientTypes.H265FilterSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            flickerAq: MediaLiveClientTypes.H265FlickerAq? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.H265GopSizeUnits? = nil,
            level: MediaLiveClientTypes.H265Level? = nil,
            lookAheadRateControl: MediaLiveClientTypes.H265LookAheadRateControl? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            minQp: Swift.Int? = nil,
            mvOverPictureBoundaries: MediaLiveClientTypes.H265MvOverPictureBoundaries? = nil,
            mvTemporalPredictor: MediaLiveClientTypes.H265MvTemporalPredictor? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            profile: MediaLiveClientTypes.H265Profile? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            rateControlMode: MediaLiveClientTypes.H265RateControlMode? = nil,
            scanType: MediaLiveClientTypes.H265ScanType? = nil,
            sceneChangeDetect: MediaLiveClientTypes.H265SceneChangeDetect? = nil,
            slices: Swift.Int? = nil,
            tier: MediaLiveClientTypes.H265Tier? = nil,
            tileHeight: Swift.Int? = nil,
            tilePadding: MediaLiveClientTypes.H265TilePadding? = nil,
            tileWidth: Swift.Int? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil,
            timecodeInsertion: MediaLiveClientTypes.H265TimecodeInsertionBehavior? = nil,
            treeblockSize: MediaLiveClientTypes.H265TreeblockSize? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.alternativeTransferFunction = alternativeTransferFunction
            self.bitrate = bitrate
            self.bufSize = bufSize
            self.colorMetadata = colorMetadata
            self.colorSpaceSettings = colorSpaceSettings
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.flickerAq = flickerAq
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopClosedCadence = gopClosedCadence
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.minQp = minQp
            self.mvOverPictureBoundaries = mvOverPictureBoundaries
            self.mvTemporalPredictor = mvTemporalPredictor
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.profile = profile
            self.qvbrQualityLevel = qvbrQualityLevel
            self.rateControlMode = rateControlMode
            self.scanType = scanType
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.tier = tier
            self.tileHeight = tileHeight
            self.tilePadding = tilePadding
            self.tileWidth = tileWidth
            self.timecodeBurninSettings = timecodeBurninSettings
            self.timecodeInsertion = timecodeInsertion
            self.treeblockSize = treeblockSize
        }
    }

}

extension MediaLiveClientTypes {

    /// Mpeg2 Adaptive Quantization
    public enum Mpeg2AdaptiveQuantization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case low
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .low,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Mpeg2 Color Metadata
    public enum Mpeg2ColorMetadata: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ColorMetadata] {
            return [
                .ignore,
                .insert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Mpeg2 Color Space
    public enum Mpeg2ColorSpace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ColorSpace] {
            return [
                .auto,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Mpeg2 Display Ratio
    public enum Mpeg2DisplayRatio: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case displayratio16x9
        case displayratio4x3
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2DisplayRatio] {
            return [
                .displayratio16x9,
                .displayratio4x3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .displayratio16x9: return "DISPLAYRATIO16X9"
            case .displayratio4x3: return "DISPLAYRATIO4X3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Filter Settings
    public struct Mpeg2FilterSettings {
        /// Temporal Filter Settings
        public var temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings?

        public init(
            temporalFilterSettings: MediaLiveClientTypes.TemporalFilterSettings? = nil
        )
        {
            self.temporalFilterSettings = temporalFilterSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Mpeg2 Gop Size Units
    public enum Mpeg2GopSizeUnits: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2GopSizeUnits] {
            return [
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Mpeg2 Scan Type
    public enum Mpeg2ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ScanType] {
            return [
                .interlaced,
                .progressive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Mpeg2 Sub Gop Length
    public enum Mpeg2SubGopLength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `dynamic`
        case fixed
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2SubGopLength] {
            return [
                .dynamic,
                .fixed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "DYNAMIC"
            case .fixed: return "FIXED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Mpeg2 Timecode Insertion Behavior
    public enum Mpeg2TimecodeInsertionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case gopTimecode
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2TimecodeInsertionBehavior] {
            return [
                .disabled,
                .gopTimecode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .gopTimecode: return "GOP_TIMECODE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Mpeg2 Settings
    public struct Mpeg2Settings {
        /// Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
        public var adaptiveQuantization: MediaLiveClientTypes.Mpeg2AdaptiveQuantization?
        /// Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
        public var afdSignaling: MediaLiveClientTypes.AfdSignaling?
        /// Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
        public var colorMetadata: MediaLiveClientTypes.Mpeg2ColorMetadata?
        /// Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on "MediaLive Features - Video - color space" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
        public var colorSpace: MediaLiveClientTypes.Mpeg2ColorSpace?
        /// Sets the pixel aspect ratio for the encode.
        public var displayAspectRatio: MediaLiveClientTypes.Mpeg2DisplayRatio?
        /// Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
        public var filterSettings: MediaLiveClientTypes.Mpeg2FilterSettings?
        /// Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
        public var fixedAfd: MediaLiveClientTypes.FixedAfd?
        /// description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
        /// This member is required.
        public var framerateDenominator: Swift.Int?
        /// The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
        /// This member is required.
        public var framerateNumerator: Swift.Int?
        /// MPEG2: default is open GOP.
        public var gopClosedCadence: Swift.Int?
        /// Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
        public var gopNumBFrames: Swift.Int?
        /// Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
        public var gopSize: Swift.Double?
        /// Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
        public var gopSizeUnits: MediaLiveClientTypes.Mpeg2GopSizeUnits?
        /// Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
        public var scanType: MediaLiveClientTypes.Mpeg2ScanType?
        /// Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
        public var subgopLength: MediaLiveClientTypes.Mpeg2SubGopLength?
        /// Timecode burn-in settings
        public var timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings?
        /// Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on "MediaLive Features - Timecode configuration" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
        public var timecodeInsertion: MediaLiveClientTypes.Mpeg2TimecodeInsertionBehavior?

        public init(
            adaptiveQuantization: MediaLiveClientTypes.Mpeg2AdaptiveQuantization? = nil,
            afdSignaling: MediaLiveClientTypes.AfdSignaling? = nil,
            colorMetadata: MediaLiveClientTypes.Mpeg2ColorMetadata? = nil,
            colorSpace: MediaLiveClientTypes.Mpeg2ColorSpace? = nil,
            displayAspectRatio: MediaLiveClientTypes.Mpeg2DisplayRatio? = nil,
            filterSettings: MediaLiveClientTypes.Mpeg2FilterSettings? = nil,
            fixedAfd: MediaLiveClientTypes.FixedAfd? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopNumBFrames: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaLiveClientTypes.Mpeg2GopSizeUnits? = nil,
            scanType: MediaLiveClientTypes.Mpeg2ScanType? = nil,
            subgopLength: MediaLiveClientTypes.Mpeg2SubGopLength? = nil,
            timecodeBurninSettings: MediaLiveClientTypes.TimecodeBurninSettings? = nil,
            timecodeInsertion: MediaLiveClientTypes.Mpeg2TimecodeInsertionBehavior? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.colorMetadata = colorMetadata
            self.colorSpace = colorSpace
            self.displayAspectRatio = displayAspectRatio
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopClosedCadence = gopClosedCadence
            self.gopNumBFrames = gopNumBFrames
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.scanType = scanType
            self.subgopLength = subgopLength
            self.timecodeBurninSettings = timecodeBurninSettings
            self.timecodeInsertion = timecodeInsertion
        }
    }

}

extension MediaLiveClientTypes {
    /// Video Codec Settings
    public struct VideoCodecSettings {
        /// Av1 Settings
        public var av1Settings: MediaLiveClientTypes.Av1Settings?
        /// Frame Capture Settings
        public var frameCaptureSettings: MediaLiveClientTypes.FrameCaptureSettings?
        /// H264 Settings
        public var h264Settings: MediaLiveClientTypes.H264Settings?
        /// H265 Settings
        public var h265Settings: MediaLiveClientTypes.H265Settings?
        /// Mpeg2 Settings
        public var mpeg2Settings: MediaLiveClientTypes.Mpeg2Settings?

        public init(
            av1Settings: MediaLiveClientTypes.Av1Settings? = nil,
            frameCaptureSettings: MediaLiveClientTypes.FrameCaptureSettings? = nil,
            h264Settings: MediaLiveClientTypes.H264Settings? = nil,
            h265Settings: MediaLiveClientTypes.H265Settings? = nil,
            mpeg2Settings: MediaLiveClientTypes.Mpeg2Settings? = nil
        )
        {
            self.av1Settings = av1Settings
            self.frameCaptureSettings = frameCaptureSettings
            self.h264Settings = h264Settings
            self.h265Settings = h265Settings
            self.mpeg2Settings = mpeg2Settings
        }
    }

}

extension MediaLiveClientTypes {

    /// Video Description Respond To Afd
    public enum VideoDescriptionRespondToAfd: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case respond
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoDescriptionRespondToAfd] {
            return [
                .none,
                .passthrough,
                .respond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case .respond: return "RESPOND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Video Description Scaling Behavior
    public enum VideoDescriptionScalingBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case stretchToOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoDescriptionScalingBehavior] {
            return [
                .default,
                .stretchToOutput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .stretchToOutput: return "STRETCH_TO_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Video settings for this stream.
    public struct VideoDescription {
        /// Video codec settings.
        public var codecSettings: MediaLiveClientTypes.VideoCodecSettings?
        /// Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
        public var height: Swift.Int?
        /// The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
        public var respondToAfd: MediaLiveClientTypes.VideoDescriptionRespondToAfd?
        /// STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
        public var scalingBehavior: MediaLiveClientTypes.VideoDescriptionScalingBehavior?
        /// Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
        public var sharpness: Swift.Int?
        /// Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
        public var width: Swift.Int?

        public init(
            codecSettings: MediaLiveClientTypes.VideoCodecSettings? = nil,
            height: Swift.Int? = nil,
            name: Swift.String? = nil,
            respondToAfd: MediaLiveClientTypes.VideoDescriptionRespondToAfd? = nil,
            scalingBehavior: MediaLiveClientTypes.VideoDescriptionScalingBehavior? = nil,
            sharpness: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.codecSettings = codecSettings
            self.height = height
            self.name = name
            self.respondToAfd = respondToAfd
            self.scalingBehavior = scalingBehavior
            self.sharpness = sharpness
            self.width = width
        }
    }

}

extension MediaLiveClientTypes {

    /// The HTTP Accept header. Indicates the requested type fothe thumbnail.
    public enum AcceptHeader: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case imageJpeg
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceptHeader] {
            return [
                .imageJpeg
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .imageJpeg: return "image/jpeg"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Placeholder documentation for BadGatewayException
public struct BadGatewayException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadGatewayException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for BadRequestException
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for ConflictException
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for ForbiddenException
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for GatewayTimeoutException
public struct GatewayTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GatewayTimeoutException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for InternalServerErrorException
public struct InternalServerErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for NotFoundException
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for TooManyRequestsException
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Placeholder documentation for __string
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Placeholder documentation for UnprocessableEntityException
public struct UnprocessableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error message.
        public internal(set) var message: Swift.String? = nil
        /// A collection of validation error responses.
        public internal(set) var validationErrors: [MediaLiveClientTypes.ValidationError]? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnprocessableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        validationErrors: [MediaLiveClientTypes.ValidationError]? = nil
    )
    {
        self.properties.message = message
        self.properties.validationErrors = validationErrors
    }
}

/// Placeholder documentation for AcceptInputDeviceTransferRequest
public struct AcceptInputDeviceTransferInput {
    /// The unique ID of the input device to accept. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for AcceptInputDeviceTransferResponse
public struct AcceptInputDeviceTransferOutput {

    public init() { }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for AccountConfiguration
    public struct AccountConfiguration {
        /// Specifies the KMS key to use for all features that use key encryption. Specify the ARN of a KMS key that you have created. Or leave blank to use the key that MediaLive creates and manages for you.
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension MediaLiveClientTypes {
    /// Elemental anywhere settings
    public struct AnywhereSettings {
        /// The ID of the channel placement group for the channel.
        public var channelPlacementGroupId: Swift.String?
        /// The ID of the cluster for the channel.
        public var clusterId: Swift.String?

        public init(
            channelPlacementGroupId: Swift.String? = nil,
            clusterId: Swift.String? = nil
        )
        {
            self.channelPlacementGroupId = channelPlacementGroupId
            self.clusterId = clusterId
        }
    }

}

extension MediaLiveClientTypes {

    /// Avail Blanking State
    public enum AvailBlankingState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AvailBlankingState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Avail Blanking
    public struct AvailBlanking {
        /// Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public var availBlankingImage: MediaLiveClientTypes.InputLocation?
        /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        public var state: MediaLiveClientTypes.AvailBlankingState?

        public init(
            availBlankingImage: MediaLiveClientTypes.InputLocation? = nil,
            state: MediaLiveClientTypes.AvailBlankingState? = nil
        )
        {
            self.availBlankingImage = availBlankingImage
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {
    /// Esam
    public struct Esam {
        /// Sent as acquisitionPointIdentity to identify the MediaLive channel to the POIS.
        /// This member is required.
        public var acquisitionPointId: Swift.String?
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public var adAvailOffset: Swift.Int?
        /// Documentation update needed
        public var passwordParam: Swift.String?
        /// The URL of the signal conditioner endpoint on the Placement Opportunity Information System (POIS). MediaLive sends SignalProcessingEvents here when SCTE-35 messages are read.
        /// This member is required.
        public var poisEndpoint: Swift.String?
        /// Documentation update needed
        public var username: Swift.String?
        /// Optional data sent as zoneIdentity to identify the MediaLive channel to the POIS.
        public var zoneIdentity: Swift.String?

        public init(
            acquisitionPointId: Swift.String? = nil,
            adAvailOffset: Swift.Int? = nil,
            passwordParam: Swift.String? = nil,
            poisEndpoint: Swift.String? = nil,
            username: Swift.String? = nil,
            zoneIdentity: Swift.String? = nil
        )
        {
            self.acquisitionPointId = acquisitionPointId
            self.adAvailOffset = adAvailOffset
            self.passwordParam = passwordParam
            self.poisEndpoint = poisEndpoint
            self.username = username
            self.zoneIdentity = zoneIdentity
        }
    }

}

extension MediaLiveClientTypes {

    /// Scte35 Splice Insert No Regional Blackout Behavior
    public enum Scte35SpliceInsertNoRegionalBlackoutBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SpliceInsertNoRegionalBlackoutBehavior] {
            return [
                .follow,
                .ignore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Scte35 Splice Insert Web Delivery Allowed Behavior
    public enum Scte35SpliceInsertWebDeliveryAllowedBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SpliceInsertWebDeliveryAllowedBehavior] {
            return [
                .follow,
                .ignore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Typical configuration that applies breaks on splice inserts in addition to time signal placement opportunities, breaks, and advertisements.
    public struct Scte35SpliceInsert {
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public var adAvailOffset: Swift.Int?
        /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35SpliceInsertNoRegionalBlackoutBehavior?
        /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35SpliceInsertWebDeliveryAllowedBehavior?

        public init(
            adAvailOffset: Swift.Int? = nil,
            noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35SpliceInsertNoRegionalBlackoutBehavior? = nil,
            webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35SpliceInsertWebDeliveryAllowedBehavior? = nil
        )
        {
            self.adAvailOffset = adAvailOffset
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }
    }

}

extension MediaLiveClientTypes {

    /// Scte35 Apos No Regional Blackout Behavior
    public enum Scte35AposNoRegionalBlackoutBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35AposNoRegionalBlackoutBehavior] {
            return [
                .follow,
                .ignore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Scte35 Apos Web Delivery Allowed Behavior
    public enum Scte35AposWebDeliveryAllowedBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35AposWebDeliveryAllowedBehavior] {
            return [
                .follow,
                .ignore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Atypical configuration that applies segment breaks only on SCTE-35 time signal placement opportunities and breaks.
    public struct Scte35TimeSignalApos {
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public var adAvailOffset: Swift.Int?
        /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35AposNoRegionalBlackoutBehavior?
        /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public var webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35AposWebDeliveryAllowedBehavior?

        public init(
            adAvailOffset: Swift.Int? = nil,
            noRegionalBlackoutFlag: MediaLiveClientTypes.Scte35AposNoRegionalBlackoutBehavior? = nil,
            webDeliveryAllowedFlag: MediaLiveClientTypes.Scte35AposWebDeliveryAllowedBehavior? = nil
        )
        {
            self.adAvailOffset = adAvailOffset
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }
    }

}

extension MediaLiveClientTypes {
    /// Avail Settings
    public struct AvailSettings {
        /// Esam
        public var esam: MediaLiveClientTypes.Esam?
        /// Typical configuration that applies breaks on splice inserts in addition to time signal placement opportunities, breaks, and advertisements.
        public var scte35SpliceInsert: MediaLiveClientTypes.Scte35SpliceInsert?
        /// Atypical configuration that applies segment breaks only on SCTE-35 time signal placement opportunities and breaks.
        public var scte35TimeSignalApos: MediaLiveClientTypes.Scte35TimeSignalApos?

        public init(
            esam: MediaLiveClientTypes.Esam? = nil,
            scte35SpliceInsert: MediaLiveClientTypes.Scte35SpliceInsert? = nil,
            scte35TimeSignalApos: MediaLiveClientTypes.Scte35TimeSignalApos? = nil
        )
        {
            self.esam = esam
            self.scte35SpliceInsert = scte35SpliceInsert
            self.scte35TimeSignalApos = scte35TimeSignalApos
        }
    }

}

extension MediaLiveClientTypes {

    /// Scte35 Segmentation Scope
    public enum Scte35SegmentationScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allOutputGroups
        case scte35EnabledOutputGroups
        case sdkUnknown(Swift.String)

        public static var allCases: [Scte35SegmentationScope] {
            return [
                .allOutputGroups,
                .scte35EnabledOutputGroups
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allOutputGroups: return "ALL_OUTPUT_GROUPS"
            case .scte35EnabledOutputGroups: return "SCTE35_ENABLED_OUTPUT_GROUPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Avail Configuration
    public struct AvailConfiguration {
        /// Controls how SCTE-35 messages create cues. Splice Insert mode treats all segmentation signals traditionally. With Time Signal APOS mode only Time Signal Placement Opportunity and Break messages create segment breaks. With ESAM mode, signals are forwarded to an ESAM server for possible update.
        public var availSettings: MediaLiveClientTypes.AvailSettings?
        /// Configures whether SCTE 35 passthrough triggers segment breaks in all output groups that use segmented outputs. Insertion of a SCTE 35 message typically results in a segment break, in addition to the regular cadence of breaks. The segment breaks appear in video outputs, audio outputs, and captions outputs (if any). ALL_OUTPUT_GROUPS: Default. Insert the segment break in in all output groups that have segmented outputs. This is the legacy behavior. SCTE35_ENABLED_OUTPUT_GROUPS: Insert the segment break only in output groups that have SCTE 35 passthrough enabled. This is the recommended value, because it reduces unnecessary segment breaks.
        public var scte35SegmentationScope: MediaLiveClientTypes.Scte35SegmentationScope?

        public init(
            availSettings: MediaLiveClientTypes.AvailSettings? = nil,
            scte35SegmentationScope: MediaLiveClientTypes.Scte35SegmentationScope? = nil
        )
        {
            self.availSettings = availSettings
            self.scte35SegmentationScope = scte35SegmentationScope
        }
    }

}

/// A request to delete resources
public struct BatchDeleteInput {
    /// List of channel IDs
    public var channelIds: [Swift.String]?
    /// List of input IDs
    public var inputIds: [Swift.String]?
    /// List of input security group IDs
    public var inputSecurityGroupIds: [Swift.String]?
    /// List of multiplex IDs
    public var multiplexIds: [Swift.String]?

    public init(
        channelIds: [Swift.String]? = nil,
        inputIds: [Swift.String]? = nil,
        inputSecurityGroupIds: [Swift.String]? = nil,
        multiplexIds: [Swift.String]? = nil
    )
    {
        self.channelIds = channelIds
        self.inputIds = inputIds
        self.inputSecurityGroupIds = inputSecurityGroupIds
        self.multiplexIds = multiplexIds
    }
}

/// Placeholder documentation for BatchDeleteResponse
public struct BatchDeleteOutput {
    /// List of failed operations
    public var failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    /// List of successful operations
    public var successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?

    public init(
        failed: [MediaLiveClientTypes.BatchFailedResultModel]? = nil,
        successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

extension MediaLiveClientTypes {
    /// A list of schedule actions to create (in a request) or that have been created (in a response).
    public struct BatchScheduleActionCreateRequest {
        /// A list of schedule actions to create.
        /// This member is required.
        public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

        public init(
            scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
        )
        {
            self.scheduleActions = scheduleActions
        }
    }

}

extension MediaLiveClientTypes {
    /// List of actions that have been created in the schedule.
    public struct BatchScheduleActionCreateResult {
        /// List of actions that have been created in the schedule.
        /// This member is required.
        public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

        public init(
            scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
        )
        {
            self.scheduleActions = scheduleActions
        }
    }

}

extension MediaLiveClientTypes {
    /// A list of schedule actions to delete.
    public struct BatchScheduleActionDeleteRequest {
        /// A list of schedule actions to delete.
        /// This member is required.
        public var actionNames: [Swift.String]?

        public init(
            actionNames: [Swift.String]? = nil
        )
        {
            self.actionNames = actionNames
        }
    }

}

extension MediaLiveClientTypes {
    /// List of actions that have been deleted from the schedule.
    public struct BatchScheduleActionDeleteResult {
        /// List of actions that have been deleted from the schedule.
        /// This member is required.
        public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

        public init(
            scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
        )
        {
            self.scheduleActions = scheduleActions
        }
    }

}

/// A request to start resources
public struct BatchStartInput {
    /// List of channel IDs
    public var channelIds: [Swift.String]?
    /// List of multiplex IDs
    public var multiplexIds: [Swift.String]?

    public init(
        channelIds: [Swift.String]? = nil,
        multiplexIds: [Swift.String]? = nil
    )
    {
        self.channelIds = channelIds
        self.multiplexIds = multiplexIds
    }
}

/// Placeholder documentation for BatchStartResponse
public struct BatchStartOutput {
    /// List of failed operations
    public var failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    /// List of successful operations
    public var successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?

    public init(
        failed: [MediaLiveClientTypes.BatchFailedResultModel]? = nil,
        successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

/// A request to stop resources
public struct BatchStopInput {
    /// List of channel IDs
    public var channelIds: [Swift.String]?
    /// List of multiplex IDs
    public var multiplexIds: [Swift.String]?

    public init(
        channelIds: [Swift.String]? = nil,
        multiplexIds: [Swift.String]? = nil
    )
    {
        self.channelIds = channelIds
        self.multiplexIds = multiplexIds
    }
}

/// Placeholder documentation for BatchStopResponse
public struct BatchStopOutput {
    /// List of failed operations
    public var failed: [MediaLiveClientTypes.BatchFailedResultModel]?
    /// List of successful operations
    public var successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]?

    public init(
        failed: [MediaLiveClientTypes.BatchFailedResultModel]? = nil,
        successful: [MediaLiveClientTypes.BatchSuccessfulResultModel]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

/// List of actions to create and list of actions to delete.
public struct BatchUpdateScheduleInput {
    /// Id of the channel whose schedule is being updated.
    /// This member is required.
    public var channelId: Swift.String?
    /// Schedule actions to create in the schedule.
    public var creates: MediaLiveClientTypes.BatchScheduleActionCreateRequest?
    /// Schedule actions to delete from the schedule.
    public var deletes: MediaLiveClientTypes.BatchScheduleActionDeleteRequest?

    public init(
        channelId: Swift.String? = nil,
        creates: MediaLiveClientTypes.BatchScheduleActionCreateRequest? = nil,
        deletes: MediaLiveClientTypes.BatchScheduleActionDeleteRequest? = nil
    )
    {
        self.channelId = channelId
        self.creates = creates
        self.deletes = deletes
    }
}

/// Placeholder documentation for BatchUpdateScheduleResponse
public struct BatchUpdateScheduleOutput {
    /// Schedule actions created in the schedule.
    public var creates: MediaLiveClientTypes.BatchScheduleActionCreateResult?
    /// Schedule actions deleted from the schedule.
    public var deletes: MediaLiveClientTypes.BatchScheduleActionDeleteResult?

    public init(
        creates: MediaLiveClientTypes.BatchScheduleActionCreateResult? = nil,
        deletes: MediaLiveClientTypes.BatchScheduleActionDeleteResult? = nil
    )
    {
        self.creates = creates
        self.deletes = deletes
    }
}

extension MediaLiveClientTypes {

    /// Blackout Slate Network End Blackout
    public enum BlackoutSlateNetworkEndBlackout: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [BlackoutSlateNetworkEndBlackout] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Blackout Slate State
    public enum BlackoutSlateState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [BlackoutSlateState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Blackout Slate
    public struct BlackoutSlate {
        /// Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public var blackoutSlateImage: MediaLiveClientTypes.InputLocation?
        /// Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
        public var networkEndBlackout: MediaLiveClientTypes.BlackoutSlateNetworkEndBlackout?
        /// Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
        public var networkEndBlackoutImage: MediaLiveClientTypes.InputLocation?
        /// Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
        public var networkId: Swift.String?
        /// When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        public var state: MediaLiveClientTypes.BlackoutSlateState?

        public init(
            blackoutSlateImage: MediaLiveClientTypes.InputLocation? = nil,
            networkEndBlackout: MediaLiveClientTypes.BlackoutSlateNetworkEndBlackout? = nil,
            networkEndBlackoutImage: MediaLiveClientTypes.InputLocation? = nil,
            networkId: Swift.String? = nil,
            state: MediaLiveClientTypes.BlackoutSlateState? = nil
        )
        {
            self.blackoutSlateImage = blackoutSlateImage
            self.networkEndBlackout = networkEndBlackout
            self.networkEndBlackoutImage = networkEndBlackoutImage
            self.networkId = networkId
            self.state = state
        }
    }

}

/// Placeholder documentation for CancelInputDeviceTransferRequest
public struct CancelInputDeviceTransferInput {
    /// The unique ID of the input device to cancel. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for CancelInputDeviceTransferResponse
public struct CancelInputDeviceTransferOutput {

    public init() { }
}

extension MediaLiveClientTypes {
    /// Property of encoderSettings. Controls color conversion when you are using 3D LUT files to perform color conversion on video.
    public struct ColorCorrectionSettings {
        /// An array of colorCorrections that applies when you are using 3D LUT files to perform color conversion on video. Each colorCorrection contains one 3D LUT file (that defines the color mapping for converting an input color space to an output color space), and the input/output combination that this 3D LUT file applies to. MediaLive reads the color space in the input metadata, determines the color space that you have specified for the output, and finds and uses the LUT file that applies to this combination.
        /// This member is required.
        public var globalColorCorrections: [MediaLiveClientTypes.ColorCorrection]?

        public init(
            globalColorCorrections: [MediaLiveClientTypes.ColorCorrection]? = nil
        )
        {
            self.globalColorCorrections = globalColorCorrections
        }
    }

}

extension MediaLiveClientTypes {

    /// Feature Activations Input Prepare Schedule Actions
    public enum FeatureActivationsInputPrepareScheduleActions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureActivationsInputPrepareScheduleActions] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Feature Activations Output Static Image Overlay Schedule Actions
    public enum FeatureActivationsOutputStaticImageOverlayScheduleActions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureActivationsOutputStaticImageOverlayScheduleActions] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Feature Activations
    public struct FeatureActivations {
        /// Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
        public var inputPrepareScheduleActions: MediaLiveClientTypes.FeatureActivationsInputPrepareScheduleActions?
        /// Enables the output static image overlay feature. Enabling this feature allows you to send channel schedule updates to display/clear/modify image overlays on an output-by-output bases.
        public var outputStaticImageOverlayScheduleActions: MediaLiveClientTypes.FeatureActivationsOutputStaticImageOverlayScheduleActions?

        public init(
            inputPrepareScheduleActions: MediaLiveClientTypes.FeatureActivationsInputPrepareScheduleActions? = nil,
            outputStaticImageOverlayScheduleActions: MediaLiveClientTypes.FeatureActivationsOutputStaticImageOverlayScheduleActions? = nil
        )
        {
            self.inputPrepareScheduleActions = inputPrepareScheduleActions
            self.outputStaticImageOverlayScheduleActions = outputStaticImageOverlayScheduleActions
        }
    }

}

extension MediaLiveClientTypes {

    /// Global Configuration Input End Action
    public enum GlobalConfigurationInputEndAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case switchAndLoopInputs
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationInputEndAction] {
            return [
                .none,
                .switchAndLoopInputs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .switchAndLoopInputs: return "SWITCH_AND_LOOP_INPUTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Input Loss Image Type
    public enum InputLossImageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case color
        case slate
        case sdkUnknown(Swift.String)

        public static var allCases: [InputLossImageType] {
            return [
                .color,
                .slate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .color: return "COLOR"
            case .slate: return "SLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Input Loss Behavior
    public struct InputLossBehavior {
        /// Documentation update needed
        public var blackFrameMsec: Swift.Int?
        /// When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
        public var inputLossImageColor: Swift.String?
        /// When input loss image type is "slate" these fields specify the parameters for accessing the slate.
        public var inputLossImageSlate: MediaLiveClientTypes.InputLocation?
        /// Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
        public var inputLossImageType: MediaLiveClientTypes.InputLossImageType?
        /// Documentation update needed
        public var repeatFrameMsec: Swift.Int?

        public init(
            blackFrameMsec: Swift.Int? = nil,
            inputLossImageColor: Swift.String? = nil,
            inputLossImageSlate: MediaLiveClientTypes.InputLocation? = nil,
            inputLossImageType: MediaLiveClientTypes.InputLossImageType? = nil,
            repeatFrameMsec: Swift.Int? = nil
        )
        {
            self.blackFrameMsec = blackFrameMsec
            self.inputLossImageColor = inputLossImageColor
            self.inputLossImageSlate = inputLossImageSlate
            self.inputLossImageType = inputLossImageType
            self.repeatFrameMsec = repeatFrameMsec
        }
    }

}

extension MediaLiveClientTypes {

    /// Global Configuration Output Locking Mode
    public enum GlobalConfigurationOutputLockingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case epochLocking
        case pipelineLocking
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationOutputLockingMode] {
            return [
                .epochLocking,
                .pipelineLocking
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .epochLocking: return "EPOCH_LOCKING"
            case .pipelineLocking: return "PIPELINE_LOCKING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Epoch Locking Settings
    public struct EpochLockingSettings {
        /// Optional. Enter a value here to use a custom epoch, instead of the standard epoch (which started at 1970-01-01T00:00:00 UTC). Specify the start time of the custom epoch, in YYYY-MM-DDTHH:MM:SS in UTC. The time must be 2000-01-01T00:00:00 or later. Always set the MM:SS portion to 00:00.
        public var customEpoch: Swift.String?
        /// Optional. Enter a time for the jam sync. The default is midnight UTC. When epoch locking is enabled, MediaLive performs a daily jam sync on every output encode to ensure timecodes don’t diverge from the wall clock. The jam sync applies only to encodes with frame rate of 29.97 or 59.94 FPS. To override, enter a time in HH:MM:SS in UTC. Always set the MM:SS portion to 00:00.
        public var jamSyncTime: Swift.String?

        public init(
            customEpoch: Swift.String? = nil,
            jamSyncTime: Swift.String? = nil
        )
        {
            self.customEpoch = customEpoch
            self.jamSyncTime = jamSyncTime
        }
    }

}

extension MediaLiveClientTypes {
    /// Pipeline Locking Settings
    public struct PipelineLockingSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Output Locking Settings
    public struct OutputLockingSettings {
        /// Epoch Locking Settings
        public var epochLockingSettings: MediaLiveClientTypes.EpochLockingSettings?
        /// Pipeline Locking Settings
        public var pipelineLockingSettings: MediaLiveClientTypes.PipelineLockingSettings?

        public init(
            epochLockingSettings: MediaLiveClientTypes.EpochLockingSettings? = nil,
            pipelineLockingSettings: MediaLiveClientTypes.PipelineLockingSettings? = nil
        )
        {
            self.epochLockingSettings = epochLockingSettings
            self.pipelineLockingSettings = pipelineLockingSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// Global Configuration Output Timing Source
    public enum GlobalConfigurationOutputTimingSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inputClock
        case systemClock
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationOutputTimingSource] {
            return [
                .inputClock,
                .systemClock
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inputClock: return "INPUT_CLOCK"
            case .systemClock: return "SYSTEM_CLOCK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {

    /// Global Configuration Low Framerate Inputs
    public enum GlobalConfigurationLowFramerateInputs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalConfigurationLowFramerateInputs] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Global Configuration
    public struct GlobalConfiguration {
        /// Value to set the initial audio gain for the Live Event.
        public var initialAudioGain: Swift.Int?
        /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
        public var inputEndAction: MediaLiveClientTypes.GlobalConfigurationInputEndAction?
        /// Settings for system actions when input is lost.
        public var inputLossBehavior: MediaLiveClientTypes.InputLossBehavior?
        /// Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
        public var outputLockingMode: MediaLiveClientTypes.GlobalConfigurationOutputLockingMode?
        /// Advanced output locking settings
        public var outputLockingSettings: MediaLiveClientTypes.OutputLockingSettings?
        /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
        public var outputTimingSource: MediaLiveClientTypes.GlobalConfigurationOutputTimingSource?
        /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        public var supportLowFramerateInputs: MediaLiveClientTypes.GlobalConfigurationLowFramerateInputs?

        public init(
            initialAudioGain: Swift.Int? = nil,
            inputEndAction: MediaLiveClientTypes.GlobalConfigurationInputEndAction? = nil,
            inputLossBehavior: MediaLiveClientTypes.InputLossBehavior? = nil,
            outputLockingMode: MediaLiveClientTypes.GlobalConfigurationOutputLockingMode? = nil,
            outputLockingSettings: MediaLiveClientTypes.OutputLockingSettings? = nil,
            outputTimingSource: MediaLiveClientTypes.GlobalConfigurationOutputTimingSource? = nil,
            supportLowFramerateInputs: MediaLiveClientTypes.GlobalConfigurationLowFramerateInputs? = nil
        )
        {
            self.initialAudioGain = initialAudioGain
            self.inputEndAction = inputEndAction
            self.inputLossBehavior = inputLossBehavior
            self.outputLockingMode = outputLockingMode
            self.outputLockingSettings = outputLockingSettings
            self.outputTimingSource = outputTimingSource
            self.supportLowFramerateInputs = supportLowFramerateInputs
        }
    }

}

extension MediaLiveClientTypes {

    /// Motion Graphics Insertion
    public enum MotionGraphicsInsertion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MotionGraphicsInsertion] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Html Motion Graphics Settings
    public struct HtmlMotionGraphicsSettings {

        public init() { }
    }

}

extension MediaLiveClientTypes {
    /// Motion Graphics Settings
    public struct MotionGraphicsSettings {
        /// Html Motion Graphics Settings
        public var htmlMotionGraphicsSettings: MediaLiveClientTypes.HtmlMotionGraphicsSettings?

        public init(
            htmlMotionGraphicsSettings: MediaLiveClientTypes.HtmlMotionGraphicsSettings? = nil
        )
        {
            self.htmlMotionGraphicsSettings = htmlMotionGraphicsSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Motion Graphics Configuration
    public struct MotionGraphicsConfiguration {
        /// Motion Graphics Insertion
        public var motionGraphicsInsertion: MediaLiveClientTypes.MotionGraphicsInsertion?
        /// Motion Graphics Settings
        /// This member is required.
        public var motionGraphicsSettings: MediaLiveClientTypes.MotionGraphicsSettings?

        public init(
            motionGraphicsInsertion: MediaLiveClientTypes.MotionGraphicsInsertion? = nil,
            motionGraphicsSettings: MediaLiveClientTypes.MotionGraphicsSettings? = nil
        )
        {
            self.motionGraphicsInsertion = motionGraphicsInsertion
            self.motionGraphicsSettings = motionGraphicsSettings
        }
    }

}

extension MediaLiveClientTypes {

    /// State of Nielsen PCM to ID3 tagging
    public enum NielsenPcmToId3TaggingState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenPcmToId3TaggingState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Nielsen Configuration
    public struct NielsenConfiguration {
        /// Enter the Distributor ID assigned to your organization by Nielsen.
        public var distributorId: Swift.String?
        /// Enables Nielsen PCM to ID3 tagging
        public var nielsenPcmToId3Tagging: MediaLiveClientTypes.NielsenPcmToId3TaggingState?

        public init(
            distributorId: Swift.String? = nil,
            nielsenPcmToId3Tagging: MediaLiveClientTypes.NielsenPcmToId3TaggingState? = nil
        )
        {
            self.distributorId = distributorId
            self.nielsenPcmToId3Tagging = nielsenPcmToId3Tagging
        }
    }

}

extension MediaLiveClientTypes {

    /// Thumbnail State
    public enum ThumbnailState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ThumbnailState] {
            return [
                .auto,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Thumbnail Configuration
    public struct ThumbnailConfiguration {
        /// Enables the thumbnail feature. The feature generates thumbnails of the incoming video in each pipeline in the channel. AUTO turns the feature on, DISABLE turns the feature off.
        /// This member is required.
        public var state: MediaLiveClientTypes.ThumbnailState?

        public init(
            state: MediaLiveClientTypes.ThumbnailState? = nil
        )
        {
            self.state = state
        }
    }

}

extension MediaLiveClientTypes {

    /// Timecode Config Source
    public enum TimecodeConfigSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case embedded
        case systemclock
        case zerobased
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeConfigSource] {
            return [
                .embedded,
                .systemclock,
                .zerobased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .embedded: return "EMBEDDED"
            case .systemclock: return "SYSTEMCLOCK"
            case .zerobased: return "ZEROBASED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Timecode Config
    public struct TimecodeConfig {
        /// Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
        /// This member is required.
        public var source: MediaLiveClientTypes.TimecodeConfigSource?
        /// Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        public var syncThreshold: Swift.Int?

        public init(
            source: MediaLiveClientTypes.TimecodeConfigSource? = nil,
            syncThreshold: Swift.Int? = nil
        )
        {
            self.source = source
            self.syncThreshold = syncThreshold
        }
    }

}

extension MediaLiveClientTypes {
    /// Encoder Settings
    public struct EncoderSettings {
        /// Placeholder documentation for __listOfAudioDescription
        /// This member is required.
        public var audioDescriptions: [MediaLiveClientTypes.AudioDescription]?
        /// Settings for ad avail blanking.
        public var availBlanking: MediaLiveClientTypes.AvailBlanking?
        /// Event-wide configuration settings for ad avail insertion.
        public var availConfiguration: MediaLiveClientTypes.AvailConfiguration?
        /// Settings for blackout slate.
        public var blackoutSlate: MediaLiveClientTypes.BlackoutSlate?
        /// Settings for caption decriptions
        public var captionDescriptions: [MediaLiveClientTypes.CaptionDescription]?
        /// Color Correction Settings
        public var colorCorrectionSettings: MediaLiveClientTypes.ColorCorrectionSettings?
        /// Feature Activations
        public var featureActivations: MediaLiveClientTypes.FeatureActivations?
        /// Configuration settings that apply to the event as a whole.
        public var globalConfiguration: MediaLiveClientTypes.GlobalConfiguration?
        /// Settings for motion graphics.
        public var motionGraphicsConfiguration: MediaLiveClientTypes.MotionGraphicsConfiguration?
        /// Nielsen configuration settings.
        public var nielsenConfiguration: MediaLiveClientTypes.NielsenConfiguration?
        /// Placeholder documentation for __listOfOutputGroup
        /// This member is required.
        public var outputGroups: [MediaLiveClientTypes.OutputGroup]?
        /// Thumbnail configuration settings.
        public var thumbnailConfiguration: MediaLiveClientTypes.ThumbnailConfiguration?
        /// Contains settings used to acquire and adjust timecode information from inputs.
        /// This member is required.
        public var timecodeConfig: MediaLiveClientTypes.TimecodeConfig?
        /// Placeholder documentation for __listOfVideoDescription
        /// This member is required.
        public var videoDescriptions: [MediaLiveClientTypes.VideoDescription]?

        public init(
            audioDescriptions: [MediaLiveClientTypes.AudioDescription]? = nil,
            availBlanking: MediaLiveClientTypes.AvailBlanking? = nil,
            availConfiguration: MediaLiveClientTypes.AvailConfiguration? = nil,
            blackoutSlate: MediaLiveClientTypes.BlackoutSlate? = nil,
            captionDescriptions: [MediaLiveClientTypes.CaptionDescription]? = nil,
            colorCorrectionSettings: MediaLiveClientTypes.ColorCorrectionSettings? = nil,
            featureActivations: MediaLiveClientTypes.FeatureActivations? = nil,
            globalConfiguration: MediaLiveClientTypes.GlobalConfiguration? = nil,
            motionGraphicsConfiguration: MediaLiveClientTypes.MotionGraphicsConfiguration? = nil,
            nielsenConfiguration: MediaLiveClientTypes.NielsenConfiguration? = nil,
            outputGroups: [MediaLiveClientTypes.OutputGroup]? = nil,
            thumbnailConfiguration: MediaLiveClientTypes.ThumbnailConfiguration? = nil,
            timecodeConfig: MediaLiveClientTypes.TimecodeConfig? = nil,
            videoDescriptions: [MediaLiveClientTypes.VideoDescription]? = nil
        )
        {
            self.audioDescriptions = audioDescriptions
            self.availBlanking = availBlanking
            self.availConfiguration = availConfiguration
            self.blackoutSlate = blackoutSlate
            self.captionDescriptions = captionDescriptions
            self.colorCorrectionSettings = colorCorrectionSettings
            self.featureActivations = featureActivations
            self.globalConfiguration = globalConfiguration
            self.motionGraphicsConfiguration = motionGraphicsConfiguration
            self.nielsenConfiguration = nielsenConfiguration
            self.outputGroups = outputGroups
            self.thumbnailConfiguration = thumbnailConfiguration
            self.timecodeConfig = timecodeConfig
            self.videoDescriptions = videoDescriptions
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for Channel
    public struct Channel {
        /// Anywhere settings for this channel.
        public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
        /// The unique arn of the channel.
        public var arn: Swift.String?
        /// Specification of CDI inputs for this channel
        public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
        public var destinations: [MediaLiveClientTypes.OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
        /// Encoder Settings
        public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
        /// The unique id of the channel.
        public var id: Swift.String?
        /// List of input attachments for channel.
        public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
        /// Specification of network and file inputs for this channel
        public var inputSpecification: MediaLiveClientTypes.InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public var logLevel: MediaLiveClientTypes.LogLevel?
        /// Maintenance settings for this channel.
        public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
        /// The name of the channel. (user-mutable)
        public var name: Swift.String?
        /// Runtime details for the pipelines of a running channel.
        public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public var roleArn: Swift.String?
        /// Placeholder documentation for ChannelState
        public var state: MediaLiveClientTypes.ChannelState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?
        /// Settings for VPC output
        public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

        public init(
            anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
            arn: Swift.String? = nil,
            cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
            egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
            encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
            id: Swift.String? = nil,
            inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
            inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
            logLevel: MediaLiveClientTypes.LogLevel? = nil,
            maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
            name: Swift.String? = nil,
            pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            state: MediaLiveClientTypes.ChannelState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
        )
        {
            self.anywhereSettings = anywhereSettings
            self.arn = arn
            self.cdiInputSpecification = cdiInputSpecification
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.maintenance = maintenance
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
            self.vpc = vpc
        }
    }

}

/// A request to claim an AWS Elemental device that you have purchased from a third-party vendor.
public struct ClaimDeviceInput {
    /// The id of the device you want to claim.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

/// Placeholder documentation for ClaimDeviceResponse
public struct ClaimDeviceOutput {

    public init() { }
}

extension MediaLiveClientTypes {
    /// Used in a CreateClusterRequest.
    public struct ClusterNetworkSettingsCreateRequest {
        /// Specify one network interface as the default route for traffic to and from the Node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
        public var defaultRoute: Swift.String?
        /// An array of interfaceMapping objects for this Cluster. You must create a mapping for node interfaces that you plan to use for encoding traffic. You typically don't create a mapping for the management interface. You define this mapping in the Cluster so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
        public var interfaceMappings: [MediaLiveClientTypes.InterfaceMappingCreateRequest]?

        public init(
            defaultRoute: Swift.String? = nil,
            interfaceMappings: [MediaLiveClientTypes.InterfaceMappingCreateRequest]? = nil
        )
        {
            self.defaultRoute = defaultRoute
            self.interfaceMappings = interfaceMappings
        }
    }

}

extension MediaLiveClientTypes {
    /// Placeholder documentation for ClusterNetworkSettingsUpdateRequest
    public struct ClusterNetworkSettingsUpdateRequest {
        /// Include this parameter only if you want to change the default route for the Cluster. Specify one network interface as the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
        public var defaultRoute: Swift.String?
        /// An array of interfaceMapping objects for this Cluster. Include this parameter only if you want to change the interface mappings for the Cluster. Typically, you change the interface mappings only to fix an error you made when creating the mapping. In an update request, make sure that you enter the entire set of mappings again, not just the mappings that you want to add or change. You define this mapping so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
        public var interfaceMappings: [MediaLiveClientTypes.InterfaceMappingUpdateRequest]?

        public init(
            defaultRoute: Swift.String? = nil,
            interfaceMappings: [MediaLiveClientTypes.InterfaceMappingUpdateRequest]? = nil
        )
        {
            self.defaultRoute = defaultRoute
            self.interfaceMappings = interfaceMappings
        }
    }

}

extension MediaLiveClientTypes {

    /// Specifies the media type of the thumbnail.
    public enum ContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case imageJpeg
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .imageJpeg
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .imageJpeg: return "image/jpeg"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MaintenanceCreateSettings
    public struct MaintenanceCreateSettings {
        /// Choose one day of the week for maintenance. The chosen day is used for all future maintenance windows.
        public var maintenanceDay: MediaLiveClientTypes.MaintenanceDay?
        /// Choose the hour that maintenance will start. The chosen time is used for all future maintenance windows.
        public var maintenanceStartTime: Swift.String?

        public init(
            maintenanceDay: MediaLiveClientTypes.MaintenanceDay? = nil,
            maintenanceStartTime: Swift.String? = nil
        )
        {
            self.maintenanceDay = maintenanceDay
            self.maintenanceStartTime = maintenanceStartTime
        }
    }

}

extension MediaLiveClientTypes {
    /// The properties for a private VPC Output When this property is specified, the output egress addresses will be created in a user specified VPC
    public struct VpcOutputSettings {
        /// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels
        public var publicAddressAllocationIds: [Swift.String]?
        /// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used
        public var securityGroupIds: [Swift.String]?
        /// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init(
            publicAddressAllocationIds: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.publicAddressAllocationIds = publicAddressAllocationIds
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

/// A request to create a channel
public struct CreateChannelInput {
    /// The Elemental Anywhere settings for this channel.
    public var anywhereSettings: MediaLiveClientTypes.AnywhereSettings?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// Placeholder documentation for __listOfOutputDestination
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level to write to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceCreateSettings?
    /// Name of channel.
    public var name: Swift.String?
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    public var requestId: Swift.String?
    /// Deprecated field that's only usable by whitelisted customers.
    @available(*, deprecated)
    public var reserved: Swift.String?
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
    public var roleArn: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Settings for the VPC outputs
    public var vpc: MediaLiveClientTypes.VpcOutputSettings?

    public init(
        anywhereSettings: MediaLiveClientTypes.AnywhereSettings? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceCreateSettings? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        reserved: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettings? = nil
    )
    {
        self.anywhereSettings = anywhereSettings
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.encoderSettings = encoderSettings
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.requestId = requestId
        self.reserved = reserved
        self.roleArn = roleArn
        self.tags = tags
        self.vpc = vpc
    }
}

/// Placeholder documentation for CreateChannelResponse
public struct CreateChannelOutput {
    /// Placeholder documentation for Channel
    public var channel: MediaLiveClientTypes.Channel?

    public init(
        channel: MediaLiveClientTypes.Channel? = nil
    )
    {
        self.channel = channel
    }
}

/// A request to create a channel placement group.
public struct CreateChannelPlacementGroupInput {
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    public var name: Swift.String?
    /// An array of one ID for the Node that you want to associate with the ChannelPlacementGroup. (You can't associate more than one Node with the ChannelPlacementGroup.) The Node and the ChannelPlacementGroup must be in the same Cluster.
    public var nodes: [Swift.String]?
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources. the request.
    public var requestId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clusterId: Swift.String? = nil,
        name: Swift.String? = nil,
        nodes: [Swift.String]? = nil,
        requestId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clusterId = clusterId
        self.name = name
        self.nodes = nodes
        self.requestId = requestId
        self.tags = tags
    }
}

/// Placeholder documentation for CreateChannelPlacementGroupResponse
public struct CreateChannelPlacementGroupOutput {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    public var arn: Swift.String?
    /// Used in ListChannelPlacementGroupsResult
    public var channels: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The name that you specified for the ChannelPlacementGroup.
    public var name: Swift.String?
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    public var nodes: [Swift.String]?
    /// The current state of the ChannelPlacementGroup.
    public var state: MediaLiveClientTypes.ChannelPlacementGroupState?

    public init(
        arn: Swift.String? = nil,
        channels: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        nodes: [Swift.String]? = nil,
        state: MediaLiveClientTypes.ChannelPlacementGroupState? = nil
    )
    {
        self.arn = arn
        self.channels = channels
        self.clusterId = clusterId
        self.id = id
        self.name = name
        self.nodes = nodes
        self.state = state
    }
}

/// Placeholder documentation for CreateCloudWatchAlarmTemplateRequest
public struct CreateCloudWatchAlarmTemplateInput {
    /// The comparison operator used to compare the specified statistic and the threshold.
    /// This member is required.
    public var comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator?
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    public var datapointsToAlarm: Swift.Int?
    /// A resource's optional description.
    public var description: Swift.String?
    /// The number of periods over which data is compared to the specified threshold.
    /// This member is required.
    public var evaluationPeriods: Swift.Int?
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var groupIdentifier: Swift.String?
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    /// This member is required.
    public var metricName: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This member is required.
    public var name: Swift.String?
    /// The period, in seconds, over which the specified statistic is applied.
    /// This member is required.
    public var period: Swift.Int?
    /// The statistic to apply to the alarm's metric data.
    /// This member is required.
    public var statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    /// This member is required.
    public var targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType?
    /// The threshold value to compare with the specified statistic.
    /// This member is required.
    public var threshold: Swift.Double?
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    /// This member is required.
    public var treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData?

    public init(
        comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        description: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        groupIdentifier: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData? = nil
    )
    {
        self.comparisonOperator = comparisonOperator
        self.datapointsToAlarm = datapointsToAlarm
        self.description = description
        self.evaluationPeriods = evaluationPeriods
        self.groupIdentifier = groupIdentifier
        self.metricName = metricName
        self.name = name
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.targetResourceType = targetResourceType
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

/// Placeholder documentation for CreateCloudWatchAlarmTemplateResponse
public struct CreateCloudWatchAlarmTemplateOutput {
    /// A cloudwatch alarm template's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// The comparison operator used to compare the specified statistic and the threshold.
    public var comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    public var datapointsToAlarm: Swift.Int?
    /// A resource's optional description.
    public var description: Swift.String?
    /// The number of periods over which data is compared to the specified threshold.
    public var evaluationPeriods: Swift.Int?
    /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
    public var groupId: Swift.String?
    /// A cloudwatch alarm template's id. AWS provided templates have ids that start with aws-
    public var id: Swift.String?
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    public var metricName: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// The period, in seconds, over which the specified statistic is applied.
    public var period: Swift.Int?
    /// The statistic to apply to the alarm's metric data.
    public var statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    public var targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType?
    /// The threshold value to compare with the specified statistic.
    public var threshold: Swift.Double?
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    public var treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData?

    public init(
        arn: Swift.String? = nil,
        comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator? = nil,
        createdAt: Foundation.Date? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        description: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        groupId: Swift.String? = nil,
        id: Swift.String? = nil,
        metricName: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData? = nil
    )
    {
        self.arn = arn
        self.comparisonOperator = comparisonOperator
        self.createdAt = createdAt
        self.datapointsToAlarm = datapointsToAlarm
        self.description = description
        self.evaluationPeriods = evaluationPeriods
        self.groupId = groupId
        self.id = id
        self.metricName = metricName
        self.modifiedAt = modifiedAt
        self.name = name
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.targetResourceType = targetResourceType
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

/// Placeholder documentation for CreateCloudWatchAlarmTemplateGroupRequest
public struct CreateCloudWatchAlarmTemplateGroupInput {
    /// A resource's optional description.
    public var description: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This member is required.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for CreateCloudWatchAlarmTemplateGroupResponse
public struct CreateCloudWatchAlarmTemplateGroupOutput {
    /// A cloudwatch alarm template group's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// Create as many Clusters as you want, but create at least one. Each Cluster groups together Nodes that you want to treat as a collection. Within the Cluster, you will set up some Nodes as active Nodes, and some as backup Nodes, for Node failover purposes. Each Node can belong to only one Cluster.
public struct CreateClusterInput {
    /// Specify a type. All the Nodes that you later add to this Cluster must be this type of hardware. One Cluster instance can't contain different hardware types. You won't be able to change this parameter after you create the Cluster.
    public var clusterType: MediaLiveClientTypes.ClusterType?
    /// The ARN of the IAM role for the Node in this Cluster. The role must include all the operations that you expect these Node to perform. If necessary, create a role in IAM, then attach it here.
    public var instanceRoleArn: Swift.String?
    /// Specify a name that is unique in the AWS account. We recommend that you assign a name that hints at the types of Nodes in the Cluster. Names are case-sensitive.
    public var name: Swift.String?
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettingsCreateRequest?
    /// The unique ID of the request.
    public var requestId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clusterType: MediaLiveClientTypes.ClusterType? = nil,
        instanceRoleArn: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.ClusterNetworkSettingsCreateRequest? = nil,
        requestId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clusterType = clusterType
        self.instanceRoleArn = instanceRoleArn
        self.name = name
        self.networkSettings = networkSettings
        self.requestId = requestId
        self.tags = tags
    }
}

/// Placeholder documentation for CreateClusterResponse
public struct CreateClusterOutput {
    /// The ARN of this Cluster. It is automatically assigned when the Cluster is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var channelIds: [Swift.String]?
    /// The hardware type for the Cluster
    public var clusterType: MediaLiveClientTypes.ClusterType?
    /// The ID of the Cluster. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the IAM role for the Node in this Cluster. Any Nodes that are associated with this Cluster assume this role. The role gives permissions to the operations that you expect these Node to perform.
    public var instanceRoleArn: Swift.String?
    /// The name that you specified for the Cluster.
    public var name: Swift.String?
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettings?
    /// The current state of the Cluster.
    public var state: MediaLiveClientTypes.ClusterState?

    public init(
        arn: Swift.String? = nil,
        channelIds: [Swift.String]? = nil,
        clusterType: MediaLiveClientTypes.ClusterType? = nil,
        id: Swift.String? = nil,
        instanceRoleArn: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.ClusterNetworkSettings? = nil,
        state: MediaLiveClientTypes.ClusterState? = nil
    )
    {
        self.arn = arn
        self.channelIds = channelIds
        self.clusterType = clusterType
        self.id = id
        self.instanceRoleArn = instanceRoleArn
        self.name = name
        self.networkSettings = networkSettings
        self.state = state
    }
}

/// Placeholder documentation for CreateEventBridgeRuleTemplateRequest
public struct CreateEventBridgeRuleTemplateInput {
    /// A resource's optional description.
    public var description: Swift.String?
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    public var eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]?
    /// The type of event to match with the rule.
    /// This member is required.
    public var eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType?
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var groupIdentifier: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This member is required.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]? = nil,
        eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType? = nil,
        groupIdentifier: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.eventTargets = eventTargets
        self.eventType = eventType
        self.groupIdentifier = groupIdentifier
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for CreateEventBridgeRuleTemplateResponse
public struct CreateEventBridgeRuleTemplateOutput {
    /// An eventbridge rule template's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    public var eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]?
    /// The type of event to match with the rule.
    public var eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType?
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
    public var groupId: Swift.String?
    /// An eventbridge rule template's id. AWS provided templates have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]? = nil,
        eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType? = nil,
        groupId: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.eventTargets = eventTargets
        self.eventType = eventType
        self.groupId = groupId
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for CreateEventBridgeRuleTemplateGroupRequest
public struct CreateEventBridgeRuleTemplateGroupInput {
    /// A resource's optional description.
    public var description: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This member is required.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for CreateEventBridgeRuleTemplateGroupResponse
public struct CreateEventBridgeRuleTemplateGroupOutput {
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

extension MediaLiveClientTypes {
    /// Settings for a Multicast input. Contains a list of multicast Urls and optional source ip addresses.
    public struct MulticastSettingsCreateRequest {
        /// Placeholder documentation for __listOfMulticastSourceCreateRequest
        public var sources: [MediaLiveClientTypes.MulticastSourceCreateRequest]?

        public init(
            sources: [MediaLiveClientTypes.MulticastSourceCreateRequest]? = nil
        )
        {
            self.sources = sources
        }
    }

}

extension MediaLiveClientTypes {
    /// Configures the sources for this SRT input. For a single-pipeline input, include one srtCallerSource in the array. For a standard-pipeline input, include two srtCallerSource.
    public struct SrtSettingsRequest {
        /// Placeholder documentation for __listOfSrtCallerSourceRequest
        public var srtCallerSources: [MediaLiveClientTypes.SrtCallerSourceRequest]?

        public init(
            srtCallerSources: [MediaLiveClientTypes.SrtCallerSourceRequest]? = nil
        )
        {
            self.srtCallerSources = srtCallerSources
        }
    }

}

extension MediaLiveClientTypes {
    /// Settings for a private VPC Input. When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses. This property requires setting the roleArn property on Input creation. Not compatible with the inputSecurityGroups property.
    public struct InputVpcRequest {
        /// A list of up to 5 EC2 VPC security group IDs to attach to the Input VPC network interfaces. Requires subnetIds. If none are specified then the VPC default security group will be used.
        public var securityGroupIds: [Swift.String]?
        /// A list of 2 VPC subnet IDs from the same VPC. Subnet IDs must be mapped to two unique availability zones (AZ).
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

/// The name of the input
public struct CreateInputInput {
    /// Destination settings for PUSH type inputs.
    public var destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    /// Settings for the devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    /// The location of this input. AWS, for an input existing in the AWS Cloud, On-Prem for an input in a customer network.
    public var inputNetworkLocation: MediaLiveClientTypes.InputNetworkLocation?
    /// A list of security groups referenced by IDs to attach to the input.
    public var inputSecurityGroups: [Swift.String]?
    /// A list of the MediaConnect Flows that you want to use in this input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    /// Multicast Input settings.
    public var multicastSettings: MediaLiveClientTypes.MulticastSettingsCreateRequest?
    /// Name of the input.
    public var name: Swift.String?
    /// Unique identifier of the request to ensure the request is handled exactly once in case of retries.
    public var requestId: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    public var sources: [MediaLiveClientTypes.InputSourceRequest]?
    /// The settings associated with an SRT input.
    public var srtSettings: MediaLiveClientTypes.SrtSettingsRequest?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// The different types of inputs that AWS Elemental MediaLive supports.
    public var type: MediaLiveClientTypes.InputType?
    /// Settings for a private VPC Input. When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses. This property requires setting the roleArn property on Input creation. Not compatible with the inputSecurityGroups property.
    public var vpc: MediaLiveClientTypes.InputVpcRequest?

    public init(
        destinations: [MediaLiveClientTypes.InputDestinationRequest]? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
        inputNetworkLocation: MediaLiveClientTypes.InputNetworkLocation? = nil,
        inputSecurityGroups: [Swift.String]? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]? = nil,
        multicastSettings: MediaLiveClientTypes.MulticastSettingsCreateRequest? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sources: [MediaLiveClientTypes.InputSourceRequest]? = nil,
        srtSettings: MediaLiveClientTypes.SrtSettingsRequest? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: MediaLiveClientTypes.InputType? = nil,
        vpc: MediaLiveClientTypes.InputVpcRequest? = nil
    )
    {
        self.destinations = destinations
        self.inputDevices = inputDevices
        self.inputNetworkLocation = inputNetworkLocation
        self.inputSecurityGroups = inputSecurityGroups
        self.mediaConnectFlows = mediaConnectFlows
        self.multicastSettings = multicastSettings
        self.name = name
        self.requestId = requestId
        self.roleArn = roleArn
        self.sources = sources
        self.srtSettings = srtSettings
        self.tags = tags
        self.type = type
        self.vpc = vpc
    }
}

/// Placeholder documentation for CreateInputResponse
public struct CreateInputOutput {
    /// Placeholder documentation for Input
    public var input: MediaLiveClientTypes.Input?

    public init(
        input: MediaLiveClientTypes.Input? = nil
    )
    {
        self.input = input
    }
}

/// The IPv4 CIDRs to whitelist for this Input Security Group
public struct CreateInputSecurityGroupInput {
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// List of IPv4 CIDR addresses to whitelist
    public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]?

    public init(
        tags: [Swift.String: Swift.String]? = nil,
        whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]? = nil
    )
    {
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

/// Placeholder documentation for CreateInputSecurityGroupResponse
public struct CreateInputSecurityGroupOutput {
    /// An Input Security Group
    public var securityGroup: MediaLiveClientTypes.InputSecurityGroup?

    public init(
        securityGroup: MediaLiveClientTypes.InputSecurityGroup? = nil
    )
    {
        self.securityGroup = securityGroup
    }
}

extension MediaLiveClientTypes {
    /// Contains configuration for a Multiplex event
    public struct MultiplexSettings {
        /// Maximum video buffer delay in milliseconds.
        public var maximumVideoBufferDelayMilliseconds: Swift.Int?
        /// Transport stream bit rate.
        /// This member is required.
        public var transportStreamBitrate: Swift.Int?
        /// Transport stream ID.
        /// This member is required.
        public var transportStreamId: Swift.Int?
        /// Transport stream reserved bit rate.
        public var transportStreamReservedBitrate: Swift.Int?

        public init(
            maximumVideoBufferDelayMilliseconds: Swift.Int? = nil,
            transportStreamBitrate: Swift.Int? = nil,
            transportStreamId: Swift.Int? = nil,
            transportStreamReservedBitrate: Swift.Int? = nil
        )
        {
            self.maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMilliseconds
            self.transportStreamBitrate = transportStreamBitrate
            self.transportStreamId = transportStreamId
            self.transportStreamReservedBitrate = transportStreamReservedBitrate
        }
    }

}

/// A request to create a multiplex.
public struct CreateMultiplexInput {
    /// A list of availability zones for the multiplex. You must specify exactly two.
    /// This member is required.
    public var availabilityZones: [Swift.String]?
    /// Configuration for a multiplex event.
    /// This member is required.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// Name of multiplex.
    /// This member is required.
    public var name: Swift.String?
    /// Unique request ID. This prevents retries from creating multiple resources.
    /// This member is required.
    public var requestId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        availabilityZones: [Swift.String]? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.requestId = requestId
        self.tags = tags
    }
}

extension MediaLiveClientTypes {
    /// The multiplex object.
    public struct Multiplex {
        /// The unique arn of the multiplex.
        public var arn: Swift.String?
        /// A list of availability zones for the multiplex.
        public var availabilityZones: [Swift.String]?
        /// A list of the multiplex output destinations.
        public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
        /// The unique id of the multiplex.
        public var id: Swift.String?
        /// Configuration for a multiplex event.
        public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
        /// The name of the multiplex.
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The number of programs in the multiplex.
        public var programCount: Swift.Int?
        /// The current state of the multiplex.
        public var state: MediaLiveClientTypes.MultiplexState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
            id: Swift.String? = nil,
            multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            programCount: Swift.Int? = nil,
            state: MediaLiveClientTypes.MultiplexState? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }
    }

}

/// Placeholder documentation for CreateMultiplexResponse
public struct CreateMultiplexOutput {
    /// The newly created multiplex.
    public var multiplex: MediaLiveClientTypes.Multiplex?

    public init(
        multiplex: MediaLiveClientTypes.Multiplex? = nil
    )
    {
        self.multiplex = multiplex
    }
}

extension MediaLiveClientTypes {

    /// Indicates which pipeline is preferred by the multiplex for program ingest. If set to "PIPELINE_0" or "PIPELINE_1" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline, it will switch back once that ingest is healthy again. If set to "CURRENTLY_ACTIVE", it will not switch back to the other pipeline based on it recovering to a healthy state, it will only switch if the active pipeline becomes unhealthy.
    public enum PreferredChannelPipeline: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case currentlyActive
        case pipeline0
        case pipeline1
        case sdkUnknown(Swift.String)

        public static var allCases: [PreferredChannelPipeline] {
            return [
                .currentlyActive,
                .pipeline0,
                .pipeline1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .currentlyActive: return "CURRENTLY_ACTIVE"
            case .pipeline0: return "PIPELINE_0"
            case .pipeline1: return "PIPELINE_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaLiveClientTypes {
    /// Transport stream service descriptor configuration for the Multiplex program.
    public struct MultiplexProgramServiceDescriptor {
        /// Name of the provider.
        /// This member is required.
        public var providerName: Swift.String?
        /// Name of the service.
        /// This member is required.
        public var serviceName: Swift.String?

        public init(
            providerName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.providerName = providerName
            self.serviceName = serviceName
        }
    }

}

extension MediaLiveClientTypes {
    /// Statmux rate control settings
    public struct MultiplexStatmuxVideoSettings {
        /// Maximum statmux bitrate.
        public var maximumBitrate: Swift.Int?
        /// Minimum statmux bitrate.
        public var minimumBitrate: Swift.Int?
        /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
        public var priority: Swift.Int?

        public init(
            maximumBitrate: Swift.Int? = nil,
            minimumBitrate: Swift.Int? = nil,
            priority: Swift.Int? = nil
        )
        {
            self.maximumBitrate = maximumBitrate
            self.minimumBitrate = minimumBitrate
            self.priority = priority
        }
    }

}

extension MediaLiveClientTypes {
    /// The video configuration for each program in a multiplex.
    public struct MultiplexVideoSettings {
        /// The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.
        public var constantBitrate: Swift.Int?
        /// Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.
        public var statmuxSettings: MediaLiveClientTypes.MultiplexStatmuxVideoSettings?

        public init(
            constantBitrate: Swift.Int? = nil,
            statmuxSettings: MediaLiveClientTypes.MultiplexStatmuxVideoSettings? = nil
        )
        {
            self.constantBitrate = constantBitrate
            self.statmuxSettings = statmuxSettings
        }
    }

}

extension MediaLiveClientTypes {
    /// Multiplex Program settings configuration.
    public struct MultiplexProgramSettings {
        /// Indicates which pipeline is preferred by the multiplex for program ingest.
        public var preferredChannelPipeline: MediaLiveClientTypes.PreferredChannelPipeline?
        /// Unique program number.
        /// This member is required.
        public var programNumber: Swift.Int?
        /// Transport stream service descriptor configuration for the Multiplex program.
        public var serviceDescriptor: MediaLiveClientTypes.MultiplexProgramServiceDescriptor?
        /// Program video settings configuration.
        public var videoSettings: MediaLiveClientTypes.MultiplexVideoSettings?

        public init(
            preferredChannelPipeline: MediaLiveClientTypes.PreferredChannelPipeline? = nil,
            programNumber: Swift.Int? = nil,
            serviceDescriptor: MediaLiveClientTypes.MultiplexProgramServiceDescriptor? = nil,
            videoSettings: MediaLiveClientTypes.MultiplexVideoSettings? = nil
        )
        {
            self.preferredChannelPipeline = preferredChannelPipeline
            self.programNumber = programNumber
            self.serviceDescriptor = serviceDescriptor
            self.videoSettings = videoSettings
        }
    }

}

/// A request to create a program in a multiplex.
public struct CreateMultiplexProgramInput {
    /// ID of the multiplex where the program is to be created.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The settings for this multiplex program.
    /// This member is required.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// Name of multiplex program.
    /// This member is required.
    public var programName: Swift.String?
    /// Unique request ID. This prevents retries from creating multiple resources.
    /// This member is required.
    public var requestId: Swift.String?

    public init(
        multiplexId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        programName: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.programName = programName
        self.requestId = requestId
    }
}

extension MediaLiveClientTypes {
    /// Packet identifiers map for a given Multiplex program.
    public struct MultiplexProgramPacketIdentifiersMap {
        /// Placeholder documentation for __integer
        public var aribCaptionsPid: Swift.Int?
        /// Placeholder documentation for __listOf__integer
        public var audioPids: [Swift.Int]?
        /// Placeholder documentation for __listOf__integer
        public var dvbSubPids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var dvbTeletextPid: Swift.Int?
        /// Placeholder documentation for __listOf__integer
        public var dvbTeletextPids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var ecmPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var etvPlatformPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var etvSignalPid: Swift.Int?
        /// Placeholder documentation for __listOf__integer
        public var klvDataPids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var pcrPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var pmtPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var privateMetadataPid: Swift.Int?
        /// Placeholder documentation for __listOf__integer
        public var scte27Pids: [Swift.Int]?
        /// Placeholder documentation for __integer
        public var scte35Pid: Swift.Int?
        /// Placeholder documentation for __integer
        public var smpte2038Pid: Swift.Int?
        /// Placeholder documentation for __integer
        public var timedMetadataPid: Swift.Int?
        /// Placeholder documentation for __integer
        public var videoPid: Swift.Int?

        public init(
            aribCaptionsPid: Swift.Int? = nil,
            audioPids: [Swift.Int]? = nil,
            dvbSubPids: [Swift.Int]? = nil,
            dvbTeletextPid: Swift.Int? = nil,
            dvbTeletextPids: [Swift.Int]? = nil,
            ecmPid: Swift.Int? = nil,
            etvPlatformPid: Swift.Int? = nil,
            etvSignalPid: Swift.Int? = nil,
            klvDataPids: [Swift.Int]? = nil,
            pcrPid: Swift.Int? = nil,
            pmtPid: Swift.Int? = nil,
            privateMetadataPid: Swift.Int? = nil,
            scte27Pids: [Swift.Int]? = nil,
            scte35Pid: Swift.Int? = nil,
            smpte2038Pid: Swift.Int? = nil,
            timedMetadataPid: Swift.Int? = nil,
            videoPid: Swift.Int? = nil
        )
        {
            self.aribCaptionsPid = aribCaptionsPid
            self.audioPids = audioPids
            self.dvbSubPids = dvbSubPids
            self.dvbTeletextPid = dvbTeletextPid
            self.dvbTeletextPids = dvbTeletextPids
            self.ecmPid = ecmPid
            self.etvPlatformPid = etvPlatformPid
            self.etvSignalPid = etvSignalPid
            self.klvDataPids = klvDataPids
            self.pcrPid = pcrPid
            self.pmtPid = pmtPid
            self.privateMetadataPid = privateMetadataPid
            self.scte27Pids = scte27Pids
            self.scte35Pid = scte35Pid
            self.smpte2038Pid = smpte2038Pid
            self.timedMetadataPid = timedMetadataPid
            self.videoPid = videoPid
        }
    }

}

extension MediaLiveClientTypes {
    /// The multiplex program object.
    public struct MultiplexProgram {
        /// The MediaLive channel associated with the program.
        public var channelId: Swift.String?
        /// The settings for this multiplex program.
        public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
        /// The packet identifier map for this multiplex program.
        public var packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
        /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
        public var pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
        /// The name of the multiplex program.
        public var programName: Swift.String?

        public init(
            channelId: Swift.String? = nil,
            multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
            packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap? = nil,
            pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil,
            programName: Swift.String? = nil
        )
        {
            self.channelId = channelId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.packetIdentifiersMap = packetIdentifiersMap
            self.pipelineDetails = pipelineDetails
            self.programName = programName
        }
    }

}

/// Placeholder documentation for CreateMultiplexProgramResponse
public struct CreateMultiplexProgramOutput {
    /// The newly created multiplex program.
    public var multiplexProgram: MediaLiveClientTypes.MultiplexProgram?

    public init(
        multiplexProgram: MediaLiveClientTypes.MultiplexProgram? = nil
    )
    {
        self.multiplexProgram = multiplexProgram
    }
}

/// A request to create a Network.
public struct CreateNetworkInput {
    /// An array of IpPoolCreateRequests that identify a collection of IP addresses in your network that you want to reserve for use in MediaLive Anywhere. MediaLiveAnywhere uses these IP addresses for Push inputs (in both Bridge and NATnetworks) and for output destinations (only in Bridge networks). EachIpPoolUpdateRequest specifies one CIDR block.
    public var ipPools: [MediaLiveClientTypes.IpPoolCreateRequest]?
    /// Specify a name that is unique in the AWS account. We recommend that you assign a name that hints at the type of traffic on the network. Names are case-sensitive.
    public var name: Swift.String?
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    public var requestId: Swift.String?
    /// An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    public var routes: [MediaLiveClientTypes.RouteCreateRequest]?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        ipPools: [MediaLiveClientTypes.IpPoolCreateRequest]? = nil,
        name: Swift.String? = nil,
        requestId: Swift.String? = nil,
        routes: [MediaLiveClientTypes.RouteCreateRequest]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.ipPools = ipPools
        self.name = name
        self.requestId = requestId
        self.routes = routes
        self.tags = tags
    }
}

/// Placeholder documentation for CreateNetworkResponse
public struct CreateNetworkOutput {
    /// The ARN of this Network. It is automatically assigned when the Network is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var associatedClusterIds: [Swift.String]?
    /// The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// An array of IpPools in your organization's network that identify a collection of IP addresses in this network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
    public var ipPools: [MediaLiveClientTypes.IpPool]?
    /// The name that you specified for the Network.
    public var name: Swift.String?
    /// An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    public var routes: [MediaLiveClientTypes.Route]?
    /// The current state of the Network. Only MediaLive Anywhere can change the state.
    public var state: MediaLiveClientTypes.NetworkState?

    public init(
        arn: Swift.String? = nil,
        associatedClusterIds: [Swift.String]? = nil,
        id: Swift.String? = nil,
        ipPools: [MediaLiveClientTypes.IpPool]? = nil,
        name: Swift.String? = nil,
        routes: [MediaLiveClientTypes.Route]? = nil,
        state: MediaLiveClientTypes.NetworkState? = nil
    )
    {
        self.arn = arn
        self.associatedClusterIds = associatedClusterIds
        self.id = id
        self.ipPools = ipPools
        self.name = name
        self.routes = routes
        self.state = state
    }
}

/// A request to create a node
public struct CreateNodeInput {
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The user-specified name of the Node to be created.
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMappingCreateRequest]?
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    public var requestId: Swift.String?
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clusterId: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMappingCreateRequest]? = nil,
        requestId: Swift.String? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clusterId = clusterId
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.requestId = requestId
        self.role = role
        self.tags = tags
    }
}

/// Placeholder documentation for CreateNodeResponse
public struct CreateNodeOutput {
    /// The ARN of the Node. It is automatically assigned when the Node is created.
    public var arn: Swift.String?
    /// An array of IDs. Each ID is one ChannelPlacementGroup that is associated with this Node. Empty if the Node is not yet associated with any groups.
    public var channelPlacementGroups: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The current connection state of the Node.
    public var connectionState: MediaLiveClientTypes.NodeConnectionState?
    /// The unique ID of the Node. Unique in the Cluster. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the EC2 instance hosting the Node.
    public var instanceArn: Swift.String?
    /// The name that you specified for the Node.
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
    /// The initial role current role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?
    /// The current state of the Node.
    public var state: MediaLiveClientTypes.NodeState?

    public init(
        arn: Swift.String? = nil,
        channelPlacementGroups: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.NodeConnectionState? = nil,
        id: Swift.String? = nil,
        instanceArn: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil,
        state: MediaLiveClientTypes.NodeState? = nil
    )
    {
        self.arn = arn
        self.channelPlacementGroups = channelPlacementGroups
        self.clusterId = clusterId
        self.connectionState = connectionState
        self.id = id
        self.instanceArn = instanceArn
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.role = role
        self.state = state
    }
}

/// A request to create a new node registration script.
public struct CreateNodeRegistrationScriptInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// If you're generating a re-registration script for an already existing node, this is where you provide the id.
    public var id: Swift.String?
    /// Specify a pattern for MediaLive Anywhere to use to assign a name to each Node in the Cluster. The pattern can include the variables $hn (hostname of the node hardware) and $ts for the date and time that the Node is created, in UTC (for example, 2024-08-20T23:35:12Z).
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    public var requestId: Swift.String?
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?

    public init(
        clusterId: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
        requestId: Swift.String? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil
    )
    {
        self.clusterId = clusterId
        self.id = id
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.requestId = requestId
        self.role = role
    }
}

/// Placeholder documentation for CreateNodeRegistrationScriptResponse
public struct CreateNodeRegistrationScriptOutput {
    /// A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    public var nodeRegistrationScript: Swift.String?

    public init(
        nodeRegistrationScript: Swift.String? = nil
    )
    {
        self.nodeRegistrationScript = nodeRegistrationScript
    }
}

/// A request to create a partner input
public struct CreatePartnerInputInput {
    /// Unique ID of the input.
    /// This member is required.
    public var inputId: Swift.String?
    /// Unique identifier of the request to ensure the request is handled exactly once in case of retries.
    public var requestId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        inputId: Swift.String? = nil,
        requestId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.inputId = inputId
        self.requestId = requestId
        self.tags = tags
    }
}

/// Placeholder documentation for CreatePartnerInputResponse
public struct CreatePartnerInputOutput {
    /// Placeholder documentation for Input
    public var input: MediaLiveClientTypes.Input?

    public init(
        input: MediaLiveClientTypes.Input? = nil
    )
    {
        self.input = input
    }
}

/// Placeholder documentation for CreateSignalMapRequest
public struct CreateSignalMapInput {
    /// Placeholder documentation for __listOf__stringPatternS
    public var cloudWatchAlarmTemplateGroupIdentifiers: [Swift.String]?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    /// This member is required.
    public var discoveryEntryPointArn: Swift.String?
    /// Placeholder documentation for __listOf__stringPatternS
    public var eventBridgeRuleTemplateGroupIdentifiers: [Swift.String]?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This member is required.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cloudWatchAlarmTemplateGroupIdentifiers: [Swift.String]? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIdentifiers: [Swift.String]? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cloudWatchAlarmTemplateGroupIdentifiers = cloudWatchAlarmTemplateGroupIdentifiers
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.eventBridgeRuleTemplateGroupIdentifiers = eventBridgeRuleTemplateGroupIdentifiers
        self.name = name
        self.tags = tags
    }
}

extension MediaLiveClientTypes {
    /// An AWS resource used in media workflows.
    public struct MediaResource {
        /// Placeholder documentation for __listOfMediaResourceNeighbor
        public var destinations: [MediaLiveClientTypes.MediaResourceNeighbor]?
        /// The logical name of an AWS media resource.
        public var name: Swift.String?
        /// Placeholder documentation for __listOfMediaResourceNeighbor
        public var sources: [MediaLiveClientTypes.MediaResourceNeighbor]?

        public init(
            destinations: [MediaLiveClientTypes.MediaResourceNeighbor]? = nil,
            name: Swift.String? = nil,
            sources: [MediaLiveClientTypes.MediaResourceNeighbor]? = nil
        )
        {
            self.destinations = destinations
            self.name = name
            self.sources = sources
        }
    }

}

extension MediaLiveClientTypes {
    /// Represents the latest successful monitor deployment of a signal map.
    public struct SuccessfulMonitorDeployment {
        /// URI associated with a signal map's monitor deployment.
        /// This member is required.
        public var detailsUri: Swift.String?
        /// A signal map's monitor deployment status.
        /// This member is required.
        public var status: MediaLiveClientTypes.SignalMapMonitorDeploymentStatus?

        public init(
            detailsUri: Swift.String? = nil,
            status: MediaLiveClientTypes.SignalMapMonitorDeploymentStatus? = nil
        )
        {
            self.detailsUri = detailsUri
            self.status = status
        }
    }

}

extension MediaLiveClientTypes {
    /// Represents the latest monitor deployment of a signal map.
    public struct MonitorDeployment {
        /// URI associated with a signal map's monitor deployment.
        public var detailsUri: Swift.String?
        /// Error message associated with a failed monitor deployment of a signal map.
        public var errorMessage: Swift.String?
        /// A signal map's monitor deployment status.
        /// This member is required.
        public var status: MediaLiveClientTypes.SignalMapMonitorDeploymentStatus?

        public init(
            detailsUri: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            status: MediaLiveClientTypes.SignalMapMonitorDeploymentStatus? = nil
        )
        {
            self.detailsUri = detailsUri
            self.errorMessage = errorMessage
            self.status = status
        }
    }

}

/// Placeholder documentation for CreateSignalMapResponse
public struct CreateSignalMapOutput {
    /// A signal map's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var cloudWatchAlarmTemplateGroupIds: [Swift.String]?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    public var discoveryEntryPointArn: Swift.String?
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    public var errorMessage: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var eventBridgeRuleTemplateGroupIds: [Swift.String]?
    /// A map representing an incomplete AWS media workflow as a graph.
    public var failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// A signal map's id.
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var lastDiscoveredAt: Foundation.Date?
    /// Represents the latest successful monitor deployment of a signal map.
    public var lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment?
    /// A map representing an AWS media workflow as a graph.
    public var mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    public var monitorChangesPendingDeployment: Swift.Bool?
    /// Represents the latest monitor deployment of a signal map.
    public var monitorDeployment: MediaLiveClientTypes.MonitorDeployment?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    public var status: MediaLiveClientTypes.SignalMapStatus?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cloudWatchAlarmTemplateGroupIds: [Swift.String]? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIds: [Swift.String]? = nil,
        failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        id: Swift.String? = nil,
        lastDiscoveredAt: Foundation.Date? = nil,
        lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment? = nil,
        mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        modifiedAt: Foundation.Date? = nil,
        monitorChangesPendingDeployment: Swift.Bool? = nil,
        monitorDeployment: MediaLiveClientTypes.MonitorDeployment? = nil,
        name: Swift.String? = nil,
        status: MediaLiveClientTypes.SignalMapStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cloudWatchAlarmTemplateGroupIds = cloudWatchAlarmTemplateGroupIds
        self.createdAt = createdAt
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.errorMessage = errorMessage
        self.eventBridgeRuleTemplateGroupIds = eventBridgeRuleTemplateGroupIds
        self.failedMediaResourceMap = failedMediaResourceMap
        self.id = id
        self.lastDiscoveredAt = lastDiscoveredAt
        self.lastSuccessfulMonitorDeployment = lastSuccessfulMonitorDeployment
        self.mediaResourceMap = mediaResourceMap
        self.modifiedAt = modifiedAt
        self.monitorChangesPendingDeployment = monitorChangesPendingDeployment
        self.monitorDeployment = monitorDeployment
        self.name = name
        self.status = status
        self.tags = tags
    }
}

/// Placeholder documentation for CreateTagsRequest
public struct CreateTagsInput {
    /// Placeholder documentation for __string
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Placeholder documentation for Tags
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

/// Placeholder documentation for DeleteChannelRequest
public struct DeleteChannelInput {
    /// Unique ID of the channel.
    /// This member is required.
    public var channelId: Swift.String?

    public init(
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

/// Placeholder documentation for DeleteChannelResponse
public struct DeleteChannelOutput {
    /// Anywhere settings for this channel.
    public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init(
        anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.anywhereSettings = anywhereSettings
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

/// Placeholder documentation for DeleteChannelPlacementGroupRequest
public struct DeleteChannelPlacementGroupInput {
    /// The ID of the channel placement group.
    /// This member is required.
    public var channelPlacementGroupId: Swift.String?
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        channelPlacementGroupId: Swift.String? = nil,
        clusterId: Swift.String? = nil
    )
    {
        self.channelPlacementGroupId = channelPlacementGroupId
        self.clusterId = clusterId
    }
}

/// Placeholder documentation for DeleteChannelPlacementGroupResponse
public struct DeleteChannelPlacementGroupOutput {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    public var arn: Swift.String?
    /// Used in ListChannelPlacementGroupsResult
    public var channels: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The name that you specified for the ChannelPlacementGroup.
    public var name: Swift.String?
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    public var nodes: [Swift.String]?
    /// The current state of the ChannelPlacementGroup.
    public var state: MediaLiveClientTypes.ChannelPlacementGroupState?

    public init(
        arn: Swift.String? = nil,
        channels: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        nodes: [Swift.String]? = nil,
        state: MediaLiveClientTypes.ChannelPlacementGroupState? = nil
    )
    {
        self.arn = arn
        self.channels = channels
        self.clusterId = clusterId
        self.id = id
        self.name = name
        self.nodes = nodes
        self.state = state
    }
}

/// Placeholder documentation for DeleteCloudWatchAlarmTemplateRequest
public struct DeleteCloudWatchAlarmTemplateInput {
    /// A cloudwatch alarm template's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for DeleteCloudWatchAlarmTemplateGroupRequest
public struct DeleteCloudWatchAlarmTemplateGroupInput {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for DeleteClusterRequest
public struct DeleteClusterInput {
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

/// Placeholder documentation for DeleteClusterResponse
public struct DeleteClusterOutput {
    /// The ARN of this Cluster. It is automatically assigned when the Cluster is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var channelIds: [Swift.String]?
    /// The hardware type for the Cluster
    public var clusterType: MediaLiveClientTypes.ClusterType?
    /// The ID of the Cluster. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the IAM role for the Node in this Cluster. Any Nodes that are associated with this Cluster assume this role. The role gives permissions to the operations that you expect these Node to perform.
    public var instanceRoleArn: Swift.String?
    /// The name that you specified for the Cluster.
    public var name: Swift.String?
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettings?
    /// The current state of the Cluster.
    public var state: MediaLiveClientTypes.ClusterState?

    public init(
        arn: Swift.String? = nil,
        channelIds: [Swift.String]? = nil,
        clusterType: MediaLiveClientTypes.ClusterType? = nil,
        id: Swift.String? = nil,
        instanceRoleArn: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.ClusterNetworkSettings? = nil,
        state: MediaLiveClientTypes.ClusterState? = nil
    )
    {
        self.arn = arn
        self.channelIds = channelIds
        self.clusterType = clusterType
        self.id = id
        self.instanceRoleArn = instanceRoleArn
        self.name = name
        self.networkSettings = networkSettings
        self.state = state
    }
}

/// Placeholder documentation for DeleteEventBridgeRuleTemplateRequest
public struct DeleteEventBridgeRuleTemplateInput {
    /// An eventbridge rule template's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for DeleteEventBridgeRuleTemplateGroupRequest
public struct DeleteEventBridgeRuleTemplateGroupInput {
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for DeleteInputRequest
public struct DeleteInputInput {
    /// Unique ID of the input
    /// This member is required.
    public var inputId: Swift.String?

    public init(
        inputId: Swift.String? = nil
    )
    {
        self.inputId = inputId
    }
}

/// Placeholder documentation for DeleteInputResponse
public struct DeleteInputOutput {

    public init() { }
}

/// Placeholder documentation for DeleteInputSecurityGroupRequest
public struct DeleteInputSecurityGroupInput {
    /// The Input Security Group to delete
    /// This member is required.
    public var inputSecurityGroupId: Swift.String?

    public init(
        inputSecurityGroupId: Swift.String? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
    }
}

/// Placeholder documentation for DeleteInputSecurityGroupResponse
public struct DeleteInputSecurityGroupOutput {

    public init() { }
}

/// Placeholder documentation for DeleteMultiplexRequest
public struct DeleteMultiplexInput {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init(
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

/// Placeholder documentation for DeleteMultiplexResponse
public struct DeleteMultiplexOutput {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

/// Placeholder documentation for DeleteMultiplexProgramRequest
public struct DeleteMultiplexProgramInput {
    /// The ID of the multiplex that the program belongs to.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The multiplex program name.
    /// This member is required.
    public var programName: Swift.String?

    public init(
        multiplexId: Swift.String? = nil,
        programName: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

/// Placeholder documentation for DeleteMultiplexProgramResponse
public struct DeleteMultiplexProgramOutput {
    /// The MediaLive channel associated with the program.
    public var channelId: Swift.String?
    /// The settings for this multiplex program.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public var packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public var pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public var programName: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil,
        programName: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

/// Placeholder documentation for DeleteNetworkRequest
public struct DeleteNetworkInput {
    /// The ID of the network.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        networkId: Swift.String? = nil
    )
    {
        self.networkId = networkId
    }
}

/// Placeholder documentation for DeleteNetworkResponse
public struct DeleteNetworkOutput {
    /// The ARN of this Network. It is automatically assigned when the Network is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var associatedClusterIds: [Swift.String]?
    /// The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// An array of IpPools in your organization's network that identify a collection of IP addresses in this network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
    public var ipPools: [MediaLiveClientTypes.IpPool]?
    /// The name that you specified for the Network.
    public var name: Swift.String?
    /// An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    public var routes: [MediaLiveClientTypes.Route]?
    /// The current state of the Network. Only MediaLive Anywhere can change the state.
    public var state: MediaLiveClientTypes.NetworkState?

    public init(
        arn: Swift.String? = nil,
        associatedClusterIds: [Swift.String]? = nil,
        id: Swift.String? = nil,
        ipPools: [MediaLiveClientTypes.IpPool]? = nil,
        name: Swift.String? = nil,
        routes: [MediaLiveClientTypes.Route]? = nil,
        state: MediaLiveClientTypes.NetworkState? = nil
    )
    {
        self.arn = arn
        self.associatedClusterIds = associatedClusterIds
        self.id = id
        self.ipPools = ipPools
        self.name = name
        self.routes = routes
        self.state = state
    }
}

/// Placeholder documentation for DeleteNodeRequest
public struct DeleteNodeInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// The ID of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.nodeId = nodeId
    }
}

/// Placeholder documentation for DeleteNodeResponse
public struct DeleteNodeOutput {
    /// The ARN of the Node. It is automatically assigned when the Node is created.
    public var arn: Swift.String?
    /// An array of IDs. Each ID is one ChannelPlacementGroup that is associated with this Node. Empty if the Node is not yet associated with any groups.
    public var channelPlacementGroups: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The current connection state of the Node.
    public var connectionState: MediaLiveClientTypes.NodeConnectionState?
    /// The unique ID of the Node. Unique in the Cluster. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the EC2 instance hosting the Node.
    public var instanceArn: Swift.String?
    /// The name that you specified for the Node.
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
    /// The initial role current role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?
    /// The current state of the Node.
    public var state: MediaLiveClientTypes.NodeState?

    public init(
        arn: Swift.String? = nil,
        channelPlacementGroups: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.NodeConnectionState? = nil,
        id: Swift.String? = nil,
        instanceArn: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil,
        state: MediaLiveClientTypes.NodeState? = nil
    )
    {
        self.arn = arn
        self.channelPlacementGroups = channelPlacementGroups
        self.clusterId = clusterId
        self.connectionState = connectionState
        self.id = id
        self.instanceArn = instanceArn
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.role = role
        self.state = state
    }
}

/// Placeholder documentation for DeleteReservationRequest
public struct DeleteReservationInput {
    /// Unique reservation ID, e.g. '1234567'
    /// This member is required.
    public var reservationId: Swift.String?

    public init(
        reservationId: Swift.String? = nil
    )
    {
        self.reservationId = reservationId
    }
}

/// Placeholder documentation for DeleteReservationResponse
public struct DeleteReservationOutput {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public var arn: Swift.String?
    /// Number of reserved resources
    public var count: Swift.Int?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public var currencyCode: Swift.String?
    /// Lease duration, e.g. '12'
    public var duration: Swift.Int?
    /// Units for duration, e.g. 'MONTHS'
    public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public var end: Swift.String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public var fixedPrice: Swift.Double?
    /// User specified reservation name
    public var name: Swift.String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public var offeringDescription: Swift.String?
    /// Unique offering ID, e.g. '87654321'
    public var offeringId: Swift.String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public var offeringType: MediaLiveClientTypes.OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public var region: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique reservation ID, e.g. '1234567'
    public var reservationId: Swift.String?
    /// Resource configuration details
    public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public var start: Swift.String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public var state: MediaLiveClientTypes.ReservationState?
    /// A collection of key-value pairs
    public var tags: [Swift.String: Swift.String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public var usagePrice: Swift.Double?

    public init(
        arn: Swift.String? = nil,
        count: Swift.Int? = nil,
        currencyCode: Swift.String? = nil,
        duration: Swift.Int? = nil,
        durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
        end: Swift.String? = nil,
        fixedPrice: Swift.Double? = nil,
        name: Swift.String? = nil,
        offeringDescription: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        offeringType: MediaLiveClientTypes.OfferingType? = nil,
        region: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        reservationId: Swift.String? = nil,
        resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
        start: Swift.String? = nil,
        state: MediaLiveClientTypes.ReservationState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        usagePrice: Swift.Double? = nil
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.renewalSettings = renewalSettings
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

/// Placeholder documentation for DeleteScheduleRequest
public struct DeleteScheduleInput {
    /// Id of the channel whose schedule is being deleted.
    /// This member is required.
    public var channelId: Swift.String?

    public init(
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

/// Placeholder documentation for DeleteScheduleResponse
public struct DeleteScheduleOutput {

    public init() { }
}

/// Placeholder documentation for DeleteSignalMapRequest
public struct DeleteSignalMapInput {
    /// A signal map's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for DeleteTagsRequest
public struct DeleteTagsInput {
    /// Placeholder documentation for __string
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of tag keys to delete
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

/// Placeholder documentation for DescribeAccountConfigurationRequest
public struct DescribeAccountConfigurationInput {

    public init() { }
}

/// Placeholder documentation for DescribeAccountConfigurationResponse
public struct DescribeAccountConfigurationOutput {
    /// Placeholder documentation for AccountConfiguration
    public var accountConfiguration: MediaLiveClientTypes.AccountConfiguration?

    public init(
        accountConfiguration: MediaLiveClientTypes.AccountConfiguration? = nil
    )
    {
        self.accountConfiguration = accountConfiguration
    }
}

/// Placeholder documentation for DescribeChannelRequest
public struct DescribeChannelInput {
    /// channel ID
    /// This member is required.
    public var channelId: Swift.String?

    public init(
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

/// Placeholder documentation for DescribeChannelResponse
public struct DescribeChannelOutput {
    /// Anywhere settings for this channel.
    public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init(
        anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.anywhereSettings = anywhereSettings
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

/// Placeholder documentation for DescribeChannelPlacementGroupRequest
public struct DescribeChannelPlacementGroupInput {
    /// The ID of the channel placement group.
    /// This member is required.
    public var channelPlacementGroupId: Swift.String?
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        channelPlacementGroupId: Swift.String? = nil,
        clusterId: Swift.String? = nil
    )
    {
        self.channelPlacementGroupId = channelPlacementGroupId
        self.clusterId = clusterId
    }
}

/// Placeholder documentation for DescribeChannelPlacementGroupResponse
public struct DescribeChannelPlacementGroupOutput {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    public var arn: Swift.String?
    /// Used in ListChannelPlacementGroupsResult
    public var channels: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The name that you specified for the ChannelPlacementGroup.
    public var name: Swift.String?
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    public var nodes: [Swift.String]?
    /// The current state of the ChannelPlacementGroup.
    public var state: MediaLiveClientTypes.ChannelPlacementGroupState?

    public init(
        arn: Swift.String? = nil,
        channels: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        nodes: [Swift.String]? = nil,
        state: MediaLiveClientTypes.ChannelPlacementGroupState? = nil
    )
    {
        self.arn = arn
        self.channels = channels
        self.clusterId = clusterId
        self.id = id
        self.name = name
        self.nodes = nodes
        self.state = state
    }
}

/// Placeholder documentation for DescribeClusterRequest
public struct DescribeClusterInput {
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

/// Placeholder documentation for DescribeClusterResponse
public struct DescribeClusterOutput {
    /// The ARN of this Cluster. It is automatically assigned when the Cluster is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var channelIds: [Swift.String]?
    /// The hardware type for the Cluster
    public var clusterType: MediaLiveClientTypes.ClusterType?
    /// The ID of the Cluster. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the IAM role for the Node in this Cluster. Any Nodes that are associated with this Cluster assume this role. The role gives permissions to the operations that you expect these Node to perform.
    public var instanceRoleArn: Swift.String?
    /// The name that you specified for the Cluster.
    public var name: Swift.String?
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettings?
    /// The current state of the Cluster.
    public var state: MediaLiveClientTypes.ClusterState?

    public init(
        arn: Swift.String? = nil,
        channelIds: [Swift.String]? = nil,
        clusterType: MediaLiveClientTypes.ClusterType? = nil,
        id: Swift.String? = nil,
        instanceRoleArn: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.ClusterNetworkSettings? = nil,
        state: MediaLiveClientTypes.ClusterState? = nil
    )
    {
        self.arn = arn
        self.channelIds = channelIds
        self.clusterType = clusterType
        self.id = id
        self.instanceRoleArn = instanceRoleArn
        self.name = name
        self.networkSettings = networkSettings
        self.state = state
    }
}

/// Placeholder documentation for DescribeInputRequest
public struct DescribeInputInput {
    /// Unique ID of the input
    /// This member is required.
    public var inputId: Swift.String?

    public init(
        inputId: Swift.String? = nil
    )
    {
        self.inputId = inputId
    }
}

/// Placeholder documentation for DescribeInputResponse
public struct DescribeInputOutput {
    /// The Unique ARN of the input (generated, immutable).
    public var arn: Swift.String?
    /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
    public var attachedChannels: [Swift.String]?
    /// A list of the destinations of the input (PUSH-type).
    public var destinations: [MediaLiveClientTypes.InputDestination]?
    /// The generated ID of the input (unique for user account, immutable).
    public var id: Swift.String?
    /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
    public var inputClass: MediaLiveClientTypes.InputClass?
    /// Settings for the input devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    /// The location of this input. AWS, for an input existing in the AWS Cloud, On-Prem for an input in a customer network.
    public var inputNetworkLocation: MediaLiveClientTypes.InputNetworkLocation?
    /// A list of IDs for all Inputs which are partners of this one.
    public var inputPartnerIds: [Swift.String]?
    /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE and TS_FILE inputs.
    public var inputSourceType: MediaLiveClientTypes.InputSourceType?
    /// A list of MediaConnect Flows for this input.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
    /// Multicast Input settings.
    public var multicastSettings: MediaLiveClientTypes.MulticastSettings?
    /// The user-assigned name (This is a mutable value).
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// A list of IDs for all the Input Security Groups attached to the input.
    public var securityGroups: [Swift.String]?
    /// A list of the sources of the input (PULL-type).
    public var sources: [MediaLiveClientTypes.InputSource]?
    /// The settings associated with an SRT input.
    public var srtSettings: MediaLiveClientTypes.SrtSettings?
    /// Placeholder documentation for InputState
    public var state: MediaLiveClientTypes.InputState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// The different types of inputs that AWS Elemental MediaLive supports.
    public var type: MediaLiveClientTypes.InputType?

    public init(
        arn: Swift.String? = nil,
        attachedChannels: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.InputDestination]? = nil,
        id: Swift.String? = nil,
        inputClass: MediaLiveClientTypes.InputClass? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
        inputNetworkLocation: MediaLiveClientTypes.InputNetworkLocation? = nil,
        inputPartnerIds: [Swift.String]? = nil,
        inputSourceType: MediaLiveClientTypes.InputSourceType? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]? = nil,
        multicastSettings: MediaLiveClientTypes.MulticastSettings? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        sources: [MediaLiveClientTypes.InputSource]? = nil,
        srtSettings: MediaLiveClientTypes.SrtSettings? = nil,
        state: MediaLiveClientTypes.InputState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: MediaLiveClientTypes.InputType? = nil
    )
    {
        self.arn = arn
        self.attachedChannels = attachedChannels
        self.destinations = destinations
        self.id = id
        self.inputClass = inputClass
        self.inputDevices = inputDevices
        self.inputNetworkLocation = inputNetworkLocation
        self.inputPartnerIds = inputPartnerIds
        self.inputSourceType = inputSourceType
        self.mediaConnectFlows = mediaConnectFlows
        self.multicastSettings = multicastSettings
        self.name = name
        self.roleArn = roleArn
        self.securityGroups = securityGroups
        self.sources = sources
        self.srtSettings = srtSettings
        self.state = state
        self.tags = tags
        self.type = type
    }
}

/// Placeholder documentation for DescribeInputDeviceRequest
public struct DescribeInputDeviceInput {
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for DescribeInputDeviceResponse
public struct DescribeInputDeviceOutput {
    /// The unique ARN of the input device.
    public var arn: Swift.String?
    /// The Availability Zone associated with this input device.
    public var availabilityZone: Swift.String?
    /// The state of the connection between the input device and AWS.
    public var connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public var deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
    /// The status of software on the input device.
    public var deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
    /// The unique ID of the input device.
    public var id: Swift.String?
    /// The network MAC address of the input device.
    public var macAddress: Swift.String?
    /// An array of the ARNs for the MediaLive inputs attached to the device. Returned only if the outputType is MEDIALIVE_INPUT.
    public var medialiveInputArns: [Swift.String]?
    /// A name that you specify for the input device.
    public var name: Swift.String?
    /// The network settings for the input device.
    public var networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
    /// The output attachment type of the input device. Specifies MEDIACONNECT_FLOW if this device is the source for a MediaConnect flow. Specifies MEDIALIVE_INPUT if this device is the source for a MediaLive input.
    public var outputType: MediaLiveClientTypes.InputDeviceOutputType?
    /// The unique serial number of the input device.
    public var serialNumber: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// The type of the input device.
    public var type: MediaLiveClientTypes.InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?

    public init(
        arn: Swift.String? = nil,
        availabilityZone: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus? = nil,
        hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings? = nil,
        id: Swift.String? = nil,
        macAddress: Swift.String? = nil,
        medialiveInputArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings? = nil,
        outputType: MediaLiveClientTypes.InputDeviceOutputType? = nil,
        serialNumber: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: MediaLiveClientTypes.InputDeviceType? = nil,
        uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.medialiveInputArns = medialiveInputArns
        self.name = name
        self.networkSettings = networkSettings
        self.outputType = outputType
        self.serialNumber = serialNumber
        self.tags = tags
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

/// Placeholder documentation for DescribeInputDeviceThumbnailRequest
public struct DescribeInputDeviceThumbnailInput {
    /// The HTTP Accept header. Indicates the requested type for the thumbnail.
    /// This member is required.
    public var accept: MediaLiveClientTypes.AcceptHeader?
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        accept: MediaLiveClientTypes.AcceptHeader? = nil,
        inputDeviceId: Swift.String? = nil
    )
    {
        self.accept = accept
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for DescribeInputDeviceThumbnailResponse
public struct DescribeInputDeviceThumbnailOutput {
    /// The binary data for the thumbnail that the Link device has most recently sent to MediaLive.
    public var body: Smithy.ByteStream?
    /// The length of the content.
    public var contentLength: Swift.Int?
    /// Specifies the media type of the thumbnail.
    public var contentType: MediaLiveClientTypes.ContentType?
    /// The unique, cacheable version of this thumbnail.
    public var eTag: Swift.String?
    /// The date and time the thumbnail was last updated at the device.
    public var lastModified: Foundation.Date?

    public init(
        body: Smithy.ByteStream? = nil,
        contentLength: Swift.Int? = nil,
        contentType: MediaLiveClientTypes.ContentType? = nil,
        eTag: Swift.String? = nil,
        lastModified: Foundation.Date? = nil
    )
    {
        self.body = body
        self.contentLength = contentLength
        self.contentType = contentType
        self.eTag = eTag
        self.lastModified = lastModified
    }
}

/// Placeholder documentation for DescribeInputSecurityGroupRequest
public struct DescribeInputSecurityGroupInput {
    /// The id of the Input Security Group to describe
    /// This member is required.
    public var inputSecurityGroupId: Swift.String?

    public init(
        inputSecurityGroupId: Swift.String? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
    }
}

/// Placeholder documentation for DescribeInputSecurityGroupResponse
public struct DescribeInputSecurityGroupOutput {
    /// Unique ARN of Input Security Group
    public var arn: Swift.String?
    /// The Id of the Input Security Group
    public var id: Swift.String?
    /// The list of inputs currently using this Input Security Group.
    public var inputs: [Swift.String]?
    /// The current state of the Input Security Group.
    public var state: MediaLiveClientTypes.InputSecurityGroupState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Whitelist rules and their sync status
    public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        inputs: [Swift.String]? = nil,
        state: MediaLiveClientTypes.InputSecurityGroupState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.inputs = inputs
        self.state = state
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

/// Placeholder documentation for DescribeMultiplexRequest
public struct DescribeMultiplexInput {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init(
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

/// Placeholder documentation for DescribeMultiplexResponse
public struct DescribeMultiplexOutput {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

/// Placeholder documentation for DescribeMultiplexProgramRequest
public struct DescribeMultiplexProgramInput {
    /// The ID of the multiplex that the program belongs to.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The name of the program.
    /// This member is required.
    public var programName: Swift.String?

    public init(
        multiplexId: Swift.String? = nil,
        programName: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.programName = programName
    }
}

/// Placeholder documentation for DescribeMultiplexProgramResponse
public struct DescribeMultiplexProgramOutput {
    /// The MediaLive channel associated with the program.
    public var channelId: Swift.String?
    /// The settings for this multiplex program.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// The packet identifier map for this multiplex program.
    public var packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    public var pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]?
    /// The name of the multiplex program.
    public var programName: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        packetIdentifiersMap: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap? = nil,
        pipelineDetails: [MediaLiveClientTypes.MultiplexProgramPipelineDetail]? = nil,
        programName: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.packetIdentifiersMap = packetIdentifiersMap
        self.pipelineDetails = pipelineDetails
        self.programName = programName
    }
}

/// Placeholder documentation for DescribeNetworkRequest
public struct DescribeNetworkInput {
    /// The ID of the network.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        networkId: Swift.String? = nil
    )
    {
        self.networkId = networkId
    }
}

/// Placeholder documentation for DescribeNetworkResponse
public struct DescribeNetworkOutput {
    /// The ARN of this Network. It is automatically assigned when the Network is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var associatedClusterIds: [Swift.String]?
    /// The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// An array of IpPools in your organization's network that identify a collection of IP addresses in this network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
    public var ipPools: [MediaLiveClientTypes.IpPool]?
    /// The name that you specified for the Network.
    public var name: Swift.String?
    /// An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    public var routes: [MediaLiveClientTypes.Route]?
    /// The current state of the Network. Only MediaLive Anywhere can change the state.
    public var state: MediaLiveClientTypes.NetworkState?

    public init(
        arn: Swift.String? = nil,
        associatedClusterIds: [Swift.String]? = nil,
        id: Swift.String? = nil,
        ipPools: [MediaLiveClientTypes.IpPool]? = nil,
        name: Swift.String? = nil,
        routes: [MediaLiveClientTypes.Route]? = nil,
        state: MediaLiveClientTypes.NetworkState? = nil
    )
    {
        self.arn = arn
        self.associatedClusterIds = associatedClusterIds
        self.id = id
        self.ipPools = ipPools
        self.name = name
        self.routes = routes
        self.state = state
    }
}

/// Placeholder documentation for DescribeNodeRequest
public struct DescribeNodeInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// The ID of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.nodeId = nodeId
    }
}

/// Placeholder documentation for DescribeNodeResponse
public struct DescribeNodeOutput {
    /// The ARN of the Node. It is automatically assigned when the Node is created.
    public var arn: Swift.String?
    /// An array of IDs. Each ID is one ChannelPlacementGroup that is associated with this Node. Empty if the Node is not yet associated with any groups.
    public var channelPlacementGroups: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The current connection state of the Node.
    public var connectionState: MediaLiveClientTypes.NodeConnectionState?
    /// The unique ID of the Node. Unique in the Cluster. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the EC2 instance hosting the Node.
    public var instanceArn: Swift.String?
    /// The name that you specified for the Node.
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
    /// The initial role current role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?
    /// The current state of the Node.
    public var state: MediaLiveClientTypes.NodeState?

    public init(
        arn: Swift.String? = nil,
        channelPlacementGroups: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.NodeConnectionState? = nil,
        id: Swift.String? = nil,
        instanceArn: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil,
        state: MediaLiveClientTypes.NodeState? = nil
    )
    {
        self.arn = arn
        self.channelPlacementGroups = channelPlacementGroups
        self.clusterId = clusterId
        self.connectionState = connectionState
        self.id = id
        self.instanceArn = instanceArn
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.role = role
        self.state = state
    }
}

/// Placeholder documentation for DescribeOfferingRequest
public struct DescribeOfferingInput {
    /// Unique offering ID, e.g. '87654321'
    /// This member is required.
    public var offeringId: Swift.String?

    public init(
        offeringId: Swift.String? = nil
    )
    {
        self.offeringId = offeringId
    }
}

/// Placeholder documentation for DescribeOfferingResponse
public struct DescribeOfferingOutput {
    /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
    public var arn: Swift.String?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public var currencyCode: Swift.String?
    /// Lease duration, e.g. '12'
    public var duration: Swift.Int?
    /// Units for duration, e.g. 'MONTHS'
    public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public var fixedPrice: Swift.Double?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public var offeringDescription: Swift.String?
    /// Unique offering ID, e.g. '87654321'
    public var offeringId: Swift.String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public var offeringType: MediaLiveClientTypes.OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public var region: Swift.String?
    /// Resource configuration details
    public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public var usagePrice: Swift.Double?

    public init(
        arn: Swift.String? = nil,
        currencyCode: Swift.String? = nil,
        duration: Swift.Int? = nil,
        durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
        fixedPrice: Swift.Double? = nil,
        offeringDescription: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        offeringType: MediaLiveClientTypes.OfferingType? = nil,
        region: Swift.String? = nil,
        resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
        usagePrice: Swift.Double? = nil
    )
    {
        self.arn = arn
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.fixedPrice = fixedPrice
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.resourceSpecification = resourceSpecification
        self.usagePrice = usagePrice
    }
}

/// Placeholder documentation for DescribeReservationRequest
public struct DescribeReservationInput {
    /// Unique reservation ID, e.g. '1234567'
    /// This member is required.
    public var reservationId: Swift.String?

    public init(
        reservationId: Swift.String? = nil
    )
    {
        self.reservationId = reservationId
    }
}

/// Placeholder documentation for DescribeReservationResponse
public struct DescribeReservationOutput {
    /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
    public var arn: Swift.String?
    /// Number of reserved resources
    public var count: Swift.Int?
    /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
    public var currencyCode: Swift.String?
    /// Lease duration, e.g. '12'
    public var duration: Swift.Int?
    /// Units for duration, e.g. 'MONTHS'
    public var durationUnits: MediaLiveClientTypes.OfferingDurationUnits?
    /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
    public var end: Swift.String?
    /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
    public var fixedPrice: Swift.Double?
    /// User specified reservation name
    public var name: Swift.String?
    /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
    public var offeringDescription: Swift.String?
    /// Unique offering ID, e.g. '87654321'
    public var offeringId: Swift.String?
    /// Offering type, e.g. 'NO_UPFRONT'
    public var offeringType: MediaLiveClientTypes.OfferingType?
    /// AWS region, e.g. 'us-west-2'
    public var region: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique reservation ID, e.g. '1234567'
    public var reservationId: Swift.String?
    /// Resource configuration details
    public var resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification?
    /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
    public var start: Swift.String?
    /// Current state of reservation, e.g. 'ACTIVE'
    public var state: MediaLiveClientTypes.ReservationState?
    /// A collection of key-value pairs
    public var tags: [Swift.String: Swift.String]?
    /// Recurring usage charge for each reserved resource, e.g. '157.0'
    public var usagePrice: Swift.Double?

    public init(
        arn: Swift.String? = nil,
        count: Swift.Int? = nil,
        currencyCode: Swift.String? = nil,
        duration: Swift.Int? = nil,
        durationUnits: MediaLiveClientTypes.OfferingDurationUnits? = nil,
        end: Swift.String? = nil,
        fixedPrice: Swift.Double? = nil,
        name: Swift.String? = nil,
        offeringDescription: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        offeringType: MediaLiveClientTypes.OfferingType? = nil,
        region: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        reservationId: Swift.String? = nil,
        resourceSpecification: MediaLiveClientTypes.ReservationResourceSpecification? = nil,
        start: Swift.String? = nil,
        state: MediaLiveClientTypes.ReservationState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        usagePrice: Swift.Double? = nil
    )
    {
        self.arn = arn
        self.count = count
        self.currencyCode = currencyCode
        self.duration = duration
        self.durationUnits = durationUnits
        self.end = end
        self.fixedPrice = fixedPrice
        self.name = name
        self.offeringDescription = offeringDescription
        self.offeringId = offeringId
        self.offeringType = offeringType
        self.region = region
        self.renewalSettings = renewalSettings
        self.reservationId = reservationId
        self.resourceSpecification = resourceSpecification
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}

/// Placeholder documentation for DescribeScheduleRequest
public struct DescribeScheduleInput {
    /// Id of the channel whose schedule is being updated.
    /// This member is required.
    public var channelId: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for DescribeScheduleResponse
public struct DescribeScheduleOutput {
    /// The next token; for use in pagination.
    public var nextToken: Swift.String?
    /// The list of actions in the schedule.
    public var scheduleActions: [MediaLiveClientTypes.ScheduleAction]?

    public init(
        nextToken: Swift.String? = nil,
        scheduleActions: [MediaLiveClientTypes.ScheduleAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduleActions = scheduleActions
    }
}

/// Placeholder documentation for DescribeThumbnailsRequest
public struct DescribeThumbnailsInput {
    /// Unique ID of the channel
    /// This member is required.
    public var channelId: Swift.String?
    /// Pipeline ID ("0" or "1")
    /// This member is required.
    public var pipelineId: Swift.String?
    /// thumbnail type
    /// This member is required.
    public var thumbnailType: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        pipelineId: Swift.String? = nil,
        thumbnailType: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.pipelineId = pipelineId
        self.thumbnailType = thumbnailType
    }
}

/// Placeholder documentation for DescribeThumbnailsResponse
public struct DescribeThumbnailsOutput {
    /// Placeholder documentation for __listOfThumbnailDetail
    public var thumbnailDetails: [MediaLiveClientTypes.ThumbnailDetail]?

    public init(
        thumbnailDetails: [MediaLiveClientTypes.ThumbnailDetail]? = nil
    )
    {
        self.thumbnailDetails = thumbnailDetails
    }
}

/// Placeholder documentation for GetCloudWatchAlarmTemplateRequest
public struct GetCloudWatchAlarmTemplateInput {
    /// A cloudwatch alarm template's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for GetCloudWatchAlarmTemplateResponse
public struct GetCloudWatchAlarmTemplateOutput {
    /// A cloudwatch alarm template's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// The comparison operator used to compare the specified statistic and the threshold.
    public var comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    public var datapointsToAlarm: Swift.Int?
    /// A resource's optional description.
    public var description: Swift.String?
    /// The number of periods over which data is compared to the specified threshold.
    public var evaluationPeriods: Swift.Int?
    /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
    public var groupId: Swift.String?
    /// A cloudwatch alarm template's id. AWS provided templates have ids that start with aws-
    public var id: Swift.String?
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    public var metricName: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// The period, in seconds, over which the specified statistic is applied.
    public var period: Swift.Int?
    /// The statistic to apply to the alarm's metric data.
    public var statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    public var targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType?
    /// The threshold value to compare with the specified statistic.
    public var threshold: Swift.Double?
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    public var treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData?

    public init(
        arn: Swift.String? = nil,
        comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator? = nil,
        createdAt: Foundation.Date? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        description: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        groupId: Swift.String? = nil,
        id: Swift.String? = nil,
        metricName: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData? = nil
    )
    {
        self.arn = arn
        self.comparisonOperator = comparisonOperator
        self.createdAt = createdAt
        self.datapointsToAlarm = datapointsToAlarm
        self.description = description
        self.evaluationPeriods = evaluationPeriods
        self.groupId = groupId
        self.id = id
        self.metricName = metricName
        self.modifiedAt = modifiedAt
        self.name = name
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.targetResourceType = targetResourceType
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

/// Placeholder documentation for GetCloudWatchAlarmTemplateGroupRequest
public struct GetCloudWatchAlarmTemplateGroupInput {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for GetCloudWatchAlarmTemplateGroupResponse
public struct GetCloudWatchAlarmTemplateGroupOutput {
    /// A cloudwatch alarm template group's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for GetEventBridgeRuleTemplateRequest
public struct GetEventBridgeRuleTemplateInput {
    /// An eventbridge rule template's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for GetEventBridgeRuleTemplateResponse
public struct GetEventBridgeRuleTemplateOutput {
    /// An eventbridge rule template's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    public var eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]?
    /// The type of event to match with the rule.
    public var eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType?
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
    public var groupId: Swift.String?
    /// An eventbridge rule template's id. AWS provided templates have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]? = nil,
        eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType? = nil,
        groupId: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.eventTargets = eventTargets
        self.eventType = eventType
        self.groupId = groupId
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for GetEventBridgeRuleTemplateGroupRequest
public struct GetEventBridgeRuleTemplateGroupInput {
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for GetEventBridgeRuleTemplateGroupResponse
public struct GetEventBridgeRuleTemplateGroupOutput {
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for GetSignalMapRequest
public struct GetSignalMapInput {
    /// A signal map's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for GetSignalMapResponse
public struct GetSignalMapOutput {
    /// A signal map's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var cloudWatchAlarmTemplateGroupIds: [Swift.String]?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    public var discoveryEntryPointArn: Swift.String?
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    public var errorMessage: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var eventBridgeRuleTemplateGroupIds: [Swift.String]?
    /// A map representing an incomplete AWS media workflow as a graph.
    public var failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// A signal map's id.
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var lastDiscoveredAt: Foundation.Date?
    /// Represents the latest successful monitor deployment of a signal map.
    public var lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment?
    /// A map representing an AWS media workflow as a graph.
    public var mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    public var monitorChangesPendingDeployment: Swift.Bool?
    /// Represents the latest monitor deployment of a signal map.
    public var monitorDeployment: MediaLiveClientTypes.MonitorDeployment?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    public var status: MediaLiveClientTypes.SignalMapStatus?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cloudWatchAlarmTemplateGroupIds: [Swift.String]? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIds: [Swift.String]? = nil,
        failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        id: Swift.String? = nil,
        lastDiscoveredAt: Foundation.Date? = nil,
        lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment? = nil,
        mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        modifiedAt: Foundation.Date? = nil,
        monitorChangesPendingDeployment: Swift.Bool? = nil,
        monitorDeployment: MediaLiveClientTypes.MonitorDeployment? = nil,
        name: Swift.String? = nil,
        status: MediaLiveClientTypes.SignalMapStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cloudWatchAlarmTemplateGroupIds = cloudWatchAlarmTemplateGroupIds
        self.createdAt = createdAt
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.errorMessage = errorMessage
        self.eventBridgeRuleTemplateGroupIds = eventBridgeRuleTemplateGroupIds
        self.failedMediaResourceMap = failedMediaResourceMap
        self.id = id
        self.lastDiscoveredAt = lastDiscoveredAt
        self.lastSuccessfulMonitorDeployment = lastSuccessfulMonitorDeployment
        self.mediaResourceMap = mediaResourceMap
        self.modifiedAt = modifiedAt
        self.monitorChangesPendingDeployment = monitorChangesPendingDeployment
        self.monitorDeployment = monitorDeployment
        self.name = name
        self.status = status
        self.tags = tags
    }
}

extension MediaLiveClientTypes {
    /// Parameters required to attach a MediaConnect flow to the device.
    public struct InputDeviceMediaConnectConfigurableSettings {
        /// The ARN of the MediaConnect flow to attach this device to.
        public var flowArn: Swift.String?
        /// The ARN for the role that MediaLive assumes to access the attached flow and secret. For more information about how to create this role, see the MediaLive user guide.
        public var roleArn: Swift.String?
        /// The ARN for the secret that holds the encryption key to encrypt the content output by the device.
        public var secretArn: Swift.String?
        /// The name of the MediaConnect Flow source to stream to.
        public var sourceName: Swift.String?

        public init(
            flowArn: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            secretArn: Swift.String? = nil,
            sourceName: Swift.String? = nil
        )
        {
            self.flowArn = flowArn
            self.roleArn = roleArn
            self.secretArn = secretArn
            self.sourceName = sourceName
        }
    }

}

extension MediaLiveClientTypes {
    /// Configurable settings for the input device.
    public struct InputDeviceConfigurableSettings {
        /// An array of eight audio configurations, one for each audio pair in the source. Set up each audio configuration either to exclude the pair, or to format it and include it in the output from the device. This parameter applies only to UHD devices, and only when the device is configured as the source for a MediaConnect flow. For an HD device, you configure the audio by setting up audio selectors in the channel configuration.
        public var audioChannelPairs: [MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairConfig]?
        /// Choose the codec for the video that the device produces. Only UHD devices can specify this parameter.
        public var codec: MediaLiveClientTypes.InputDeviceCodec?
        /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
        public var configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput?
        /// The Link device's buffer size (latency) in milliseconds (ms).
        public var latencyMs: Swift.Int?
        /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
        public var maxBitrate: Swift.Int?
        /// To attach this device to a MediaConnect flow, specify these parameters. To detach an existing flow, enter {} for the value of mediaconnectSettings. Only UHD devices can specify this parameter.
        public var mediaconnectSettings: MediaLiveClientTypes.InputDeviceMediaConnectConfigurableSettings?

        public init(
            audioChannelPairs: [MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairConfig]? = nil,
            codec: MediaLiveClientTypes.InputDeviceCodec? = nil,
            configuredInput: MediaLiveClientTypes.InputDeviceConfiguredInput? = nil,
            latencyMs: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            mediaconnectSettings: MediaLiveClientTypes.InputDeviceMediaConnectConfigurableSettings? = nil
        )
        {
            self.audioChannelPairs = audioChannelPairs
            self.codec = codec
            self.configuredInput = configuredInput
            self.latencyMs = latencyMs
            self.maxBitrate = maxBitrate
            self.mediaconnectSettings = mediaconnectSettings
        }
    }

}

/// Placeholder documentation for ListChannelPlacementGroupsRequest
public struct ListChannelPlacementGroupsInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListChannelPlacementGroupsResponse
public struct ListChannelPlacementGroupsOutput {
    /// An array of ChannelPlacementGroups that exist in the Cluster.
    public var channelPlacementGroups: [MediaLiveClientTypes.DescribeChannelPlacementGroupSummary]?
    /// Token for the next result.
    public var nextToken: Swift.String?

    public init(
        channelPlacementGroups: [MediaLiveClientTypes.DescribeChannelPlacementGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelPlacementGroups = channelPlacementGroups
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListChannelsRequest
public struct ListChannelsInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListChannelsResponse
public struct ListChannelsOutput {
    /// Placeholder documentation for __listOfChannelSummary
    public var channels: [MediaLiveClientTypes.ChannelSummary]?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        channels: [MediaLiveClientTypes.ChannelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channels = channels
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListCloudWatchAlarmTemplateGroupsRequest
public struct ListCloudWatchAlarmTemplateGroupsInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?
    /// Represents the scope of a resource, with options for all scopes, AWS provided resources, or local resources.
    public var scope: Swift.String?
    /// A signal map's identifier. Can be either be its id or current name.
    public var signalMapIdentifier: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scope: Swift.String? = nil,
        signalMapIdentifier: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scope = scope
        self.signalMapIdentifier = signalMapIdentifier
    }
}

/// Placeholder documentation for ListCloudWatchAlarmTemplateGroupsResponse
public struct ListCloudWatchAlarmTemplateGroupsOutput {
    /// Placeholder documentation for __listOfCloudWatchAlarmTemplateGroupSummary
    public var cloudWatchAlarmTemplateGroups: [MediaLiveClientTypes.CloudWatchAlarmTemplateGroupSummary]?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?

    public init(
        cloudWatchAlarmTemplateGroups: [MediaLiveClientTypes.CloudWatchAlarmTemplateGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.cloudWatchAlarmTemplateGroups = cloudWatchAlarmTemplateGroups
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListCloudWatchAlarmTemplatesRequest
public struct ListCloudWatchAlarmTemplatesInput {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    public var groupIdentifier: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?
    /// Represents the scope of a resource, with options for all scopes, AWS provided resources, or local resources.
    public var scope: Swift.String?
    /// A signal map's identifier. Can be either be its id or current name.
    public var signalMapIdentifier: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scope: Swift.String? = nil,
        signalMapIdentifier: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scope = scope
        self.signalMapIdentifier = signalMapIdentifier
    }
}

/// Placeholder documentation for ListCloudWatchAlarmTemplatesResponse
public struct ListCloudWatchAlarmTemplatesOutput {
    /// Placeholder documentation for __listOfCloudWatchAlarmTemplateSummary
    public var cloudWatchAlarmTemplates: [MediaLiveClientTypes.CloudWatchAlarmTemplateSummary]?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?

    public init(
        cloudWatchAlarmTemplates: [MediaLiveClientTypes.CloudWatchAlarmTemplateSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.cloudWatchAlarmTemplates = cloudWatchAlarmTemplates
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListClustersRequest
public struct ListClustersInput {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListClustersResponse
public struct ListClustersOutput {
    /// A list of the Clusters that exist in your AWS account.
    public var clusters: [MediaLiveClientTypes.DescribeClusterSummary]?
    /// Token for the next result.
    public var nextToken: Swift.String?

    public init(
        clusters: [MediaLiveClientTypes.DescribeClusterSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListEventBridgeRuleTemplateGroupsRequest
public struct ListEventBridgeRuleTemplateGroupsInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?
    /// A signal map's identifier. Can be either be its id or current name.
    public var signalMapIdentifier: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        signalMapIdentifier: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.signalMapIdentifier = signalMapIdentifier
    }
}

/// Placeholder documentation for ListEventBridgeRuleTemplateGroupsResponse
public struct ListEventBridgeRuleTemplateGroupsOutput {
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateGroupSummary
    public var eventBridgeRuleTemplateGroups: [MediaLiveClientTypes.EventBridgeRuleTemplateGroupSummary]?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?

    public init(
        eventBridgeRuleTemplateGroups: [MediaLiveClientTypes.EventBridgeRuleTemplateGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventBridgeRuleTemplateGroups = eventBridgeRuleTemplateGroups
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListEventBridgeRuleTemplatesRequest
public struct ListEventBridgeRuleTemplatesInput {
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    public var groupIdentifier: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?
    /// A signal map's identifier. Can be either be its id or current name.
    public var signalMapIdentifier: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        signalMapIdentifier: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.signalMapIdentifier = signalMapIdentifier
    }
}

/// Placeholder documentation for ListEventBridgeRuleTemplatesResponse
public struct ListEventBridgeRuleTemplatesOutput {
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateSummary
    public var eventBridgeRuleTemplates: [MediaLiveClientTypes.EventBridgeRuleTemplateSummary]?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?

    public init(
        eventBridgeRuleTemplates: [MediaLiveClientTypes.EventBridgeRuleTemplateSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventBridgeRuleTemplates = eventBridgeRuleTemplates
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputDevicesRequest
public struct ListInputDevicesInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputDevicesResponse
public struct ListInputDevicesOutput {
    /// The list of input devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSummary]?
    /// A token to get additional list results.
    public var nextToken: Swift.String?

    public init(
        inputDevices: [MediaLiveClientTypes.InputDeviceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputDevices = inputDevices
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputDeviceTransfersRequest
public struct ListInputDeviceTransfersInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Placeholder documentation for __string
    /// This member is required.
    public var transferType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        transferType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.transferType = transferType
    }
}

/// Placeholder documentation for ListInputDeviceTransfersResponse
public struct ListInputDeviceTransfersOutput {
    /// The list of devices that you are transferring or are being transferred to you.
    public var inputDeviceTransfers: [MediaLiveClientTypes.TransferringInputDeviceSummary]?
    /// A token to get additional list results.
    public var nextToken: Swift.String?

    public init(
        inputDeviceTransfers: [MediaLiveClientTypes.TransferringInputDeviceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputDeviceTransfers = inputDeviceTransfers
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputsRequest
public struct ListInputsInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputsResponse
public struct ListInputsOutput {
    /// Placeholder documentation for __listOfInput
    public var inputs: [MediaLiveClientTypes.Input]?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        inputs: [MediaLiveClientTypes.Input]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputs = inputs
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputSecurityGroupsRequest
public struct ListInputSecurityGroupsInput {
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListInputSecurityGroupsResponse
public struct ListInputSecurityGroupsOutput {
    /// List of input security groups
    public var inputSecurityGroups: [MediaLiveClientTypes.InputSecurityGroup]?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?

    public init(
        inputSecurityGroups: [MediaLiveClientTypes.InputSecurityGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inputSecurityGroups = inputSecurityGroups
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListMultiplexesRequest
public struct ListMultiplexesInput {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListMultiplexesResponse
public struct ListMultiplexesOutput {
    /// List of multiplexes.
    public var multiplexes: [MediaLiveClientTypes.MultiplexSummary]?
    /// Token for the next ListMultiplexes request.
    public var nextToken: Swift.String?

    public init(
        multiplexes: [MediaLiveClientTypes.MultiplexSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.multiplexes = multiplexes
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListMultiplexProgramsRequest
public struct ListMultiplexProgramsInput {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The ID of the multiplex that the programs belong to.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        multiplexId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.multiplexId = multiplexId
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListMultiplexProgramsResponse
public struct ListMultiplexProgramsOutput {
    /// List of multiplex programs.
    public var multiplexPrograms: [MediaLiveClientTypes.MultiplexProgramSummary]?
    /// Token for the next ListMultiplexProgram request.
    public var nextToken: Swift.String?

    public init(
        multiplexPrograms: [MediaLiveClientTypes.MultiplexProgramSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.multiplexPrograms = multiplexPrograms
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListNetworksRequest
public struct ListNetworksInput {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListNetworksResponse
public struct ListNetworksOutput {
    /// An array of networks that you have created.
    public var networks: [MediaLiveClientTypes.DescribeNetworkSummary]?
    /// Token for the next ListNetworks request.
    public var nextToken: Swift.String?

    public init(
        networks: [MediaLiveClientTypes.DescribeNetworkSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.networks = networks
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListNodesRequest
public struct ListNodesInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListNodesResponse
public struct ListNodesOutput {
    /// Token for the next result.
    public var nextToken: Swift.String?
    /// An array of Nodes that exist in the Cluster.
    public var nodes: [MediaLiveClientTypes.DescribeNodeSummary]?

    public init(
        nextToken: Swift.String? = nil,
        nodes: [MediaLiveClientTypes.DescribeNodeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodes = nodes
    }
}

/// Placeholder documentation for ListOfferingsRequest
public struct ListOfferingsInput {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public var channelClass: Swift.String?
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    public var channelConfiguration: Swift.String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', 'LINK', or 'AV1'
    public var codec: Swift.String?
    /// Filter by offering duration, e.g. '12'
    public var duration: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public var maximumBitrate: Swift.String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public var maximumFramerate: Swift.String?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public var resolution: Swift.String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public var resourceType: Swift.String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public var specialFeature: Swift.String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public var videoQuality: Swift.String?

    public init(
        channelClass: Swift.String? = nil,
        channelConfiguration: Swift.String? = nil,
        codec: Swift.String? = nil,
        duration: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maximumBitrate: Swift.String? = nil,
        maximumFramerate: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        resolution: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        specialFeature: Swift.String? = nil,
        videoQuality: Swift.String? = nil
    )
    {
        self.channelClass = channelClass
        self.channelConfiguration = channelConfiguration
        self.codec = codec
        self.duration = duration
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

/// Placeholder documentation for ListOfferingsResponse
public struct ListOfferingsOutput {
    /// Token to retrieve the next page of results
    public var nextToken: Swift.String?
    /// List of offerings
    public var offerings: [MediaLiveClientTypes.Offering]?

    public init(
        nextToken: Swift.String? = nil,
        offerings: [MediaLiveClientTypes.Offering]? = nil
    )
    {
        self.nextToken = nextToken
        self.offerings = offerings
    }
}

/// Placeholder documentation for ListReservationsRequest
public struct ListReservationsInput {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public var channelClass: Swift.String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', 'LINK', or 'AV1'
    public var codec: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public var maximumBitrate: Swift.String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public var maximumFramerate: Swift.String?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public var resolution: Swift.String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public var resourceType: Swift.String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public var specialFeature: Swift.String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public var videoQuality: Swift.String?

    public init(
        channelClass: Swift.String? = nil,
        codec: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maximumBitrate: Swift.String? = nil,
        maximumFramerate: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        resolution: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        specialFeature: Swift.String? = nil,
        videoQuality: Swift.String? = nil
    )
    {
        self.channelClass = channelClass
        self.codec = codec
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}

/// Placeholder documentation for ListReservationsResponse
public struct ListReservationsOutput {
    /// Token to retrieve the next page of results
    public var nextToken: Swift.String?
    /// List of reservations
    public var reservations: [MediaLiveClientTypes.Reservation]?

    public init(
        nextToken: Swift.String? = nil,
        reservations: [MediaLiveClientTypes.Reservation]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservations = reservations
    }
}

/// Placeholder documentation for ListSignalMapsRequest
public struct ListSignalMapsInput {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    public var cloudWatchAlarmTemplateGroupIdentifier: Swift.String?
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    public var eventBridgeRuleTemplateGroupIdentifier: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?

    public init(
        cloudWatchAlarmTemplateGroupIdentifier: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.cloudWatchAlarmTemplateGroupIdentifier = cloudWatchAlarmTemplateGroupIdentifier
        self.eventBridgeRuleTemplateGroupIdentifier = eventBridgeRuleTemplateGroupIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Placeholder documentation for ListSignalMapsResponse
public struct ListSignalMapsOutput {
    /// A token used to retrieve the next set of results in paginated list responses.
    public var nextToken: Swift.String?
    /// Placeholder documentation for __listOfSignalMapSummary
    public var signalMaps: [MediaLiveClientTypes.SignalMapSummary]?

    public init(
        nextToken: Swift.String? = nil,
        signalMaps: [MediaLiveClientTypes.SignalMapSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.signalMaps = signalMaps
    }
}

/// Placeholder documentation for ListTagsForResourceRequest
public struct ListTagsForResourceInput {
    /// Placeholder documentation for __string
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

/// Placeholder documentation for ListTagsForResourceResponse
public struct ListTagsForResourceOutput {
    /// Placeholder documentation for Tags
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension MediaLiveClientTypes {
    /// Placeholder documentation for MaintenanceUpdateSettings
    public struct MaintenanceUpdateSettings {
        /// Choose one day of the week for maintenance. The chosen day is used for all future maintenance windows.
        public var maintenanceDay: MediaLiveClientTypes.MaintenanceDay?
        /// Choose a specific date for maintenance to occur. The chosen date is used for the next maintenance window only.
        public var maintenanceScheduledDate: Swift.String?
        /// Choose the hour that maintenance will start. The chosen time is used for all future maintenance windows.
        public var maintenanceStartTime: Swift.String?

        public init(
            maintenanceDay: MediaLiveClientTypes.MaintenanceDay? = nil,
            maintenanceScheduledDate: Swift.String? = nil,
            maintenanceStartTime: Swift.String? = nil
        )
        {
            self.maintenanceDay = maintenanceDay
            self.maintenanceScheduledDate = maintenanceScheduledDate
            self.maintenanceStartTime = maintenanceStartTime
        }
    }

}

/// Placeholder documentation for PurchaseOfferingRequest
public struct PurchaseOfferingInput {
    /// Number of resources
    /// This member is required.
    public var count: Swift.Int?
    /// Name for the new reservation
    public var name: Swift.String?
    /// Offering to purchase, e.g. '87654321'
    /// This member is required.
    public var offeringId: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    public var requestId: Swift.String?
    /// Requested reservation start time (UTC) in ISO-8601 format. The specified time must be between the first day of the current month and one year from now. If no value is given, the default is now.
    public var start: Swift.String?
    /// A collection of key-value pairs
    public var tags: [Swift.String: Swift.String]?

    public init(
        count: Swift.Int? = nil,
        name: Swift.String? = nil,
        offeringId: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        requestId: Swift.String? = nil,
        start: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.count = count
        self.name = name
        self.offeringId = offeringId
        self.renewalSettings = renewalSettings
        self.requestId = requestId
        self.start = start
        self.tags = tags
    }
}

/// Placeholder documentation for PurchaseOfferingResponse
public struct PurchaseOfferingOutput {
    /// Reserved resources available to use
    public var reservation: MediaLiveClientTypes.Reservation?

    public init(
        reservation: MediaLiveClientTypes.Reservation? = nil
    )
    {
        self.reservation = reservation
    }
}

extension MediaLiveClientTypes {

    /// Whether or not to force reboot the input device.
    public enum RebootInputDeviceForce: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [RebootInputDeviceForce] {
            return [
                .no,
                .yes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .no: return "NO"
            case .yes: return "YES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// A request to reboot an AWS Elemental device.
public struct RebootInputDeviceInput {
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    public var force: MediaLiveClientTypes.RebootInputDeviceForce?
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        force: MediaLiveClientTypes.RebootInputDeviceForce? = nil,
        inputDeviceId: Swift.String? = nil
    )
    {
        self.force = force
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for RebootInputDeviceResponse
public struct RebootInputDeviceOutput {

    public init() { }
}

/// Placeholder documentation for RejectInputDeviceTransferRequest
public struct RejectInputDeviceTransferInput {
    /// The unique ID of the input device to reject. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for RejectInputDeviceTransferResponse
public struct RejectInputDeviceTransferOutput {

    public init() { }
}

/// Pipelines to restart.
public struct RestartChannelPipelinesInput {
    /// ID of channel
    /// This member is required.
    public var channelId: Swift.String?
    /// An array of pipelines to restart in this channel. Format PIPELINE_0 or PIPELINE_1.
    public var pipelineIds: [MediaLiveClientTypes.ChannelPipelineIdToRestart]?

    public init(
        channelId: Swift.String? = nil,
        pipelineIds: [MediaLiveClientTypes.ChannelPipelineIdToRestart]? = nil
    )
    {
        self.channelId = channelId
        self.pipelineIds = pipelineIds
    }
}

/// Placeholder documentation for RestartChannelPipelinesResponse
public struct RestartChannelPipelinesOutput {
    /// Anywhere settings for this channel.
    public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The time in milliseconds by when the PVRE restart must occur.
    public var maintenanceStatus: Swift.String?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init(
        anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        maintenanceStatus: Swift.String? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.anywhereSettings = anywhereSettings
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.maintenanceStatus = maintenanceStatus
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

/// Placeholder documentation for StartChannelRequest
public struct StartChannelInput {
    /// A request to start a channel
    /// This member is required.
    public var channelId: Swift.String?

    public init(
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

/// Placeholder documentation for StartChannelResponse
public struct StartChannelOutput {
    /// Anywhere settings for this channel.
    public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init(
        anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.anywhereSettings = anywhereSettings
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

/// Placeholder documentation for StartDeleteMonitorDeploymentRequest
public struct StartDeleteMonitorDeploymentInput {
    /// A signal map's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

/// Placeholder documentation for StartDeleteMonitorDeploymentResponse
public struct StartDeleteMonitorDeploymentOutput {
    /// A signal map's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var cloudWatchAlarmTemplateGroupIds: [Swift.String]?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    public var discoveryEntryPointArn: Swift.String?
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    public var errorMessage: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var eventBridgeRuleTemplateGroupIds: [Swift.String]?
    /// A map representing an incomplete AWS media workflow as a graph.
    public var failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// A signal map's id.
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var lastDiscoveredAt: Foundation.Date?
    /// Represents the latest successful monitor deployment of a signal map.
    public var lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment?
    /// A map representing an AWS media workflow as a graph.
    public var mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    public var monitorChangesPendingDeployment: Swift.Bool?
    /// Represents the latest monitor deployment of a signal map.
    public var monitorDeployment: MediaLiveClientTypes.MonitorDeployment?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    public var status: MediaLiveClientTypes.SignalMapStatus?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cloudWatchAlarmTemplateGroupIds: [Swift.String]? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIds: [Swift.String]? = nil,
        failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        id: Swift.String? = nil,
        lastDiscoveredAt: Foundation.Date? = nil,
        lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment? = nil,
        mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        modifiedAt: Foundation.Date? = nil,
        monitorChangesPendingDeployment: Swift.Bool? = nil,
        monitorDeployment: MediaLiveClientTypes.MonitorDeployment? = nil,
        name: Swift.String? = nil,
        status: MediaLiveClientTypes.SignalMapStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cloudWatchAlarmTemplateGroupIds = cloudWatchAlarmTemplateGroupIds
        self.createdAt = createdAt
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.errorMessage = errorMessage
        self.eventBridgeRuleTemplateGroupIds = eventBridgeRuleTemplateGroupIds
        self.failedMediaResourceMap = failedMediaResourceMap
        self.id = id
        self.lastDiscoveredAt = lastDiscoveredAt
        self.lastSuccessfulMonitorDeployment = lastSuccessfulMonitorDeployment
        self.mediaResourceMap = mediaResourceMap
        self.modifiedAt = modifiedAt
        self.monitorChangesPendingDeployment = monitorChangesPendingDeployment
        self.monitorDeployment = monitorDeployment
        self.name = name
        self.status = status
        self.tags = tags
    }
}

/// Placeholder documentation for StartInputDeviceRequest
public struct StartInputDeviceInput {
    /// The unique ID of the input device to start. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for StartInputDeviceResponse
public struct StartInputDeviceOutput {

    public init() { }
}

/// Placeholder documentation for StartInputDeviceMaintenanceWindowRequest
public struct StartInputDeviceMaintenanceWindowInput {
    /// The unique ID of the input device to start a maintenance window for. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for StartInputDeviceMaintenanceWindowResponse
public struct StartInputDeviceMaintenanceWindowOutput {

    public init() { }
}

/// Placeholder documentation for StartMonitorDeploymentRequest
public struct StartMonitorDeploymentInput {
    /// Placeholder documentation for __boolean
    public var dryRun: Swift.Bool?
    /// A signal map's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        dryRun: Swift.Bool? = nil,
        identifier: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.identifier = identifier
    }
}

/// Placeholder documentation for StartMonitorDeploymentResponse
public struct StartMonitorDeploymentOutput {
    /// A signal map's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var cloudWatchAlarmTemplateGroupIds: [Swift.String]?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    public var discoveryEntryPointArn: Swift.String?
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    public var errorMessage: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var eventBridgeRuleTemplateGroupIds: [Swift.String]?
    /// A map representing an incomplete AWS media workflow as a graph.
    public var failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// A signal map's id.
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var lastDiscoveredAt: Foundation.Date?
    /// Represents the latest successful monitor deployment of a signal map.
    public var lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment?
    /// A map representing an AWS media workflow as a graph.
    public var mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    public var monitorChangesPendingDeployment: Swift.Bool?
    /// Represents the latest monitor deployment of a signal map.
    public var monitorDeployment: MediaLiveClientTypes.MonitorDeployment?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    public var status: MediaLiveClientTypes.SignalMapStatus?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cloudWatchAlarmTemplateGroupIds: [Swift.String]? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIds: [Swift.String]? = nil,
        failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        id: Swift.String? = nil,
        lastDiscoveredAt: Foundation.Date? = nil,
        lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment? = nil,
        mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        modifiedAt: Foundation.Date? = nil,
        monitorChangesPendingDeployment: Swift.Bool? = nil,
        monitorDeployment: MediaLiveClientTypes.MonitorDeployment? = nil,
        name: Swift.String? = nil,
        status: MediaLiveClientTypes.SignalMapStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cloudWatchAlarmTemplateGroupIds = cloudWatchAlarmTemplateGroupIds
        self.createdAt = createdAt
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.errorMessage = errorMessage
        self.eventBridgeRuleTemplateGroupIds = eventBridgeRuleTemplateGroupIds
        self.failedMediaResourceMap = failedMediaResourceMap
        self.id = id
        self.lastDiscoveredAt = lastDiscoveredAt
        self.lastSuccessfulMonitorDeployment = lastSuccessfulMonitorDeployment
        self.mediaResourceMap = mediaResourceMap
        self.modifiedAt = modifiedAt
        self.monitorChangesPendingDeployment = monitorChangesPendingDeployment
        self.monitorDeployment = monitorDeployment
        self.name = name
        self.status = status
        self.tags = tags
    }
}

/// Placeholder documentation for StartMultiplexRequest
public struct StartMultiplexInput {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init(
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

/// Placeholder documentation for StartMultiplexResponse
public struct StartMultiplexOutput {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

/// Placeholder documentation for StartUpdateSignalMapRequest
public struct StartUpdateSignalMapInput {
    /// Placeholder documentation for __listOf__stringPatternS
    public var cloudWatchAlarmTemplateGroupIdentifiers: [Swift.String]?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    public var discoveryEntryPointArn: Swift.String?
    /// Placeholder documentation for __listOf__stringPatternS
    public var eventBridgeRuleTemplateGroupIdentifiers: [Swift.String]?
    /// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
    public var forceRediscovery: Swift.Bool?
    /// A signal map's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?

    public init(
        cloudWatchAlarmTemplateGroupIdentifiers: [Swift.String]? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIdentifiers: [Swift.String]? = nil,
        forceRediscovery: Swift.Bool? = nil,
        identifier: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.cloudWatchAlarmTemplateGroupIdentifiers = cloudWatchAlarmTemplateGroupIdentifiers
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.eventBridgeRuleTemplateGroupIdentifiers = eventBridgeRuleTemplateGroupIdentifiers
        self.forceRediscovery = forceRediscovery
        self.identifier = identifier
        self.name = name
    }
}

/// Placeholder documentation for StartUpdateSignalMapResponse
public struct StartUpdateSignalMapOutput {
    /// A signal map's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var cloudWatchAlarmTemplateGroupIds: [Swift.String]?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    public var discoveryEntryPointArn: Swift.String?
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    public var errorMessage: Swift.String?
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    public var eventBridgeRuleTemplateGroupIds: [Swift.String]?
    /// A map representing an incomplete AWS media workflow as a graph.
    public var failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// A signal map's id.
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var lastDiscoveredAt: Foundation.Date?
    /// Represents the latest successful monitor deployment of a signal map.
    public var lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment?
    /// A map representing an AWS media workflow as a graph.
    public var mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    public var monitorChangesPendingDeployment: Swift.Bool?
    /// Represents the latest monitor deployment of a signal map.
    public var monitorDeployment: MediaLiveClientTypes.MonitorDeployment?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    public var status: MediaLiveClientTypes.SignalMapStatus?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cloudWatchAlarmTemplateGroupIds: [Swift.String]? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        discoveryEntryPointArn: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        eventBridgeRuleTemplateGroupIds: [Swift.String]? = nil,
        failedMediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        id: Swift.String? = nil,
        lastDiscoveredAt: Foundation.Date? = nil,
        lastSuccessfulMonitorDeployment: MediaLiveClientTypes.SuccessfulMonitorDeployment? = nil,
        mediaResourceMap: [Swift.String: MediaLiveClientTypes.MediaResource]? = nil,
        modifiedAt: Foundation.Date? = nil,
        monitorChangesPendingDeployment: Swift.Bool? = nil,
        monitorDeployment: MediaLiveClientTypes.MonitorDeployment? = nil,
        name: Swift.String? = nil,
        status: MediaLiveClientTypes.SignalMapStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cloudWatchAlarmTemplateGroupIds = cloudWatchAlarmTemplateGroupIds
        self.createdAt = createdAt
        self.description = description
        self.discoveryEntryPointArn = discoveryEntryPointArn
        self.errorMessage = errorMessage
        self.eventBridgeRuleTemplateGroupIds = eventBridgeRuleTemplateGroupIds
        self.failedMediaResourceMap = failedMediaResourceMap
        self.id = id
        self.lastDiscoveredAt = lastDiscoveredAt
        self.lastSuccessfulMonitorDeployment = lastSuccessfulMonitorDeployment
        self.mediaResourceMap = mediaResourceMap
        self.modifiedAt = modifiedAt
        self.monitorChangesPendingDeployment = monitorChangesPendingDeployment
        self.monitorDeployment = monitorDeployment
        self.name = name
        self.status = status
        self.tags = tags
    }
}

/// Placeholder documentation for StopChannelRequest
public struct StopChannelInput {
    /// A request to stop a running channel
    /// This member is required.
    public var channelId: Swift.String?

    public init(
        channelId: Swift.String? = nil
    )
    {
        self.channelId = channelId
    }
}

/// Placeholder documentation for StopChannelResponse
public struct StopChannelOutput {
    /// Anywhere settings for this channel.
    public var anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings?
    /// The unique arn of the channel.
    public var arn: Swift.String?
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The endpoints where outgoing connections initiate from
    public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
    /// Encoder Settings
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// The unique id of the channel.
    public var id: Swift.String?
    /// List of input attachments for channel.
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level being written to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
    /// The name of the channel. (user-mutable)
    public var name: Swift.String?
    /// Runtime details for the pipelines of a running channel.
    public var pipelineDetails: [MediaLiveClientTypes.PipelineDetail]?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    public var roleArn: Swift.String?
    /// Placeholder documentation for ChannelState
    public var state: MediaLiveClientTypes.ChannelState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// Settings for VPC output
    public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

    public init(
        anywhereSettings: MediaLiveClientTypes.DescribeAnywhereSettings? = nil,
        arn: Swift.String? = nil,
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        id: Swift.String? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
        name: Swift.String? = nil,
        pipelineDetails: [MediaLiveClientTypes.PipelineDetail]? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        state: MediaLiveClientTypes.ChannelState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
    )
    {
        self.anywhereSettings = anywhereSettings
        self.arn = arn
        self.cdiInputSpecification = cdiInputSpecification
        self.channelClass = channelClass
        self.destinations = destinations
        self.egressEndpoints = egressEndpoints
        self.encoderSettings = encoderSettings
        self.id = id
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.pipelineDetails = pipelineDetails
        self.pipelinesRunningCount = pipelinesRunningCount
        self.roleArn = roleArn
        self.state = state
        self.tags = tags
        self.vpc = vpc
    }
}

/// Placeholder documentation for StopInputDeviceRequest
public struct StopInputDeviceInput {
    /// The unique ID of the input device to stop. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
    }
}

/// Placeholder documentation for StopInputDeviceResponse
public struct StopInputDeviceOutput {

    public init() { }
}

/// Placeholder documentation for StopMultiplexRequest
public struct StopMultiplexInput {
    /// The ID of the multiplex.
    /// This member is required.
    public var multiplexId: Swift.String?

    public init(
        multiplexId: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
    }
}

/// Placeholder documentation for StopMultiplexResponse
public struct StopMultiplexOutput {
    /// The unique arn of the multiplex.
    public var arn: Swift.String?
    /// A list of availability zones for the multiplex.
    public var availabilityZones: [Swift.String]?
    /// A list of the multiplex output destinations.
    public var destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    /// The unique id of the multiplex.
    public var id: Swift.String?
    /// Configuration for a multiplex event.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// The name of the multiplex.
    public var name: Swift.String?
    /// The number of currently healthy pipelines.
    public var pipelinesRunningCount: Swift.Int?
    /// The number of programs in the multiplex.
    public var programCount: Swift.Int?
    /// The current state of the multiplex.
    public var state: MediaLiveClientTypes.MultiplexState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.MultiplexOutputDestination]? = nil,
        id: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        pipelinesRunningCount: Swift.Int? = nil,
        programCount: Swift.Int? = nil,
        state: MediaLiveClientTypes.MultiplexState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZones = availabilityZones
        self.destinations = destinations
        self.id = id
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.pipelinesRunningCount = pipelinesRunningCount
        self.programCount = programCount
        self.state = state
        self.tags = tags
    }
}

/// A request to transfer an input device.
public struct TransferInputDeviceInput {
    /// The unique ID of this input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?
    /// The AWS account ID (12 digits) for the recipient of the device transfer.
    public var targetCustomerId: Swift.String?
    /// The target AWS region to transfer the device.
    public var targetRegion: Swift.String?
    /// An optional message for the recipient. Maximum 280 characters.
    public var transferMessage: Swift.String?

    public init(
        inputDeviceId: Swift.String? = nil,
        targetCustomerId: Swift.String? = nil,
        targetRegion: Swift.String? = nil,
        transferMessage: Swift.String? = nil
    )
    {
        self.inputDeviceId = inputDeviceId
        self.targetCustomerId = targetCustomerId
        self.targetRegion = targetRegion
        self.transferMessage = transferMessage
    }
}

/// Placeholder documentation for TransferInputDeviceResponse
public struct TransferInputDeviceOutput {

    public init() { }
}

/// List of account configuration parameters to update.
public struct UpdateAccountConfigurationInput {
    /// Placeholder documentation for AccountConfiguration
    public var accountConfiguration: MediaLiveClientTypes.AccountConfiguration?

    public init(
        accountConfiguration: MediaLiveClientTypes.AccountConfiguration? = nil
    )
    {
        self.accountConfiguration = accountConfiguration
    }
}

/// Placeholder documentation for UpdateAccountConfigurationResponse
public struct UpdateAccountConfigurationOutput {
    /// Placeholder documentation for AccountConfiguration
    public var accountConfiguration: MediaLiveClientTypes.AccountConfiguration?

    public init(
        accountConfiguration: MediaLiveClientTypes.AccountConfiguration? = nil
    )
    {
        self.accountConfiguration = accountConfiguration
    }
}

/// A request to update a channel.
public struct UpdateChannelInput {
    /// Specification of CDI inputs for this channel
    public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    /// channel ID
    /// This member is required.
    public var channelId: Swift.String?
    /// A list of output destinations for this channel.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?
    /// The encoder settings for this channel.
    public var encoderSettings: MediaLiveClientTypes.EncoderSettings?
    /// Placeholder documentation for __listOfInputAttachment
    public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    /// Specification of network and file inputs for this channel
    public var inputSpecification: MediaLiveClientTypes.InputSpecification?
    /// The log level to write to CloudWatch Logs.
    public var logLevel: MediaLiveClientTypes.LogLevel?
    /// Maintenance settings for this channel.
    public var maintenance: MediaLiveClientTypes.MaintenanceUpdateSettings?
    /// The name of the channel.
    public var name: Swift.String?
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
    public var roleArn: Swift.String?

    public init(
        cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
        channelId: Swift.String? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
        encoderSettings: MediaLiveClientTypes.EncoderSettings? = nil,
        inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
        inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
        logLevel: MediaLiveClientTypes.LogLevel? = nil,
        maintenance: MediaLiveClientTypes.MaintenanceUpdateSettings? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.cdiInputSpecification = cdiInputSpecification
        self.channelId = channelId
        self.destinations = destinations
        self.encoderSettings = encoderSettings
        self.inputAttachments = inputAttachments
        self.inputSpecification = inputSpecification
        self.logLevel = logLevel
        self.maintenance = maintenance
        self.name = name
        self.roleArn = roleArn
    }
}

/// Placeholder documentation for UpdateChannelResponse
public struct UpdateChannelOutput {
    /// Placeholder documentation for Channel
    public var channel: MediaLiveClientTypes.Channel?

    public init(
        channel: MediaLiveClientTypes.Channel? = nil
    )
    {
        self.channel = channel
    }
}

/// Channel class that the channel should be updated to.
public struct UpdateChannelClassInput {
    /// The channel class that you wish to update this channel to use.
    /// This member is required.
    public var channelClass: MediaLiveClientTypes.ChannelClass?
    /// Channel Id of the channel whose class should be updated.
    /// This member is required.
    public var channelId: Swift.String?
    /// A list of output destinations for this channel.
    public var destinations: [MediaLiveClientTypes.OutputDestination]?

    public init(
        channelClass: MediaLiveClientTypes.ChannelClass? = nil,
        channelId: Swift.String? = nil,
        destinations: [MediaLiveClientTypes.OutputDestination]? = nil
    )
    {
        self.channelClass = channelClass
        self.channelId = channelId
        self.destinations = destinations
    }
}

/// Placeholder documentation for UpdateChannelClassResponse
public struct UpdateChannelClassOutput {
    /// Placeholder documentation for Channel
    public var channel: MediaLiveClientTypes.Channel?

    public init(
        channel: MediaLiveClientTypes.Channel? = nil
    )
    {
        self.channel = channel
    }
}

/// A request to update the channel placement group
public struct UpdateChannelPlacementGroupInput {
    /// The ID of the channel placement group.
    /// This member is required.
    public var channelPlacementGroupId: Swift.String?
    /// The ID of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Include this parameter only if you want to change the current name of the ChannelPlacementGroup. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    public var name: Swift.String?
    /// Include this parameter only if you want to change the list of Nodes that are associated with the ChannelPlacementGroup.
    public var nodes: [Swift.String]?

    public init(
        channelPlacementGroupId: Swift.String? = nil,
        clusterId: Swift.String? = nil,
        name: Swift.String? = nil,
        nodes: [Swift.String]? = nil
    )
    {
        self.channelPlacementGroupId = channelPlacementGroupId
        self.clusterId = clusterId
        self.name = name
        self.nodes = nodes
    }
}

/// Placeholder documentation for UpdateChannelPlacementGroupResponse
public struct UpdateChannelPlacementGroupOutput {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    public var arn: Swift.String?
    /// Used in ListChannelPlacementGroupsResult
    public var channels: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The name that you specified for the ChannelPlacementGroup.
    public var name: Swift.String?
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    public var nodes: [Swift.String]?
    /// The current state of the ChannelPlacementGroup.
    public var state: MediaLiveClientTypes.ChannelPlacementGroupState?

    public init(
        arn: Swift.String? = nil,
        channels: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        nodes: [Swift.String]? = nil,
        state: MediaLiveClientTypes.ChannelPlacementGroupState? = nil
    )
    {
        self.arn = arn
        self.channels = channels
        self.clusterId = clusterId
        self.id = id
        self.name = name
        self.nodes = nodes
        self.state = state
    }
}

/// Placeholder documentation for UpdateCloudWatchAlarmTemplateRequest
public struct UpdateCloudWatchAlarmTemplateInput {
    /// The comparison operator used to compare the specified statistic and the threshold.
    public var comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator?
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    public var datapointsToAlarm: Swift.Int?
    /// A resource's optional description.
    public var description: Swift.String?
    /// The number of periods over which data is compared to the specified threshold.
    public var evaluationPeriods: Swift.Int?
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    public var groupIdentifier: Swift.String?
    /// A cloudwatch alarm template's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    public var metricName: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// The period, in seconds, over which the specified statistic is applied.
    public var period: Swift.Int?
    /// The statistic to apply to the alarm's metric data.
    public var statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic?
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    public var targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType?
    /// The threshold value to compare with the specified statistic.
    public var threshold: Swift.Double?
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    public var treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData?

    public init(
        comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        description: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        groupIdentifier: Swift.String? = nil,
        identifier: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic? = nil,
        targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData? = nil
    )
    {
        self.comparisonOperator = comparisonOperator
        self.datapointsToAlarm = datapointsToAlarm
        self.description = description
        self.evaluationPeriods = evaluationPeriods
        self.groupIdentifier = groupIdentifier
        self.identifier = identifier
        self.metricName = metricName
        self.name = name
        self.period = period
        self.statistic = statistic
        self.targetResourceType = targetResourceType
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

/// Placeholder documentation for UpdateCloudWatchAlarmTemplateResponse
public struct UpdateCloudWatchAlarmTemplateOutput {
    /// A cloudwatch alarm template's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// The comparison operator used to compare the specified statistic and the threshold.
    public var comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    public var datapointsToAlarm: Swift.Int?
    /// A resource's optional description.
    public var description: Swift.String?
    /// The number of periods over which data is compared to the specified threshold.
    public var evaluationPeriods: Swift.Int?
    /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
    public var groupId: Swift.String?
    /// A cloudwatch alarm template's id. AWS provided templates have ids that start with aws-
    public var id: Swift.String?
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    public var metricName: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// The period, in seconds, over which the specified statistic is applied.
    public var period: Swift.Int?
    /// The statistic to apply to the alarm's metric data.
    public var statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    public var targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType?
    /// The threshold value to compare with the specified statistic.
    public var threshold: Swift.Double?
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    public var treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData?

    public init(
        arn: Swift.String? = nil,
        comparisonOperator: MediaLiveClientTypes.CloudWatchAlarmTemplateComparisonOperator? = nil,
        createdAt: Foundation.Date? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        description: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        groupId: Swift.String? = nil,
        id: Swift.String? = nil,
        metricName: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: MediaLiveClientTypes.CloudWatchAlarmTemplateStatistic? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        targetResourceType: MediaLiveClientTypes.CloudWatchAlarmTemplateTargetResourceType? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: MediaLiveClientTypes.CloudWatchAlarmTemplateTreatMissingData? = nil
    )
    {
        self.arn = arn
        self.comparisonOperator = comparisonOperator
        self.createdAt = createdAt
        self.datapointsToAlarm = datapointsToAlarm
        self.description = description
        self.evaluationPeriods = evaluationPeriods
        self.groupId = groupId
        self.id = id
        self.metricName = metricName
        self.modifiedAt = modifiedAt
        self.name = name
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.targetResourceType = targetResourceType
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

/// Placeholder documentation for UpdateCloudWatchAlarmTemplateGroupRequest
public struct UpdateCloudWatchAlarmTemplateGroupInput {
    /// A resource's optional description.
    public var description: Swift.String?
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        description: Swift.String? = nil,
        identifier: Swift.String? = nil
    )
    {
        self.description = description
        self.identifier = identifier
    }
}

/// Placeholder documentation for UpdateCloudWatchAlarmTemplateGroupResponse
public struct UpdateCloudWatchAlarmTemplateGroupOutput {
    /// A cloudwatch alarm template group's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// A request to update the cluster.
public struct UpdateClusterInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// Include this parameter only if you want to change the current name of the Cluster. Specify a name that is unique in the AWS account. You can't change the name. Names are case-sensitive.
    public var name: Swift.String?
    /// Include this property only if you want to change the current connections between the Nodes in the Cluster and the Networks the Cluster is associated with.
    public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettingsUpdateRequest?

    public init(
        clusterId: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.ClusterNetworkSettingsUpdateRequest? = nil
    )
    {
        self.clusterId = clusterId
        self.name = name
        self.networkSettings = networkSettings
    }
}

/// Placeholder documentation for UpdateClusterResponse
public struct UpdateClusterOutput {
    /// The ARN of the Cluster.
    public var arn: Swift.String?
    /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
    public var channelIds: [Swift.String]?
    /// The hardware type for the Cluster
    public var clusterType: MediaLiveClientTypes.ClusterType?
    /// The unique ID of the Cluster.
    public var id: Swift.String?
    /// The user-specified name of the Cluster.
    public var name: Swift.String?
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    public var networkSettings: MediaLiveClientTypes.ClusterNetworkSettings?
    /// The current state of the Cluster.
    public var state: MediaLiveClientTypes.ClusterState?

    public init(
        arn: Swift.String? = nil,
        channelIds: [Swift.String]? = nil,
        clusterType: MediaLiveClientTypes.ClusterType? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.ClusterNetworkSettings? = nil,
        state: MediaLiveClientTypes.ClusterState? = nil
    )
    {
        self.arn = arn
        self.channelIds = channelIds
        self.clusterType = clusterType
        self.id = id
        self.name = name
        self.networkSettings = networkSettings
        self.state = state
    }
}

/// Placeholder documentation for UpdateEventBridgeRuleTemplateRequest
public struct UpdateEventBridgeRuleTemplateInput {
    /// A resource's optional description.
    public var description: Swift.String?
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    public var eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]?
    /// The type of event to match with the rule.
    public var eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType?
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    public var groupIdentifier: Swift.String?
    /// An eventbridge rule template's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]? = nil,
        eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType? = nil,
        groupIdentifier: Swift.String? = nil,
        identifier: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.eventTargets = eventTargets
        self.eventType = eventType
        self.groupIdentifier = groupIdentifier
        self.identifier = identifier
        self.name = name
    }
}

/// Placeholder documentation for UpdateEventBridgeRuleTemplateResponse
public struct UpdateEventBridgeRuleTemplateOutput {
    /// An eventbridge rule template's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    public var eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]?
    /// The type of event to match with the rule.
    public var eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType?
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
    public var groupId: Swift.String?
    /// An eventbridge rule template's id. AWS provided templates have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eventTargets: [MediaLiveClientTypes.EventBridgeRuleTemplateTarget]? = nil,
        eventType: MediaLiveClientTypes.EventBridgeRuleTemplateEventType? = nil,
        groupId: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.eventTargets = eventTargets
        self.eventType = eventType
        self.groupId = groupId
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

/// Placeholder documentation for UpdateEventBridgeRuleTemplateGroupRequest
public struct UpdateEventBridgeRuleTemplateGroupInput {
    /// A resource's optional description.
    public var description: Swift.String?
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        description: Swift.String? = nil,
        identifier: Swift.String? = nil
    )
    {
        self.description = description
        self.identifier = identifier
    }
}

/// Placeholder documentation for UpdateEventBridgeRuleTemplateGroupResponse
public struct UpdateEventBridgeRuleTemplateGroupOutput {
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    public var arn: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var createdAt: Foundation.Date?
    /// A resource's optional description.
    public var description: Swift.String?
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with aws-
    public var id: Swift.String?
    /// Placeholder documentation for __timestampIso8601
    public var modifiedAt: Foundation.Date?
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    public var name: Swift.String?
    /// Represents the tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.modifiedAt = modifiedAt
        self.name = name
        self.tags = tags
    }
}

extension MediaLiveClientTypes {
    /// Settings for a Multicast input. Contains a list of multicast Urls and optional source ip addresses.
    public struct MulticastSettingsUpdateRequest {
        /// Placeholder documentation for __listOfMulticastSourceUpdateRequest
        public var sources: [MediaLiveClientTypes.MulticastSourceUpdateRequest]?

        public init(
            sources: [MediaLiveClientTypes.MulticastSourceUpdateRequest]? = nil
        )
        {
            self.sources = sources
        }
    }

}

/// A request to update an input.
public struct UpdateInputInput {
    /// Destination settings for PUSH type inputs.
    public var destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    /// Settings for the devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceRequest]?
    /// Unique ID of the input.
    /// This member is required.
    public var inputId: Swift.String?
    /// A list of security groups referenced by IDs to attach to the input.
    public var inputSecurityGroups: [Swift.String]?
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    /// Multicast Input settings.
    public var multicastSettings: MediaLiveClientTypes.MulticastSettingsUpdateRequest?
    /// Name of the input.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    public var sources: [MediaLiveClientTypes.InputSourceRequest]?
    /// The settings associated with an SRT input.
    public var srtSettings: MediaLiveClientTypes.SrtSettingsRequest?

    public init(
        destinations: [MediaLiveClientTypes.InputDestinationRequest]? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceRequest]? = nil,
        inputId: Swift.String? = nil,
        inputSecurityGroups: [Swift.String]? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]? = nil,
        multicastSettings: MediaLiveClientTypes.MulticastSettingsUpdateRequest? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sources: [MediaLiveClientTypes.InputSourceRequest]? = nil,
        srtSettings: MediaLiveClientTypes.SrtSettingsRequest? = nil
    )
    {
        self.destinations = destinations
        self.inputDevices = inputDevices
        self.inputId = inputId
        self.inputSecurityGroups = inputSecurityGroups
        self.mediaConnectFlows = mediaConnectFlows
        self.multicastSettings = multicastSettings
        self.name = name
        self.roleArn = roleArn
        self.sources = sources
        self.srtSettings = srtSettings
    }
}

/// Placeholder documentation for UpdateInputResponse
public struct UpdateInputOutput {
    /// Placeholder documentation for Input
    public var input: MediaLiveClientTypes.Input?

    public init(
        input: MediaLiveClientTypes.Input? = nil
    )
    {
        self.input = input
    }
}

/// A request to update an input device.
public struct UpdateInputDeviceInput {
    /// The Availability Zone you want associated with this input device.
    public var availabilityZone: Swift.String?
    /// The settings that you want to apply to the HD input device.
    public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings?
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    /// This member is required.
    public var inputDeviceId: Swift.String?
    /// The name that you assigned to this input device (not the unique ID).
    public var name: Swift.String?
    /// The settings that you want to apply to the UHD input device.
    public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings?

    public init(
        availabilityZone: Swift.String? = nil,
        hdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings? = nil,
        inputDeviceId: Swift.String? = nil,
        name: Swift.String? = nil,
        uhdDeviceSettings: MediaLiveClientTypes.InputDeviceConfigurableSettings? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.hdDeviceSettings = hdDeviceSettings
        self.inputDeviceId = inputDeviceId
        self.name = name
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

/// Placeholder documentation for UpdateInputDeviceResponse
public struct UpdateInputDeviceOutput {
    /// The unique ARN of the input device.
    public var arn: Swift.String?
    /// The Availability Zone associated with this input device.
    public var availabilityZone: Swift.String?
    /// The state of the connection between the input device and AWS.
    public var connectionState: MediaLiveClientTypes.InputDeviceConnectionState?
    /// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
    public var deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState?
    /// The status of software on the input device.
    public var deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus?
    /// Settings that describe an input device that is type HD.
    public var hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings?
    /// The unique ID of the input device.
    public var id: Swift.String?
    /// The network MAC address of the input device.
    public var macAddress: Swift.String?
    /// An array of the ARNs for the MediaLive inputs attached to the device. Returned only if the outputType is MEDIALIVE_INPUT.
    public var medialiveInputArns: [Swift.String]?
    /// A name that you specify for the input device.
    public var name: Swift.String?
    /// The network settings for the input device.
    public var networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings?
    /// The output attachment type of the input device. Specifies MEDIACONNECT_FLOW if this device is the source for a MediaConnect flow. Specifies MEDIALIVE_INPUT if this device is the source for a MediaLive input.
    public var outputType: MediaLiveClientTypes.InputDeviceOutputType?
    /// The unique serial number of the input device.
    public var serialNumber: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// The type of the input device.
    public var type: MediaLiveClientTypes.InputDeviceType?
    /// Settings that describe an input device that is type UHD.
    public var uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings?

    public init(
        arn: Swift.String? = nil,
        availabilityZone: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.InputDeviceConnectionState? = nil,
        deviceSettingsSyncState: MediaLiveClientTypes.DeviceSettingsSyncState? = nil,
        deviceUpdateStatus: MediaLiveClientTypes.DeviceUpdateStatus? = nil,
        hdDeviceSettings: MediaLiveClientTypes.InputDeviceHdSettings? = nil,
        id: Swift.String? = nil,
        macAddress: Swift.String? = nil,
        medialiveInputArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        networkSettings: MediaLiveClientTypes.InputDeviceNetworkSettings? = nil,
        outputType: MediaLiveClientTypes.InputDeviceOutputType? = nil,
        serialNumber: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: MediaLiveClientTypes.InputDeviceType? = nil,
        uhdDeviceSettings: MediaLiveClientTypes.InputDeviceUhdSettings? = nil
    )
    {
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.connectionState = connectionState
        self.deviceSettingsSyncState = deviceSettingsSyncState
        self.deviceUpdateStatus = deviceUpdateStatus
        self.hdDeviceSettings = hdDeviceSettings
        self.id = id
        self.macAddress = macAddress
        self.medialiveInputArns = medialiveInputArns
        self.name = name
        self.networkSettings = networkSettings
        self.outputType = outputType
        self.serialNumber = serialNumber
        self.tags = tags
        self.type = type
        self.uhdDeviceSettings = uhdDeviceSettings
    }
}

/// The request to update some combination of the Input Security Group name and the IPv4 CIDRs the Input Security Group should allow.
public struct UpdateInputSecurityGroupInput {
    /// The id of the Input Security Group to update.
    /// This member is required.
    public var inputSecurityGroupId: Swift.String?
    /// A collection of key-value pairs.
    public var tags: [Swift.String: Swift.String]?
    /// List of IPv4 CIDR addresses to whitelist
    public var whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]?

    public init(
        inputSecurityGroupId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        whitelistRules: [MediaLiveClientTypes.InputWhitelistRuleCidr]? = nil
    )
    {
        self.inputSecurityGroupId = inputSecurityGroupId
        self.tags = tags
        self.whitelistRules = whitelistRules
    }
}

/// Placeholder documentation for UpdateInputSecurityGroupResponse
public struct UpdateInputSecurityGroupOutput {
    /// An Input Security Group
    public var securityGroup: MediaLiveClientTypes.InputSecurityGroup?

    public init(
        securityGroup: MediaLiveClientTypes.InputSecurityGroup? = nil
    )
    {
        self.securityGroup = securityGroup
    }
}

/// A request to update a multiplex.
public struct UpdateMultiplexInput {
    /// ID of the multiplex to update.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The new settings for a multiplex.
    public var multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    /// Name of the multiplex.
    public var name: Swift.String?
    /// Placeholder documentation for MultiplexPacketIdentifiersMapping
    public var packetIdentifiersMapping: [Swift.String: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap]?

    public init(
        multiplexId: Swift.String? = nil,
        multiplexSettings: MediaLiveClientTypes.MultiplexSettings? = nil,
        name: Swift.String? = nil,
        packetIdentifiersMapping: [Swift.String: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap]? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexSettings = multiplexSettings
        self.name = name
        self.packetIdentifiersMapping = packetIdentifiersMapping
    }
}

/// Placeholder documentation for UpdateMultiplexResponse
public struct UpdateMultiplexOutput {
    /// The updated multiplex.
    public var multiplex: MediaLiveClientTypes.Multiplex?

    public init(
        multiplex: MediaLiveClientTypes.Multiplex? = nil
    )
    {
        self.multiplex = multiplex
    }
}

/// A request to update a program in a multiplex.
public struct UpdateMultiplexProgramInput {
    /// The ID of the multiplex of the program to update.
    /// This member is required.
    public var multiplexId: Swift.String?
    /// The new settings for a multiplex program.
    public var multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings?
    /// The name of the program to update.
    /// This member is required.
    public var programName: Swift.String?

    public init(
        multiplexId: Swift.String? = nil,
        multiplexProgramSettings: MediaLiveClientTypes.MultiplexProgramSettings? = nil,
        programName: Swift.String? = nil
    )
    {
        self.multiplexId = multiplexId
        self.multiplexProgramSettings = multiplexProgramSettings
        self.programName = programName
    }
}

/// Placeholder documentation for UpdateMultiplexProgramResponse
public struct UpdateMultiplexProgramOutput {
    /// The updated multiplex program.
    public var multiplexProgram: MediaLiveClientTypes.MultiplexProgram?

    public init(
        multiplexProgram: MediaLiveClientTypes.MultiplexProgram? = nil
    )
    {
        self.multiplexProgram = multiplexProgram
    }
}

/// A request to update the network.
public struct UpdateNetworkInput {
    /// Include this parameter only if you want to change the pool of IP addresses in the network. An array of IpPoolCreateRequests that identify a collection of IP addresses in this network that you want to reserve for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPoolUpdateRequest specifies one CIDR block.
    public var ipPools: [MediaLiveClientTypes.IpPoolUpdateRequest]?
    /// Include this parameter only if you want to change the name of the Network. Specify a name that is unique in the AWS account. Names are case-sensitive.
    public var name: Swift.String?
    /// The ID of the network
    /// This member is required.
    public var networkId: Swift.String?
    /// Include this parameter only if you want to change or add routes in the Network. An array of Routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    public var routes: [MediaLiveClientTypes.RouteUpdateRequest]?

    public init(
        ipPools: [MediaLiveClientTypes.IpPoolUpdateRequest]? = nil,
        name: Swift.String? = nil,
        networkId: Swift.String? = nil,
        routes: [MediaLiveClientTypes.RouteUpdateRequest]? = nil
    )
    {
        self.ipPools = ipPools
        self.name = name
        self.networkId = networkId
        self.routes = routes
    }
}

/// Placeholder documentation for UpdateNetworkResponse
public struct UpdateNetworkOutput {
    /// The ARN of this Network. It is automatically assigned when the Network is created.
    public var arn: Swift.String?
    /// Placeholder documentation for __listOf__string
    public var associatedClusterIds: [Swift.String]?
    /// The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// An array of IpPools in your organization's network that identify a collection of IP addresses in this network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
    public var ipPools: [MediaLiveClientTypes.IpPool]?
    /// The name that you specified for the Network.
    public var name: Swift.String?
    /// An array of Routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    public var routes: [MediaLiveClientTypes.Route]?
    /// The current state of the Network. Only MediaLive Anywhere can change the state.
    public var state: MediaLiveClientTypes.NetworkState?

    public init(
        arn: Swift.String? = nil,
        associatedClusterIds: [Swift.String]? = nil,
        id: Swift.String? = nil,
        ipPools: [MediaLiveClientTypes.IpPool]? = nil,
        name: Swift.String? = nil,
        routes: [MediaLiveClientTypes.Route]? = nil,
        state: MediaLiveClientTypes.NetworkState? = nil
    )
    {
        self.arn = arn
        self.associatedClusterIds = associatedClusterIds
        self.id = id
        self.ipPools = ipPools
        self.name = name
        self.routes = routes
        self.state = state
    }
}

/// A request to update the node.
public struct UpdateNodeInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// Include this parameter only if you want to change the current name of the Node. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    public var name: Swift.String?
    /// The ID of the node.
    /// This member is required.
    public var nodeId: Swift.String?
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?

    public init(
        clusterId: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeId: Swift.String? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil
    )
    {
        self.clusterId = clusterId
        self.name = name
        self.nodeId = nodeId
        self.role = role
    }
}

/// Placeholder documentation for UpdateNodeResponse
public struct UpdateNodeOutput {
    /// The ARN of the Node. It is automatically assigned when the Node is created.
    public var arn: Swift.String?
    /// An array of IDs. Each ID is one ChannelPlacementGroup that is associated with this Node. Empty if the Node is not yet associated with any groups.
    public var channelPlacementGroups: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The current connection state of the Node.
    public var connectionState: MediaLiveClientTypes.NodeConnectionState?
    /// The unique ID of the Node. Unique in the Cluster. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the EC2 instance hosting the Node.
    public var instanceArn: Swift.String?
    /// The name that you specified for the Node.
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
    /// The initial role current role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?
    /// The current state of the Node.
    public var state: MediaLiveClientTypes.NodeState?

    public init(
        arn: Swift.String? = nil,
        channelPlacementGroups: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.NodeConnectionState? = nil,
        id: Swift.String? = nil,
        instanceArn: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil,
        state: MediaLiveClientTypes.NodeState? = nil
    )
    {
        self.arn = arn
        self.channelPlacementGroups = channelPlacementGroups
        self.clusterId = clusterId
        self.connectionState = connectionState
        self.id = id
        self.instanceArn = instanceArn
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.role = role
        self.state = state
    }
}

extension MediaLiveClientTypes {

    /// Used in UpdateNodeStateRequest.
    public enum UpdateNodeStateShape: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case draining
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateNodeStateShape] {
            return [
                .active,
                .draining
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .draining: return "DRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// A request to update the state of a node.
public struct UpdateNodeStateInput {
    /// The ID of the cluster
    /// This member is required.
    public var clusterId: Swift.String?
    /// The ID of the node.
    /// This member is required.
    public var nodeId: Swift.String?
    /// The state to apply to the Node. Set to ACTIVE (COMMISSIONED) to indicate that the Node is deployable. MediaLive Anywhere will consider this node it needs a Node to run a Channel on, or when it needs a Node to promote from a backup node to an active node. Set to DRAINING to isolate the Node so that MediaLive Anywhere won't use it.
    public var state: MediaLiveClientTypes.UpdateNodeStateShape?

    public init(
        clusterId: Swift.String? = nil,
        nodeId: Swift.String? = nil,
        state: MediaLiveClientTypes.UpdateNodeStateShape? = nil
    )
    {
        self.clusterId = clusterId
        self.nodeId = nodeId
        self.state = state
    }
}

/// Placeholder documentation for UpdateNodeStateResponse
public struct UpdateNodeStateOutput {
    /// The ARN of the Node. It is automatically assigned when the Node is created.
    public var arn: Swift.String?
    /// An array of IDs. Each ID is one ChannelPlacementGroup that is associated with this Node. Empty if the Node is not yet associated with any groups.
    public var channelPlacementGroups: [Swift.String]?
    /// The ID of the Cluster that the Node belongs to.
    public var clusterId: Swift.String?
    /// The current connection state of the Node.
    public var connectionState: MediaLiveClientTypes.NodeConnectionState?
    /// The unique ID of the Node. Unique in the Cluster. The ID is the resource-id portion of the ARN.
    public var id: Swift.String?
    /// The ARN of the EC2 instance hosting the Node.
    public var instanceArn: Swift.String?
    /// The name that you specified for the Node.
    public var name: Swift.String?
    /// Documentation update needed
    public var nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]?
    /// The initial role current role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    public var role: MediaLiveClientTypes.NodeRole?
    /// The current state of the Node.
    public var state: MediaLiveClientTypes.NodeState?

    public init(
        arn: Swift.String? = nil,
        channelPlacementGroups: [Swift.String]? = nil,
        clusterId: Swift.String? = nil,
        connectionState: MediaLiveClientTypes.NodeConnectionState? = nil,
        id: Swift.String? = nil,
        instanceArn: Swift.String? = nil,
        name: Swift.String? = nil,
        nodeInterfaceMappings: [MediaLiveClientTypes.NodeInterfaceMapping]? = nil,
        role: MediaLiveClientTypes.NodeRole? = nil,
        state: MediaLiveClientTypes.NodeState? = nil
    )
    {
        self.arn = arn
        self.channelPlacementGroups = channelPlacementGroups
        self.clusterId = clusterId
        self.connectionState = connectionState
        self.id = id
        self.instanceArn = instanceArn
        self.name = name
        self.nodeInterfaceMappings = nodeInterfaceMappings
        self.role = role
        self.state = state
    }
}

/// Request to update a reservation
public struct UpdateReservationInput {
    /// Name of the reservation
    public var name: Swift.String?
    /// Renewal settings for the reservation
    public var renewalSettings: MediaLiveClientTypes.RenewalSettings?
    /// Unique reservation ID, e.g. '1234567'
    /// This member is required.
    public var reservationId: Swift.String?

    public init(
        name: Swift.String? = nil,
        renewalSettings: MediaLiveClientTypes.RenewalSettings? = nil,
        reservationId: Swift.String? = nil
    )
    {
        self.name = name
        self.renewalSettings = renewalSettings
        self.reservationId = reservationId
    }
}

/// Placeholder documentation for UpdateReservationResponse
public struct UpdateReservationOutput {
    /// Reserved resources available to use
    public var reservation: MediaLiveClientTypes.Reservation?

    public init(
        reservation: MediaLiveClientTypes.Reservation? = nil
    )
    {
        self.reservation = reservation
    }
}

extension AcceptInputDeviceTransferInput {

    static func urlPathProvider(_ value: AcceptInputDeviceTransferInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/accept"
    }
}

extension BatchDeleteInput {

    static func urlPathProvider(_ value: BatchDeleteInput) -> Swift.String? {
        return "/prod/batch/delete"
    }
}

extension BatchStartInput {

    static func urlPathProvider(_ value: BatchStartInput) -> Swift.String? {
        return "/prod/batch/start"
    }
}

extension BatchStopInput {

    static func urlPathProvider(_ value: BatchStopInput) -> Swift.String? {
        return "/prod/batch/stop"
    }
}

extension BatchUpdateScheduleInput {

    static func urlPathProvider(_ value: BatchUpdateScheduleInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/schedule"
    }
}

extension CancelInputDeviceTransferInput {

    static func urlPathProvider(_ value: CancelInputDeviceTransferInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/cancel"
    }
}

extension ClaimDeviceInput {

    static func urlPathProvider(_ value: ClaimDeviceInput) -> Swift.String? {
        return "/prod/claimDevice"
    }
}

extension CreateChannelInput {

    static func urlPathProvider(_ value: CreateChannelInput) -> Swift.String? {
        return "/prod/channels"
    }
}

extension CreateChannelPlacementGroupInput {

    static func urlPathProvider(_ value: CreateChannelPlacementGroupInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/channelplacementgroups"
    }
}

extension CreateCloudWatchAlarmTemplateInput {

    static func urlPathProvider(_ value: CreateCloudWatchAlarmTemplateInput) -> Swift.String? {
        return "/prod/cloudwatch-alarm-templates"
    }
}

extension CreateCloudWatchAlarmTemplateGroupInput {

    static func urlPathProvider(_ value: CreateCloudWatchAlarmTemplateGroupInput) -> Swift.String? {
        return "/prod/cloudwatch-alarm-template-groups"
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/prod/clusters"
    }
}

extension CreateEventBridgeRuleTemplateInput {

    static func urlPathProvider(_ value: CreateEventBridgeRuleTemplateInput) -> Swift.String? {
        return "/prod/eventbridge-rule-templates"
    }
}

extension CreateEventBridgeRuleTemplateGroupInput {

    static func urlPathProvider(_ value: CreateEventBridgeRuleTemplateGroupInput) -> Swift.String? {
        return "/prod/eventbridge-rule-template-groups"
    }
}

extension CreateInputInput {

    static func urlPathProvider(_ value: CreateInputInput) -> Swift.String? {
        return "/prod/inputs"
    }
}

extension CreateInputSecurityGroupInput {

    static func urlPathProvider(_ value: CreateInputSecurityGroupInput) -> Swift.String? {
        return "/prod/inputSecurityGroups"
    }
}

extension CreateMultiplexInput {

    static func urlPathProvider(_ value: CreateMultiplexInput) -> Swift.String? {
        return "/prod/multiplexes"
    }
}

extension CreateMultiplexProgramInput {

    static func urlPathProvider(_ value: CreateMultiplexProgramInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs"
    }
}

extension CreateNetworkInput {

    static func urlPathProvider(_ value: CreateNetworkInput) -> Swift.String? {
        return "/prod/networks"
    }
}

extension CreateNodeInput {

    static func urlPathProvider(_ value: CreateNodeInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodes"
    }
}

extension CreateNodeRegistrationScriptInput {

    static func urlPathProvider(_ value: CreateNodeRegistrationScriptInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodeRegistrationScript"
    }
}

extension CreatePartnerInputInput {

    static func urlPathProvider(_ value: CreatePartnerInputInput) -> Swift.String? {
        guard let inputId = value.inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())/partners"
    }
}

extension CreateSignalMapInput {

    static func urlPathProvider(_ value: CreateSignalMapInput) -> Swift.String? {
        return "/prod/signal-maps"
    }
}

extension CreateTagsInput {

    static func urlPathProvider(_ value: CreateTagsInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/prod/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension DeleteChannelInput {

    static func urlPathProvider(_ value: DeleteChannelInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())"
    }
}

extension DeleteChannelPlacementGroupInput {

    static func urlPathProvider(_ value: DeleteChannelPlacementGroupInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let channelPlacementGroupId = value.channelPlacementGroupId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/channelplacementgroups/\(channelPlacementGroupId.urlPercentEncoding())"
    }
}

extension DeleteCloudWatchAlarmTemplateInput {

    static func urlPathProvider(_ value: DeleteCloudWatchAlarmTemplateInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/cloudwatch-alarm-templates/\(identifier.urlPercentEncoding())"
    }
}

extension DeleteCloudWatchAlarmTemplateGroupInput {

    static func urlPathProvider(_ value: DeleteCloudWatchAlarmTemplateGroupInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/cloudwatch-alarm-template-groups/\(identifier.urlPercentEncoding())"
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())"
    }
}

extension DeleteEventBridgeRuleTemplateInput {

    static func urlPathProvider(_ value: DeleteEventBridgeRuleTemplateInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/eventbridge-rule-templates/\(identifier.urlPercentEncoding())"
    }
}

extension DeleteEventBridgeRuleTemplateGroupInput {

    static func urlPathProvider(_ value: DeleteEventBridgeRuleTemplateGroupInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/eventbridge-rule-template-groups/\(identifier.urlPercentEncoding())"
    }
}

extension DeleteInputInput {

    static func urlPathProvider(_ value: DeleteInputInput) -> Swift.String? {
        guard let inputId = value.inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())"
    }
}

extension DeleteInputSecurityGroupInput {

    static func urlPathProvider(_ value: DeleteInputSecurityGroupInput) -> Swift.String? {
        guard let inputSecurityGroupId = value.inputSecurityGroupId else {
            return nil
        }
        return "/prod/inputSecurityGroups/\(inputSecurityGroupId.urlPercentEncoding())"
    }
}

extension DeleteMultiplexInput {

    static func urlPathProvider(_ value: DeleteMultiplexInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())"
    }
}

extension DeleteMultiplexProgramInput {

    static func urlPathProvider(_ value: DeleteMultiplexProgramInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        guard let programName = value.programName else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs/\(programName.urlPercentEncoding())"
    }
}

extension DeleteNetworkInput {

    static func urlPathProvider(_ value: DeleteNetworkInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/prod/networks/\(networkId.urlPercentEncoding())"
    }
}

extension DeleteNodeInput {

    static func urlPathProvider(_ value: DeleteNodeInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
    }
}

extension DeleteReservationInput {

    static func urlPathProvider(_ value: DeleteReservationInput) -> Swift.String? {
        guard let reservationId = value.reservationId else {
            return nil
        }
        return "/prod/reservations/\(reservationId.urlPercentEncoding())"
    }
}

extension DeleteScheduleInput {

    static func urlPathProvider(_ value: DeleteScheduleInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/schedule"
    }
}

extension DeleteSignalMapInput {

    static func urlPathProvider(_ value: DeleteSignalMapInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/signal-maps/\(identifier.urlPercentEncoding())"
    }
}

extension DeleteTagsInput {

    static func urlPathProvider(_ value: DeleteTagsInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/prod/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension DeleteTagsInput {

    static func queryItemProvider(_ value: DeleteTagsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension DescribeAccountConfigurationInput {

    static func urlPathProvider(_ value: DescribeAccountConfigurationInput) -> Swift.String? {
        return "/prod/accountConfiguration"
    }
}

extension DescribeChannelInput {

    static func urlPathProvider(_ value: DescribeChannelInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())"
    }
}

extension DescribeChannelPlacementGroupInput {

    static func urlPathProvider(_ value: DescribeChannelPlacementGroupInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let channelPlacementGroupId = value.channelPlacementGroupId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/channelplacementgroups/\(channelPlacementGroupId.urlPercentEncoding())"
    }
}

extension DescribeClusterInput {

    static func urlPathProvider(_ value: DescribeClusterInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())"
    }
}

extension DescribeInputInput {

    static func urlPathProvider(_ value: DescribeInputInput) -> Swift.String? {
        guard let inputId = value.inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())"
    }
}

extension DescribeInputDeviceInput {

    static func urlPathProvider(_ value: DescribeInputDeviceInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())"
    }
}

extension DescribeInputDeviceThumbnailInput {

    static func urlPathProvider(_ value: DescribeInputDeviceThumbnailInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/thumbnailData"
    }
}

extension DescribeInputDeviceThumbnailInput {

    static func headerProvider(_ value: DescribeInputDeviceThumbnailInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let accept = value.accept {
            items.add(SmithyHTTPAPI.Header(name: "accept", value: Swift.String(accept.rawValue)))
        }
        return items
    }
}

extension DescribeInputSecurityGroupInput {

    static func urlPathProvider(_ value: DescribeInputSecurityGroupInput) -> Swift.String? {
        guard let inputSecurityGroupId = value.inputSecurityGroupId else {
            return nil
        }
        return "/prod/inputSecurityGroups/\(inputSecurityGroupId.urlPercentEncoding())"
    }
}

extension DescribeMultiplexInput {

    static func urlPathProvider(_ value: DescribeMultiplexInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())"
    }
}

extension DescribeMultiplexProgramInput {

    static func urlPathProvider(_ value: DescribeMultiplexProgramInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        guard let programName = value.programName else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs/\(programName.urlPercentEncoding())"
    }
}

extension DescribeNetworkInput {

    static func urlPathProvider(_ value: DescribeNetworkInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/prod/networks/\(networkId.urlPercentEncoding())"
    }
}

extension DescribeNodeInput {

    static func urlPathProvider(_ value: DescribeNodeInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
    }
}

extension DescribeOfferingInput {

    static func urlPathProvider(_ value: DescribeOfferingInput) -> Swift.String? {
        guard let offeringId = value.offeringId else {
            return nil
        }
        return "/prod/offerings/\(offeringId.urlPercentEncoding())"
    }
}

extension DescribeReservationInput {

    static func urlPathProvider(_ value: DescribeReservationInput) -> Swift.String? {
        guard let reservationId = value.reservationId else {
            return nil
        }
        return "/prod/reservations/\(reservationId.urlPercentEncoding())"
    }
}

extension DescribeScheduleInput {

    static func urlPathProvider(_ value: DescribeScheduleInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/schedule"
    }
}

extension DescribeScheduleInput {

    static func queryItemProvider(_ value: DescribeScheduleInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension DescribeThumbnailsInput {

    static func urlPathProvider(_ value: DescribeThumbnailsInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/thumbnails"
    }
}

extension DescribeThumbnailsInput {

    static func queryItemProvider(_ value: DescribeThumbnailsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let pipelineId = value.pipelineId else {
            let message = "Creating a URL Query Item failed. pipelineId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let pipelineIdQueryItem = Smithy.URIQueryItem(name: "pipelineId".urlPercentEncoding(), value: Swift.String(pipelineId).urlPercentEncoding())
        items.append(pipelineIdQueryItem)
        guard let thumbnailType = value.thumbnailType else {
            let message = "Creating a URL Query Item failed. thumbnailType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let thumbnailTypeQueryItem = Smithy.URIQueryItem(name: "thumbnailType".urlPercentEncoding(), value: Swift.String(thumbnailType).urlPercentEncoding())
        items.append(thumbnailTypeQueryItem)
        return items
    }
}

extension GetCloudWatchAlarmTemplateInput {

    static func urlPathProvider(_ value: GetCloudWatchAlarmTemplateInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/cloudwatch-alarm-templates/\(identifier.urlPercentEncoding())"
    }
}

extension GetCloudWatchAlarmTemplateGroupInput {

    static func urlPathProvider(_ value: GetCloudWatchAlarmTemplateGroupInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/cloudwatch-alarm-template-groups/\(identifier.urlPercentEncoding())"
    }
}

extension GetEventBridgeRuleTemplateInput {

    static func urlPathProvider(_ value: GetEventBridgeRuleTemplateInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/eventbridge-rule-templates/\(identifier.urlPercentEncoding())"
    }
}

extension GetEventBridgeRuleTemplateGroupInput {

    static func urlPathProvider(_ value: GetEventBridgeRuleTemplateGroupInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/eventbridge-rule-template-groups/\(identifier.urlPercentEncoding())"
    }
}

extension GetSignalMapInput {

    static func urlPathProvider(_ value: GetSignalMapInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/signal-maps/\(identifier.urlPercentEncoding())"
    }
}

extension ListChannelPlacementGroupsInput {

    static func urlPathProvider(_ value: ListChannelPlacementGroupsInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/channelplacementgroups"
    }
}

extension ListChannelPlacementGroupsInput {

    static func queryItemProvider(_ value: ListChannelPlacementGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListChannelsInput {

    static func urlPathProvider(_ value: ListChannelsInput) -> Swift.String? {
        return "/prod/channels"
    }
}

extension ListChannelsInput {

    static func queryItemProvider(_ value: ListChannelsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListCloudWatchAlarmTemplateGroupsInput {

    static func urlPathProvider(_ value: ListCloudWatchAlarmTemplateGroupsInput) -> Swift.String? {
        return "/prod/cloudwatch-alarm-template-groups"
    }
}

extension ListCloudWatchAlarmTemplateGroupsInput {

    static func queryItemProvider(_ value: ListCloudWatchAlarmTemplateGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let signalMapIdentifier = value.signalMapIdentifier {
            let signalMapIdentifierQueryItem = Smithy.URIQueryItem(name: "signalMapIdentifier".urlPercentEncoding(), value: Swift.String(signalMapIdentifier).urlPercentEncoding())
            items.append(signalMapIdentifierQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let scope = value.scope {
            let scopeQueryItem = Smithy.URIQueryItem(name: "scope".urlPercentEncoding(), value: Swift.String(scope).urlPercentEncoding())
            items.append(scopeQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListCloudWatchAlarmTemplatesInput {

    static func urlPathProvider(_ value: ListCloudWatchAlarmTemplatesInput) -> Swift.String? {
        return "/prod/cloudwatch-alarm-templates"
    }
}

extension ListCloudWatchAlarmTemplatesInput {

    static func queryItemProvider(_ value: ListCloudWatchAlarmTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let signalMapIdentifier = value.signalMapIdentifier {
            let signalMapIdentifierQueryItem = Smithy.URIQueryItem(name: "signalMapIdentifier".urlPercentEncoding(), value: Swift.String(signalMapIdentifier).urlPercentEncoding())
            items.append(signalMapIdentifierQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let scope = value.scope {
            let scopeQueryItem = Smithy.URIQueryItem(name: "scope".urlPercentEncoding(), value: Swift.String(scope).urlPercentEncoding())
            items.append(scopeQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let groupIdentifier = value.groupIdentifier {
            let groupIdentifierQueryItem = Smithy.URIQueryItem(name: "groupIdentifier".urlPercentEncoding(), value: Swift.String(groupIdentifier).urlPercentEncoding())
            items.append(groupIdentifierQueryItem)
        }
        return items
    }
}

extension ListClustersInput {

    static func urlPathProvider(_ value: ListClustersInput) -> Swift.String? {
        return "/prod/clusters"
    }
}

extension ListClustersInput {

    static func queryItemProvider(_ value: ListClustersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListEventBridgeRuleTemplateGroupsInput {

    static func urlPathProvider(_ value: ListEventBridgeRuleTemplateGroupsInput) -> Swift.String? {
        return "/prod/eventbridge-rule-template-groups"
    }
}

extension ListEventBridgeRuleTemplateGroupsInput {

    static func queryItemProvider(_ value: ListEventBridgeRuleTemplateGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let signalMapIdentifier = value.signalMapIdentifier {
            let signalMapIdentifierQueryItem = Smithy.URIQueryItem(name: "signalMapIdentifier".urlPercentEncoding(), value: Swift.String(signalMapIdentifier).urlPercentEncoding())
            items.append(signalMapIdentifierQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListEventBridgeRuleTemplatesInput {

    static func urlPathProvider(_ value: ListEventBridgeRuleTemplatesInput) -> Swift.String? {
        return "/prod/eventbridge-rule-templates"
    }
}

extension ListEventBridgeRuleTemplatesInput {

    static func queryItemProvider(_ value: ListEventBridgeRuleTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let signalMapIdentifier = value.signalMapIdentifier {
            let signalMapIdentifierQueryItem = Smithy.URIQueryItem(name: "signalMapIdentifier".urlPercentEncoding(), value: Swift.String(signalMapIdentifier).urlPercentEncoding())
            items.append(signalMapIdentifierQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let groupIdentifier = value.groupIdentifier {
            let groupIdentifierQueryItem = Smithy.URIQueryItem(name: "groupIdentifier".urlPercentEncoding(), value: Swift.String(groupIdentifier).urlPercentEncoding())
            items.append(groupIdentifierQueryItem)
        }
        return items
    }
}

extension ListInputDevicesInput {

    static func urlPathProvider(_ value: ListInputDevicesInput) -> Swift.String? {
        return "/prod/inputDevices"
    }
}

extension ListInputDevicesInput {

    static func queryItemProvider(_ value: ListInputDevicesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListInputDeviceTransfersInput {

    static func urlPathProvider(_ value: ListInputDeviceTransfersInput) -> Swift.String? {
        return "/prod/inputDeviceTransfers"
    }
}

extension ListInputDeviceTransfersInput {

    static func queryItemProvider(_ value: ListInputDeviceTransfersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        guard let transferType = value.transferType else {
            let message = "Creating a URL Query Item failed. transferType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let transferTypeQueryItem = Smithy.URIQueryItem(name: "transferType".urlPercentEncoding(), value: Swift.String(transferType).urlPercentEncoding())
        items.append(transferTypeQueryItem)
        return items
    }
}

extension ListInputsInput {

    static func urlPathProvider(_ value: ListInputsInput) -> Swift.String? {
        return "/prod/inputs"
    }
}

extension ListInputsInput {

    static func queryItemProvider(_ value: ListInputsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListInputSecurityGroupsInput {

    static func urlPathProvider(_ value: ListInputSecurityGroupsInput) -> Swift.String? {
        return "/prod/inputSecurityGroups"
    }
}

extension ListInputSecurityGroupsInput {

    static func queryItemProvider(_ value: ListInputSecurityGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListMultiplexesInput {

    static func urlPathProvider(_ value: ListMultiplexesInput) -> Swift.String? {
        return "/prod/multiplexes"
    }
}

extension ListMultiplexesInput {

    static func queryItemProvider(_ value: ListMultiplexesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListMultiplexProgramsInput {

    static func urlPathProvider(_ value: ListMultiplexProgramsInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs"
    }
}

extension ListMultiplexProgramsInput {

    static func queryItemProvider(_ value: ListMultiplexProgramsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListNetworksInput {

    static func urlPathProvider(_ value: ListNetworksInput) -> Swift.String? {
        return "/prod/networks"
    }
}

extension ListNetworksInput {

    static func queryItemProvider(_ value: ListNetworksInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListNodesInput {

    static func urlPathProvider(_ value: ListNodesInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodes"
    }
}

extension ListNodesInput {

    static func queryItemProvider(_ value: ListNodesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListOfferingsInput {

    static func urlPathProvider(_ value: ListOfferingsInput) -> Swift.String? {
        return "/prod/offerings"
    }
}

extension ListOfferingsInput {

    static func queryItemProvider(_ value: ListOfferingsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let channelClass = value.channelClass {
            let channelClassQueryItem = Smithy.URIQueryItem(name: "channelClass".urlPercentEncoding(), value: Swift.String(channelClass).urlPercentEncoding())
            items.append(channelClassQueryItem)
        }
        if let codec = value.codec {
            let codecQueryItem = Smithy.URIQueryItem(name: "codec".urlPercentEncoding(), value: Swift.String(codec).urlPercentEncoding())
            items.append(codecQueryItem)
        }
        if let videoQuality = value.videoQuality {
            let videoQualityQueryItem = Smithy.URIQueryItem(name: "videoQuality".urlPercentEncoding(), value: Swift.String(videoQuality).urlPercentEncoding())
            items.append(videoQualityQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let maximumBitrate = value.maximumBitrate {
            let maximumBitrateQueryItem = Smithy.URIQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: Swift.String(maximumBitrate).urlPercentEncoding())
            items.append(maximumBitrateQueryItem)
        }
        if let specialFeature = value.specialFeature {
            let specialFeatureQueryItem = Smithy.URIQueryItem(name: "specialFeature".urlPercentEncoding(), value: Swift.String(specialFeature).urlPercentEncoding())
            items.append(specialFeatureQueryItem)
        }
        if let duration = value.duration {
            let durationQueryItem = Smithy.URIQueryItem(name: "duration".urlPercentEncoding(), value: Swift.String(duration).urlPercentEncoding())
            items.append(durationQueryItem)
        }
        if let resourceType = value.resourceType {
            let resourceTypeQueryItem = Smithy.URIQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType).urlPercentEncoding())
            items.append(resourceTypeQueryItem)
        }
        if let channelConfiguration = value.channelConfiguration {
            let channelConfigurationQueryItem = Smithy.URIQueryItem(name: "channelConfiguration".urlPercentEncoding(), value: Swift.String(channelConfiguration).urlPercentEncoding())
            items.append(channelConfigurationQueryItem)
        }
        if let maximumFramerate = value.maximumFramerate {
            let maximumFramerateQueryItem = Smithy.URIQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: Swift.String(maximumFramerate).urlPercentEncoding())
            items.append(maximumFramerateQueryItem)
        }
        if let resolution = value.resolution {
            let resolutionQueryItem = Smithy.URIQueryItem(name: "resolution".urlPercentEncoding(), value: Swift.String(resolution).urlPercentEncoding())
            items.append(resolutionQueryItem)
        }
        return items
    }
}

extension ListReservationsInput {

    static func urlPathProvider(_ value: ListReservationsInput) -> Swift.String? {
        return "/prod/reservations"
    }
}

extension ListReservationsInput {

    static func queryItemProvider(_ value: ListReservationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let channelClass = value.channelClass {
            let channelClassQueryItem = Smithy.URIQueryItem(name: "channelClass".urlPercentEncoding(), value: Swift.String(channelClass).urlPercentEncoding())
            items.append(channelClassQueryItem)
        }
        if let codec = value.codec {
            let codecQueryItem = Smithy.URIQueryItem(name: "codec".urlPercentEncoding(), value: Swift.String(codec).urlPercentEncoding())
            items.append(codecQueryItem)
        }
        if let videoQuality = value.videoQuality {
            let videoQualityQueryItem = Smithy.URIQueryItem(name: "videoQuality".urlPercentEncoding(), value: Swift.String(videoQuality).urlPercentEncoding())
            items.append(videoQualityQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let maximumBitrate = value.maximumBitrate {
            let maximumBitrateQueryItem = Smithy.URIQueryItem(name: "maximumBitrate".urlPercentEncoding(), value: Swift.String(maximumBitrate).urlPercentEncoding())
            items.append(maximumBitrateQueryItem)
        }
        if let specialFeature = value.specialFeature {
            let specialFeatureQueryItem = Smithy.URIQueryItem(name: "specialFeature".urlPercentEncoding(), value: Swift.String(specialFeature).urlPercentEncoding())
            items.append(specialFeatureQueryItem)
        }
        if let resourceType = value.resourceType {
            let resourceTypeQueryItem = Smithy.URIQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType).urlPercentEncoding())
            items.append(resourceTypeQueryItem)
        }
        if let maximumFramerate = value.maximumFramerate {
            let maximumFramerateQueryItem = Smithy.URIQueryItem(name: "maximumFramerate".urlPercentEncoding(), value: Swift.String(maximumFramerate).urlPercentEncoding())
            items.append(maximumFramerateQueryItem)
        }
        if let resolution = value.resolution {
            let resolutionQueryItem = Smithy.URIQueryItem(name: "resolution".urlPercentEncoding(), value: Swift.String(resolution).urlPercentEncoding())
            items.append(resolutionQueryItem)
        }
        return items
    }
}

extension ListSignalMapsInput {

    static func urlPathProvider(_ value: ListSignalMapsInput) -> Swift.String? {
        return "/prod/signal-maps"
    }
}

extension ListSignalMapsInput {

    static func queryItemProvider(_ value: ListSignalMapsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let cloudWatchAlarmTemplateGroupIdentifier = value.cloudWatchAlarmTemplateGroupIdentifier {
            let cloudWatchAlarmTemplateGroupIdentifierQueryItem = Smithy.URIQueryItem(name: "cloudWatchAlarmTemplateGroupIdentifier".urlPercentEncoding(), value: Swift.String(cloudWatchAlarmTemplateGroupIdentifier).urlPercentEncoding())
            items.append(cloudWatchAlarmTemplateGroupIdentifierQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let eventBridgeRuleTemplateGroupIdentifier = value.eventBridgeRuleTemplateGroupIdentifier {
            let eventBridgeRuleTemplateGroupIdentifierQueryItem = Smithy.URIQueryItem(name: "eventBridgeRuleTemplateGroupIdentifier".urlPercentEncoding(), value: Swift.String(eventBridgeRuleTemplateGroupIdentifier).urlPercentEncoding())
            items.append(eventBridgeRuleTemplateGroupIdentifierQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/prod/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PurchaseOfferingInput {

    static func urlPathProvider(_ value: PurchaseOfferingInput) -> Swift.String? {
        guard let offeringId = value.offeringId else {
            return nil
        }
        return "/prod/offerings/\(offeringId.urlPercentEncoding())/purchase"
    }
}

extension RebootInputDeviceInput {

    static func urlPathProvider(_ value: RebootInputDeviceInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/reboot"
    }
}

extension RejectInputDeviceTransferInput {

    static func urlPathProvider(_ value: RejectInputDeviceTransferInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/reject"
    }
}

extension RestartChannelPipelinesInput {

    static func urlPathProvider(_ value: RestartChannelPipelinesInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/restartChannelPipelines"
    }
}

extension StartChannelInput {

    static func urlPathProvider(_ value: StartChannelInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/start"
    }
}

extension StartDeleteMonitorDeploymentInput {

    static func urlPathProvider(_ value: StartDeleteMonitorDeploymentInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/signal-maps/\(identifier.urlPercentEncoding())/monitor-deployment"
    }
}

extension StartInputDeviceInput {

    static func urlPathProvider(_ value: StartInputDeviceInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/start"
    }
}

extension StartInputDeviceMaintenanceWindowInput {

    static func urlPathProvider(_ value: StartInputDeviceMaintenanceWindowInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/startInputDeviceMaintenanceWindow"
    }
}

extension StartMonitorDeploymentInput {

    static func urlPathProvider(_ value: StartMonitorDeploymentInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/signal-maps/\(identifier.urlPercentEncoding())/monitor-deployment"
    }
}

extension StartMultiplexInput {

    static func urlPathProvider(_ value: StartMultiplexInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/start"
    }
}

extension StartUpdateSignalMapInput {

    static func urlPathProvider(_ value: StartUpdateSignalMapInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/signal-maps/\(identifier.urlPercentEncoding())"
    }
}

extension StopChannelInput {

    static func urlPathProvider(_ value: StopChannelInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/stop"
    }
}

extension StopInputDeviceInput {

    static func urlPathProvider(_ value: StopInputDeviceInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/stop"
    }
}

extension StopMultiplexInput {

    static func urlPathProvider(_ value: StopMultiplexInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/stop"
    }
}

extension TransferInputDeviceInput {

    static func urlPathProvider(_ value: TransferInputDeviceInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())/transfer"
    }
}

extension UpdateAccountConfigurationInput {

    static func urlPathProvider(_ value: UpdateAccountConfigurationInput) -> Swift.String? {
        return "/prod/accountConfiguration"
    }
}

extension UpdateChannelInput {

    static func urlPathProvider(_ value: UpdateChannelInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())"
    }
}

extension UpdateChannelClassInput {

    static func urlPathProvider(_ value: UpdateChannelClassInput) -> Swift.String? {
        guard let channelId = value.channelId else {
            return nil
        }
        return "/prod/channels/\(channelId.urlPercentEncoding())/channelClass"
    }
}

extension UpdateChannelPlacementGroupInput {

    static func urlPathProvider(_ value: UpdateChannelPlacementGroupInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let channelPlacementGroupId = value.channelPlacementGroupId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/channelplacementgroups/\(channelPlacementGroupId.urlPercentEncoding())"
    }
}

extension UpdateCloudWatchAlarmTemplateInput {

    static func urlPathProvider(_ value: UpdateCloudWatchAlarmTemplateInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/cloudwatch-alarm-templates/\(identifier.urlPercentEncoding())"
    }
}

extension UpdateCloudWatchAlarmTemplateGroupInput {

    static func urlPathProvider(_ value: UpdateCloudWatchAlarmTemplateGroupInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/cloudwatch-alarm-template-groups/\(identifier.urlPercentEncoding())"
    }
}

extension UpdateClusterInput {

    static func urlPathProvider(_ value: UpdateClusterInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())"
    }
}

extension UpdateEventBridgeRuleTemplateInput {

    static func urlPathProvider(_ value: UpdateEventBridgeRuleTemplateInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/eventbridge-rule-templates/\(identifier.urlPercentEncoding())"
    }
}

extension UpdateEventBridgeRuleTemplateGroupInput {

    static func urlPathProvider(_ value: UpdateEventBridgeRuleTemplateGroupInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/prod/eventbridge-rule-template-groups/\(identifier.urlPercentEncoding())"
    }
}

extension UpdateInputInput {

    static func urlPathProvider(_ value: UpdateInputInput) -> Swift.String? {
        guard let inputId = value.inputId else {
            return nil
        }
        return "/prod/inputs/\(inputId.urlPercentEncoding())"
    }
}

extension UpdateInputDeviceInput {

    static func urlPathProvider(_ value: UpdateInputDeviceInput) -> Swift.String? {
        guard let inputDeviceId = value.inputDeviceId else {
            return nil
        }
        return "/prod/inputDevices/\(inputDeviceId.urlPercentEncoding())"
    }
}

extension UpdateInputSecurityGroupInput {

    static func urlPathProvider(_ value: UpdateInputSecurityGroupInput) -> Swift.String? {
        guard let inputSecurityGroupId = value.inputSecurityGroupId else {
            return nil
        }
        return "/prod/inputSecurityGroups/\(inputSecurityGroupId.urlPercentEncoding())"
    }
}

extension UpdateMultiplexInput {

    static func urlPathProvider(_ value: UpdateMultiplexInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())"
    }
}

extension UpdateMultiplexProgramInput {

    static func urlPathProvider(_ value: UpdateMultiplexProgramInput) -> Swift.String? {
        guard let multiplexId = value.multiplexId else {
            return nil
        }
        guard let programName = value.programName else {
            return nil
        }
        return "/prod/multiplexes/\(multiplexId.urlPercentEncoding())/programs/\(programName.urlPercentEncoding())"
    }
}

extension UpdateNetworkInput {

    static func urlPathProvider(_ value: UpdateNetworkInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/prod/networks/\(networkId.urlPercentEncoding())"
    }
}

extension UpdateNodeInput {

    static func urlPathProvider(_ value: UpdateNodeInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
    }
}

extension UpdateNodeStateInput {

    static func urlPathProvider(_ value: UpdateNodeStateInput) -> Swift.String? {
        guard let clusterId = value.clusterId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/prod/clusters/\(clusterId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())/state"
    }
}

extension UpdateReservationInput {

    static func urlPathProvider(_ value: UpdateReservationInput) -> Swift.String? {
        guard let reservationId = value.reservationId else {
            return nil
        }
        return "/prod/reservations/\(reservationId.urlPercentEncoding())"
    }
}

extension BatchDeleteInput {

    static func write(value: BatchDeleteInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelIds"].writeList(value.channelIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputIds"].writeList(value.inputIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputSecurityGroupIds"].writeList(value.inputSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multiplexIds"].writeList(value.multiplexIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchStartInput {

    static func write(value: BatchStartInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelIds"].writeList(value.channelIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multiplexIds"].writeList(value.multiplexIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchStopInput {

    static func write(value: BatchStopInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelIds"].writeList(value.channelIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multiplexIds"].writeList(value.multiplexIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdateScheduleInput {

    static func write(value: BatchUpdateScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["creates"].write(value.creates, with: MediaLiveClientTypes.BatchScheduleActionCreateRequest.write(value:to:))
        try writer["deletes"].write(value.deletes, with: MediaLiveClientTypes.BatchScheduleActionDeleteRequest.write(value:to:))
    }
}

extension ClaimDeviceInput {

    static func write(value: ClaimDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension CreateChannelInput {

    static func write(value: CreateChannelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anywhereSettings"].write(value.anywhereSettings, with: MediaLiveClientTypes.AnywhereSettings.write(value:to:))
        try writer["cdiInputSpecification"].write(value.cdiInputSpecification, with: MediaLiveClientTypes.CdiInputSpecification.write(value:to:))
        try writer["channelClass"].write(value.channelClass)
        try writer["destinations"].writeList(value.destinations, memberWritingClosure: MediaLiveClientTypes.OutputDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["encoderSettings"].write(value.encoderSettings, with: MediaLiveClientTypes.EncoderSettings.write(value:to:))
        try writer["inputAttachments"].writeList(value.inputAttachments, memberWritingClosure: MediaLiveClientTypes.InputAttachment.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputSpecification"].write(value.inputSpecification, with: MediaLiveClientTypes.InputSpecification.write(value:to:))
        try writer["logLevel"].write(value.logLevel)
        try writer["maintenance"].write(value.maintenance, with: MediaLiveClientTypes.MaintenanceCreateSettings.write(value:to:))
        try writer["name"].write(value.name)
        try writer["requestId"].write(value.requestId)
        try writer["reserved"].write(value.reserved)
        try writer["roleArn"].write(value.roleArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["vpc"].write(value.vpc, with: MediaLiveClientTypes.VpcOutputSettings.write(value:to:))
    }
}

extension CreateChannelPlacementGroupInput {

    static func write(value: CreateChannelPlacementGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["nodes"].writeList(value.nodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["requestId"].write(value.requestId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateCloudWatchAlarmTemplateInput {

    static func write(value: CreateCloudWatchAlarmTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparisonOperator"].write(value.comparisonOperator)
        try writer["datapointsToAlarm"].write(value.datapointsToAlarm)
        try writer["description"].write(value.description)
        try writer["evaluationPeriods"].write(value.evaluationPeriods)
        try writer["groupIdentifier"].write(value.groupIdentifier)
        try writer["metricName"].write(value.metricName)
        try writer["name"].write(value.name)
        try writer["period"].write(value.period)
        try writer["statistic"].write(value.statistic)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["targetResourceType"].write(value.targetResourceType)
        try writer["threshold"].write(value.threshold)
        try writer["treatMissingData"].write(value.treatMissingData)
    }
}

extension CreateCloudWatchAlarmTemplateGroupInput {

    static func write(value: CreateCloudWatchAlarmTemplateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateClusterInput {

    static func write(value: CreateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterType"].write(value.clusterType)
        try writer["instanceRoleArn"].write(value.instanceRoleArn)
        try writer["name"].write(value.name)
        try writer["networkSettings"].write(value.networkSettings, with: MediaLiveClientTypes.ClusterNetworkSettingsCreateRequest.write(value:to:))
        try writer["requestId"].write(value.requestId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateEventBridgeRuleTemplateInput {

    static func write(value: CreateEventBridgeRuleTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["eventTargets"].writeList(value.eventTargets, memberWritingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateTarget.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["eventType"].write(value.eventType)
        try writer["groupIdentifier"].write(value.groupIdentifier)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateEventBridgeRuleTemplateGroupInput {

    static func write(value: CreateEventBridgeRuleTemplateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateInputInput {

    static func write(value: CreateInputInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinations"].writeList(value.destinations, memberWritingClosure: MediaLiveClientTypes.InputDestinationRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputDevices"].writeList(value.inputDevices, memberWritingClosure: MediaLiveClientTypes.InputDeviceSettings.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputNetworkLocation"].write(value.inputNetworkLocation)
        try writer["inputSecurityGroups"].writeList(value.inputSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["mediaConnectFlows"].writeList(value.mediaConnectFlows, memberWritingClosure: MediaLiveClientTypes.MediaConnectFlowRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multicastSettings"].write(value.multicastSettings, with: MediaLiveClientTypes.MulticastSettingsCreateRequest.write(value:to:))
        try writer["name"].write(value.name)
        try writer["requestId"].write(value.requestId)
        try writer["roleArn"].write(value.roleArn)
        try writer["sources"].writeList(value.sources, memberWritingClosure: MediaLiveClientTypes.InputSourceRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["srtSettings"].write(value.srtSettings, with: MediaLiveClientTypes.SrtSettingsRequest.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["type"].write(value.type)
        try writer["vpc"].write(value.vpc, with: MediaLiveClientTypes.InputVpcRequest.write(value:to:))
    }
}

extension CreateInputSecurityGroupInput {

    static func write(value: CreateInputSecurityGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["whitelistRules"].writeList(value.whitelistRules, memberWritingClosure: MediaLiveClientTypes.InputWhitelistRuleCidr.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateMultiplexInput {

    static func write(value: CreateMultiplexInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availabilityZones"].writeList(value.availabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multiplexSettings"].write(value.multiplexSettings, with: MediaLiveClientTypes.MultiplexSettings.write(value:to:))
        try writer["name"].write(value.name)
        try writer["requestId"].write(value.requestId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateMultiplexProgramInput {

    static func write(value: CreateMultiplexProgramInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["multiplexProgramSettings"].write(value.multiplexProgramSettings, with: MediaLiveClientTypes.MultiplexProgramSettings.write(value:to:))
        try writer["programName"].write(value.programName)
        try writer["requestId"].write(value.requestId)
    }
}

extension CreateNetworkInput {

    static func write(value: CreateNetworkInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ipPools"].writeList(value.ipPools, memberWritingClosure: MediaLiveClientTypes.IpPoolCreateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["requestId"].write(value.requestId)
        try writer["routes"].writeList(value.routes, memberWritingClosure: MediaLiveClientTypes.RouteCreateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateNodeInput {

    static func write(value: CreateNodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["nodeInterfaceMappings"].writeList(value.nodeInterfaceMappings, memberWritingClosure: MediaLiveClientTypes.NodeInterfaceMappingCreateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["requestId"].write(value.requestId)
        try writer["role"].write(value.role)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateNodeRegistrationScriptInput {

    static func write(value: CreateNodeRegistrationScriptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["name"].write(value.name)
        try writer["nodeInterfaceMappings"].writeList(value.nodeInterfaceMappings, memberWritingClosure: MediaLiveClientTypes.NodeInterfaceMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["requestId"].write(value.requestId)
        try writer["role"].write(value.role)
    }
}

extension CreatePartnerInputInput {

    static func write(value: CreatePartnerInputInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["requestId"].write(value.requestId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateSignalMapInput {

    static func write(value: CreateSignalMapInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cloudWatchAlarmTemplateGroupIdentifiers"].writeList(value.cloudWatchAlarmTemplateGroupIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["description"].write(value.description)
        try writer["discoveryEntryPointArn"].write(value.discoveryEntryPointArn)
        try writer["eventBridgeRuleTemplateGroupIdentifiers"].writeList(value.eventBridgeRuleTemplateGroupIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateTagsInput {

    static func write(value: CreateTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PurchaseOfferingInput {

    static func write(value: PurchaseOfferingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["count"].write(value.count)
        try writer["name"].write(value.name)
        try writer["renewalSettings"].write(value.renewalSettings, with: MediaLiveClientTypes.RenewalSettings.write(value:to:))
        try writer["requestId"].write(value.requestId)
        try writer["start"].write(value.start)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension RebootInputDeviceInput {

    static func write(value: RebootInputDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["force"].write(value.force)
    }
}

extension RestartChannelPipelinesInput {

    static func write(value: RestartChannelPipelinesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineIds"].writeList(value.pipelineIds, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaLiveClientTypes.ChannelPipelineIdToRestart>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartMonitorDeploymentInput {

    static func write(value: StartMonitorDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dryRun"].write(value.dryRun)
    }
}

extension StartUpdateSignalMapInput {

    static func write(value: StartUpdateSignalMapInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cloudWatchAlarmTemplateGroupIdentifiers"].writeList(value.cloudWatchAlarmTemplateGroupIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["description"].write(value.description)
        try writer["discoveryEntryPointArn"].write(value.discoveryEntryPointArn)
        try writer["eventBridgeRuleTemplateGroupIdentifiers"].writeList(value.eventBridgeRuleTemplateGroupIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["forceRediscovery"].write(value.forceRediscovery)
        try writer["name"].write(value.name)
    }
}

extension TransferInputDeviceInput {

    static func write(value: TransferInputDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["targetCustomerId"].write(value.targetCustomerId)
        try writer["targetRegion"].write(value.targetRegion)
        try writer["transferMessage"].write(value.transferMessage)
    }
}

extension UpdateAccountConfigurationInput {

    static func write(value: UpdateAccountConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountConfiguration"].write(value.accountConfiguration, with: MediaLiveClientTypes.AccountConfiguration.write(value:to:))
    }
}

extension UpdateChannelInput {

    static func write(value: UpdateChannelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cdiInputSpecification"].write(value.cdiInputSpecification, with: MediaLiveClientTypes.CdiInputSpecification.write(value:to:))
        try writer["destinations"].writeList(value.destinations, memberWritingClosure: MediaLiveClientTypes.OutputDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["encoderSettings"].write(value.encoderSettings, with: MediaLiveClientTypes.EncoderSettings.write(value:to:))
        try writer["inputAttachments"].writeList(value.inputAttachments, memberWritingClosure: MediaLiveClientTypes.InputAttachment.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputSpecification"].write(value.inputSpecification, with: MediaLiveClientTypes.InputSpecification.write(value:to:))
        try writer["logLevel"].write(value.logLevel)
        try writer["maintenance"].write(value.maintenance, with: MediaLiveClientTypes.MaintenanceUpdateSettings.write(value:to:))
        try writer["name"].write(value.name)
        try writer["roleArn"].write(value.roleArn)
    }
}

extension UpdateChannelClassInput {

    static func write(value: UpdateChannelClassInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelClass"].write(value.channelClass)
        try writer["destinations"].writeList(value.destinations, memberWritingClosure: MediaLiveClientTypes.OutputDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateChannelPlacementGroupInput {

    static func write(value: UpdateChannelPlacementGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["nodes"].writeList(value.nodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateCloudWatchAlarmTemplateInput {

    static func write(value: UpdateCloudWatchAlarmTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comparisonOperator"].write(value.comparisonOperator)
        try writer["datapointsToAlarm"].write(value.datapointsToAlarm)
        try writer["description"].write(value.description)
        try writer["evaluationPeriods"].write(value.evaluationPeriods)
        try writer["groupIdentifier"].write(value.groupIdentifier)
        try writer["metricName"].write(value.metricName)
        try writer["name"].write(value.name)
        try writer["period"].write(value.period)
        try writer["statistic"].write(value.statistic)
        try writer["targetResourceType"].write(value.targetResourceType)
        try writer["threshold"].write(value.threshold)
        try writer["treatMissingData"].write(value.treatMissingData)
    }
}

extension UpdateCloudWatchAlarmTemplateGroupInput {

    static func write(value: UpdateCloudWatchAlarmTemplateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
    }
}

extension UpdateClusterInput {

    static func write(value: UpdateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["networkSettings"].write(value.networkSettings, with: MediaLiveClientTypes.ClusterNetworkSettingsUpdateRequest.write(value:to:))
    }
}

extension UpdateEventBridgeRuleTemplateInput {

    static func write(value: UpdateEventBridgeRuleTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["eventTargets"].writeList(value.eventTargets, memberWritingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateTarget.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["eventType"].write(value.eventType)
        try writer["groupIdentifier"].write(value.groupIdentifier)
        try writer["name"].write(value.name)
    }
}

extension UpdateEventBridgeRuleTemplateGroupInput {

    static func write(value: UpdateEventBridgeRuleTemplateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
    }
}

extension UpdateInputInput {

    static func write(value: UpdateInputInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinations"].writeList(value.destinations, memberWritingClosure: MediaLiveClientTypes.InputDestinationRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputDevices"].writeList(value.inputDevices, memberWritingClosure: MediaLiveClientTypes.InputDeviceRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputSecurityGroups"].writeList(value.inputSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["mediaConnectFlows"].writeList(value.mediaConnectFlows, memberWritingClosure: MediaLiveClientTypes.MediaConnectFlowRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multicastSettings"].write(value.multicastSettings, with: MediaLiveClientTypes.MulticastSettingsUpdateRequest.write(value:to:))
        try writer["name"].write(value.name)
        try writer["roleArn"].write(value.roleArn)
        try writer["sources"].writeList(value.sources, memberWritingClosure: MediaLiveClientTypes.InputSourceRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["srtSettings"].write(value.srtSettings, with: MediaLiveClientTypes.SrtSettingsRequest.write(value:to:))
    }
}

extension UpdateInputDeviceInput {

    static func write(value: UpdateInputDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["hdDeviceSettings"].write(value.hdDeviceSettings, with: MediaLiveClientTypes.InputDeviceConfigurableSettings.write(value:to:))
        try writer["name"].write(value.name)
        try writer["uhdDeviceSettings"].write(value.uhdDeviceSettings, with: MediaLiveClientTypes.InputDeviceConfigurableSettings.write(value:to:))
    }
}

extension UpdateInputSecurityGroupInput {

    static func write(value: UpdateInputSecurityGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["whitelistRules"].writeList(value.whitelistRules, memberWritingClosure: MediaLiveClientTypes.InputWhitelistRuleCidr.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateMultiplexInput {

    static func write(value: UpdateMultiplexInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["multiplexSettings"].write(value.multiplexSettings, with: MediaLiveClientTypes.MultiplexSettings.write(value:to:))
        try writer["name"].write(value.name)
        try writer["packetIdentifiersMapping"].writeMap(value.packetIdentifiersMapping, valueWritingClosure: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateMultiplexProgramInput {

    static func write(value: UpdateMultiplexProgramInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["multiplexProgramSettings"].write(value.multiplexProgramSettings, with: MediaLiveClientTypes.MultiplexProgramSettings.write(value:to:))
    }
}

extension UpdateNetworkInput {

    static func write(value: UpdateNetworkInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ipPools"].writeList(value.ipPools, memberWritingClosure: MediaLiveClientTypes.IpPoolUpdateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["routes"].writeList(value.routes, memberWritingClosure: MediaLiveClientTypes.RouteUpdateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateNodeInput {

    static func write(value: UpdateNodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["role"].write(value.role)
    }
}

extension UpdateNodeStateInput {

    static func write(value: UpdateNodeStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["state"].write(value.state)
    }
}

extension UpdateReservationInput {

    static func write(value: UpdateReservationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["renewalSettings"].write(value.renewalSettings, with: MediaLiveClientTypes.RenewalSettings.write(value:to:))
    }
}

extension AcceptInputDeviceTransferOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptInputDeviceTransferOutput {
        return AcceptInputDeviceTransferOutput()
    }
}

extension BatchDeleteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeleteOutput()
        value.failed = try reader["failed"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.BatchFailedResultModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.successful = try reader["successful"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.BatchSuccessfulResultModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchStartOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchStartOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchStartOutput()
        value.failed = try reader["failed"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.BatchFailedResultModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.successful = try reader["successful"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.BatchSuccessfulResultModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchStopOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchStopOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchStopOutput()
        value.failed = try reader["failed"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.BatchFailedResultModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.successful = try reader["successful"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.BatchSuccessfulResultModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUpdateScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdateScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdateScheduleOutput()
        value.creates = try reader["creates"].readIfPresent(with: MediaLiveClientTypes.BatchScheduleActionCreateResult.read(from:))
        value.deletes = try reader["deletes"].readIfPresent(with: MediaLiveClientTypes.BatchScheduleActionDeleteResult.read(from:))
        return value
    }
}

extension CancelInputDeviceTransferOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelInputDeviceTransferOutput {
        return CancelInputDeviceTransferOutput()
    }
}

extension ClaimDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ClaimDeviceOutput {
        return ClaimDeviceOutput()
    }
}

extension CreateChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChannelOutput()
        value.channel = try reader["channel"].readIfPresent(with: MediaLiveClientTypes.Channel.read(from:))
        return value
    }
}

extension CreateChannelPlacementGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChannelPlacementGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChannelPlacementGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channels = try reader["channels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodes = try reader["nodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension CreateCloudWatchAlarmTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCloudWatchAlarmTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCloudWatchAlarmTemplateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.comparisonOperator = try reader["comparisonOperator"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.datapointsToAlarm = try reader["datapointsToAlarm"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.evaluationPeriods = try reader["evaluationPeriods"].readIfPresent()
        value.groupId = try reader["groupId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.metricName = try reader["metricName"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.period = try reader["period"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.targetResourceType = try reader["targetResourceType"].readIfPresent()
        value.threshold = try reader["threshold"].readIfPresent()
        value.treatMissingData = try reader["treatMissingData"].readIfPresent()
        return value
    }
}

extension CreateCloudWatchAlarmTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCloudWatchAlarmTemplateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCloudWatchAlarmTemplateGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateClusterOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelIds = try reader["channelIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterType = try reader["clusterType"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceRoleArn = try reader["instanceRoleArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.ClusterNetworkSettings.read(from:))
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension CreateEventBridgeRuleTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEventBridgeRuleTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEventBridgeRuleTemplateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.eventTargets = try reader["eventTargets"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateTarget.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eventType = try reader["eventType"].readIfPresent()
        value.groupId = try reader["groupId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateEventBridgeRuleTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEventBridgeRuleTemplateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEventBridgeRuleTemplateGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateInputOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInputOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInputOutput()
        value.input = try reader["input"].readIfPresent(with: MediaLiveClientTypes.Input.read(from:))
        return value
    }
}

extension CreateInputSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInputSecurityGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInputSecurityGroupOutput()
        value.securityGroup = try reader["securityGroup"].readIfPresent(with: MediaLiveClientTypes.InputSecurityGroup.read(from:))
        return value
    }
}

extension CreateMultiplexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMultiplexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMultiplexOutput()
        value.multiplex = try reader["multiplex"].readIfPresent(with: MediaLiveClientTypes.Multiplex.read(from:))
        return value
    }
}

extension CreateMultiplexProgramOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMultiplexProgramOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMultiplexProgramOutput()
        value.multiplexProgram = try reader["multiplexProgram"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgram.read(from:))
        return value
    }
}

extension CreateNetworkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNetworkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNetworkOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.associatedClusterIds = try reader["associatedClusterIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.ipPools = try reader["ipPools"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.IpPool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.routes = try reader["routes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Route.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension CreateNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNodeOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodeInterfaceMappings = try reader["nodeInterfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.NodeInterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.role = try reader["role"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension CreateNodeRegistrationScriptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNodeRegistrationScriptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNodeRegistrationScriptOutput()
        value.nodeRegistrationScript = try reader["nodeRegistrationScript"].readIfPresent()
        return value
    }
}

extension CreatePartnerInputOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePartnerInputOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePartnerInputOutput()
        value.input = try reader["input"].readIfPresent(with: MediaLiveClientTypes.Input.read(from:))
        return value
    }
}

extension CreateSignalMapOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSignalMapOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSignalMapOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cloudWatchAlarmTemplateGroupIds = try reader["cloudWatchAlarmTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.discoveryEntryPointArn = try reader["discoveryEntryPointArn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.eventBridgeRuleTemplateGroupIds = try reader["eventBridgeRuleTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedMediaResourceMap = try reader["failedMediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.lastDiscoveredAt = try reader["lastDiscoveredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulMonitorDeployment = try reader["lastSuccessfulMonitorDeployment"].readIfPresent(with: MediaLiveClientTypes.SuccessfulMonitorDeployment.read(from:))
        value.mediaResourceMap = try reader["mediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.monitorChangesPendingDeployment = try reader["monitorChangesPendingDeployment"].readIfPresent()
        value.monitorDeployment = try reader["monitorDeployment"].readIfPresent(with: MediaLiveClientTypes.MonitorDeployment.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTagsOutput {
        return CreateTagsOutput()
    }
}

extension DeleteChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteChannelOutput()
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encoderSettings = try reader["encoderSettings"].readIfPresent(with: MediaLiveClientTypes.EncoderSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        return value
    }
}

extension DeleteChannelPlacementGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChannelPlacementGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteChannelPlacementGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channels = try reader["channels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodes = try reader["nodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DeleteCloudWatchAlarmTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCloudWatchAlarmTemplateOutput {
        return DeleteCloudWatchAlarmTemplateOutput()
    }
}

extension DeleteCloudWatchAlarmTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCloudWatchAlarmTemplateGroupOutput {
        return DeleteCloudWatchAlarmTemplateGroupOutput()
    }
}

extension DeleteClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteClusterOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelIds = try reader["channelIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterType = try reader["clusterType"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceRoleArn = try reader["instanceRoleArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.ClusterNetworkSettings.read(from:))
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DeleteEventBridgeRuleTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEventBridgeRuleTemplateOutput {
        return DeleteEventBridgeRuleTemplateOutput()
    }
}

extension DeleteEventBridgeRuleTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEventBridgeRuleTemplateGroupOutput {
        return DeleteEventBridgeRuleTemplateGroupOutput()
    }
}

extension DeleteInputOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInputOutput {
        return DeleteInputOutput()
    }
}

extension DeleteInputSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInputSecurityGroupOutput {
        return DeleteInputSecurityGroupOutput()
    }
}

extension DeleteMultiplexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMultiplexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteMultiplexOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexOutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexSettings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.programCount = try reader["programCount"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DeleteMultiplexProgramOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMultiplexProgramOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteMultiplexProgramOutput()
        value.channelId = try reader["channelId"].readIfPresent()
        value.multiplexProgramSettings = try reader["multiplexProgramSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramSettings.read(from:))
        value.packetIdentifiersMap = try reader["packetIdentifiersMap"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.read(from:))
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexProgramPipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.programName = try reader["programName"].readIfPresent()
        return value
    }
}

extension DeleteNetworkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNetworkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteNetworkOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.associatedClusterIds = try reader["associatedClusterIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.ipPools = try reader["ipPools"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.IpPool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.routes = try reader["routes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Route.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DeleteNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteNodeOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodeInterfaceMappings = try reader["nodeInterfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.NodeInterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.role = try reader["role"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DeleteReservationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteReservationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteReservationOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.durationUnits = try reader["durationUnits"].readIfPresent()
        value.end = try reader["end"].readIfPresent()
        value.fixedPrice = try reader["fixedPrice"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.offeringDescription = try reader["offeringDescription"].readIfPresent()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.offeringType = try reader["offeringType"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.renewalSettings = try reader["renewalSettings"].readIfPresent(with: MediaLiveClientTypes.RenewalSettings.read(from:))
        value.reservationId = try reader["reservationId"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: MediaLiveClientTypes.ReservationResourceSpecification.read(from:))
        value.start = try reader["start"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.usagePrice = try reader["usagePrice"].readIfPresent()
        return value
    }
}

extension DeleteScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScheduleOutput {
        return DeleteScheduleOutput()
    }
}

extension DeleteSignalMapOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSignalMapOutput {
        return DeleteSignalMapOutput()
    }
}

extension DeleteTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTagsOutput {
        return DeleteTagsOutput()
    }
}

extension DescribeAccountConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAccountConfigurationOutput()
        value.accountConfiguration = try reader["accountConfiguration"].readIfPresent(with: MediaLiveClientTypes.AccountConfiguration.read(from:))
        return value
    }
}

extension DescribeChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeChannelOutput()
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encoderSettings = try reader["encoderSettings"].readIfPresent(with: MediaLiveClientTypes.EncoderSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        return value
    }
}

extension DescribeChannelPlacementGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeChannelPlacementGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeChannelPlacementGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channels = try reader["channels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodes = try reader["nodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DescribeClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClusterOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelIds = try reader["channelIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterType = try reader["clusterType"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceRoleArn = try reader["instanceRoleArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.ClusterNetworkSettings.read(from:))
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DescribeInputOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInputOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInputOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.attachedChannels = try reader["attachedChannels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.inputClass = try reader["inputClass"].readIfPresent()
        value.inputDevices = try reader["inputDevices"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDeviceSettings.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputNetworkLocation = try reader["inputNetworkLocation"].readIfPresent()
        value.inputPartnerIds = try reader["inputPartnerIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSourceType = try reader["inputSourceType"].readIfPresent()
        value.mediaConnectFlows = try reader["mediaConnectFlows"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MediaConnectFlow.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.multicastSettings = try reader["multicastSettings"].readIfPresent(with: MediaLiveClientTypes.MulticastSettings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.securityGroups = try reader["securityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.srtSettings = try reader["srtSettings"].readIfPresent(with: MediaLiveClientTypes.SrtSettings.read(from:))
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension DescribeInputDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInputDeviceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInputDeviceOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.deviceSettingsSyncState = try reader["deviceSettingsSyncState"].readIfPresent()
        value.deviceUpdateStatus = try reader["deviceUpdateStatus"].readIfPresent()
        value.hdDeviceSettings = try reader["hdDeviceSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceHdSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.macAddress = try reader["macAddress"].readIfPresent()
        value.medialiveInputArns = try reader["medialiveInputArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceNetworkSettings.read(from:))
        value.outputType = try reader["outputType"].readIfPresent()
        value.serialNumber = try reader["serialNumber"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["type"].readIfPresent()
        value.uhdDeviceSettings = try reader["uhdDeviceSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceUhdSettings.read(from:))
        return value
    }
}

extension DescribeInputDeviceThumbnailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInputDeviceThumbnailOutput {
        var value = DescribeInputDeviceThumbnailOutput()
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            value.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = MediaLiveClientTypes.ContentType(rawValue: contentTypeHeaderValue)
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            value.lastModified = SmithyTimestamps.TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        }
        switch httpResponse.body {
        case .data(let data):
            value.body = .data(data)
        case .stream(let stream):
            value.body = .stream(stream)
        case .noStream:
            value.body = nil
        }
        return value
    }
}

extension DescribeInputSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInputSecurityGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInputSecurityGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.inputs = try reader["inputs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.whitelistRules = try reader["whitelistRules"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputWhitelistRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeMultiplexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMultiplexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMultiplexOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexOutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexSettings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.programCount = try reader["programCount"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DescribeMultiplexProgramOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMultiplexProgramOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMultiplexProgramOutput()
        value.channelId = try reader["channelId"].readIfPresent()
        value.multiplexProgramSettings = try reader["multiplexProgramSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramSettings.read(from:))
        value.packetIdentifiersMap = try reader["packetIdentifiersMap"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.read(from:))
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexProgramPipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.programName = try reader["programName"].readIfPresent()
        return value
    }
}

extension DescribeNetworkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNetworkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeNetworkOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.associatedClusterIds = try reader["associatedClusterIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.ipPools = try reader["ipPools"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.IpPool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.routes = try reader["routes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Route.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DescribeNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeNodeOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodeInterfaceMappings = try reader["nodeInterfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.NodeInterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.role = try reader["role"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension DescribeOfferingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOfferingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOfferingOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.durationUnits = try reader["durationUnits"].readIfPresent()
        value.fixedPrice = try reader["fixedPrice"].readIfPresent()
        value.offeringDescription = try reader["offeringDescription"].readIfPresent()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.offeringType = try reader["offeringType"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: MediaLiveClientTypes.ReservationResourceSpecification.read(from:))
        value.usagePrice = try reader["usagePrice"].readIfPresent()
        return value
    }
}

extension DescribeReservationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeReservationOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.durationUnits = try reader["durationUnits"].readIfPresent()
        value.end = try reader["end"].readIfPresent()
        value.fixedPrice = try reader["fixedPrice"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.offeringDescription = try reader["offeringDescription"].readIfPresent()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.offeringType = try reader["offeringType"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.renewalSettings = try reader["renewalSettings"].readIfPresent(with: MediaLiveClientTypes.RenewalSettings.read(from:))
        value.reservationId = try reader["reservationId"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: MediaLiveClientTypes.ReservationResourceSpecification.read(from:))
        value.start = try reader["start"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.usagePrice = try reader["usagePrice"].readIfPresent()
        return value
    }
}

extension DescribeScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeScheduleOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.scheduleActions = try reader["scheduleActions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ScheduleAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeThumbnailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeThumbnailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeThumbnailsOutput()
        value.thumbnailDetails = try reader["thumbnailDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ThumbnailDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetCloudWatchAlarmTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCloudWatchAlarmTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCloudWatchAlarmTemplateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.comparisonOperator = try reader["comparisonOperator"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.datapointsToAlarm = try reader["datapointsToAlarm"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.evaluationPeriods = try reader["evaluationPeriods"].readIfPresent()
        value.groupId = try reader["groupId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.metricName = try reader["metricName"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.period = try reader["period"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.targetResourceType = try reader["targetResourceType"].readIfPresent()
        value.threshold = try reader["threshold"].readIfPresent()
        value.treatMissingData = try reader["treatMissingData"].readIfPresent()
        return value
    }
}

extension GetCloudWatchAlarmTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCloudWatchAlarmTemplateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCloudWatchAlarmTemplateGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetEventBridgeRuleTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEventBridgeRuleTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEventBridgeRuleTemplateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.eventTargets = try reader["eventTargets"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateTarget.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eventType = try reader["eventType"].readIfPresent()
        value.groupId = try reader["groupId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetEventBridgeRuleTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEventBridgeRuleTemplateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEventBridgeRuleTemplateGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetSignalMapOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSignalMapOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSignalMapOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cloudWatchAlarmTemplateGroupIds = try reader["cloudWatchAlarmTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.discoveryEntryPointArn = try reader["discoveryEntryPointArn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.eventBridgeRuleTemplateGroupIds = try reader["eventBridgeRuleTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedMediaResourceMap = try reader["failedMediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.lastDiscoveredAt = try reader["lastDiscoveredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulMonitorDeployment = try reader["lastSuccessfulMonitorDeployment"].readIfPresent(with: MediaLiveClientTypes.SuccessfulMonitorDeployment.read(from:))
        value.mediaResourceMap = try reader["mediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.monitorChangesPendingDeployment = try reader["monitorChangesPendingDeployment"].readIfPresent()
        value.monitorDeployment = try reader["monitorDeployment"].readIfPresent(with: MediaLiveClientTypes.MonitorDeployment.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListChannelPlacementGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChannelPlacementGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChannelPlacementGroupsOutput()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.DescribeChannelPlacementGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListChannelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChannelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChannelsOutput()
        value.channels = try reader["channels"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListCloudWatchAlarmTemplateGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCloudWatchAlarmTemplateGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCloudWatchAlarmTemplateGroupsOutput()
        value.cloudWatchAlarmTemplateGroups = try reader["cloudWatchAlarmTemplateGroups"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.CloudWatchAlarmTemplateGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListCloudWatchAlarmTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCloudWatchAlarmTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCloudWatchAlarmTemplatesOutput()
        value.cloudWatchAlarmTemplates = try reader["cloudWatchAlarmTemplates"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.CloudWatchAlarmTemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClustersOutput()
        value.clusters = try reader["clusters"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.DescribeClusterSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListEventBridgeRuleTemplateGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEventBridgeRuleTemplateGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEventBridgeRuleTemplateGroupsOutput()
        value.eventBridgeRuleTemplateGroups = try reader["eventBridgeRuleTemplateGroups"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListEventBridgeRuleTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEventBridgeRuleTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEventBridgeRuleTemplatesOutput()
        value.eventBridgeRuleTemplates = try reader["eventBridgeRuleTemplates"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInputDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInputDevicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInputDevicesOutput()
        value.inputDevices = try reader["inputDevices"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDeviceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInputDeviceTransfersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInputDeviceTransfersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInputDeviceTransfersOutput()
        value.inputDeviceTransfers = try reader["inputDeviceTransfers"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.TransferringInputDeviceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInputsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInputsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInputsOutput()
        value.inputs = try reader["inputs"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Input.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInputSecurityGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInputSecurityGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInputSecurityGroupsOutput()
        value.inputSecurityGroups = try reader["inputSecurityGroups"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputSecurityGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListMultiplexesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMultiplexesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMultiplexesOutput()
        value.multiplexes = try reader["multiplexes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListMultiplexProgramsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMultiplexProgramsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMultiplexProgramsOutput()
        value.multiplexPrograms = try reader["multiplexPrograms"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexProgramSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListNetworksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNetworksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNetworksOutput()
        value.networks = try reader["networks"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.DescribeNetworkSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListNodesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNodesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNodesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.nodes = try reader["nodes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.DescribeNodeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListOfferingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOfferingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOfferingsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.offerings = try reader["offerings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Offering.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReservationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReservationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReservationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reservations = try reader["reservations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Reservation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSignalMapsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSignalMapsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSignalMapsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.signalMaps = try reader["signalMaps"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.SignalMapSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PurchaseOfferingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PurchaseOfferingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PurchaseOfferingOutput()
        value.reservation = try reader["reservation"].readIfPresent(with: MediaLiveClientTypes.Reservation.read(from:))
        return value
    }
}

extension RebootInputDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebootInputDeviceOutput {
        return RebootInputDeviceOutput()
    }
}

extension RejectInputDeviceTransferOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectInputDeviceTransferOutput {
        return RejectInputDeviceTransferOutput()
    }
}

extension RestartChannelPipelinesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestartChannelPipelinesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestartChannelPipelinesOutput()
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encoderSettings = try reader["encoderSettings"].readIfPresent(with: MediaLiveClientTypes.EncoderSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.maintenanceStatus = try reader["maintenanceStatus"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        return value
    }
}

extension StartChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartChannelOutput()
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encoderSettings = try reader["encoderSettings"].readIfPresent(with: MediaLiveClientTypes.EncoderSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        return value
    }
}

extension StartDeleteMonitorDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDeleteMonitorDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDeleteMonitorDeploymentOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cloudWatchAlarmTemplateGroupIds = try reader["cloudWatchAlarmTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.discoveryEntryPointArn = try reader["discoveryEntryPointArn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.eventBridgeRuleTemplateGroupIds = try reader["eventBridgeRuleTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedMediaResourceMap = try reader["failedMediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.lastDiscoveredAt = try reader["lastDiscoveredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulMonitorDeployment = try reader["lastSuccessfulMonitorDeployment"].readIfPresent(with: MediaLiveClientTypes.SuccessfulMonitorDeployment.read(from:))
        value.mediaResourceMap = try reader["mediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.monitorChangesPendingDeployment = try reader["monitorChangesPendingDeployment"].readIfPresent()
        value.monitorDeployment = try reader["monitorDeployment"].readIfPresent(with: MediaLiveClientTypes.MonitorDeployment.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartInputDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartInputDeviceOutput {
        return StartInputDeviceOutput()
    }
}

extension StartInputDeviceMaintenanceWindowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartInputDeviceMaintenanceWindowOutput {
        return StartInputDeviceMaintenanceWindowOutput()
    }
}

extension StartMonitorDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMonitorDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMonitorDeploymentOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cloudWatchAlarmTemplateGroupIds = try reader["cloudWatchAlarmTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.discoveryEntryPointArn = try reader["discoveryEntryPointArn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.eventBridgeRuleTemplateGroupIds = try reader["eventBridgeRuleTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedMediaResourceMap = try reader["failedMediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.lastDiscoveredAt = try reader["lastDiscoveredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulMonitorDeployment = try reader["lastSuccessfulMonitorDeployment"].readIfPresent(with: MediaLiveClientTypes.SuccessfulMonitorDeployment.read(from:))
        value.mediaResourceMap = try reader["mediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.monitorChangesPendingDeployment = try reader["monitorChangesPendingDeployment"].readIfPresent()
        value.monitorDeployment = try reader["monitorDeployment"].readIfPresent(with: MediaLiveClientTypes.MonitorDeployment.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartMultiplexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMultiplexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMultiplexOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexOutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexSettings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.programCount = try reader["programCount"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartUpdateSignalMapOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartUpdateSignalMapOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartUpdateSignalMapOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cloudWatchAlarmTemplateGroupIds = try reader["cloudWatchAlarmTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.discoveryEntryPointArn = try reader["discoveryEntryPointArn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.eventBridgeRuleTemplateGroupIds = try reader["eventBridgeRuleTemplateGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedMediaResourceMap = try reader["failedMediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.lastDiscoveredAt = try reader["lastDiscoveredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulMonitorDeployment = try reader["lastSuccessfulMonitorDeployment"].readIfPresent(with: MediaLiveClientTypes.SuccessfulMonitorDeployment.read(from:))
        value.mediaResourceMap = try reader["mediaResourceMap"].readMapIfPresent(valueReadingClosure: MediaLiveClientTypes.MediaResource.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.monitorChangesPendingDeployment = try reader["monitorChangesPendingDeployment"].readIfPresent()
        value.monitorDeployment = try reader["monitorDeployment"].readIfPresent(with: MediaLiveClientTypes.MonitorDeployment.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StopChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopChannelOutput()
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encoderSettings = try reader["encoderSettings"].readIfPresent(with: MediaLiveClientTypes.EncoderSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        return value
    }
}

extension StopInputDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopInputDeviceOutput {
        return StopInputDeviceOutput()
    }
}

extension StopMultiplexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopMultiplexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopMultiplexOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexOutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexSettings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.programCount = try reader["programCount"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension TransferInputDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TransferInputDeviceOutput {
        return TransferInputDeviceOutput()
    }
}

extension UpdateAccountConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountConfigurationOutput()
        value.accountConfiguration = try reader["accountConfiguration"].readIfPresent(with: MediaLiveClientTypes.AccountConfiguration.read(from:))
        return value
    }
}

extension UpdateChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChannelOutput()
        value.channel = try reader["channel"].readIfPresent(with: MediaLiveClientTypes.Channel.read(from:))
        return value
    }
}

extension UpdateChannelClassOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChannelClassOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChannelClassOutput()
        value.channel = try reader["channel"].readIfPresent(with: MediaLiveClientTypes.Channel.read(from:))
        return value
    }
}

extension UpdateChannelPlacementGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChannelPlacementGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChannelPlacementGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channels = try reader["channels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodes = try reader["nodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension UpdateCloudWatchAlarmTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCloudWatchAlarmTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateCloudWatchAlarmTemplateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.comparisonOperator = try reader["comparisonOperator"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.datapointsToAlarm = try reader["datapointsToAlarm"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.evaluationPeriods = try reader["evaluationPeriods"].readIfPresent()
        value.groupId = try reader["groupId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.metricName = try reader["metricName"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.period = try reader["period"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.targetResourceType = try reader["targetResourceType"].readIfPresent()
        value.threshold = try reader["threshold"].readIfPresent()
        value.treatMissingData = try reader["treatMissingData"].readIfPresent()
        return value
    }
}

extension UpdateCloudWatchAlarmTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCloudWatchAlarmTemplateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateCloudWatchAlarmTemplateGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelIds = try reader["channelIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterType = try reader["clusterType"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.ClusterNetworkSettings.read(from:))
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension UpdateEventBridgeRuleTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEventBridgeRuleTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEventBridgeRuleTemplateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.eventTargets = try reader["eventTargets"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.EventBridgeRuleTemplateTarget.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eventType = try reader["eventType"].readIfPresent()
        value.groupId = try reader["groupId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateEventBridgeRuleTemplateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEventBridgeRuleTemplateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEventBridgeRuleTemplateGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateInputOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInputOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInputOutput()
        value.input = try reader["input"].readIfPresent(with: MediaLiveClientTypes.Input.read(from:))
        return value
    }
}

extension UpdateInputDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInputDeviceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInputDeviceOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.deviceSettingsSyncState = try reader["deviceSettingsSyncState"].readIfPresent()
        value.deviceUpdateStatus = try reader["deviceUpdateStatus"].readIfPresent()
        value.hdDeviceSettings = try reader["hdDeviceSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceHdSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.macAddress = try reader["macAddress"].readIfPresent()
        value.medialiveInputArns = try reader["medialiveInputArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceNetworkSettings.read(from:))
        value.outputType = try reader["outputType"].readIfPresent()
        value.serialNumber = try reader["serialNumber"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["type"].readIfPresent()
        value.uhdDeviceSettings = try reader["uhdDeviceSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceUhdSettings.read(from:))
        return value
    }
}

extension UpdateInputSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInputSecurityGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInputSecurityGroupOutput()
        value.securityGroup = try reader["securityGroup"].readIfPresent(with: MediaLiveClientTypes.InputSecurityGroup.read(from:))
        return value
    }
}

extension UpdateMultiplexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMultiplexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMultiplexOutput()
        value.multiplex = try reader["multiplex"].readIfPresent(with: MediaLiveClientTypes.Multiplex.read(from:))
        return value
    }
}

extension UpdateMultiplexProgramOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMultiplexProgramOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMultiplexProgramOutput()
        value.multiplexProgram = try reader["multiplexProgram"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgram.read(from:))
        return value
    }
}

extension UpdateNetworkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNetworkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateNetworkOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.associatedClusterIds = try reader["associatedClusterIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.ipPools = try reader["ipPools"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.IpPool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.routes = try reader["routes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Route.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension UpdateNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateNodeOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodeInterfaceMappings = try reader["nodeInterfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.NodeInterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.role = try reader["role"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension UpdateNodeStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNodeStateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateNodeStateOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodeInterfaceMappings = try reader["nodeInterfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.NodeInterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.role = try reader["role"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension UpdateReservationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateReservationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateReservationOutput()
        value.reservation = try reader["reservation"].readIfPresent(with: MediaLiveClientTypes.Reservation.read(from:))
        return value
    }
}

enum AcceptInputDeviceTransferOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeleteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchStartOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchStopOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdateScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelInputDeviceTransferOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ClaimDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateChannelPlacementGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCloudWatchAlarmTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCloudWatchAlarmTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEventBridgeRuleTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEventBridgeRuleTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInputOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInputSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMultiplexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMultiplexProgramOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNetworkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNodeRegistrationScriptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePartnerInputOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSignalMapOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChannelPlacementGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCloudWatchAlarmTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCloudWatchAlarmTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEventBridgeRuleTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEventBridgeRuleTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInputOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInputSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMultiplexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMultiplexProgramOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNetworkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteReservationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSignalMapOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeChannelPlacementGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInputOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInputDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInputDeviceThumbnailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInputSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMultiplexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMultiplexProgramOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNetworkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOfferingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeThumbnailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCloudWatchAlarmTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCloudWatchAlarmTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEventBridgeRuleTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEventBridgeRuleTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSignalMapOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChannelPlacementGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChannelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCloudWatchAlarmTemplateGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCloudWatchAlarmTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEventBridgeRuleTemplateGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEventBridgeRuleTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInputDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInputDeviceTransfersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInputsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInputSecurityGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMultiplexesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMultiplexProgramsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNetworksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNodesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOfferingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReservationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSignalMapsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PurchaseOfferingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebootInputDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectInputDeviceTransferOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestartChannelPipelinesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDeleteMonitorDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartInputDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartInputDeviceMaintenanceWindowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMonitorDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMultiplexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartUpdateSignalMapOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopInputDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopMultiplexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TransferInputDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChannelClassOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChannelPlacementGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCloudWatchAlarmTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCloudWatchAlarmTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEventBridgeRuleTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEventBridgeRuleTemplateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInputOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInputDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInputSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMultiplexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMultiplexProgramOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNetworkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNodeStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateReservationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GatewayTimeoutException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> GatewayTimeoutException {
        let reader = baseError.errorBodyReader
        var value = GatewayTimeoutException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnprocessableEntityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnprocessableEntityException {
        let reader = baseError.errorBodyReader
        var value = UnprocessableEntityException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.validationErrors = try reader["validationErrors"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ValidationError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServerErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadGatewayException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadGatewayException {
        let reader = baseError.errorBodyReader
        var value = BadGatewayException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MediaLiveClientTypes.BatchFailedResultModel {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BatchFailedResultModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BatchFailedResultModel()
        value.arn = try reader["arn"].readIfPresent()
        value.code = try reader["code"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.BatchSuccessfulResultModel {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BatchSuccessfulResultModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BatchSuccessfulResultModel()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.BatchScheduleActionCreateResult {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BatchScheduleActionCreateResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BatchScheduleActionCreateResult()
        value.scheduleActions = try reader["scheduleActions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ScheduleAction.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MediaLiveClientTypes.ScheduleAction {

    static func write(value: MediaLiveClientTypes.ScheduleAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionName"].write(value.actionName)
        try writer["scheduleActionSettings"].write(value.scheduleActionSettings, with: MediaLiveClientTypes.ScheduleActionSettings.write(value:to:))
        try writer["scheduleActionStartSettings"].write(value.scheduleActionStartSettings, with: MediaLiveClientTypes.ScheduleActionStartSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ScheduleAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ScheduleAction()
        value.actionName = try reader["actionName"].readIfPresent() ?? ""
        value.scheduleActionSettings = try reader["scheduleActionSettings"].readIfPresent(with: MediaLiveClientTypes.ScheduleActionSettings.read(from:))
        value.scheduleActionStartSettings = try reader["scheduleActionStartSettings"].readIfPresent(with: MediaLiveClientTypes.ScheduleActionStartSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.ScheduleActionStartSettings {

    static func write(value: MediaLiveClientTypes.ScheduleActionStartSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fixedModeScheduleActionStartSettings"].write(value.fixedModeScheduleActionStartSettings, with: MediaLiveClientTypes.FixedModeScheduleActionStartSettings.write(value:to:))
        try writer["followModeScheduleActionStartSettings"].write(value.followModeScheduleActionStartSettings, with: MediaLiveClientTypes.FollowModeScheduleActionStartSettings.write(value:to:))
        try writer["immediateModeScheduleActionStartSettings"].write(value.immediateModeScheduleActionStartSettings, with: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ScheduleActionStartSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ScheduleActionStartSettings()
        value.fixedModeScheduleActionStartSettings = try reader["fixedModeScheduleActionStartSettings"].readIfPresent(with: MediaLiveClientTypes.FixedModeScheduleActionStartSettings.read(from:))
        value.followModeScheduleActionStartSettings = try reader["followModeScheduleActionStartSettings"].readIfPresent(with: MediaLiveClientTypes.FollowModeScheduleActionStartSettings.read(from:))
        value.immediateModeScheduleActionStartSettings = try reader["immediateModeScheduleActionStartSettings"].readIfPresent(with: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings {

    static func write(value: MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.ImmediateModeScheduleActionStartSettings()
    }
}

extension MediaLiveClientTypes.FollowModeScheduleActionStartSettings {

    static func write(value: MediaLiveClientTypes.FollowModeScheduleActionStartSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["followPoint"].write(value.followPoint)
        try writer["referenceActionName"].write(value.referenceActionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FollowModeScheduleActionStartSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FollowModeScheduleActionStartSettings()
        value.followPoint = try reader["followPoint"].readIfPresent() ?? .sdkUnknown("")
        value.referenceActionName = try reader["referenceActionName"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.FixedModeScheduleActionStartSettings {

    static func write(value: MediaLiveClientTypes.FixedModeScheduleActionStartSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["time"].write(value.time)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FixedModeScheduleActionStartSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FixedModeScheduleActionStartSettings()
        value.time = try reader["time"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.ScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.ScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hlsId3SegmentTaggingSettings"].write(value.hlsId3SegmentTaggingSettings, with: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings.write(value:to:))
        try writer["hlsTimedMetadataSettings"].write(value.hlsTimedMetadataSettings, with: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings.write(value:to:))
        try writer["inputPrepareSettings"].write(value.inputPrepareSettings, with: MediaLiveClientTypes.InputPrepareScheduleActionSettings.write(value:to:))
        try writer["inputSwitchSettings"].write(value.inputSwitchSettings, with: MediaLiveClientTypes.InputSwitchScheduleActionSettings.write(value:to:))
        try writer["motionGraphicsImageActivateSettings"].write(value.motionGraphicsImageActivateSettings, with: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings.write(value:to:))
        try writer["motionGraphicsImageDeactivateSettings"].write(value.motionGraphicsImageDeactivateSettings, with: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings.write(value:to:))
        try writer["pauseStateSettings"].write(value.pauseStateSettings, with: MediaLiveClientTypes.PauseStateScheduleActionSettings.write(value:to:))
        try writer["scte35InputSettings"].write(value.scte35InputSettings, with: MediaLiveClientTypes.Scte35InputScheduleActionSettings.write(value:to:))
        try writer["scte35ReturnToNetworkSettings"].write(value.scte35ReturnToNetworkSettings, with: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings.write(value:to:))
        try writer["scte35SpliceInsertSettings"].write(value.scte35SpliceInsertSettings, with: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings.write(value:to:))
        try writer["scte35TimeSignalSettings"].write(value.scte35TimeSignalSettings, with: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings.write(value:to:))
        try writer["staticImageActivateSettings"].write(value.staticImageActivateSettings, with: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings.write(value:to:))
        try writer["staticImageDeactivateSettings"].write(value.staticImageDeactivateSettings, with: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings.write(value:to:))
        try writer["staticImageOutputActivateSettings"].write(value.staticImageOutputActivateSettings, with: MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings.write(value:to:))
        try writer["staticImageOutputDeactivateSettings"].write(value.staticImageOutputDeactivateSettings, with: MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ScheduleActionSettings()
        value.hlsId3SegmentTaggingSettings = try reader["hlsId3SegmentTaggingSettings"].readIfPresent(with: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings.read(from:))
        value.hlsTimedMetadataSettings = try reader["hlsTimedMetadataSettings"].readIfPresent(with: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings.read(from:))
        value.inputPrepareSettings = try reader["inputPrepareSettings"].readIfPresent(with: MediaLiveClientTypes.InputPrepareScheduleActionSettings.read(from:))
        value.inputSwitchSettings = try reader["inputSwitchSettings"].readIfPresent(with: MediaLiveClientTypes.InputSwitchScheduleActionSettings.read(from:))
        value.motionGraphicsImageActivateSettings = try reader["motionGraphicsImageActivateSettings"].readIfPresent(with: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings.read(from:))
        value.motionGraphicsImageDeactivateSettings = try reader["motionGraphicsImageDeactivateSettings"].readIfPresent(with: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings.read(from:))
        value.pauseStateSettings = try reader["pauseStateSettings"].readIfPresent(with: MediaLiveClientTypes.PauseStateScheduleActionSettings.read(from:))
        value.scte35InputSettings = try reader["scte35InputSettings"].readIfPresent(with: MediaLiveClientTypes.Scte35InputScheduleActionSettings.read(from:))
        value.scte35ReturnToNetworkSettings = try reader["scte35ReturnToNetworkSettings"].readIfPresent(with: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings.read(from:))
        value.scte35SpliceInsertSettings = try reader["scte35SpliceInsertSettings"].readIfPresent(with: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings.read(from:))
        value.scte35TimeSignalSettings = try reader["scte35TimeSignalSettings"].readIfPresent(with: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings.read(from:))
        value.staticImageActivateSettings = try reader["staticImageActivateSettings"].readIfPresent(with: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings.read(from:))
        value.staticImageDeactivateSettings = try reader["staticImageDeactivateSettings"].readIfPresent(with: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings.read(from:))
        value.staticImageOutputActivateSettings = try reader["staticImageOutputActivateSettings"].readIfPresent(with: MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings.read(from:))
        value.staticImageOutputDeactivateSettings = try reader["staticImageOutputDeactivateSettings"].readIfPresent(with: MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fadeOut"].write(value.fadeOut)
        try writer["layer"].write(value.layer)
        try writer["outputNames"].writeList(value.outputNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StaticImageOutputDeactivateScheduleActionSettings()
        value.fadeOut = try reader["fadeOut"].readIfPresent()
        value.layer = try reader["layer"].readIfPresent()
        value.outputNames = try reader["outputNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["fadeIn"].write(value.fadeIn)
        try writer["fadeOut"].write(value.fadeOut)
        try writer["height"].write(value.height)
        try writer["image"].write(value.image, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["imageX"].write(value.imagex)
        try writer["imageY"].write(value.imagey)
        try writer["layer"].write(value.layer)
        try writer["opacity"].write(value.opacity)
        try writer["outputNames"].writeList(value.outputNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StaticImageOutputActivateScheduleActionSettings()
        value.duration = try reader["duration"].readIfPresent()
        value.fadeIn = try reader["fadeIn"].readIfPresent()
        value.fadeOut = try reader["fadeOut"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.image = try reader["image"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.imagex = try reader["imageX"].readIfPresent()
        value.imagey = try reader["imageY"].readIfPresent()
        value.layer = try reader["layer"].readIfPresent()
        value.opacity = try reader["opacity"].readIfPresent()
        value.outputNames = try reader["outputNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputLocation {

    static func write(value: MediaLiveClientTypes.InputLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["passwordParam"].write(value.passwordParam)
        try writer["uri"].write(value.uri)
        try writer["username"].write(value.username)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputLocation()
        value.passwordParam = try reader["passwordParam"].readIfPresent()
        value.uri = try reader["uri"].readIfPresent() ?? ""
        value.username = try reader["username"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fadeOut"].write(value.fadeOut)
        try writer["layer"].write(value.layer)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings()
        value.fadeOut = try reader["fadeOut"].readIfPresent()
        value.layer = try reader["layer"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.StaticImageActivateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.StaticImageActivateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["fadeIn"].write(value.fadeIn)
        try writer["fadeOut"].write(value.fadeOut)
        try writer["height"].write(value.height)
        try writer["image"].write(value.image, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["imageX"].write(value.imagex)
        try writer["imageY"].write(value.imagey)
        try writer["layer"].write(value.layer)
        try writer["opacity"].write(value.opacity)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StaticImageActivateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StaticImageActivateScheduleActionSettings()
        value.duration = try reader["duration"].readIfPresent()
        value.fadeIn = try reader["fadeIn"].readIfPresent()
        value.fadeOut = try reader["fadeOut"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.image = try reader["image"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.imagex = try reader["imageX"].readIfPresent()
        value.imagey = try reader["imageY"].readIfPresent()
        value.layer = try reader["layer"].readIfPresent()
        value.opacity = try reader["opacity"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scte35Descriptors"].writeList(value.scte35Descriptors, memberWritingClosure: MediaLiveClientTypes.Scte35Descriptor.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings()
        value.scte35Descriptors = try reader["scte35Descriptors"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Scte35Descriptor.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MediaLiveClientTypes.Scte35Descriptor {

    static func write(value: MediaLiveClientTypes.Scte35Descriptor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scte35DescriptorSettings"].write(value.scte35DescriptorSettings, with: MediaLiveClientTypes.Scte35DescriptorSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35Descriptor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35Descriptor()
        value.scte35DescriptorSettings = try reader["scte35DescriptorSettings"].readIfPresent(with: MediaLiveClientTypes.Scte35DescriptorSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Scte35DescriptorSettings {

    static func write(value: MediaLiveClientTypes.Scte35DescriptorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["segmentationDescriptorScte35DescriptorSettings"].write(value.segmentationDescriptorScte35DescriptorSettings, with: MediaLiveClientTypes.Scte35SegmentationDescriptor.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35DescriptorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35DescriptorSettings()
        value.segmentationDescriptorScte35DescriptorSettings = try reader["segmentationDescriptorScte35DescriptorSettings"].readIfPresent(with: MediaLiveClientTypes.Scte35SegmentationDescriptor.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Scte35SegmentationDescriptor {

    static func write(value: MediaLiveClientTypes.Scte35SegmentationDescriptor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryRestrictions"].write(value.deliveryRestrictions, with: MediaLiveClientTypes.Scte35DeliveryRestrictions.write(value:to:))
        try writer["segmentNum"].write(value.segmentNum)
        try writer["segmentationCancelIndicator"].write(value.segmentationCancelIndicator)
        try writer["segmentationDuration"].write(value.segmentationDuration)
        try writer["segmentationEventId"].write(value.segmentationEventId)
        try writer["segmentationTypeId"].write(value.segmentationTypeId)
        try writer["segmentationUpid"].write(value.segmentationUpid)
        try writer["segmentationUpidType"].write(value.segmentationUpidType)
        try writer["segmentsExpected"].write(value.segmentsExpected)
        try writer["subSegmentNum"].write(value.subSegmentNum)
        try writer["subSegmentsExpected"].write(value.subSegmentsExpected)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35SegmentationDescriptor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35SegmentationDescriptor()
        value.deliveryRestrictions = try reader["deliveryRestrictions"].readIfPresent(with: MediaLiveClientTypes.Scte35DeliveryRestrictions.read(from:))
        value.segmentNum = try reader["segmentNum"].readIfPresent()
        value.segmentationCancelIndicator = try reader["segmentationCancelIndicator"].readIfPresent() ?? .sdkUnknown("")
        value.segmentationDuration = try reader["segmentationDuration"].readIfPresent()
        value.segmentationEventId = try reader["segmentationEventId"].readIfPresent() ?? 0
        value.segmentationTypeId = try reader["segmentationTypeId"].readIfPresent()
        value.segmentationUpid = try reader["segmentationUpid"].readIfPresent()
        value.segmentationUpidType = try reader["segmentationUpidType"].readIfPresent()
        value.segmentsExpected = try reader["segmentsExpected"].readIfPresent()
        value.subSegmentNum = try reader["subSegmentNum"].readIfPresent()
        value.subSegmentsExpected = try reader["subSegmentsExpected"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Scte35DeliveryRestrictions {

    static func write(value: MediaLiveClientTypes.Scte35DeliveryRestrictions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["archiveAllowedFlag"].write(value.archiveAllowedFlag)
        try writer["deviceRestrictions"].write(value.deviceRestrictions)
        try writer["noRegionalBlackoutFlag"].write(value.noRegionalBlackoutFlag)
        try writer["webDeliveryAllowedFlag"].write(value.webDeliveryAllowedFlag)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35DeliveryRestrictions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35DeliveryRestrictions()
        value.archiveAllowedFlag = try reader["archiveAllowedFlag"].readIfPresent() ?? .sdkUnknown("")
        value.deviceRestrictions = try reader["deviceRestrictions"].readIfPresent() ?? .sdkUnknown("")
        value.noRegionalBlackoutFlag = try reader["noRegionalBlackoutFlag"].readIfPresent() ?? .sdkUnknown("")
        value.webDeliveryAllowedFlag = try reader["webDeliveryAllowedFlag"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["spliceEventId"].write(value.spliceEventId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings()
        value.duration = try reader["duration"].readIfPresent()
        value.spliceEventId = try reader["spliceEventId"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["spliceEventId"].write(value.spliceEventId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings()
        value.spliceEventId = try reader["spliceEventId"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.Scte35InputScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.Scte35InputScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputAttachmentNameReference"].write(value.inputAttachmentNameReference)
        try writer["mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35InputScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35InputScheduleActionSettings()
        value.inputAttachmentNameReference = try reader["inputAttachmentNameReference"].readIfPresent()
        value.mode = try reader["mode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.PauseStateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.PauseStateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelines"].writeList(value.pipelines, memberWritingClosure: MediaLiveClientTypes.PipelinePauseStateSettings.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.PauseStateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.PauseStateScheduleActionSettings()
        value.pipelines = try reader["pipelines"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelinePauseStateSettings.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.PipelinePauseStateSettings {

    static func write(value: MediaLiveClientTypes.PipelinePauseStateSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineId"].write(value.pipelineId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.PipelinePauseStateSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.PipelinePauseStateSettings()
        value.pipelineId = try reader["pipelineId"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings()
    }
}

extension MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["passwordParam"].write(value.passwordParam)
        try writer["url"].write(value.url)
        try writer["username"].write(value.username)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings()
        value.duration = try reader["duration"].readIfPresent()
        value.passwordParam = try reader["passwordParam"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.username = try reader["username"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputSwitchScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.InputSwitchScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputAttachmentNameReference"].write(value.inputAttachmentNameReference)
        try writer["inputClippingSettings"].write(value.inputClippingSettings, with: MediaLiveClientTypes.InputClippingSettings.write(value:to:))
        try writer["urlPath"].writeList(value.urlPath, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputSwitchScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputSwitchScheduleActionSettings()
        value.inputAttachmentNameReference = try reader["inputAttachmentNameReference"].readIfPresent() ?? ""
        value.inputClippingSettings = try reader["inputClippingSettings"].readIfPresent(with: MediaLiveClientTypes.InputClippingSettings.read(from:))
        value.urlPath = try reader["urlPath"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InputClippingSettings {

    static func write(value: MediaLiveClientTypes.InputClippingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputTimecodeSource"].write(value.inputTimecodeSource)
        try writer["startTimecode"].write(value.startTimecode, with: MediaLiveClientTypes.StartTimecode.write(value:to:))
        try writer["stopTimecode"].write(value.stopTimecode, with: MediaLiveClientTypes.StopTimecode.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputClippingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputClippingSettings()
        value.inputTimecodeSource = try reader["inputTimecodeSource"].readIfPresent() ?? .sdkUnknown("")
        value.startTimecode = try reader["startTimecode"].readIfPresent(with: MediaLiveClientTypes.StartTimecode.read(from:))
        value.stopTimecode = try reader["stopTimecode"].readIfPresent(with: MediaLiveClientTypes.StopTimecode.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.StopTimecode {

    static func write(value: MediaLiveClientTypes.StopTimecode?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["lastFrameClippingBehavior"].write(value.lastFrameClippingBehavior)
        try writer["timecode"].write(value.timecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StopTimecode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StopTimecode()
        value.lastFrameClippingBehavior = try reader["lastFrameClippingBehavior"].readIfPresent()
        value.timecode = try reader["timecode"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.StartTimecode {

    static func write(value: MediaLiveClientTypes.StartTimecode?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["timecode"].write(value.timecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StartTimecode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StartTimecode()
        value.timecode = try reader["timecode"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputPrepareScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.InputPrepareScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputAttachmentNameReference"].write(value.inputAttachmentNameReference)
        try writer["inputClippingSettings"].write(value.inputClippingSettings, with: MediaLiveClientTypes.InputClippingSettings.write(value:to:))
        try writer["urlPath"].writeList(value.urlPath, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputPrepareScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputPrepareScheduleActionSettings()
        value.inputAttachmentNameReference = try reader["inputAttachmentNameReference"].readIfPresent()
        value.inputClippingSettings = try reader["inputClippingSettings"].readIfPresent(with: MediaLiveClientTypes.InputClippingSettings.read(from:))
        value.urlPath = try reader["urlPath"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id3"].write(value.id3)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings()
        value.id3 = try reader["id3"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings {

    static func write(value: MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id3"].write(value.id3)
        try writer["tag"].write(value.tag)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings()
        value.tag = try reader["tag"].readIfPresent()
        value.id3 = try reader["id3"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.BatchScheduleActionDeleteResult {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BatchScheduleActionDeleteResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BatchScheduleActionDeleteResult()
        value.scheduleActions = try reader["scheduleActions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ScheduleAction.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MediaLiveClientTypes.Channel {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Channel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Channel()
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encoderSettings = try reader["encoderSettings"].readIfPresent(with: MediaLiveClientTypes.EncoderSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.PipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.DescribeAnywhereSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DescribeAnywhereSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DescribeAnywhereSettings()
        value.channelPlacementGroupId = try reader["channelPlacementGroupId"].readIfPresent()
        value.clusterId = try reader["clusterId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.VpcOutputSettingsDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VpcOutputSettingsDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VpcOutputSettingsDescription()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkInterfaceIds = try reader["networkInterfaceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["securityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.subnetIds = try reader["subnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.PipelineDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.PipelineDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.PipelineDetail()
        value.activeInputAttachmentName = try reader["activeInputAttachmentName"].readIfPresent()
        value.activeInputSwitchActionName = try reader["activeInputSwitchActionName"].readIfPresent()
        value.activeMotionGraphicsActionName = try reader["activeMotionGraphicsActionName"].readIfPresent()
        value.activeMotionGraphicsUri = try reader["activeMotionGraphicsUri"].readIfPresent()
        value.pipelineId = try reader["pipelineId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MaintenanceStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MaintenanceStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MaintenanceStatus()
        value.maintenanceDay = try reader["maintenanceDay"].readIfPresent()
        value.maintenanceDeadline = try reader["maintenanceDeadline"].readIfPresent()
        value.maintenanceScheduledDate = try reader["maintenanceScheduledDate"].readIfPresent()
        value.maintenanceStartTime = try reader["maintenanceStartTime"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputSpecification {

    static func write(value: MediaLiveClientTypes.InputSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codec"].write(value.codec)
        try writer["maximumBitrate"].write(value.maximumBitrate)
        try writer["resolution"].write(value.resolution)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputSpecification()
        value.codec = try reader["codec"].readIfPresent()
        value.maximumBitrate = try reader["maximumBitrate"].readIfPresent()
        value.resolution = try reader["resolution"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputAttachment {

    static func write(value: MediaLiveClientTypes.InputAttachment?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["automaticInputFailoverSettings"].write(value.automaticInputFailoverSettings, with: MediaLiveClientTypes.AutomaticInputFailoverSettings.write(value:to:))
        try writer["inputAttachmentName"].write(value.inputAttachmentName)
        try writer["inputId"].write(value.inputId)
        try writer["inputSettings"].write(value.inputSettings, with: MediaLiveClientTypes.InputSettings.write(value:to:))
        try writer["logicalInterfaceNames"].writeList(value.logicalInterfaceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputAttachment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputAttachment()
        value.automaticInputFailoverSettings = try reader["automaticInputFailoverSettings"].readIfPresent(with: MediaLiveClientTypes.AutomaticInputFailoverSettings.read(from:))
        value.inputAttachmentName = try reader["inputAttachmentName"].readIfPresent()
        value.inputId = try reader["inputId"].readIfPresent()
        value.inputSettings = try reader["inputSettings"].readIfPresent(with: MediaLiveClientTypes.InputSettings.read(from:))
        value.logicalInterfaceNames = try reader["logicalInterfaceNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InputSettings {

    static func write(value: MediaLiveClientTypes.InputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioSelectors"].writeList(value.audioSelectors, memberWritingClosure: MediaLiveClientTypes.AudioSelector.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionSelectors"].writeList(value.captionSelectors, memberWritingClosure: MediaLiveClientTypes.CaptionSelector.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["deblockFilter"].write(value.deblockFilter)
        try writer["denoiseFilter"].write(value.denoiseFilter)
        try writer["filterStrength"].write(value.filterStrength)
        try writer["inputFilter"].write(value.inputFilter)
        try writer["networkInputSettings"].write(value.networkInputSettings, with: MediaLiveClientTypes.NetworkInputSettings.write(value:to:))
        try writer["scte35Pid"].write(value.scte35Pid)
        try writer["smpte2038DataPreference"].write(value.smpte2038DataPreference)
        try writer["sourceEndBehavior"].write(value.sourceEndBehavior)
        try writer["videoSelector"].write(value.videoSelector, with: MediaLiveClientTypes.VideoSelector.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputSettings()
        value.audioSelectors = try reader["audioSelectors"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.AudioSelector.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionSelectors = try reader["captionSelectors"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.CaptionSelector.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.deblockFilter = try reader["deblockFilter"].readIfPresent()
        value.denoiseFilter = try reader["denoiseFilter"].readIfPresent()
        value.filterStrength = try reader["filterStrength"].readIfPresent()
        value.inputFilter = try reader["inputFilter"].readIfPresent()
        value.networkInputSettings = try reader["networkInputSettings"].readIfPresent(with: MediaLiveClientTypes.NetworkInputSettings.read(from:))
        value.scte35Pid = try reader["scte35Pid"].readIfPresent()
        value.smpte2038DataPreference = try reader["smpte2038DataPreference"].readIfPresent()
        value.sourceEndBehavior = try reader["sourceEndBehavior"].readIfPresent()
        value.videoSelector = try reader["videoSelector"].readIfPresent(with: MediaLiveClientTypes.VideoSelector.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.VideoSelector {

    static func write(value: MediaLiveClientTypes.VideoSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["colorSpace"].write(value.colorSpace)
        try writer["colorSpaceSettings"].write(value.colorSpaceSettings, with: MediaLiveClientTypes.VideoSelectorColorSpaceSettings.write(value:to:))
        try writer["colorSpaceUsage"].write(value.colorSpaceUsage)
        try writer["selectorSettings"].write(value.selectorSettings, with: MediaLiveClientTypes.VideoSelectorSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoSelector()
        value.colorSpace = try reader["colorSpace"].readIfPresent()
        value.colorSpaceSettings = try reader["colorSpaceSettings"].readIfPresent(with: MediaLiveClientTypes.VideoSelectorColorSpaceSettings.read(from:))
        value.colorSpaceUsage = try reader["colorSpaceUsage"].readIfPresent()
        value.selectorSettings = try reader["selectorSettings"].readIfPresent(with: MediaLiveClientTypes.VideoSelectorSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.VideoSelectorSettings {

    static func write(value: MediaLiveClientTypes.VideoSelectorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["videoSelectorPid"].write(value.videoSelectorPid, with: MediaLiveClientTypes.VideoSelectorPid.write(value:to:))
        try writer["videoSelectorProgramId"].write(value.videoSelectorProgramId, with: MediaLiveClientTypes.VideoSelectorProgramId.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoSelectorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoSelectorSettings()
        value.videoSelectorPid = try reader["videoSelectorPid"].readIfPresent(with: MediaLiveClientTypes.VideoSelectorPid.read(from:))
        value.videoSelectorProgramId = try reader["videoSelectorProgramId"].readIfPresent(with: MediaLiveClientTypes.VideoSelectorProgramId.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.VideoSelectorProgramId {

    static func write(value: MediaLiveClientTypes.VideoSelectorProgramId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["programId"].write(value.programId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoSelectorProgramId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoSelectorProgramId()
        value.programId = try reader["programId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.VideoSelectorPid {

    static func write(value: MediaLiveClientTypes.VideoSelectorPid?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pid"].write(value.pid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoSelectorPid {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoSelectorPid()
        value.pid = try reader["pid"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.VideoSelectorColorSpaceSettings {

    static func write(value: MediaLiveClientTypes.VideoSelectorColorSpaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hdr10Settings"].write(value.hdr10Settings, with: MediaLiveClientTypes.Hdr10Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoSelectorColorSpaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoSelectorColorSpaceSettings()
        value.hdr10Settings = try reader["hdr10Settings"].readIfPresent(with: MediaLiveClientTypes.Hdr10Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Hdr10Settings {

    static func write(value: MediaLiveClientTypes.Hdr10Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxCll"].write(value.maxCll)
        try writer["maxFall"].write(value.maxFall)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Hdr10Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Hdr10Settings()
        value.maxCll = try reader["maxCll"].readIfPresent()
        value.maxFall = try reader["maxFall"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.NetworkInputSettings {

    static func write(value: MediaLiveClientTypes.NetworkInputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hlsInputSettings"].write(value.hlsInputSettings, with: MediaLiveClientTypes.HlsInputSettings.write(value:to:))
        try writer["multicastInputSettings"].write(value.multicastInputSettings, with: MediaLiveClientTypes.MulticastInputSettings.write(value:to:))
        try writer["serverValidation"].write(value.serverValidation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.NetworkInputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.NetworkInputSettings()
        value.hlsInputSettings = try reader["hlsInputSettings"].readIfPresent(with: MediaLiveClientTypes.HlsInputSettings.read(from:))
        value.serverValidation = try reader["serverValidation"].readIfPresent()
        value.multicastInputSettings = try reader["multicastInputSettings"].readIfPresent(with: MediaLiveClientTypes.MulticastInputSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MulticastInputSettings {

    static func write(value: MediaLiveClientTypes.MulticastInputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceIpAddress"].write(value.sourceIpAddress)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MulticastInputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MulticastInputSettings()
        value.sourceIpAddress = try reader["sourceIpAddress"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.HlsInputSettings {

    static func write(value: MediaLiveClientTypes.HlsInputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bandwidth"].write(value.bandwidth)
        try writer["bufferSegments"].write(value.bufferSegments)
        try writer["retries"].write(value.retries)
        try writer["retryInterval"].write(value.retryInterval)
        try writer["scte35Source"].write(value.scte35Source)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsInputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsInputSettings()
        value.bandwidth = try reader["bandwidth"].readIfPresent()
        value.bufferSegments = try reader["bufferSegments"].readIfPresent()
        value.retries = try reader["retries"].readIfPresent()
        value.retryInterval = try reader["retryInterval"].readIfPresent()
        value.scte35Source = try reader["scte35Source"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CaptionSelector {

    static func write(value: MediaLiveClientTypes.CaptionSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["languageCode"].write(value.languageCode)
        try writer["name"].write(value.name)
        try writer["selectorSettings"].write(value.selectorSettings, with: MediaLiveClientTypes.CaptionSelectorSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CaptionSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CaptionSelector()
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.selectorSettings = try reader["selectorSettings"].readIfPresent(with: MediaLiveClientTypes.CaptionSelectorSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.CaptionSelectorSettings {

    static func write(value: MediaLiveClientTypes.CaptionSelectorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ancillarySourceSettings"].write(value.ancillarySourceSettings, with: MediaLiveClientTypes.AncillarySourceSettings.write(value:to:))
        try writer["aribSourceSettings"].write(value.aribSourceSettings, with: MediaLiveClientTypes.AribSourceSettings.write(value:to:))
        try writer["dvbSubSourceSettings"].write(value.dvbSubSourceSettings, with: MediaLiveClientTypes.DvbSubSourceSettings.write(value:to:))
        try writer["embeddedSourceSettings"].write(value.embeddedSourceSettings, with: MediaLiveClientTypes.EmbeddedSourceSettings.write(value:to:))
        try writer["scte20SourceSettings"].write(value.scte20SourceSettings, with: MediaLiveClientTypes.Scte20SourceSettings.write(value:to:))
        try writer["scte27SourceSettings"].write(value.scte27SourceSettings, with: MediaLiveClientTypes.Scte27SourceSettings.write(value:to:))
        try writer["teletextSourceSettings"].write(value.teletextSourceSettings, with: MediaLiveClientTypes.TeletextSourceSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CaptionSelectorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CaptionSelectorSettings()
        value.ancillarySourceSettings = try reader["ancillarySourceSettings"].readIfPresent(with: MediaLiveClientTypes.AncillarySourceSettings.read(from:))
        value.aribSourceSettings = try reader["aribSourceSettings"].readIfPresent(with: MediaLiveClientTypes.AribSourceSettings.read(from:))
        value.dvbSubSourceSettings = try reader["dvbSubSourceSettings"].readIfPresent(with: MediaLiveClientTypes.DvbSubSourceSettings.read(from:))
        value.embeddedSourceSettings = try reader["embeddedSourceSettings"].readIfPresent(with: MediaLiveClientTypes.EmbeddedSourceSettings.read(from:))
        value.scte20SourceSettings = try reader["scte20SourceSettings"].readIfPresent(with: MediaLiveClientTypes.Scte20SourceSettings.read(from:))
        value.scte27SourceSettings = try reader["scte27SourceSettings"].readIfPresent(with: MediaLiveClientTypes.Scte27SourceSettings.read(from:))
        value.teletextSourceSettings = try reader["teletextSourceSettings"].readIfPresent(with: MediaLiveClientTypes.TeletextSourceSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.TeletextSourceSettings {

    static func write(value: MediaLiveClientTypes.TeletextSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["outputRectangle"].write(value.outputRectangle, with: MediaLiveClientTypes.CaptionRectangle.write(value:to:))
        try writer["pageNumber"].write(value.pageNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TeletextSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.TeletextSourceSettings()
        value.outputRectangle = try reader["outputRectangle"].readIfPresent(with: MediaLiveClientTypes.CaptionRectangle.read(from:))
        value.pageNumber = try reader["pageNumber"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CaptionRectangle {

    static func write(value: MediaLiveClientTypes.CaptionRectangle?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["leftOffset"].write(value.leftOffset)
        try writer["topOffset"].write(value.topOffset)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CaptionRectangle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CaptionRectangle()
        value.height = try reader["height"].readIfPresent() ?? 0.0
        value.leftOffset = try reader["leftOffset"].readIfPresent() ?? 0.0
        value.topOffset = try reader["topOffset"].readIfPresent() ?? 0.0
        value.width = try reader["width"].readIfPresent() ?? 0.0
        return value
    }
}

extension MediaLiveClientTypes.Scte27SourceSettings {

    static func write(value: MediaLiveClientTypes.Scte27SourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ocrLanguage"].write(value.ocrLanguage)
        try writer["pid"].write(value.pid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte27SourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte27SourceSettings()
        value.ocrLanguage = try reader["ocrLanguage"].readIfPresent()
        value.pid = try reader["pid"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Scte20SourceSettings {

    static func write(value: MediaLiveClientTypes.Scte20SourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["convert608To708"].write(value.convert608To708)
        try writer["source608ChannelNumber"].write(value.source608ChannelNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte20SourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte20SourceSettings()
        value.convert608To708 = try reader["convert608To708"].readIfPresent()
        value.source608ChannelNumber = try reader["source608ChannelNumber"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.EmbeddedSourceSettings {

    static func write(value: MediaLiveClientTypes.EmbeddedSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["convert608To708"].write(value.convert608To708)
        try writer["scte20Detection"].write(value.scte20Detection)
        try writer["source608ChannelNumber"].write(value.source608ChannelNumber)
        try writer["source608TrackNumber"].write(value.source608TrackNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EmbeddedSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EmbeddedSourceSettings()
        value.convert608To708 = try reader["convert608To708"].readIfPresent()
        value.scte20Detection = try reader["scte20Detection"].readIfPresent()
        value.source608ChannelNumber = try reader["source608ChannelNumber"].readIfPresent()
        value.source608TrackNumber = try reader["source608TrackNumber"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DvbSubSourceSettings {

    static func write(value: MediaLiveClientTypes.DvbSubSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ocrLanguage"].write(value.ocrLanguage)
        try writer["pid"].write(value.pid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DvbSubSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DvbSubSourceSettings()
        value.ocrLanguage = try reader["ocrLanguage"].readIfPresent()
        value.pid = try reader["pid"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AribSourceSettings {

    static func write(value: MediaLiveClientTypes.AribSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AribSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.AribSourceSettings()
    }
}

extension MediaLiveClientTypes.AncillarySourceSettings {

    static func write(value: MediaLiveClientTypes.AncillarySourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceAncillaryChannelNumber"].write(value.sourceAncillaryChannelNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AncillarySourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AncillarySourceSettings()
        value.sourceAncillaryChannelNumber = try reader["sourceAncillaryChannelNumber"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioSelector {

    static func write(value: MediaLiveClientTypes.AudioSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["selectorSettings"].write(value.selectorSettings, with: MediaLiveClientTypes.AudioSelectorSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioSelector()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.selectorSettings = try reader["selectorSettings"].readIfPresent(with: MediaLiveClientTypes.AudioSelectorSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.AudioSelectorSettings {

    static func write(value: MediaLiveClientTypes.AudioSelectorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioHlsRenditionSelection"].write(value.audioHlsRenditionSelection, with: MediaLiveClientTypes.AudioHlsRenditionSelection.write(value:to:))
        try writer["audioLanguageSelection"].write(value.audioLanguageSelection, with: MediaLiveClientTypes.AudioLanguageSelection.write(value:to:))
        try writer["audioPidSelection"].write(value.audioPidSelection, with: MediaLiveClientTypes.AudioPidSelection.write(value:to:))
        try writer["audioTrackSelection"].write(value.audioTrackSelection, with: MediaLiveClientTypes.AudioTrackSelection.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioSelectorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioSelectorSettings()
        value.audioHlsRenditionSelection = try reader["audioHlsRenditionSelection"].readIfPresent(with: MediaLiveClientTypes.AudioHlsRenditionSelection.read(from:))
        value.audioLanguageSelection = try reader["audioLanguageSelection"].readIfPresent(with: MediaLiveClientTypes.AudioLanguageSelection.read(from:))
        value.audioPidSelection = try reader["audioPidSelection"].readIfPresent(with: MediaLiveClientTypes.AudioPidSelection.read(from:))
        value.audioTrackSelection = try reader["audioTrackSelection"].readIfPresent(with: MediaLiveClientTypes.AudioTrackSelection.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.AudioTrackSelection {

    static func write(value: MediaLiveClientTypes.AudioTrackSelection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dolbyEDecode"].write(value.dolbyEDecode, with: MediaLiveClientTypes.AudioDolbyEDecode.write(value:to:))
        try writer["tracks"].writeList(value.tracks, memberWritingClosure: MediaLiveClientTypes.AudioTrack.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioTrackSelection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioTrackSelection()
        value.tracks = try reader["tracks"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.AudioTrack.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.dolbyEDecode = try reader["dolbyEDecode"].readIfPresent(with: MediaLiveClientTypes.AudioDolbyEDecode.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.AudioDolbyEDecode {

    static func write(value: MediaLiveClientTypes.AudioDolbyEDecode?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["programSelection"].write(value.programSelection)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioDolbyEDecode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioDolbyEDecode()
        value.programSelection = try reader["programSelection"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.AudioTrack {

    static func write(value: MediaLiveClientTypes.AudioTrack?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["track"].write(value.track)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioTrack {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioTrack()
        value.track = try reader["track"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.AudioPidSelection {

    static func write(value: MediaLiveClientTypes.AudioPidSelection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pid"].write(value.pid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioPidSelection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioPidSelection()
        value.pid = try reader["pid"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.AudioLanguageSelection {

    static func write(value: MediaLiveClientTypes.AudioLanguageSelection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["languageCode"].write(value.languageCode)
        try writer["languageSelectionPolicy"].write(value.languageSelectionPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioLanguageSelection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioLanguageSelection()
        value.languageCode = try reader["languageCode"].readIfPresent() ?? ""
        value.languageSelectionPolicy = try reader["languageSelectionPolicy"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioHlsRenditionSelection {

    static func write(value: MediaLiveClientTypes.AudioHlsRenditionSelection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["groupId"].write(value.groupId)
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioHlsRenditionSelection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioHlsRenditionSelection()
        value.groupId = try reader["groupId"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.AutomaticInputFailoverSettings {

    static func write(value: MediaLiveClientTypes.AutomaticInputFailoverSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["errorClearTimeMsec"].write(value.errorClearTimeMsec)
        try writer["failoverConditions"].writeList(value.failoverConditions, memberWritingClosure: MediaLiveClientTypes.FailoverCondition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputPreference"].write(value.inputPreference)
        try writer["secondaryInputId"].write(value.secondaryInputId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AutomaticInputFailoverSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AutomaticInputFailoverSettings()
        value.errorClearTimeMsec = try reader["errorClearTimeMsec"].readIfPresent()
        value.failoverConditions = try reader["failoverConditions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.FailoverCondition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputPreference = try reader["inputPreference"].readIfPresent()
        value.secondaryInputId = try reader["secondaryInputId"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.FailoverCondition {

    static func write(value: MediaLiveClientTypes.FailoverCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["failoverConditionSettings"].write(value.failoverConditionSettings, with: MediaLiveClientTypes.FailoverConditionSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FailoverCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FailoverCondition()
        value.failoverConditionSettings = try reader["failoverConditionSettings"].readIfPresent(with: MediaLiveClientTypes.FailoverConditionSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.FailoverConditionSettings {

    static func write(value: MediaLiveClientTypes.FailoverConditionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioSilenceSettings"].write(value.audioSilenceSettings, with: MediaLiveClientTypes.AudioSilenceFailoverSettings.write(value:to:))
        try writer["inputLossSettings"].write(value.inputLossSettings, with: MediaLiveClientTypes.InputLossFailoverSettings.write(value:to:))
        try writer["videoBlackSettings"].write(value.videoBlackSettings, with: MediaLiveClientTypes.VideoBlackFailoverSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FailoverConditionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FailoverConditionSettings()
        value.audioSilenceSettings = try reader["audioSilenceSettings"].readIfPresent(with: MediaLiveClientTypes.AudioSilenceFailoverSettings.read(from:))
        value.inputLossSettings = try reader["inputLossSettings"].readIfPresent(with: MediaLiveClientTypes.InputLossFailoverSettings.read(from:))
        value.videoBlackSettings = try reader["videoBlackSettings"].readIfPresent(with: MediaLiveClientTypes.VideoBlackFailoverSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.VideoBlackFailoverSettings {

    static func write(value: MediaLiveClientTypes.VideoBlackFailoverSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["blackDetectThreshold"].write(value.blackDetectThreshold)
        try writer["videoBlackThresholdMsec"].write(value.videoBlackThresholdMsec)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoBlackFailoverSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoBlackFailoverSettings()
        value.blackDetectThreshold = try reader["blackDetectThreshold"].readIfPresent()
        value.videoBlackThresholdMsec = try reader["videoBlackThresholdMsec"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputLossFailoverSettings {

    static func write(value: MediaLiveClientTypes.InputLossFailoverSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputLossThresholdMsec"].write(value.inputLossThresholdMsec)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputLossFailoverSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputLossFailoverSettings()
        value.inputLossThresholdMsec = try reader["inputLossThresholdMsec"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioSilenceFailoverSettings {

    static func write(value: MediaLiveClientTypes.AudioSilenceFailoverSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioSelectorName"].write(value.audioSelectorName)
        try writer["audioSilenceThresholdMsec"].write(value.audioSilenceThresholdMsec)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioSilenceFailoverSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioSilenceFailoverSettings()
        value.audioSelectorName = try reader["audioSelectorName"].readIfPresent() ?? ""
        value.audioSilenceThresholdMsec = try reader["audioSilenceThresholdMsec"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.EncoderSettings {

    static func write(value: MediaLiveClientTypes.EncoderSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDescriptions"].writeList(value.audioDescriptions, memberWritingClosure: MediaLiveClientTypes.AudioDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["availBlanking"].write(value.availBlanking, with: MediaLiveClientTypes.AvailBlanking.write(value:to:))
        try writer["availConfiguration"].write(value.availConfiguration, with: MediaLiveClientTypes.AvailConfiguration.write(value:to:))
        try writer["blackoutSlate"].write(value.blackoutSlate, with: MediaLiveClientTypes.BlackoutSlate.write(value:to:))
        try writer["captionDescriptions"].writeList(value.captionDescriptions, memberWritingClosure: MediaLiveClientTypes.CaptionDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["colorCorrectionSettings"].write(value.colorCorrectionSettings, with: MediaLiveClientTypes.ColorCorrectionSettings.write(value:to:))
        try writer["featureActivations"].write(value.featureActivations, with: MediaLiveClientTypes.FeatureActivations.write(value:to:))
        try writer["globalConfiguration"].write(value.globalConfiguration, with: MediaLiveClientTypes.GlobalConfiguration.write(value:to:))
        try writer["motionGraphicsConfiguration"].write(value.motionGraphicsConfiguration, with: MediaLiveClientTypes.MotionGraphicsConfiguration.write(value:to:))
        try writer["nielsenConfiguration"].write(value.nielsenConfiguration, with: MediaLiveClientTypes.NielsenConfiguration.write(value:to:))
        try writer["outputGroups"].writeList(value.outputGroups, memberWritingClosure: MediaLiveClientTypes.OutputGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["thumbnailConfiguration"].write(value.thumbnailConfiguration, with: MediaLiveClientTypes.ThumbnailConfiguration.write(value:to:))
        try writer["timecodeConfig"].write(value.timecodeConfig, with: MediaLiveClientTypes.TimecodeConfig.write(value:to:))
        try writer["videoDescriptions"].writeList(value.videoDescriptions, memberWritingClosure: MediaLiveClientTypes.VideoDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EncoderSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EncoderSettings()
        value.audioDescriptions = try reader["audioDescriptions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.AudioDescription.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.availBlanking = try reader["availBlanking"].readIfPresent(with: MediaLiveClientTypes.AvailBlanking.read(from:))
        value.availConfiguration = try reader["availConfiguration"].readIfPresent(with: MediaLiveClientTypes.AvailConfiguration.read(from:))
        value.blackoutSlate = try reader["blackoutSlate"].readIfPresent(with: MediaLiveClientTypes.BlackoutSlate.read(from:))
        value.captionDescriptions = try reader["captionDescriptions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.CaptionDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.featureActivations = try reader["featureActivations"].readIfPresent(with: MediaLiveClientTypes.FeatureActivations.read(from:))
        value.globalConfiguration = try reader["globalConfiguration"].readIfPresent(with: MediaLiveClientTypes.GlobalConfiguration.read(from:))
        value.motionGraphicsConfiguration = try reader["motionGraphicsConfiguration"].readIfPresent(with: MediaLiveClientTypes.MotionGraphicsConfiguration.read(from:))
        value.nielsenConfiguration = try reader["nielsenConfiguration"].readIfPresent(with: MediaLiveClientTypes.NielsenConfiguration.read(from:))
        value.outputGroups = try reader["outputGroups"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.timecodeConfig = try reader["timecodeConfig"].readIfPresent(with: MediaLiveClientTypes.TimecodeConfig.read(from:))
        value.videoDescriptions = try reader["videoDescriptions"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.VideoDescription.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.thumbnailConfiguration = try reader["thumbnailConfiguration"].readIfPresent(with: MediaLiveClientTypes.ThumbnailConfiguration.read(from:))
        value.colorCorrectionSettings = try reader["colorCorrectionSettings"].readIfPresent(with: MediaLiveClientTypes.ColorCorrectionSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.ColorCorrectionSettings {

    static func write(value: MediaLiveClientTypes.ColorCorrectionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["globalColorCorrections"].writeList(value.globalColorCorrections, memberWritingClosure: MediaLiveClientTypes.ColorCorrection.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ColorCorrectionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ColorCorrectionSettings()
        value.globalColorCorrections = try reader["globalColorCorrections"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ColorCorrection.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MediaLiveClientTypes.ColorCorrection {

    static func write(value: MediaLiveClientTypes.ColorCorrection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputColorSpace"].write(value.inputColorSpace)
        try writer["outputColorSpace"].write(value.outputColorSpace)
        try writer["uri"].write(value.uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ColorCorrection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ColorCorrection()
        value.inputColorSpace = try reader["inputColorSpace"].readIfPresent() ?? .sdkUnknown("")
        value.outputColorSpace = try reader["outputColorSpace"].readIfPresent() ?? .sdkUnknown("")
        value.uri = try reader["uri"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.ThumbnailConfiguration {

    static func write(value: MediaLiveClientTypes.ThumbnailConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["state"].write(value.state)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ThumbnailConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ThumbnailConfiguration()
        value.state = try reader["state"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.VideoDescription {

    static func write(value: MediaLiveClientTypes.VideoDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codecSettings"].write(value.codecSettings, with: MediaLiveClientTypes.VideoCodecSettings.write(value:to:))
        try writer["height"].write(value.height)
        try writer["name"].write(value.name)
        try writer["respondToAfd"].write(value.respondToAfd)
        try writer["scalingBehavior"].write(value.scalingBehavior)
        try writer["sharpness"].write(value.sharpness)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoDescription()
        value.codecSettings = try reader["codecSettings"].readIfPresent(with: MediaLiveClientTypes.VideoCodecSettings.read(from:))
        value.height = try reader["height"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.respondToAfd = try reader["respondToAfd"].readIfPresent()
        value.scalingBehavior = try reader["scalingBehavior"].readIfPresent()
        value.sharpness = try reader["sharpness"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.VideoCodecSettings {

    static func write(value: MediaLiveClientTypes.VideoCodecSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["av1Settings"].write(value.av1Settings, with: MediaLiveClientTypes.Av1Settings.write(value:to:))
        try writer["frameCaptureSettings"].write(value.frameCaptureSettings, with: MediaLiveClientTypes.FrameCaptureSettings.write(value:to:))
        try writer["h264Settings"].write(value.h264Settings, with: MediaLiveClientTypes.H264Settings.write(value:to:))
        try writer["h265Settings"].write(value.h265Settings, with: MediaLiveClientTypes.H265Settings.write(value:to:))
        try writer["mpeg2Settings"].write(value.mpeg2Settings, with: MediaLiveClientTypes.Mpeg2Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.VideoCodecSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.VideoCodecSettings()
        value.frameCaptureSettings = try reader["frameCaptureSettings"].readIfPresent(with: MediaLiveClientTypes.FrameCaptureSettings.read(from:))
        value.h264Settings = try reader["h264Settings"].readIfPresent(with: MediaLiveClientTypes.H264Settings.read(from:))
        value.h265Settings = try reader["h265Settings"].readIfPresent(with: MediaLiveClientTypes.H265Settings.read(from:))
        value.mpeg2Settings = try reader["mpeg2Settings"].readIfPresent(with: MediaLiveClientTypes.Mpeg2Settings.read(from:))
        value.av1Settings = try reader["av1Settings"].readIfPresent(with: MediaLiveClientTypes.Av1Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Av1Settings {

    static func write(value: MediaLiveClientTypes.Av1Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["afdSignaling"].write(value.afdSignaling)
        try writer["bufSize"].write(value.bufSize)
        try writer["colorSpaceSettings"].write(value.colorSpaceSettings, with: MediaLiveClientTypes.Av1ColorSpaceSettings.write(value:to:))
        try writer["fixedAfd"].write(value.fixedAfd)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["level"].write(value.level)
        try writer["lookAheadRateControl"].write(value.lookAheadRateControl)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["minIInterval"].write(value.minIInterval)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["qvbrQualityLevel"].write(value.qvbrQualityLevel)
        try writer["sceneChangeDetect"].write(value.sceneChangeDetect)
        try writer["timecodeBurninSettings"].write(value.timecodeBurninSettings, with: MediaLiveClientTypes.TimecodeBurninSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Av1Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Av1Settings()
        value.afdSignaling = try reader["afdSignaling"].readIfPresent()
        value.bufSize = try reader["bufSize"].readIfPresent()
        value.colorSpaceSettings = try reader["colorSpaceSettings"].readIfPresent(with: MediaLiveClientTypes.Av1ColorSpaceSettings.read(from:))
        value.fixedAfd = try reader["fixedAfd"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent() ?? 0
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent() ?? 0
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.level = try reader["level"].readIfPresent()
        value.lookAheadRateControl = try reader["lookAheadRateControl"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.minIInterval = try reader["minIInterval"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.qvbrQualityLevel = try reader["qvbrQualityLevel"].readIfPresent()
        value.sceneChangeDetect = try reader["sceneChangeDetect"].readIfPresent()
        value.timecodeBurninSettings = try reader["timecodeBurninSettings"].readIfPresent(with: MediaLiveClientTypes.TimecodeBurninSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.TimecodeBurninSettings {

    static func write(value: MediaLiveClientTypes.TimecodeBurninSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fontSize"].write(value.fontSize)
        try writer["position"].write(value.position)
        try writer["prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TimecodeBurninSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.TimecodeBurninSettings()
        value.fontSize = try reader["fontSize"].readIfPresent() ?? .sdkUnknown("")
        value.position = try reader["position"].readIfPresent() ?? .sdkUnknown("")
        value.`prefix` = try reader["prefix"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Av1ColorSpaceSettings {

    static func write(value: MediaLiveClientTypes.Av1ColorSpaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["colorSpacePassthroughSettings"].write(value.colorSpacePassthroughSettings, with: MediaLiveClientTypes.ColorSpacePassthroughSettings.write(value:to:))
        try writer["hdr10Settings"].write(value.hdr10Settings, with: MediaLiveClientTypes.Hdr10Settings.write(value:to:))
        try writer["rec601Settings"].write(value.rec601Settings, with: MediaLiveClientTypes.Rec601Settings.write(value:to:))
        try writer["rec709Settings"].write(value.rec709Settings, with: MediaLiveClientTypes.Rec709Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Av1ColorSpaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Av1ColorSpaceSettings()
        value.colorSpacePassthroughSettings = try reader["colorSpacePassthroughSettings"].readIfPresent(with: MediaLiveClientTypes.ColorSpacePassthroughSettings.read(from:))
        value.hdr10Settings = try reader["hdr10Settings"].readIfPresent(with: MediaLiveClientTypes.Hdr10Settings.read(from:))
        value.rec601Settings = try reader["rec601Settings"].readIfPresent(with: MediaLiveClientTypes.Rec601Settings.read(from:))
        value.rec709Settings = try reader["rec709Settings"].readIfPresent(with: MediaLiveClientTypes.Rec709Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Rec709Settings {

    static func write(value: MediaLiveClientTypes.Rec709Settings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Rec709Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.Rec709Settings()
    }
}

extension MediaLiveClientTypes.Rec601Settings {

    static func write(value: MediaLiveClientTypes.Rec601Settings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Rec601Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.Rec601Settings()
    }
}

extension MediaLiveClientTypes.ColorSpacePassthroughSettings {

    static func write(value: MediaLiveClientTypes.ColorSpacePassthroughSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ColorSpacePassthroughSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.ColorSpacePassthroughSettings()
    }
}

extension MediaLiveClientTypes.Mpeg2Settings {

    static func write(value: MediaLiveClientTypes.Mpeg2Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["afdSignaling"].write(value.afdSignaling)
        try writer["colorMetadata"].write(value.colorMetadata)
        try writer["colorSpace"].write(value.colorSpace)
        try writer["displayAspectRatio"].write(value.displayAspectRatio)
        try writer["filterSettings"].write(value.filterSettings, with: MediaLiveClientTypes.Mpeg2FilterSettings.write(value:to:))
        try writer["fixedAfd"].write(value.fixedAfd)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["gopNumBFrames"].write(value.gopNumBFrames)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["scanType"].write(value.scanType)
        try writer["subgopLength"].write(value.subgopLength)
        try writer["timecodeBurninSettings"].write(value.timecodeBurninSettings, with: MediaLiveClientTypes.TimecodeBurninSettings.write(value:to:))
        try writer["timecodeInsertion"].write(value.timecodeInsertion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Mpeg2Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Mpeg2Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.afdSignaling = try reader["afdSignaling"].readIfPresent()
        value.colorMetadata = try reader["colorMetadata"].readIfPresent()
        value.colorSpace = try reader["colorSpace"].readIfPresent()
        value.displayAspectRatio = try reader["displayAspectRatio"].readIfPresent()
        value.filterSettings = try reader["filterSettings"].readIfPresent(with: MediaLiveClientTypes.Mpeg2FilterSettings.read(from:))
        value.fixedAfd = try reader["fixedAfd"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent() ?? 0
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent() ?? 0
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.gopNumBFrames = try reader["gopNumBFrames"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.scanType = try reader["scanType"].readIfPresent()
        value.subgopLength = try reader["subgopLength"].readIfPresent()
        value.timecodeInsertion = try reader["timecodeInsertion"].readIfPresent()
        value.timecodeBurninSettings = try reader["timecodeBurninSettings"].readIfPresent(with: MediaLiveClientTypes.TimecodeBurninSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Mpeg2FilterSettings {

    static func write(value: MediaLiveClientTypes.Mpeg2FilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["temporalFilterSettings"].write(value.temporalFilterSettings, with: MediaLiveClientTypes.TemporalFilterSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Mpeg2FilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Mpeg2FilterSettings()
        value.temporalFilterSettings = try reader["temporalFilterSettings"].readIfPresent(with: MediaLiveClientTypes.TemporalFilterSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.TemporalFilterSettings {

    static func write(value: MediaLiveClientTypes.TemporalFilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["postFilterSharpening"].write(value.postFilterSharpening)
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TemporalFilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.TemporalFilterSettings()
        value.postFilterSharpening = try reader["postFilterSharpening"].readIfPresent()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.H265Settings {

    static func write(value: MediaLiveClientTypes.H265Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["afdSignaling"].write(value.afdSignaling)
        try writer["alternativeTransferFunction"].write(value.alternativeTransferFunction)
        try writer["bitrate"].write(value.bitrate)
        try writer["bufSize"].write(value.bufSize)
        try writer["colorMetadata"].write(value.colorMetadata)
        try writer["colorSpaceSettings"].write(value.colorSpaceSettings, with: MediaLiveClientTypes.H265ColorSpaceSettings.write(value:to:))
        try writer["filterSettings"].write(value.filterSettings, with: MediaLiveClientTypes.H265FilterSettings.write(value:to:))
        try writer["fixedAfd"].write(value.fixedAfd)
        try writer["flickerAq"].write(value.flickerAq)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["level"].write(value.level)
        try writer["lookAheadRateControl"].write(value.lookAheadRateControl)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["minIInterval"].write(value.minIInterval)
        try writer["minQp"].write(value.minQp)
        try writer["mvOverPictureBoundaries"].write(value.mvOverPictureBoundaries)
        try writer["mvTemporalPredictor"].write(value.mvTemporalPredictor)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["profile"].write(value.profile)
        try writer["qvbrQualityLevel"].write(value.qvbrQualityLevel)
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["scanType"].write(value.scanType)
        try writer["sceneChangeDetect"].write(value.sceneChangeDetect)
        try writer["slices"].write(value.slices)
        try writer["tier"].write(value.tier)
        try writer["tileHeight"].write(value.tileHeight)
        try writer["tilePadding"].write(value.tilePadding)
        try writer["tileWidth"].write(value.tileWidth)
        try writer["timecodeBurninSettings"].write(value.timecodeBurninSettings, with: MediaLiveClientTypes.TimecodeBurninSettings.write(value:to:))
        try writer["timecodeInsertion"].write(value.timecodeInsertion)
        try writer["treeblockSize"].write(value.treeblockSize)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.H265Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.H265Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.afdSignaling = try reader["afdSignaling"].readIfPresent()
        value.alternativeTransferFunction = try reader["alternativeTransferFunction"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bufSize = try reader["bufSize"].readIfPresent()
        value.colorMetadata = try reader["colorMetadata"].readIfPresent()
        value.colorSpaceSettings = try reader["colorSpaceSettings"].readIfPresent(with: MediaLiveClientTypes.H265ColorSpaceSettings.read(from:))
        value.filterSettings = try reader["filterSettings"].readIfPresent(with: MediaLiveClientTypes.H265FilterSettings.read(from:))
        value.fixedAfd = try reader["fixedAfd"].readIfPresent()
        value.flickerAq = try reader["flickerAq"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent() ?? 0
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent() ?? 0
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.level = try reader["level"].readIfPresent()
        value.lookAheadRateControl = try reader["lookAheadRateControl"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.minIInterval = try reader["minIInterval"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        value.qvbrQualityLevel = try reader["qvbrQualityLevel"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.scanType = try reader["scanType"].readIfPresent()
        value.sceneChangeDetect = try reader["sceneChangeDetect"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        value.tier = try reader["tier"].readIfPresent()
        value.timecodeInsertion = try reader["timecodeInsertion"].readIfPresent()
        value.timecodeBurninSettings = try reader["timecodeBurninSettings"].readIfPresent(with: MediaLiveClientTypes.TimecodeBurninSettings.read(from:))
        value.mvOverPictureBoundaries = try reader["mvOverPictureBoundaries"].readIfPresent()
        value.mvTemporalPredictor = try reader["mvTemporalPredictor"].readIfPresent()
        value.tileHeight = try reader["tileHeight"].readIfPresent()
        value.tilePadding = try reader["tilePadding"].readIfPresent()
        value.tileWidth = try reader["tileWidth"].readIfPresent()
        value.treeblockSize = try reader["treeblockSize"].readIfPresent()
        value.minQp = try reader["minQp"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.H265FilterSettings {

    static func write(value: MediaLiveClientTypes.H265FilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bandwidthReductionFilterSettings"].write(value.bandwidthReductionFilterSettings, with: MediaLiveClientTypes.BandwidthReductionFilterSettings.write(value:to:))
        try writer["temporalFilterSettings"].write(value.temporalFilterSettings, with: MediaLiveClientTypes.TemporalFilterSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.H265FilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.H265FilterSettings()
        value.temporalFilterSettings = try reader["temporalFilterSettings"].readIfPresent(with: MediaLiveClientTypes.TemporalFilterSettings.read(from:))
        value.bandwidthReductionFilterSettings = try reader["bandwidthReductionFilterSettings"].readIfPresent(with: MediaLiveClientTypes.BandwidthReductionFilterSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.BandwidthReductionFilterSettings {

    static func write(value: MediaLiveClientTypes.BandwidthReductionFilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["postFilterSharpening"].write(value.postFilterSharpening)
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BandwidthReductionFilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BandwidthReductionFilterSettings()
        value.postFilterSharpening = try reader["postFilterSharpening"].readIfPresent()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.H265ColorSpaceSettings {

    static func write(value: MediaLiveClientTypes.H265ColorSpaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["colorSpacePassthroughSettings"].write(value.colorSpacePassthroughSettings, with: MediaLiveClientTypes.ColorSpacePassthroughSettings.write(value:to:))
        try writer["dolbyVision81Settings"].write(value.dolbyVision81Settings, with: MediaLiveClientTypes.DolbyVision81Settings.write(value:to:))
        try writer["hdr10Settings"].write(value.hdr10Settings, with: MediaLiveClientTypes.Hdr10Settings.write(value:to:))
        try writer["rec601Settings"].write(value.rec601Settings, with: MediaLiveClientTypes.Rec601Settings.write(value:to:))
        try writer["rec709Settings"].write(value.rec709Settings, with: MediaLiveClientTypes.Rec709Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.H265ColorSpaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.H265ColorSpaceSettings()
        value.colorSpacePassthroughSettings = try reader["colorSpacePassthroughSettings"].readIfPresent(with: MediaLiveClientTypes.ColorSpacePassthroughSettings.read(from:))
        value.dolbyVision81Settings = try reader["dolbyVision81Settings"].readIfPresent(with: MediaLiveClientTypes.DolbyVision81Settings.read(from:))
        value.hdr10Settings = try reader["hdr10Settings"].readIfPresent(with: MediaLiveClientTypes.Hdr10Settings.read(from:))
        value.rec601Settings = try reader["rec601Settings"].readIfPresent(with: MediaLiveClientTypes.Rec601Settings.read(from:))
        value.rec709Settings = try reader["rec709Settings"].readIfPresent(with: MediaLiveClientTypes.Rec709Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.DolbyVision81Settings {

    static func write(value: MediaLiveClientTypes.DolbyVision81Settings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DolbyVision81Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.DolbyVision81Settings()
    }
}

extension MediaLiveClientTypes.H264Settings {

    static func write(value: MediaLiveClientTypes.H264Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["afdSignaling"].write(value.afdSignaling)
        try writer["bitrate"].write(value.bitrate)
        try writer["bufFillPct"].write(value.bufFillPct)
        try writer["bufSize"].write(value.bufSize)
        try writer["colorMetadata"].write(value.colorMetadata)
        try writer["colorSpaceSettings"].write(value.colorSpaceSettings, with: MediaLiveClientTypes.H264ColorSpaceSettings.write(value:to:))
        try writer["entropyEncoding"].write(value.entropyEncoding)
        try writer["filterSettings"].write(value.filterSettings, with: MediaLiveClientTypes.H264FilterSettings.write(value:to:))
        try writer["fixedAfd"].write(value.fixedAfd)
        try writer["flickerAq"].write(value.flickerAq)
        try writer["forceFieldPictures"].write(value.forceFieldPictures)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopBReference"].write(value.gopBReference)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["gopNumBFrames"].write(value.gopNumBFrames)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["level"].write(value.level)
        try writer["lookAheadRateControl"].write(value.lookAheadRateControl)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["minIInterval"].write(value.minIInterval)
        try writer["minQp"].write(value.minQp)
        try writer["numRefFrames"].write(value.numRefFrames)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["profile"].write(value.profile)
        try writer["qualityLevel"].write(value.qualityLevel)
        try writer["qvbrQualityLevel"].write(value.qvbrQualityLevel)
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["scanType"].write(value.scanType)
        try writer["sceneChangeDetect"].write(value.sceneChangeDetect)
        try writer["slices"].write(value.slices)
        try writer["softness"].write(value.softness)
        try writer["spatialAq"].write(value.spatialAq)
        try writer["subgopLength"].write(value.subgopLength)
        try writer["syntax"].write(value.syntax)
        try writer["temporalAq"].write(value.temporalAq)
        try writer["timecodeBurninSettings"].write(value.timecodeBurninSettings, with: MediaLiveClientTypes.TimecodeBurninSettings.write(value:to:))
        try writer["timecodeInsertion"].write(value.timecodeInsertion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.H264Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.H264Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.afdSignaling = try reader["afdSignaling"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bufFillPct = try reader["bufFillPct"].readIfPresent()
        value.bufSize = try reader["bufSize"].readIfPresent()
        value.colorMetadata = try reader["colorMetadata"].readIfPresent()
        value.colorSpaceSettings = try reader["colorSpaceSettings"].readIfPresent(with: MediaLiveClientTypes.H264ColorSpaceSettings.read(from:))
        value.entropyEncoding = try reader["entropyEncoding"].readIfPresent()
        value.filterSettings = try reader["filterSettings"].readIfPresent(with: MediaLiveClientTypes.H264FilterSettings.read(from:))
        value.fixedAfd = try reader["fixedAfd"].readIfPresent()
        value.flickerAq = try reader["flickerAq"].readIfPresent()
        value.forceFieldPictures = try reader["forceFieldPictures"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopBReference = try reader["gopBReference"].readIfPresent()
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.gopNumBFrames = try reader["gopNumBFrames"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.level = try reader["level"].readIfPresent()
        value.lookAheadRateControl = try reader["lookAheadRateControl"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.minIInterval = try reader["minIInterval"].readIfPresent()
        value.numRefFrames = try reader["numRefFrames"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        value.qualityLevel = try reader["qualityLevel"].readIfPresent()
        value.qvbrQualityLevel = try reader["qvbrQualityLevel"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.scanType = try reader["scanType"].readIfPresent()
        value.sceneChangeDetect = try reader["sceneChangeDetect"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        value.softness = try reader["softness"].readIfPresent()
        value.spatialAq = try reader["spatialAq"].readIfPresent()
        value.subgopLength = try reader["subgopLength"].readIfPresent()
        value.syntax = try reader["syntax"].readIfPresent()
        value.temporalAq = try reader["temporalAq"].readIfPresent()
        value.timecodeInsertion = try reader["timecodeInsertion"].readIfPresent()
        value.timecodeBurninSettings = try reader["timecodeBurninSettings"].readIfPresent(with: MediaLiveClientTypes.TimecodeBurninSettings.read(from:))
        value.minQp = try reader["minQp"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.H264FilterSettings {

    static func write(value: MediaLiveClientTypes.H264FilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bandwidthReductionFilterSettings"].write(value.bandwidthReductionFilterSettings, with: MediaLiveClientTypes.BandwidthReductionFilterSettings.write(value:to:))
        try writer["temporalFilterSettings"].write(value.temporalFilterSettings, with: MediaLiveClientTypes.TemporalFilterSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.H264FilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.H264FilterSettings()
        value.temporalFilterSettings = try reader["temporalFilterSettings"].readIfPresent(with: MediaLiveClientTypes.TemporalFilterSettings.read(from:))
        value.bandwidthReductionFilterSettings = try reader["bandwidthReductionFilterSettings"].readIfPresent(with: MediaLiveClientTypes.BandwidthReductionFilterSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.H264ColorSpaceSettings {

    static func write(value: MediaLiveClientTypes.H264ColorSpaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["colorSpacePassthroughSettings"].write(value.colorSpacePassthroughSettings, with: MediaLiveClientTypes.ColorSpacePassthroughSettings.write(value:to:))
        try writer["rec601Settings"].write(value.rec601Settings, with: MediaLiveClientTypes.Rec601Settings.write(value:to:))
        try writer["rec709Settings"].write(value.rec709Settings, with: MediaLiveClientTypes.Rec709Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.H264ColorSpaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.H264ColorSpaceSettings()
        value.colorSpacePassthroughSettings = try reader["colorSpacePassthroughSettings"].readIfPresent(with: MediaLiveClientTypes.ColorSpacePassthroughSettings.read(from:))
        value.rec601Settings = try reader["rec601Settings"].readIfPresent(with: MediaLiveClientTypes.Rec601Settings.read(from:))
        value.rec709Settings = try reader["rec709Settings"].readIfPresent(with: MediaLiveClientTypes.Rec709Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.FrameCaptureSettings {

    static func write(value: MediaLiveClientTypes.FrameCaptureSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["captureInterval"].write(value.captureInterval)
        try writer["captureIntervalUnits"].write(value.captureIntervalUnits)
        try writer["timecodeBurninSettings"].write(value.timecodeBurninSettings, with: MediaLiveClientTypes.TimecodeBurninSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FrameCaptureSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FrameCaptureSettings()
        value.captureInterval = try reader["captureInterval"].readIfPresent()
        value.captureIntervalUnits = try reader["captureIntervalUnits"].readIfPresent()
        value.timecodeBurninSettings = try reader["timecodeBurninSettings"].readIfPresent(with: MediaLiveClientTypes.TimecodeBurninSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.TimecodeConfig {

    static func write(value: MediaLiveClientTypes.TimecodeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["source"].write(value.source)
        try writer["syncThreshold"].write(value.syncThreshold)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TimecodeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.TimecodeConfig()
        value.source = try reader["source"].readIfPresent() ?? .sdkUnknown("")
        value.syncThreshold = try reader["syncThreshold"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.OutputGroup {

    static func write(value: MediaLiveClientTypes.OutputGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["outputGroupSettings"].write(value.outputGroupSettings, with: MediaLiveClientTypes.OutputGroupSettings.write(value:to:))
        try writer["outputs"].writeList(value.outputs, memberWritingClosure: MediaLiveClientTypes.Output.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputGroup()
        value.name = try reader["name"].readIfPresent()
        value.outputGroupSettings = try reader["outputGroupSettings"].readIfPresent(with: MediaLiveClientTypes.OutputGroupSettings.read(from:))
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Output.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MediaLiveClientTypes.Output {

    static func write(value: MediaLiveClientTypes.Output?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDescriptionNames"].writeList(value.audioDescriptionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionDescriptionNames"].writeList(value.captionDescriptionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["outputName"].write(value.outputName)
        try writer["outputSettings"].write(value.outputSettings, with: MediaLiveClientTypes.OutputSettings.write(value:to:))
        try writer["videoDescriptionName"].write(value.videoDescriptionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Output {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Output()
        value.audioDescriptionNames = try reader["audioDescriptionNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionDescriptionNames = try reader["captionDescriptionNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputName = try reader["outputName"].readIfPresent()
        value.outputSettings = try reader["outputSettings"].readIfPresent(with: MediaLiveClientTypes.OutputSettings.read(from:))
        value.videoDescriptionName = try reader["videoDescriptionName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.OutputSettings {

    static func write(value: MediaLiveClientTypes.OutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["archiveOutputSettings"].write(value.archiveOutputSettings, with: MediaLiveClientTypes.ArchiveOutputSettings.write(value:to:))
        try writer["cmafIngestOutputSettings"].write(value.cmafIngestOutputSettings, with: MediaLiveClientTypes.CmafIngestOutputSettings.write(value:to:))
        try writer["frameCaptureOutputSettings"].write(value.frameCaptureOutputSettings, with: MediaLiveClientTypes.FrameCaptureOutputSettings.write(value:to:))
        try writer["hlsOutputSettings"].write(value.hlsOutputSettings, with: MediaLiveClientTypes.HlsOutputSettings.write(value:to:))
        try writer["mediaPackageOutputSettings"].write(value.mediaPackageOutputSettings, with: MediaLiveClientTypes.MediaPackageOutputSettings.write(value:to:))
        try writer["msSmoothOutputSettings"].write(value.msSmoothOutputSettings, with: MediaLiveClientTypes.MsSmoothOutputSettings.write(value:to:))
        try writer["multiplexOutputSettings"].write(value.multiplexOutputSettings, with: MediaLiveClientTypes.MultiplexOutputSettings.write(value:to:))
        try writer["rtmpOutputSettings"].write(value.rtmpOutputSettings, with: MediaLiveClientTypes.RtmpOutputSettings.write(value:to:))
        try writer["srtOutputSettings"].write(value.srtOutputSettings, with: MediaLiveClientTypes.SrtOutputSettings.write(value:to:))
        try writer["udpOutputSettings"].write(value.udpOutputSettings, with: MediaLiveClientTypes.UdpOutputSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputSettings()
        value.archiveOutputSettings = try reader["archiveOutputSettings"].readIfPresent(with: MediaLiveClientTypes.ArchiveOutputSettings.read(from:))
        value.frameCaptureOutputSettings = try reader["frameCaptureOutputSettings"].readIfPresent(with: MediaLiveClientTypes.FrameCaptureOutputSettings.read(from:))
        value.hlsOutputSettings = try reader["hlsOutputSettings"].readIfPresent(with: MediaLiveClientTypes.HlsOutputSettings.read(from:))
        value.mediaPackageOutputSettings = try reader["mediaPackageOutputSettings"].readIfPresent(with: MediaLiveClientTypes.MediaPackageOutputSettings.read(from:))
        value.msSmoothOutputSettings = try reader["msSmoothOutputSettings"].readIfPresent(with: MediaLiveClientTypes.MsSmoothOutputSettings.read(from:))
        value.multiplexOutputSettings = try reader["multiplexOutputSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexOutputSettings.read(from:))
        value.rtmpOutputSettings = try reader["rtmpOutputSettings"].readIfPresent(with: MediaLiveClientTypes.RtmpOutputSettings.read(from:))
        value.udpOutputSettings = try reader["udpOutputSettings"].readIfPresent(with: MediaLiveClientTypes.UdpOutputSettings.read(from:))
        value.cmafIngestOutputSettings = try reader["cmafIngestOutputSettings"].readIfPresent(with: MediaLiveClientTypes.CmafIngestOutputSettings.read(from:))
        value.srtOutputSettings = try reader["srtOutputSettings"].readIfPresent(with: MediaLiveClientTypes.SrtOutputSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.SrtOutputSettings {

    static func write(value: MediaLiveClientTypes.SrtOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bufferMsec"].write(value.bufferMsec)
        try writer["containerSettings"].write(value.containerSettings, with: MediaLiveClientTypes.UdpContainerSettings.write(value:to:))
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["encryptionType"].write(value.encryptionType)
        try writer["latency"].write(value.latency)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SrtOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SrtOutputSettings()
        value.bufferMsec = try reader["bufferMsec"].readIfPresent()
        value.containerSettings = try reader["containerSettings"].readIfPresent(with: MediaLiveClientTypes.UdpContainerSettings.read(from:))
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.encryptionType = try reader["encryptionType"].readIfPresent()
        value.latency = try reader["latency"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.OutputLocationRef {

    static func write(value: MediaLiveClientTypes.OutputLocationRef?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationRefId"].write(value.destinationRefId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputLocationRef {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputLocationRef()
        value.destinationRefId = try reader["destinationRefId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.UdpContainerSettings {

    static func write(value: MediaLiveClientTypes.UdpContainerSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["m2tsSettings"].write(value.m2tsSettings, with: MediaLiveClientTypes.M2tsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.UdpContainerSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.UdpContainerSettings()
        value.m2tsSettings = try reader["m2tsSettings"].readIfPresent(with: MediaLiveClientTypes.M2tsSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.M2tsSettings {

    static func write(value: MediaLiveClientTypes.M2tsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["absentInputAudioBehavior"].write(value.absentInputAudioBehavior)
        try writer["arib"].write(value.arib)
        try writer["aribCaptionsPid"].write(value.aribCaptionsPid)
        try writer["aribCaptionsPidControl"].write(value.aribCaptionsPidControl)
        try writer["audioBufferModel"].write(value.audioBufferModel)
        try writer["audioFramesPerPes"].write(value.audioFramesPerPes)
        try writer["audioPids"].write(value.audioPids)
        try writer["audioStreamType"].write(value.audioStreamType)
        try writer["bitrate"].write(value.bitrate)
        try writer["bufferModel"].write(value.bufferModel)
        try writer["ccDescriptor"].write(value.ccDescriptor)
        try writer["dvbNitSettings"].write(value.dvbNitSettings, with: MediaLiveClientTypes.DvbNitSettings.write(value:to:))
        try writer["dvbSdtSettings"].write(value.dvbSdtSettings, with: MediaLiveClientTypes.DvbSdtSettings.write(value:to:))
        try writer["dvbSubPids"].write(value.dvbSubPids)
        try writer["dvbTdtSettings"].write(value.dvbTdtSettings, with: MediaLiveClientTypes.DvbTdtSettings.write(value:to:))
        try writer["dvbTeletextPid"].write(value.dvbTeletextPid)
        try writer["ebif"].write(value.ebif)
        try writer["ebpAudioInterval"].write(value.ebpAudioInterval)
        try writer["ebpLookaheadMs"].write(value.ebpLookaheadMs)
        try writer["ebpPlacement"].write(value.ebpPlacement)
        try writer["ecmPid"].write(value.ecmPid)
        try writer["esRateInPes"].write(value.esRateInPes)
        try writer["etvPlatformPid"].write(value.etvPlatformPid)
        try writer["etvSignalPid"].write(value.etvSignalPid)
        try writer["fragmentTime"].write(value.fragmentTime)
        try writer["klv"].write(value.klv)
        try writer["klvDataPids"].write(value.klvDataPids)
        try writer["nielsenId3Behavior"].write(value.nielsenId3Behavior)
        try writer["nullPacketBitrate"].write(value.nullPacketBitrate)
        try writer["patInterval"].write(value.patInterval)
        try writer["pcrControl"].write(value.pcrControl)
        try writer["pcrPeriod"].write(value.pcrPeriod)
        try writer["pcrPid"].write(value.pcrPid)
        try writer["pmtInterval"].write(value.pmtInterval)
        try writer["pmtPid"].write(value.pmtPid)
        try writer["programNum"].write(value.programNum)
        try writer["rateMode"].write(value.rateMode)
        try writer["scte27Pids"].write(value.scte27Pids)
        try writer["scte35Control"].write(value.scte35Control)
        try writer["scte35Pid"].write(value.scte35Pid)
        try writer["scte35PrerollPullupMilliseconds"].write(value.scte35PrerollPullupMilliseconds)
        try writer["segmentationMarkers"].write(value.segmentationMarkers)
        try writer["segmentationStyle"].write(value.segmentationStyle)
        try writer["segmentationTime"].write(value.segmentationTime)
        try writer["timedMetadataBehavior"].write(value.timedMetadataBehavior)
        try writer["timedMetadataPid"].write(value.timedMetadataPid)
        try writer["transportStreamId"].write(value.transportStreamId)
        try writer["videoPid"].write(value.videoPid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.M2tsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.M2tsSettings()
        value.absentInputAudioBehavior = try reader["absentInputAudioBehavior"].readIfPresent()
        value.arib = try reader["arib"].readIfPresent()
        value.aribCaptionsPid = try reader["aribCaptionsPid"].readIfPresent()
        value.aribCaptionsPidControl = try reader["aribCaptionsPidControl"].readIfPresent()
        value.audioBufferModel = try reader["audioBufferModel"].readIfPresent()
        value.audioFramesPerPes = try reader["audioFramesPerPes"].readIfPresent()
        value.audioPids = try reader["audioPids"].readIfPresent()
        value.audioStreamType = try reader["audioStreamType"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bufferModel = try reader["bufferModel"].readIfPresent()
        value.ccDescriptor = try reader["ccDescriptor"].readIfPresent()
        value.dvbNitSettings = try reader["dvbNitSettings"].readIfPresent(with: MediaLiveClientTypes.DvbNitSettings.read(from:))
        value.dvbSdtSettings = try reader["dvbSdtSettings"].readIfPresent(with: MediaLiveClientTypes.DvbSdtSettings.read(from:))
        value.dvbSubPids = try reader["dvbSubPids"].readIfPresent()
        value.dvbTdtSettings = try reader["dvbTdtSettings"].readIfPresent(with: MediaLiveClientTypes.DvbTdtSettings.read(from:))
        value.dvbTeletextPid = try reader["dvbTeletextPid"].readIfPresent()
        value.ebif = try reader["ebif"].readIfPresent()
        value.ebpAudioInterval = try reader["ebpAudioInterval"].readIfPresent()
        value.ebpLookaheadMs = try reader["ebpLookaheadMs"].readIfPresent()
        value.ebpPlacement = try reader["ebpPlacement"].readIfPresent()
        value.ecmPid = try reader["ecmPid"].readIfPresent()
        value.esRateInPes = try reader["esRateInPes"].readIfPresent()
        value.etvPlatformPid = try reader["etvPlatformPid"].readIfPresent()
        value.etvSignalPid = try reader["etvSignalPid"].readIfPresent()
        value.fragmentTime = try reader["fragmentTime"].readIfPresent()
        value.klv = try reader["klv"].readIfPresent()
        value.klvDataPids = try reader["klvDataPids"].readIfPresent()
        value.nielsenId3Behavior = try reader["nielsenId3Behavior"].readIfPresent()
        value.nullPacketBitrate = try reader["nullPacketBitrate"].readIfPresent()
        value.patInterval = try reader["patInterval"].readIfPresent()
        value.pcrControl = try reader["pcrControl"].readIfPresent()
        value.pcrPeriod = try reader["pcrPeriod"].readIfPresent()
        value.pcrPid = try reader["pcrPid"].readIfPresent()
        value.pmtInterval = try reader["pmtInterval"].readIfPresent()
        value.pmtPid = try reader["pmtPid"].readIfPresent()
        value.programNum = try reader["programNum"].readIfPresent()
        value.rateMode = try reader["rateMode"].readIfPresent()
        value.scte27Pids = try reader["scte27Pids"].readIfPresent()
        value.scte35Control = try reader["scte35Control"].readIfPresent()
        value.scte35Pid = try reader["scte35Pid"].readIfPresent()
        value.segmentationMarkers = try reader["segmentationMarkers"].readIfPresent()
        value.segmentationStyle = try reader["segmentationStyle"].readIfPresent()
        value.segmentationTime = try reader["segmentationTime"].readIfPresent()
        value.timedMetadataBehavior = try reader["timedMetadataBehavior"].readIfPresent()
        value.timedMetadataPid = try reader["timedMetadataPid"].readIfPresent()
        value.transportStreamId = try reader["transportStreamId"].readIfPresent()
        value.videoPid = try reader["videoPid"].readIfPresent()
        value.scte35PrerollPullupMilliseconds = try reader["scte35PrerollPullupMilliseconds"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DvbTdtSettings {

    static func write(value: MediaLiveClientTypes.DvbTdtSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["repInterval"].write(value.repInterval)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DvbTdtSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DvbTdtSettings()
        value.repInterval = try reader["repInterval"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DvbSdtSettings {

    static func write(value: MediaLiveClientTypes.DvbSdtSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["outputSdt"].write(value.outputSdt)
        try writer["repInterval"].write(value.repInterval)
        try writer["serviceName"].write(value.serviceName)
        try writer["serviceProviderName"].write(value.serviceProviderName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DvbSdtSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DvbSdtSettings()
        value.outputSdt = try reader["outputSdt"].readIfPresent()
        value.repInterval = try reader["repInterval"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceProviderName = try reader["serviceProviderName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DvbNitSettings {

    static func write(value: MediaLiveClientTypes.DvbNitSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["networkId"].write(value.networkId)
        try writer["networkName"].write(value.networkName)
        try writer["repInterval"].write(value.repInterval)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DvbNitSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DvbNitSettings()
        value.networkId = try reader["networkId"].readIfPresent() ?? 0
        value.networkName = try reader["networkName"].readIfPresent() ?? ""
        value.repInterval = try reader["repInterval"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CmafIngestOutputSettings {

    static func write(value: MediaLiveClientTypes.CmafIngestOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nameModifier"].write(value.nameModifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CmafIngestOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CmafIngestOutputSettings()
        value.nameModifier = try reader["nameModifier"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.UdpOutputSettings {

    static func write(value: MediaLiveClientTypes.UdpOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bufferMsec"].write(value.bufferMsec)
        try writer["containerSettings"].write(value.containerSettings, with: MediaLiveClientTypes.UdpContainerSettings.write(value:to:))
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["fecOutputSettings"].write(value.fecOutputSettings, with: MediaLiveClientTypes.FecOutputSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.UdpOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.UdpOutputSettings()
        value.bufferMsec = try reader["bufferMsec"].readIfPresent()
        value.containerSettings = try reader["containerSettings"].readIfPresent(with: MediaLiveClientTypes.UdpContainerSettings.read(from:))
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.fecOutputSettings = try reader["fecOutputSettings"].readIfPresent(with: MediaLiveClientTypes.FecOutputSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.FecOutputSettings {

    static func write(value: MediaLiveClientTypes.FecOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columnDepth"].write(value.columnDepth)
        try writer["includeFec"].write(value.includeFec)
        try writer["rowLength"].write(value.rowLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FecOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FecOutputSettings()
        value.columnDepth = try reader["columnDepth"].readIfPresent()
        value.includeFec = try reader["includeFec"].readIfPresent()
        value.rowLength = try reader["rowLength"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.RtmpOutputSettings {

    static func write(value: MediaLiveClientTypes.RtmpOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateMode"].write(value.certificateMode)
        try writer["connectionRetryInterval"].write(value.connectionRetryInterval)
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["numRetries"].write(value.numRetries)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.RtmpOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.RtmpOutputSettings()
        value.certificateMode = try reader["certificateMode"].readIfPresent()
        value.connectionRetryInterval = try reader["connectionRetryInterval"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.numRetries = try reader["numRetries"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexOutputSettings {

    static func write(value: MediaLiveClientTypes.MultiplexOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerSettings"].write(value.containerSettings, with: MediaLiveClientTypes.MultiplexContainerSettings.write(value:to:))
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexOutputSettings()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.containerSettings = try reader["containerSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexContainerSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MultiplexContainerSettings {

    static func write(value: MediaLiveClientTypes.MultiplexContainerSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["multiplexM2tsSettings"].write(value.multiplexM2tsSettings, with: MediaLiveClientTypes.MultiplexM2tsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexContainerSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexContainerSettings()
        value.multiplexM2tsSettings = try reader["multiplexM2tsSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexM2tsSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MultiplexM2tsSettings {

    static func write(value: MediaLiveClientTypes.MultiplexM2tsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["absentInputAudioBehavior"].write(value.absentInputAudioBehavior)
        try writer["arib"].write(value.arib)
        try writer["audioBufferModel"].write(value.audioBufferModel)
        try writer["audioFramesPerPes"].write(value.audioFramesPerPes)
        try writer["audioStreamType"].write(value.audioStreamType)
        try writer["ccDescriptor"].write(value.ccDescriptor)
        try writer["ebif"].write(value.ebif)
        try writer["esRateInPes"].write(value.esRateInPes)
        try writer["klv"].write(value.klv)
        try writer["nielsenId3Behavior"].write(value.nielsenId3Behavior)
        try writer["pcrControl"].write(value.pcrControl)
        try writer["pcrPeriod"].write(value.pcrPeriod)
        try writer["scte35Control"].write(value.scte35Control)
        try writer["scte35PrerollPullupMilliseconds"].write(value.scte35PrerollPullupMilliseconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexM2tsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexM2tsSettings()
        value.absentInputAudioBehavior = try reader["absentInputAudioBehavior"].readIfPresent()
        value.arib = try reader["arib"].readIfPresent()
        value.audioBufferModel = try reader["audioBufferModel"].readIfPresent()
        value.audioFramesPerPes = try reader["audioFramesPerPes"].readIfPresent()
        value.audioStreamType = try reader["audioStreamType"].readIfPresent()
        value.ccDescriptor = try reader["ccDescriptor"].readIfPresent()
        value.ebif = try reader["ebif"].readIfPresent()
        value.esRateInPes = try reader["esRateInPes"].readIfPresent()
        value.klv = try reader["klv"].readIfPresent()
        value.nielsenId3Behavior = try reader["nielsenId3Behavior"].readIfPresent()
        value.pcrControl = try reader["pcrControl"].readIfPresent()
        value.pcrPeriod = try reader["pcrPeriod"].readIfPresent()
        value.scte35Control = try reader["scte35Control"].readIfPresent()
        value.scte35PrerollPullupMilliseconds = try reader["scte35PrerollPullupMilliseconds"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MsSmoothOutputSettings {

    static func write(value: MediaLiveClientTypes.MsSmoothOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["h265PackagingType"].write(value.h265PackagingType)
        try writer["nameModifier"].write(value.nameModifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MsSmoothOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MsSmoothOutputSettings()
        value.h265PackagingType = try reader["h265PackagingType"].readIfPresent()
        value.nameModifier = try reader["nameModifier"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MediaPackageOutputSettings {

    static func write(value: MediaLiveClientTypes.MediaPackageOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MediaPackageOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.MediaPackageOutputSettings()
    }
}

extension MediaLiveClientTypes.HlsOutputSettings {

    static func write(value: MediaLiveClientTypes.HlsOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["h265PackagingType"].write(value.h265PackagingType)
        try writer["hlsSettings"].write(value.hlsSettings, with: MediaLiveClientTypes.HlsSettings.write(value:to:))
        try writer["nameModifier"].write(value.nameModifier)
        try writer["segmentModifier"].write(value.segmentModifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsOutputSettings()
        value.h265PackagingType = try reader["h265PackagingType"].readIfPresent()
        value.hlsSettings = try reader["hlsSettings"].readIfPresent(with: MediaLiveClientTypes.HlsSettings.read(from:))
        value.nameModifier = try reader["nameModifier"].readIfPresent()
        value.segmentModifier = try reader["segmentModifier"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.HlsSettings {

    static func write(value: MediaLiveClientTypes.HlsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioOnlyHlsSettings"].write(value.audioOnlyHlsSettings, with: MediaLiveClientTypes.AudioOnlyHlsSettings.write(value:to:))
        try writer["fmp4HlsSettings"].write(value.fmp4HlsSettings, with: MediaLiveClientTypes.Fmp4HlsSettings.write(value:to:))
        try writer["frameCaptureHlsSettings"].write(value.frameCaptureHlsSettings, with: MediaLiveClientTypes.FrameCaptureHlsSettings.write(value:to:))
        try writer["standardHlsSettings"].write(value.standardHlsSettings, with: MediaLiveClientTypes.StandardHlsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsSettings()
        value.audioOnlyHlsSettings = try reader["audioOnlyHlsSettings"].readIfPresent(with: MediaLiveClientTypes.AudioOnlyHlsSettings.read(from:))
        value.fmp4HlsSettings = try reader["fmp4HlsSettings"].readIfPresent(with: MediaLiveClientTypes.Fmp4HlsSettings.read(from:))
        value.frameCaptureHlsSettings = try reader["frameCaptureHlsSettings"].readIfPresent(with: MediaLiveClientTypes.FrameCaptureHlsSettings.read(from:))
        value.standardHlsSettings = try reader["standardHlsSettings"].readIfPresent(with: MediaLiveClientTypes.StandardHlsSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.StandardHlsSettings {

    static func write(value: MediaLiveClientTypes.StandardHlsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioRenditionSets"].write(value.audioRenditionSets)
        try writer["m3u8Settings"].write(value.m3u8Settings, with: MediaLiveClientTypes.M3u8Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StandardHlsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StandardHlsSettings()
        value.audioRenditionSets = try reader["audioRenditionSets"].readIfPresent()
        value.m3u8Settings = try reader["m3u8Settings"].readIfPresent(with: MediaLiveClientTypes.M3u8Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.M3u8Settings {

    static func write(value: MediaLiveClientTypes.M3u8Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioFramesPerPes"].write(value.audioFramesPerPes)
        try writer["audioPids"].write(value.audioPids)
        try writer["ecmPid"].write(value.ecmPid)
        try writer["klvBehavior"].write(value.klvBehavior)
        try writer["klvDataPids"].write(value.klvDataPids)
        try writer["nielsenId3Behavior"].write(value.nielsenId3Behavior)
        try writer["patInterval"].write(value.patInterval)
        try writer["pcrControl"].write(value.pcrControl)
        try writer["pcrPeriod"].write(value.pcrPeriod)
        try writer["pcrPid"].write(value.pcrPid)
        try writer["pmtInterval"].write(value.pmtInterval)
        try writer["pmtPid"].write(value.pmtPid)
        try writer["programNum"].write(value.programNum)
        try writer["scte35Behavior"].write(value.scte35Behavior)
        try writer["scte35Pid"].write(value.scte35Pid)
        try writer["timedMetadataBehavior"].write(value.timedMetadataBehavior)
        try writer["timedMetadataPid"].write(value.timedMetadataPid)
        try writer["transportStreamId"].write(value.transportStreamId)
        try writer["videoPid"].write(value.videoPid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.M3u8Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.M3u8Settings()
        value.audioFramesPerPes = try reader["audioFramesPerPes"].readIfPresent()
        value.audioPids = try reader["audioPids"].readIfPresent()
        value.ecmPid = try reader["ecmPid"].readIfPresent()
        value.nielsenId3Behavior = try reader["nielsenId3Behavior"].readIfPresent()
        value.patInterval = try reader["patInterval"].readIfPresent()
        value.pcrControl = try reader["pcrControl"].readIfPresent()
        value.pcrPeriod = try reader["pcrPeriod"].readIfPresent()
        value.pcrPid = try reader["pcrPid"].readIfPresent()
        value.pmtInterval = try reader["pmtInterval"].readIfPresent()
        value.pmtPid = try reader["pmtPid"].readIfPresent()
        value.programNum = try reader["programNum"].readIfPresent()
        value.scte35Behavior = try reader["scte35Behavior"].readIfPresent()
        value.scte35Pid = try reader["scte35Pid"].readIfPresent()
        value.timedMetadataBehavior = try reader["timedMetadataBehavior"].readIfPresent()
        value.timedMetadataPid = try reader["timedMetadataPid"].readIfPresent()
        value.transportStreamId = try reader["transportStreamId"].readIfPresent()
        value.videoPid = try reader["videoPid"].readIfPresent()
        value.klvBehavior = try reader["klvBehavior"].readIfPresent()
        value.klvDataPids = try reader["klvDataPids"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.FrameCaptureHlsSettings {

    static func write(value: MediaLiveClientTypes.FrameCaptureHlsSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FrameCaptureHlsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.FrameCaptureHlsSettings()
    }
}

extension MediaLiveClientTypes.Fmp4HlsSettings {

    static func write(value: MediaLiveClientTypes.Fmp4HlsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioRenditionSets"].write(value.audioRenditionSets)
        try writer["nielsenId3Behavior"].write(value.nielsenId3Behavior)
        try writer["timedMetadataBehavior"].write(value.timedMetadataBehavior)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Fmp4HlsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Fmp4HlsSettings()
        value.audioRenditionSets = try reader["audioRenditionSets"].readIfPresent()
        value.nielsenId3Behavior = try reader["nielsenId3Behavior"].readIfPresent()
        value.timedMetadataBehavior = try reader["timedMetadataBehavior"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioOnlyHlsSettings {

    static func write(value: MediaLiveClientTypes.AudioOnlyHlsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioGroupId"].write(value.audioGroupId)
        try writer["audioOnlyImage"].write(value.audioOnlyImage, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["audioTrackType"].write(value.audioTrackType)
        try writer["segmentType"].write(value.segmentType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioOnlyHlsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioOnlyHlsSettings()
        value.audioGroupId = try reader["audioGroupId"].readIfPresent()
        value.audioOnlyImage = try reader["audioOnlyImage"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.audioTrackType = try reader["audioTrackType"].readIfPresent()
        value.segmentType = try reader["segmentType"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.FrameCaptureOutputSettings {

    static func write(value: MediaLiveClientTypes.FrameCaptureOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nameModifier"].write(value.nameModifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FrameCaptureOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FrameCaptureOutputSettings()
        value.nameModifier = try reader["nameModifier"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ArchiveOutputSettings {

    static func write(value: MediaLiveClientTypes.ArchiveOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerSettings"].write(value.containerSettings, with: MediaLiveClientTypes.ArchiveContainerSettings.write(value:to:))
        try writer["extension"].write(value.`extension`)
        try writer["nameModifier"].write(value.nameModifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ArchiveOutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ArchiveOutputSettings()
        value.containerSettings = try reader["containerSettings"].readIfPresent(with: MediaLiveClientTypes.ArchiveContainerSettings.read(from:))
        value.`extension` = try reader["extension"].readIfPresent()
        value.nameModifier = try reader["nameModifier"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ArchiveContainerSettings {

    static func write(value: MediaLiveClientTypes.ArchiveContainerSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["m2tsSettings"].write(value.m2tsSettings, with: MediaLiveClientTypes.M2tsSettings.write(value:to:))
        try writer["rawSettings"].write(value.rawSettings, with: MediaLiveClientTypes.RawSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ArchiveContainerSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ArchiveContainerSettings()
        value.m2tsSettings = try reader["m2tsSettings"].readIfPresent(with: MediaLiveClientTypes.M2tsSettings.read(from:))
        value.rawSettings = try reader["rawSettings"].readIfPresent(with: MediaLiveClientTypes.RawSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.RawSettings {

    static func write(value: MediaLiveClientTypes.RawSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.RawSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.RawSettings()
    }
}

extension MediaLiveClientTypes.OutputGroupSettings {

    static func write(value: MediaLiveClientTypes.OutputGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["archiveGroupSettings"].write(value.archiveGroupSettings, with: MediaLiveClientTypes.ArchiveGroupSettings.write(value:to:))
        try writer["cmafIngestGroupSettings"].write(value.cmafIngestGroupSettings, with: MediaLiveClientTypes.CmafIngestGroupSettings.write(value:to:))
        try writer["frameCaptureGroupSettings"].write(value.frameCaptureGroupSettings, with: MediaLiveClientTypes.FrameCaptureGroupSettings.write(value:to:))
        try writer["hlsGroupSettings"].write(value.hlsGroupSettings, with: MediaLiveClientTypes.HlsGroupSettings.write(value:to:))
        try writer["mediaPackageGroupSettings"].write(value.mediaPackageGroupSettings, with: MediaLiveClientTypes.MediaPackageGroupSettings.write(value:to:))
        try writer["msSmoothGroupSettings"].write(value.msSmoothGroupSettings, with: MediaLiveClientTypes.MsSmoothGroupSettings.write(value:to:))
        try writer["multiplexGroupSettings"].write(value.multiplexGroupSettings, with: MediaLiveClientTypes.MultiplexGroupSettings.write(value:to:))
        try writer["rtmpGroupSettings"].write(value.rtmpGroupSettings, with: MediaLiveClientTypes.RtmpGroupSettings.write(value:to:))
        try writer["srtGroupSettings"].write(value.srtGroupSettings, with: MediaLiveClientTypes.SrtGroupSettings.write(value:to:))
        try writer["udpGroupSettings"].write(value.udpGroupSettings, with: MediaLiveClientTypes.UdpGroupSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputGroupSettings()
        value.archiveGroupSettings = try reader["archiveGroupSettings"].readIfPresent(with: MediaLiveClientTypes.ArchiveGroupSettings.read(from:))
        value.frameCaptureGroupSettings = try reader["frameCaptureGroupSettings"].readIfPresent(with: MediaLiveClientTypes.FrameCaptureGroupSettings.read(from:))
        value.hlsGroupSettings = try reader["hlsGroupSettings"].readIfPresent(with: MediaLiveClientTypes.HlsGroupSettings.read(from:))
        value.mediaPackageGroupSettings = try reader["mediaPackageGroupSettings"].readIfPresent(with: MediaLiveClientTypes.MediaPackageGroupSettings.read(from:))
        value.msSmoothGroupSettings = try reader["msSmoothGroupSettings"].readIfPresent(with: MediaLiveClientTypes.MsSmoothGroupSettings.read(from:))
        value.multiplexGroupSettings = try reader["multiplexGroupSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexGroupSettings.read(from:))
        value.rtmpGroupSettings = try reader["rtmpGroupSettings"].readIfPresent(with: MediaLiveClientTypes.RtmpGroupSettings.read(from:))
        value.udpGroupSettings = try reader["udpGroupSettings"].readIfPresent(with: MediaLiveClientTypes.UdpGroupSettings.read(from:))
        value.cmafIngestGroupSettings = try reader["cmafIngestGroupSettings"].readIfPresent(with: MediaLiveClientTypes.CmafIngestGroupSettings.read(from:))
        value.srtGroupSettings = try reader["srtGroupSettings"].readIfPresent(with: MediaLiveClientTypes.SrtGroupSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.SrtGroupSettings {

    static func write(value: MediaLiveClientTypes.SrtGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputLossAction"].write(value.inputLossAction)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SrtGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SrtGroupSettings()
        value.inputLossAction = try reader["inputLossAction"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CmafIngestGroupSettings {

    static func write(value: MediaLiveClientTypes.CmafIngestGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["nielsenId3Behavior"].write(value.nielsenId3Behavior)
        try writer["scte35Type"].write(value.scte35Type)
        try writer["segmentLength"].write(value.segmentLength)
        try writer["segmentLengthUnits"].write(value.segmentLengthUnits)
        try writer["sendDelayMs"].write(value.sendDelayMs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CmafIngestGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CmafIngestGroupSettings()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.nielsenId3Behavior = try reader["nielsenId3Behavior"].readIfPresent()
        value.scte35Type = try reader["scte35Type"].readIfPresent()
        value.segmentLength = try reader["segmentLength"].readIfPresent()
        value.segmentLengthUnits = try reader["segmentLengthUnits"].readIfPresent()
        value.sendDelayMs = try reader["sendDelayMs"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.UdpGroupSettings {

    static func write(value: MediaLiveClientTypes.UdpGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputLossAction"].write(value.inputLossAction)
        try writer["timedMetadataId3Frame"].write(value.timedMetadataId3Frame)
        try writer["timedMetadataId3Period"].write(value.timedMetadataId3Period)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.UdpGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.UdpGroupSettings()
        value.inputLossAction = try reader["inputLossAction"].readIfPresent()
        value.timedMetadataId3Frame = try reader["timedMetadataId3Frame"].readIfPresent()
        value.timedMetadataId3Period = try reader["timedMetadataId3Period"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.RtmpGroupSettings {

    static func write(value: MediaLiveClientTypes.RtmpGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adMarkers"].writeList(value.adMarkers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaLiveClientTypes.RtmpAdMarkers>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["authenticationScheme"].write(value.authenticationScheme)
        try writer["cacheFullBehavior"].write(value.cacheFullBehavior)
        try writer["cacheLength"].write(value.cacheLength)
        try writer["captionData"].write(value.captionData)
        try writer["includeFillerNalUnits"].write(value.includeFillerNalUnits)
        try writer["inputLossAction"].write(value.inputLossAction)
        try writer["restartDelay"].write(value.restartDelay)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.RtmpGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.RtmpGroupSettings()
        value.adMarkers = try reader["adMarkers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaLiveClientTypes.RtmpAdMarkers>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.authenticationScheme = try reader["authenticationScheme"].readIfPresent()
        value.cacheFullBehavior = try reader["cacheFullBehavior"].readIfPresent()
        value.cacheLength = try reader["cacheLength"].readIfPresent()
        value.captionData = try reader["captionData"].readIfPresent()
        value.inputLossAction = try reader["inputLossAction"].readIfPresent()
        value.restartDelay = try reader["restartDelay"].readIfPresent()
        value.includeFillerNalUnits = try reader["includeFillerNalUnits"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexGroupSettings {

    static func write(value: MediaLiveClientTypes.MultiplexGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.MultiplexGroupSettings()
    }
}

extension MediaLiveClientTypes.MsSmoothGroupSettings {

    static func write(value: MediaLiveClientTypes.MsSmoothGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["acquisitionPointId"].write(value.acquisitionPointId)
        try writer["audioOnlyTimecodeControl"].write(value.audioOnlyTimecodeControl)
        try writer["certificateMode"].write(value.certificateMode)
        try writer["connectionRetryInterval"].write(value.connectionRetryInterval)
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["eventId"].write(value.eventId)
        try writer["eventIdMode"].write(value.eventIdMode)
        try writer["eventStopBehavior"].write(value.eventStopBehavior)
        try writer["filecacheDuration"].write(value.filecacheDuration)
        try writer["fragmentLength"].write(value.fragmentLength)
        try writer["inputLossAction"].write(value.inputLossAction)
        try writer["numRetries"].write(value.numRetries)
        try writer["restartDelay"].write(value.restartDelay)
        try writer["segmentationMode"].write(value.segmentationMode)
        try writer["sendDelayMs"].write(value.sendDelayMs)
        try writer["sparseTrackType"].write(value.sparseTrackType)
        try writer["streamManifestBehavior"].write(value.streamManifestBehavior)
        try writer["timestampOffset"].write(value.timestampOffset)
        try writer["timestampOffsetMode"].write(value.timestampOffsetMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MsSmoothGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MsSmoothGroupSettings()
        value.acquisitionPointId = try reader["acquisitionPointId"].readIfPresent()
        value.audioOnlyTimecodeControl = try reader["audioOnlyTimecodeControl"].readIfPresent()
        value.certificateMode = try reader["certificateMode"].readIfPresent()
        value.connectionRetryInterval = try reader["connectionRetryInterval"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.eventId = try reader["eventId"].readIfPresent()
        value.eventIdMode = try reader["eventIdMode"].readIfPresent()
        value.eventStopBehavior = try reader["eventStopBehavior"].readIfPresent()
        value.filecacheDuration = try reader["filecacheDuration"].readIfPresent()
        value.fragmentLength = try reader["fragmentLength"].readIfPresent()
        value.inputLossAction = try reader["inputLossAction"].readIfPresent()
        value.numRetries = try reader["numRetries"].readIfPresent()
        value.restartDelay = try reader["restartDelay"].readIfPresent()
        value.segmentationMode = try reader["segmentationMode"].readIfPresent()
        value.sendDelayMs = try reader["sendDelayMs"].readIfPresent()
        value.sparseTrackType = try reader["sparseTrackType"].readIfPresent()
        value.streamManifestBehavior = try reader["streamManifestBehavior"].readIfPresent()
        value.timestampOffset = try reader["timestampOffset"].readIfPresent()
        value.timestampOffsetMode = try reader["timestampOffsetMode"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MediaPackageGroupSettings {

    static func write(value: MediaLiveClientTypes.MediaPackageGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MediaPackageGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MediaPackageGroupSettings()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.HlsGroupSettings {

    static func write(value: MediaLiveClientTypes.HlsGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adMarkers"].writeList(value.adMarkers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaLiveClientTypes.HlsAdMarkers>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["baseUrlContent"].write(value.baseUrlContent)
        try writer["baseUrlContent1"].write(value.baseUrlContent1)
        try writer["baseUrlManifest"].write(value.baseUrlManifest)
        try writer["baseUrlManifest1"].write(value.baseUrlManifest1)
        try writer["captionLanguageMappings"].writeList(value.captionLanguageMappings, memberWritingClosure: MediaLiveClientTypes.CaptionLanguageMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionLanguageSetting"].write(value.captionLanguageSetting)
        try writer["clientCache"].write(value.clientCache)
        try writer["codecSpecification"].write(value.codecSpecification)
        try writer["constantIv"].write(value.constantIv)
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["directoryStructure"].write(value.directoryStructure)
        try writer["discontinuityTags"].write(value.discontinuityTags)
        try writer["encryptionType"].write(value.encryptionType)
        try writer["hlsCdnSettings"].write(value.hlsCdnSettings, with: MediaLiveClientTypes.HlsCdnSettings.write(value:to:))
        try writer["hlsId3SegmentTagging"].write(value.hlsId3SegmentTagging)
        try writer["iFrameOnlyPlaylists"].write(value.iFrameOnlyPlaylists)
        try writer["incompleteSegmentBehavior"].write(value.incompleteSegmentBehavior)
        try writer["indexNSegments"].write(value.indexNSegments)
        try writer["inputLossAction"].write(value.inputLossAction)
        try writer["ivInManifest"].write(value.ivInManifest)
        try writer["ivSource"].write(value.ivSource)
        try writer["keepSegments"].write(value.keepSegments)
        try writer["keyFormat"].write(value.keyFormat)
        try writer["keyFormatVersions"].write(value.keyFormatVersions)
        try writer["keyProviderSettings"].write(value.keyProviderSettings, with: MediaLiveClientTypes.KeyProviderSettings.write(value:to:))
        try writer["manifestCompression"].write(value.manifestCompression)
        try writer["manifestDurationFormat"].write(value.manifestDurationFormat)
        try writer["minSegmentLength"].write(value.minSegmentLength)
        try writer["mode"].write(value.mode)
        try writer["outputSelection"].write(value.outputSelection)
        try writer["programDateTime"].write(value.programDateTime)
        try writer["programDateTimeClock"].write(value.programDateTimeClock)
        try writer["programDateTimePeriod"].write(value.programDateTimePeriod)
        try writer["redundantManifest"].write(value.redundantManifest)
        try writer["segmentLength"].write(value.segmentLength)
        try writer["segmentationMode"].write(value.segmentationMode)
        try writer["segmentsPerSubdirectory"].write(value.segmentsPerSubdirectory)
        try writer["streamInfResolution"].write(value.streamInfResolution)
        try writer["timedMetadataId3Frame"].write(value.timedMetadataId3Frame)
        try writer["timedMetadataId3Period"].write(value.timedMetadataId3Period)
        try writer["timestampDeltaMilliseconds"].write(value.timestampDeltaMilliseconds)
        try writer["tsFileMode"].write(value.tsFileMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsGroupSettings()
        value.adMarkers = try reader["adMarkers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaLiveClientTypes.HlsAdMarkers>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.baseUrlContent = try reader["baseUrlContent"].readIfPresent()
        value.baseUrlContent1 = try reader["baseUrlContent1"].readIfPresent()
        value.baseUrlManifest = try reader["baseUrlManifest"].readIfPresent()
        value.baseUrlManifest1 = try reader["baseUrlManifest1"].readIfPresent()
        value.captionLanguageMappings = try reader["captionLanguageMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.CaptionLanguageMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionLanguageSetting = try reader["captionLanguageSetting"].readIfPresent()
        value.clientCache = try reader["clientCache"].readIfPresent()
        value.codecSpecification = try reader["codecSpecification"].readIfPresent()
        value.constantIv = try reader["constantIv"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.directoryStructure = try reader["directoryStructure"].readIfPresent()
        value.discontinuityTags = try reader["discontinuityTags"].readIfPresent()
        value.encryptionType = try reader["encryptionType"].readIfPresent()
        value.hlsCdnSettings = try reader["hlsCdnSettings"].readIfPresent(with: MediaLiveClientTypes.HlsCdnSettings.read(from:))
        value.hlsId3SegmentTagging = try reader["hlsId3SegmentTagging"].readIfPresent()
        value.iFrameOnlyPlaylists = try reader["iFrameOnlyPlaylists"].readIfPresent()
        value.incompleteSegmentBehavior = try reader["incompleteSegmentBehavior"].readIfPresent()
        value.indexNSegments = try reader["indexNSegments"].readIfPresent()
        value.inputLossAction = try reader["inputLossAction"].readIfPresent()
        value.ivInManifest = try reader["ivInManifest"].readIfPresent()
        value.ivSource = try reader["ivSource"].readIfPresent()
        value.keepSegments = try reader["keepSegments"].readIfPresent()
        value.keyFormat = try reader["keyFormat"].readIfPresent()
        value.keyFormatVersions = try reader["keyFormatVersions"].readIfPresent()
        value.keyProviderSettings = try reader["keyProviderSettings"].readIfPresent(with: MediaLiveClientTypes.KeyProviderSettings.read(from:))
        value.manifestCompression = try reader["manifestCompression"].readIfPresent()
        value.manifestDurationFormat = try reader["manifestDurationFormat"].readIfPresent()
        value.minSegmentLength = try reader["minSegmentLength"].readIfPresent()
        value.mode = try reader["mode"].readIfPresent()
        value.outputSelection = try reader["outputSelection"].readIfPresent()
        value.programDateTime = try reader["programDateTime"].readIfPresent()
        value.programDateTimeClock = try reader["programDateTimeClock"].readIfPresent()
        value.programDateTimePeriod = try reader["programDateTimePeriod"].readIfPresent()
        value.redundantManifest = try reader["redundantManifest"].readIfPresent()
        value.segmentLength = try reader["segmentLength"].readIfPresent()
        value.segmentationMode = try reader["segmentationMode"].readIfPresent()
        value.segmentsPerSubdirectory = try reader["segmentsPerSubdirectory"].readIfPresent()
        value.streamInfResolution = try reader["streamInfResolution"].readIfPresent()
        value.timedMetadataId3Frame = try reader["timedMetadataId3Frame"].readIfPresent()
        value.timedMetadataId3Period = try reader["timedMetadataId3Period"].readIfPresent()
        value.timestampDeltaMilliseconds = try reader["timestampDeltaMilliseconds"].readIfPresent()
        value.tsFileMode = try reader["tsFileMode"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.KeyProviderSettings {

    static func write(value: MediaLiveClientTypes.KeyProviderSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["staticKeySettings"].write(value.staticKeySettings, with: MediaLiveClientTypes.StaticKeySettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.KeyProviderSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.KeyProviderSettings()
        value.staticKeySettings = try reader["staticKeySettings"].readIfPresent(with: MediaLiveClientTypes.StaticKeySettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.StaticKeySettings {

    static func write(value: MediaLiveClientTypes.StaticKeySettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyProviderServer"].write(value.keyProviderServer, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["staticKeyValue"].write(value.staticKeyValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.StaticKeySettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.StaticKeySettings()
        value.keyProviderServer = try reader["keyProviderServer"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.staticKeyValue = try reader["staticKeyValue"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.HlsCdnSettings {

    static func write(value: MediaLiveClientTypes.HlsCdnSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hlsAkamaiSettings"].write(value.hlsAkamaiSettings, with: MediaLiveClientTypes.HlsAkamaiSettings.write(value:to:))
        try writer["hlsBasicPutSettings"].write(value.hlsBasicPutSettings, with: MediaLiveClientTypes.HlsBasicPutSettings.write(value:to:))
        try writer["hlsMediaStoreSettings"].write(value.hlsMediaStoreSettings, with: MediaLiveClientTypes.HlsMediaStoreSettings.write(value:to:))
        try writer["hlsS3Settings"].write(value.hlsS3Settings, with: MediaLiveClientTypes.HlsS3Settings.write(value:to:))
        try writer["hlsWebdavSettings"].write(value.hlsWebdavSettings, with: MediaLiveClientTypes.HlsWebdavSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsCdnSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsCdnSettings()
        value.hlsAkamaiSettings = try reader["hlsAkamaiSettings"].readIfPresent(with: MediaLiveClientTypes.HlsAkamaiSettings.read(from:))
        value.hlsBasicPutSettings = try reader["hlsBasicPutSettings"].readIfPresent(with: MediaLiveClientTypes.HlsBasicPutSettings.read(from:))
        value.hlsMediaStoreSettings = try reader["hlsMediaStoreSettings"].readIfPresent(with: MediaLiveClientTypes.HlsMediaStoreSettings.read(from:))
        value.hlsS3Settings = try reader["hlsS3Settings"].readIfPresent(with: MediaLiveClientTypes.HlsS3Settings.read(from:))
        value.hlsWebdavSettings = try reader["hlsWebdavSettings"].readIfPresent(with: MediaLiveClientTypes.HlsWebdavSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.HlsWebdavSettings {

    static func write(value: MediaLiveClientTypes.HlsWebdavSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["connectionRetryInterval"].write(value.connectionRetryInterval)
        try writer["filecacheDuration"].write(value.filecacheDuration)
        try writer["httpTransferMode"].write(value.httpTransferMode)
        try writer["numRetries"].write(value.numRetries)
        try writer["restartDelay"].write(value.restartDelay)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsWebdavSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsWebdavSettings()
        value.connectionRetryInterval = try reader["connectionRetryInterval"].readIfPresent()
        value.filecacheDuration = try reader["filecacheDuration"].readIfPresent()
        value.httpTransferMode = try reader["httpTransferMode"].readIfPresent()
        value.numRetries = try reader["numRetries"].readIfPresent()
        value.restartDelay = try reader["restartDelay"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.HlsS3Settings {

    static func write(value: MediaLiveClientTypes.HlsS3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cannedAcl"].write(value.cannedAcl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsS3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsS3Settings()
        value.cannedAcl = try reader["cannedAcl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.HlsMediaStoreSettings {

    static func write(value: MediaLiveClientTypes.HlsMediaStoreSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["connectionRetryInterval"].write(value.connectionRetryInterval)
        try writer["filecacheDuration"].write(value.filecacheDuration)
        try writer["mediaStoreStorageClass"].write(value.mediaStoreStorageClass)
        try writer["numRetries"].write(value.numRetries)
        try writer["restartDelay"].write(value.restartDelay)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsMediaStoreSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsMediaStoreSettings()
        value.connectionRetryInterval = try reader["connectionRetryInterval"].readIfPresent()
        value.filecacheDuration = try reader["filecacheDuration"].readIfPresent()
        value.mediaStoreStorageClass = try reader["mediaStoreStorageClass"].readIfPresent()
        value.numRetries = try reader["numRetries"].readIfPresent()
        value.restartDelay = try reader["restartDelay"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.HlsBasicPutSettings {

    static func write(value: MediaLiveClientTypes.HlsBasicPutSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["connectionRetryInterval"].write(value.connectionRetryInterval)
        try writer["filecacheDuration"].write(value.filecacheDuration)
        try writer["numRetries"].write(value.numRetries)
        try writer["restartDelay"].write(value.restartDelay)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsBasicPutSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsBasicPutSettings()
        value.connectionRetryInterval = try reader["connectionRetryInterval"].readIfPresent()
        value.filecacheDuration = try reader["filecacheDuration"].readIfPresent()
        value.numRetries = try reader["numRetries"].readIfPresent()
        value.restartDelay = try reader["restartDelay"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.HlsAkamaiSettings {

    static func write(value: MediaLiveClientTypes.HlsAkamaiSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["connectionRetryInterval"].write(value.connectionRetryInterval)
        try writer["filecacheDuration"].write(value.filecacheDuration)
        try writer["httpTransferMode"].write(value.httpTransferMode)
        try writer["numRetries"].write(value.numRetries)
        try writer["restartDelay"].write(value.restartDelay)
        try writer["salt"].write(value.salt)
        try writer["token"].write(value.token)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HlsAkamaiSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.HlsAkamaiSettings()
        value.connectionRetryInterval = try reader["connectionRetryInterval"].readIfPresent()
        value.filecacheDuration = try reader["filecacheDuration"].readIfPresent()
        value.httpTransferMode = try reader["httpTransferMode"].readIfPresent()
        value.numRetries = try reader["numRetries"].readIfPresent()
        value.restartDelay = try reader["restartDelay"].readIfPresent()
        value.salt = try reader["salt"].readIfPresent()
        value.token = try reader["token"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CaptionLanguageMapping {

    static func write(value: MediaLiveClientTypes.CaptionLanguageMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["captionChannel"].write(value.captionChannel)
        try writer["languageCode"].write(value.languageCode)
        try writer["languageDescription"].write(value.languageDescription)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CaptionLanguageMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CaptionLanguageMapping()
        value.captionChannel = try reader["captionChannel"].readIfPresent() ?? 0
        value.languageCode = try reader["languageCode"].readIfPresent() ?? ""
        value.languageDescription = try reader["languageDescription"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.FrameCaptureGroupSettings {

    static func write(value: MediaLiveClientTypes.FrameCaptureGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["frameCaptureCdnSettings"].write(value.frameCaptureCdnSettings, with: MediaLiveClientTypes.FrameCaptureCdnSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FrameCaptureGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FrameCaptureGroupSettings()
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.frameCaptureCdnSettings = try reader["frameCaptureCdnSettings"].readIfPresent(with: MediaLiveClientTypes.FrameCaptureCdnSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.FrameCaptureCdnSettings {

    static func write(value: MediaLiveClientTypes.FrameCaptureCdnSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["frameCaptureS3Settings"].write(value.frameCaptureS3Settings, with: MediaLiveClientTypes.FrameCaptureS3Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FrameCaptureCdnSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FrameCaptureCdnSettings()
        value.frameCaptureS3Settings = try reader["frameCaptureS3Settings"].readIfPresent(with: MediaLiveClientTypes.FrameCaptureS3Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.FrameCaptureS3Settings {

    static func write(value: MediaLiveClientTypes.FrameCaptureS3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cannedAcl"].write(value.cannedAcl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FrameCaptureS3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FrameCaptureS3Settings()
        value.cannedAcl = try reader["cannedAcl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ArchiveGroupSettings {

    static func write(value: MediaLiveClientTypes.ArchiveGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["archiveCdnSettings"].write(value.archiveCdnSettings, with: MediaLiveClientTypes.ArchiveCdnSettings.write(value:to:))
        try writer["destination"].write(value.destination, with: MediaLiveClientTypes.OutputLocationRef.write(value:to:))
        try writer["rolloverInterval"].write(value.rolloverInterval)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ArchiveGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ArchiveGroupSettings()
        value.archiveCdnSettings = try reader["archiveCdnSettings"].readIfPresent(with: MediaLiveClientTypes.ArchiveCdnSettings.read(from:))
        value.destination = try reader["destination"].readIfPresent(with: MediaLiveClientTypes.OutputLocationRef.read(from:))
        value.rolloverInterval = try reader["rolloverInterval"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ArchiveCdnSettings {

    static func write(value: MediaLiveClientTypes.ArchiveCdnSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["archiveS3Settings"].write(value.archiveS3Settings, with: MediaLiveClientTypes.ArchiveS3Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ArchiveCdnSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ArchiveCdnSettings()
        value.archiveS3Settings = try reader["archiveS3Settings"].readIfPresent(with: MediaLiveClientTypes.ArchiveS3Settings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.ArchiveS3Settings {

    static func write(value: MediaLiveClientTypes.ArchiveS3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cannedAcl"].write(value.cannedAcl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ArchiveS3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ArchiveS3Settings()
        value.cannedAcl = try reader["cannedAcl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.NielsenConfiguration {

    static func write(value: MediaLiveClientTypes.NielsenConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributorId"].write(value.distributorId)
        try writer["nielsenPcmToId3Tagging"].write(value.nielsenPcmToId3Tagging)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.NielsenConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.NielsenConfiguration()
        value.distributorId = try reader["distributorId"].readIfPresent()
        value.nielsenPcmToId3Tagging = try reader["nielsenPcmToId3Tagging"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MotionGraphicsConfiguration {

    static func write(value: MediaLiveClientTypes.MotionGraphicsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["motionGraphicsInsertion"].write(value.motionGraphicsInsertion)
        try writer["motionGraphicsSettings"].write(value.motionGraphicsSettings, with: MediaLiveClientTypes.MotionGraphicsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MotionGraphicsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MotionGraphicsConfiguration()
        value.motionGraphicsInsertion = try reader["motionGraphicsInsertion"].readIfPresent()
        value.motionGraphicsSettings = try reader["motionGraphicsSettings"].readIfPresent(with: MediaLiveClientTypes.MotionGraphicsSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MotionGraphicsSettings {

    static func write(value: MediaLiveClientTypes.MotionGraphicsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["htmlMotionGraphicsSettings"].write(value.htmlMotionGraphicsSettings, with: MediaLiveClientTypes.HtmlMotionGraphicsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MotionGraphicsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MotionGraphicsSettings()
        value.htmlMotionGraphicsSettings = try reader["htmlMotionGraphicsSettings"].readIfPresent(with: MediaLiveClientTypes.HtmlMotionGraphicsSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.HtmlMotionGraphicsSettings {

    static func write(value: MediaLiveClientTypes.HtmlMotionGraphicsSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.HtmlMotionGraphicsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.HtmlMotionGraphicsSettings()
    }
}

extension MediaLiveClientTypes.GlobalConfiguration {

    static func write(value: MediaLiveClientTypes.GlobalConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["initialAudioGain"].write(value.initialAudioGain)
        try writer["inputEndAction"].write(value.inputEndAction)
        try writer["inputLossBehavior"].write(value.inputLossBehavior, with: MediaLiveClientTypes.InputLossBehavior.write(value:to:))
        try writer["outputLockingMode"].write(value.outputLockingMode)
        try writer["outputLockingSettings"].write(value.outputLockingSettings, with: MediaLiveClientTypes.OutputLockingSettings.write(value:to:))
        try writer["outputTimingSource"].write(value.outputTimingSource)
        try writer["supportLowFramerateInputs"].write(value.supportLowFramerateInputs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.GlobalConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.GlobalConfiguration()
        value.initialAudioGain = try reader["initialAudioGain"].readIfPresent()
        value.inputEndAction = try reader["inputEndAction"].readIfPresent()
        value.inputLossBehavior = try reader["inputLossBehavior"].readIfPresent(with: MediaLiveClientTypes.InputLossBehavior.read(from:))
        value.outputLockingMode = try reader["outputLockingMode"].readIfPresent()
        value.outputTimingSource = try reader["outputTimingSource"].readIfPresent()
        value.supportLowFramerateInputs = try reader["supportLowFramerateInputs"].readIfPresent()
        value.outputLockingSettings = try reader["outputLockingSettings"].readIfPresent(with: MediaLiveClientTypes.OutputLockingSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.OutputLockingSettings {

    static func write(value: MediaLiveClientTypes.OutputLockingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["epochLockingSettings"].write(value.epochLockingSettings, with: MediaLiveClientTypes.EpochLockingSettings.write(value:to:))
        try writer["pipelineLockingSettings"].write(value.pipelineLockingSettings, with: MediaLiveClientTypes.PipelineLockingSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputLockingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputLockingSettings()
        value.epochLockingSettings = try reader["epochLockingSettings"].readIfPresent(with: MediaLiveClientTypes.EpochLockingSettings.read(from:))
        value.pipelineLockingSettings = try reader["pipelineLockingSettings"].readIfPresent(with: MediaLiveClientTypes.PipelineLockingSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.PipelineLockingSettings {

    static func write(value: MediaLiveClientTypes.PipelineLockingSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.PipelineLockingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.PipelineLockingSettings()
    }
}

extension MediaLiveClientTypes.EpochLockingSettings {

    static func write(value: MediaLiveClientTypes.EpochLockingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customEpoch"].write(value.customEpoch)
        try writer["jamSyncTime"].write(value.jamSyncTime)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EpochLockingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EpochLockingSettings()
        value.customEpoch = try reader["customEpoch"].readIfPresent()
        value.jamSyncTime = try reader["jamSyncTime"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputLossBehavior {

    static func write(value: MediaLiveClientTypes.InputLossBehavior?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["blackFrameMsec"].write(value.blackFrameMsec)
        try writer["inputLossImageColor"].write(value.inputLossImageColor)
        try writer["inputLossImageSlate"].write(value.inputLossImageSlate, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["inputLossImageType"].write(value.inputLossImageType)
        try writer["repeatFrameMsec"].write(value.repeatFrameMsec)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputLossBehavior {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputLossBehavior()
        value.blackFrameMsec = try reader["blackFrameMsec"].readIfPresent()
        value.inputLossImageColor = try reader["inputLossImageColor"].readIfPresent()
        value.inputLossImageSlate = try reader["inputLossImageSlate"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.inputLossImageType = try reader["inputLossImageType"].readIfPresent()
        value.repeatFrameMsec = try reader["repeatFrameMsec"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.FeatureActivations {

    static func write(value: MediaLiveClientTypes.FeatureActivations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputPrepareScheduleActions"].write(value.inputPrepareScheduleActions)
        try writer["outputStaticImageOverlayScheduleActions"].write(value.outputStaticImageOverlayScheduleActions)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.FeatureActivations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.FeatureActivations()
        value.inputPrepareScheduleActions = try reader["inputPrepareScheduleActions"].readIfPresent()
        value.outputStaticImageOverlayScheduleActions = try reader["outputStaticImageOverlayScheduleActions"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CaptionDescription {

    static func write(value: MediaLiveClientTypes.CaptionDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessibility"].write(value.accessibility)
        try writer["captionDashRoles"].writeList(value.captionDashRoles, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaLiveClientTypes.DashRoleCaption>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionSelectorName"].write(value.captionSelectorName)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaLiveClientTypes.CaptionDestinationSettings.write(value:to:))
        try writer["dvbDashAccessibility"].write(value.dvbDashAccessibility)
        try writer["languageCode"].write(value.languageCode)
        try writer["languageDescription"].write(value.languageDescription)
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CaptionDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CaptionDescription()
        value.accessibility = try reader["accessibility"].readIfPresent()
        value.captionSelectorName = try reader["captionSelectorName"].readIfPresent() ?? ""
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaLiveClientTypes.CaptionDestinationSettings.read(from:))
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.languageDescription = try reader["languageDescription"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.captionDashRoles = try reader["captionDashRoles"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaLiveClientTypes.DashRoleCaption>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dvbDashAccessibility = try reader["dvbDashAccessibility"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CaptionDestinationSettings {

    static func write(value: MediaLiveClientTypes.CaptionDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aribDestinationSettings"].write(value.aribDestinationSettings, with: MediaLiveClientTypes.AribDestinationSettings.write(value:to:))
        try writer["burnInDestinationSettings"].write(value.burnInDestinationSettings, with: MediaLiveClientTypes.BurnInDestinationSettings.write(value:to:))
        try writer["dvbSubDestinationSettings"].write(value.dvbSubDestinationSettings, with: MediaLiveClientTypes.DvbSubDestinationSettings.write(value:to:))
        try writer["ebuTtDDestinationSettings"].write(value.ebuTtDDestinationSettings, with: MediaLiveClientTypes.EbuTtDDestinationSettings.write(value:to:))
        try writer["embeddedDestinationSettings"].write(value.embeddedDestinationSettings, with: MediaLiveClientTypes.EmbeddedDestinationSettings.write(value:to:))
        try writer["embeddedPlusScte20DestinationSettings"].write(value.embeddedPlusScte20DestinationSettings, with: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings.write(value:to:))
        try writer["rtmpCaptionInfoDestinationSettings"].write(value.rtmpCaptionInfoDestinationSettings, with: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings.write(value:to:))
        try writer["scte20PlusEmbeddedDestinationSettings"].write(value.scte20PlusEmbeddedDestinationSettings, with: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings.write(value:to:))
        try writer["scte27DestinationSettings"].write(value.scte27DestinationSettings, with: MediaLiveClientTypes.Scte27DestinationSettings.write(value:to:))
        try writer["smpteTtDestinationSettings"].write(value.smpteTtDestinationSettings, with: MediaLiveClientTypes.SmpteTtDestinationSettings.write(value:to:))
        try writer["teletextDestinationSettings"].write(value.teletextDestinationSettings, with: MediaLiveClientTypes.TeletextDestinationSettings.write(value:to:))
        try writer["ttmlDestinationSettings"].write(value.ttmlDestinationSettings, with: MediaLiveClientTypes.TtmlDestinationSettings.write(value:to:))
        try writer["webvttDestinationSettings"].write(value.webvttDestinationSettings, with: MediaLiveClientTypes.WebvttDestinationSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CaptionDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CaptionDestinationSettings()
        value.aribDestinationSettings = try reader["aribDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.AribDestinationSettings.read(from:))
        value.burnInDestinationSettings = try reader["burnInDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.BurnInDestinationSettings.read(from:))
        value.dvbSubDestinationSettings = try reader["dvbSubDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.DvbSubDestinationSettings.read(from:))
        value.ebuTtDDestinationSettings = try reader["ebuTtDDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.EbuTtDDestinationSettings.read(from:))
        value.embeddedDestinationSettings = try reader["embeddedDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.EmbeddedDestinationSettings.read(from:))
        value.embeddedPlusScte20DestinationSettings = try reader["embeddedPlusScte20DestinationSettings"].readIfPresent(with: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings.read(from:))
        value.rtmpCaptionInfoDestinationSettings = try reader["rtmpCaptionInfoDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings.read(from:))
        value.scte20PlusEmbeddedDestinationSettings = try reader["scte20PlusEmbeddedDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings.read(from:))
        value.scte27DestinationSettings = try reader["scte27DestinationSettings"].readIfPresent(with: MediaLiveClientTypes.Scte27DestinationSettings.read(from:))
        value.smpteTtDestinationSettings = try reader["smpteTtDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.SmpteTtDestinationSettings.read(from:))
        value.teletextDestinationSettings = try reader["teletextDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.TeletextDestinationSettings.read(from:))
        value.ttmlDestinationSettings = try reader["ttmlDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.TtmlDestinationSettings.read(from:))
        value.webvttDestinationSettings = try reader["webvttDestinationSettings"].readIfPresent(with: MediaLiveClientTypes.WebvttDestinationSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.WebvttDestinationSettings {

    static func write(value: MediaLiveClientTypes.WebvttDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["styleControl"].write(value.styleControl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.WebvttDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.WebvttDestinationSettings()
        value.styleControl = try reader["styleControl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.TtmlDestinationSettings {

    static func write(value: MediaLiveClientTypes.TtmlDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["styleControl"].write(value.styleControl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TtmlDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.TtmlDestinationSettings()
        value.styleControl = try reader["styleControl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.TeletextDestinationSettings {

    static func write(value: MediaLiveClientTypes.TeletextDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TeletextDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.TeletextDestinationSettings()
    }
}

extension MediaLiveClientTypes.SmpteTtDestinationSettings {

    static func write(value: MediaLiveClientTypes.SmpteTtDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SmpteTtDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.SmpteTtDestinationSettings()
    }
}

extension MediaLiveClientTypes.Scte27DestinationSettings {

    static func write(value: MediaLiveClientTypes.Scte27DestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte27DestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.Scte27DestinationSettings()
    }
}

extension MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings {

    static func write(value: MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.Scte20PlusEmbeddedDestinationSettings()
    }
}

extension MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings {

    static func write(value: MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.RtmpCaptionInfoDestinationSettings()
    }
}

extension MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings {

    static func write(value: MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.EmbeddedPlusScte20DestinationSettings()
    }
}

extension MediaLiveClientTypes.EmbeddedDestinationSettings {

    static func write(value: MediaLiveClientTypes.EmbeddedDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EmbeddedDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.EmbeddedDestinationSettings()
    }
}

extension MediaLiveClientTypes.EbuTtDDestinationSettings {

    static func write(value: MediaLiveClientTypes.EbuTtDDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["copyrightHolder"].write(value.copyrightHolder)
        try writer["fillLineGap"].write(value.fillLineGap)
        try writer["fontFamily"].write(value.fontFamily)
        try writer["styleControl"].write(value.styleControl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EbuTtDDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EbuTtDDestinationSettings()
        value.copyrightHolder = try reader["copyrightHolder"].readIfPresent()
        value.fillLineGap = try reader["fillLineGap"].readIfPresent()
        value.fontFamily = try reader["fontFamily"].readIfPresent()
        value.styleControl = try reader["styleControl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DvbSubDestinationSettings {

    static func write(value: MediaLiveClientTypes.DvbSubDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alignment"].write(value.alignment)
        try writer["backgroundColor"].write(value.backgroundColor)
        try writer["backgroundOpacity"].write(value.backgroundOpacity)
        try writer["font"].write(value.font, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["fontColor"].write(value.fontColor)
        try writer["fontOpacity"].write(value.fontOpacity)
        try writer["fontResolution"].write(value.fontResolution)
        try writer["fontSize"].write(value.fontSize)
        try writer["outlineColor"].write(value.outlineColor)
        try writer["outlineSize"].write(value.outlineSize)
        try writer["shadowColor"].write(value.shadowColor)
        try writer["shadowOpacity"].write(value.shadowOpacity)
        try writer["shadowXOffset"].write(value.shadowXOffset)
        try writer["shadowYOffset"].write(value.shadowYOffset)
        try writer["teletextGridControl"].write(value.teletextGridControl)
        try writer["xPosition"].write(value.xPosition)
        try writer["yPosition"].write(value.yPosition)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DvbSubDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DvbSubDestinationSettings()
        value.alignment = try reader["alignment"].readIfPresent()
        value.backgroundColor = try reader["backgroundColor"].readIfPresent()
        value.backgroundOpacity = try reader["backgroundOpacity"].readIfPresent()
        value.font = try reader["font"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.fontColor = try reader["fontColor"].readIfPresent()
        value.fontOpacity = try reader["fontOpacity"].readIfPresent()
        value.fontResolution = try reader["fontResolution"].readIfPresent()
        value.fontSize = try reader["fontSize"].readIfPresent()
        value.outlineColor = try reader["outlineColor"].readIfPresent()
        value.outlineSize = try reader["outlineSize"].readIfPresent()
        value.shadowColor = try reader["shadowColor"].readIfPresent()
        value.shadowOpacity = try reader["shadowOpacity"].readIfPresent()
        value.shadowXOffset = try reader["shadowXOffset"].readIfPresent()
        value.shadowYOffset = try reader["shadowYOffset"].readIfPresent()
        value.teletextGridControl = try reader["teletextGridControl"].readIfPresent()
        value.xPosition = try reader["xPosition"].readIfPresent()
        value.yPosition = try reader["yPosition"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.BurnInDestinationSettings {

    static func write(value: MediaLiveClientTypes.BurnInDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alignment"].write(value.alignment)
        try writer["backgroundColor"].write(value.backgroundColor)
        try writer["backgroundOpacity"].write(value.backgroundOpacity)
        try writer["font"].write(value.font, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["fontColor"].write(value.fontColor)
        try writer["fontOpacity"].write(value.fontOpacity)
        try writer["fontResolution"].write(value.fontResolution)
        try writer["fontSize"].write(value.fontSize)
        try writer["outlineColor"].write(value.outlineColor)
        try writer["outlineSize"].write(value.outlineSize)
        try writer["shadowColor"].write(value.shadowColor)
        try writer["shadowOpacity"].write(value.shadowOpacity)
        try writer["shadowXOffset"].write(value.shadowXOffset)
        try writer["shadowYOffset"].write(value.shadowYOffset)
        try writer["teletextGridControl"].write(value.teletextGridControl)
        try writer["xPosition"].write(value.xPosition)
        try writer["yPosition"].write(value.yPosition)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BurnInDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BurnInDestinationSettings()
        value.alignment = try reader["alignment"].readIfPresent()
        value.backgroundColor = try reader["backgroundColor"].readIfPresent()
        value.backgroundOpacity = try reader["backgroundOpacity"].readIfPresent()
        value.font = try reader["font"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.fontColor = try reader["fontColor"].readIfPresent()
        value.fontOpacity = try reader["fontOpacity"].readIfPresent()
        value.fontResolution = try reader["fontResolution"].readIfPresent()
        value.fontSize = try reader["fontSize"].readIfPresent()
        value.outlineColor = try reader["outlineColor"].readIfPresent()
        value.outlineSize = try reader["outlineSize"].readIfPresent()
        value.shadowColor = try reader["shadowColor"].readIfPresent()
        value.shadowOpacity = try reader["shadowOpacity"].readIfPresent()
        value.shadowXOffset = try reader["shadowXOffset"].readIfPresent()
        value.shadowYOffset = try reader["shadowYOffset"].readIfPresent()
        value.teletextGridControl = try reader["teletextGridControl"].readIfPresent()
        value.xPosition = try reader["xPosition"].readIfPresent()
        value.yPosition = try reader["yPosition"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AribDestinationSettings {

    static func write(value: MediaLiveClientTypes.AribDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AribDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.AribDestinationSettings()
    }
}

extension MediaLiveClientTypes.BlackoutSlate {

    static func write(value: MediaLiveClientTypes.BlackoutSlate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["blackoutSlateImage"].write(value.blackoutSlateImage, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["networkEndBlackout"].write(value.networkEndBlackout)
        try writer["networkEndBlackoutImage"].write(value.networkEndBlackoutImage, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["networkId"].write(value.networkId)
        try writer["state"].write(value.state)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.BlackoutSlate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.BlackoutSlate()
        value.blackoutSlateImage = try reader["blackoutSlateImage"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.networkEndBlackout = try reader["networkEndBlackout"].readIfPresent()
        value.networkEndBlackoutImage = try reader["networkEndBlackoutImage"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.networkId = try reader["networkId"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AvailConfiguration {

    static func write(value: MediaLiveClientTypes.AvailConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availSettings"].write(value.availSettings, with: MediaLiveClientTypes.AvailSettings.write(value:to:))
        try writer["scte35SegmentationScope"].write(value.scte35SegmentationScope)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AvailConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AvailConfiguration()
        value.availSettings = try reader["availSettings"].readIfPresent(with: MediaLiveClientTypes.AvailSettings.read(from:))
        value.scte35SegmentationScope = try reader["scte35SegmentationScope"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AvailSettings {

    static func write(value: MediaLiveClientTypes.AvailSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["esam"].write(value.esam, with: MediaLiveClientTypes.Esam.write(value:to:))
        try writer["scte35SpliceInsert"].write(value.scte35SpliceInsert, with: MediaLiveClientTypes.Scte35SpliceInsert.write(value:to:))
        try writer["scte35TimeSignalApos"].write(value.scte35TimeSignalApos, with: MediaLiveClientTypes.Scte35TimeSignalApos.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AvailSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AvailSettings()
        value.esam = try reader["esam"].readIfPresent(with: MediaLiveClientTypes.Esam.read(from:))
        value.scte35SpliceInsert = try reader["scte35SpliceInsert"].readIfPresent(with: MediaLiveClientTypes.Scte35SpliceInsert.read(from:))
        value.scte35TimeSignalApos = try reader["scte35TimeSignalApos"].readIfPresent(with: MediaLiveClientTypes.Scte35TimeSignalApos.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.Scte35TimeSignalApos {

    static func write(value: MediaLiveClientTypes.Scte35TimeSignalApos?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adAvailOffset"].write(value.adAvailOffset)
        try writer["noRegionalBlackoutFlag"].write(value.noRegionalBlackoutFlag)
        try writer["webDeliveryAllowedFlag"].write(value.webDeliveryAllowedFlag)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35TimeSignalApos {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35TimeSignalApos()
        value.adAvailOffset = try reader["adAvailOffset"].readIfPresent()
        value.noRegionalBlackoutFlag = try reader["noRegionalBlackoutFlag"].readIfPresent()
        value.webDeliveryAllowedFlag = try reader["webDeliveryAllowedFlag"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Scte35SpliceInsert {

    static func write(value: MediaLiveClientTypes.Scte35SpliceInsert?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adAvailOffset"].write(value.adAvailOffset)
        try writer["noRegionalBlackoutFlag"].write(value.noRegionalBlackoutFlag)
        try writer["webDeliveryAllowedFlag"].write(value.webDeliveryAllowedFlag)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Scte35SpliceInsert {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Scte35SpliceInsert()
        value.adAvailOffset = try reader["adAvailOffset"].readIfPresent()
        value.noRegionalBlackoutFlag = try reader["noRegionalBlackoutFlag"].readIfPresent()
        value.webDeliveryAllowedFlag = try reader["webDeliveryAllowedFlag"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Esam {

    static func write(value: MediaLiveClientTypes.Esam?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["acquisitionPointId"].write(value.acquisitionPointId)
        try writer["adAvailOffset"].write(value.adAvailOffset)
        try writer["passwordParam"].write(value.passwordParam)
        try writer["poisEndpoint"].write(value.poisEndpoint)
        try writer["username"].write(value.username)
        try writer["zoneIdentity"].write(value.zoneIdentity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Esam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Esam()
        value.acquisitionPointId = try reader["acquisitionPointId"].readIfPresent() ?? ""
        value.adAvailOffset = try reader["adAvailOffset"].readIfPresent()
        value.passwordParam = try reader["passwordParam"].readIfPresent()
        value.poisEndpoint = try reader["poisEndpoint"].readIfPresent() ?? ""
        value.username = try reader["username"].readIfPresent()
        value.zoneIdentity = try reader["zoneIdentity"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AvailBlanking {

    static func write(value: MediaLiveClientTypes.AvailBlanking?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availBlankingImage"].write(value.availBlankingImage, with: MediaLiveClientTypes.InputLocation.write(value:to:))
        try writer["state"].write(value.state)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AvailBlanking {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AvailBlanking()
        value.availBlankingImage = try reader["availBlankingImage"].readIfPresent(with: MediaLiveClientTypes.InputLocation.read(from:))
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioDescription {

    static func write(value: MediaLiveClientTypes.AudioDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDashRoles"].writeList(value.audioDashRoles, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaLiveClientTypes.DashRoleAudio>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["audioNormalizationSettings"].write(value.audioNormalizationSettings, with: MediaLiveClientTypes.AudioNormalizationSettings.write(value:to:))
        try writer["audioSelectorName"].write(value.audioSelectorName)
        try writer["audioType"].write(value.audioType)
        try writer["audioTypeControl"].write(value.audioTypeControl)
        try writer["audioWatermarkingSettings"].write(value.audioWatermarkingSettings, with: MediaLiveClientTypes.AudioWatermarkSettings.write(value:to:))
        try writer["codecSettings"].write(value.codecSettings, with: MediaLiveClientTypes.AudioCodecSettings.write(value:to:))
        try writer["dvbDashAccessibility"].write(value.dvbDashAccessibility)
        try writer["languageCode"].write(value.languageCode)
        try writer["languageCodeControl"].write(value.languageCodeControl)
        try writer["name"].write(value.name)
        try writer["remixSettings"].write(value.remixSettings, with: MediaLiveClientTypes.RemixSettings.write(value:to:))
        try writer["streamName"].write(value.streamName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioDescription()
        value.audioNormalizationSettings = try reader["audioNormalizationSettings"].readIfPresent(with: MediaLiveClientTypes.AudioNormalizationSettings.read(from:))
        value.audioSelectorName = try reader["audioSelectorName"].readIfPresent() ?? ""
        value.audioType = try reader["audioType"].readIfPresent()
        value.audioTypeControl = try reader["audioTypeControl"].readIfPresent()
        value.audioWatermarkingSettings = try reader["audioWatermarkingSettings"].readIfPresent(with: MediaLiveClientTypes.AudioWatermarkSettings.read(from:))
        value.codecSettings = try reader["codecSettings"].readIfPresent(with: MediaLiveClientTypes.AudioCodecSettings.read(from:))
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.languageCodeControl = try reader["languageCodeControl"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.remixSettings = try reader["remixSettings"].readIfPresent(with: MediaLiveClientTypes.RemixSettings.read(from:))
        value.streamName = try reader["streamName"].readIfPresent()
        value.audioDashRoles = try reader["audioDashRoles"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaLiveClientTypes.DashRoleAudio>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dvbDashAccessibility = try reader["dvbDashAccessibility"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.RemixSettings {

    static func write(value: MediaLiveClientTypes.RemixSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelMappings"].writeList(value.channelMappings, memberWritingClosure: MediaLiveClientTypes.AudioChannelMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["channelsIn"].write(value.channelsIn)
        try writer["channelsOut"].write(value.channelsOut)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.RemixSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.RemixSettings()
        value.channelMappings = try reader["channelMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.AudioChannelMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.channelsIn = try reader["channelsIn"].readIfPresent()
        value.channelsOut = try reader["channelsOut"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioChannelMapping {

    static func write(value: MediaLiveClientTypes.AudioChannelMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputChannelLevels"].writeList(value.inputChannelLevels, memberWritingClosure: MediaLiveClientTypes.InputChannelLevel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["outputChannel"].write(value.outputChannel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioChannelMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioChannelMapping()
        value.inputChannelLevels = try reader["inputChannelLevels"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputChannelLevel.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.outputChannel = try reader["outputChannel"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.InputChannelLevel {

    static func write(value: MediaLiveClientTypes.InputChannelLevel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["gain"].write(value.gain)
        try writer["inputChannel"].write(value.inputChannel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputChannelLevel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputChannelLevel()
        value.gain = try reader["gain"].readIfPresent() ?? 0
        value.inputChannel = try reader["inputChannel"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.AudioCodecSettings {

    static func write(value: MediaLiveClientTypes.AudioCodecSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aacSettings"].write(value.aacSettings, with: MediaLiveClientTypes.AacSettings.write(value:to:))
        try writer["ac3Settings"].write(value.ac3Settings, with: MediaLiveClientTypes.Ac3Settings.write(value:to:))
        try writer["eac3AtmosSettings"].write(value.eac3AtmosSettings, with: MediaLiveClientTypes.Eac3AtmosSettings.write(value:to:))
        try writer["eac3Settings"].write(value.eac3Settings, with: MediaLiveClientTypes.Eac3Settings.write(value:to:))
        try writer["mp2Settings"].write(value.mp2Settings, with: MediaLiveClientTypes.Mp2Settings.write(value:to:))
        try writer["passThroughSettings"].write(value.passThroughSettings, with: MediaLiveClientTypes.PassThroughSettings.write(value:to:))
        try writer["wavSettings"].write(value.wavSettings, with: MediaLiveClientTypes.WavSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioCodecSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioCodecSettings()
        value.aacSettings = try reader["aacSettings"].readIfPresent(with: MediaLiveClientTypes.AacSettings.read(from:))
        value.ac3Settings = try reader["ac3Settings"].readIfPresent(with: MediaLiveClientTypes.Ac3Settings.read(from:))
        value.eac3AtmosSettings = try reader["eac3AtmosSettings"].readIfPresent(with: MediaLiveClientTypes.Eac3AtmosSettings.read(from:))
        value.eac3Settings = try reader["eac3Settings"].readIfPresent(with: MediaLiveClientTypes.Eac3Settings.read(from:))
        value.mp2Settings = try reader["mp2Settings"].readIfPresent(with: MediaLiveClientTypes.Mp2Settings.read(from:))
        value.passThroughSettings = try reader["passThroughSettings"].readIfPresent(with: MediaLiveClientTypes.PassThroughSettings.read(from:))
        value.wavSettings = try reader["wavSettings"].readIfPresent(with: MediaLiveClientTypes.WavSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.WavSettings {

    static func write(value: MediaLiveClientTypes.WavSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitDepth"].write(value.bitDepth)
        try writer["codingMode"].write(value.codingMode)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.WavSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.WavSettings()
        value.bitDepth = try reader["bitDepth"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.PassThroughSettings {

    static func write(value: MediaLiveClientTypes.PassThroughSettings?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.PassThroughSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return MediaLiveClientTypes.PassThroughSettings()
    }
}

extension MediaLiveClientTypes.Mp2Settings {

    static func write(value: MediaLiveClientTypes.Mp2Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["codingMode"].write(value.codingMode)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Mp2Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Mp2Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Eac3Settings {

    static func write(value: MediaLiveClientTypes.Eac3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attenuationControl"].write(value.attenuationControl)
        try writer["bitrate"].write(value.bitrate)
        try writer["bitstreamMode"].write(value.bitstreamMode)
        try writer["codingMode"].write(value.codingMode)
        try writer["dcFilter"].write(value.dcFilter)
        try writer["dialnorm"].write(value.dialnorm)
        try writer["drcLine"].write(value.drcLine)
        try writer["drcRf"].write(value.drcRf)
        try writer["lfeControl"].write(value.lfeControl)
        try writer["lfeFilter"].write(value.lfeFilter)
        try writer["loRoCenterMixLevel"].write(value.loRoCenterMixLevel)
        try writer["loRoSurroundMixLevel"].write(value.loRoSurroundMixLevel)
        try writer["ltRtCenterMixLevel"].write(value.ltRtCenterMixLevel)
        try writer["ltRtSurroundMixLevel"].write(value.ltRtSurroundMixLevel)
        try writer["metadataControl"].write(value.metadataControl)
        try writer["passthroughControl"].write(value.passthroughControl)
        try writer["phaseControl"].write(value.phaseControl)
        try writer["stereoDownmix"].write(value.stereoDownmix)
        try writer["surroundExMode"].write(value.surroundExMode)
        try writer["surroundMode"].write(value.surroundMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Eac3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Eac3Settings()
        value.attenuationControl = try reader["attenuationControl"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bitstreamMode = try reader["bitstreamMode"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.dcFilter = try reader["dcFilter"].readIfPresent()
        value.dialnorm = try reader["dialnorm"].readIfPresent()
        value.drcLine = try reader["drcLine"].readIfPresent()
        value.drcRf = try reader["drcRf"].readIfPresent()
        value.lfeControl = try reader["lfeControl"].readIfPresent()
        value.lfeFilter = try reader["lfeFilter"].readIfPresent()
        value.loRoCenterMixLevel = try reader["loRoCenterMixLevel"].readIfPresent()
        value.loRoSurroundMixLevel = try reader["loRoSurroundMixLevel"].readIfPresent()
        value.ltRtCenterMixLevel = try reader["ltRtCenterMixLevel"].readIfPresent()
        value.ltRtSurroundMixLevel = try reader["ltRtSurroundMixLevel"].readIfPresent()
        value.metadataControl = try reader["metadataControl"].readIfPresent()
        value.passthroughControl = try reader["passthroughControl"].readIfPresent()
        value.phaseControl = try reader["phaseControl"].readIfPresent()
        value.stereoDownmix = try reader["stereoDownmix"].readIfPresent()
        value.surroundExMode = try reader["surroundExMode"].readIfPresent()
        value.surroundMode = try reader["surroundMode"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Eac3AtmosSettings {

    static func write(value: MediaLiveClientTypes.Eac3AtmosSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["codingMode"].write(value.codingMode)
        try writer["dialnorm"].write(value.dialnorm)
        try writer["drcLine"].write(value.drcLine)
        try writer["drcRf"].write(value.drcRf)
        try writer["heightTrim"].write(value.heightTrim)
        try writer["surroundTrim"].write(value.surroundTrim)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Eac3AtmosSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Eac3AtmosSettings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.dialnorm = try reader["dialnorm"].readIfPresent()
        value.drcLine = try reader["drcLine"].readIfPresent()
        value.drcRf = try reader["drcRf"].readIfPresent()
        value.heightTrim = try reader["heightTrim"].readIfPresent()
        value.surroundTrim = try reader["surroundTrim"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Ac3Settings {

    static func write(value: MediaLiveClientTypes.Ac3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attenuationControl"].write(value.attenuationControl)
        try writer["bitrate"].write(value.bitrate)
        try writer["bitstreamMode"].write(value.bitstreamMode)
        try writer["codingMode"].write(value.codingMode)
        try writer["dialnorm"].write(value.dialnorm)
        try writer["drcProfile"].write(value.drcProfile)
        try writer["lfeFilter"].write(value.lfeFilter)
        try writer["metadataControl"].write(value.metadataControl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Ac3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Ac3Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bitstreamMode = try reader["bitstreamMode"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.dialnorm = try reader["dialnorm"].readIfPresent()
        value.drcProfile = try reader["drcProfile"].readIfPresent()
        value.lfeFilter = try reader["lfeFilter"].readIfPresent()
        value.metadataControl = try reader["metadataControl"].readIfPresent()
        value.attenuationControl = try reader["attenuationControl"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AacSettings {

    static func write(value: MediaLiveClientTypes.AacSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["codingMode"].write(value.codingMode)
        try writer["inputType"].write(value.inputType)
        try writer["profile"].write(value.profile)
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["rawFormat"].write(value.rawFormat)
        try writer["sampleRate"].write(value.sampleRate)
        try writer["spec"].write(value.spec)
        try writer["vbrQuality"].write(value.vbrQuality)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AacSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AacSettings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.inputType = try reader["inputType"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.rawFormat = try reader["rawFormat"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        value.spec = try reader["spec"].readIfPresent()
        value.vbrQuality = try reader["vbrQuality"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AudioWatermarkSettings {

    static func write(value: MediaLiveClientTypes.AudioWatermarkSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nielsenWatermarksSettings"].write(value.nielsenWatermarksSettings, with: MediaLiveClientTypes.NielsenWatermarksSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioWatermarkSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioWatermarkSettings()
        value.nielsenWatermarksSettings = try reader["nielsenWatermarksSettings"].readIfPresent(with: MediaLiveClientTypes.NielsenWatermarksSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.NielsenWatermarksSettings {

    static func write(value: MediaLiveClientTypes.NielsenWatermarksSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nielsenCbetSettings"].write(value.nielsenCbetSettings, with: MediaLiveClientTypes.NielsenCBET.write(value:to:))
        try writer["nielsenDistributionType"].write(value.nielsenDistributionType)
        try writer["nielsenNaesIiNwSettings"].write(value.nielsenNaesIiNwSettings, with: MediaLiveClientTypes.NielsenNaesIiNw.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.NielsenWatermarksSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.NielsenWatermarksSettings()
        value.nielsenCbetSettings = try reader["nielsenCbetSettings"].readIfPresent(with: MediaLiveClientTypes.NielsenCBET.read(from:))
        value.nielsenDistributionType = try reader["nielsenDistributionType"].readIfPresent()
        value.nielsenNaesIiNwSettings = try reader["nielsenNaesIiNwSettings"].readIfPresent(with: MediaLiveClientTypes.NielsenNaesIiNw.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.NielsenNaesIiNw {

    static func write(value: MediaLiveClientTypes.NielsenNaesIiNw?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["checkDigitString"].write(value.checkDigitString)
        try writer["sid"].write(value.sid)
        try writer["timezone"].write(value.timezone)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.NielsenNaesIiNw {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.NielsenNaesIiNw()
        value.checkDigitString = try reader["checkDigitString"].readIfPresent() ?? ""
        value.sid = try reader["sid"].readIfPresent() ?? 0.0
        value.timezone = try reader["timezone"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.NielsenCBET {

    static func write(value: MediaLiveClientTypes.NielsenCBET?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cbetCheckDigitString"].write(value.cbetCheckDigitString)
        try writer["cbetStepaside"].write(value.cbetStepaside)
        try writer["csid"].write(value.csid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.NielsenCBET {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.NielsenCBET()
        value.cbetCheckDigitString = try reader["cbetCheckDigitString"].readIfPresent() ?? ""
        value.cbetStepaside = try reader["cbetStepaside"].readIfPresent() ?? .sdkUnknown("")
        value.csid = try reader["csid"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.AudioNormalizationSettings {

    static func write(value: MediaLiveClientTypes.AudioNormalizationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["algorithm"].write(value.algorithm)
        try writer["algorithmControl"].write(value.algorithmControl)
        try writer["targetLkfs"].write(value.targetLkfs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AudioNormalizationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AudioNormalizationSettings()
        value.algorithm = try reader["algorithm"].readIfPresent()
        value.algorithmControl = try reader["algorithmControl"].readIfPresent()
        value.targetLkfs = try reader["targetLkfs"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ChannelEgressEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ChannelEgressEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ChannelEgressEndpoint()
        value.sourceIp = try reader["sourceIp"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.OutputDestination {

    static func write(value: MediaLiveClientTypes.OutputDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["mediaPackageSettings"].writeList(value.mediaPackageSettings, memberWritingClosure: MediaLiveClientTypes.MediaPackageOutputDestinationSettings.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["multiplexSettings"].write(value.multiplexSettings, with: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings.write(value:to:))
        try writer["settings"].writeList(value.settings, memberWritingClosure: MediaLiveClientTypes.OutputDestinationSettings.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["srtSettings"].writeList(value.srtSettings, memberWritingClosure: MediaLiveClientTypes.SrtOutputDestinationSettings.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputDestination()
        value.id = try reader["id"].readIfPresent()
        value.mediaPackageSettings = try reader["mediaPackageSettings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MediaPackageOutputDestinationSettings.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings.read(from:))
        value.settings = try reader["settings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestinationSettings.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.srtSettings = try reader["srtSettings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.SrtOutputDestinationSettings.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.SrtOutputDestinationSettings {

    static func write(value: MediaLiveClientTypes.SrtOutputDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionPassphraseSecretArn"].write(value.encryptionPassphraseSecretArn)
        try writer["streamId"].write(value.streamId)
        try writer["url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SrtOutputDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SrtOutputDestinationSettings()
        value.encryptionPassphraseSecretArn = try reader["encryptionPassphraseSecretArn"].readIfPresent()
        value.streamId = try reader["streamId"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.OutputDestinationSettings {

    static func write(value: MediaLiveClientTypes.OutputDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["passwordParam"].write(value.passwordParam)
        try writer["streamName"].write(value.streamName)
        try writer["url"].write(value.url)
        try writer["username"].write(value.username)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.OutputDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.OutputDestinationSettings()
        value.passwordParam = try reader["passwordParam"].readIfPresent()
        value.streamName = try reader["streamName"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.username = try reader["username"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings {

    static func write(value: MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["multiplexId"].write(value.multiplexId)
        try writer["programName"].write(value.programName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings()
        value.multiplexId = try reader["multiplexId"].readIfPresent()
        value.programName = try reader["programName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MediaPackageOutputDestinationSettings {

    static func write(value: MediaLiveClientTypes.MediaPackageOutputDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelId"].write(value.channelId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MediaPackageOutputDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MediaPackageOutputDestinationSettings()
        value.channelId = try reader["channelId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.CdiInputSpecification {

    static func write(value: MediaLiveClientTypes.CdiInputSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resolution"].write(value.resolution)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CdiInputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CdiInputSpecification()
        value.resolution = try reader["resolution"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ClusterNetworkSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ClusterNetworkSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ClusterNetworkSettings()
        value.defaultRoute = try reader["defaultRoute"].readIfPresent()
        value.interfaceMappings = try reader["interfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InterfaceMapping {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InterfaceMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InterfaceMapping()
        value.logicalInterfaceName = try reader["logicalInterfaceName"].readIfPresent()
        value.networkId = try reader["networkId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.EventBridgeRuleTemplateTarget {

    static func write(value: MediaLiveClientTypes.EventBridgeRuleTemplateTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EventBridgeRuleTemplateTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EventBridgeRuleTemplateTarget()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.Input {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Input {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Input()
        value.arn = try reader["arn"].readIfPresent()
        value.attachedChannels = try reader["attachedChannels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.inputClass = try reader["inputClass"].readIfPresent()
        value.inputDevices = try reader["inputDevices"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDeviceSettings.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputPartnerIds = try reader["inputPartnerIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSourceType = try reader["inputSourceType"].readIfPresent()
        value.mediaConnectFlows = try reader["mediaConnectFlows"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MediaConnectFlow.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.securityGroups = try reader["securityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["type"].readIfPresent()
        value.srtSettings = try reader["srtSettings"].readIfPresent(with: MediaLiveClientTypes.SrtSettings.read(from:))
        value.inputNetworkLocation = try reader["inputNetworkLocation"].readIfPresent()
        value.multicastSettings = try reader["multicastSettings"].readIfPresent(with: MediaLiveClientTypes.MulticastSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MulticastSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MulticastSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MulticastSettings()
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MulticastSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.MulticastSource {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MulticastSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MulticastSource()
        value.sourceIp = try reader["sourceIp"].readIfPresent()
        value.url = try reader["url"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.SrtSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SrtSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SrtSettings()
        value.srtCallerSources = try reader["srtCallerSources"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.SrtCallerSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.SrtCallerSource {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SrtCallerSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SrtCallerSource()
        value.decryption = try reader["decryption"].readIfPresent(with: MediaLiveClientTypes.SrtCallerDecryption.read(from:))
        value.minimumLatency = try reader["minimumLatency"].readIfPresent()
        value.srtListenerAddress = try reader["srtListenerAddress"].readIfPresent()
        value.srtListenerPort = try reader["srtListenerPort"].readIfPresent()
        value.streamId = try reader["streamId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.SrtCallerDecryption {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SrtCallerDecryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SrtCallerDecryption()
        value.algorithm = try reader["algorithm"].readIfPresent()
        value.passphraseSecretArn = try reader["passphraseSecretArn"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputSource {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputSource()
        value.passwordParam = try reader["passwordParam"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.username = try reader["username"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MediaConnectFlow {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MediaConnectFlow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MediaConnectFlow()
        value.flowArn = try reader["flowArn"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceSettings {

    static func write(value: MediaLiveClientTypes.InputDeviceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceSettings()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDestination()
        value.ip = try reader["ip"].readIfPresent()
        value.port = try reader["port"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.InputDestinationVpc.read(from:))
        value.network = try reader["network"].readIfPresent()
        value.networkRoutes = try reader["networkRoutes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDestinationRoute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InputDestinationRoute {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDestinationRoute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDestinationRoute()
        value.cidr = try reader["cidr"].readIfPresent()
        value.gateway = try reader["gateway"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDestinationVpc {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDestinationVpc {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDestinationVpc()
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.networkInterfaceId = try reader["networkInterfaceId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputSecurityGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputSecurityGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputSecurityGroup()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.inputs = try reader["inputs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.whitelistRules = try reader["whitelistRules"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputWhitelistRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InputWhitelistRule {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputWhitelistRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputWhitelistRule()
        value.cidr = try reader["cidr"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Multiplex {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Multiplex {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Multiplex()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexOutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexSettings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.programCount = try reader["programCount"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.MultiplexSettings {

    static func write(value: MediaLiveClientTypes.MultiplexSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maximumVideoBufferDelayMilliseconds"].write(value.maximumVideoBufferDelayMilliseconds)
        try writer["transportStreamBitrate"].write(value.transportStreamBitrate)
        try writer["transportStreamId"].write(value.transportStreamId)
        try writer["transportStreamReservedBitrate"].write(value.transportStreamReservedBitrate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexSettings()
        value.maximumVideoBufferDelayMilliseconds = try reader["maximumVideoBufferDelayMilliseconds"].readIfPresent()
        value.transportStreamBitrate = try reader["transportStreamBitrate"].readIfPresent() ?? 0
        value.transportStreamId = try reader["transportStreamId"].readIfPresent() ?? 0
        value.transportStreamReservedBitrate = try reader["transportStreamReservedBitrate"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexOutputDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexOutputDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexOutputDestination()
        value.mediaConnectSettings = try reader["mediaConnectSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexMediaConnectOutputDestinationSettings()
        value.entitlementArn = try reader["entitlementArn"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgram {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgram {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgram()
        value.channelId = try reader["channelId"].readIfPresent()
        value.multiplexProgramSettings = try reader["multiplexProgramSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramSettings.read(from:))
        value.packetIdentifiersMap = try reader["packetIdentifiersMap"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap.read(from:))
        value.pipelineDetails = try reader["pipelineDetails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MultiplexProgramPipelineDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.programName = try reader["programName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgramPipelineDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgramPipelineDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgramPipelineDetail()
        value.activeChannelPipeline = try reader["activeChannelPipeline"].readIfPresent()
        value.pipelineId = try reader["pipelineId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap {

    static func write(value: MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aribCaptionsPid"].write(value.aribCaptionsPid)
        try writer["audioPids"].writeList(value.audioPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dvbSubPids"].writeList(value.dvbSubPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dvbTeletextPid"].write(value.dvbTeletextPid)
        try writer["dvbTeletextPids"].writeList(value.dvbTeletextPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ecmPid"].write(value.ecmPid)
        try writer["etvPlatformPid"].write(value.etvPlatformPid)
        try writer["etvSignalPid"].write(value.etvSignalPid)
        try writer["klvDataPids"].writeList(value.klvDataPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["pcrPid"].write(value.pcrPid)
        try writer["pmtPid"].write(value.pmtPid)
        try writer["privateMetadataPid"].write(value.privateMetadataPid)
        try writer["scte27Pids"].writeList(value.scte27Pids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["scte35Pid"].write(value.scte35Pid)
        try writer["smpte2038Pid"].write(value.smpte2038Pid)
        try writer["timedMetadataPid"].write(value.timedMetadataPid)
        try writer["videoPid"].write(value.videoPid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgramPacketIdentifiersMap()
        value.audioPids = try reader["audioPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.dvbSubPids = try reader["dvbSubPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.dvbTeletextPid = try reader["dvbTeletextPid"].readIfPresent()
        value.etvPlatformPid = try reader["etvPlatformPid"].readIfPresent()
        value.etvSignalPid = try reader["etvSignalPid"].readIfPresent()
        value.klvDataPids = try reader["klvDataPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.pcrPid = try reader["pcrPid"].readIfPresent()
        value.pmtPid = try reader["pmtPid"].readIfPresent()
        value.privateMetadataPid = try reader["privateMetadataPid"].readIfPresent()
        value.scte27Pids = try reader["scte27Pids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.scte35Pid = try reader["scte35Pid"].readIfPresent()
        value.timedMetadataPid = try reader["timedMetadataPid"].readIfPresent()
        value.videoPid = try reader["videoPid"].readIfPresent()
        value.aribCaptionsPid = try reader["aribCaptionsPid"].readIfPresent()
        value.dvbTeletextPids = try reader["dvbTeletextPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.ecmPid = try reader["ecmPid"].readIfPresent()
        value.smpte2038Pid = try reader["smpte2038Pid"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgramSettings {

    static func write(value: MediaLiveClientTypes.MultiplexProgramSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["preferredChannelPipeline"].write(value.preferredChannelPipeline)
        try writer["programNumber"].write(value.programNumber)
        try writer["serviceDescriptor"].write(value.serviceDescriptor, with: MediaLiveClientTypes.MultiplexProgramServiceDescriptor.write(value:to:))
        try writer["videoSettings"].write(value.videoSettings, with: MediaLiveClientTypes.MultiplexVideoSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgramSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgramSettings()
        value.preferredChannelPipeline = try reader["preferredChannelPipeline"].readIfPresent()
        value.programNumber = try reader["programNumber"].readIfPresent() ?? 0
        value.serviceDescriptor = try reader["serviceDescriptor"].readIfPresent(with: MediaLiveClientTypes.MultiplexProgramServiceDescriptor.read(from:))
        value.videoSettings = try reader["videoSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexVideoSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MultiplexVideoSettings {

    static func write(value: MediaLiveClientTypes.MultiplexVideoSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["constantBitrate"].write(value.constantBitrate)
        try writer["statmuxSettings"].write(value.statmuxSettings, with: MediaLiveClientTypes.MultiplexStatmuxVideoSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexVideoSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexVideoSettings()
        value.constantBitrate = try reader["constantBitrate"].readIfPresent()
        value.statmuxSettings = try reader["statmuxSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexStatmuxVideoSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.MultiplexStatmuxVideoSettings {

    static func write(value: MediaLiveClientTypes.MultiplexStatmuxVideoSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maximumBitrate"].write(value.maximumBitrate)
        try writer["minimumBitrate"].write(value.minimumBitrate)
        try writer["priority"].write(value.priority)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexStatmuxVideoSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexStatmuxVideoSettings()
        value.maximumBitrate = try reader["maximumBitrate"].readIfPresent()
        value.minimumBitrate = try reader["minimumBitrate"].readIfPresent()
        value.priority = try reader["priority"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgramServiceDescriptor {

    static func write(value: MediaLiveClientTypes.MultiplexProgramServiceDescriptor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["providerName"].write(value.providerName)
        try writer["serviceName"].write(value.serviceName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgramServiceDescriptor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgramServiceDescriptor()
        value.providerName = try reader["providerName"].readIfPresent() ?? ""
        value.serviceName = try reader["serviceName"].readIfPresent() ?? ""
        return value
    }
}

extension MediaLiveClientTypes.IpPool {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.IpPool {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.IpPool()
        value.cidr = try reader["cidr"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Route {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Route {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Route()
        value.cidr = try reader["cidr"].readIfPresent()
        value.gateway = try reader["gateway"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.NodeInterfaceMapping {

    static func write(value: MediaLiveClientTypes.NodeInterfaceMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logicalInterfaceName"].write(value.logicalInterfaceName)
        try writer["networkInterfaceMode"].write(value.networkInterfaceMode)
        try writer["physicalInterfaceName"].write(value.physicalInterfaceName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.NodeInterfaceMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.NodeInterfaceMapping()
        value.logicalInterfaceName = try reader["logicalInterfaceName"].readIfPresent()
        value.networkInterfaceMode = try reader["networkInterfaceMode"].readIfPresent()
        value.physicalInterfaceName = try reader["physicalInterfaceName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MediaResource {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MediaResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MediaResource()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MediaResourceNeighbor.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.MediaResourceNeighbor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.MediaResourceNeighbor {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MediaResourceNeighbor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MediaResourceNeighbor()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.SuccessfulMonitorDeployment {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SuccessfulMonitorDeployment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SuccessfulMonitorDeployment()
        value.detailsUri = try reader["detailsUri"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.MonitorDeployment {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MonitorDeployment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MonitorDeployment()
        value.detailsUri = try reader["detailsUri"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.RenewalSettings {

    static func write(value: MediaLiveClientTypes.RenewalSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["automaticRenewal"].write(value.automaticRenewal)
        try writer["renewalCount"].write(value.renewalCount)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.RenewalSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.RenewalSettings()
        value.automaticRenewal = try reader["automaticRenewal"].readIfPresent()
        value.renewalCount = try reader["renewalCount"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ReservationResourceSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ReservationResourceSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ReservationResourceSpecification()
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.codec = try reader["codec"].readIfPresent()
        value.maximumBitrate = try reader["maximumBitrate"].readIfPresent()
        value.maximumFramerate = try reader["maximumFramerate"].readIfPresent()
        value.resolution = try reader["resolution"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.specialFeature = try reader["specialFeature"].readIfPresent()
        value.videoQuality = try reader["videoQuality"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.AccountConfiguration {

    static func write(value: MediaLiveClientTypes.AccountConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.AccountConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.AccountConfiguration()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceHdSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceHdSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceHdSettings()
        value.activeInput = try reader["activeInput"].readIfPresent()
        value.configuredInput = try reader["configuredInput"].readIfPresent()
        value.deviceState = try reader["deviceState"].readIfPresent()
        value.framerate = try reader["framerate"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.scanType = try reader["scanType"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        value.latencyMs = try reader["latencyMs"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceNetworkSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceNetworkSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceNetworkSettings()
        value.dnsAddresses = try reader["dnsAddresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.gateway = try reader["gateway"].readIfPresent()
        value.ipAddress = try reader["ipAddress"].readIfPresent()
        value.ipScheme = try reader["ipScheme"].readIfPresent()
        value.subnetMask = try reader["subnetMask"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceUhdSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceUhdSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceUhdSettings()
        value.activeInput = try reader["activeInput"].readIfPresent()
        value.configuredInput = try reader["configuredInput"].readIfPresent()
        value.deviceState = try reader["deviceState"].readIfPresent()
        value.framerate = try reader["framerate"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.scanType = try reader["scanType"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        value.latencyMs = try reader["latencyMs"].readIfPresent()
        value.codec = try reader["codec"].readIfPresent()
        value.mediaconnectSettings = try reader["mediaconnectSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceMediaConnectSettings.read(from:))
        value.audioChannelPairs = try reader["audioChannelPairs"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputDeviceUhdAudioChannelPairConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceUhdAudioChannelPairConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceUhdAudioChannelPairConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceUhdAudioChannelPairConfig()
        value.id = try reader["id"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceMediaConnectSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceMediaConnectSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceMediaConnectSettings()
        value.flowArn = try reader["flowArn"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.secretArn = try reader["secretArn"].readIfPresent()
        value.sourceName = try reader["sourceName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ThumbnailDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ThumbnailDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ThumbnailDetail()
        value.pipelineId = try reader["pipelineId"].readIfPresent()
        value.thumbnails = try reader["thumbnails"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Thumbnail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.Thumbnail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Thumbnail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Thumbnail()
        value.body = try reader["body"].readIfPresent()
        value.contentType = try reader["contentType"].readIfPresent()
        value.thumbnailType = try reader["thumbnailType"].readIfPresent()
        value.timeStamp = try reader["timeStamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension MediaLiveClientTypes.DescribeChannelPlacementGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DescribeChannelPlacementGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DescribeChannelPlacementGroupSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.channels = try reader["channels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodes = try reader["nodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.ChannelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ChannelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ChannelSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.cdiInputSpecification = try reader["cdiInputSpecification"].readIfPresent(with: MediaLiveClientTypes.CdiInputSpecification.read(from:))
        value.channelClass = try reader["channelClass"].readIfPresent()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.OutputDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.ChannelEgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.inputAttachments = try reader["inputAttachments"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.InputAttachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputSpecification = try reader["inputSpecification"].readIfPresent(with: MediaLiveClientTypes.InputSpecification.read(from:))
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.maintenance = try reader["maintenance"].readIfPresent(with: MediaLiveClientTypes.MaintenanceStatus.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpc = try reader["vpc"].readIfPresent(with: MediaLiveClientTypes.VpcOutputSettingsDescription.read(from:))
        value.anywhereSettings = try reader["anywhereSettings"].readIfPresent(with: MediaLiveClientTypes.DescribeAnywhereSettings.read(from:))
        return value
    }
}

extension MediaLiveClientTypes.CloudWatchAlarmTemplateGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CloudWatchAlarmTemplateGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CloudWatchAlarmTemplateGroupSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateCount = try reader["templateCount"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.CloudWatchAlarmTemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.CloudWatchAlarmTemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.CloudWatchAlarmTemplateSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.comparisonOperator = try reader["comparisonOperator"].readIfPresent() ?? .sdkUnknown("")
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.datapointsToAlarm = try reader["datapointsToAlarm"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.evaluationPeriods = try reader["evaluationPeriods"].readIfPresent() ?? 0
        value.groupId = try reader["groupId"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.metricName = try reader["metricName"].readIfPresent() ?? ""
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.period = try reader["period"].readIfPresent() ?? 0
        value.statistic = try reader["statistic"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.targetResourceType = try reader["targetResourceType"].readIfPresent() ?? .sdkUnknown("")
        value.threshold = try reader["threshold"].readIfPresent() ?? 0.0
        value.treatMissingData = try reader["treatMissingData"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaLiveClientTypes.DescribeClusterSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DescribeClusterSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DescribeClusterSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.channelIds = try reader["channelIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterType = try reader["clusterType"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceRoleArn = try reader["instanceRoleArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.ClusterNetworkSettings.read(from:))
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.EventBridgeRuleTemplateGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EventBridgeRuleTemplateGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EventBridgeRuleTemplateGroupSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateCount = try reader["templateCount"].readIfPresent() ?? 0
        return value
    }
}

extension MediaLiveClientTypes.EventBridgeRuleTemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.EventBridgeRuleTemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.EventBridgeRuleTemplateSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.eventTargetCount = try reader["eventTargetCount"].readIfPresent() ?? 0
        value.eventType = try reader["eventType"].readIfPresent() ?? .sdkUnknown("")
        value.groupId = try reader["groupId"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.InputDeviceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.InputDeviceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.InputDeviceSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.deviceSettingsSyncState = try reader["deviceSettingsSyncState"].readIfPresent()
        value.deviceUpdateStatus = try reader["deviceUpdateStatus"].readIfPresent()
        value.hdDeviceSettings = try reader["hdDeviceSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceHdSettings.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.macAddress = try reader["macAddress"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.networkSettings = try reader["networkSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceNetworkSettings.read(from:))
        value.serialNumber = try reader["serialNumber"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.uhdDeviceSettings = try reader["uhdDeviceSettings"].readIfPresent(with: MediaLiveClientTypes.InputDeviceUhdSettings.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.medialiveInputArns = try reader["medialiveInputArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputType = try reader["outputType"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.TransferringInputDeviceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.TransferringInputDeviceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.TransferringInputDeviceSummary()
        value.id = try reader["id"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.targetCustomerId = try reader["targetCustomerId"].readIfPresent()
        value.transferType = try reader["transferType"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.multiplexSettings = try reader["multiplexSettings"].readIfPresent(with: MediaLiveClientTypes.MultiplexSettingsSummary.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.pipelinesRunningCount = try reader["pipelinesRunningCount"].readIfPresent()
        value.programCount = try reader["programCount"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.MultiplexSettingsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexSettingsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexSettingsSummary()
        value.transportStreamBitrate = try reader["transportStreamBitrate"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.MultiplexProgramSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.MultiplexProgramSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.MultiplexProgramSummary()
        value.channelId = try reader["channelId"].readIfPresent()
        value.programName = try reader["programName"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DescribeNetworkSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DescribeNetworkSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DescribeNetworkSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.associatedClusterIds = try reader["associatedClusterIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.ipPools = try reader["ipPools"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.IpPool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.routes = try reader["routes"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.Route.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.DescribeNodeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.DescribeNodeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.DescribeNodeSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.channelPlacementGroups = try reader["channelPlacementGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterId = try reader["clusterId"].readIfPresent()
        value.connectionState = try reader["connectionState"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.managedInstanceId = try reader["managedInstanceId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nodeInterfaceMappings = try reader["nodeInterfaceMappings"].readListIfPresent(memberReadingClosure: MediaLiveClientTypes.NodeInterfaceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.role = try reader["role"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Offering {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Offering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Offering()
        value.arn = try reader["arn"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.durationUnits = try reader["durationUnits"].readIfPresent()
        value.fixedPrice = try reader["fixedPrice"].readIfPresent()
        value.offeringDescription = try reader["offeringDescription"].readIfPresent()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.offeringType = try reader["offeringType"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: MediaLiveClientTypes.ReservationResourceSpecification.read(from:))
        value.usagePrice = try reader["usagePrice"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.Reservation {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.Reservation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.Reservation()
        value.arn = try reader["arn"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.durationUnits = try reader["durationUnits"].readIfPresent()
        value.end = try reader["end"].readIfPresent()
        value.fixedPrice = try reader["fixedPrice"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.offeringDescription = try reader["offeringDescription"].readIfPresent()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.offeringType = try reader["offeringType"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.renewalSettings = try reader["renewalSettings"].readIfPresent(with: MediaLiveClientTypes.RenewalSettings.read(from:))
        value.reservationId = try reader["reservationId"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: MediaLiveClientTypes.ReservationResourceSpecification.read(from:))
        value.start = try reader["start"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.usagePrice = try reader["usagePrice"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.SignalMapSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.SignalMapSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.SignalMapSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.monitorDeploymentStatus = try reader["monitorDeploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaLiveClientTypes.ValidationError {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaLiveClientTypes.ValidationError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaLiveClientTypes.ValidationError()
        value.elementPath = try reader["elementPath"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        return value
    }
}

extension MediaLiveClientTypes.BatchScheduleActionCreateRequest {

    static func write(value: MediaLiveClientTypes.BatchScheduleActionCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scheduleActions"].writeList(value.scheduleActions, memberWritingClosure: MediaLiveClientTypes.ScheduleAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.BatchScheduleActionDeleteRequest {

    static func write(value: MediaLiveClientTypes.BatchScheduleActionDeleteRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionNames"].writeList(value.actionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.MaintenanceCreateSettings {

    static func write(value: MediaLiveClientTypes.MaintenanceCreateSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maintenanceDay"].write(value.maintenanceDay)
        try writer["maintenanceStartTime"].write(value.maintenanceStartTime)
    }
}

extension MediaLiveClientTypes.VpcOutputSettings {

    static func write(value: MediaLiveClientTypes.VpcOutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["publicAddressAllocationIds"].writeList(value.publicAddressAllocationIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.AnywhereSettings {

    static func write(value: MediaLiveClientTypes.AnywhereSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelPlacementGroupId"].write(value.channelPlacementGroupId)
        try writer["clusterId"].write(value.clusterId)
    }
}

extension MediaLiveClientTypes.ClusterNetworkSettingsCreateRequest {

    static func write(value: MediaLiveClientTypes.ClusterNetworkSettingsCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultRoute"].write(value.defaultRoute)
        try writer["interfaceMappings"].writeList(value.interfaceMappings, memberWritingClosure: MediaLiveClientTypes.InterfaceMappingCreateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.InterfaceMappingCreateRequest {

    static func write(value: MediaLiveClientTypes.InterfaceMappingCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logicalInterfaceName"].write(value.logicalInterfaceName)
        try writer["networkId"].write(value.networkId)
    }
}

extension MediaLiveClientTypes.InputDestinationRequest {

    static func write(value: MediaLiveClientTypes.InputDestinationRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["network"].write(value.network)
        try writer["networkRoutes"].writeList(value.networkRoutes, memberWritingClosure: MediaLiveClientTypes.InputRequestDestinationRoute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["staticIpAddress"].write(value.staticIpAddress)
        try writer["streamName"].write(value.streamName)
    }
}

extension MediaLiveClientTypes.InputRequestDestinationRoute {

    static func write(value: MediaLiveClientTypes.InputRequestDestinationRoute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidr"].write(value.cidr)
        try writer["gateway"].write(value.gateway)
    }
}

extension MediaLiveClientTypes.MediaConnectFlowRequest {

    static func write(value: MediaLiveClientTypes.MediaConnectFlowRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["flowArn"].write(value.flowArn)
    }
}

extension MediaLiveClientTypes.InputSourceRequest {

    static func write(value: MediaLiveClientTypes.InputSourceRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["passwordParam"].write(value.passwordParam)
        try writer["url"].write(value.url)
        try writer["username"].write(value.username)
    }
}

extension MediaLiveClientTypes.InputVpcRequest {

    static func write(value: MediaLiveClientTypes.InputVpcRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.SrtSettingsRequest {

    static func write(value: MediaLiveClientTypes.SrtSettingsRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["srtCallerSources"].writeList(value.srtCallerSources, memberWritingClosure: MediaLiveClientTypes.SrtCallerSourceRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.SrtCallerSourceRequest {

    static func write(value: MediaLiveClientTypes.SrtCallerSourceRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["decryption"].write(value.decryption, with: MediaLiveClientTypes.SrtCallerDecryptionRequest.write(value:to:))
        try writer["minimumLatency"].write(value.minimumLatency)
        try writer["srtListenerAddress"].write(value.srtListenerAddress)
        try writer["srtListenerPort"].write(value.srtListenerPort)
        try writer["streamId"].write(value.streamId)
    }
}

extension MediaLiveClientTypes.SrtCallerDecryptionRequest {

    static func write(value: MediaLiveClientTypes.SrtCallerDecryptionRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["algorithm"].write(value.algorithm)
        try writer["passphraseSecretArn"].write(value.passphraseSecretArn)
    }
}

extension MediaLiveClientTypes.MulticastSettingsCreateRequest {

    static func write(value: MediaLiveClientTypes.MulticastSettingsCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sources"].writeList(value.sources, memberWritingClosure: MediaLiveClientTypes.MulticastSourceCreateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.MulticastSourceCreateRequest {

    static func write(value: MediaLiveClientTypes.MulticastSourceCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceIp"].write(value.sourceIp)
        try writer["url"].write(value.url)
    }
}

extension MediaLiveClientTypes.InputWhitelistRuleCidr {

    static func write(value: MediaLiveClientTypes.InputWhitelistRuleCidr?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidr"].write(value.cidr)
    }
}

extension MediaLiveClientTypes.IpPoolCreateRequest {

    static func write(value: MediaLiveClientTypes.IpPoolCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidr"].write(value.cidr)
    }
}

extension MediaLiveClientTypes.RouteCreateRequest {

    static func write(value: MediaLiveClientTypes.RouteCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidr"].write(value.cidr)
        try writer["gateway"].write(value.gateway)
    }
}

extension MediaLiveClientTypes.NodeInterfaceMappingCreateRequest {

    static func write(value: MediaLiveClientTypes.NodeInterfaceMappingCreateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logicalInterfaceName"].write(value.logicalInterfaceName)
        try writer["networkInterfaceMode"].write(value.networkInterfaceMode)
        try writer["physicalInterfaceName"].write(value.physicalInterfaceName)
    }
}

extension MediaLiveClientTypes.MaintenanceUpdateSettings {

    static func write(value: MediaLiveClientTypes.MaintenanceUpdateSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maintenanceDay"].write(value.maintenanceDay)
        try writer["maintenanceScheduledDate"].write(value.maintenanceScheduledDate)
        try writer["maintenanceStartTime"].write(value.maintenanceStartTime)
    }
}

extension MediaLiveClientTypes.ClusterNetworkSettingsUpdateRequest {

    static func write(value: MediaLiveClientTypes.ClusterNetworkSettingsUpdateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultRoute"].write(value.defaultRoute)
        try writer["interfaceMappings"].writeList(value.interfaceMappings, memberWritingClosure: MediaLiveClientTypes.InterfaceMappingUpdateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.InterfaceMappingUpdateRequest {

    static func write(value: MediaLiveClientTypes.InterfaceMappingUpdateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logicalInterfaceName"].write(value.logicalInterfaceName)
        try writer["networkId"].write(value.networkId)
    }
}

extension MediaLiveClientTypes.InputDeviceRequest {

    static func write(value: MediaLiveClientTypes.InputDeviceRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension MediaLiveClientTypes.MulticastSettingsUpdateRequest {

    static func write(value: MediaLiveClientTypes.MulticastSettingsUpdateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sources"].writeList(value.sources, memberWritingClosure: MediaLiveClientTypes.MulticastSourceUpdateRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MediaLiveClientTypes.MulticastSourceUpdateRequest {

    static func write(value: MediaLiveClientTypes.MulticastSourceUpdateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceIp"].write(value.sourceIp)
        try writer["url"].write(value.url)
    }
}

extension MediaLiveClientTypes.InputDeviceConfigurableSettings {

    static func write(value: MediaLiveClientTypes.InputDeviceConfigurableSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioChannelPairs"].writeList(value.audioChannelPairs, memberWritingClosure: MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["codec"].write(value.codec)
        try writer["configuredInput"].write(value.configuredInput)
        try writer["latencyMs"].write(value.latencyMs)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["mediaconnectSettings"].write(value.mediaconnectSettings, with: MediaLiveClientTypes.InputDeviceMediaConnectConfigurableSettings.write(value:to:))
    }
}

extension MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairConfig {

    static func write(value: MediaLiveClientTypes.InputDeviceConfigurableAudioChannelPairConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["profile"].write(value.profile)
    }
}

extension MediaLiveClientTypes.InputDeviceMediaConnectConfigurableSettings {

    static func write(value: MediaLiveClientTypes.InputDeviceMediaConnectConfigurableSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["flowArn"].write(value.flowArn)
        try writer["roleArn"].write(value.roleArn)
        try writer["secretArn"].write(value.secretArn)
        try writer["sourceName"].write(value.sourceName)
    }
}

extension MediaLiveClientTypes.IpPoolUpdateRequest {

    static func write(value: MediaLiveClientTypes.IpPoolUpdateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidr"].write(value.cidr)
    }
}

extension MediaLiveClientTypes.RouteUpdateRequest {

    static func write(value: MediaLiveClientTypes.RouteUpdateRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidr"].write(value.cidr)
        try writer["gateway"].write(value.gateway)
    }
}

public enum MediaLiveClientTypes {}
