//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
@_spi(SmithyReadWrite) import class SmithyFormURL.Writer
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSQueryError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct DeleteCacheParameterGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteCacheSecurityGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteCacheSubnetGroupOutput: Swift.Sendable {

    public init() { }
}

/// The requested cluster ID does not refer to an existing cluster.
public struct CacheClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheClusterNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested cache parameter group name does not refer to an existing cache parameter group.
public struct CacheParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheParameterGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested cache security group name does not refer to an existing cache security group.
public struct CacheSecurityGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSecurityGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested cache subnet group name does not refer to an existing cache subnet group.
public struct CacheSubnetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSubnetGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested Amazon Resource Name (ARN) does not refer to an existing resource.
public struct InvalidARNFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidARN" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested replication group is not in the available state.
public struct InvalidReplicationGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidReplicationGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The state of the serverless cache snapshot was not received. Available for Valkey, Redis OSS and Serverless Memcached only.
public struct InvalidServerlessCacheSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidServerlessCacheSnapshotStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The account for these credentials is not currently active.
public struct InvalidServerlessCacheStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidServerlessCacheStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified replication group does not exist.
public struct ReplicationGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReplicationGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested reserved cache node was not found.
public struct ReservedCacheNodeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedCacheNodeNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The serverless cache was not found or does not exist.
public struct ServerlessCacheNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerlessCacheNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This serverless cache snapshot could not be found or does not exist. Available for Valkey, Redis OSS and Serverless Memcached only.
public struct ServerlessCacheSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerlessCacheSnapshotNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested snapshot name does not refer to an existing snapshot.
public struct SnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would cause the resource to have more than the allowed number of tags. The maximum number of tags permitted on a resource is 50.
public struct TagQuotaPerResourceExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagQuotaPerResourceExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The user group was not found or does not exist
public struct UserGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The user does not exist or could not be found.
public struct UserNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElastiCacheClientTypes {

    /// A tag that can be added to an ElastiCache cluster or replication group. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. A tag with a null Value is permitted.
    public struct Tag: Swift.Sendable {
        /// The key for the tag. May not be null.
        public var key: Swift.String?
        /// The tag's value. May be null.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

/// Represents the input of an AddTagsToResource operation.
public struct AddTagsToResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. ElastiCache resources are cluster and snapshot. For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var resourceName: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    /// This member is required.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        resourceName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

/// Represents the output from the AddTagsToResource, ListTagsForResource, and RemoveTagsFromResource operations.
public struct AddTagsToResourceOutput: Swift.Sendable {
    /// A list of tags as key-value pairs.
    public var tagList: [ElastiCacheClientTypes.Tag]?

    public init(
        tagList: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

/// The specified Amazon EC2 security group is already authorized for the specified cache security group.
public struct AuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The current state of the cache security group does not allow deletion.
public struct InvalidCacheSecurityGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCacheSecurityGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Two or more incompatible parameters were specified.
public struct InvalidParameterCombinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Two or more parameters that must not be used together were used together.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterCombination" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value for a parameter is invalid.
public struct InvalidParameterValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A parameter value is invalid.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterValue" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of an AuthorizeCacheSecurityGroupIngress operation.
public struct AuthorizeCacheSecurityGroupIngressInput: Swift.Sendable {
    /// The cache security group that allows network ingress.
    /// This member is required.
    public var cacheSecurityGroupName: Swift.String?
    /// The Amazon EC2 security group to be authorized for ingress to the cache security group.
    /// This member is required.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
    /// This member is required.
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cacheSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

extension ElastiCacheClientTypes {

    /// Provides ownership and status information for an Amazon EC2 security group.
    public struct EC2SecurityGroup: Swift.Sendable {
        /// The name of the Amazon EC2 security group.
        public var ec2SecurityGroupName: Swift.String?
        /// The Amazon account ID of the Amazon EC2 security group owner.
        public var ec2SecurityGroupOwnerId: Swift.String?
        /// The status of the Amazon EC2 security group.
        public var status: Swift.String?

        public init(
            ec2SecurityGroupName: Swift.String? = nil,
            ec2SecurityGroupOwnerId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.ec2SecurityGroupName = ec2SecurityGroupName
            self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
            self.status = status
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    public struct CacheSecurityGroup: Swift.Sendable {
        /// The ARN of the cache security group,
        public var arn: Swift.String?
        /// The name of the cache security group.
        public var cacheSecurityGroupName: Swift.String?
        /// The description of the cache security group.
        public var description: Swift.String?
        /// A list of Amazon EC2 security groups that are associated with this cache security group.
        public var ec2SecurityGroups: [ElastiCacheClientTypes.EC2SecurityGroup]?
        /// The Amazon account ID of the cache security group owner.
        public var ownerId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            cacheSecurityGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            ec2SecurityGroups: [ElastiCacheClientTypes.EC2SecurityGroup]? = nil,
            ownerId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.description = description
            self.ec2SecurityGroups = ec2SecurityGroups
            self.ownerId = ownerId
        }
    }
}

public struct AuthorizeCacheSecurityGroupIngressOutput: Swift.Sendable {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    public var cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?

    public init(
        cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

/// The service update doesn't exist
public struct ServiceUpdateNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUpdateNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct BatchApplyUpdateActionInput: Swift.Sendable {
    /// The cache cluster IDs
    public var cacheClusterIds: [Swift.String]?
    /// The replication group IDs
    public var replicationGroupIds: [Swift.String]?
    /// The unique ID of the service update
    /// This member is required.
    public var serviceUpdateName: Swift.String?

    public init(
        cacheClusterIds: [Swift.String]? = nil,
        replicationGroupIds: [Swift.String]? = nil,
        serviceUpdateName: Swift.String? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
    }
}

extension ElastiCacheClientTypes {

    public enum UpdateActionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case inProgress
        case notApplicable
        case notApplied
        case scheduled
        case scheduling
        case stopped
        case stopping
        case waitingToStart
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateActionStatus] {
            return [
                .complete,
                .inProgress,
                .notApplicable,
                .notApplied,
                .scheduled,
                .scheduling,
                .stopped,
                .stopping,
                .waitingToStart
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "complete"
            case .inProgress: return "in-progress"
            case .notApplicable: return "not-applicable"
            case .notApplied: return "not-applied"
            case .scheduled: return "scheduled"
            case .scheduling: return "scheduling"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case .waitingToStart: return "waiting-to-start"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Update action that has been processed for the corresponding apply/stop request
    public struct ProcessedUpdateAction: Swift.Sendable {
        /// The ID of the cache cluster
        public var cacheClusterId: Swift.String?
        /// The ID of the replication group
        public var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        public var serviceUpdateName: Swift.String?
        /// The status of the update action on the Valkey or Redis OSS cluster
        public var updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus?

        public init(
            cacheClusterId: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil,
            updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
            self.updateActionStatus = updateActionStatus
        }
    }
}

extension ElastiCacheClientTypes {

    /// Update action that has failed to be processed for the corresponding apply/stop request
    public struct UnprocessedUpdateAction: Swift.Sendable {
        /// The ID of the cache cluster
        public var cacheClusterId: Swift.String?
        /// The error message that describes the reason the request was not processed
        public var errorMessage: Swift.String?
        /// The error type for requests that are not processed
        public var errorType: Swift.String?
        /// The replication group ID
        public var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        public var serviceUpdateName: Swift.String?

        public init(
            cacheClusterId: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            errorType: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.errorMessage = errorMessage
            self.errorType = errorType
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
        }
    }
}

public struct BatchApplyUpdateActionOutput: Swift.Sendable {
    /// Update actions that have been processed successfully
    public var processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]?
    /// Update actions that haven't been processed successfully
    public var unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]?

    public init(
        processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]? = nil,
        unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]? = nil
    )
    {
        self.processedUpdateActions = processedUpdateActions
        self.unprocessedUpdateActions = unprocessedUpdateActions
    }
}

public struct BatchStopUpdateActionInput: Swift.Sendable {
    /// The cache cluster IDs
    public var cacheClusterIds: [Swift.String]?
    /// The replication group IDs
    public var replicationGroupIds: [Swift.String]?
    /// The unique ID of the service update
    /// This member is required.
    public var serviceUpdateName: Swift.String?

    public init(
        cacheClusterIds: [Swift.String]? = nil,
        replicationGroupIds: [Swift.String]? = nil,
        serviceUpdateName: Swift.String? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
    }
}

public struct BatchStopUpdateActionOutput: Swift.Sendable {
    /// Update actions that have been processed successfully
    public var processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]?
    /// Update actions that haven't been processed successfully
    public var unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]?

    public init(
        processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]? = nil,
        unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]? = nil
    )
    {
        self.processedUpdateActions = processedUpdateActions
        self.unprocessedUpdateActions = unprocessedUpdateActions
    }
}

/// The designated replication group is not available for data migration.
public struct ReplicationGroupNotUnderMigrationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReplicationGroupNotUnderMigrationFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CompleteMigrationInput: Swift.Sendable {
    /// Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
    public var force: Swift.Bool?
    /// The ID of the replication group to which data is being migrated.
    /// This member is required.
    public var replicationGroupId: Swift.String?

    public init(
        force: Swift.Bool? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.force = force
        self.replicationGroupId = replicationGroupId
    }
}

extension ElastiCacheClientTypes {

    public enum AutomaticFailoverStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomaticFailoverStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .disabling: return "disabling"
            case .enabled: return "enabled"
            case .enabling: return "enabling"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum ClusterMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compatible
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterMode] {
            return [
                .compatible,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compatible: return "compatible"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents the information required for client programs to connect to a cache node. This value is read-only.
    public struct Endpoint: Swift.Sendable {
        /// The DNS hostname of the cache node.
        public var address: Swift.String?
        /// The port number that the cache engine is listening on.
        public var port: Swift.Int?

        public init(
            address: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.port = port
        }
    }
}

extension ElastiCacheClientTypes {

    public enum DataTieringStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DataTieringStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The name of the Global datastore and role of this replication group in the Global datastore.
    public struct GlobalReplicationGroupInfo: Swift.Sendable {
        /// The name of the Global datastore
        public var globalReplicationGroupId: Swift.String?
        /// The role of the replication group in a Global datastore. Can be primary or secondary.
        public var globalReplicationGroupMemberRole: Swift.String?

        public init(
            globalReplicationGroupId: Swift.String? = nil,
            globalReplicationGroupMemberRole: Swift.String? = nil
        )
        {
            self.globalReplicationGroupId = globalReplicationGroupId
            self.globalReplicationGroupMemberRole = globalReplicationGroupMemberRole
        }
    }
}

extension ElastiCacheClientTypes {

    public enum IpDiscovery: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IpDiscovery] {
            return [
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The configuration details of the CloudWatch Logs destination.
    public struct CloudWatchLogsDestinationDetails: Swift.Sendable {
        /// The name of the CloudWatch Logs log group.
        public var logGroup: Swift.String?

        public init(
            logGroup: Swift.String? = nil
        )
        {
            self.logGroup = logGroup
        }
    }
}

extension ElastiCacheClientTypes {

    /// The configuration details of the Kinesis Data Firehose destination.
    public struct KinesisFirehoseDestinationDetails: Swift.Sendable {
        /// The name of the Kinesis Data Firehose delivery stream.
        public var deliveryStream: Swift.String?

        public init(
            deliveryStream: Swift.String? = nil
        )
        {
            self.deliveryStream = deliveryStream
        }
    }
}

extension ElastiCacheClientTypes {

    /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
    public struct DestinationDetails: Swift.Sendable {
        /// The configuration details of the CloudWatch Logs destination.
        public var cloudWatchLogsDetails: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails?
        /// The configuration details of the Kinesis Data Firehose destination.
        public var kinesisFirehoseDetails: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails?

        public init(
            cloudWatchLogsDetails: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails? = nil,
            kinesisFirehoseDetails: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails? = nil
        )
        {
            self.cloudWatchLogsDetails = cloudWatchLogsDetails
            self.kinesisFirehoseDetails = kinesisFirehoseDetails
        }
    }
}

extension ElastiCacheClientTypes {

    public enum DestinationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudwatchlogs
        case kinesisfirehose
        case sdkUnknown(Swift.String)

        public static var allCases: [DestinationType] {
            return [
                .cloudwatchlogs,
                .kinesisfirehose
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchlogs: return "cloudwatch-logs"
            case .kinesisfirehose: return "kinesis-firehose"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum LogFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case json
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [LogFormat] {
            return [
                .json,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .text: return "text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum LogType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case engineLog
        case slowLog
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .engineLog,
                .slowLog
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .engineLog: return "engine-log"
            case .slowLog: return "slow-log"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum LogDeliveryConfigurationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case disabling
        case enabling
        case error
        case modifying
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDeliveryConfigurationStatus] {
            return [
                .active,
                .disabling,
                .enabling,
                .error,
                .modifying
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .disabling: return "disabling"
            case .enabling: return "enabling"
            case .error: return "error"
            case .modifying: return "modifying"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Returns the destination, format and type of the logs.
    public struct LogDeliveryConfiguration: Swift.Sendable {
        /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
        public var destinationDetails: ElastiCacheClientTypes.DestinationDetails?
        /// Returns the destination type, either cloudwatch-logs or kinesis-firehose.
        public var destinationType: ElastiCacheClientTypes.DestinationType?
        /// Returns the log format, either JSON or TEXT.
        public var logFormat: ElastiCacheClientTypes.LogFormat?
        /// Refers to [slow-log](https://redis.io/commands/slowlog) or engine-log.
        public var logType: ElastiCacheClientTypes.LogType?
        /// Returns an error message for the log delivery configuration.
        public var message: Swift.String?
        /// Returns the log delivery configuration status. Values are one of enabling | disabling | modifying | active | error
        public var status: ElastiCacheClientTypes.LogDeliveryConfigurationStatus?

        public init(
            destinationDetails: ElastiCacheClientTypes.DestinationDetails? = nil,
            destinationType: ElastiCacheClientTypes.DestinationType? = nil,
            logFormat: ElastiCacheClientTypes.LogFormat? = nil,
            logType: ElastiCacheClientTypes.LogType? = nil,
            message: Swift.String? = nil,
            status: ElastiCacheClientTypes.LogDeliveryConfigurationStatus? = nil
        )
        {
            self.destinationDetails = destinationDetails
            self.destinationType = destinationType
            self.logFormat = logFormat
            self.logType = logType
            self.message = message
            self.status = status
        }
    }
}

extension ElastiCacheClientTypes {

    public enum MultiAZStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MultiAZStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum NetworkType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dualStack
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkType] {
            return [
                .dualStack,
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dualStack: return "dual_stack"
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents a single node within a node group (shard).
    public struct NodeGroupMember: Swift.Sendable {
        /// The ID of the cluster to which the node belongs.
        public var cacheClusterId: Swift.String?
        /// The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).
        public var cacheNodeId: Swift.String?
        /// The role that is currently assigned to the node - primary or replica. This member is only applicable for Valkey or Redis OSS (cluster mode disabled) replication groups.
        public var currentRole: Swift.String?
        /// The name of the Availability Zone in which the node is located.
        public var preferredAvailabilityZone: Swift.String?
        /// The outpost ARN of the node group member.
        public var preferredOutpostArn: Swift.String?
        /// The information required for client programs to connect to a node for read operations. The read endpoint is only applicable on Valkey or Redis OSS (cluster mode disabled) clusters.
        public var readEndpoint: ElastiCacheClientTypes.Endpoint?

        public init(
            cacheClusterId: Swift.String? = nil,
            cacheNodeId: Swift.String? = nil,
            currentRole: Swift.String? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            readEndpoint: ElastiCacheClientTypes.Endpoint? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeId = cacheNodeId
            self.currentRole = currentRole
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredOutpostArn = preferredOutpostArn
            self.readEndpoint = readEndpoint
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents a collection of cache nodes in a replication group. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.
    public struct NodeGroup: Swift.Sendable {
        /// The identifier for the node group (shard). A Valkey or Redis OSS (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001. A Valkey or Redis OSS (cluster mode enabled) replication group contains 1 to 90 node groups numbered 0001 to 0090. Optionally, the user can provide the id for a node group.
        public var nodeGroupId: Swift.String?
        /// A list containing information about individual nodes within the node group (shard).
        public var nodeGroupMembers: [ElastiCacheClientTypes.NodeGroupMember]?
        /// The endpoint of the primary node in this node group (shard).
        public var primaryEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The endpoint of the replica nodes in this node group (shard). This value is read-only.
        public var readerEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The keyspace for this node group (shard).
        public var slots: Swift.String?
        /// The current state of this replication group - creating, available, modifying, deleting.
        public var status: Swift.String?

        public init(
            nodeGroupId: Swift.String? = nil,
            nodeGroupMembers: [ElastiCacheClientTypes.NodeGroupMember]? = nil,
            primaryEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            readerEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            slots: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.nodeGroupMembers = nodeGroupMembers
            self.primaryEndpoint = primaryEndpoint
            self.readerEndpoint = readerEndpoint
            self.slots = slots
            self.status = status
        }
    }
}

extension ElastiCacheClientTypes {

    public enum AuthTokenUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rotating
        case setting
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthTokenUpdateStatus] {
            return [
                .rotating,
                .setting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rotating: return "ROTATING"
            case .setting: return "SETTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum PendingAutomaticFailoverStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [PendingAutomaticFailoverStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The log delivery configurations being modified
    public struct PendingLogDeliveryConfiguration: Swift.Sendable {
        /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
        public var destinationDetails: ElastiCacheClientTypes.DestinationDetails?
        /// Returns the destination type, either CloudWatch Logs or Kinesis Data Firehose.
        public var destinationType: ElastiCacheClientTypes.DestinationType?
        /// Returns the log format, either JSON or TEXT
        public var logFormat: ElastiCacheClientTypes.LogFormat?
        /// Refers to [slow-log](https://redis.io/commands/slowlog) or engine-log..
        public var logType: ElastiCacheClientTypes.LogType?

        public init(
            destinationDetails: ElastiCacheClientTypes.DestinationDetails? = nil,
            destinationType: ElastiCacheClientTypes.DestinationType? = nil,
            logFormat: ElastiCacheClientTypes.LogFormat? = nil,
            logType: ElastiCacheClientTypes.LogType? = nil
        )
        {
            self.destinationDetails = destinationDetails
            self.destinationType = destinationType
            self.logFormat = logFormat
            self.logType = logType
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents the progress of an online resharding operation.
    public struct SlotMigration: Swift.Sendable {
        /// The percentage of the slot migration that is complete.
        public var progressPercentage: Swift.Double?

        public init(
            progressPercentage: Swift.Double? = nil
        )
        {
            self.progressPercentage = progressPercentage
        }
    }
}

extension ElastiCacheClientTypes {

    /// The status of an online resharding operation.
    public struct ReshardingStatus: Swift.Sendable {
        /// Represents the progress of an online resharding operation.
        public var slotMigration: ElastiCacheClientTypes.SlotMigration?

        public init(
            slotMigration: ElastiCacheClientTypes.SlotMigration? = nil
        )
        {
            self.slotMigration = slotMigration
        }
    }
}

extension ElastiCacheClientTypes {

    public enum TransitEncryptionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case preferred
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [TransitEncryptionMode] {
            return [
                .preferred,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .preferred: return "preferred"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The status of the user group update.
    public struct UserGroupsUpdateStatus: Swift.Sendable {
        /// The ID of the user group to add.
        public var userGroupIdsToAdd: [Swift.String]?
        /// The ID of the user group to remove.
        public var userGroupIdsToRemove: [Swift.String]?

        public init(
            userGroupIdsToAdd: [Swift.String]? = nil,
            userGroupIdsToRemove: [Swift.String]? = nil
        )
        {
            self.userGroupIdsToAdd = userGroupIdsToAdd
            self.userGroupIdsToRemove = userGroupIdsToRemove
        }
    }
}

extension ElastiCacheClientTypes {

    /// The settings to be applied to the Valkey or Redis OSS replication group, either immediately or during the next maintenance window.
    public struct ReplicationGroupPendingModifiedValues: Swift.Sendable {
        /// The auth token status
        public var authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus?
        /// Indicates the status of automatic failover for this Valkey or Redis OSS replication group.
        public var automaticFailoverStatus: ElastiCacheClientTypes.PendingAutomaticFailoverStatus?
        /// Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Valkey or Redis OSS clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Valkey or Redis OSS clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.
        public var clusterMode: ElastiCacheClientTypes.ClusterMode?
        /// The log delivery configurations being modified
        public var logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]?
        /// The primary cluster ID that is applied immediately (if --apply-immediately was specified), or during the next maintenance window.
        public var primaryClusterId: Swift.String?
        /// The status of an online resharding operation.
        public var resharding: ElastiCacheClientTypes.ReshardingStatus?
        /// A flag that enables in-transit encryption when set to true.
        public var transitEncryptionEnabled: Swift.Bool?
        /// A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.
        public var transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode?
        /// The user group being modified.
        public var userGroups: ElastiCacheClientTypes.UserGroupsUpdateStatus?

        public init(
            authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus? = nil,
            automaticFailoverStatus: ElastiCacheClientTypes.PendingAutomaticFailoverStatus? = nil,
            clusterMode: ElastiCacheClientTypes.ClusterMode? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil,
            primaryClusterId: Swift.String? = nil,
            resharding: ElastiCacheClientTypes.ReshardingStatus? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil,
            transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode? = nil,
            userGroups: ElastiCacheClientTypes.UserGroupsUpdateStatus? = nil
        )
        {
            self.authTokenStatus = authTokenStatus
            self.automaticFailoverStatus = automaticFailoverStatus
            self.clusterMode = clusterMode
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.primaryClusterId = primaryClusterId
            self.resharding = resharding
            self.transitEncryptionEnabled = transitEncryptionEnabled
            self.transitEncryptionMode = transitEncryptionMode
            self.userGroups = userGroups
        }
    }
}

extension ElastiCacheClientTypes {

    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public struct ReplicationGroup: Swift.Sendable {
        /// The ARN (Amazon Resource Name) of the replication group.
        public var arn: Swift.String?
        /// A flag that enables encryption at-rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the cluster is created. To enable encryption at-rest on a cluster you must set AtRestEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false
        public var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Valkey or Redis OSS commands. Default: false
        public var authTokenEnabled: Swift.Bool?
        /// The date the auth token was last modified
        public var authTokenLastModifiedDate: Foundation.Date?
        /// If you are running Valkey 7.2 and above, or Redis OSS engine version 6.0 and above, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        public var autoMinorVersionUpgrade: Swift.Bool?
        /// Indicates the status of automatic failover for this Valkey or Redis OSS replication group.
        public var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The name of the compute and memory capacity node type for each node in the replication group.
        public var cacheNodeType: Swift.String?
        /// A flag indicating whether or not this replication group is cluster enabled; i.e., whether its data can be partitioned across multiple shards (API/CLI: node groups). Valid values: true | false
        public var clusterEnabled: Swift.Bool?
        /// Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Valkey or Redis OSS clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Valkey or Redis OSS clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.
        public var clusterMode: ElastiCacheClientTypes.ClusterMode?
        /// The configuration endpoint for this replication group. Use the configuration endpoint to connect to this replication group.
        public var configurationEndpoint: ElastiCacheClientTypes.Endpoint?
        /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
        public var dataTiering: ElastiCacheClientTypes.DataTieringStatus?
        /// The user supplied description of the replication group.
        public var description: Swift.String?
        /// The engine used in a replication group. The options are redis, memcached or valkey.
        public var engine: Swift.String?
        /// The name of the Global datastore and role of this replication group in the Global datastore.
        public var globalReplicationGroupInfo: ElastiCacheClientTypes.GlobalReplicationGroupInfo?
        /// The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
        public var ipDiscovery: ElastiCacheClientTypes.IpDiscovery?
        /// The ID of the KMS key used to encrypt the disk in the cluster.
        public var kmsKeyId: Swift.String?
        /// Returns the destination, format and type of the logs.
        public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]?
        /// The names of all the cache clusters that are part of this replication group.
        public var memberClusters: [Swift.String]?
        /// The outpost ARNs of the replication group's member clusters.
        public var memberClustersOutpostArns: [Swift.String]?
        /// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see [Minimizing Downtime: Multi-AZ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html)
        public var multiAZ: ElastiCacheClientTypes.MultiAZStatus?
        /// Must be either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
        public var networkType: ElastiCacheClientTypes.NetworkType?
        /// A list of node groups in this replication group. For Valkey or Redis OSS (cluster mode disabled) replication groups, this is a single-element list. For Valkey or Redis OSS (cluster mode enabled) replication groups, the list contains an entry for each node group (shard).
        public var nodeGroups: [ElastiCacheClientTypes.NodeGroup]?
        /// A group of settings to be applied to the replication group, either immediately or during the next maintenance window.
        public var pendingModifiedValues: ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues?
        /// The date and time when the cluster was created.
        public var replicationGroupCreateTime: Foundation.Date?
        /// The identifier for the replication group.
        public var replicationGroupId: Swift.String?
        /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public var snapshotRetentionLimit: Swift.Int?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range. This parameter is only valid if the Engine parameter is redis.
        public var snapshotWindow: Swift.String?
        /// The cluster ID that is used as the daily snapshot source for the replication group.
        public var snapshottingClusterId: Swift.String?
        /// The current state of this replication group - creating, available, modifying, deleting, create-failed, snapshotting.
        public var status: Swift.String?
        /// A flag that enables in-transit encryption when set to true. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false
        public var transitEncryptionEnabled: Swift.Bool?
        /// A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.
        public var transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode?
        /// The ID of the user group associated to the replication group.
        public var userGroupIds: [Swift.String]?

        public init(
            arn: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            authTokenLastModifiedDate: Foundation.Date? = nil,
            autoMinorVersionUpgrade: Swift.Bool? = nil,
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            cacheNodeType: Swift.String? = nil,
            clusterEnabled: Swift.Bool? = nil,
            clusterMode: ElastiCacheClientTypes.ClusterMode? = nil,
            configurationEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            dataTiering: ElastiCacheClientTypes.DataTieringStatus? = nil,
            description: Swift.String? = nil,
            engine: Swift.String? = nil,
            globalReplicationGroupInfo: ElastiCacheClientTypes.GlobalReplicationGroupInfo? = nil,
            ipDiscovery: ElastiCacheClientTypes.IpDiscovery? = nil,
            kmsKeyId: Swift.String? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil,
            memberClusters: [Swift.String]? = nil,
            memberClustersOutpostArns: [Swift.String]? = nil,
            multiAZ: ElastiCacheClientTypes.MultiAZStatus? = nil,
            networkType: ElastiCacheClientTypes.NetworkType? = nil,
            nodeGroups: [ElastiCacheClientTypes.NodeGroup]? = nil,
            pendingModifiedValues: ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues? = nil,
            replicationGroupCreateTime: Foundation.Date? = nil,
            replicationGroupId: Swift.String? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotWindow: Swift.String? = nil,
            snapshottingClusterId: Swift.String? = nil,
            status: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil,
            transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode? = nil,
            userGroupIds: [Swift.String]? = nil
        )
        {
            self.arn = arn
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.authTokenLastModifiedDate = authTokenLastModifiedDate
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.automaticFailover = automaticFailover
            self.cacheNodeType = cacheNodeType
            self.clusterEnabled = clusterEnabled
            self.clusterMode = clusterMode
            self.configurationEndpoint = configurationEndpoint
            self.dataTiering = dataTiering
            self.description = description
            self.engine = engine
            self.globalReplicationGroupInfo = globalReplicationGroupInfo
            self.ipDiscovery = ipDiscovery
            self.kmsKeyId = kmsKeyId
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.memberClusters = memberClusters
            self.memberClustersOutpostArns = memberClustersOutpostArns
            self.multiAZ = multiAZ
            self.networkType = networkType
            self.nodeGroups = nodeGroups
            self.pendingModifiedValues = pendingModifiedValues
            self.replicationGroupCreateTime = replicationGroupCreateTime
            self.replicationGroupId = replicationGroupId
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotWindow = snapshotWindow
            self.snapshottingClusterId = snapshottingClusterId
            self.status = status
            self.transitEncryptionEnabled = transitEncryptionEnabled
            self.transitEncryptionMode = transitEncryptionMode
            self.userGroupIds = userGroupIds
        }
    }
}

public struct CompleteMigrationOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

/// A serverless cache snapshot with this name already exists. Available for Valkey, Redis OSS and Serverless Memcached only.
public struct ServerlessCacheSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerlessCacheSnapshotAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of serverless cache snapshots exceeds the customer snapshot quota. Available for Valkey, Redis OSS and Serverless Memcached only.
public struct ServerlessCacheSnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerlessCacheSnapshotQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified service linked role (SLR) was not found.
public struct ServiceLinkedRoleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceLinkedRoleNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CopyServerlessCacheSnapshotInput: Swift.Sendable {
    /// The identifier of the KMS key used to encrypt the target snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var kmsKeyId: Swift.String?
    /// The identifier of the existing serverless cache’s snapshot to be copied. Available for Valkey, Redis OSS and Serverless Memcached only.
    /// This member is required.
    public var sourceServerlessCacheSnapshotName: Swift.String?
    /// A list of tags to be added to the target snapshot resource. A tag is a key-value pair. Available for Valkey, Redis OSS and Serverless Memcached only. Default: NULL
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// The identifier for the snapshot to be created. Available for Valkey, Redis OSS and Serverless Memcached only.
    /// This member is required.
    public var targetServerlessCacheSnapshotName: Swift.String?

    public init(
        kmsKeyId: Swift.String? = nil,
        sourceServerlessCacheSnapshotName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        targetServerlessCacheSnapshotName: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.sourceServerlessCacheSnapshotName = sourceServerlessCacheSnapshotName
        self.tags = tags
        self.targetServerlessCacheSnapshotName = targetServerlessCacheSnapshotName
    }
}

extension ElastiCacheClientTypes {

    /// The configuration settings for a specific serverless cache.
    public struct ServerlessCacheConfiguration: Swift.Sendable {
        /// The engine that the serverless cache is configured with.
        public var engine: Swift.String?
        /// The engine version number that the serverless cache is configured with.
        public var majorEngineVersion: Swift.String?
        /// The identifier of a serverless cache.
        public var serverlessCacheName: Swift.String?

        public init(
            engine: Swift.String? = nil,
            majorEngineVersion: Swift.String? = nil,
            serverlessCacheName: Swift.String? = nil
        )
        {
            self.engine = engine
            self.majorEngineVersion = majorEngineVersion
            self.serverlessCacheName = serverlessCacheName
        }
    }
}

extension ElastiCacheClientTypes {

    /// The resource representing a serverless cache snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
    public struct ServerlessCacheSnapshot: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of a serverless cache snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var arn: Swift.String?
        /// The total size of a serverless cache snapshot, in bytes. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var bytesUsedForCache: Swift.String?
        /// The date and time that the source serverless cache's metadata and cache data set was obtained for the snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var createTime: Foundation.Date?
        /// The time that the serverless cache snapshot will expire. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var expiryTime: Foundation.Date?
        /// The ID of the Amazon Web Services Key Management Service (KMS) key of a serverless cache snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var kmsKeyId: Swift.String?
        /// The configuration of the serverless cache, at the time the snapshot was taken. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var serverlessCacheConfiguration: ElastiCacheClientTypes.ServerlessCacheConfiguration?
        /// The identifier of a serverless cache snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var serverlessCacheSnapshotName: Swift.String?
        /// The type of snapshot of serverless cache. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var snapshotType: Swift.String?
        /// The current status of the serverless cache. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var status: Swift.String?

        public init(
            arn: Swift.String? = nil,
            bytesUsedForCache: Swift.String? = nil,
            createTime: Foundation.Date? = nil,
            expiryTime: Foundation.Date? = nil,
            kmsKeyId: Swift.String? = nil,
            serverlessCacheConfiguration: ElastiCacheClientTypes.ServerlessCacheConfiguration? = nil,
            serverlessCacheSnapshotName: Swift.String? = nil,
            snapshotType: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.arn = arn
            self.bytesUsedForCache = bytesUsedForCache
            self.createTime = createTime
            self.expiryTime = expiryTime
            self.kmsKeyId = kmsKeyId
            self.serverlessCacheConfiguration = serverlessCacheConfiguration
            self.serverlessCacheSnapshotName = serverlessCacheSnapshotName
            self.snapshotType = snapshotType
            self.status = status
        }
    }
}

public struct CopyServerlessCacheSnapshotOutput: Swift.Sendable {
    /// The response for the attempt to copy the serverless cache snapshot. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot?

    public init(
        serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot? = nil
    )
    {
        self.serverlessCacheSnapshot = serverlessCacheSnapshot
    }
}

/// The current state of the snapshot does not allow the requested operation to occur.
public struct InvalidSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSnapshotState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You already have a snapshot with the given name.
public struct SnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the maximum number of snapshots.
public struct SnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CopySnapshotMessage operation.
public struct CopySnapshotInput: Swift.Sendable {
    /// The ID of the KMS key used to encrypt the target snapshot.
    public var kmsKeyId: Swift.String?
    /// The name of an existing snapshot from which to make a copy.
    /// This member is required.
    public var sourceSnapshotName: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see [Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access) in the Amazon ElastiCache User Guide. For more information, see [Exporting a Snapshot](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html) in the Amazon ElastiCache User Guide.
    public var targetBucket: Swift.String?
    /// A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
    /// This member is required.
    public var targetSnapshotName: Swift.String?

    public init(
        kmsKeyId: Swift.String? = nil,
        sourceSnapshotName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        targetBucket: Swift.String? = nil,
        targetSnapshotName: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.sourceSnapshotName = sourceSnapshotName
        self.tags = tags
        self.targetBucket = targetBucket
        self.targetSnapshotName = targetSnapshotName
    }
}

extension ElastiCacheClientTypes {

    /// Node group (shard) configuration options. Each node group (shard) configuration has the following: Slots, PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount.
    public struct NodeGroupConfiguration: Swift.Sendable {
        /// Either the ElastiCache supplied 4-digit id or a user supplied id for the node group these configuration values apply to.
        public var nodeGroupId: Swift.String?
        /// The Availability Zone where the primary node of this node group (shard) is launched.
        public var primaryAvailabilityZone: Swift.String?
        /// The outpost ARN of the primary node.
        public var primaryOutpostArn: Swift.String?
        /// A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of ReplicaCount or ReplicasPerNodeGroup if not specified.
        public var replicaAvailabilityZones: [Swift.String]?
        /// The number of read replica nodes in this node group (shard).
        public var replicaCount: Swift.Int?
        /// The outpost ARN of the node replicas.
        public var replicaOutpostArns: [Swift.String]?
        /// A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format startkey-endkey. Example: "0-3999"
        public var slots: Swift.String?

        public init(
            nodeGroupId: Swift.String? = nil,
            primaryAvailabilityZone: Swift.String? = nil,
            primaryOutpostArn: Swift.String? = nil,
            replicaAvailabilityZones: [Swift.String]? = nil,
            replicaCount: Swift.Int? = nil,
            replicaOutpostArns: [Swift.String]? = nil,
            slots: Swift.String? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.primaryAvailabilityZone = primaryAvailabilityZone
            self.primaryOutpostArn = primaryOutpostArn
            self.replicaAvailabilityZones = replicaAvailabilityZones
            self.replicaCount = replicaCount
            self.replicaOutpostArns = replicaOutpostArns
            self.slots = slots
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents an individual cache node in a snapshot of a cluster.
    public struct NodeSnapshot: Swift.Sendable {
        /// A unique identifier for the source cluster.
        public var cacheClusterId: Swift.String?
        /// The date and time when the cache node was created in the source cluster.
        public var cacheNodeCreateTime: Foundation.Date?
        /// The cache node identifier for the node in the source cluster.
        public var cacheNodeId: Swift.String?
        /// The size of the cache on the source cache node.
        public var cacheSize: Swift.String?
        /// The configuration for the source node group (shard).
        public var nodeGroupConfiguration: ElastiCacheClientTypes.NodeGroupConfiguration?
        /// A unique identifier for the source node group (shard).
        public var nodeGroupId: Swift.String?
        /// The date and time when the source node's metadata and cache data set was obtained for the snapshot.
        public var snapshotCreateTime: Foundation.Date?

        public init(
            cacheClusterId: Swift.String? = nil,
            cacheNodeCreateTime: Foundation.Date? = nil,
            cacheNodeId: Swift.String? = nil,
            cacheSize: Swift.String? = nil,
            nodeGroupConfiguration: ElastiCacheClientTypes.NodeGroupConfiguration? = nil,
            nodeGroupId: Swift.String? = nil,
            snapshotCreateTime: Foundation.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.cacheNodeId = cacheNodeId
            self.cacheSize = cacheSize
            self.nodeGroupConfiguration = nodeGroupConfiguration
            self.nodeGroupId = nodeGroupId
            self.snapshotCreateTime = snapshotCreateTime
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents a copy of an entire Valkey or Redis OSS cluster as of the time when the snapshot was taken.
    public struct Snapshot: Swift.Sendable {
        /// The ARN (Amazon Resource Name) of the snapshot.
        public var arn: Swift.String?
        ///  If you are running Valkey 7.2 and above or Redis OSS engine version 6.0 and above, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        public var autoMinorVersionUpgrade: Swift.Bool?
        /// Indicates the status of automatic failover for the source Valkey or Redis OSS replication group.
        public var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The date and time when the source cluster was created.
        public var cacheClusterCreateTime: Foundation.Date?
        /// The user-supplied identifier of the source cluster.
        public var cacheClusterId: Swift.String?
        /// The name of the compute and memory capacity node type for the source cluster. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// The cache parameter group that is associated with the source cluster.
        public var cacheParameterGroupName: Swift.String?
        /// The name of the cache subnet group associated with the source cluster.
        public var cacheSubnetGroupName: Swift.String?
        /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
        public var dataTiering: ElastiCacheClientTypes.DataTieringStatus?
        /// The name of the cache engine (memcached or redis) used by the source cluster.
        public var engine: Swift.String?
        /// The version of the cache engine version that is used by the source cluster.
        public var engineVersion: Swift.String?
        /// The ID of the KMS key used to encrypt the snapshot.
        public var kmsKeyId: Swift.String?
        /// A list of the cache nodes in the source cluster.
        public var nodeSnapshots: [ElastiCacheClientTypes.NodeSnapshot]?
        /// The number of cache nodes in the source cluster. For clusters running Valkey or Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        public var numCacheNodes: Swift.Int?
        /// The number of node groups (shards) in this snapshot. When restoring from a snapshot, the number of node groups (shards) in the snapshot and in the restored replication group must be the same.
        public var numNodeGroups: Swift.Int?
        /// The port number used by each cache nodes in the source cluster.
        public var port: Swift.Int?
        /// The name of the Availability Zone in which the source cluster is located.
        public var preferredAvailabilityZone: Swift.String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
        ///
        /// * sun
        ///
        /// * mon
        ///
        /// * tue
        ///
        /// * wed
        ///
        /// * thu
        ///
        /// * fri
        ///
        /// * sat
        ///
        ///
        /// Example: sun:23:00-mon:01:30
        public var preferredMaintenanceWindow: Swift.String?
        /// The ARN (Amazon Resource Name) of the preferred outpost.
        public var preferredOutpostArn: Swift.String?
        /// A description of the source replication group.
        public var replicationGroupDescription: Swift.String?
        /// The unique identifier of the source replication group.
        public var replicationGroupId: Swift.String?
        /// The name of a snapshot. For an automatic snapshot, the name is system-generated. For a manual snapshot, this is the user-provided name.
        public var snapshotName: Swift.String?
        /// For an automatic snapshot, the number of days for which ElastiCache retains the snapshot before deleting it. For manual snapshots, this field reflects the SnapshotRetentionLimit for the source cluster when the snapshot was created. This field is otherwise ignored: Manual snapshots do not expire, and can only be deleted using the DeleteSnapshot operation. Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public var snapshotRetentionLimit: Swift.Int?
        /// Indicates whether the snapshot is from an automatic backup (automated) or was created manually (manual).
        public var snapshotSource: Swift.String?
        /// The status of the snapshot. Valid values: creating | available | restoring | copying | deleting.
        public var snapshotStatus: Swift.String?
        /// The daily time range during which ElastiCache takes daily snapshots of the source cluster.
        public var snapshotWindow: Swift.String?
        /// The Amazon Resource Name (ARN) for the topic used by the source cluster for publishing notifications.
        public var topicArn: Swift.String?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group for the source cluster.
        public var vpcId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            autoMinorVersionUpgrade: Swift.Bool? = nil,
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            cacheClusterCreateTime: Foundation.Date? = nil,
            cacheClusterId: Swift.String? = nil,
            cacheNodeType: Swift.String? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            dataTiering: ElastiCacheClientTypes.DataTieringStatus? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            nodeSnapshots: [ElastiCacheClientTypes.NodeSnapshot]? = nil,
            numCacheNodes: Swift.Int? = nil,
            numNodeGroups: Swift.Int? = nil,
            port: Swift.Int? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            replicationGroupDescription: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            snapshotName: Swift.String? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotSource: Swift.String? = nil,
            snapshotStatus: Swift.String? = nil,
            snapshotWindow: Swift.String? = nil,
            topicArn: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.automaticFailover = automaticFailover
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheNodeType = cacheNodeType
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.dataTiering = dataTiering
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.nodeSnapshots = nodeSnapshots
            self.numCacheNodes = numCacheNodes
            self.numNodeGroups = numNodeGroups
            self.port = port
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preferredOutpostArn = preferredOutpostArn
            self.replicationGroupDescription = replicationGroupDescription
            self.replicationGroupId = replicationGroupId
            self.snapshotName = snapshotName
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotSource = snapshotSource
            self.snapshotStatus = snapshotStatus
            self.snapshotWindow = snapshotWindow
            self.topicArn = topicArn
            self.vpcId = vpcId
        }
    }
}

public struct CopySnapshotOutput: Swift.Sendable {
    /// Represents a copy of an entire Valkey or Redis OSS cluster as of the time when the snapshot was taken.
    public var snapshot: ElastiCacheClientTypes.Snapshot?

    public init(
        snapshot: ElastiCacheClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

/// You already have a cluster with the given identifier.
public struct CacheClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheClusterAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of clusters per customer.
public struct ClusterQuotaForCustomerExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterQuotaForCustomerExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested cache node type is not available in the specified Availability Zone. For more information, see [InsufficientCacheClusterCapacity](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ErrorMessages.html#ErrorMessages.INSUFFICIENT_CACHE_CLUSTER_CAPACITY) in the ElastiCache User Guide.
public struct InsufficientCacheClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientCacheClusterCapacity" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The VPC network is in an invalid state.
public struct InvalidVPCNetworkStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidVPCNetworkStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache nodes in a single cluster.
public struct NodeQuotaForClusterExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NodeQuotaForClusterExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache nodes per customer.
public struct NodeQuotaForCustomerExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NodeQuotaForCustomerExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElastiCacheClientTypes {

    public enum AZMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case crossAz
        case singleAz
        case sdkUnknown(Swift.String)

        public static var allCases: [AZMode] {
            return [
                .crossAz,
                .singleAz
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .crossAz: return "cross-az"
            case .singleAz: return "single-az"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Specifies the destination, format and type of the logs.
    public struct LogDeliveryConfigurationRequest: Swift.Sendable {
        /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
        public var destinationDetails: ElastiCacheClientTypes.DestinationDetails?
        /// Specify either cloudwatch-logs or kinesis-firehose as the destination type.
        public var destinationType: ElastiCacheClientTypes.DestinationType?
        /// Specify if log delivery is enabled. Default true.
        public var enabled: Swift.Bool?
        /// Specifies either JSON or TEXT
        public var logFormat: ElastiCacheClientTypes.LogFormat?
        /// Refers to [slow-log](https://redis.io/commands/slowlog) or engine-log..
        public var logType: ElastiCacheClientTypes.LogType?

        public init(
            destinationDetails: ElastiCacheClientTypes.DestinationDetails? = nil,
            destinationType: ElastiCacheClientTypes.DestinationType? = nil,
            enabled: Swift.Bool? = nil,
            logFormat: ElastiCacheClientTypes.LogFormat? = nil,
            logType: ElastiCacheClientTypes.LogType? = nil
        )
        {
            self.destinationDetails = destinationDetails
            self.destinationType = destinationType
            self.enabled = enabled
            self.logFormat = logFormat
            self.logType = logType
        }
    }
}

extension ElastiCacheClientTypes {

    public enum OutpostMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case crossOutpost
        case singleOutpost
        case sdkUnknown(Swift.String)

        public static var allCases: [OutpostMode] {
            return [
                .crossOutpost,
                .singleOutpost
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .crossOutpost: return "cross-outpost"
            case .singleOutpost: return "single-outpost"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a CreateCacheCluster operation.
public struct CreateCacheClusterInput: Swift.Sendable {
    /// Reserved parameter. The password used to access a password protected server. Password constraints:
    ///
    /// * Must be only printable ASCII characters.
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length.
    ///
    /// * The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.
    ///
    ///
    /// For more information, see [AUTH password](http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.
    public var authToken: Swift.String?
    ///  If you are running Valkey 7.2 and above or Redis OSS engine version 6.0 and above, set this parameter to yes to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. This parameter is only supported for Memcached clusters. If the AZMode and PreferredAvailabilityZones are not specified, ElastiCache assumes single-az mode.
    public var azMode: ElastiCacheClientTypes.AZMode?
    /// The node group (shard) identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * A name must contain from 1 to 50 alphanumeric characters or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * A name cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var cacheClusterId: Swift.String?
    /// The compute and memory capacity of the nodes in the node group (shard). The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
    public var cacheNodeType: Swift.String?
    /// The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has cluster-enabled='yes' when creating a cluster.
    public var cacheParameterGroupName: Swift.String?
    /// A list of security group names to associate with this cluster. Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).
    public var cacheSecurityGroupNames: [Swift.String]?
    /// The name of the subnet group to be used for the cluster. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC). If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see [Subnets and Subnet Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
    public var cacheSubnetGroupName: Swift.String?
    /// The name of the cache engine to be used for this cluster. Valid values for this parameter are: memcached | redis
    public var engine: Swift.String?
    /// The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    public var engineVersion: Swift.String?
    /// The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
    public var ipDiscovery: ElastiCacheClientTypes.IpDiscovery?
    /// Specifies the destination, format and type of the logs.
    public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// Must be either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
    public var networkType: ElastiCacheClientTypes.NetworkType?
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent. The Amazon SNS topic owner must be the same as the cluster owner.
    public var notificationTopicArn: Swift.String?
    /// The initial number of cache nodes that the cluster has. For clusters running Valkey or Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40. If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at [http://aws.amazon.com/contact-us/elasticache-node-limit-request/](http://aws.amazon.com/contact-us/elasticache-node-limit-request/).
    public var numCacheNodes: Swift.Int?
    /// Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts.
    public var outpostMode: ElastiCacheClientTypes.OutpostMode?
    /// The port number on which each of the cache nodes accepts connections.
    public var port: Swift.Int?
    /// The EC2 Availability Zone in which the cluster is created. All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use PreferredAvailabilityZones. Default: System chosen Availability Zone.
    public var preferredAvailabilityZone: Swift.String?
    /// A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important. This option is only supported on Memcached. If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheNodes. If you want all the nodes in the same Availability Zone, use PreferredAvailabilityZone instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones.
    public var preferredAvailabilityZones: [Swift.String]?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
    public var preferredMaintenanceWindow: Swift.String?
    /// The outpost ARN in which the cache cluster is created.
    public var preferredOutpostArn: Swift.String?
    /// The outpost ARNs in which the cache cluster is created.
    public var preferredOutpostArns: [Swift.String]?
    /// The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group. If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones. This parameter is only valid if the Engine parameter is redis.
    public var replicationGroupId: Swift.String?
    /// One or more VPC security groups associated with the cluster. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).
    public var securityGroupIds: [Swift.String]?
    /// A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Valkey or Redis OSS RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas. This parameter is only valid if the Engine parameter is redis. Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    public var snapshotArns: [Swift.String]?
    /// The name of a Valkey or Redis OSS snapshot from which to restore data into the new node group (shard). The snapshot status changes to restoring while the new node group (shard) is being created. This parameter is only valid if the Engine parameter is redis.
    public var snapshotName: Swift.String?
    /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot taken today is retained for 5 days before being deleted. This parameter is only valid if the Engine parameter is redis. Default: 0 (i.e., automatic backups are disabled for this cache cluster).
    public var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range. This parameter is only valid if the Engine parameter is redis.
    public var snapshotWindow: Swift.String?
    /// A list of tags to be added to this resource.
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// A flag that enables in-transit encryption when set to true.
    public var transitEncryptionEnabled: Swift.Bool?

    public init(
        authToken: Swift.String? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        azMode: ElastiCacheClientTypes.AZMode? = nil,
        cacheClusterId: Swift.String? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        ipDiscovery: ElastiCacheClientTypes.IpDiscovery? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        networkType: ElastiCacheClientTypes.NetworkType? = nil,
        notificationTopicArn: Swift.String? = nil,
        numCacheNodes: Swift.Int? = nil,
        outpostMode: ElastiCacheClientTypes.OutpostMode? = nil,
        port: Swift.Int? = nil,
        preferredAvailabilityZone: Swift.String? = nil,
        preferredAvailabilityZones: [Swift.String]? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        preferredOutpostArn: Swift.String? = nil,
        preferredOutpostArns: [Swift.String]? = nil,
        replicationGroupId: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotArns: [Swift.String]? = nil,
        snapshotName: Swift.String? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        transitEncryptionEnabled: Swift.Bool? = nil
    )
    {
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.azMode = azMode
        self.cacheClusterId = cacheClusterId
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.ipDiscovery = ipDiscovery
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.networkType = networkType
        self.notificationTopicArn = notificationTopicArn
        self.numCacheNodes = numCacheNodes
        self.outpostMode = outpostMode
        self.port = port
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredAvailabilityZones = preferredAvailabilityZones
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.preferredOutpostArns = preferredOutpostArns
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
        self.transitEncryptionEnabled = transitEncryptionEnabled
    }
}

extension ElastiCacheClientTypes {

    /// Represents an individual cache node within a cluster. Each cache node runs its own instance of the cluster's protocol-compliant caching software - either Memcached, Valkey or Redis OSS. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
    public struct CacheNode: Swift.Sendable {
        /// The date and time when the cache node was created.
        public var cacheNodeCreateTime: Foundation.Date?
        /// The cache node identifier. A node ID is a numeric identifier (0001, 0002, etc.). The combination of cluster ID and node ID uniquely identifies every cache node used in a customer's Amazon account.
        public var cacheNodeId: Swift.String?
        /// The current state of this cache node, one of the following values: available, creating, rebooting, or deleting.
        public var cacheNodeStatus: Swift.String?
        /// The Availability Zone where this node was created and now resides.
        public var customerAvailabilityZone: Swift.String?
        /// The customer outpost ARN of the cache node.
        public var customerOutpostArn: Swift.String?
        /// The hostname for connecting to this cache node.
        public var endpoint: ElastiCacheClientTypes.Endpoint?
        /// The status of the parameter group applied to this cache node.
        public var parameterGroupStatus: Swift.String?
        /// The ID of the primary node to which this read replica node is synchronized. If this field is empty, this node is not associated with a primary cluster.
        public var sourceCacheNodeId: Swift.String?

        public init(
            cacheNodeCreateTime: Foundation.Date? = nil,
            cacheNodeId: Swift.String? = nil,
            cacheNodeStatus: Swift.String? = nil,
            customerAvailabilityZone: Swift.String? = nil,
            customerOutpostArn: Swift.String? = nil,
            endpoint: ElastiCacheClientTypes.Endpoint? = nil,
            parameterGroupStatus: Swift.String? = nil,
            sourceCacheNodeId: Swift.String? = nil
        )
        {
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.cacheNodeId = cacheNodeId
            self.cacheNodeStatus = cacheNodeStatus
            self.customerAvailabilityZone = customerAvailabilityZone
            self.customerOutpostArn = customerOutpostArn
            self.endpoint = endpoint
            self.parameterGroupStatus = parameterGroupStatus
            self.sourceCacheNodeId = sourceCacheNodeId
        }
    }
}

extension ElastiCacheClientTypes {

    /// Status of the cache parameter group.
    public struct CacheParameterGroupStatus: Swift.Sendable {
        /// A list of the cache node IDs which need to be rebooted for parameter changes to be applied. A node ID is a numeric identifier (0001, 0002, etc.).
        public var cacheNodeIdsToReboot: [Swift.String]?
        /// The name of the cache parameter group.
        public var cacheParameterGroupName: Swift.String?
        /// The status of parameter updates.
        public var parameterApplyStatus: Swift.String?

        public init(
            cacheNodeIdsToReboot: [Swift.String]? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil
        )
        {
            self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
            self.cacheParameterGroupName = cacheParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents a cluster's status within a particular cache security group.
    public struct CacheSecurityGroupMembership: Swift.Sendable {
        /// The name of the cache security group.
        public var cacheSecurityGroupName: Swift.String?
        /// The membership status in the cache security group. The status changes when a cache security group is modified, or when the cache security groups assigned to a cluster are modified.
        public var status: Swift.String?

        public init(
            cacheSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.status = status
        }
    }
}

extension ElastiCacheClientTypes {

    /// Describes a notification topic and its status. Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS).
    public struct NotificationConfiguration: Swift.Sendable {
        /// The Amazon Resource Name (ARN) that identifies the topic.
        public var topicArn: Swift.String?
        /// The current state of the topic.
        public var topicStatus: Swift.String?

        public init(
            topicArn: Swift.String? = nil,
            topicStatus: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
            self.topicStatus = topicStatus
        }
    }
}

extension ElastiCacheClientTypes {

    /// A group of settings that are applied to the cluster in the future, or that are currently being applied.
    public struct PendingModifiedValues: Swift.Sendable {
        /// The auth token status
        public var authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus?
        /// A list of cache node IDs that are being removed (or will be removed) from the cluster. A node ID is a 4-digit numeric identifier (0001, 0002, etc.).
        public var cacheNodeIdsToRemove: [Swift.String]?
        /// The cache node type that this cluster or replication group is scaled to.
        public var cacheNodeType: Swift.String?
        /// The new cache engine version that the cluster runs.
        public var engineVersion: Swift.String?
        /// The log delivery configurations being modified
        public var logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]?
        /// The new number of cache nodes for the cluster. For clusters running Valkey or Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        public var numCacheNodes: Swift.Int?
        /// A flag that enables in-transit encryption when set to true.
        public var transitEncryptionEnabled: Swift.Bool?
        /// A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.
        public var transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode?

        public init(
            authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus? = nil,
            cacheNodeIdsToRemove: [Swift.String]? = nil,
            cacheNodeType: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil,
            numCacheNodes: Swift.Int? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil,
            transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode? = nil
        )
        {
            self.authTokenStatus = authTokenStatus
            self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
            self.cacheNodeType = cacheNodeType
            self.engineVersion = engineVersion
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.numCacheNodes = numCacheNodes
            self.transitEncryptionEnabled = transitEncryptionEnabled
            self.transitEncryptionMode = transitEncryptionMode
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents a single cache security group and its status.
    public struct SecurityGroupMembership: Swift.Sendable {
        /// The identifier of the cache security group.
        public var securityGroupId: Swift.String?
        /// The status of the cache security group membership. The status changes whenever a cache security group is modified, or when the cache security groups assigned to a cluster are modified.
        public var status: Swift.String?

        public init(
            securityGroupId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.securityGroupId = securityGroupId
            self.status = status
        }
    }
}

extension ElastiCacheClientTypes {

    /// Contains all of the attributes of a specific cluster.
    public struct CacheCluster: Swift.Sendable {
        /// The ARN (Amazon Resource Name) of the cache cluster.
        public var arn: Swift.String?
        /// A flag that enables encryption at-rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the cluster is created. To enable at-rest encryption on a cluster you must set AtRestEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false
        public var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Valkey or Redis OSS commands. Default: false
        public var authTokenEnabled: Swift.Bool?
        /// The date the auth token was last modified
        public var authTokenLastModifiedDate: Foundation.Date?
        ///  If you are running Valkey or Redis OSS engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        public var autoMinorVersionUpgrade: Swift.Bool?
        /// The date and time when the cluster was created.
        public var cacheClusterCreateTime: Foundation.Date?
        /// The user-supplied identifier of the cluster. This identifier is a unique key that identifies a cluster.
        public var cacheClusterId: Swift.String?
        /// The current state of this cluster, one of the following values: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cluster nodes, restore-failed, or snapshotting.
        public var cacheClusterStatus: Swift.String?
        /// The name of the compute and memory capacity node type for the cluster. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// A list of cache nodes that are members of the cluster.
        public var cacheNodes: [ElastiCacheClientTypes.CacheNode]?
        /// Status of the cache parameter group.
        public var cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroupStatus?
        /// A list of cache security group elements, composed of name and status sub-elements.
        public var cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroupMembership]?
        /// The name of the cache subnet group associated with the cluster.
        public var cacheSubnetGroupName: Swift.String?
        /// The URL of the web page where you can download the latest ElastiCache client library.
        public var clientDownloadLandingPage: Swift.String?
        /// Represents a Memcached cluster endpoint which can be used by an application to connect to any node in the cluster. The configuration endpoint will always have .cfg in it. Example: mem-3.9dvc4r.cfg.usw2.cache.amazonaws.com:11211
        public var configurationEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The name of the cache engine (memcached or redis) to be used for this cluster.
        public var engine: Swift.String?
        /// The version of the cache engine that is used in this cluster.
        public var engineVersion: Swift.String?
        /// The network type associated with the cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
        public var ipDiscovery: ElastiCacheClientTypes.IpDiscovery?
        /// Returns the destination, format and type of the logs.
        public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]?
        /// Must be either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
        public var networkType: ElastiCacheClientTypes.NetworkType?
        /// Describes a notification topic and its status. Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS).
        public var notificationConfiguration: ElastiCacheClientTypes.NotificationConfiguration?
        /// The number of cache nodes in the cluster. For clusters running Valkey or Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        public var numCacheNodes: Swift.Int?
        /// A group of settings that are applied to the cluster in the future, or that are currently being applied.
        public var pendingModifiedValues: ElastiCacheClientTypes.PendingModifiedValues?
        /// The name of the Availability Zone in which the cluster is located or "Multiple" if the cache nodes are located in different Availability Zones.
        public var preferredAvailabilityZone: Swift.String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
        ///
        /// * sun
        ///
        /// * mon
        ///
        /// * tue
        ///
        /// * wed
        ///
        /// * thu
        ///
        /// * fri
        ///
        /// * sat
        ///
        ///
        /// Example: sun:23:00-mon:01:30
        public var preferredMaintenanceWindow: Swift.String?
        /// The outpost ARN in which the cache cluster is created.
        public var preferredOutpostArn: Swift.String?
        /// The replication group to which this cluster belongs. If this field is empty, the cluster is not associated with any replication group.
        public var replicationGroupId: Swift.String?
        /// A boolean value indicating whether log delivery is enabled for the replication group.
        public var replicationGroupLogDeliveryEnabled: Swift.Bool?
        /// A list of VPC Security Groups associated with the cluster.
        public var securityGroups: [ElastiCacheClientTypes.SecurityGroupMembership]?
        /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public var snapshotRetentionLimit: Swift.Int?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. Example: 05:00-09:00
        public var snapshotWindow: Swift.String?
        /// A flag that enables in-transit encryption when set to true. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false
        public var transitEncryptionEnabled: Swift.Bool?
        /// A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.
        public var transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode?

        public init(
            arn: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            authTokenLastModifiedDate: Foundation.Date? = nil,
            autoMinorVersionUpgrade: Swift.Bool? = nil,
            cacheClusterCreateTime: Foundation.Date? = nil,
            cacheClusterId: Swift.String? = nil,
            cacheClusterStatus: Swift.String? = nil,
            cacheNodeType: Swift.String? = nil,
            cacheNodes: [ElastiCacheClientTypes.CacheNode]? = nil,
            cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroupStatus? = nil,
            cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroupMembership]? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            clientDownloadLandingPage: Swift.String? = nil,
            configurationEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            ipDiscovery: ElastiCacheClientTypes.IpDiscovery? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil,
            networkType: ElastiCacheClientTypes.NetworkType? = nil,
            notificationConfiguration: ElastiCacheClientTypes.NotificationConfiguration? = nil,
            numCacheNodes: Swift.Int? = nil,
            pendingModifiedValues: ElastiCacheClientTypes.PendingModifiedValues? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            replicationGroupLogDeliveryEnabled: Swift.Bool? = nil,
            securityGroups: [ElastiCacheClientTypes.SecurityGroupMembership]? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotWindow: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil,
            transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode? = nil
        )
        {
            self.arn = arn
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.authTokenLastModifiedDate = authTokenLastModifiedDate
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheClusterStatus = cacheClusterStatus
            self.cacheNodeType = cacheNodeType
            self.cacheNodes = cacheNodes
            self.cacheParameterGroup = cacheParameterGroup
            self.cacheSecurityGroups = cacheSecurityGroups
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.clientDownloadLandingPage = clientDownloadLandingPage
            self.configurationEndpoint = configurationEndpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.ipDiscovery = ipDiscovery
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.networkType = networkType
            self.notificationConfiguration = notificationConfiguration
            self.numCacheNodes = numCacheNodes
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preferredOutpostArn = preferredOutpostArn
            self.replicationGroupId = replicationGroupId
            self.replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabled
            self.securityGroups = securityGroups
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotWindow = snapshotWindow
            self.transitEncryptionEnabled = transitEncryptionEnabled
            self.transitEncryptionMode = transitEncryptionMode
        }
    }
}

public struct CreateCacheClusterOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific cluster.
    public var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init(
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

/// A cache parameter group with the requested name already exists.
public struct CacheParameterGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheParameterGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the maximum number of cache security groups.
public struct CacheParameterGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheParameterGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The current state of the cache parameter group does not allow the requested operation to occur.
public struct InvalidCacheParameterGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCacheParameterGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateCacheParameterGroup operation.
public struct CreateCacheParameterGroupInput: Swift.Sendable {
    /// The name of the cache parameter group family that the cache parameter group can be used with. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis7
    /// This member is required.
    public var cacheParameterGroupFamily: Swift.String?
    /// A user-specified name for the cache parameter group.
    /// This member is required.
    public var cacheParameterGroupName: Swift.String?
    /// A user-specified description for the cache parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        cacheParameterGroupFamily: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.cacheParameterGroupName = cacheParameterGroupName
        self.description = description
        self.tags = tags
    }
}

extension ElastiCacheClientTypes {

    /// Represents the output of a CreateCacheParameterGroup operation.
    public struct CacheParameterGroup: Swift.Sendable {
        /// The ARN (Amazon Resource Name) of the cache parameter group.
        public var arn: Swift.String?
        /// The name of the cache parameter group family that this cache parameter group is compatible with. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis7
        public var cacheParameterGroupFamily: Swift.String?
        /// The name of the cache parameter group.
        public var cacheParameterGroupName: Swift.String?
        /// The description for this cache parameter group.
        public var description: Swift.String?
        /// Indicates whether the parameter group is associated with a Global datastore
        public var isGlobal: Swift.Bool?

        public init(
            arn: Swift.String? = nil,
            cacheParameterGroupFamily: Swift.String? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            isGlobal: Swift.Bool? = nil
        )
        {
            self.arn = arn
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.cacheParameterGroupName = cacheParameterGroupName
            self.description = description
            self.isGlobal = isGlobal
        }
    }
}

public struct CreateCacheParameterGroupOutput: Swift.Sendable {
    /// Represents the output of a CreateCacheParameterGroup operation.
    public var cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroup?

    public init(
        cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroup? = nil
    )
    {
        self.cacheParameterGroup = cacheParameterGroup
    }
}

/// A cache security group with the specified name already exists.
public struct CacheSecurityGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSecurityGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache security groups.
public struct CacheSecurityGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QuotaExceeded.CacheSecurityGroup" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateCacheSecurityGroup operation.
public struct CreateCacheSecurityGroupInput: Swift.Sendable {
    /// A name for the cache security group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default". Example: mysecuritygroup
    /// This member is required.
    public var cacheSecurityGroupName: Swift.String?
    /// A description for the cache security group.
    /// This member is required.
    public var description: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        cacheSecurityGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.description = description
        self.tags = tags
    }
}

public struct CreateCacheSecurityGroupOutput: Swift.Sendable {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    public var cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?

    public init(
        cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

/// The requested cache subnet group name is already in use by an existing cache subnet group.
public struct CacheSubnetGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSubnetGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache subnet groups.
public struct CacheSubnetGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSubnetGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of subnets in a cache subnet group.
public struct CacheSubnetQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSubnetQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid subnet identifier was specified.
public struct InvalidSubnet: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// At least one subnet ID does not match the other subnet IDs. This mismatch typically occurs when a user sets one subnet ID to a regional Availability Zone and a different one to an outpost. Or when a user sets the subnet ID to an Outpost when not subscribed on this service.
public struct SubnetNotAllowedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetNotAllowedFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateCacheSubnetGroup operation.
public struct CreateCacheSubnetGroupInput: Swift.Sendable {
    /// A description for the cache subnet group.
    /// This member is required.
    public var cacheSubnetGroupDescription: Swift.String?
    /// A name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup
    /// This member is required.
    public var cacheSubnetGroupName: Swift.String?
    /// A list of VPC subnet IDs for the cache subnet group.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        cacheSubnetGroupDescription: Swift.String? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension ElastiCacheClientTypes {

    /// Describes an Availability Zone in which the cluster is launched.
    public struct AvailabilityZone: Swift.Sendable {
        /// The name of the Availability Zone.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension ElastiCacheClientTypes {

    /// The ID of the outpost subnet.
    public struct SubnetOutpost: Swift.Sendable {
        /// The outpost ARN of the subnet.
        public var subnetOutpostArn: Swift.String?

        public init(
            subnetOutpostArn: Swift.String? = nil
        )
        {
            self.subnetOutpostArn = subnetOutpostArn
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents the subnet associated with a cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with ElastiCache.
    public struct Subnet: Swift.Sendable {
        /// The Availability Zone associated with the subnet.
        public var subnetAvailabilityZone: ElastiCacheClientTypes.AvailabilityZone?
        /// The unique identifier for the subnet.
        public var subnetIdentifier: Swift.String?
        /// The outpost ARN of the subnet.
        public var subnetOutpost: ElastiCacheClientTypes.SubnetOutpost?
        /// Either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
        public var supportedNetworkTypes: [ElastiCacheClientTypes.NetworkType]?

        public init(
            subnetAvailabilityZone: ElastiCacheClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetOutpost: ElastiCacheClientTypes.SubnetOutpost? = nil,
            supportedNetworkTypes: [ElastiCacheClientTypes.NetworkType]? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetOutpost = subnetOutpost
            self.supportedNetworkTypes = supportedNetworkTypes
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents the output of one of the following operations:
    ///
    /// * CreateCacheSubnetGroup
    ///
    /// * ModifyCacheSubnetGroup
    public struct CacheSubnetGroup: Swift.Sendable {
        /// The ARN (Amazon Resource Name) of the cache subnet group.
        public var arn: Swift.String?
        /// The description of the cache subnet group.
        public var cacheSubnetGroupDescription: Swift.String?
        /// The name of the cache subnet group.
        public var cacheSubnetGroupName: Swift.String?
        /// A list of subnets associated with the cache subnet group.
        public var subnets: [ElastiCacheClientTypes.Subnet]?
        /// Either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
        public var supportedNetworkTypes: [ElastiCacheClientTypes.NetworkType]?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group.
        public var vpcId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            cacheSubnetGroupDescription: Swift.String? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            subnets: [ElastiCacheClientTypes.Subnet]? = nil,
            supportedNetworkTypes: [ElastiCacheClientTypes.NetworkType]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.subnets = subnets
            self.supportedNetworkTypes = supportedNetworkTypes
            self.vpcId = vpcId
        }
    }
}

public struct CreateCacheSubnetGroupOutput: Swift.Sendable {
    /// Represents the output of one of the following operations:
    ///
    /// * CreateCacheSubnetGroup
    ///
    /// * ModifyCacheSubnetGroup
    public var cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup?

    public init(
        cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup? = nil
    )
    {
        self.cacheSubnetGroup = cacheSubnetGroup
    }
}

/// The Global datastore name already exists.
public struct GlobalReplicationGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalReplicationGroupAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateGlobalReplicationGroupInput: Swift.Sendable {
    /// Provides details of the Global datastore
    public var globalReplicationGroupDescription: Swift.String?
    /// The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. For a full list of Amazon Regions and their respective Global datastore iD prefixes, see [Using the Amazon CLI with Global datastores ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html).
    /// This member is required.
    public var globalReplicationGroupIdSuffix: Swift.String?
    /// The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.
    /// This member is required.
    public var primaryReplicationGroupId: Swift.String?

    public init(
        globalReplicationGroupDescription: Swift.String? = nil,
        globalReplicationGroupIdSuffix: Swift.String? = nil,
        primaryReplicationGroupId: Swift.String? = nil
    )
    {
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupIdSuffix = globalReplicationGroupIdSuffix
        self.primaryReplicationGroupId = primaryReplicationGroupId
    }
}

extension ElastiCacheClientTypes {

    /// Indicates the slot configuration and global identifier for a slice group.
    public struct GlobalNodeGroup: Swift.Sendable {
        /// The name of the global node group
        public var globalNodeGroupId: Swift.String?
        /// The keyspace for this node group
        public var slots: Swift.String?

        public init(
            globalNodeGroupId: Swift.String? = nil,
            slots: Swift.String? = nil
        )
        {
            self.globalNodeGroupId = globalNodeGroupId
            self.slots = slots
        }
    }
}

extension ElastiCacheClientTypes {

    /// A member of a Global datastore. It contains the Replication Group Id, the Amazon region and the role of the replication group.
    public struct GlobalReplicationGroupMember: Swift.Sendable {
        /// Indicates whether automatic failover is enabled for the replication group.
        public var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The replication group id of the Global datastore member.
        public var replicationGroupId: Swift.String?
        /// The Amazon region of the Global datastore member.
        public var replicationGroupRegion: Swift.String?
        /// Indicates the role of the replication group, primary or secondary.
        public var role: Swift.String?
        /// The status of the membership of the replication group.
        public var status: Swift.String?

        public init(
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            replicationGroupId: Swift.String? = nil,
            replicationGroupRegion: Swift.String? = nil,
            role: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.automaticFailover = automaticFailover
            self.replicationGroupId = replicationGroupId
            self.replicationGroupRegion = replicationGroupRegion
            self.role = role
            self.status = status
        }
    }
}

extension ElastiCacheClientTypes {

    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public struct GlobalReplicationGroup: Swift.Sendable {
        /// The ARN (Amazon Resource Name) of the global replication group.
        public var arn: Swift.String?
        /// A flag that enables encryption at rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later.
        public var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Valkey or Redis OSS commands. Default: false
        public var authTokenEnabled: Swift.Bool?
        /// The cache node type of the Global datastore
        public var cacheNodeType: Swift.String?
        /// A flag that indicates whether the Global datastore is cluster enabled.
        public var clusterEnabled: Swift.Bool?
        /// The ElastiCache engine. For Valkey or Redis OSS only.
        public var engine: Swift.String?
        /// The ElastiCache engine version.
        public var engineVersion: Swift.String?
        /// Indicates the slot configuration and global identifier for each slice group.
        public var globalNodeGroups: [ElastiCacheClientTypes.GlobalNodeGroup]?
        /// The optional description of the Global datastore
        public var globalReplicationGroupDescription: Swift.String?
        /// The name of the Global datastore
        public var globalReplicationGroupId: Swift.String?
        /// The replication groups that comprise the Global datastore.
        public var members: [ElastiCacheClientTypes.GlobalReplicationGroupMember]?
        /// The status of the Global datastore
        public var status: Swift.String?
        /// A flag that enables in-transit encryption when set to true. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later.
        public var transitEncryptionEnabled: Swift.Bool?

        public init(
            arn: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            cacheNodeType: Swift.String? = nil,
            clusterEnabled: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            globalNodeGroups: [ElastiCacheClientTypes.GlobalNodeGroup]? = nil,
            globalReplicationGroupDescription: Swift.String? = nil,
            globalReplicationGroupId: Swift.String? = nil,
            members: [ElastiCacheClientTypes.GlobalReplicationGroupMember]? = nil,
            status: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil
        )
        {
            self.arn = arn
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.cacheNodeType = cacheNodeType
            self.clusterEnabled = clusterEnabled
            self.engine = engine
            self.engineVersion = engineVersion
            self.globalNodeGroups = globalNodeGroups
            self.globalReplicationGroupDescription = globalReplicationGroupDescription
            self.globalReplicationGroupId = globalReplicationGroupId
            self.members = members
            self.status = status
            self.transitEncryptionEnabled = transitEncryptionEnabled
        }
    }
}

public struct CreateGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

/// The Global datastore does not exist
public struct GlobalReplicationGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalReplicationGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested cluster is not in the available state.
public struct InvalidCacheClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCacheClusterState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Global datastore is not available or in primary-only state.
public struct InvalidGlobalReplicationGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGlobalReplicationGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The user group is not in an active state.
public struct InvalidUserGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUserGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the maximum allowed number of node groups (shards) in a single replication group. The default maximum is 90
public struct NodeGroupsPerReplicationGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NodeGroupsPerReplicationGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified replication group already exists.
public struct ReplicationGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReplicationGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateReplicationGroup operation.
public struct CreateReplicationGroupInput: Swift.Sendable {
    /// A flag that enables encryption at rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false
    public var atRestEncryptionEnabled: Swift.Bool?
    /// Reserved parameter. The password used to access a password protected server. AuthToken can be specified only on replication groups where TransitEncryptionEnabled is true. For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup. Password constraints:
    ///
    /// * Must be only printable ASCII characters.
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length.
    ///
    /// * The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.
    ///
    ///
    /// For more information, see [AUTH password](http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.
    public var authToken: Swift.String?
    ///  If you are running Valkey 7.2 and above or Redis OSS engine version 6.0 and above, set this parameter to yes to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails. AutomaticFailoverEnabled must be enabled for Valkey or Redis OSS (cluster mode enabled) replication groups. Default: false
    public var automaticFailoverEnabled: Swift.Bool?
    /// The compute and memory capacity of the nodes in the node group (shard). The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
    public var cacheNodeType: Swift.String?
    /// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. If you are running Valkey or Redis OSS version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name.
    ///
    /// * To create a Valkey or Redis OSS (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2.
    ///
    /// * To create a Valkey or Redis OSS (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.
    public var cacheParameterGroupName: Swift.String?
    /// A list of cache security group names to associate with this replication group.
    public var cacheSecurityGroupNames: [Swift.String]?
    /// The name of the cache subnet group to be used for the replication group. If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see [Subnets and Subnet Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
    public var cacheSubnetGroupName: Swift.String?
    /// Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Valkey or Redis OSS clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Valkey or Redis OSS clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.
    public var clusterMode: ElastiCacheClientTypes.ClusterMode?
    /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
    public var dataTieringEnabled: Swift.Bool?
    /// The name of the cache engine to be used for the clusters in this replication group. The value must be set to Redis.
    public var engine: Swift.String?
    /// The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    public var engineVersion: Swift.String?
    /// The name of the Global datastore
    public var globalReplicationGroupId: Swift.String?
    /// The network type you choose when creating a replication group, either ipv4 | ipv6. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
    public var ipDiscovery: ElastiCacheClientTypes.IpDiscovery?
    /// The ID of the KMS key used to encrypt the disk in the cluster.
    public var kmsKeyId: Swift.String?
    /// Specifies the destination, format and type of the logs.
    public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see [Minimizing Downtime: Multi-AZ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html).
    public var multiAZEnabled: Swift.Bool?
    /// Must be either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
    public var networkType: ElastiCacheClientTypes.NetworkType?
    /// A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount, and Slots. If you're creating a Valkey or Redis OSS (cluster mode disabled) or a Valkey or Redis OSS (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Valkey or Redis OSS (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.
    public var nodeGroupConfiguration: [ElastiCacheClientTypes.NodeGroupConfiguration]?
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent. The Amazon SNS topic owner must be the same as the cluster owner.
    public var notificationTopicArn: Swift.String?
    /// The number of clusters this replication group initially has. This parameter is not used if there is more than one node group (shard). You should use ReplicasPerNodeGroup instead. If AutomaticFailoverEnabled is true, the value of this parameter must be at least 2. If AutomaticFailoverEnabled is false you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6. The maximum permitted value for NumCacheClusters is 6 (1 primary plus 5 replicas).
    public var numCacheClusters: Swift.Int?
    /// An optional parameter that specifies the number of node groups (shards) for this Valkey or Redis OSS (cluster mode enabled) replication group. For Valkey or Redis OSS (cluster mode disabled) either omit this parameter or set it to 1. Default: 1
    public var numNodeGroups: Swift.Int?
    /// The port number on which each member of the replication group accepts connections.
    public var port: Swift.Int?
    /// A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list. This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfiguration instead. If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheClusters. Default: system chosen Availability Zones.
    public var preferredCacheClusterAZs: [Swift.String]?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    ///
    /// * sun
    ///
    /// * mon
    ///
    /// * tue
    ///
    /// * wed
    ///
    /// * thu
    ///
    /// * fri
    ///
    /// * sat
    ///
    ///
    /// Example: sun:23:00-mon:01:30
    public var preferredMaintenanceWindow: Swift.String?
    /// The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of available. This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup is specified.
    public var primaryClusterId: Swift.String?
    /// An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
    public var replicasPerNodeGroup: Swift.Int?
    /// A user-created description for the replication group.
    /// This member is required.
    public var replicationGroupDescription: Swift.String?
    /// The replication group identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * A name must contain from 1 to 40 alphanumeric characters or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * A name cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var replicationGroupId: Swift.String?
    /// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).
    public var securityGroupIds: [Swift.String]?
    /// The name of the snapshot used to create a replication group. Available for Valkey, Redis OSS only.
    public var serverlessCacheSnapshotName: Swift.String?
    /// A list of Amazon Resource Names (ARN) that uniquely identify the Valkey or Redis OSS RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter NumNodeGroups or the number of node groups configured by NodeGroupConfiguration regardless of the number of ARNs specified here. Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    public var snapshotArns: [Swift.String]?
    /// The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.
    public var snapshotName: Swift.String?
    /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. Default: 0 (i.e., automatic backups are disabled for this cluster).
    public var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    public var snapshotWindow: Swift.String?
    /// A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue. Tags on replication groups will be replicated to all nodes.
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// A flag that enables in-transit encryption when set to true. This parameter is valid only if the Engine parameter is redis, the EngineVersion parameter is 3.2.6, 4.x or later, and the cluster is being created in an Amazon VPC. If you enable in-transit encryption, you must also specify a value for CacheSubnetGroup. Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.
    public var transitEncryptionEnabled: Swift.Bool?
    /// A setting that allows you to migrate your clients to use in-transit encryption, with no downtime. When setting TransitEncryptionEnabled to true, you can set your TransitEncryptionMode to preferred in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Valkey or Redis OSS clients to use encrypted connections you can modify the value to required to allow encrypted connections only. Setting TransitEncryptionMode to required is a two-step process that requires you to first set the TransitEncryptionMode to preferred, after that you can set TransitEncryptionMode to required. This process will not trigger the replacement of the replication group.
    public var transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode?
    /// The user group to associate with the replication group.
    public var userGroupIds: [Swift.String]?

    public init(
        atRestEncryptionEnabled: Swift.Bool? = nil,
        authToken: Swift.String? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        automaticFailoverEnabled: Swift.Bool? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        clusterMode: ElastiCacheClientTypes.ClusterMode? = nil,
        dataTieringEnabled: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalReplicationGroupId: Swift.String? = nil,
        ipDiscovery: ElastiCacheClientTypes.IpDiscovery? = nil,
        kmsKeyId: Swift.String? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Swift.Bool? = nil,
        networkType: ElastiCacheClientTypes.NetworkType? = nil,
        nodeGroupConfiguration: [ElastiCacheClientTypes.NodeGroupConfiguration]? = nil,
        notificationTopicArn: Swift.String? = nil,
        numCacheClusters: Swift.Int? = nil,
        numNodeGroups: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredCacheClusterAZs: [Swift.String]? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        primaryClusterId: Swift.String? = nil,
        replicasPerNodeGroup: Swift.Int? = nil,
        replicationGroupDescription: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        serverlessCacheSnapshotName: Swift.String? = nil,
        snapshotArns: [Swift.String]? = nil,
        snapshotName: Swift.String? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        transitEncryptionEnabled: Swift.Bool? = nil,
        transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode? = nil,
        userGroupIds: [Swift.String]? = nil
    )
    {
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.clusterMode = clusterMode
        self.dataTieringEnabled = dataTieringEnabled
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalReplicationGroupId = globalReplicationGroupId
        self.ipDiscovery = ipDiscovery
        self.kmsKeyId = kmsKeyId
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.networkType = networkType
        self.nodeGroupConfiguration = nodeGroupConfiguration
        self.notificationTopicArn = notificationTopicArn
        self.numCacheClusters = numCacheClusters
        self.numNodeGroups = numNodeGroups
        self.port = port
        self.preferredCacheClusterAZs = preferredCacheClusterAZs
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.replicasPerNodeGroup = replicasPerNodeGroup
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.serverlessCacheSnapshotName = serverlessCacheSnapshotName
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
        self.transitEncryptionEnabled = transitEncryptionEnabled
        self.transitEncryptionMode = transitEncryptionMode
        self.userGroupIds = userGroupIds
    }
}

public struct CreateReplicationGroupOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

/// You must enter valid credentials.
public struct InvalidCredentialsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCredentialsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A serverless cache with this name already exists.
public struct ServerlessCacheAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerlessCacheAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of serverless caches exceeds the customer quota.
public struct ServerlessCacheQuotaForCustomerExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerlessCacheQuotaForCustomerExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElastiCacheClientTypes {

    public enum DataStorageUnit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gb
        case sdkUnknown(Swift.String)

        public static var allCases: [DataStorageUnit] {
            return [
                .gb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gb: return "GB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The data storage limit.
    public struct DataStorage: Swift.Sendable {
        /// The upper limit for data storage the cache is set to use.
        public var maximum: Swift.Int?
        /// The lower limit for data storage the cache is set to use.
        public var minimum: Swift.Int?
        /// The unit that the storage is measured in, in GB.
        /// This member is required.
        public var unit: ElastiCacheClientTypes.DataStorageUnit?

        public init(
            maximum: Swift.Int? = nil,
            minimum: Swift.Int? = nil,
            unit: ElastiCacheClientTypes.DataStorageUnit? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
            self.unit = unit
        }
    }
}

extension ElastiCacheClientTypes {

    /// The configuration for the number of ElastiCache Processing Units (ECPU) the cache can consume per second.
    public struct ECPUPerSecond: Swift.Sendable {
        /// The configuration for the maximum number of ECPUs the cache can consume per second.
        public var maximum: Swift.Int?
        /// The configuration for the minimum number of ECPUs the cache should be able consume per second.
        public var minimum: Swift.Int?

        public init(
            maximum: Swift.Int? = nil,
            minimum: Swift.Int? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
        }
    }
}

extension ElastiCacheClientTypes {

    /// The usage limits for storage and ElastiCache Processing Units for the cache.
    public struct CacheUsageLimits: Swift.Sendable {
        /// The maximum data storage limit in the cache, expressed in Gigabytes.
        public var dataStorage: ElastiCacheClientTypes.DataStorage?
        /// The configuration for the number of ElastiCache Processing Units (ECPU) the cache can consume per second.
        public var ecpuPerSecond: ElastiCacheClientTypes.ECPUPerSecond?

        public init(
            dataStorage: ElastiCacheClientTypes.DataStorage? = nil,
            ecpuPerSecond: ElastiCacheClientTypes.ECPUPerSecond? = nil
        )
        {
            self.dataStorage = dataStorage
            self.ecpuPerSecond = ecpuPerSecond
        }
    }
}

public struct CreateServerlessCacheInput: Swift.Sendable {
    /// Sets the cache usage limits for storage and ElastiCache Processing Units for the cache.
    public var cacheUsageLimits: ElastiCacheClientTypes.CacheUsageLimits?
    /// The daily time that snapshots will be created from the new serverless cache. By default this number is populated with 0, i.e. no snapshots will be created on an automatic daily basis. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var dailySnapshotTime: Swift.String?
    /// User-provided description for the serverless cache. The default is NULL, i.e. if no description is provided then an empty string will be returned. The maximum length is 255 characters.
    public var description: Swift.String?
    /// The name of the cache engine to be used for creating the serverless cache.
    /// This member is required.
    public var engine: Swift.String?
    /// ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
    public var kmsKeyId: Swift.String?
    /// The version of the cache engine that will be used to create the serverless cache.
    public var majorEngineVersion: Swift.String?
    /// A list of the one or more VPC security groups to be associated with the serverless cache. The security group will authorize traffic access for the VPC end-point (private-link). If no other information is given this will be the VPC’s Default Security Group that is associated with the cluster VPC end-point.
    public var securityGroupIds: [Swift.String]?
    /// User-provided identifier for the serverless cache. This parameter is stored as a lowercase string.
    /// This member is required.
    public var serverlessCacheName: Swift.String?
    /// The ARN(s) of the snapshot that the new serverless cache will be created from. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var snapshotArnsToRestore: [Swift.String]?
    /// The number of snapshots that will be retained for the serverless cache that is being created. As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var snapshotRetentionLimit: Swift.Int?
    /// A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed. All the subnetIds must belong to the same VPC.
    public var subnetIds: [Swift.String]?
    /// The list of tags (key, value) pairs to be added to the serverless cache resource. Default is NULL.
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// The identifier of the UserGroup to be associated with the serverless cache. Available for Valkey and Redis OSS only. Default is NULL.
    public var userGroupId: Swift.String?

    public init(
        cacheUsageLimits: ElastiCacheClientTypes.CacheUsageLimits? = nil,
        dailySnapshotTime: Swift.String? = nil,
        description: Swift.String? = nil,
        engine: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        majorEngineVersion: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        serverlessCacheName: Swift.String? = nil,
        snapshotArnsToRestore: [Swift.String]? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        userGroupId: Swift.String? = nil
    )
    {
        self.cacheUsageLimits = cacheUsageLimits
        self.dailySnapshotTime = dailySnapshotTime
        self.description = description
        self.engine = engine
        self.kmsKeyId = kmsKeyId
        self.majorEngineVersion = majorEngineVersion
        self.securityGroupIds = securityGroupIds
        self.serverlessCacheName = serverlessCacheName
        self.snapshotArnsToRestore = snapshotArnsToRestore
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.subnetIds = subnetIds
        self.tags = tags
        self.userGroupId = userGroupId
    }
}

extension ElastiCacheClientTypes {

    /// The resource representing a serverless cache.
    public struct ServerlessCache: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the serverless cache.
        public var arn: Swift.String?
        /// The cache usage limit for the serverless cache.
        public var cacheUsageLimits: ElastiCacheClientTypes.CacheUsageLimits?
        /// When the serverless cache was created.
        public var createTime: Foundation.Date?
        /// The daily time that a cache snapshot will be created. Default is NULL, i.e. snapshots will not be created at a specific time on a daily basis. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var dailySnapshotTime: Swift.String?
        /// A description of the serverless cache.
        public var description: Swift.String?
        /// Represents the information required for client programs to connect to a cache node. This value is read-only.
        public var endpoint: ElastiCacheClientTypes.Endpoint?
        /// The engine the serverless cache is compatible with.
        public var engine: Swift.String?
        /// The name and version number of the engine the serverless cache is compatible with.
        public var fullEngineVersion: Swift.String?
        /// The ID of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt data at rest in the serverless cache.
        public var kmsKeyId: Swift.String?
        /// The version number of the engine the serverless cache is compatible with.
        public var majorEngineVersion: Swift.String?
        /// Represents the information required for client programs to connect to a cache node. This value is read-only.
        public var readerEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The IDs of the EC2 security groups associated with the serverless cache.
        public var securityGroupIds: [Swift.String]?
        /// The unique identifier of the serverless cache.
        public var serverlessCacheName: Swift.String?
        /// The current setting for the number of serverless cache snapshots the system will retain. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var snapshotRetentionLimit: Swift.Int?
        /// The current status of the serverless cache. The allowed values are CREATING, AVAILABLE, DELETING, CREATE-FAILED and MODIFYING.
        public var status: Swift.String?
        /// If no subnet IDs are given and your VPC is in us-west-1, then ElastiCache will select 2 default subnets across AZs in your VPC. For all other Regions, if no subnet IDs are given then ElastiCache will select 3 default subnets across AZs in your default VPC.
        public var subnetIds: [Swift.String]?
        /// The identifier of the user group associated with the serverless cache. Available for Valkey and Redis OSS only. Default is NULL.
        public var userGroupId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            cacheUsageLimits: ElastiCacheClientTypes.CacheUsageLimits? = nil,
            createTime: Foundation.Date? = nil,
            dailySnapshotTime: Swift.String? = nil,
            description: Swift.String? = nil,
            endpoint: ElastiCacheClientTypes.Endpoint? = nil,
            engine: Swift.String? = nil,
            fullEngineVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            majorEngineVersion: Swift.String? = nil,
            readerEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            securityGroupIds: [Swift.String]? = nil,
            serverlessCacheName: Swift.String? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            status: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil,
            userGroupId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.cacheUsageLimits = cacheUsageLimits
            self.createTime = createTime
            self.dailySnapshotTime = dailySnapshotTime
            self.description = description
            self.endpoint = endpoint
            self.engine = engine
            self.fullEngineVersion = fullEngineVersion
            self.kmsKeyId = kmsKeyId
            self.majorEngineVersion = majorEngineVersion
            self.readerEndpoint = readerEndpoint
            self.securityGroupIds = securityGroupIds
            self.serverlessCacheName = serverlessCacheName
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.status = status
            self.subnetIds = subnetIds
            self.userGroupId = userGroupId
        }
    }
}

public struct CreateServerlessCacheOutput: Swift.Sendable {
    /// The response for the attempt to create the serverless cache.
    public var serverlessCache: ElastiCacheClientTypes.ServerlessCache?

    public init(
        serverlessCache: ElastiCacheClientTypes.ServerlessCache? = nil
    )
    {
        self.serverlessCache = serverlessCache
    }
}

public struct CreateServerlessCacheSnapshotInput: Swift.Sendable {
    /// The ID of the KMS key used to encrypt the snapshot. Available for Valkey, Redis OSS and Serverless Memcached only. Default: NULL
    public var kmsKeyId: Swift.String?
    /// The name of an existing serverless cache. The snapshot is created from this cache. Available for Valkey, Redis OSS and Serverless Memcached only.
    /// This member is required.
    public var serverlessCacheName: Swift.String?
    /// The name for the snapshot being created. Must be unique for the customer account. Available for Valkey, Redis OSS and Serverless Memcached only. Must be between 1 and 255 characters.
    /// This member is required.
    public var serverlessCacheSnapshotName: Swift.String?
    /// A list of tags to be added to the snapshot resource. A tag is a key-value pair. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        kmsKeyId: Swift.String? = nil,
        serverlessCacheName: Swift.String? = nil,
        serverlessCacheSnapshotName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.serverlessCacheName = serverlessCacheName
        self.serverlessCacheSnapshotName = serverlessCacheSnapshotName
        self.tags = tags
    }
}

public struct CreateServerlessCacheSnapshotOutput: Swift.Sendable {
    /// The state of a serverless cache snapshot at a specific point in time, to the millisecond. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot?

    public init(
        serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot? = nil
    )
    {
        self.serverlessCacheSnapshot = serverlessCacheSnapshot
    }
}

/// You attempted one of the following operations:
///
/// * Creating a snapshot of a Valkey or Redis OSS cluster running on a cache.t1.micro cache node.
///
/// * Creating a snapshot of a cluster that is running Memcached rather than Valkey or Redis OSS.
///
///
/// Neither of these are supported by ElastiCache.
public struct SnapshotFeatureNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotFeatureNotSupportedFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateSnapshot operation.
public struct CreateSnapshotInput: Swift.Sendable {
    /// The identifier of an existing cluster. The snapshot is created from this cluster.
    public var cacheClusterId: Swift.String?
    /// The ID of the KMS key used to encrypt the snapshot.
    public var kmsKeyId: Swift.String?
    /// The identifier of an existing replication group. The snapshot is created from this replication group.
    public var replicationGroupId: Swift.String?
    /// A name for the snapshot being created.
    /// This member is required.
    public var snapshotName: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        cacheClusterId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        snapshotName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.kmsKeyId = kmsKeyId
        self.replicationGroupId = replicationGroupId
        self.snapshotName = snapshotName
        self.tags = tags
    }
}

public struct CreateSnapshotOutput: Swift.Sendable {
    /// Represents a copy of an entire Valkey or Redis OSS cluster as of the time when the snapshot was taken.
    public var snapshot: ElastiCacheClientTypes.Snapshot?

    public init(
        snapshot: ElastiCacheClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

/// A user with this username already exists.
public struct DuplicateUserNameFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateUserName" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A user with this ID already exists.
public struct UserAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The quota of users has been exceeded.
public struct UserQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElastiCacheClientTypes {

    public enum InputAuthenticationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case iam
        case noPassword
        case password
        case sdkUnknown(Swift.String)

        public static var allCases: [InputAuthenticationType] {
            return [
                .iam,
                .noPassword,
                .password
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .iam: return "iam"
            case .noPassword: return "no-password-required"
            case .password: return "password"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Specifies the authentication mode to use.
    public struct AuthenticationMode: Swift.Sendable {
        /// Specifies the passwords to use for authentication if Type is set to password.
        public var passwords: [Swift.String]?
        /// Specifies the authentication type. Possible options are IAM authentication, password and no password.
        public var type: ElastiCacheClientTypes.InputAuthenticationType?

        public init(
            passwords: [Swift.String]? = nil,
            type: ElastiCacheClientTypes.InputAuthenticationType? = nil
        )
        {
            self.passwords = passwords
            self.type = type
        }
    }
}

public struct CreateUserInput: Swift.Sendable {
    /// Access permissions string used for this user.
    /// This member is required.
    public var accessString: Swift.String?
    /// Specifies how to authenticate the user.
    public var authenticationMode: ElastiCacheClientTypes.AuthenticationMode?
    /// The current supported value is Redis.
    /// This member is required.
    public var engine: Swift.String?
    /// Indicates a password is not required for this user.
    public var noPasswordRequired: Swift.Bool?
    /// Passwords used for this user. You can create up to two passwords for each user.
    public var passwords: [Swift.String]?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// The ID of the user.
    /// This member is required.
    public var userId: Swift.String?
    /// The username of the user.
    /// This member is required.
    public var userName: Swift.String?

    public init(
        accessString: Swift.String? = nil,
        authenticationMode: ElastiCacheClientTypes.AuthenticationMode? = nil,
        engine: Swift.String? = nil,
        noPasswordRequired: Swift.Bool? = nil,
        passwords: [Swift.String]? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.authenticationMode = authenticationMode
        self.engine = engine
        self.noPasswordRequired = noPasswordRequired
        self.passwords = passwords
        self.tags = tags
        self.userId = userId
        self.userName = userName
    }
}

extension ElastiCacheClientTypes {

    public enum AuthenticationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case iam
        case noPassword
        case password
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticationType] {
            return [
                .iam,
                .noPassword,
                .password
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .iam: return "iam"
            case .noPassword: return "no-password"
            case .password: return "password"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// Indicates whether the user requires a password to authenticate.
    public struct Authentication: Swift.Sendable {
        /// The number of passwords belonging to the user. The maximum is two.
        public var passwordCount: Swift.Int?
        /// Indicates whether the user requires a password to authenticate.
        public var type: ElastiCacheClientTypes.AuthenticationType?

        public init(
            passwordCount: Swift.Int? = nil,
            type: ElastiCacheClientTypes.AuthenticationType? = nil
        )
        {
            self.passwordCount = passwordCount
            self.type = type
        }
    }
}

public struct CreateUserOutput: Swift.Sendable {
    /// Access permissions string used for this user.
    public var accessString: Swift.String?
    /// The Amazon Resource Name (ARN) of the user.
    public var arn: Swift.String?
    /// Denotes whether the user requires a password to authenticate.
    public var authentication: ElastiCacheClientTypes.Authentication?
    /// The current supported value is Redis.
    public var engine: Swift.String?
    /// The minimum engine version required, which is Redis OSS 6.0
    public var minimumEngineVersion: Swift.String?
    /// Indicates the user status. Can be "active", "modifying" or "deleting".
    public var status: Swift.String?
    /// Returns a list of the user group IDs the user belongs to.
    public var userGroupIds: [Swift.String]?
    /// The ID of the user.
    public var userId: Swift.String?
    /// The username of the user.
    public var userName: Swift.String?

    public init(
        accessString: Swift.String? = nil,
        arn: Swift.String? = nil,
        authentication: ElastiCacheClientTypes.Authentication? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        userGroupIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.arn = arn
        self.authentication = authentication
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

/// You must add default user to a user group.
public struct DefaultUserRequired: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DefaultUserRequired" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The user group with this ID already exists.
public struct UserGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of users exceeds the user group limit.
public struct UserGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateUserGroupInput: Swift.Sendable {
    /// The current supported value is Redis user.
    /// This member is required.
    public var engine: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. Available for Valkey and Redis OSS only.
    public var tags: [ElastiCacheClientTypes.Tag]?
    /// The ID of the user group.
    /// This member is required.
    public var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    public var userIds: [Swift.String]?

    public init(
        engine: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.engine = engine
        self.tags = tags
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

extension ElastiCacheClientTypes {

    /// Returns the updates being applied to the user group.
    public struct UserGroupPendingChanges: Swift.Sendable {
        /// The list of user IDs to add.
        public var userIdsToAdd: [Swift.String]?
        /// The list of user IDs to remove.
        public var userIdsToRemove: [Swift.String]?

        public init(
            userIdsToAdd: [Swift.String]? = nil,
            userIdsToRemove: [Swift.String]? = nil
        )
        {
            self.userIdsToAdd = userIdsToAdd
            self.userIdsToRemove = userIdsToRemove
        }
    }
}

public struct CreateUserGroupOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the user group.
    public var arn: Swift.String?
    /// The current supported value is Redis user.
    public var engine: Swift.String?
    /// The minimum engine version required, which is Redis OSS 6.0
    public var minimumEngineVersion: Swift.String?
    /// A list of updates being applied to the user group.
    public var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    /// A list of replication groups that the user group can access.
    public var replicationGroups: [Swift.String]?
    /// Indicates which serverless caches the specified user group is associated with. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCaches: [Swift.String]?
    /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
    public var status: Swift.String?
    /// The ID of the user group.
    public var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    public var userIds: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
        replicationGroups: [Swift.String]? = nil,
        serverlessCaches: [Swift.String]? = nil,
        status: Swift.String? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.serverlessCaches = serverlessCaches
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInput: Swift.Sendable {
    /// Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.
    public var globalNodeGroupsToRemove: [Swift.String]?
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.
    public var globalNodeGroupsToRetain: [Swift.String]?
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?
    /// The number of node groups (shards) that results from the modification of the shard configuration
    /// This member is required.
    public var nodeGroupCount: Swift.Int?

    public init(
        applyImmediately: Swift.Bool? = nil,
        globalNodeGroupsToRemove: [Swift.String]? = nil,
        globalNodeGroupsToRetain: [Swift.String]? = nil,
        globalReplicationGroupId: Swift.String? = nil,
        nodeGroupCount: Swift.Int? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalNodeGroupsToRemove = globalNodeGroupsToRemove
        self.globalNodeGroupsToRetain = globalNodeGroupsToRetain
        self.globalReplicationGroupId = globalReplicationGroupId
        self.nodeGroupCount = nodeGroupCount
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

/// The operation was not performed because no changes were required.
public struct NoOperationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoOperationFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElastiCacheClientTypes {

    /// Node group (shard) configuration options when adding or removing replicas. Each node group (shard) configuration has the following members: NodeGroupId, NewReplicaCount, and PreferredAvailabilityZones.
    public struct ConfigureShard: Swift.Sendable {
        /// The number of replicas you want in this node group at the end of this operation. The maximum value for NewReplicaCount is 5. The minimum value depends upon the type of Valkey or Redis OSS replication group you are working with. The minimum number of replicas in a shard or replication group is:
        ///
        /// * Valkey or Redis OSS (cluster mode disabled)
        ///
        /// * If Multi-AZ: 1
        ///
        /// * If Multi-AZ: 0
        ///
        ///
        ///
        ///
        /// * Valkey or Redis OSS (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)
        /// This member is required.
        public var newReplicaCount: Swift.Int?
        /// The 4-digit id for the node group you are configuring. For Valkey or Redis OSS (cluster mode disabled) replication groups, the node group id is always 0001. To find a Valkey or Redis OSS (cluster mode enabled)'s node group's (shard's) id, see [Finding a Shard's Id](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html).
        /// This member is required.
        public var nodeGroupId: Swift.String?
        /// A list of PreferredAvailabilityZone strings that specify which availability zones the replication group's nodes are to be in. The nummber of PreferredAvailabilityZone values must equal the value of NewReplicaCount plus 1 to account for the primary node. If this member of ReplicaConfiguration is omitted, ElastiCache selects the availability zone for each of the replicas.
        public var preferredAvailabilityZones: [Swift.String]?
        /// The outpost ARNs in which the cache cluster is created.
        public var preferredOutpostArns: [Swift.String]?

        public init(
            newReplicaCount: Swift.Int? = nil,
            nodeGroupId: Swift.String? = nil,
            preferredAvailabilityZones: [Swift.String]? = nil,
            preferredOutpostArns: [Swift.String]? = nil
        )
        {
            self.newReplicaCount = newReplicaCount
            self.nodeGroupId = nodeGroupId
            self.preferredAvailabilityZones = preferredAvailabilityZones
            self.preferredOutpostArns = preferredOutpostArns
        }
    }
}

public struct DecreaseReplicaCountInput: Swift.Sendable {
    /// If True, the number of replica nodes is decreased immediately. ApplyImmediately=False is not currently supported.
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// The number of read replica nodes you want at the completion of this operation. For Valkey or Redis OSS (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Valkey or Redis OSS (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups. The minimum number of replicas in a shard or replication group is:
    ///
    /// * Valkey or Redis OSS (cluster mode disabled)
    ///
    /// * If Multi-AZ is enabled: 1
    ///
    /// * If Multi-AZ is not enabled: 0
    ///
    ///
    ///
    ///
    /// * Valkey or Redis OSS (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)
    public var newReplicaCount: Swift.Int?
    /// A list of ConfigureShard objects that can be used to configure each shard in a Valkey or Redis OSS (cluster mode enabled) replication group. The ConfigureShard has three members: NewReplicaCount, NodeGroupId, and PreferredAvailabilityZones.
    public var replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]?
    /// A list of the node ids to remove from the replication group or node group (shard).
    public var replicasToRemove: [Swift.String]?
    /// The id of the replication group from which you want to remove replica nodes.
    /// This member is required.
    public var replicationGroupId: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        newReplicaCount: Swift.Int? = nil,
        replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]? = nil,
        replicasToRemove: [Swift.String]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.newReplicaCount = newReplicaCount
        self.replicaConfiguration = replicaConfiguration
        self.replicasToRemove = replicasToRemove
        self.replicationGroupId = replicationGroupId
    }
}

public struct DecreaseReplicaCountOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

/// Represents the input of a DeleteCacheCluster operation.
public struct DeleteCacheClusterInput: Swift.Sendable {
    /// The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
    /// This member is required.
    public var cacheClusterId: Swift.String?
    /// The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
    public var finalSnapshotIdentifier: Swift.String?

    public init(
        cacheClusterId: Swift.String? = nil,
        finalSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.finalSnapshotIdentifier = finalSnapshotIdentifier
    }
}

public struct DeleteCacheClusterOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific cluster.
    public var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init(
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

/// Represents the input of a DeleteCacheParameterGroup operation.
public struct DeleteCacheParameterGroupInput: Swift.Sendable {
    /// The name of the cache parameter group to delete. The specified cache security group must not be associated with any clusters.
    /// This member is required.
    public var cacheParameterGroupName: Swift.String?

    public init(
        cacheParameterGroupName: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

/// Represents the input of a DeleteCacheSecurityGroup operation.
public struct DeleteCacheSecurityGroupInput: Swift.Sendable {
    /// The name of the cache security group to delete. You cannot delete the default security group.
    /// This member is required.
    public var cacheSecurityGroupName: Swift.String?

    public init(
        cacheSecurityGroupName: Swift.String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
    }
}

/// The requested cache subnet group is currently in use.
public struct CacheSubnetGroupInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CacheSubnetGroupInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a DeleteCacheSubnetGroup operation.
public struct DeleteCacheSubnetGroupInput: Swift.Sendable {
    /// The name of the cache subnet group to delete. Constraints: Must contain no more than 255 alphanumeric characters or hyphens.
    /// This member is required.
    public var cacheSubnetGroupName: Swift.String?

    public init(
        cacheSubnetGroupName: Swift.String? = nil
    )
    {
        self.cacheSubnetGroupName = cacheSubnetGroupName
    }
}

public struct DeleteGlobalReplicationGroupInput: Swift.Sendable {
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?
    /// The primary replication group is retained as a standalone replication group.
    /// This member is required.
    public var retainPrimaryReplicationGroup: Swift.Bool?

    public init(
        globalReplicationGroupId: Swift.String? = nil,
        retainPrimaryReplicationGroup: Swift.Bool? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.retainPrimaryReplicationGroup = retainPrimaryReplicationGroup
    }
}

public struct DeleteGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

/// Represents the input of a DeleteReplicationGroup operation.
public struct DeleteReplicationGroupInput: Swift.Sendable {
    /// The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
    public var finalSnapshotIdentifier: Swift.String?
    /// The identifier for the cluster to be deleted. This parameter is not case sensitive.
    /// This member is required.
    public var replicationGroupId: Swift.String?
    /// If set to true, all of the read replicas are deleted, but the primary node is retained.
    public var retainPrimaryCluster: Swift.Bool?

    public init(
        finalSnapshotIdentifier: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        retainPrimaryCluster: Swift.Bool? = nil
    )
    {
        self.finalSnapshotIdentifier = finalSnapshotIdentifier
        self.replicationGroupId = replicationGroupId
        self.retainPrimaryCluster = retainPrimaryCluster
    }
}

public struct DeleteReplicationGroupOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

public struct DeleteServerlessCacheInput: Swift.Sendable {
    /// Name of the final snapshot to be taken before the serverless cache is deleted. Available for Valkey, Redis OSS and Serverless Memcached only. Default: NULL, i.e. a final snapshot is not taken.
    public var finalSnapshotName: Swift.String?
    /// The identifier of the serverless cache to be deleted.
    /// This member is required.
    public var serverlessCacheName: Swift.String?

    public init(
        finalSnapshotName: Swift.String? = nil,
        serverlessCacheName: Swift.String? = nil
    )
    {
        self.finalSnapshotName = finalSnapshotName
        self.serverlessCacheName = serverlessCacheName
    }
}

public struct DeleteServerlessCacheOutput: Swift.Sendable {
    /// Provides the details of the specified serverless cache that is about to be deleted.
    public var serverlessCache: ElastiCacheClientTypes.ServerlessCache?

    public init(
        serverlessCache: ElastiCacheClientTypes.ServerlessCache? = nil
    )
    {
        self.serverlessCache = serverlessCache
    }
}

public struct DeleteServerlessCacheSnapshotInput: Swift.Sendable {
    /// Idenfitier of the snapshot to be deleted. Available for Valkey, Redis OSS and Serverless Memcached only.
    /// This member is required.
    public var serverlessCacheSnapshotName: Swift.String?

    public init(
        serverlessCacheSnapshotName: Swift.String? = nil
    )
    {
        self.serverlessCacheSnapshotName = serverlessCacheSnapshotName
    }
}

public struct DeleteServerlessCacheSnapshotOutput: Swift.Sendable {
    /// The snapshot to be deleted. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot?

    public init(
        serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot? = nil
    )
    {
        self.serverlessCacheSnapshot = serverlessCacheSnapshot
    }
}

/// Represents the input of a DeleteSnapshot operation.
public struct DeleteSnapshotInput: Swift.Sendable {
    /// The name of the snapshot to be deleted.
    /// This member is required.
    public var snapshotName: Swift.String?

    public init(
        snapshotName: Swift.String? = nil
    )
    {
        self.snapshotName = snapshotName
    }
}

public struct DeleteSnapshotOutput: Swift.Sendable {
    /// Represents a copy of an entire Valkey or Redis OSS cluster as of the time when the snapshot was taken.
    public var snapshot: ElastiCacheClientTypes.Snapshot?

    public init(
        snapshot: ElastiCacheClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

/// The default user assigned to the user group.
public struct DefaultUserAssociatedToUserGroupFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DefaultUserAssociatedToUserGroup" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The user is not in active state.
public struct InvalidUserStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUserState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteUserInput: Swift.Sendable {
    /// The ID of the user.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

public struct DeleteUserOutput: Swift.Sendable {
    /// Access permissions string used for this user.
    public var accessString: Swift.String?
    /// The Amazon Resource Name (ARN) of the user.
    public var arn: Swift.String?
    /// Denotes whether the user requires a password to authenticate.
    public var authentication: ElastiCacheClientTypes.Authentication?
    /// The current supported value is Redis.
    public var engine: Swift.String?
    /// The minimum engine version required, which is Redis OSS 6.0
    public var minimumEngineVersion: Swift.String?
    /// Indicates the user status. Can be "active", "modifying" or "deleting".
    public var status: Swift.String?
    /// Returns a list of the user group IDs the user belongs to.
    public var userGroupIds: [Swift.String]?
    /// The ID of the user.
    public var userId: Swift.String?
    /// The username of the user.
    public var userName: Swift.String?

    public init(
        accessString: Swift.String? = nil,
        arn: Swift.String? = nil,
        authentication: ElastiCacheClientTypes.Authentication? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        userGroupIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.arn = arn
        self.authentication = authentication
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

public struct DeleteUserGroupInput: Swift.Sendable {
    /// The ID of the user group.
    /// This member is required.
    public var userGroupId: Swift.String?

    public init(
        userGroupId: Swift.String? = nil
    )
    {
        self.userGroupId = userGroupId
    }
}

public struct DeleteUserGroupOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the user group.
    public var arn: Swift.String?
    /// The current supported value is Redis user.
    public var engine: Swift.String?
    /// The minimum engine version required, which is Redis OSS 6.0
    public var minimumEngineVersion: Swift.String?
    /// A list of updates being applied to the user group.
    public var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    /// A list of replication groups that the user group can access.
    public var replicationGroups: [Swift.String]?
    /// Indicates which serverless caches the specified user group is associated with. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCaches: [Swift.String]?
    /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
    public var status: Swift.String?
    /// The ID of the user group.
    public var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    public var userIds: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
        replicationGroups: [Swift.String]? = nil,
        serverlessCaches: [Swift.String]? = nil,
        status: Swift.String? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.serverlessCaches = serverlessCaches
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

/// Represents the input of a DescribeCacheClusters operation.
public struct DescribeCacheClustersInput: Swift.Sendable {
    /// The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
    public var cacheClusterId: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?
    /// An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this means Memcached and single node Valkey or Redis OSS clusters.
    public var showCacheClustersNotInReplicationGroups: Swift.Bool?
    /// An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
    public var showCacheNodeInfo: Swift.Bool?

    public init(
        cacheClusterId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        showCacheClustersNotInReplicationGroups: Swift.Bool? = nil,
        showCacheNodeInfo: Swift.Bool? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.marker = marker
        self.maxRecords = maxRecords
        self.showCacheClustersNotInReplicationGroups = showCacheClustersNotInReplicationGroups
        self.showCacheNodeInfo = showCacheNodeInfo
    }
}

/// Represents the output of a DescribeCacheClusters operation.
public struct DescribeCacheClustersOutput: Swift.Sendable {
    /// A list of clusters. Each item in the list contains detailed information about one cluster.
    public var cacheClusters: [ElastiCacheClientTypes.CacheCluster]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?

    public init(
        cacheClusters: [ElastiCacheClientTypes.CacheCluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheClusters = cacheClusters
        self.marker = marker
    }
}

/// Represents the input of a DescribeCacheEngineVersions operation.
public struct DescribeCacheEngineVersionsInput: Swift.Sendable {
    /// The name of a specific cache parameter group family to return details for. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 | redis7 | valkey7 Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var cacheParameterGroupFamily: Swift.String?
    /// If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
    public var defaultOnly: Swift.Bool?
    /// The cache engine to return. Valid values: memcached | redis
    public var engine: Swift.String?
    /// The cache engine version to return. Example: 1.4.14
    public var engineVersion: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        cacheParameterGroupFamily: Swift.String? = nil,
        defaultOnly: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.defaultOnly = defaultOnly
        self.engine = engine
        self.engineVersion = engineVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension ElastiCacheClientTypes {

    /// Provides all of the details about a particular cache engine version.
    public struct CacheEngineVersion: Swift.Sendable {
        /// The description of the cache engine.
        public var cacheEngineDescription: Swift.String?
        /// The description of the cache engine version.
        public var cacheEngineVersionDescription: Swift.String?
        /// The name of the cache parameter group family associated with this cache engine. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis7
        public var cacheParameterGroupFamily: Swift.String?
        /// The name of the cache engine.
        public var engine: Swift.String?
        /// The version number of the cache engine.
        public var engineVersion: Swift.String?

        public init(
            cacheEngineDescription: Swift.String? = nil,
            cacheEngineVersionDescription: Swift.String? = nil,
            cacheParameterGroupFamily: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil
        )
        {
            self.cacheEngineDescription = cacheEngineDescription
            self.cacheEngineVersionDescription = cacheEngineVersionDescription
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
        }
    }
}

/// Represents the output of a [DescribeCacheEngineVersions] operation.
public struct DescribeCacheEngineVersionsOutput: Swift.Sendable {
    /// A list of cache engine version details. Each element in the list contains detailed information about one cache engine version.
    public var cacheEngineVersions: [ElastiCacheClientTypes.CacheEngineVersion]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?

    public init(
        cacheEngineVersions: [ElastiCacheClientTypes.CacheEngineVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheEngineVersions = cacheEngineVersions
        self.marker = marker
    }
}

/// Represents the input of a DescribeCacheParameterGroups operation.
public struct DescribeCacheParameterGroupsInput: Swift.Sendable {
    /// The name of a specific cache parameter group to return details for.
    public var cacheParameterGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        cacheParameterGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

/// Represents the output of a DescribeCacheParameterGroups operation.
public struct DescribeCacheParameterGroupsOutput: Swift.Sendable {
    /// A list of cache parameter groups. Each element in the list contains detailed information about one cache parameter group.
    public var cacheParameterGroups: [ElastiCacheClientTypes.CacheParameterGroup]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?

    public init(
        cacheParameterGroups: [ElastiCacheClientTypes.CacheParameterGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheParameterGroups = cacheParameterGroups
        self.marker = marker
    }
}

/// Represents the input of a DescribeCacheParameters operation.
public struct DescribeCacheParametersInput: Swift.Sendable {
    /// The name of a specific cache parameter group to return details for.
    /// This member is required.
    public var cacheParameterGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?
    /// The parameter types to return. Valid values: user | system | engine-default
    public var source: Swift.String?

    public init(
        cacheParameterGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        source: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

extension ElastiCacheClientTypes {

    /// A value that applies only to a certain cache node type.
    public struct CacheNodeTypeSpecificValue: Swift.Sendable, Swift.Equatable {
        /// The cache node type for which this value applies.
        public var cacheNodeType: Swift.String?
        /// The value for the cache node type.
        public var value: Swift.String?

        public init(
            cacheNodeType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.cacheNodeType = cacheNodeType
            self.value = value
        }
    }
}

extension ElastiCacheClientTypes {

    public enum ChangeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case immediate
        case requiresReboot
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeType] {
            return [
                .immediate,
                .requiresReboot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .immediate: return "immediate"
            case .requiresReboot: return "requires-reboot"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// A parameter that has a different value for each cache node type it is applied to. For example, in a Valkey or Redis OSS cluster, a cache.m1.large cache node type would have a larger maxmemory value than a cache.m1.small type.
    public struct CacheNodeTypeSpecificParameter: Swift.Sendable, Swift.Equatable {
        /// The valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// A list of cache node types and their corresponding values for this parameter.
        public var cacheNodeTypeSpecificValues: [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see [Rebooting a Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html).
        public var changeType: ElastiCacheClientTypes.ChangeType?
        /// The valid data type for the parameter.
        public var dataType: Swift.String?
        /// A description of the parameter.
        public var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest cache engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The source of the parameter value.
        public var source: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            cacheNodeTypeSpecificValues: [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]? = nil,
            changeType: ElastiCacheClientTypes.ChangeType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues
            self.changeType = changeType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.source = source
        }
    }
}

extension ElastiCacheClientTypes {

    /// Describes an individual setting that controls some aspect of ElastiCache behavior.
    public struct Parameter: Swift.Sendable, Swift.Equatable {
        /// The valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see [Rebooting a Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html).
        public var changeType: ElastiCacheClientTypes.ChangeType?
        /// The valid data type for the parameter.
        public var dataType: Swift.String?
        /// A description of the parameter.
        public var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest cache engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The value of the parameter.
        public var parameterValue: Swift.String?
        /// The source of the parameter.
        public var source: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            changeType: ElastiCacheClientTypes.ChangeType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.changeType = changeType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }
    }
}

/// Represents the output of a DescribeCacheParameters operation.
public struct DescribeCacheParametersOutput: Swift.Sendable {
    /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
    public var cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?
    /// A list of [Parameter] instances.
    public var parameters: [ElastiCacheClientTypes.Parameter]?

    public init(
        cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]? = nil,
        marker: Swift.String? = nil,
        parameters: [ElastiCacheClientTypes.Parameter]? = nil
    )
    {
        self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
        self.marker = marker
        self.parameters = parameters
    }
}

/// Represents the input of a DescribeCacheSecurityGroups operation.
public struct DescribeCacheSecurityGroupsInput: Swift.Sendable {
    /// The name of the cache security group to return details for.
    public var cacheSecurityGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        cacheSecurityGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

/// Represents the output of a DescribeCacheSecurityGroups operation.
public struct DescribeCacheSecurityGroupsOutput: Swift.Sendable {
    /// A list of cache security groups. Each element in the list contains detailed information about one group.
    public var cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroup]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?

    public init(
        cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheSecurityGroups = cacheSecurityGroups
        self.marker = marker
    }
}

/// Represents the input of a DescribeCacheSubnetGroups operation.
public struct DescribeCacheSubnetGroupsInput: Swift.Sendable {
    /// The name of the cache subnet group to return details for.
    public var cacheSubnetGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        cacheSubnetGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

/// Represents the output of a DescribeCacheSubnetGroups operation.
public struct DescribeCacheSubnetGroupsOutput: Swift.Sendable {
    /// A list of cache subnet groups. Each element in the list contains detailed information about one group.
    public var cacheSubnetGroups: [ElastiCacheClientTypes.CacheSubnetGroup]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?

    public init(
        cacheSubnetGroups: [ElastiCacheClientTypes.CacheSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheSubnetGroups = cacheSubnetGroups
        self.marker = marker
    }
}

/// Represents the input of a DescribeEngineDefaultParameters operation.
public struct DescribeEngineDefaultParametersInput: Swift.Sendable {
    /// The name of the cache parameter group family. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 | redis7
    /// This member is required.
    public var cacheParameterGroupFamily: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        cacheParameterGroupFamily: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension ElastiCacheClientTypes {

    /// Represents the output of a DescribeEngineDefaultParameters operation.
    public struct EngineDefaults: Swift.Sendable, Swift.Equatable {
        /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
        public var cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]?
        /// Specifies the name of the cache parameter group family to which the engine default parameters apply. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.0 | redis6.x | redis7
        public var cacheParameterGroupFamily: Swift.String?
        /// Provides an identifier to allow retrieval of paginated results.
        public var marker: Swift.String?
        /// Contains a list of engine default parameters.
        public var parameters: [ElastiCacheClientTypes.Parameter]?

        public init(
            cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]? = nil,
            cacheParameterGroupFamily: Swift.String? = nil,
            marker: Swift.String? = nil,
            parameters: [ElastiCacheClientTypes.Parameter]? = nil
        )
        {
            self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.marker = marker
            self.parameters = parameters
        }
    }
}

public struct DescribeEngineDefaultParametersOutput: Swift.Sendable {
    /// Represents the output of a DescribeEngineDefaultParameters operation.
    public var engineDefaults: ElastiCacheClientTypes.EngineDefaults?

    public init(
        engineDefaults: ElastiCacheClientTypes.EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

extension ElastiCacheClientTypes {

    public enum SourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cacheCluster
        case cacheParameterGroup
        case cacheSecurityGroup
        case cacheSubnetGroup
        case replicationGroup
        case serverlessCache
        case serverlessCacheSnapshot
        case user
        case userGroup
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .cacheCluster,
                .cacheParameterGroup,
                .cacheSecurityGroup,
                .cacheSubnetGroup,
                .replicationGroup,
                .serverlessCache,
                .serverlessCacheSnapshot,
                .user,
                .userGroup
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cacheCluster: return "cache-cluster"
            case .cacheParameterGroup: return "cache-parameter-group"
            case .cacheSecurityGroup: return "cache-security-group"
            case .cacheSubnetGroup: return "cache-subnet-group"
            case .replicationGroup: return "replication-group"
            case .serverlessCache: return "serverless-cache"
            case .serverlessCacheSnapshot: return "serverless-cache-snapshot"
            case .user: return "user"
            case .userGroup: return "user-group"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a DescribeEvents operation.
public struct DescribeEventsInput: Swift.Sendable {
    /// The number of minutes worth of events to retrieve.
    public var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z
    public var endTime: Foundation.Date?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
    public var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned.
    public var sourceType: ElastiCacheClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z
    public var startTime: Foundation.Date?

    public init(
        duration: Swift.Int? = nil,
        endTime: Foundation.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: ElastiCacheClientTypes.SourceType? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension ElastiCacheClientTypes {

    /// Represents a single occurrence of something interesting within the system. Some examples of events are creating a cluster, adding or removing a cache node, or rebooting a node.
    public struct Event: Swift.Sendable {
        /// The date and time when the event occurred.
        public var date: Foundation.Date?
        /// The text of the event.
        public var message: Swift.String?
        /// The identifier for the source of the event. For example, if the event occurred at the cluster level, the identifier would be the name of the cluster.
        public var sourceIdentifier: Swift.String?
        /// Specifies the origin of this event - a cluster, a parameter group, a security group, etc.
        public var sourceType: ElastiCacheClientTypes.SourceType?

        public init(
            date: Foundation.Date? = nil,
            message: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: ElastiCacheClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.message = message
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }
}

/// Represents the output of a DescribeEvents operation.
public struct DescribeEventsOutput: Swift.Sendable {
    /// A list of events. Each element in the list contains detailed information about one event.
    public var events: [ElastiCacheClientTypes.Event]?
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?

    public init(
        events: [ElastiCacheClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

public struct DescribeGlobalReplicationGroupsInput: Swift.Sendable {
    /// The name of the Global datastore
    public var globalReplicationGroupId: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// Returns the list of members that comprise the Global datastore.
    public var showMemberInfo: Swift.Bool?

    public init(
        globalReplicationGroupId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        showMemberInfo: Swift.Bool? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.marker = marker
        self.maxRecords = maxRecords
        self.showMemberInfo = showMemberInfo
    }
}

public struct DescribeGlobalReplicationGroupsOutput: Swift.Sendable {
    /// Indicates the slot configuration and global identifier for each slice group.
    public var globalReplicationGroups: [ElastiCacheClientTypes.GlobalReplicationGroup]?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    public var marker: Swift.String?

    public init(
        globalReplicationGroups: [ElastiCacheClientTypes.GlobalReplicationGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.globalReplicationGroups = globalReplicationGroups
        self.marker = marker
    }
}

/// Represents the input of a DescribeReplicationGroups operation.
public struct DescribeReplicationGroupsInput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
    public var replicationGroupId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupId = replicationGroupId
    }
}

/// Represents the output of a DescribeReplicationGroups operation.
public struct DescribeReplicationGroupsOutput: Swift.Sendable {
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?
    /// A list of replication groups. Each item in the list contains detailed information about one replication group.
    public var replicationGroups: [ElastiCacheClientTypes.ReplicationGroup]?

    public init(
        marker: Swift.String? = nil,
        replicationGroups: [ElastiCacheClientTypes.ReplicationGroup]? = nil
    )
    {
        self.marker = marker
        self.replicationGroups = replicationGroups
    }
}

/// Represents the input of a DescribeReservedCacheNodes operation.
public struct DescribeReservedCacheNodesInput: Swift.Sendable {
    /// The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
    public var cacheNodeType: Swift.String?
    /// The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
    public var duration: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?
    /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"
    public var offeringType: Swift.String?
    /// The product description filter value. Use this parameter to show only those reservations matching the specified product description.
    public var productDescription: Swift.String?
    /// The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
    public var reservedCacheNodeId: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
    public var reservedCacheNodesOfferingId: Swift.String?

    public init(
        cacheNodeType: Swift.String? = nil,
        duration: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        offeringType: Swift.String? = nil,
        productDescription: Swift.String? = nil,
        reservedCacheNodeId: Swift.String? = nil,
        reservedCacheNodesOfferingId: Swift.String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.marker = marker
        self.maxRecords = maxRecords
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
    }
}

extension ElastiCacheClientTypes {

    /// Contains the specific price and frequency of a recurring charges for a reserved cache node, or for a reserved cache node offering.
    public struct RecurringCharge: Swift.Sendable {
        /// The monetary amount of the recurring charge.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency of the recurring charge.
        public var recurringChargeFrequency: Swift.String?

        public init(
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }
}

extension ElastiCacheClientTypes {

    /// Represents the output of a PurchaseReservedCacheNodesOffering operation.
    public struct ReservedCacheNode: Swift.Sendable {
        /// The number of cache nodes that have been reserved.
        public var cacheNodeCount: Swift.Int?
        /// The cache node type for the reserved cache nodes. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// The duration of the reservation in seconds.
        public var duration: Swift.Int?
        /// The fixed price charged for this reserved cache node.
        public var fixedPrice: Swift.Double?
        /// The offering type of this reserved cache node.
        public var offeringType: Swift.String?
        /// The description of the reserved cache node.
        public var productDescription: Swift.String?
        /// The recurring price charged to run this reserved cache node.
        public var recurringCharges: [ElastiCacheClientTypes.RecurringCharge]?
        /// The Amazon Resource Name (ARN) of the reserved cache node. Example: arn:aws:elasticache:us-east-1:123456789012:reserved-instance:ri-2017-03-27-08-33-25-582
        public var reservationARN: Swift.String?
        /// The unique identifier for the reservation.
        public var reservedCacheNodeId: Swift.String?
        /// The offering identifier.
        public var reservedCacheNodesOfferingId: Swift.String?
        /// The time the reservation started.
        public var startTime: Foundation.Date?
        /// The state of the reserved cache node.
        public var state: Swift.String?
        /// The hourly price charged for this reserved cache node.
        public var usagePrice: Swift.Double?

        public init(
            cacheNodeCount: Swift.Int? = nil,
            cacheNodeType: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [ElastiCacheClientTypes.RecurringCharge]? = nil,
            reservationARN: Swift.String? = nil,
            reservedCacheNodeId: Swift.String? = nil,
            reservedCacheNodesOfferingId: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.cacheNodeCount = cacheNodeCount
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservationARN = reservationARN
            self.reservedCacheNodeId = reservedCacheNodeId
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }
}

/// Represents the output of a DescribeReservedCacheNodes operation.
public struct DescribeReservedCacheNodesOutput: Swift.Sendable {
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?
    /// A list of reserved cache nodes. Each element in the list contains detailed information about one node.
    public var reservedCacheNodes: [ElastiCacheClientTypes.ReservedCacheNode]?

    public init(
        marker: Swift.String? = nil,
        reservedCacheNodes: [ElastiCacheClientTypes.ReservedCacheNode]? = nil
    )
    {
        self.marker = marker
        self.reservedCacheNodes = reservedCacheNodes
    }
}

/// The requested cache node offering does not exist.
public struct ReservedCacheNodesOfferingNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedCacheNodesOfferingNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a DescribeReservedCacheNodesOfferings operation.
public struct DescribeReservedCacheNodesOfferingsInput: Swift.Sendable {
    /// The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
    public var cacheNodeType: Swift.String?
    /// Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration. Valid Values: 1 | 3 | 31536000 | 94608000
    public var duration: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    public var maxRecords: Swift.Int?
    /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid Values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" |"All Upfront"|"Partial Upfront"| "No Upfront"
    public var offeringType: Swift.String?
    /// The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
    public var productDescription: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    public var reservedCacheNodesOfferingId: Swift.String?

    public init(
        cacheNodeType: Swift.String? = nil,
        duration: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        offeringType: Swift.String? = nil,
        productDescription: Swift.String? = nil,
        reservedCacheNodesOfferingId: Swift.String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.marker = marker
        self.maxRecords = maxRecords
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
    }
}

extension ElastiCacheClientTypes {

    /// Describes all of the attributes of a reserved cache node offering.
    public struct ReservedCacheNodesOffering: Swift.Sendable {
        /// The cache node type for the reserved cache node. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M7g node types: cache.m7g.large, cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge, cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis OSS engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R7g node types: cache.r7g.large, cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge, cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Valkey or Redis OSS append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Valkey or Redis OSS Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * The configuration variables appendonly and appendfsync are not supported on Valkey, or on Redis OSS version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// The duration of the offering. in seconds.
        public var duration: Swift.Int?
        /// The fixed price charged for this offering.
        public var fixedPrice: Swift.Double?
        /// The offering type.
        public var offeringType: Swift.String?
        /// The cache engine used by the offering.
        public var productDescription: Swift.String?
        /// The recurring price charged to run this reserved cache node.
        public var recurringCharges: [ElastiCacheClientTypes.RecurringCharge]?
        /// A unique identifier for the reserved cache node offering.
        public var reservedCacheNodesOfferingId: Swift.String?
        /// The hourly price charged for this offering.
        public var usagePrice: Swift.Double?

        public init(
            cacheNodeType: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [ElastiCacheClientTypes.RecurringCharge]? = nil,
            reservedCacheNodesOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.usagePrice = usagePrice
        }
    }
}

/// Represents the output of a DescribeReservedCacheNodesOfferings operation.
public struct DescribeReservedCacheNodesOfferingsOutput: Swift.Sendable {
    /// Provides an identifier to allow retrieval of paginated results.
    public var marker: Swift.String?
    /// A list of reserved cache node offerings. Each element in the list contains detailed information about one offering.
    public var reservedCacheNodesOfferings: [ElastiCacheClientTypes.ReservedCacheNodesOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedCacheNodesOfferings: [ElastiCacheClientTypes.ReservedCacheNodesOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedCacheNodesOfferings = reservedCacheNodesOfferings
    }
}

public struct DescribeServerlessCachesInput: Swift.Sendable {
    /// The maximum number of records in the response. If more records exist than the specified max-records value, the next token is included in the response so that remaining results can be retrieved. The default is 50.
    public var maxResults: Swift.Int?
    /// An optional marker returned from a prior request to support pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// The identifier for the serverless cache. If this parameter is specified, only information about that specific serverless cache is returned. Default: NULL
    public var serverlessCacheName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serverlessCacheName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serverlessCacheName = serverlessCacheName
    }
}

public struct DescribeServerlessCachesOutput: Swift.Sendable {
    /// An optional marker returned from a prior request to support pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// The serverless caches associated with a given description request.
    public var serverlessCaches: [ElastiCacheClientTypes.ServerlessCache]?

    public init(
        nextToken: Swift.String? = nil,
        serverlessCaches: [ElastiCacheClientTypes.ServerlessCache]? = nil
    )
    {
        self.nextToken = nextToken
        self.serverlessCaches = serverlessCaches
    }
}

public struct DescribeServerlessCacheSnapshotsInput: Swift.Sendable {
    /// The maximum number of records to include in the response. If more records exist than the specified max-results value, a market is included in the response so that remaining results can be retrieved. Available for Valkey, Redis OSS and Serverless Memcached only.The default is 50. The Validation Constraints are a maximum of 50.
    public var maxResults: Swift.Int?
    /// An optional marker returned from a prior request to support pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by max-results. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var nextToken: Swift.String?
    /// The identifier of serverless cache. If this parameter is specified, only snapshots associated with that specific serverless cache are described. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheName: Swift.String?
    /// The identifier of the serverless cache’s snapshot. If this parameter is specified, only this snapshot is described. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheSnapshotName: Swift.String?
    /// The type of snapshot that is being described. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var snapshotType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serverlessCacheName: Swift.String? = nil,
        serverlessCacheSnapshotName: Swift.String? = nil,
        snapshotType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serverlessCacheName = serverlessCacheName
        self.serverlessCacheSnapshotName = serverlessCacheSnapshotName
        self.snapshotType = snapshotType
    }
}

public struct DescribeServerlessCacheSnapshotsOutput: Swift.Sendable {
    /// An optional marker returned from a prior request to support pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by max-results. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var nextToken: Swift.String?
    /// The serverless caches snapshots associated with a given description request. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheSnapshots: [ElastiCacheClientTypes.ServerlessCacheSnapshot]?

    public init(
        nextToken: Swift.String? = nil,
        serverlessCacheSnapshots: [ElastiCacheClientTypes.ServerlessCacheSnapshot]? = nil
    )
    {
        self.nextToken = nextToken
        self.serverlessCacheSnapshots = serverlessCacheSnapshots
    }
}

extension ElastiCacheClientTypes {

    public enum ServiceUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case cancelled
        case expired
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceUpdateStatus] {
            return [
                .available,
                .cancelled,
                .expired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .cancelled: return "cancelled"
            case .expired: return "expired"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeServiceUpdatesInput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response
    public var maxRecords: Swift.Int?
    /// The unique ID of the service update
    public var serviceUpdateName: Swift.String?
    /// The status of the service update
    public var serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        serviceUpdateName: Swift.String? = nil,
        serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateStatus = serviceUpdateStatus
    }
}

extension ElastiCacheClientTypes {

    public enum ServiceUpdateSeverity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case critical
        case important
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceUpdateSeverity] {
            return [
                .critical,
                .important,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .critical: return "critical"
            case .important: return "important"
            case .low: return "low"
            case .medium: return "medium"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum ServiceUpdateType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case securityUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceUpdateType] {
            return [
                .securityUpdate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .securityUpdate: return "security-update"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// An update that you can apply to your Valkey or Redis OSS clusters.
    public struct ServiceUpdate: Swift.Sendable {
        /// Indicates whether the service update will be automatically applied once the recommended apply-by date has expired.
        public var autoUpdateAfterRecommendedApplyByDate: Swift.Bool?
        /// The Elasticache engine to which the update applies. Either Valkey, Redis OSS or Memcached.
        public var engine: Swift.String?
        /// The Elasticache engine version to which the update applies. Either Valkey, Redis OSS or Memcached engine version.
        public var engineVersion: Swift.String?
        /// The estimated length of time the service update will take
        public var estimatedUpdateTime: Swift.String?
        /// Provides details of the service update
        public var serviceUpdateDescription: Swift.String?
        /// The date after which the service update is no longer available
        public var serviceUpdateEndDate: Foundation.Date?
        /// The unique ID of the service update
        public var serviceUpdateName: Swift.String?
        /// The recommendend date to apply the service update in order to ensure compliance. For information on compliance, see [Self-Service Security Updates for Compliance](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service).
        public var serviceUpdateRecommendedApplyByDate: Foundation.Date?
        /// The date when the service update is initially available
        public var serviceUpdateReleaseDate: Foundation.Date?
        /// The severity of the service update
        public var serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity?
        /// The status of the service update
        public var serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus?
        /// Reflects the nature of the service update
        public var serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType?

        public init(
            autoUpdateAfterRecommendedApplyByDate: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            estimatedUpdateTime: Swift.String? = nil,
            serviceUpdateDescription: Swift.String? = nil,
            serviceUpdateEndDate: Foundation.Date? = nil,
            serviceUpdateName: Swift.String? = nil,
            serviceUpdateRecommendedApplyByDate: Foundation.Date? = nil,
            serviceUpdateReleaseDate: Foundation.Date? = nil,
            serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity? = nil,
            serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus? = nil,
            serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType? = nil
        )
        {
            self.autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDate
            self.engine = engine
            self.engineVersion = engineVersion
            self.estimatedUpdateTime = estimatedUpdateTime
            self.serviceUpdateDescription = serviceUpdateDescription
            self.serviceUpdateEndDate = serviceUpdateEndDate
            self.serviceUpdateName = serviceUpdateName
            self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
            self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
            self.serviceUpdateSeverity = serviceUpdateSeverity
            self.serviceUpdateStatus = serviceUpdateStatus
            self.serviceUpdateType = serviceUpdateType
        }
    }
}

public struct DescribeServiceUpdatesOutput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of service updates
    public var serviceUpdates: [ElastiCacheClientTypes.ServiceUpdate]?

    public init(
        marker: Swift.String? = nil,
        serviceUpdates: [ElastiCacheClientTypes.ServiceUpdate]? = nil
    )
    {
        self.marker = marker
        self.serviceUpdates = serviceUpdates
    }
}

/// Represents the input of a DescribeSnapshotsMessage operation.
public struct DescribeSnapshotsInput: Swift.Sendable {
    /// A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
    public var cacheClusterId: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 50 Constraints: minimum 20; maximum 50.
    public var maxRecords: Swift.Int?
    /// A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
    public var replicationGroupId: Swift.String?
    /// A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
    public var showNodeGroupConfig: Swift.Bool?
    /// A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
    public var snapshotName: Swift.String?
    /// If set to system, the output shows snapshots that were automatically created by ElastiCache. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
    public var snapshotSource: Swift.String?

    public init(
        cacheClusterId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        replicationGroupId: Swift.String? = nil,
        showNodeGroupConfig: Swift.Bool? = nil,
        snapshotName: Swift.String? = nil,
        snapshotSource: Swift.String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupId = replicationGroupId
        self.showNodeGroupConfig = showNodeGroupConfig
        self.snapshotName = snapshotName
        self.snapshotSource = snapshotSource
    }
}

/// Represents the output of a DescribeSnapshots operation.
public struct DescribeSnapshotsOutput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of snapshots. Each item in the list contains detailed information about one snapshot.
    public var snapshots: [ElastiCacheClientTypes.Snapshot]?

    public init(
        marker: Swift.String? = nil,
        snapshots: [ElastiCacheClientTypes.Snapshot]? = nil
    )
    {
        self.marker = marker
        self.snapshots = snapshots
    }
}

extension ElastiCacheClientTypes {

    /// Filters update actions from the service updates that are in available status during the time range.
    public struct TimeRangeFilter: Swift.Sendable {
        /// The end time of the time range filter
        public var endTime: Foundation.Date?
        /// The start time of the time range filter
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }
}

public struct DescribeUpdateActionsInput: Swift.Sendable {
    /// The cache cluster IDs
    public var cacheClusterIds: [Swift.String]?
    /// The Elasticache engine to which the update applies. Either Valkey, Redis OSS or Memcached.
    public var engine: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response
    public var maxRecords: Swift.Int?
    /// The replication group IDs
    public var replicationGroupIds: [Swift.String]?
    /// The unique ID of the service update
    public var serviceUpdateName: Swift.String?
    /// The status of the service update
    public var serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]?
    /// The range of time specified to search for service updates that are in available status
    public var serviceUpdateTimeRange: ElastiCacheClientTypes.TimeRangeFilter?
    /// Dictates whether to include node level update status in the response
    public var showNodeLevelUpdateStatus: Swift.Bool?
    /// The status of the update action.
    public var updateActionStatus: [ElastiCacheClientTypes.UpdateActionStatus]?

    public init(
        cacheClusterIds: [Swift.String]? = nil,
        engine: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        replicationGroupIds: [Swift.String]? = nil,
        serviceUpdateName: Swift.String? = nil,
        serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]? = nil,
        serviceUpdateTimeRange: ElastiCacheClientTypes.TimeRangeFilter? = nil,
        showNodeLevelUpdateStatus: Swift.Bool? = nil,
        updateActionStatus: [ElastiCacheClientTypes.UpdateActionStatus]? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.engine = engine
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateStatus = serviceUpdateStatus
        self.serviceUpdateTimeRange = serviceUpdateTimeRange
        self.showNodeLevelUpdateStatus = showNodeLevelUpdateStatus
        self.updateActionStatus = updateActionStatus
    }
}

extension ElastiCacheClientTypes {

    public enum NodeUpdateInitiatedBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customer
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeUpdateInitiatedBy] {
            return [
                .customer,
                .system
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customer: return "customer"
            case .system: return "system"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    public enum NodeUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case inProgress
        case notApplied
        case stopped
        case stopping
        case waitingToStart
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeUpdateStatus] {
            return [
                .complete,
                .inProgress,
                .notApplied,
                .stopped,
                .stopping,
                .waitingToStart
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "complete"
            case .inProgress: return "in-progress"
            case .notApplied: return "not-applied"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case .waitingToStart: return "waiting-to-start"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The status of the service update on the cache node
    public struct CacheNodeUpdateStatus: Swift.Sendable {
        /// The node ID of the cache cluster
        public var cacheNodeId: Swift.String?
        /// The deletion date of the node
        public var nodeDeletionDate: Foundation.Date?
        /// The end date of the update for a node
        public var nodeUpdateEndDate: Foundation.Date?
        /// Reflects whether the update was initiated by the customer or automatically applied
        public var nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy?
        /// The date when the update is triggered
        public var nodeUpdateInitiatedDate: Foundation.Date?
        /// The start date of the update for a node
        public var nodeUpdateStartDate: Foundation.Date?
        /// The update status of the node
        public var nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus?
        /// The date when the NodeUpdateStatus was last modified>
        public var nodeUpdateStatusModifiedDate: Foundation.Date?

        public init(
            cacheNodeId: Swift.String? = nil,
            nodeDeletionDate: Foundation.Date? = nil,
            nodeUpdateEndDate: Foundation.Date? = nil,
            nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy? = nil,
            nodeUpdateInitiatedDate: Foundation.Date? = nil,
            nodeUpdateStartDate: Foundation.Date? = nil,
            nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus? = nil,
            nodeUpdateStatusModifiedDate: Foundation.Date? = nil
        )
        {
            self.cacheNodeId = cacheNodeId
            self.nodeDeletionDate = nodeDeletionDate
            self.nodeUpdateEndDate = nodeUpdateEndDate
            self.nodeUpdateInitiatedBy = nodeUpdateInitiatedBy
            self.nodeUpdateInitiatedDate = nodeUpdateInitiatedDate
            self.nodeUpdateStartDate = nodeUpdateStartDate
            self.nodeUpdateStatus = nodeUpdateStatus
            self.nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate
        }
    }
}

extension ElastiCacheClientTypes {

    /// The status of the service update on the node group member
    public struct NodeGroupMemberUpdateStatus: Swift.Sendable {
        /// The cache cluster ID
        public var cacheClusterId: Swift.String?
        /// The node ID of the cache cluster
        public var cacheNodeId: Swift.String?
        /// The deletion date of the node
        public var nodeDeletionDate: Foundation.Date?
        /// The end date of the update for a node
        public var nodeUpdateEndDate: Foundation.Date?
        /// Reflects whether the update was initiated by the customer or automatically applied
        public var nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy?
        /// The date when the update is triggered
        public var nodeUpdateInitiatedDate: Foundation.Date?
        /// The start date of the update for a node
        public var nodeUpdateStartDate: Foundation.Date?
        /// The update status of the node
        public var nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus?
        /// The date when the NodeUpdateStatus was last modified
        public var nodeUpdateStatusModifiedDate: Foundation.Date?

        public init(
            cacheClusterId: Swift.String? = nil,
            cacheNodeId: Swift.String? = nil,
            nodeDeletionDate: Foundation.Date? = nil,
            nodeUpdateEndDate: Foundation.Date? = nil,
            nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy? = nil,
            nodeUpdateInitiatedDate: Foundation.Date? = nil,
            nodeUpdateStartDate: Foundation.Date? = nil,
            nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus? = nil,
            nodeUpdateStatusModifiedDate: Foundation.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeId = cacheNodeId
            self.nodeDeletionDate = nodeDeletionDate
            self.nodeUpdateEndDate = nodeUpdateEndDate
            self.nodeUpdateInitiatedBy = nodeUpdateInitiatedBy
            self.nodeUpdateInitiatedDate = nodeUpdateInitiatedDate
            self.nodeUpdateStartDate = nodeUpdateStartDate
            self.nodeUpdateStatus = nodeUpdateStatus
            self.nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate
        }
    }
}

extension ElastiCacheClientTypes {

    /// The status of the service update on the node group
    public struct NodeGroupUpdateStatus: Swift.Sendable {
        /// The ID of the node group
        public var nodeGroupId: Swift.String?
        /// The status of the service update on the node group member
        public var nodeGroupMemberUpdateStatus: [ElastiCacheClientTypes.NodeGroupMemberUpdateStatus]?

        public init(
            nodeGroupId: Swift.String? = nil,
            nodeGroupMemberUpdateStatus: [ElastiCacheClientTypes.NodeGroupMemberUpdateStatus]? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatus
        }
    }
}

extension ElastiCacheClientTypes {

    public enum SlaMet: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case na
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [SlaMet] {
            return [
                .na,
                .no,
                .yes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .na: return "n/a"
            case .no: return "no"
            case .yes: return "yes"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElastiCacheClientTypes {

    /// The status of the service update for a specific replication group
    public struct UpdateAction: Swift.Sendable {
        /// The ID of the cache cluster
        public var cacheClusterId: Swift.String?
        /// The status of the service update on the cache node
        public var cacheNodeUpdateStatus: [ElastiCacheClientTypes.CacheNodeUpdateStatus]?
        /// The Elasticache engine to which the update applies. Either Valkey, Redis OSS or Memcached.
        public var engine: Swift.String?
        /// The estimated length of time for the update to complete
        public var estimatedUpdateTime: Swift.String?
        /// The status of the service update on the node group
        public var nodeGroupUpdateStatus: [ElastiCacheClientTypes.NodeGroupUpdateStatus]?
        /// The progress of the service update on the replication group
        public var nodesUpdated: Swift.String?
        /// The ID of the replication group
        public var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        public var serviceUpdateName: Swift.String?
        /// The recommended date to apply the service update to ensure compliance. For information on compliance, see [Self-Service Security Updates for Compliance](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service).
        public var serviceUpdateRecommendedApplyByDate: Foundation.Date?
        /// The date the update is first available
        public var serviceUpdateReleaseDate: Foundation.Date?
        /// The severity of the service update
        public var serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity?
        /// The status of the service update
        public var serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus?
        /// Reflects the nature of the service update
        public var serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType?
        /// If yes, all nodes in the replication group have been updated by the recommended apply-by date. If no, at least one node in the replication group have not been updated by the recommended apply-by date. If N/A, the replication group was created after the recommended apply-by date.
        public var slaMet: ElastiCacheClientTypes.SlaMet?
        /// The date that the service update is available to a replication group
        public var updateActionAvailableDate: Foundation.Date?
        /// The status of the update action
        public var updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus?
        /// The date when the UpdateActionStatus was last modified
        public var updateActionStatusModifiedDate: Foundation.Date?

        public init(
            cacheClusterId: Swift.String? = nil,
            cacheNodeUpdateStatus: [ElastiCacheClientTypes.CacheNodeUpdateStatus]? = nil,
            engine: Swift.String? = nil,
            estimatedUpdateTime: Swift.String? = nil,
            nodeGroupUpdateStatus: [ElastiCacheClientTypes.NodeGroupUpdateStatus]? = nil,
            nodesUpdated: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil,
            serviceUpdateRecommendedApplyByDate: Foundation.Date? = nil,
            serviceUpdateReleaseDate: Foundation.Date? = nil,
            serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity? = nil,
            serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus? = nil,
            serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType? = nil,
            slaMet: ElastiCacheClientTypes.SlaMet? = nil,
            updateActionAvailableDate: Foundation.Date? = nil,
            updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus? = nil,
            updateActionStatusModifiedDate: Foundation.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeUpdateStatus = cacheNodeUpdateStatus
            self.engine = engine
            self.estimatedUpdateTime = estimatedUpdateTime
            self.nodeGroupUpdateStatus = nodeGroupUpdateStatus
            self.nodesUpdated = nodesUpdated
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
            self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
            self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
            self.serviceUpdateSeverity = serviceUpdateSeverity
            self.serviceUpdateStatus = serviceUpdateStatus
            self.serviceUpdateType = serviceUpdateType
            self.slaMet = slaMet
            self.updateActionAvailableDate = updateActionAvailableDate
            self.updateActionStatus = updateActionStatus
            self.updateActionStatusModifiedDate = updateActionStatusModifiedDate
        }
    }
}

public struct DescribeUpdateActionsOutput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// Returns a list of update actions
    public var updateActions: [ElastiCacheClientTypes.UpdateAction]?

    public init(
        marker: Swift.String? = nil,
        updateActions: [ElastiCacheClientTypes.UpdateAction]? = nil
    )
    {
        self.marker = marker
        self.updateActions = updateActions
    }
}

public struct DescribeUserGroupsInput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The ID of the user group.
    public var userGroupId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        userGroupId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.userGroupId = userGroupId
    }
}

extension ElastiCacheClientTypes {

    public struct UserGroup: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the user group.
        public var arn: Swift.String?
        /// The current supported value is Redis user.
        public var engine: Swift.String?
        /// The minimum engine version required, which is Redis OSS 6.0
        public var minimumEngineVersion: Swift.String?
        /// A list of updates being applied to the user group.
        public var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
        /// A list of replication groups that the user group can access.
        public var replicationGroups: [Swift.String]?
        /// Indicates which serverless caches the specified user group is associated with. Available for Valkey, Redis OSS and Serverless Memcached only.
        public var serverlessCaches: [Swift.String]?
        /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
        public var status: Swift.String?
        /// The ID of the user group.
        public var userGroupId: Swift.String?
        /// The list of user IDs that belong to the user group.
        public var userIds: [Swift.String]?

        public init(
            arn: Swift.String? = nil,
            engine: Swift.String? = nil,
            minimumEngineVersion: Swift.String? = nil,
            pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
            replicationGroups: [Swift.String]? = nil,
            serverlessCaches: [Swift.String]? = nil,
            status: Swift.String? = nil,
            userGroupId: Swift.String? = nil,
            userIds: [Swift.String]? = nil
        )
        {
            self.arn = arn
            self.engine = engine
            self.minimumEngineVersion = minimumEngineVersion
            self.pendingChanges = pendingChanges
            self.replicationGroups = replicationGroups
            self.serverlessCaches = serverlessCaches
            self.status = status
            self.userGroupId = userGroupId
            self.userIds = userIds
        }
    }
}

public struct DescribeUserGroupsOutput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.>
    public var marker: Swift.String?
    /// Returns a list of user groups.
    public var userGroups: [ElastiCacheClientTypes.UserGroup]?

    public init(
        marker: Swift.String? = nil,
        userGroups: [ElastiCacheClientTypes.UserGroup]? = nil
    )
    {
        self.marker = marker
        self.userGroups = userGroups
    }
}

extension ElastiCacheClientTypes {

    /// Used to streamline results of a search based on the property being filtered.
    public struct Filter: Swift.Sendable {
        /// The property being filtered. For example, UserId.
        /// This member is required.
        public var name: Swift.String?
        /// The property values to filter on. For example, "user-123".
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct DescribeUsersInput: Swift.Sendable {
    /// The engine.
    public var engine: Swift.String?
    /// Filter to determine the list of User IDs to return.
    public var filters: [ElastiCacheClientTypes.Filter]?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The ID of the user.
    public var userId: Swift.String?

    public init(
        engine: Swift.String? = nil,
        filters: [ElastiCacheClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        userId: Swift.String? = nil
    )
    {
        self.engine = engine
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.userId = userId
    }
}

extension ElastiCacheClientTypes {

    public struct User: Swift.Sendable {
        /// Access permissions string used for this user.
        public var accessString: Swift.String?
        /// The Amazon Resource Name (ARN) of the user.
        public var arn: Swift.String?
        /// Denotes whether the user requires a password to authenticate.
        public var authentication: ElastiCacheClientTypes.Authentication?
        /// The current supported value is Redis.
        public var engine: Swift.String?
        /// The minimum engine version required, which is Redis OSS 6.0
        public var minimumEngineVersion: Swift.String?
        /// Indicates the user status. Can be "active", "modifying" or "deleting".
        public var status: Swift.String?
        /// Returns a list of the user group IDs the user belongs to.
        public var userGroupIds: [Swift.String]?
        /// The ID of the user.
        public var userId: Swift.String?
        /// The username of the user.
        public var userName: Swift.String?

        public init(
            accessString: Swift.String? = nil,
            arn: Swift.String? = nil,
            authentication: ElastiCacheClientTypes.Authentication? = nil,
            engine: Swift.String? = nil,
            minimumEngineVersion: Swift.String? = nil,
            status: Swift.String? = nil,
            userGroupIds: [Swift.String]? = nil,
            userId: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accessString = accessString
            self.arn = arn
            self.authentication = authentication
            self.engine = engine
            self.minimumEngineVersion = minimumEngineVersion
            self.status = status
            self.userGroupIds = userGroupIds
            self.userId = userId
            self.userName = userName
        }
    }
}

public struct DescribeUsersOutput: Swift.Sendable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    public var marker: Swift.String?
    /// A list of users.
    public var users: [ElastiCacheClientTypes.User]?

    public init(
        marker: Swift.String? = nil,
        users: [ElastiCacheClientTypes.User]? = nil
    )
    {
        self.marker = marker
        self.users = users
    }
}

public struct DisassociateGlobalReplicationGroupInput: Swift.Sendable {
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?
    /// The name of the secondary cluster you wish to remove from the Global datastore
    /// This member is required.
    public var replicationGroupId: Swift.String?
    /// The Amazon region of secondary cluster you wish to remove from the Global datastore
    /// This member is required.
    public var replicationGroupRegion: Swift.String?

    public init(
        globalReplicationGroupId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        replicationGroupRegion: Swift.String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.replicationGroupId = replicationGroupId
        self.replicationGroupRegion = replicationGroupRegion
    }
}

public struct DisassociateGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

public struct ExportServerlessCacheSnapshotInput: Swift.Sendable {
    /// Name of the Amazon S3 bucket to export the snapshot to. The Amazon S3 bucket must also be in same region as the snapshot. Available for Valkey and Redis OSS only.
    /// This member is required.
    public var s3BucketName: Swift.String?
    /// The identifier of the serverless cache snapshot to be exported to S3. Available for Valkey and Redis OSS only.
    /// This member is required.
    public var serverlessCacheSnapshotName: Swift.String?

    public init(
        s3BucketName: Swift.String? = nil,
        serverlessCacheSnapshotName: Swift.String? = nil
    )
    {
        self.s3BucketName = s3BucketName
        self.serverlessCacheSnapshotName = serverlessCacheSnapshotName
    }
}

public struct ExportServerlessCacheSnapshotOutput: Swift.Sendable {
    /// The state of a serverless cache at a specific point in time, to the millisecond. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot?

    public init(
        serverlessCacheSnapshot: ElastiCacheClientTypes.ServerlessCacheSnapshot? = nil
    )
    {
        self.serverlessCacheSnapshot = serverlessCacheSnapshot
    }
}

public struct FailoverGlobalReplicationGroupInput: Swift.Sendable {
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?
    /// The Amazon region of the primary cluster of the Global datastore
    /// This member is required.
    public var primaryRegion: Swift.String?
    /// The name of the primary replication group
    /// This member is required.
    public var primaryReplicationGroupId: Swift.String?

    public init(
        globalReplicationGroupId: Swift.String? = nil,
        primaryRegion: Swift.String? = nil,
        primaryReplicationGroupId: Swift.String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.primaryRegion = primaryRegion
        self.primaryReplicationGroupId = primaryReplicationGroupId
    }
}

public struct FailoverGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

extension ElastiCacheClientTypes {

    /// A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster.
    public struct ReshardingConfiguration: Swift.Sendable {
        /// Either the ElastiCache supplied 4-digit id or a user supplied id for the node group these configuration values apply to.
        public var nodeGroupId: Swift.String?
        /// A list of preferred availability zones for the nodes in this cluster.
        public var preferredAvailabilityZones: [Swift.String]?

        public init(
            nodeGroupId: Swift.String? = nil,
            preferredAvailabilityZones: [Swift.String]? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.preferredAvailabilityZones = preferredAvailabilityZones
        }
    }
}

extension ElastiCacheClientTypes {

    /// A list of the replication groups
    public struct RegionalConfiguration: Swift.Sendable {
        /// The name of the secondary cluster
        /// This member is required.
        public var replicationGroupId: Swift.String?
        /// The Amazon region where the cluster is stored
        /// This member is required.
        public var replicationGroupRegion: Swift.String?
        /// A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster.
        /// This member is required.
        public var reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]?

        public init(
            replicationGroupId: Swift.String? = nil,
            replicationGroupRegion: Swift.String? = nil,
            reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]? = nil
        )
        {
            self.replicationGroupId = replicationGroupId
            self.replicationGroupRegion = replicationGroupRegion
            self.reshardingConfiguration = reshardingConfiguration
        }
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInput: Swift.Sendable {
    /// Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?
    /// Total number of node groups you want
    /// This member is required.
    public var nodeGroupCount: Swift.Int?
    /// Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore
    public var regionalConfigurations: [ElastiCacheClientTypes.RegionalConfiguration]?

    public init(
        applyImmediately: Swift.Bool? = nil,
        globalReplicationGroupId: Swift.String? = nil,
        nodeGroupCount: Swift.Int? = nil,
        regionalConfigurations: [ElastiCacheClientTypes.RegionalConfiguration]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalReplicationGroupId = globalReplicationGroupId
        self.nodeGroupCount = nodeGroupCount
        self.regionalConfigurations = regionalConfigurations
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

/// The KMS key supplied is not valid.
public struct InvalidKMSKeyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidKMSKeyFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct IncreaseReplicaCountInput: Swift.Sendable {
    /// If True, the number of replica nodes is increased immediately. ApplyImmediately=False is not currently supported.
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// The number of read replica nodes you want at the completion of this operation. For Valkey or Redis OSS (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Valkey or Redis OSS (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
    public var newReplicaCount: Swift.Int?
    /// A list of ConfigureShard objects that can be used to configure each shard in a Valkey or Redis OSS (cluster mode enabled) replication group. The ConfigureShard has three members: NewReplicaCount, NodeGroupId, and PreferredAvailabilityZones.
    public var replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]?
    /// The id of the replication group to which you want to add replica nodes.
    /// This member is required.
    public var replicationGroupId: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        newReplicaCount: Swift.Int? = nil,
        replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.newReplicaCount = newReplicaCount
        self.replicaConfiguration = replicaConfiguration
        self.replicationGroupId = replicationGroupId
    }
}

public struct IncreaseReplicaCountOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

/// The input parameters for the ListAllowedNodeTypeModifications operation.
public struct ListAllowedNodeTypeModificationsInput: Swift.Sendable {
    /// The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to. You must provide a value for either the CacheClusterId or the ReplicationGroupId.
    public var cacheClusterId: Swift.String?
    /// The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to. You must provide a value for either the CacheClusterId or the ReplicationGroupId.
    public var replicationGroupId: Swift.String?

    public init(
        cacheClusterId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.replicationGroupId = replicationGroupId
    }
}

/// Represents the allowed node types you can use to modify your cluster or replication group.
public struct ListAllowedNodeTypeModificationsOutput: Swift.Sendable {
    /// A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group. When scaling down a Valkey or Redis OSS cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
    public var scaleDownModifications: [Swift.String]?
    /// A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group. When scaling up a Valkey or Redis OSS cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
    public var scaleUpModifications: [Swift.String]?

    public init(
        scaleDownModifications: [Swift.String]? = nil,
        scaleUpModifications: [Swift.String]? = nil
    )
    {
        self.scaleDownModifications = scaleDownModifications
        self.scaleUpModifications = scaleUpModifications
    }
}

/// The input parameters for the ListTagsForResource operation.
public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

/// Represents the output from the AddTagsToResource, ListTagsForResource, and RemoveTagsFromResource operations.
public struct ListTagsForResourceOutput: Swift.Sendable {
    /// A list of tags as key-value pairs.
    public var tagList: [ElastiCacheClientTypes.Tag]?

    public init(
        tagList: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

extension ElastiCacheClientTypes {

    public enum AuthTokenUpdateStrategyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case rotate
        case `set`
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthTokenUpdateStrategyType] {
            return [
                .delete,
                .rotate,
                .set
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .rotate: return "ROTATE"
            case .set: return "SET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a ModifyCacheCluster operation.
public struct ModifyCacheClusterInput: Swift.Sendable {
    /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cluster. If false, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. If you perform a ModifyCacheCluster before a pending modification is applied, the pending modification is replaced by the newer modification. Valid values: true | false Default: false
    public var applyImmediately: Swift.Bool?
    /// Reserved parameter. The password used to access a password protected server. This parameter must be specified with the auth-token-update parameter. Password constraints:
    ///
    /// * Must be only printable ASCII characters
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length
    ///
    /// * Cannot contain any of the following characters: '/', '"', or '@', '%'
    ///
    ///
    /// For more information, see AUTH password at [AUTH](http://redis.io/commands/AUTH).
    public var authToken: Swift.String?
    /// Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:
    ///
    /// * ROTATE - default, if no update strategy is provided
    ///
    /// * SET - allowed only after ROTATE
    ///
    /// * DELETE - allowed only when transitioning to RBAC
    ///
    ///
    /// For more information, see [Authenticating Users with AUTH](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html)
    public var authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType?
    ///  If you are running Valkey 7.2 or Redis OSS engine version 6.0 or later, set this parameter to yes to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones. Valid values: single-az | cross-az. This option is only supported for Memcached clusters. You cannot specify single-az if the Memcached cluster already has cache nodes in different Availability Zones. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes are located in different Availability Zones.
    public var azMode: ElastiCacheClientTypes.AZMode?
    /// The cluster identifier. This value is stored as a lowercase string.
    /// This member is required.
    public var cacheClusterId: Swift.String?
    /// A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when NumCacheNodes is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of NumCacheNodes in the request. For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this ModifyCacheCluster call is 5, you must list 2 (7 - 5) cache node IDs to remove.
    public var cacheNodeIdsToRemove: [Swift.String]?
    /// A valid cache node type that you want to scale this cluster up to.
    public var cacheNodeType: Swift.String?
    /// The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
    public var cacheParameterGroupName: Swift.String?
    /// A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible. You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".
    public var cacheSecurityGroupNames: [Swift.String]?
    /// Modifies the engine listed in a cluster message. The options are redis, memcached or valkey.
    public var engine: Swift.String?
    /// The upgraded version of the cache engine to be run on the cache nodes. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version.
    public var engineVersion: Swift.String?
    /// The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
    public var ipDiscovery: ElastiCacheClientTypes.IpDiscovery?
    /// Specifies the destination, format and type of the logs.
    public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// This option is only supported on Memcached clusters. The list of Availability Zones where the new Memcached cache nodes are created. This parameter is only valid when NumCacheNodes in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request. Scenarios:
    ///
    /// * Scenario 1: You have 3 active nodes and wish to add 2 nodes. Specify NumCacheNodes=5 (3 + 2) and optionally specify two Availability Zones for the two new nodes.
    ///
    /// * Scenario 2: You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify NumCacheNodes=6 ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.
    ///
    /// * Scenario 3: You want to cancel all pending operations. Specify NumCacheNodes=3 to cancel all pending operations.
    ///
    ///
    /// The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting NumCacheNodes to the number of current nodes. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of [Cache Node Considerations for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html). Impact of new add/remove requests upon pending requests
    ///
    /// * Scenario-1
    ///
    /// * Pending Action: Delete
    ///
    /// * New Request: Delete
    ///
    /// * Result: The new delete, pending or immediate, replaces the pending delete.
    ///
    ///
    ///
    ///
    /// * Scenario-2
    ///
    /// * Pending Action: Delete
    ///
    /// * New Request: Create
    ///
    /// * Result: The new create, pending or immediate, replaces the pending delete.
    ///
    ///
    ///
    ///
    /// * Scenario-3
    ///
    /// * Pending Action: Create
    ///
    /// * New Request: Delete
    ///
    /// * Result: The new delete, pending or immediate, replaces the pending create.
    ///
    ///
    ///
    ///
    /// * Scenario-4
    ///
    /// * Pending Action: Create
    ///
    /// * New Request: Create
    ///
    /// * Result: The new create is added to the pending create. Important: If the new create request is Apply Immediately - Yes, all creates are performed immediately. If the new create request is Apply Immediately - No, all creates are pending.
    public var newAvailabilityZones: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent. The Amazon SNS topic owner must be same as the cluster owner.
    public var notificationTopicArn: Swift.String?
    /// The status of the Amazon SNS notification topic. Notifications are sent only if the status is active. Valid values: active | inactive
    public var notificationTopicStatus: Swift.String?
    /// The number of cache nodes that the cluster should have. If the value for NumCacheNodes is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled. If you are removing cache nodes, you must use the CacheNodeIdsToRemove parameter to provide the IDs of the specific cache nodes to remove. For clusters running Valkey or Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40. Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see ApplyImmediately). A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the ModifyCacheCluster request and set NumCacheNodes equal to the number of cache nodes currently in the cluster.
    public var numCacheNodes: Swift.Int?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    ///
    /// * sun
    ///
    /// * mon
    ///
    /// * tue
    ///
    /// * wed
    ///
    /// * thu
    ///
    /// * fri
    ///
    /// * sat
    ///
    ///
    /// Example: sun:23:00-mon:01:30
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies the VPC Security Groups associated with the cluster. This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).
    public var securityGroupIds: [Swift.String]?
    /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
    public var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.
    public var snapshotWindow: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        authToken: Swift.String? = nil,
        authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        azMode: ElastiCacheClientTypes.AZMode? = nil,
        cacheClusterId: Swift.String? = nil,
        cacheNodeIdsToRemove: [Swift.String]? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        ipDiscovery: ElastiCacheClientTypes.IpDiscovery? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        newAvailabilityZones: [Swift.String]? = nil,
        notificationTopicArn: Swift.String? = nil,
        notificationTopicStatus: Swift.String? = nil,
        numCacheNodes: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.azMode = azMode
        self.cacheClusterId = cacheClusterId
        self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.engine = engine
        self.engineVersion = engineVersion
        self.ipDiscovery = ipDiscovery
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.newAvailabilityZones = newAvailabilityZones
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.numCacheNodes = numCacheNodes
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
    }
}

public struct ModifyCacheClusterOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific cluster.
    public var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init(
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

extension ElastiCacheClientTypes {

    /// Describes a name-value pair that is used to update the value of a parameter.
    public struct ParameterNameValue: Swift.Sendable {
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The value of the parameter.
        public var parameterValue: Swift.String?

        public init(
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }
}

/// Represents the input of a ModifyCacheParameterGroup operation.
public struct ModifyCacheParameterGroupInput: Swift.Sendable {
    /// The name of the cache parameter group to modify.
    /// This member is required.
    public var cacheParameterGroupName: Swift.String?
    /// An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
    /// This member is required.
    public var parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]?

    public init(
        cacheParameterGroupName: Swift.String? = nil,
        parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterNameValues = parameterNameValues
    }
}

/// Represents the output of one of the following operations:
///
/// * ModifyCacheParameterGroup
///
/// * ResetCacheParameterGroup
public struct ModifyCacheParameterGroupOutput: Swift.Sendable {
    /// The name of the cache parameter group.
    public var cacheParameterGroupName: Swift.String?

    public init(
        cacheParameterGroupName: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

/// The requested subnet is being used by another cache subnet group.
public struct SubnetInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a ModifyCacheSubnetGroup operation.
public struct ModifyCacheSubnetGroupInput: Swift.Sendable {
    /// A description of the cache subnet group.
    public var cacheSubnetGroupDescription: Swift.String?
    /// The name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup
    /// This member is required.
    public var cacheSubnetGroupName: Swift.String?
    /// The EC2 subnet IDs for the cache subnet group.
    public var subnetIds: [Swift.String]?

    public init(
        cacheSubnetGroupDescription: Swift.String? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnetIds = subnetIds
    }
}

public struct ModifyCacheSubnetGroupOutput: Swift.Sendable {
    /// Represents the output of one of the following operations:
    ///
    /// * CreateCacheSubnetGroup
    ///
    /// * ModifyCacheSubnetGroup
    public var cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup?

    public init(
        cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup? = nil
    )
    {
        self.cacheSubnetGroup = cacheSubnetGroup
    }
}

public struct ModifyGlobalReplicationGroupInput: Swift.Sendable {
    /// This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.
    public var automaticFailoverEnabled: Swift.Bool?
    /// A valid cache node type that you want to scale this Global datastore to.
    public var cacheNodeType: Swift.String?
    /// The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore.
    public var cacheParameterGroupName: Swift.String?
    /// Modifies the engine listed in a global replication group message. The options are redis, memcached or valkey.
    public var engine: Swift.String?
    /// The upgraded version of the cache engine to be run on the clusters in the Global datastore.
    public var engineVersion: Swift.String?
    /// A description of the Global datastore
    public var globalReplicationGroupDescription: Swift.String?
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        automaticFailoverEnabled: Swift.Bool? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalReplicationGroupDescription: Swift.String? = nil,
        globalReplicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupId = globalReplicationGroupId
    }
}

public struct ModifyGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

/// Represents the input of a ModifyReplicationGroups operation.
public struct ModifyReplicationGroupInput: Swift.Sendable {
    /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the replication group. If false, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. Valid values: true | false Default: false
    public var applyImmediately: Swift.Bool?
    /// Reserved parameter. The password used to access a password protected server. This parameter must be specified with the auth-token-update-strategy  parameter. Password constraints:
    ///
    /// * Must be only printable ASCII characters
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length
    ///
    /// * Cannot contain any of the following characters: '/', '"', or '@', '%'
    ///
    ///
    /// For more information, see AUTH password at [AUTH](http://redis.io/commands/AUTH).
    public var authToken: Swift.String?
    /// Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:
    ///
    /// * ROTATE - default, if no update strategy is provided
    ///
    /// * SET - allowed only after ROTATE
    ///
    /// * DELETE - allowed only when transitioning to RBAC
    ///
    ///
    /// For more information, see [Authenticating Users with AUTH](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html)
    public var authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType?
    ///  If you are running Valkey or Redis OSS engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. Valid values: true | false
    public var automaticFailoverEnabled: Swift.Bool?
    /// A valid cache node type that you want to scale this replication group to.
    public var cacheNodeType: Swift.String?
    /// The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
    public var cacheParameterGroupName: Swift.String?
    /// A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible. This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be Default.
    public var cacheSecurityGroupNames: [Swift.String]?
    /// Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Valkey or Redis OSS clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Valkey or Redis OSS clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.
    public var clusterMode: ElastiCacheClientTypes.ClusterMode?
    /// Modifies the engine listed in a replication group message. The options are redis, memcached or valkey.
    public var engine: Swift.String?
    /// The upgraded version of the cache engine to be run on the clusters in the replication group. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version.
    public var engineVersion: Swift.String?
    /// The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Valkey 7.2 and above, Redis OSS engine version 6.2 and above or Memcached engine version 1.6.6 and above on all instances built on the [Nitro system](http://aws.amazon.com/ec2/nitro/).
    public var ipDiscovery: ElastiCacheClientTypes.IpDiscovery?
    /// Specifies the destination, format and type of the logs.
    public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// A flag to indicate MultiAZ is enabled.
    public var multiAZEnabled: Swift.Bool?
    /// Deprecated. This parameter is not used.
    @available(*, deprecated)
    public var nodeGroupId: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent. The Amazon SNS topic owner must be same as the replication group owner.
    public var notificationTopicArn: Swift.String?
    /// The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is active. Valid values: active | inactive
    public var notificationTopicStatus: Swift.String?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    ///
    /// * sun
    ///
    /// * mon
    ///
    /// * tue
    ///
    /// * wed
    ///
    /// * thu
    ///
    /// * fri
    ///
    /// * sat
    ///
    ///
    /// Example: sun:23:00-mon:01:30
    public var preferredMaintenanceWindow: Swift.String?
    /// For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
    public var primaryClusterId: Swift.String?
    /// Removes the user group associated with this replication group.
    public var removeUserGroups: Swift.Bool?
    /// A description for the replication group. Maximum length is 255 characters.
    public var replicationGroupDescription: Swift.String?
    /// The identifier of the replication group to modify.
    /// This member is required.
    public var replicationGroupId: Swift.String?
    /// Specifies the VPC Security Groups associated with the clusters in the replication group. This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).
    public var securityGroupIds: [Swift.String]?
    /// The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
    public var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by SnapshottingClusterId. Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    public var snapshotWindow: Swift.String?
    /// The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Valkey or Redis OSS (cluster mode enabled) replication groups.
    public var snapshottingClusterId: Swift.String?
    /// A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set TransitEncryptionMode to preferred.
    public var transitEncryptionEnabled: Swift.Bool?
    /// A setting that allows you to migrate your clients to use in-transit encryption, with no downtime. You must set TransitEncryptionEnabled to true, for your existing cluster, and set TransitEncryptionMode to preferred in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Valkey or Redis OSS clients to use encrypted connections you can set the value to required to allow encrypted connections only. Setting TransitEncryptionMode to required is a two-step process that requires you to first set the TransitEncryptionMode to preferred, after that you can set TransitEncryptionMode to required.
    public var transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode?
    /// The ID of the user group you are associating with the replication group.
    public var userGroupIdsToAdd: [Swift.String]?
    /// The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.
    public var userGroupIdsToRemove: [Swift.String]?

    public init(
        applyImmediately: Swift.Bool? = nil,
        authToken: Swift.String? = nil,
        authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        automaticFailoverEnabled: Swift.Bool? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        clusterMode: ElastiCacheClientTypes.ClusterMode? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        ipDiscovery: ElastiCacheClientTypes.IpDiscovery? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Swift.Bool? = nil,
        nodeGroupId: Swift.String? = nil,
        notificationTopicArn: Swift.String? = nil,
        notificationTopicStatus: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        primaryClusterId: Swift.String? = nil,
        removeUserGroups: Swift.Bool? = nil,
        replicationGroupDescription: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil,
        snapshottingClusterId: Swift.String? = nil,
        transitEncryptionEnabled: Swift.Bool? = nil,
        transitEncryptionMode: ElastiCacheClientTypes.TransitEncryptionMode? = nil,
        userGroupIdsToAdd: [Swift.String]? = nil,
        userGroupIdsToRemove: [Swift.String]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.clusterMode = clusterMode
        self.engine = engine
        self.engineVersion = engineVersion
        self.ipDiscovery = ipDiscovery
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.nodeGroupId = nodeGroupId
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.removeUserGroups = removeUserGroups
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.snapshottingClusterId = snapshottingClusterId
        self.transitEncryptionEnabled = transitEncryptionEnabled
        self.transitEncryptionMode = transitEncryptionMode
        self.userGroupIdsToAdd = userGroupIdsToAdd
        self.userGroupIdsToRemove = userGroupIdsToRemove
    }
}

public struct ModifyReplicationGroupOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

/// Represents the input for a ModifyReplicationGroupShardConfiguration operation.
public struct ModifyReplicationGroupShardConfigurationInput: Swift.Sendable {
    /// Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true. Value: true
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// The number of node groups (shards) that results from the modification of the shard configuration.
    /// This member is required.
    public var nodeGroupCount: Swift.Int?
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. NodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache will attempt to remove all node groups listed by NodeGroupsToRemove from the cluster.
    public var nodeGroupsToRemove: [Swift.String]?
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. NodeGroupsToRetain is a list of NodeGroupIds to retain in the cluster. ElastiCache will attempt to remove all node groups except those listed by NodeGroupsToRetain from the cluster.
    public var nodeGroupsToRetain: [Swift.String]?
    /// The name of the Valkey or Redis OSS (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
    /// This member is required.
    public var replicationGroupId: Swift.String?
    /// Specifies the preferred availability zones for each node group in the cluster. If the value of NodeGroupCount is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you. You can specify this parameter only if the value of NodeGroupCount is greater than the current number of node groups (shards).
    public var reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]?

    public init(
        applyImmediately: Swift.Bool? = nil,
        nodeGroupCount: Swift.Int? = nil,
        nodeGroupsToRemove: [Swift.String]? = nil,
        nodeGroupsToRetain: [Swift.String]? = nil,
        replicationGroupId: Swift.String? = nil,
        reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.nodeGroupCount = nodeGroupCount
        self.nodeGroupsToRemove = nodeGroupsToRemove
        self.nodeGroupsToRetain = nodeGroupsToRetain
        self.replicationGroupId = replicationGroupId
        self.reshardingConfiguration = reshardingConfiguration
    }
}

public struct ModifyReplicationGroupShardConfigurationOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

public struct ModifyServerlessCacheInput: Swift.Sendable {
    /// Modify the cache usage limit for the serverless cache.
    public var cacheUsageLimits: ElastiCacheClientTypes.CacheUsageLimits?
    /// The daily time during which Elasticache begins taking a daily snapshot of the serverless cache. Available for Valkey, Redis OSS and Serverless Memcached only. The default is NULL, i.e. the existing snapshot time configured for the cluster is not removed.
    public var dailySnapshotTime: Swift.String?
    /// User provided description for the serverless cache. Default = NULL, i.e. the existing description is not removed/modified. The description has a maximum length of 255 characters.
    public var description: Swift.String?
    /// Modifies the engine listed in a serverless cache request. The options are redis, memcached or valkey.
    public var engine: Swift.String?
    /// Modifies the engine vesion listed in a serverless cache request.
    public var majorEngineVersion: Swift.String?
    /// The identifier of the UserGroup to be removed from association with the Valkey and Redis OSS serverless cache. Available for Valkey and Redis OSS only. Default is NULL.
    public var removeUserGroup: Swift.Bool?
    /// The new list of VPC security groups to be associated with the serverless cache. Populating this list means the current VPC security groups will be removed. This security group is used to authorize traffic access for the VPC end-point (private-link). Default = NULL - the existing list of VPC security groups is not removed.
    public var securityGroupIds: [Swift.String]?
    /// User-provided identifier for the serverless cache to be modified.
    /// This member is required.
    public var serverlessCacheName: Swift.String?
    /// The number of days for which Elasticache retains automatic snapshots before deleting them. Available for Valkey, Redis OSS and Serverless Memcached only. Default = NULL, i.e. the existing snapshot-retention-limit will not be removed or modified. The maximum value allowed is 35 days.
    public var snapshotRetentionLimit: Swift.Int?
    /// The identifier of the UserGroup to be associated with the serverless cache. Available for Valkey and Redis OSS only. Default is NULL - the existing UserGroup is not removed.
    public var userGroupId: Swift.String?

    public init(
        cacheUsageLimits: ElastiCacheClientTypes.CacheUsageLimits? = nil,
        dailySnapshotTime: Swift.String? = nil,
        description: Swift.String? = nil,
        engine: Swift.String? = nil,
        majorEngineVersion: Swift.String? = nil,
        removeUserGroup: Swift.Bool? = nil,
        securityGroupIds: [Swift.String]? = nil,
        serverlessCacheName: Swift.String? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        userGroupId: Swift.String? = nil
    )
    {
        self.cacheUsageLimits = cacheUsageLimits
        self.dailySnapshotTime = dailySnapshotTime
        self.description = description
        self.engine = engine
        self.majorEngineVersion = majorEngineVersion
        self.removeUserGroup = removeUserGroup
        self.securityGroupIds = securityGroupIds
        self.serverlessCacheName = serverlessCacheName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.userGroupId = userGroupId
    }
}

public struct ModifyServerlessCacheOutput: Swift.Sendable {
    /// The response for the attempt to modify the serverless cache.
    public var serverlessCache: ElastiCacheClientTypes.ServerlessCache?

    public init(
        serverlessCache: ElastiCacheClientTypes.ServerlessCache? = nil
    )
    {
        self.serverlessCache = serverlessCache
    }
}

public struct ModifyUserInput: Swift.Sendable {
    /// Access permissions string used for this user.
    public var accessString: Swift.String?
    /// Adds additional user permissions to the access string.
    public var appendAccessString: Swift.String?
    /// Specifies how to authenticate the user.
    public var authenticationMode: ElastiCacheClientTypes.AuthenticationMode?
    /// Indicates no password is required for the user.
    public var noPasswordRequired: Swift.Bool?
    /// The passwords belonging to the user. You are allowed up to two.
    public var passwords: [Swift.String]?
    /// The ID of the user.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accessString: Swift.String? = nil,
        appendAccessString: Swift.String? = nil,
        authenticationMode: ElastiCacheClientTypes.AuthenticationMode? = nil,
        noPasswordRequired: Swift.Bool? = nil,
        passwords: [Swift.String]? = nil,
        userId: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.appendAccessString = appendAccessString
        self.authenticationMode = authenticationMode
        self.noPasswordRequired = noPasswordRequired
        self.passwords = passwords
        self.userId = userId
    }
}

public struct ModifyUserOutput: Swift.Sendable {
    /// Access permissions string used for this user.
    public var accessString: Swift.String?
    /// The Amazon Resource Name (ARN) of the user.
    public var arn: Swift.String?
    /// Denotes whether the user requires a password to authenticate.
    public var authentication: ElastiCacheClientTypes.Authentication?
    /// The current supported value is Redis.
    public var engine: Swift.String?
    /// The minimum engine version required, which is Redis OSS 6.0
    public var minimumEngineVersion: Swift.String?
    /// Indicates the user status. Can be "active", "modifying" or "deleting".
    public var status: Swift.String?
    /// Returns a list of the user group IDs the user belongs to.
    public var userGroupIds: [Swift.String]?
    /// The ID of the user.
    public var userId: Swift.String?
    /// The username of the user.
    public var userName: Swift.String?

    public init(
        accessString: Swift.String? = nil,
        arn: Swift.String? = nil,
        authentication: ElastiCacheClientTypes.Authentication? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        userGroupIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.arn = arn
        self.authentication = authentication
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

public struct ModifyUserGroupInput: Swift.Sendable {
    /// The ID of the user group.
    /// This member is required.
    public var userGroupId: Swift.String?
    /// The list of user IDs to add to the user group.
    public var userIdsToAdd: [Swift.String]?
    /// The list of user IDs to remove from the user group.
    public var userIdsToRemove: [Swift.String]?

    public init(
        userGroupId: Swift.String? = nil,
        userIdsToAdd: [Swift.String]? = nil,
        userIdsToRemove: [Swift.String]? = nil
    )
    {
        self.userGroupId = userGroupId
        self.userIdsToAdd = userIdsToAdd
        self.userIdsToRemove = userIdsToRemove
    }
}

public struct ModifyUserGroupOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the user group.
    public var arn: Swift.String?
    /// The current supported value is Redis user.
    public var engine: Swift.String?
    /// The minimum engine version required, which is Redis OSS 6.0
    public var minimumEngineVersion: Swift.String?
    /// A list of updates being applied to the user group.
    public var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    /// A list of replication groups that the user group can access.
    public var replicationGroups: [Swift.String]?
    /// Indicates which serverless caches the specified user group is associated with. Available for Valkey, Redis OSS and Serverless Memcached only.
    public var serverlessCaches: [Swift.String]?
    /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
    public var status: Swift.String?
    /// The ID of the user group.
    public var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    public var userIds: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
        replicationGroups: [Swift.String]? = nil,
        serverlessCaches: [Swift.String]? = nil,
        status: Swift.String? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.serverlessCaches = serverlessCaches
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

/// You already have a reservation with the given identifier.
public struct ReservedCacheNodeAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedCacheNodeAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be processed because it would exceed the user's cache node quota.
public struct ReservedCacheNodeQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedCacheNodeQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a PurchaseReservedCacheNodesOffering operation.
public struct PurchaseReservedCacheNodesOfferingInput: Swift.Sendable {
    /// The number of cache node instances to reserve. Default: 1
    public var cacheNodeCount: Swift.Int?
    /// A customer-specified identifier to track this reservation. The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation. Example: myreservationID
    public var reservedCacheNodeId: Swift.String?
    /// The ID of the reserved cache node offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    /// This member is required.
    public var reservedCacheNodesOfferingId: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    public var tags: [ElastiCacheClientTypes.Tag]?

    public init(
        cacheNodeCount: Swift.Int? = nil,
        reservedCacheNodeId: Swift.String? = nil,
        reservedCacheNodesOfferingId: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheNodeCount = cacheNodeCount
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        self.tags = tags
    }
}

public struct PurchaseReservedCacheNodesOfferingOutput: Swift.Sendable {
    /// Represents the output of a PurchaseReservedCacheNodesOffering operation.
    public var reservedCacheNode: ElastiCacheClientTypes.ReservedCacheNode?

    public init(
        reservedCacheNode: ElastiCacheClientTypes.ReservedCacheNode? = nil
    )
    {
        self.reservedCacheNode = reservedCacheNode
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupInput: Swift.Sendable {
    /// If True, redistribution is applied immediately.
    /// This member is required.
    public var applyImmediately: Swift.Bool?
    /// The name of the Global datastore
    /// This member is required.
    public var globalReplicationGroupId: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        globalReplicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalReplicationGroupId = globalReplicationGroupId
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupOutput: Swift.Sendable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init(
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

/// Represents the input of a RebootCacheCluster operation.
public struct RebootCacheClusterInput: Swift.Sendable {
    /// The cluster identifier. This parameter is stored as a lowercase string.
    /// This member is required.
    public var cacheClusterId: Swift.String?
    /// A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
    /// This member is required.
    public var cacheNodeIdsToReboot: [Swift.String]?

    public init(
        cacheClusterId: Swift.String? = nil,
        cacheNodeIdsToReboot: [Swift.String]? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
    }
}

public struct RebootCacheClusterOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific cluster.
    public var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init(
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

/// The requested tag was not found on this resource.
public struct TagNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a RemoveTagsFromResource operation.
public struct RemoveTagsFromResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var resourceName: Swift.String?
    /// A list of TagKeys identifying the tags you want removed from the named resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

/// Represents the output from the AddTagsToResource, ListTagsForResource, and RemoveTagsFromResource operations.
public struct RemoveTagsFromResourceOutput: Swift.Sendable {
    /// A list of tags as key-value pairs.
    public var tagList: [ElastiCacheClientTypes.Tag]?

    public init(
        tagList: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

/// Represents the input of a ResetCacheParameterGroup operation.
public struct ResetCacheParameterGroupInput: Swift.Sendable {
    /// The name of the cache parameter group to reset.
    /// This member is required.
    public var cacheParameterGroupName: Swift.String?
    /// An array of parameter names to reset to their default values. If ResetAllParameters is true, do not use ParameterNameValues. If ResetAllParameters is false, you must specify the name of at least one parameter to reset.
    public var parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]?
    /// If true, all parameters in the cache parameter group are reset to their default values. If false, only the parameters listed by ParameterNameValues are reset to their default values. Valid values: true | false
    public var resetAllParameters: Swift.Bool?

    public init(
        cacheParameterGroupName: Swift.String? = nil,
        parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterNameValues = parameterNameValues
        self.resetAllParameters = resetAllParameters
    }
}

/// Represents the output of one of the following operations:
///
/// * ModifyCacheParameterGroup
///
/// * ResetCacheParameterGroup
public struct ResetCacheParameterGroupOutput: Swift.Sendable {
    /// The name of the cache parameter group.
    public var cacheParameterGroupName: Swift.String?

    public init(
        cacheParameterGroupName: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

/// The specified Amazon EC2 security group is not authorized for the specified cache security group.
public struct AuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a RevokeCacheSecurityGroupIngress operation.
public struct RevokeCacheSecurityGroupIngressInput: Swift.Sendable {
    /// The name of the cache security group to revoke ingress from.
    /// This member is required.
    public var cacheSecurityGroupName: Swift.String?
    /// The name of the Amazon EC2 security group to revoke access from.
    /// This member is required.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
    /// This member is required.
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cacheSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

public struct RevokeCacheSecurityGroupIngressOutput: Swift.Sendable {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    public var cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?

    public init(
        cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

/// The targeted replication group is not available.
public struct ReplicationGroupAlreadyUnderMigrationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReplicationGroupAlreadyUnderMigrationFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElastiCacheClientTypes {

    /// The endpoint from which data should be migrated.
    public struct CustomerNodeEndpoint: Swift.Sendable {
        /// The address of the node endpoint
        public var address: Swift.String?
        /// The port of the node endpoint
        public var port: Swift.Int?

        public init(
            address: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.port = port
        }
    }
}

public struct StartMigrationInput: Swift.Sendable {
    /// List of endpoints from which data should be migrated. For Valkey or Redis OSS (cluster mode disabled), the list should have only one element.
    /// This member is required.
    public var customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]?
    /// The ID of the replication group to which data should be migrated.
    /// This member is required.
    public var replicationGroupId: Swift.String?

    public init(
        customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.customerNodeEndpointList = customerNodeEndpointList
        self.replicationGroupId = replicationGroupId
    }
}

public struct StartMigrationOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

/// The customer has exceeded the allowed rate of API calls.
public struct APICallRateForCustomerExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "APICallRateForCustomerExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The node group specified by the NodeGroupId parameter could not be found. Please verify that the node group exists and that you spelled the NodeGroupId value correctly.
public struct NodeGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NodeGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The TestFailover action is not available.
public struct TestFailoverNotAvailableFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TestFailoverNotAvailableFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct TestFailoverInput: Swift.Sendable {
    /// The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 15 node groups in any rolling 24-hour period.
    /// This member is required.
    public var nodeGroupId: Swift.String?
    /// The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
    /// This member is required.
    public var replicationGroupId: Swift.String?

    public init(
        nodeGroupId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.replicationGroupId = replicationGroupId
    }
}

public struct TestFailoverOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

public struct TestMigrationInput: Swift.Sendable {
    /// List of endpoints from which data should be migrated. List should have only one element.
    /// This member is required.
    public var customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]?
    /// The ID of the replication group to which data is to be migrated.
    /// This member is required.
    public var replicationGroupId: Swift.String?

    public init(
        customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.customerNodeEndpointList = customerNodeEndpointList
        self.replicationGroupId = replicationGroupId
    }
}

public struct TestMigrationOutput: Swift.Sendable {
    /// Contains all of the attributes of a specific Valkey or Redis OSS replication group.
    public var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init(
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

extension AddTagsToResourceInput {

    static func urlPathProvider(_ value: AddTagsToResourceInput) -> Swift.String? {
        return "/"
    }
}

extension AuthorizeCacheSecurityGroupIngressInput {

    static func urlPathProvider(_ value: AuthorizeCacheSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

extension BatchApplyUpdateActionInput {

    static func urlPathProvider(_ value: BatchApplyUpdateActionInput) -> Swift.String? {
        return "/"
    }
}

extension BatchStopUpdateActionInput {

    static func urlPathProvider(_ value: BatchStopUpdateActionInput) -> Swift.String? {
        return "/"
    }
}

extension CompleteMigrationInput {

    static func urlPathProvider(_ value: CompleteMigrationInput) -> Swift.String? {
        return "/"
    }
}

extension CopyServerlessCacheSnapshotInput {

    static func urlPathProvider(_ value: CopyServerlessCacheSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CopySnapshotInput {

    static func urlPathProvider(_ value: CopySnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCacheClusterInput {

    static func urlPathProvider(_ value: CreateCacheClusterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCacheParameterGroupInput {

    static func urlPathProvider(_ value: CreateCacheParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCacheSecurityGroupInput {

    static func urlPathProvider(_ value: CreateCacheSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCacheSubnetGroupInput {

    static func urlPathProvider(_ value: CreateCacheSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: CreateGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateReplicationGroupInput {

    static func urlPathProvider(_ value: CreateReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServerlessCacheInput {

    static func urlPathProvider(_ value: CreateServerlessCacheInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServerlessCacheSnapshotInput {

    static func urlPathProvider(_ value: CreateServerlessCacheSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSnapshotInput {

    static func urlPathProvider(_ value: CreateSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserInput {

    static func urlPathProvider(_ value: CreateUserInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserGroupInput {

    static func urlPathProvider(_ value: CreateUserGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: DecreaseNodeGroupsInGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DecreaseReplicaCountInput {

    static func urlPathProvider(_ value: DecreaseReplicaCountInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCacheClusterInput {

    static func urlPathProvider(_ value: DeleteCacheClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCacheParameterGroupInput {

    static func urlPathProvider(_ value: DeleteCacheParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCacheSecurityGroupInput {

    static func urlPathProvider(_ value: DeleteCacheSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCacheSubnetGroupInput {

    static func urlPathProvider(_ value: DeleteCacheSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: DeleteGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteReplicationGroupInput {

    static func urlPathProvider(_ value: DeleteReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServerlessCacheInput {

    static func urlPathProvider(_ value: DeleteServerlessCacheInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServerlessCacheSnapshotInput {

    static func urlPathProvider(_ value: DeleteServerlessCacheSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSnapshotInput {

    static func urlPathProvider(_ value: DeleteSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserInput {

    static func urlPathProvider(_ value: DeleteUserInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserGroupInput {

    static func urlPathProvider(_ value: DeleteUserGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCacheClustersInput {

    static func urlPathProvider(_ value: DescribeCacheClustersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCacheEngineVersionsInput {

    static func urlPathProvider(_ value: DescribeCacheEngineVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCacheParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeCacheParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCacheParametersInput {

    static func urlPathProvider(_ value: DescribeCacheParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCacheSecurityGroupsInput {

    static func urlPathProvider(_ value: DescribeCacheSecurityGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCacheSubnetGroupsInput {

    static func urlPathProvider(_ value: DescribeCacheSubnetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEngineDefaultParametersInput {

    static func urlPathProvider(_ value: DescribeEngineDefaultParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventsInput {

    static func urlPathProvider(_ value: DescribeEventsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGlobalReplicationGroupsInput {

    static func urlPathProvider(_ value: DescribeGlobalReplicationGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReplicationGroupsInput {

    static func urlPathProvider(_ value: DescribeReplicationGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReservedCacheNodesInput {

    static func urlPathProvider(_ value: DescribeReservedCacheNodesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReservedCacheNodesOfferingsInput {

    static func urlPathProvider(_ value: DescribeReservedCacheNodesOfferingsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeServerlessCachesInput {

    static func urlPathProvider(_ value: DescribeServerlessCachesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeServerlessCacheSnapshotsInput {

    static func urlPathProvider(_ value: DescribeServerlessCacheSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeServiceUpdatesInput {

    static func urlPathProvider(_ value: DescribeServiceUpdatesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSnapshotsInput {

    static func urlPathProvider(_ value: DescribeSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUpdateActionsInput {

    static func urlPathProvider(_ value: DescribeUpdateActionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserGroupsInput {

    static func urlPathProvider(_ value: DescribeUserGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUsersInput {

    static func urlPathProvider(_ value: DescribeUsersInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: DisassociateGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ExportServerlessCacheSnapshotInput {

    static func urlPathProvider(_ value: ExportServerlessCacheSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension FailoverGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: FailoverGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: IncreaseNodeGroupsInGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension IncreaseReplicaCountInput {

    static func urlPathProvider(_ value: IncreaseReplicaCountInput) -> Swift.String? {
        return "/"
    }
}

extension ListAllowedNodeTypeModificationsInput {

    static func urlPathProvider(_ value: ListAllowedNodeTypeModificationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyCacheClusterInput {

    static func urlPathProvider(_ value: ModifyCacheClusterInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyCacheParameterGroupInput {

    static func urlPathProvider(_ value: ModifyCacheParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyCacheSubnetGroupInput {

    static func urlPathProvider(_ value: ModifyCacheSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: ModifyGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyReplicationGroupInput {

    static func urlPathProvider(_ value: ModifyReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyReplicationGroupShardConfigurationInput {

    static func urlPathProvider(_ value: ModifyReplicationGroupShardConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyServerlessCacheInput {

    static func urlPathProvider(_ value: ModifyServerlessCacheInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyUserInput {

    static func urlPathProvider(_ value: ModifyUserInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyUserGroupInput {

    static func urlPathProvider(_ value: ModifyUserGroupInput) -> Swift.String? {
        return "/"
    }
}

extension PurchaseReservedCacheNodesOfferingInput {

    static func urlPathProvider(_ value: PurchaseReservedCacheNodesOfferingInput) -> Swift.String? {
        return "/"
    }
}

extension RebalanceSlotsInGlobalReplicationGroupInput {

    static func urlPathProvider(_ value: RebalanceSlotsInGlobalReplicationGroupInput) -> Swift.String? {
        return "/"
    }
}

extension RebootCacheClusterInput {

    static func urlPathProvider(_ value: RebootCacheClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsFromResourceInput {

    static func urlPathProvider(_ value: RemoveTagsFromResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ResetCacheParameterGroupInput {

    static func urlPathProvider(_ value: ResetCacheParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeCacheSecurityGroupIngressInput {

    static func urlPathProvider(_ value: RevokeCacheSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

extension StartMigrationInput {

    static func urlPathProvider(_ value: StartMigrationInput) -> Swift.String? {
        return "/"
    }
}

extension TestFailoverInput {

    static func urlPathProvider(_ value: TestFailoverInput) -> Swift.String? {
        return "/"
    }
}

extension TestMigrationInput {

    static func urlPathProvider(_ value: TestMigrationInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsToResourceInput {

    static func write(value: AddTagsToResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("AddTagsToResource")
        try writer["Version"].write("2015-02-02")
    }
}

extension AuthorizeCacheSecurityGroupIngressInput {

    static func write(value: AuthorizeCacheSecurityGroupIngressInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSecurityGroupName"].write(value.cacheSecurityGroupName)
        try writer["EC2SecurityGroupName"].write(value.ec2SecurityGroupName)
        try writer["EC2SecurityGroupOwnerId"].write(value.ec2SecurityGroupOwnerId)
        try writer["Action"].write("AuthorizeCacheSecurityGroupIngress")
        try writer["Version"].write("2015-02-02")
    }
}

extension BatchApplyUpdateActionInput {

    static func write(value: BatchApplyUpdateActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterIds"].writeList(value.cacheClusterIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicationGroupIds"].writeList(value.replicationGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ServiceUpdateName"].write(value.serviceUpdateName)
        try writer["Action"].write("BatchApplyUpdateAction")
        try writer["Version"].write("2015-02-02")
    }
}

extension BatchStopUpdateActionInput {

    static func write(value: BatchStopUpdateActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterIds"].writeList(value.cacheClusterIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicationGroupIds"].writeList(value.replicationGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ServiceUpdateName"].write(value.serviceUpdateName)
        try writer["Action"].write("BatchStopUpdateAction")
        try writer["Version"].write("2015-02-02")
    }
}

extension CompleteMigrationInput {

    static func write(value: CompleteMigrationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Force"].write(value.force)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("CompleteMigration")
        try writer["Version"].write("2015-02-02")
    }
}

extension CopyServerlessCacheSnapshotInput {

    static func write(value: CopyServerlessCacheSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["SourceServerlessCacheSnapshotName"].write(value.sourceServerlessCacheSnapshotName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TargetServerlessCacheSnapshotName"].write(value.targetServerlessCacheSnapshotName)
        try writer["Action"].write("CopyServerlessCacheSnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension CopySnapshotInput {

    static func write(value: CopySnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["SourceSnapshotName"].write(value.sourceSnapshotName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TargetBucket"].write(value.targetBucket)
        try writer["TargetSnapshotName"].write(value.targetSnapshotName)
        try writer["Action"].write("CopySnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateCacheClusterInput {

    static func write(value: CreateCacheClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AZMode"].write(value.azMode)
        try writer["AuthToken"].write(value.authToken)
        try writer["AutoMinorVersionUpgrade"].write(value.autoMinorVersionUpgrade)
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["CacheSecurityGroupNames"].writeList(value.cacheSecurityGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "CacheSecurityGroupName", isFlattened: false)
        try writer["CacheSubnetGroupName"].write(value.cacheSubnetGroupName)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["IpDiscovery"].write(value.ipDiscovery)
        try writer["LogDeliveryConfigurations"].writeList(value.logDeliveryConfigurations, memberWritingClosure: ElastiCacheClientTypes.LogDeliveryConfigurationRequest.write(value:to:), memberNodeInfo: "LogDeliveryConfigurationRequest", isFlattened: false)
        try writer["NetworkType"].write(value.networkType)
        try writer["NotificationTopicArn"].write(value.notificationTopicArn)
        try writer["NumCacheNodes"].write(value.numCacheNodes)
        try writer["OutpostMode"].write(value.outpostMode)
        try writer["Port"].write(value.port)
        try writer["PreferredAvailabilityZone"].write(value.preferredAvailabilityZone)
        try writer["PreferredAvailabilityZones"].writeList(value.preferredAvailabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "PreferredAvailabilityZone", isFlattened: false)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PreferredOutpostArn"].write(value.preferredOutpostArn)
        try writer["PreferredOutpostArns"].writeList(value.preferredOutpostArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "PreferredOutpostArn", isFlattened: false)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        try writer["SnapshotArns"].writeList(value.snapshotArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SnapshotArn", isFlattened: false)
        try writer["SnapshotName"].write(value.snapshotName)
        try writer["SnapshotRetentionLimit"].write(value.snapshotRetentionLimit)
        try writer["SnapshotWindow"].write(value.snapshotWindow)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TransitEncryptionEnabled"].write(value.transitEncryptionEnabled)
        try writer["Action"].write("CreateCacheCluster")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateCacheParameterGroupInput {

    static func write(value: CreateCacheParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupFamily"].write(value.cacheParameterGroupFamily)
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["Description"].write(value.description)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateCacheParameterGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateCacheSecurityGroupInput {

    static func write(value: CreateCacheSecurityGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSecurityGroupName"].write(value.cacheSecurityGroupName)
        try writer["Description"].write(value.description)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateCacheSecurityGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateCacheSubnetGroupInput {

    static func write(value: CreateCacheSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSubnetGroupDescription"].write(value.cacheSubnetGroupDescription)
        try writer["CacheSubnetGroupName"].write(value.cacheSubnetGroupName)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetIdentifier", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateCacheSubnetGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateGlobalReplicationGroupInput {

    static func write(value: CreateGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalReplicationGroupDescription"].write(value.globalReplicationGroupDescription)
        try writer["GlobalReplicationGroupIdSuffix"].write(value.globalReplicationGroupIdSuffix)
        try writer["PrimaryReplicationGroupId"].write(value.primaryReplicationGroupId)
        try writer["Action"].write("CreateGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateReplicationGroupInput {

    static func write(value: CreateReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AtRestEncryptionEnabled"].write(value.atRestEncryptionEnabled)
        try writer["AuthToken"].write(value.authToken)
        try writer["AutoMinorVersionUpgrade"].write(value.autoMinorVersionUpgrade)
        try writer["AutomaticFailoverEnabled"].write(value.automaticFailoverEnabled)
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["CacheSecurityGroupNames"].writeList(value.cacheSecurityGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "CacheSecurityGroupName", isFlattened: false)
        try writer["CacheSubnetGroupName"].write(value.cacheSubnetGroupName)
        try writer["ClusterMode"].write(value.clusterMode)
        try writer["DataTieringEnabled"].write(value.dataTieringEnabled)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["IpDiscovery"].write(value.ipDiscovery)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LogDeliveryConfigurations"].writeList(value.logDeliveryConfigurations, memberWritingClosure: ElastiCacheClientTypes.LogDeliveryConfigurationRequest.write(value:to:), memberNodeInfo: "LogDeliveryConfigurationRequest", isFlattened: false)
        try writer["MultiAZEnabled"].write(value.multiAZEnabled)
        try writer["NetworkType"].write(value.networkType)
        try writer["NodeGroupConfiguration"].writeList(value.nodeGroupConfiguration, memberWritingClosure: ElastiCacheClientTypes.NodeGroupConfiguration.write(value:to:), memberNodeInfo: "NodeGroupConfiguration", isFlattened: false)
        try writer["NotificationTopicArn"].write(value.notificationTopicArn)
        try writer["NumCacheClusters"].write(value.numCacheClusters)
        try writer["NumNodeGroups"].write(value.numNodeGroups)
        try writer["Port"].write(value.port)
        try writer["PreferredCacheClusterAZs"].writeList(value.preferredCacheClusterAZs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PrimaryClusterId"].write(value.primaryClusterId)
        try writer["ReplicasPerNodeGroup"].write(value.replicasPerNodeGroup)
        try writer["ReplicationGroupDescription"].write(value.replicationGroupDescription)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        try writer["ServerlessCacheSnapshotName"].write(value.serverlessCacheSnapshotName)
        try writer["SnapshotArns"].writeList(value.snapshotArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SnapshotArn", isFlattened: false)
        try writer["SnapshotName"].write(value.snapshotName)
        try writer["SnapshotRetentionLimit"].write(value.snapshotRetentionLimit)
        try writer["SnapshotWindow"].write(value.snapshotWindow)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TransitEncryptionEnabled"].write(value.transitEncryptionEnabled)
        try writer["TransitEncryptionMode"].write(value.transitEncryptionMode)
        try writer["UserGroupIds"].writeList(value.userGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateServerlessCacheInput {

    static func write(value: CreateServerlessCacheInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheUsageLimits"].write(value.cacheUsageLimits, with: ElastiCacheClientTypes.CacheUsageLimits.write(value:to:))
        try writer["DailySnapshotTime"].write(value.dailySnapshotTime)
        try writer["Description"].write(value.description)
        try writer["Engine"].write(value.engine)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["MajorEngineVersion"].write(value.majorEngineVersion)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        try writer["ServerlessCacheName"].write(value.serverlessCacheName)
        try writer["SnapshotArnsToRestore"].writeList(value.snapshotArnsToRestore, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SnapshotArn", isFlattened: false)
        try writer["SnapshotRetentionLimit"].write(value.snapshotRetentionLimit)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetId", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["UserGroupId"].write(value.userGroupId)
        try writer["Action"].write("CreateServerlessCache")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateServerlessCacheSnapshotInput {

    static func write(value: CreateServerlessCacheSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["ServerlessCacheName"].write(value.serverlessCacheName)
        try writer["ServerlessCacheSnapshotName"].write(value.serverlessCacheSnapshotName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateServerlessCacheSnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateSnapshotInput {

    static func write(value: CreateSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["SnapshotName"].write(value.snapshotName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateSnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateUserInput {

    static func write(value: CreateUserInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccessString"].write(value.accessString)
        try writer["AuthenticationMode"].write(value.authenticationMode, with: ElastiCacheClientTypes.AuthenticationMode.write(value:to:))
        try writer["Engine"].write(value.engine)
        try writer["NoPasswordRequired"].write(value.noPasswordRequired)
        try writer["Passwords"].writeList(value.passwords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["UserId"].write(value.userId)
        try writer["UserName"].write(value.userName)
        try writer["Action"].write("CreateUser")
        try writer["Version"].write("2015-02-02")
    }
}

extension CreateUserGroupInput {

    static func write(value: CreateUserGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Engine"].write(value.engine)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["UserGroupId"].write(value.userGroupId)
        try writer["UserIds"].writeList(value.userIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateUserGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput {

    static func write(value: DecreaseNodeGroupsInGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["GlobalNodeGroupsToRemove"].writeList(value.globalNodeGroupsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "GlobalNodeGroupId", isFlattened: false)
        try writer["GlobalNodeGroupsToRetain"].writeList(value.globalNodeGroupsToRetain, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "GlobalNodeGroupId", isFlattened: false)
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["NodeGroupCount"].write(value.nodeGroupCount)
        try writer["Action"].write("DecreaseNodeGroupsInGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DecreaseReplicaCountInput {

    static func write(value: DecreaseReplicaCountInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["NewReplicaCount"].write(value.newReplicaCount)
        try writer["ReplicaConfiguration"].writeList(value.replicaConfiguration, memberWritingClosure: ElastiCacheClientTypes.ConfigureShard.write(value:to:), memberNodeInfo: "ConfigureShard", isFlattened: false)
        try writer["ReplicasToRemove"].writeList(value.replicasToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("DecreaseReplicaCount")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteCacheClusterInput {

    static func write(value: DeleteCacheClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["FinalSnapshotIdentifier"].write(value.finalSnapshotIdentifier)
        try writer["Action"].write("DeleteCacheCluster")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteCacheParameterGroupInput {

    static func write(value: DeleteCacheParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["Action"].write("DeleteCacheParameterGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteCacheSecurityGroupInput {

    static func write(value: DeleteCacheSecurityGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSecurityGroupName"].write(value.cacheSecurityGroupName)
        try writer["Action"].write("DeleteCacheSecurityGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteCacheSubnetGroupInput {

    static func write(value: DeleteCacheSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSubnetGroupName"].write(value.cacheSubnetGroupName)
        try writer["Action"].write("DeleteCacheSubnetGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteGlobalReplicationGroupInput {

    static func write(value: DeleteGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["RetainPrimaryReplicationGroup"].write(value.retainPrimaryReplicationGroup)
        try writer["Action"].write("DeleteGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteReplicationGroupInput {

    static func write(value: DeleteReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["FinalSnapshotIdentifier"].write(value.finalSnapshotIdentifier)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["RetainPrimaryCluster"].write(value.retainPrimaryCluster)
        try writer["Action"].write("DeleteReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteServerlessCacheInput {

    static func write(value: DeleteServerlessCacheInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["FinalSnapshotName"].write(value.finalSnapshotName)
        try writer["ServerlessCacheName"].write(value.serverlessCacheName)
        try writer["Action"].write("DeleteServerlessCache")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteServerlessCacheSnapshotInput {

    static func write(value: DeleteServerlessCacheSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ServerlessCacheSnapshotName"].write(value.serverlessCacheSnapshotName)
        try writer["Action"].write("DeleteServerlessCacheSnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteSnapshotInput {

    static func write(value: DeleteSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SnapshotName"].write(value.snapshotName)
        try writer["Action"].write("DeleteSnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteUserInput {

    static func write(value: DeleteUserInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["UserId"].write(value.userId)
        try writer["Action"].write("DeleteUser")
        try writer["Version"].write("2015-02-02")
    }
}

extension DeleteUserGroupInput {

    static func write(value: DeleteUserGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["UserGroupId"].write(value.userGroupId)
        try writer["Action"].write("DeleteUserGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeCacheClustersInput {

    static func write(value: DescribeCacheClustersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ShowCacheClustersNotInReplicationGroups"].write(value.showCacheClustersNotInReplicationGroups)
        try writer["ShowCacheNodeInfo"].write(value.showCacheNodeInfo)
        try writer["Action"].write("DescribeCacheClusters")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeCacheEngineVersionsInput {

    static func write(value: DescribeCacheEngineVersionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupFamily"].write(value.cacheParameterGroupFamily)
        try writer["DefaultOnly"].write(value.defaultOnly)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeCacheEngineVersions")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeCacheParameterGroupsInput {

    static func write(value: DescribeCacheParameterGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeCacheParameterGroups")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeCacheParametersInput {

    static func write(value: DescribeCacheParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Source"].write(value.source)
        try writer["Action"].write("DescribeCacheParameters")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeCacheSecurityGroupsInput {

    static func write(value: DescribeCacheSecurityGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSecurityGroupName"].write(value.cacheSecurityGroupName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeCacheSecurityGroups")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeCacheSubnetGroupsInput {

    static func write(value: DescribeCacheSubnetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSubnetGroupName"].write(value.cacheSubnetGroupName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeCacheSubnetGroups")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeEngineDefaultParametersInput {

    static func write(value: DescribeEngineDefaultParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupFamily"].write(value.cacheParameterGroupFamily)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeEngineDefaultParameters")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeEventsInput {

    static func write(value: DescribeEventsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Duration"].write(value.duration)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SourceIdentifier"].write(value.sourceIdentifier)
        try writer["SourceType"].write(value.sourceType)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("DescribeEvents")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeGlobalReplicationGroupsInput {

    static func write(value: DescribeGlobalReplicationGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ShowMemberInfo"].write(value.showMemberInfo)
        try writer["Action"].write("DescribeGlobalReplicationGroups")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeReplicationGroupsInput {

    static func write(value: DescribeReplicationGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("DescribeReplicationGroups")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeReservedCacheNodesInput {

    static func write(value: DescribeReservedCacheNodesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["Duration"].write(value.duration)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["OfferingType"].write(value.offeringType)
        try writer["ProductDescription"].write(value.productDescription)
        try writer["ReservedCacheNodeId"].write(value.reservedCacheNodeId)
        try writer["ReservedCacheNodesOfferingId"].write(value.reservedCacheNodesOfferingId)
        try writer["Action"].write("DescribeReservedCacheNodes")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeReservedCacheNodesOfferingsInput {

    static func write(value: DescribeReservedCacheNodesOfferingsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["Duration"].write(value.duration)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["OfferingType"].write(value.offeringType)
        try writer["ProductDescription"].write(value.productDescription)
        try writer["ReservedCacheNodesOfferingId"].write(value.reservedCacheNodesOfferingId)
        try writer["Action"].write("DescribeReservedCacheNodesOfferings")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeServerlessCachesInput {

    static func write(value: DescribeServerlessCachesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ServerlessCacheName"].write(value.serverlessCacheName)
        try writer["Action"].write("DescribeServerlessCaches")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeServerlessCacheSnapshotsInput {

    static func write(value: DescribeServerlessCacheSnapshotsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ServerlessCacheName"].write(value.serverlessCacheName)
        try writer["ServerlessCacheSnapshotName"].write(value.serverlessCacheSnapshotName)
        try writer["SnapshotType"].write(value.snapshotType)
        try writer["Action"].write("DescribeServerlessCacheSnapshots")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeServiceUpdatesInput {

    static func write(value: DescribeServiceUpdatesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ServiceUpdateName"].write(value.serviceUpdateName)
        try writer["ServiceUpdateStatus"].writeList(value.serviceUpdateStatus, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ElastiCacheClientTypes.ServiceUpdateStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeServiceUpdates")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeSnapshotsInput {

    static func write(value: DescribeSnapshotsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["ShowNodeGroupConfig"].write(value.showNodeGroupConfig)
        try writer["SnapshotName"].write(value.snapshotName)
        try writer["SnapshotSource"].write(value.snapshotSource)
        try writer["Action"].write("DescribeSnapshots")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeUpdateActionsInput {

    static func write(value: DescribeUpdateActionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterIds"].writeList(value.cacheClusterIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Engine"].write(value.engine)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReplicationGroupIds"].writeList(value.replicationGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ServiceUpdateName"].write(value.serviceUpdateName)
        try writer["ServiceUpdateStatus"].writeList(value.serviceUpdateStatus, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ElastiCacheClientTypes.ServiceUpdateStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ServiceUpdateTimeRange"].write(value.serviceUpdateTimeRange, with: ElastiCacheClientTypes.TimeRangeFilter.write(value:to:))
        try writer["ShowNodeLevelUpdateStatus"].write(value.showNodeLevelUpdateStatus)
        try writer["UpdateActionStatus"].writeList(value.updateActionStatus, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ElastiCacheClientTypes.UpdateActionStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeUpdateActions")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeUserGroupsInput {

    static func write(value: DescribeUserGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["UserGroupId"].write(value.userGroupId)
        try writer["Action"].write("DescribeUserGroups")
        try writer["Version"].write("2015-02-02")
    }
}

extension DescribeUsersInput {

    static func write(value: DescribeUsersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Engine"].write(value.engine)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ElastiCacheClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["UserId"].write(value.userId)
        try writer["Action"].write("DescribeUsers")
        try writer["Version"].write("2015-02-02")
    }
}

extension DisassociateGlobalReplicationGroupInput {

    static func write(value: DisassociateGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["ReplicationGroupRegion"].write(value.replicationGroupRegion)
        try writer["Action"].write("DisassociateGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension ExportServerlessCacheSnapshotInput {

    static func write(value: ExportServerlessCacheSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["S3BucketName"].write(value.s3BucketName)
        try writer["ServerlessCacheSnapshotName"].write(value.serverlessCacheSnapshotName)
        try writer["Action"].write("ExportServerlessCacheSnapshot")
        try writer["Version"].write("2015-02-02")
    }
}

extension FailoverGlobalReplicationGroupInput {

    static func write(value: FailoverGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["PrimaryRegion"].write(value.primaryRegion)
        try writer["PrimaryReplicationGroupId"].write(value.primaryReplicationGroupId)
        try writer["Action"].write("FailoverGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput {

    static func write(value: IncreaseNodeGroupsInGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["NodeGroupCount"].write(value.nodeGroupCount)
        try writer["RegionalConfigurations"].writeList(value.regionalConfigurations, memberWritingClosure: ElastiCacheClientTypes.RegionalConfiguration.write(value:to:), memberNodeInfo: "RegionalConfiguration", isFlattened: false)
        try writer["Action"].write("IncreaseNodeGroupsInGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension IncreaseReplicaCountInput {

    static func write(value: IncreaseReplicaCountInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["NewReplicaCount"].write(value.newReplicaCount)
        try writer["ReplicaConfiguration"].writeList(value.replicaConfiguration, memberWritingClosure: ElastiCacheClientTypes.ConfigureShard.write(value:to:), memberNodeInfo: "ConfigureShard", isFlattened: false)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("IncreaseReplicaCount")
        try writer["Version"].write("2015-02-02")
    }
}

extension ListAllowedNodeTypeModificationsInput {

    static func write(value: ListAllowedNodeTypeModificationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("ListAllowedNodeTypeModifications")
        try writer["Version"].write("2015-02-02")
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["Action"].write("ListTagsForResource")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyCacheClusterInput {

    static func write(value: ModifyCacheClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AZMode"].write(value.azMode)
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["AuthToken"].write(value.authToken)
        try writer["AuthTokenUpdateStrategy"].write(value.authTokenUpdateStrategy)
        try writer["AutoMinorVersionUpgrade"].write(value.autoMinorVersionUpgrade)
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["CacheNodeIdsToRemove"].writeList(value.cacheNodeIdsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "CacheNodeId", isFlattened: false)
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["CacheSecurityGroupNames"].writeList(value.cacheSecurityGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "CacheSecurityGroupName", isFlattened: false)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["IpDiscovery"].write(value.ipDiscovery)
        try writer["LogDeliveryConfigurations"].writeList(value.logDeliveryConfigurations, memberWritingClosure: ElastiCacheClientTypes.LogDeliveryConfigurationRequest.write(value:to:), memberNodeInfo: "LogDeliveryConfigurationRequest", isFlattened: false)
        try writer["NewAvailabilityZones"].writeList(value.newAvailabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "PreferredAvailabilityZone", isFlattened: false)
        try writer["NotificationTopicArn"].write(value.notificationTopicArn)
        try writer["NotificationTopicStatus"].write(value.notificationTopicStatus)
        try writer["NumCacheNodes"].write(value.numCacheNodes)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        try writer["SnapshotRetentionLimit"].write(value.snapshotRetentionLimit)
        try writer["SnapshotWindow"].write(value.snapshotWindow)
        try writer["Action"].write("ModifyCacheCluster")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyCacheParameterGroupInput {

    static func write(value: ModifyCacheParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["ParameterNameValues"].writeList(value.parameterNameValues, memberWritingClosure: ElastiCacheClientTypes.ParameterNameValue.write(value:to:), memberNodeInfo: "ParameterNameValue", isFlattened: false)
        try writer["Action"].write("ModifyCacheParameterGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyCacheSubnetGroupInput {

    static func write(value: ModifyCacheSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSubnetGroupDescription"].write(value.cacheSubnetGroupDescription)
        try writer["CacheSubnetGroupName"].write(value.cacheSubnetGroupName)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetIdentifier", isFlattened: false)
        try writer["Action"].write("ModifyCacheSubnetGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyGlobalReplicationGroupInput {

    static func write(value: ModifyGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["AutomaticFailoverEnabled"].write(value.automaticFailoverEnabled)
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["GlobalReplicationGroupDescription"].write(value.globalReplicationGroupDescription)
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["Action"].write("ModifyGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyReplicationGroupInput {

    static func write(value: ModifyReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["AuthToken"].write(value.authToken)
        try writer["AuthTokenUpdateStrategy"].write(value.authTokenUpdateStrategy)
        try writer["AutoMinorVersionUpgrade"].write(value.autoMinorVersionUpgrade)
        try writer["AutomaticFailoverEnabled"].write(value.automaticFailoverEnabled)
        try writer["CacheNodeType"].write(value.cacheNodeType)
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["CacheSecurityGroupNames"].writeList(value.cacheSecurityGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "CacheSecurityGroupName", isFlattened: false)
        try writer["ClusterMode"].write(value.clusterMode)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["IpDiscovery"].write(value.ipDiscovery)
        try writer["LogDeliveryConfigurations"].writeList(value.logDeliveryConfigurations, memberWritingClosure: ElastiCacheClientTypes.LogDeliveryConfigurationRequest.write(value:to:), memberNodeInfo: "LogDeliveryConfigurationRequest", isFlattened: false)
        try writer["MultiAZEnabled"].write(value.multiAZEnabled)
        try writer["NodeGroupId"].write(value.nodeGroupId)
        try writer["NotificationTopicArn"].write(value.notificationTopicArn)
        try writer["NotificationTopicStatus"].write(value.notificationTopicStatus)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PrimaryClusterId"].write(value.primaryClusterId)
        try writer["RemoveUserGroups"].write(value.removeUserGroups)
        try writer["ReplicationGroupDescription"].write(value.replicationGroupDescription)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        try writer["SnapshotRetentionLimit"].write(value.snapshotRetentionLimit)
        try writer["SnapshotWindow"].write(value.snapshotWindow)
        try writer["SnapshottingClusterId"].write(value.snapshottingClusterId)
        try writer["TransitEncryptionEnabled"].write(value.transitEncryptionEnabled)
        try writer["TransitEncryptionMode"].write(value.transitEncryptionMode)
        try writer["UserGroupIdsToAdd"].writeList(value.userGroupIdsToAdd, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserGroupIdsToRemove"].writeList(value.userGroupIdsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("ModifyReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyReplicationGroupShardConfigurationInput {

    static func write(value: ModifyReplicationGroupShardConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["NodeGroupCount"].write(value.nodeGroupCount)
        try writer["NodeGroupsToRemove"].writeList(value.nodeGroupsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "NodeGroupToRemove", isFlattened: false)
        try writer["NodeGroupsToRetain"].writeList(value.nodeGroupsToRetain, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "NodeGroupToRetain", isFlattened: false)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["ReshardingConfiguration"].writeList(value.reshardingConfiguration, memberWritingClosure: ElastiCacheClientTypes.ReshardingConfiguration.write(value:to:), memberNodeInfo: "ReshardingConfiguration", isFlattened: false)
        try writer["Action"].write("ModifyReplicationGroupShardConfiguration")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyServerlessCacheInput {

    static func write(value: ModifyServerlessCacheInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheUsageLimits"].write(value.cacheUsageLimits, with: ElastiCacheClientTypes.CacheUsageLimits.write(value:to:))
        try writer["DailySnapshotTime"].write(value.dailySnapshotTime)
        try writer["Description"].write(value.description)
        try writer["Engine"].write(value.engine)
        try writer["MajorEngineVersion"].write(value.majorEngineVersion)
        try writer["RemoveUserGroup"].write(value.removeUserGroup)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        try writer["ServerlessCacheName"].write(value.serverlessCacheName)
        try writer["SnapshotRetentionLimit"].write(value.snapshotRetentionLimit)
        try writer["UserGroupId"].write(value.userGroupId)
        try writer["Action"].write("ModifyServerlessCache")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyUserInput {

    static func write(value: ModifyUserInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccessString"].write(value.accessString)
        try writer["AppendAccessString"].write(value.appendAccessString)
        try writer["AuthenticationMode"].write(value.authenticationMode, with: ElastiCacheClientTypes.AuthenticationMode.write(value:to:))
        try writer["NoPasswordRequired"].write(value.noPasswordRequired)
        try writer["Passwords"].writeList(value.passwords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserId"].write(value.userId)
        try writer["Action"].write("ModifyUser")
        try writer["Version"].write("2015-02-02")
    }
}

extension ModifyUserGroupInput {

    static func write(value: ModifyUserGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["UserGroupId"].write(value.userGroupId)
        try writer["UserIdsToAdd"].writeList(value.userIdsToAdd, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserIdsToRemove"].writeList(value.userIdsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("ModifyUserGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension PurchaseReservedCacheNodesOfferingInput {

    static func write(value: PurchaseReservedCacheNodesOfferingInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheNodeCount"].write(value.cacheNodeCount)
        try writer["ReservedCacheNodeId"].write(value.reservedCacheNodeId)
        try writer["ReservedCacheNodesOfferingId"].write(value.reservedCacheNodesOfferingId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElastiCacheClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("PurchaseReservedCacheNodesOffering")
        try writer["Version"].write("2015-02-02")
    }
}

extension RebalanceSlotsInGlobalReplicationGroupInput {

    static func write(value: RebalanceSlotsInGlobalReplicationGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["GlobalReplicationGroupId"].write(value.globalReplicationGroupId)
        try writer["Action"].write("RebalanceSlotsInGlobalReplicationGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension RebootCacheClusterInput {

    static func write(value: RebootCacheClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheClusterId"].write(value.cacheClusterId)
        try writer["CacheNodeIdsToReboot"].writeList(value.cacheNodeIdsToReboot, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "CacheNodeId", isFlattened: false)
        try writer["Action"].write("RebootCacheCluster")
        try writer["Version"].write("2015-02-02")
    }
}

extension RemoveTagsFromResourceInput {

    static func write(value: RemoveTagsFromResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("RemoveTagsFromResource")
        try writer["Version"].write("2015-02-02")
    }
}

extension ResetCacheParameterGroupInput {

    static func write(value: ResetCacheParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheParameterGroupName"].write(value.cacheParameterGroupName)
        try writer["ParameterNameValues"].writeList(value.parameterNameValues, memberWritingClosure: ElastiCacheClientTypes.ParameterNameValue.write(value:to:), memberNodeInfo: "ParameterNameValue", isFlattened: false)
        try writer["ResetAllParameters"].write(value.resetAllParameters)
        try writer["Action"].write("ResetCacheParameterGroup")
        try writer["Version"].write("2015-02-02")
    }
}

extension RevokeCacheSecurityGroupIngressInput {

    static func write(value: RevokeCacheSecurityGroupIngressInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CacheSecurityGroupName"].write(value.cacheSecurityGroupName)
        try writer["EC2SecurityGroupName"].write(value.ec2SecurityGroupName)
        try writer["EC2SecurityGroupOwnerId"].write(value.ec2SecurityGroupOwnerId)
        try writer["Action"].write("RevokeCacheSecurityGroupIngress")
        try writer["Version"].write("2015-02-02")
    }
}

extension StartMigrationInput {

    static func write(value: StartMigrationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CustomerNodeEndpointList"].writeList(value.customerNodeEndpointList, memberWritingClosure: ElastiCacheClientTypes.CustomerNodeEndpoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("StartMigration")
        try writer["Version"].write("2015-02-02")
    }
}

extension TestFailoverInput {

    static func write(value: TestFailoverInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["NodeGroupId"].write(value.nodeGroupId)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("TestFailover")
        try writer["Version"].write("2015-02-02")
    }
}

extension TestMigrationInput {

    static func write(value: TestMigrationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CustomerNodeEndpointList"].writeList(value.customerNodeEndpointList, memberWritingClosure: ElastiCacheClientTypes.CustomerNodeEndpoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["Action"].write("TestMigration")
        try writer["Version"].write("2015-02-02")
    }
}

extension AddTagsToResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AddTagsToResourceResult"]
        var value = AddTagsToResourceOutput()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension AuthorizeCacheSecurityGroupIngressOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AuthorizeCacheSecurityGroupIngressOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AuthorizeCacheSecurityGroupIngressResult"]
        var value = AuthorizeCacheSecurityGroupIngressOutput()
        value.cacheSecurityGroup = try reader["CacheSecurityGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheSecurityGroup.read(from:))
        return value
    }
}

extension BatchApplyUpdateActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchApplyUpdateActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["BatchApplyUpdateActionResult"]
        var value = BatchApplyUpdateActionOutput()
        value.processedUpdateActions = try reader["ProcessedUpdateActions"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ProcessedUpdateAction.read(from:), memberNodeInfo: "ProcessedUpdateAction", isFlattened: false)
        value.unprocessedUpdateActions = try reader["UnprocessedUpdateActions"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.UnprocessedUpdateAction.read(from:), memberNodeInfo: "UnprocessedUpdateAction", isFlattened: false)
        return value
    }
}

extension BatchStopUpdateActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchStopUpdateActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["BatchStopUpdateActionResult"]
        var value = BatchStopUpdateActionOutput()
        value.processedUpdateActions = try reader["ProcessedUpdateActions"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ProcessedUpdateAction.read(from:), memberNodeInfo: "ProcessedUpdateAction", isFlattened: false)
        value.unprocessedUpdateActions = try reader["UnprocessedUpdateActions"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.UnprocessedUpdateAction.read(from:), memberNodeInfo: "UnprocessedUpdateAction", isFlattened: false)
        return value
    }
}

extension CompleteMigrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CompleteMigrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CompleteMigrationResult"]
        var value = CompleteMigrationOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension CopyServerlessCacheSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyServerlessCacheSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CopyServerlessCacheSnapshotResult"]
        var value = CopyServerlessCacheSnapshotOutput()
        value.serverlessCacheSnapshot = try reader["ServerlessCacheSnapshot"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCacheSnapshot.read(from:))
        return value
    }
}

extension CopySnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopySnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CopySnapshotResult"]
        var value = CopySnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: ElastiCacheClientTypes.Snapshot.read(from:))
        return value
    }
}

extension CreateCacheClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCacheClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateCacheClusterResult"]
        var value = CreateCacheClusterOutput()
        value.cacheCluster = try reader["CacheCluster"].readIfPresent(with: ElastiCacheClientTypes.CacheCluster.read(from:))
        return value
    }
}

extension CreateCacheParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCacheParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateCacheParameterGroupResult"]
        var value = CreateCacheParameterGroupOutput()
        value.cacheParameterGroup = try reader["CacheParameterGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheParameterGroup.read(from:))
        return value
    }
}

extension CreateCacheSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCacheSecurityGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateCacheSecurityGroupResult"]
        var value = CreateCacheSecurityGroupOutput()
        value.cacheSecurityGroup = try reader["CacheSecurityGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheSecurityGroup.read(from:))
        return value
    }
}

extension CreateCacheSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCacheSubnetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateCacheSubnetGroupResult"]
        var value = CreateCacheSubnetGroupOutput()
        value.cacheSubnetGroup = try reader["CacheSubnetGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheSubnetGroup.read(from:))
        return value
    }
}

extension CreateGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateGlobalReplicationGroupResult"]
        var value = CreateGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension CreateReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateReplicationGroupResult"]
        var value = CreateReplicationGroupOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension CreateServerlessCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServerlessCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateServerlessCacheResult"]
        var value = CreateServerlessCacheOutput()
        value.serverlessCache = try reader["ServerlessCache"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCache.read(from:))
        return value
    }
}

extension CreateServerlessCacheSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServerlessCacheSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateServerlessCacheSnapshotResult"]
        var value = CreateServerlessCacheSnapshotOutput()
        value.serverlessCacheSnapshot = try reader["ServerlessCacheSnapshot"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCacheSnapshot.read(from:))
        return value
    }
}

extension CreateSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateSnapshotResult"]
        var value = CreateSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: ElastiCacheClientTypes.Snapshot.read(from:))
        return value
    }
}

extension CreateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateUserResult"]
        var value = CreateUserOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.accessString = try reader["AccessString"].readIfPresent()
        value.authentication = try reader["Authentication"].readIfPresent(with: ElastiCacheClientTypes.Authentication.read(from:))
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.userGroupIds = try reader["UserGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userId = try reader["UserId"].readIfPresent()
        value.userName = try reader["UserName"].readIfPresent()
        return value
    }
}

extension CreateUserGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateUserGroupResult"]
        var value = CreateUserGroupOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.pendingChanges = try reader["PendingChanges"].readIfPresent(with: ElastiCacheClientTypes.UserGroupPendingChanges.read(from:))
        value.replicationGroups = try reader["ReplicationGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.serverlessCaches = try reader["ServerlessCaches"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.userGroupId = try reader["UserGroupId"].readIfPresent()
        value.userIds = try reader["UserIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DecreaseNodeGroupsInGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DecreaseNodeGroupsInGlobalReplicationGroupResult"]
        var value = DecreaseNodeGroupsInGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension DecreaseReplicaCountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DecreaseReplicaCountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DecreaseReplicaCountResult"]
        var value = DecreaseReplicaCountOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension DeleteCacheClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCacheClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteCacheClusterResult"]
        var value = DeleteCacheClusterOutput()
        value.cacheCluster = try reader["CacheCluster"].readIfPresent(with: ElastiCacheClientTypes.CacheCluster.read(from:))
        return value
    }
}

extension DeleteCacheParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCacheParameterGroupOutput {
        return DeleteCacheParameterGroupOutput()
    }
}

extension DeleteCacheSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCacheSecurityGroupOutput {
        return DeleteCacheSecurityGroupOutput()
    }
}

extension DeleteCacheSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCacheSubnetGroupOutput {
        return DeleteCacheSubnetGroupOutput()
    }
}

extension DeleteGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteGlobalReplicationGroupResult"]
        var value = DeleteGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension DeleteReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteReplicationGroupResult"]
        var value = DeleteReplicationGroupOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension DeleteServerlessCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServerlessCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteServerlessCacheResult"]
        var value = DeleteServerlessCacheOutput()
        value.serverlessCache = try reader["ServerlessCache"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCache.read(from:))
        return value
    }
}

extension DeleteServerlessCacheSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServerlessCacheSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteServerlessCacheSnapshotResult"]
        var value = DeleteServerlessCacheSnapshotOutput()
        value.serverlessCacheSnapshot = try reader["ServerlessCacheSnapshot"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCacheSnapshot.read(from:))
        return value
    }
}

extension DeleteSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteSnapshotResult"]
        var value = DeleteSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: ElastiCacheClientTypes.Snapshot.read(from:))
        return value
    }
}

extension DeleteUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteUserResult"]
        var value = DeleteUserOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.accessString = try reader["AccessString"].readIfPresent()
        value.authentication = try reader["Authentication"].readIfPresent(with: ElastiCacheClientTypes.Authentication.read(from:))
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.userGroupIds = try reader["UserGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userId = try reader["UserId"].readIfPresent()
        value.userName = try reader["UserName"].readIfPresent()
        return value
    }
}

extension DeleteUserGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteUserGroupResult"]
        var value = DeleteUserGroupOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.pendingChanges = try reader["PendingChanges"].readIfPresent(with: ElastiCacheClientTypes.UserGroupPendingChanges.read(from:))
        value.replicationGroups = try reader["ReplicationGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.serverlessCaches = try reader["ServerlessCaches"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.userGroupId = try reader["UserGroupId"].readIfPresent()
        value.userIds = try reader["UserIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeCacheClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCacheClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCacheClustersResult"]
        var value = DescribeCacheClustersOutput()
        value.cacheClusters = try reader["CacheClusters"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheCluster.read(from:), memberNodeInfo: "CacheCluster", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeCacheEngineVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCacheEngineVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCacheEngineVersionsResult"]
        var value = DescribeCacheEngineVersionsOutput()
        value.cacheEngineVersions = try reader["CacheEngineVersions"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheEngineVersion.read(from:), memberNodeInfo: "CacheEngineVersion", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeCacheParameterGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCacheParameterGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCacheParameterGroupsResult"]
        var value = DescribeCacheParameterGroupsOutput()
        value.cacheParameterGroups = try reader["CacheParameterGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheParameterGroup.read(from:), memberNodeInfo: "CacheParameterGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeCacheParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCacheParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCacheParametersResult"]
        var value = DescribeCacheParametersOutput()
        value.cacheNodeTypeSpecificParameters = try reader["CacheNodeTypeSpecificParameters"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheNodeTypeSpecificParameter.read(from:), memberNodeInfo: "CacheNodeTypeSpecificParameter", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        return value
    }
}

extension DescribeCacheSecurityGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCacheSecurityGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCacheSecurityGroupsResult"]
        var value = DescribeCacheSecurityGroupsOutput()
        value.cacheSecurityGroups = try reader["CacheSecurityGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheSecurityGroup.read(from:), memberNodeInfo: "CacheSecurityGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeCacheSubnetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCacheSubnetGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCacheSubnetGroupsResult"]
        var value = DescribeCacheSubnetGroupsOutput()
        value.cacheSubnetGroups = try reader["CacheSubnetGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheSubnetGroup.read(from:), memberNodeInfo: "CacheSubnetGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeEngineDefaultParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEngineDefaultParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEngineDefaultParametersResult"]
        var value = DescribeEngineDefaultParametersOutput()
        value.engineDefaults = try reader["EngineDefaults"].readIfPresent(with: ElastiCacheClientTypes.EngineDefaults.read(from:))
        return value
    }
}

extension DescribeEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventsResult"]
        var value = DescribeEventsOutput()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Event.read(from:), memberNodeInfo: "Event", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeGlobalReplicationGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGlobalReplicationGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeGlobalReplicationGroupsResult"]
        var value = DescribeGlobalReplicationGroupsOutput()
        value.globalReplicationGroups = try reader["GlobalReplicationGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:), memberNodeInfo: "GlobalReplicationGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeReplicationGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReplicationGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeReplicationGroupsResult"]
        var value = DescribeReplicationGroupsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.replicationGroups = try reader["ReplicationGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ReplicationGroup.read(from:), memberNodeInfo: "ReplicationGroup", isFlattened: false)
        return value
    }
}

extension DescribeReservedCacheNodesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedCacheNodesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeReservedCacheNodesResult"]
        var value = DescribeReservedCacheNodesOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedCacheNodes = try reader["ReservedCacheNodes"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ReservedCacheNode.read(from:), memberNodeInfo: "ReservedCacheNode", isFlattened: false)
        return value
    }
}

extension DescribeReservedCacheNodesOfferingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedCacheNodesOfferingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeReservedCacheNodesOfferingsResult"]
        var value = DescribeReservedCacheNodesOfferingsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedCacheNodesOfferings = try reader["ReservedCacheNodesOfferings"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ReservedCacheNodesOffering.read(from:), memberNodeInfo: "ReservedCacheNodesOffering", isFlattened: false)
        return value
    }
}

extension DescribeServerlessCachesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeServerlessCachesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeServerlessCachesResult"]
        var value = DescribeServerlessCachesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.serverlessCaches = try reader["ServerlessCaches"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ServerlessCache.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeServerlessCacheSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeServerlessCacheSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeServerlessCacheSnapshotsResult"]
        var value = DescribeServerlessCacheSnapshotsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.serverlessCacheSnapshots = try reader["ServerlessCacheSnapshots"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ServerlessCacheSnapshot.read(from:), memberNodeInfo: "ServerlessCacheSnapshot", isFlattened: false)
        return value
    }
}

extension DescribeServiceUpdatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeServiceUpdatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeServiceUpdatesResult"]
        var value = DescribeServiceUpdatesOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.serviceUpdates = try reader["ServiceUpdates"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.ServiceUpdate.read(from:), memberNodeInfo: "ServiceUpdate", isFlattened: false)
        return value
    }
}

extension DescribeSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeSnapshotsResult"]
        var value = DescribeSnapshotsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.snapshots = try reader["Snapshots"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Snapshot.read(from:), memberNodeInfo: "Snapshot", isFlattened: false)
        return value
    }
}

extension DescribeUpdateActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUpdateActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeUpdateActionsResult"]
        var value = DescribeUpdateActionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.updateActions = try reader["UpdateActions"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.UpdateAction.read(from:), memberNodeInfo: "UpdateAction", isFlattened: false)
        return value
    }
}

extension DescribeUserGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeUserGroupsResult"]
        var value = DescribeUserGroupsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.userGroups = try reader["UserGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.UserGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeUsersResult"]
        var value = DescribeUsersOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.users = try reader["Users"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.User.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociateGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DisassociateGlobalReplicationGroupResult"]
        var value = DisassociateGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension ExportServerlessCacheSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportServerlessCacheSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ExportServerlessCacheSnapshotResult"]
        var value = ExportServerlessCacheSnapshotOutput()
        value.serverlessCacheSnapshot = try reader["ServerlessCacheSnapshot"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCacheSnapshot.read(from:))
        return value
    }
}

extension FailoverGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> FailoverGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["FailoverGlobalReplicationGroupResult"]
        var value = FailoverGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IncreaseNodeGroupsInGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["IncreaseNodeGroupsInGlobalReplicationGroupResult"]
        var value = IncreaseNodeGroupsInGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension IncreaseReplicaCountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IncreaseReplicaCountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["IncreaseReplicaCountResult"]
        var value = IncreaseReplicaCountOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension ListAllowedNodeTypeModificationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAllowedNodeTypeModificationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListAllowedNodeTypeModificationsResult"]
        var value = ListAllowedNodeTypeModificationsOutput()
        value.scaleDownModifications = try reader["ScaleDownModifications"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.scaleUpModifications = try reader["ScaleUpModifications"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListTagsForResourceResult"]
        var value = ListTagsForResourceOutput()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension ModifyCacheClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyCacheClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyCacheClusterResult"]
        var value = ModifyCacheClusterOutput()
        value.cacheCluster = try reader["CacheCluster"].readIfPresent(with: ElastiCacheClientTypes.CacheCluster.read(from:))
        return value
    }
}

extension ModifyCacheParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyCacheParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyCacheParameterGroupResult"]
        var value = ModifyCacheParameterGroupOutput()
        value.cacheParameterGroupName = try reader["CacheParameterGroupName"].readIfPresent()
        return value
    }
}

extension ModifyCacheSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyCacheSubnetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyCacheSubnetGroupResult"]
        var value = ModifyCacheSubnetGroupOutput()
        value.cacheSubnetGroup = try reader["CacheSubnetGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheSubnetGroup.read(from:))
        return value
    }
}

extension ModifyGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyGlobalReplicationGroupResult"]
        var value = ModifyGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension ModifyReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyReplicationGroupResult"]
        var value = ModifyReplicationGroupOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension ModifyReplicationGroupShardConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyReplicationGroupShardConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyReplicationGroupShardConfigurationResult"]
        var value = ModifyReplicationGroupShardConfigurationOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension ModifyServerlessCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyServerlessCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyServerlessCacheResult"]
        var value = ModifyServerlessCacheOutput()
        value.serverlessCache = try reader["ServerlessCache"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCache.read(from:))
        return value
    }
}

extension ModifyUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyUserResult"]
        var value = ModifyUserOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.accessString = try reader["AccessString"].readIfPresent()
        value.authentication = try reader["Authentication"].readIfPresent(with: ElastiCacheClientTypes.Authentication.read(from:))
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.userGroupIds = try reader["UserGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userId = try reader["UserId"].readIfPresent()
        value.userName = try reader["UserName"].readIfPresent()
        return value
    }
}

extension ModifyUserGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyUserGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyUserGroupResult"]
        var value = ModifyUserGroupOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.pendingChanges = try reader["PendingChanges"].readIfPresent(with: ElastiCacheClientTypes.UserGroupPendingChanges.read(from:))
        value.replicationGroups = try reader["ReplicationGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.serverlessCaches = try reader["ServerlessCaches"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.userGroupId = try reader["UserGroupId"].readIfPresent()
        value.userIds = try reader["UserIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PurchaseReservedCacheNodesOfferingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PurchaseReservedCacheNodesOfferingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PurchaseReservedCacheNodesOfferingResult"]
        var value = PurchaseReservedCacheNodesOfferingOutput()
        value.reservedCacheNode = try reader["ReservedCacheNode"].readIfPresent(with: ElastiCacheClientTypes.ReservedCacheNode.read(from:))
        return value
    }
}

extension RebalanceSlotsInGlobalReplicationGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebalanceSlotsInGlobalReplicationGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RebalanceSlotsInGlobalReplicationGroupResult"]
        var value = RebalanceSlotsInGlobalReplicationGroupOutput()
        value.globalReplicationGroup = try reader["GlobalReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroup.read(from:))
        return value
    }
}

extension RebootCacheClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebootCacheClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RebootCacheClusterResult"]
        var value = RebootCacheClusterOutput()
        value.cacheCluster = try reader["CacheCluster"].readIfPresent(with: ElastiCacheClientTypes.CacheCluster.read(from:))
        return value
    }
}

extension RemoveTagsFromResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RemoveTagsFromResourceResult"]
        var value = RemoveTagsFromResourceOutput()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension ResetCacheParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetCacheParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ResetCacheParameterGroupResult"]
        var value = ResetCacheParameterGroupOutput()
        value.cacheParameterGroupName = try reader["CacheParameterGroupName"].readIfPresent()
        return value
    }
}

extension RevokeCacheSecurityGroupIngressOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeCacheSecurityGroupIngressOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RevokeCacheSecurityGroupIngressResult"]
        var value = RevokeCacheSecurityGroupIngressOutput()
        value.cacheSecurityGroup = try reader["CacheSecurityGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheSecurityGroup.read(from:))
        return value
    }
}

extension StartMigrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMigrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["StartMigrationResult"]
        var value = StartMigrationOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension TestFailoverOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestFailoverOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["TestFailoverResult"]
        var value = TestFailoverOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

extension TestMigrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestMigrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["TestMigrationResult"]
        var value = TestMigrationOutput()
        value.replicationGroup = try reader["ReplicationGroup"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroup.read(from:))
        return value
    }
}

enum AddTagsToResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidARN": return try InvalidARNFault.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidServerlessCacheSnapshotStateFault": return try InvalidServerlessCacheSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "ReservedCacheNodeNotFound": return try ReservedCacheNodeNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            case "SnapshotNotFoundFault": return try SnapshotNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AuthorizeCacheSecurityGroupIngressOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationAlreadyExists": return try AuthorizationAlreadyExistsFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheSecurityGroupState": return try InvalidCacheSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchApplyUpdateActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServiceUpdateNotFoundFault": return try ServiceUpdateNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchStopUpdateActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServiceUpdateNotFoundFault": return try ServiceUpdateNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CompleteMigrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "ReplicationGroupNotUnderMigrationFault": return try ReplicationGroupNotUnderMigrationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyServerlessCacheSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheSnapshotStateFault": return try InvalidServerlessCacheSnapshotStateFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotAlreadyExistsFault": return try ServerlessCacheSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotQuotaExceededFault": return try ServerlessCacheSnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopySnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidSnapshotState": return try InvalidSnapshotStateFault.makeError(baseError: baseError)
            case "SnapshotAlreadyExistsFault": return try SnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "SnapshotNotFoundFault": return try SnapshotNotFoundFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceededFault": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCacheClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterAlreadyExists": return try CacheClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterQuotaForCustomerExceeded": return try ClusterQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeQuotaForClusterExceeded": return try NodeQuotaForClusterExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCacheParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheParameterGroupAlreadyExists": return try CacheParameterGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "CacheParameterGroupQuotaExceeded": return try CacheParameterGroupQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidCacheParameterGroupState": return try InvalidCacheParameterGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCacheSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSecurityGroupAlreadyExists": return try CacheSecurityGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "QuotaExceeded.CacheSecurityGroup": return try CacheSecurityGroupQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCacheSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSubnetGroupAlreadyExists": return try CacheSubnetGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "CacheSubnetGroupQuotaExceeded": return try CacheSubnetGroupQuotaExceededFault.makeError(baseError: baseError)
            case "CacheSubnetQuotaExceededFault": return try CacheSubnetQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "SubnetNotAllowedFault": return try SubnetNotAllowedFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupAlreadyExistsFault": return try GlobalReplicationGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterQuotaForCustomerExceeded": return try ClusterQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidUserGroupState": return try InvalidUserGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeGroupsPerReplicationGroupQuotaExceeded": return try NodeGroupsPerReplicationGroupQuotaExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForClusterExceeded": return try NodeQuotaForClusterExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "ReplicationGroupAlreadyExists": return try ReplicationGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServerlessCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "InvalidUserGroupState": return try InvalidUserGroupStateFault.makeError(baseError: baseError)
            case "ServerlessCacheAlreadyExistsFault": return try ServerlessCacheAlreadyExistsFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheQuotaForCustomerExceededFault": return try ServerlessCacheQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServerlessCacheSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotAlreadyExistsFault": return try ServerlessCacheSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotQuotaExceededFault": return try ServerlessCacheSnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "SnapshotAlreadyExistsFault": return try SnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "SnapshotFeatureNotSupportedFault": return try SnapshotFeatureNotSupportedFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceededFault": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DuplicateUserName": return try DuplicateUserNameFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            case "UserAlreadyExists": return try UserAlreadyExistsFault.makeError(baseError: baseError)
            case "UserQuotaExceeded": return try UserQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DefaultUserRequired": return try DefaultUserRequired.makeError(baseError: baseError)
            case "DuplicateUserName": return try DuplicateUserNameFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            case "UserGroupAlreadyExists": return try UserGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "UserGroupQuotaExceeded": return try UserGroupQuotaExceededFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DecreaseNodeGroupsInGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DecreaseReplicaCountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterQuotaForCustomerExceeded": return try ClusterQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeGroupsPerReplicationGroupQuotaExceeded": return try NodeGroupsPerReplicationGroupQuotaExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "NoOperationFault": return try NoOperationFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCacheClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "SnapshotAlreadyExistsFault": return try SnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "SnapshotFeatureNotSupportedFault": return try SnapshotFeatureNotSupportedFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceededFault": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCacheParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheParameterGroupState": return try InvalidCacheParameterGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCacheSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheSecurityGroupState": return try InvalidCacheSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCacheSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSubnetGroupInUse": return try CacheSubnetGroupInUse.makeError(baseError: baseError)
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "SnapshotAlreadyExistsFault": return try SnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "SnapshotFeatureNotSupportedFault": return try SnapshotFeatureNotSupportedFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceededFault": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServerlessCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotAlreadyExistsFault": return try ServerlessCacheSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServerlessCacheSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheSnapshotStateFault": return try InvalidServerlessCacheSnapshotStateFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidSnapshotState": return try InvalidSnapshotStateFault.makeError(baseError: baseError)
            case "SnapshotNotFoundFault": return try SnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DefaultUserAssociatedToUserGroup": return try DefaultUserAssociatedToUserGroupFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidUserState": return try InvalidUserStateFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidUserGroupState": return try InvalidUserGroupStateFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCacheClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCacheEngineVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCacheParameterGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCacheParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCacheSecurityGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCacheSubnetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEngineDefaultParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGlobalReplicationGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReplicationGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedCacheNodesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ReservedCacheNodeNotFound": return try ReservedCacheNodeNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedCacheNodesOfferingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ReservedCacheNodesOfferingNotFound": return try ReservedCacheNodesOfferingNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeServerlessCachesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeServerlessCacheSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeServiceUpdatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ServiceUpdateNotFoundFault": return try ServiceUpdateNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "SnapshotNotFoundFault": return try SnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUpdateActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportServerlessCacheSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheSnapshotStateFault": return try InvalidServerlessCacheSnapshotStateFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum FailoverGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IncreaseNodeGroupsInGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IncreaseReplicaCountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterQuotaForCustomerExceeded": return try ClusterQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidKMSKeyFault": return try InvalidKMSKeyFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeGroupsPerReplicationGroupQuotaExceeded": return try NodeGroupsPerReplicationGroupQuotaExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "NoOperationFault": return try NoOperationFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAllowedNodeTypeModificationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidARN": return try InvalidARNFault.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidServerlessCacheSnapshotStateFault": return try InvalidServerlessCacheSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "ReservedCacheNodeNotFound": return try ReservedCacheNodeNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            case "SnapshotNotFoundFault": return try SnapshotNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyCacheClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidCacheSecurityGroupState": return try InvalidCacheSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeQuotaForClusterExceeded": return try NodeQuotaForClusterExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyCacheParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheParameterGroupState": return try InvalidCacheParameterGroupStateFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyCacheSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSubnetQuotaExceededFault": return try CacheSubnetQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "SubnetInUse": return try SubnetInUse.makeError(baseError: baseError)
            case "SubnetNotAllowedFault": return try SubnetNotAllowedFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidCacheSecurityGroupState": return try InvalidCacheSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidKMSKeyFault": return try InvalidKMSKeyFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidUserGroupState": return try InvalidUserGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeQuotaForClusterExceeded": return try NodeQuotaForClusterExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyReplicationGroupShardConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCacheClusterCapacity": return try InsufficientCacheClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidKMSKeyFault": return try InvalidKMSKeyFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "NodeGroupsPerReplicationGroupQuotaExceeded": return try NodeGroupsPerReplicationGroupQuotaExceededFault.makeError(baseError: baseError)
            case "NodeQuotaForCustomerExceeded": return try NodeQuotaForCustomerExceededFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyServerlessCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "InvalidUserGroupState": return try InvalidUserGroupStateFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidUserState": return try InvalidUserStateFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyUserGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DefaultUserRequired": return try DefaultUserRequired.makeError(baseError: baseError)
            case "DuplicateUserName": return try DuplicateUserNameFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidUserGroupState": return try InvalidUserGroupStateFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleNotFoundFault": return try ServiceLinkedRoleNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PurchaseReservedCacheNodesOfferingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ReservedCacheNodeAlreadyExists": return try ReservedCacheNodeAlreadyExistsFault.makeError(baseError: baseError)
            case "ReservedCacheNodeQuotaExceeded": return try ReservedCacheNodeQuotaExceededFault.makeError(baseError: baseError)
            case "ReservedCacheNodesOfferingNotFound": return try ReservedCacheNodesOfferingNotFoundFault.makeError(baseError: baseError)
            case "TagQuotaPerResourceExceeded": return try TagQuotaPerResourceExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebalanceSlotsInGlobalReplicationGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalReplicationGroupNotFoundFault": return try GlobalReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebootCacheClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheClusterNotFound": return try CacheClusterNotFoundFault.makeError(baseError: baseError)
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "CacheSubnetGroupNotFoundFault": return try CacheSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidARN": return try InvalidARNFault.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidServerlessCacheSnapshotStateFault": return try InvalidServerlessCacheSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidServerlessCacheStateFault": return try InvalidServerlessCacheStateFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "ReservedCacheNodeNotFound": return try ReservedCacheNodeNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheNotFoundFault": return try ServerlessCacheNotFoundFault.makeError(baseError: baseError)
            case "ServerlessCacheSnapshotNotFoundFault": return try ServerlessCacheSnapshotNotFoundFault.makeError(baseError: baseError)
            case "SnapshotNotFoundFault": return try SnapshotNotFoundFault.makeError(baseError: baseError)
            case "TagNotFound": return try TagNotFoundFault.makeError(baseError: baseError)
            case "UserGroupNotFound": return try UserGroupNotFoundFault.makeError(baseError: baseError)
            case "UserNotFound": return try UserNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetCacheParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CacheParameterGroupNotFound": return try CacheParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheParameterGroupState": return try InvalidCacheParameterGroupStateFault.makeError(baseError: baseError)
            case "InvalidGlobalReplicationGroupState": return try InvalidGlobalReplicationGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeCacheSecurityGroupIngressOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationNotFound": return try AuthorizationNotFoundFault.makeError(baseError: baseError)
            case "CacheSecurityGroupNotFound": return try CacheSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidCacheSecurityGroupState": return try InvalidCacheSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMigrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "ReplicationGroupAlreadyUnderMigrationFault": return try ReplicationGroupAlreadyUnderMigrationFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestFailoverOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "APICallRateForCustomerExceeded": return try APICallRateForCustomerExceededFault.makeError(baseError: baseError)
            case "InvalidCacheClusterState": return try InvalidCacheClusterStateFault.makeError(baseError: baseError)
            case "InvalidKMSKeyFault": return try InvalidKMSKeyFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "NodeGroupNotFoundFault": return try NodeGroupNotFoundFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            case "TestFailoverNotAvailableFault": return try TestFailoverNotAvailableFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestMigrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidReplicationGroupState": return try InvalidReplicationGroupStateFault.makeError(baseError: baseError)
            case "ReplicationGroupAlreadyUnderMigrationFault": return try ReplicationGroupAlreadyUnderMigrationFault.makeError(baseError: baseError)
            case "ReplicationGroupNotFoundFault": return try ReplicationGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServerlessCacheSnapshotNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServerlessCacheSnapshotNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ServerlessCacheSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSecurityGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSecurityGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = CacheSecurityGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidServerlessCacheStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidServerlessCacheStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidServerlessCacheStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidARNFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidARNFault {
        let reader = baseError.errorBodyReader
        var value = InvalidARNFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheClusterNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheClusterNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = CacheClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UserNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = UserNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSubnetGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSubnetGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = CacheSubnetGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidReplicationGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidReplicationGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidReplicationGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UserGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = UserGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedCacheNodeNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedCacheNodeNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ReservedCacheNodeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerlessCacheNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServerlessCacheNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ServerlessCacheNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheParameterGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheParameterGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = CacheParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidServerlessCacheSnapshotStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidServerlessCacheSnapshotStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidServerlessCacheSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagQuotaPerResourceExceeded {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TagQuotaPerResourceExceeded {
        let reader = baseError.errorBodyReader
        var value = TagQuotaPerResourceExceeded()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReplicationGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReplicationGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ReplicationGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterValueException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidParameterValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterValueException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCacheSecurityGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidCacheSecurityGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidCacheSecurityGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthorizationAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = AuthorizationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterCombinationException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidParameterCombinationException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterCombinationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUpdateNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServiceUpdateNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ServiceUpdateNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReplicationGroupNotUnderMigrationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReplicationGroupNotUnderMigrationFault {
        let reader = baseError.errorBodyReader
        var value = ReplicationGroupNotUnderMigrationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerlessCacheSnapshotQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServerlessCacheSnapshotQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ServerlessCacheSnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerlessCacheSnapshotAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServerlessCacheSnapshotAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ServerlessCacheSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceLinkedRoleNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServiceLinkedRoleNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ServiceLinkedRoleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSnapshotStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSnapshotStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidVPCNetworkStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidVPCNetworkStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidVPCNetworkStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheClusterAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheClusterAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = CacheClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NodeQuotaForClusterExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NodeQuotaForClusterExceededFault {
        let reader = baseError.errorBodyReader
        var value = NodeQuotaForClusterExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NodeQuotaForCustomerExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NodeQuotaForCustomerExceededFault {
        let reader = baseError.errorBodyReader
        var value = NodeQuotaForCustomerExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterQuotaForCustomerExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterQuotaForCustomerExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterQuotaForCustomerExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientCacheClusterCapacityFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InsufficientCacheClusterCapacityFault {
        let reader = baseError.errorBodyReader
        var value = InsufficientCacheClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheParameterGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheParameterGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = CacheParameterGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheParameterGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheParameterGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = CacheParameterGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCacheParameterGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidCacheParameterGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidCacheParameterGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSecurityGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSecurityGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = CacheSecurityGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSecurityGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSecurityGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = CacheSecurityGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSubnetGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSubnetGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = CacheSubnetGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSubnet {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSubnet {
        let reader = baseError.errorBodyReader
        var value = InvalidSubnet()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubnetNotAllowedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubnetNotAllowedFault {
        let reader = baseError.errorBodyReader
        var value = SubnetNotAllowedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSubnetGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSubnetGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = CacheSubnetGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSubnetQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSubnetQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = CacheSubnetQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalReplicationGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> GlobalReplicationGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = GlobalReplicationGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCacheClusterStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidCacheClusterStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidCacheClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NodeGroupsPerReplicationGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NodeGroupsPerReplicationGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = NodeGroupsPerReplicationGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalReplicationGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> GlobalReplicationGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = GlobalReplicationGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGlobalReplicationGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidGlobalReplicationGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidGlobalReplicationGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReplicationGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReplicationGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ReplicationGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidUserGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidUserGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidUserGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerlessCacheQuotaForCustomerExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServerlessCacheQuotaForCustomerExceededFault {
        let reader = baseError.errorBodyReader
        var value = ServerlessCacheQuotaForCustomerExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCredentialsException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidCredentialsException {
        let reader = baseError.errorBodyReader
        var value = InvalidCredentialsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerlessCacheAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServerlessCacheAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ServerlessCacheAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotFeatureNotSupportedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotFeatureNotSupportedFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotFeatureNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UserQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = UserQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UserAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = UserAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateUserNameFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DuplicateUserNameFault {
        let reader = baseError.errorBodyReader
        var value = DuplicateUserNameFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UserGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = UserGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UserGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = UserGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DefaultUserRequired {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DefaultUserRequired {
        let reader = baseError.errorBodyReader
        var value = DefaultUserRequired()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NoOperationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NoOperationFault {
        let reader = baseError.errorBodyReader
        var value = NoOperationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CacheSubnetGroupInUse {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CacheSubnetGroupInUse {
        let reader = baseError.errorBodyReader
        var value = CacheSubnetGroupInUse()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidUserStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidUserStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidUserStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DefaultUserAssociatedToUserGroupFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DefaultUserAssociatedToUserGroupFault {
        let reader = baseError.errorBodyReader
        var value = DefaultUserAssociatedToUserGroupFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedCacheNodesOfferingNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedCacheNodesOfferingNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ReservedCacheNodesOfferingNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidKMSKeyFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidKMSKeyFault {
        let reader = baseError.errorBodyReader
        var value = InvalidKMSKeyFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubnetInUse {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubnetInUse {
        let reader = baseError.errorBodyReader
        var value = SubnetInUse()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedCacheNodeAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedCacheNodeAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ReservedCacheNodeAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedCacheNodeQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedCacheNodeQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ReservedCacheNodeQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TagNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = TagNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthorizationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = AuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReplicationGroupAlreadyUnderMigrationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReplicationGroupAlreadyUnderMigrationFault {
        let reader = baseError.errorBodyReader
        var value = ReplicationGroupAlreadyUnderMigrationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NodeGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NodeGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = NodeGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TestFailoverNotAvailableFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TestFailoverNotAvailableFault {
        let reader = baseError.errorBodyReader
        var value = TestFailoverNotAvailableFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension APICallRateForCustomerExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> APICallRateForCustomerExceededFault {
        let reader = baseError.errorBodyReader
        var value = APICallRateForCustomerExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ElastiCacheClientTypes.Tag {

    static func write(value: ElastiCacheClientTypes.Tag?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheSecurityGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheSecurityGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheSecurityGroup()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.cacheSecurityGroupName = try reader["CacheSecurityGroupName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.ec2SecurityGroups = try reader["EC2SecurityGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.EC2SecurityGroup.read(from:), memberNodeInfo: "EC2SecurityGroup", isFlattened: false)
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.EC2SecurityGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.EC2SecurityGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.EC2SecurityGroup()
        value.status = try reader["Status"].readIfPresent()
        value.ec2SecurityGroupName = try reader["EC2SecurityGroupName"].readIfPresent()
        value.ec2SecurityGroupOwnerId = try reader["EC2SecurityGroupOwnerId"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.ProcessedUpdateAction {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ProcessedUpdateAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ProcessedUpdateAction()
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.serviceUpdateName = try reader["ServiceUpdateName"].readIfPresent()
        value.updateActionStatus = try reader["UpdateActionStatus"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.UnprocessedUpdateAction {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.UnprocessedUpdateAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.UnprocessedUpdateAction()
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.serviceUpdateName = try reader["ServiceUpdateName"].readIfPresent()
        value.errorType = try reader["ErrorType"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.ReplicationGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ReplicationGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ReplicationGroup()
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.globalReplicationGroupInfo = try reader["GlobalReplicationGroupInfo"].readIfPresent(with: ElastiCacheClientTypes.GlobalReplicationGroupInfo.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(with: ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues.read(from:))
        value.memberClusters = try reader["MemberClusters"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ClusterId", isFlattened: false)
        value.nodeGroups = try reader["NodeGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.NodeGroup.read(from:), memberNodeInfo: "NodeGroup", isFlattened: false)
        value.snapshottingClusterId = try reader["SnapshottingClusterId"].readIfPresent()
        value.automaticFailover = try reader["AutomaticFailover"].readIfPresent()
        value.multiAZ = try reader["MultiAZ"].readIfPresent()
        value.configurationEndpoint = try reader["ConfigurationEndpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.snapshotRetentionLimit = try reader["SnapshotRetentionLimit"].readIfPresent()
        value.snapshotWindow = try reader["SnapshotWindow"].readIfPresent()
        value.clusterEnabled = try reader["ClusterEnabled"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.authTokenEnabled = try reader["AuthTokenEnabled"].readIfPresent()
        value.authTokenLastModifiedDate = try reader["AuthTokenLastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.transitEncryptionEnabled = try reader["TransitEncryptionEnabled"].readIfPresent()
        value.atRestEncryptionEnabled = try reader["AtRestEncryptionEnabled"].readIfPresent()
        value.memberClustersOutpostArns = try reader["MemberClustersOutpostArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ReplicationGroupOutpostArn", isFlattened: false)
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.userGroupIds = try reader["UserGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.logDeliveryConfigurations = try reader["LogDeliveryConfigurations"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.LogDeliveryConfiguration.read(from:), memberNodeInfo: "LogDeliveryConfiguration", isFlattened: false)
        value.replicationGroupCreateTime = try reader["ReplicationGroupCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.dataTiering = try reader["DataTiering"].readIfPresent()
        value.autoMinorVersionUpgrade = try reader["AutoMinorVersionUpgrade"].readIfPresent()
        value.networkType = try reader["NetworkType"].readIfPresent()
        value.ipDiscovery = try reader["IpDiscovery"].readIfPresent()
        value.transitEncryptionMode = try reader["TransitEncryptionMode"].readIfPresent()
        value.clusterMode = try reader["ClusterMode"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.LogDeliveryConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.LogDeliveryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.LogDeliveryConfiguration()
        value.logType = try reader["LogType"].readIfPresent()
        value.destinationType = try reader["DestinationType"].readIfPresent()
        value.destinationDetails = try reader["DestinationDetails"].readIfPresent(with: ElastiCacheClientTypes.DestinationDetails.read(from:))
        value.logFormat = try reader["LogFormat"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.DestinationDetails {

    static func write(value: ElastiCacheClientTypes.DestinationDetails?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLogsDetails"].write(value.cloudWatchLogsDetails, with: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails.write(value:to:))
        try writer["KinesisFirehoseDetails"].write(value.kinesisFirehoseDetails, with: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.DestinationDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.DestinationDetails()
        value.cloudWatchLogsDetails = try reader["CloudWatchLogsDetails"].readIfPresent(with: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails.read(from:))
        value.kinesisFirehoseDetails = try reader["KinesisFirehoseDetails"].readIfPresent(with: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails.read(from:))
        return value
    }
}

extension ElastiCacheClientTypes.KinesisFirehoseDestinationDetails {

    static func write(value: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStream"].write(value.deliveryStream)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.KinesisFirehoseDestinationDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.KinesisFirehoseDestinationDetails()
        value.deliveryStream = try reader["DeliveryStream"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CloudWatchLogsDestinationDetails {

    static func write(value: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LogGroup"].write(value.logGroup)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CloudWatchLogsDestinationDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CloudWatchLogsDestinationDetails()
        value.logGroup = try reader["LogGroup"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.Endpoint {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Endpoint()
        value.address = try reader["Address"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.NodeGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NodeGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NodeGroup()
        value.nodeGroupId = try reader["NodeGroupId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.primaryEndpoint = try reader["PrimaryEndpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.readerEndpoint = try reader["ReaderEndpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.slots = try reader["Slots"].readIfPresent()
        value.nodeGroupMembers = try reader["NodeGroupMembers"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.NodeGroupMember.read(from:), memberNodeInfo: "NodeGroupMember", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.NodeGroupMember {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NodeGroupMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NodeGroupMember()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.cacheNodeId = try reader["CacheNodeId"].readIfPresent()
        value.readEndpoint = try reader["ReadEndpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.preferredAvailabilityZone = try reader["PreferredAvailabilityZone"].readIfPresent()
        value.preferredOutpostArn = try reader["PreferredOutpostArn"].readIfPresent()
        value.currentRole = try reader["CurrentRole"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues()
        value.primaryClusterId = try reader["PrimaryClusterId"].readIfPresent()
        value.automaticFailoverStatus = try reader["AutomaticFailoverStatus"].readIfPresent()
        value.resharding = try reader["Resharding"].readIfPresent(with: ElastiCacheClientTypes.ReshardingStatus.read(from:))
        value.authTokenStatus = try reader["AuthTokenStatus"].readIfPresent()
        value.userGroups = try reader["UserGroups"].readIfPresent(with: ElastiCacheClientTypes.UserGroupsUpdateStatus.read(from:))
        value.logDeliveryConfigurations = try reader["LogDeliveryConfigurations"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.PendingLogDeliveryConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.transitEncryptionEnabled = try reader["TransitEncryptionEnabled"].readIfPresent()
        value.transitEncryptionMode = try reader["TransitEncryptionMode"].readIfPresent()
        value.clusterMode = try reader["ClusterMode"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.PendingLogDeliveryConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.PendingLogDeliveryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.PendingLogDeliveryConfiguration()
        value.logType = try reader["LogType"].readIfPresent()
        value.destinationType = try reader["DestinationType"].readIfPresent()
        value.destinationDetails = try reader["DestinationDetails"].readIfPresent(with: ElastiCacheClientTypes.DestinationDetails.read(from:))
        value.logFormat = try reader["LogFormat"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.UserGroupsUpdateStatus {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.UserGroupsUpdateStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.UserGroupsUpdateStatus()
        value.userGroupIdsToAdd = try reader["UserGroupIdsToAdd"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userGroupIdsToRemove = try reader["UserGroupIdsToRemove"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.ReshardingStatus {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ReshardingStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ReshardingStatus()
        value.slotMigration = try reader["SlotMigration"].readIfPresent(with: ElastiCacheClientTypes.SlotMigration.read(from:))
        return value
    }
}

extension ElastiCacheClientTypes.SlotMigration {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.SlotMigration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.SlotMigration()
        value.progressPercentage = try reader["ProgressPercentage"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.GlobalReplicationGroupInfo {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.GlobalReplicationGroupInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.GlobalReplicationGroupInfo()
        value.globalReplicationGroupId = try reader["GlobalReplicationGroupId"].readIfPresent()
        value.globalReplicationGroupMemberRole = try reader["GlobalReplicationGroupMemberRole"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.ServerlessCacheSnapshot {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ServerlessCacheSnapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ServerlessCacheSnapshot()
        value.serverlessCacheSnapshotName = try reader["ServerlessCacheSnapshotName"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.snapshotType = try reader["SnapshotType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expiryTime = try reader["ExpiryTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.bytesUsedForCache = try reader["BytesUsedForCache"].readIfPresent()
        value.serverlessCacheConfiguration = try reader["ServerlessCacheConfiguration"].readIfPresent(with: ElastiCacheClientTypes.ServerlessCacheConfiguration.read(from:))
        return value
    }
}

extension ElastiCacheClientTypes.ServerlessCacheConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ServerlessCacheConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ServerlessCacheConfiguration()
        value.serverlessCacheName = try reader["ServerlessCacheName"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.Snapshot {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Snapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Snapshot()
        value.snapshotName = try reader["SnapshotName"].readIfPresent()
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.replicationGroupDescription = try reader["ReplicationGroupDescription"].readIfPresent()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.snapshotStatus = try reader["SnapshotStatus"].readIfPresent()
        value.snapshotSource = try reader["SnapshotSource"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.numCacheNodes = try reader["NumCacheNodes"].readIfPresent()
        value.preferredAvailabilityZone = try reader["PreferredAvailabilityZone"].readIfPresent()
        value.preferredOutpostArn = try reader["PreferredOutpostArn"].readIfPresent()
        value.cacheClusterCreateTime = try reader["CacheClusterCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
        value.topicArn = try reader["TopicArn"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.cacheParameterGroupName = try reader["CacheParameterGroupName"].readIfPresent()
        value.cacheSubnetGroupName = try reader["CacheSubnetGroupName"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.autoMinorVersionUpgrade = try reader["AutoMinorVersionUpgrade"].readIfPresent()
        value.snapshotRetentionLimit = try reader["SnapshotRetentionLimit"].readIfPresent()
        value.snapshotWindow = try reader["SnapshotWindow"].readIfPresent()
        value.numNodeGroups = try reader["NumNodeGroups"].readIfPresent()
        value.automaticFailover = try reader["AutomaticFailover"].readIfPresent()
        value.nodeSnapshots = try reader["NodeSnapshots"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.NodeSnapshot.read(from:), memberNodeInfo: "NodeSnapshot", isFlattened: false)
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.dataTiering = try reader["DataTiering"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.NodeSnapshot {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NodeSnapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NodeSnapshot()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.nodeGroupId = try reader["NodeGroupId"].readIfPresent()
        value.cacheNodeId = try reader["CacheNodeId"].readIfPresent()
        value.nodeGroupConfiguration = try reader["NodeGroupConfiguration"].readIfPresent(with: ElastiCacheClientTypes.NodeGroupConfiguration.read(from:))
        value.cacheSize = try reader["CacheSize"].readIfPresent()
        value.cacheNodeCreateTime = try reader["CacheNodeCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.snapshotCreateTime = try reader["SnapshotCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ElastiCacheClientTypes.NodeGroupConfiguration {

    static func write(value: ElastiCacheClientTypes.NodeGroupConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["NodeGroupId"].write(value.nodeGroupId)
        try writer["PrimaryAvailabilityZone"].write(value.primaryAvailabilityZone)
        try writer["PrimaryOutpostArn"].write(value.primaryOutpostArn)
        try writer["ReplicaAvailabilityZones"].writeList(value.replicaAvailabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        try writer["ReplicaCount"].write(value.replicaCount)
        try writer["ReplicaOutpostArns"].writeList(value.replicaOutpostArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "OutpostArn", isFlattened: false)
        try writer["Slots"].write(value.slots)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NodeGroupConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NodeGroupConfiguration()
        value.nodeGroupId = try reader["NodeGroupId"].readIfPresent()
        value.slots = try reader["Slots"].readIfPresent()
        value.replicaCount = try reader["ReplicaCount"].readIfPresent()
        value.primaryAvailabilityZone = try reader["PrimaryAvailabilityZone"].readIfPresent()
        value.replicaAvailabilityZones = try reader["ReplicaAvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        value.primaryOutpostArn = try reader["PrimaryOutpostArn"].readIfPresent()
        value.replicaOutpostArns = try reader["ReplicaOutpostArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "OutpostArn", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.CacheCluster {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheCluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheCluster()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.configurationEndpoint = try reader["ConfigurationEndpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.clientDownloadLandingPage = try reader["ClientDownloadLandingPage"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.cacheClusterStatus = try reader["CacheClusterStatus"].readIfPresent()
        value.numCacheNodes = try reader["NumCacheNodes"].readIfPresent()
        value.preferredAvailabilityZone = try reader["PreferredAvailabilityZone"].readIfPresent()
        value.preferredOutpostArn = try reader["PreferredOutpostArn"].readIfPresent()
        value.cacheClusterCreateTime = try reader["CacheClusterCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
        value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(with: ElastiCacheClientTypes.PendingModifiedValues.read(from:))
        value.notificationConfiguration = try reader["NotificationConfiguration"].readIfPresent(with: ElastiCacheClientTypes.NotificationConfiguration.read(from:))
        value.cacheSecurityGroups = try reader["CacheSecurityGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheSecurityGroupMembership.read(from:), memberNodeInfo: "CacheSecurityGroup", isFlattened: false)
        value.cacheParameterGroup = try reader["CacheParameterGroup"].readIfPresent(with: ElastiCacheClientTypes.CacheParameterGroupStatus.read(from:))
        value.cacheSubnetGroupName = try reader["CacheSubnetGroupName"].readIfPresent()
        value.cacheNodes = try reader["CacheNodes"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheNode.read(from:), memberNodeInfo: "CacheNode", isFlattened: false)
        value.autoMinorVersionUpgrade = try reader["AutoMinorVersionUpgrade"].readIfPresent()
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.SecurityGroupMembership.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.snapshotRetentionLimit = try reader["SnapshotRetentionLimit"].readIfPresent()
        value.snapshotWindow = try reader["SnapshotWindow"].readIfPresent()
        value.authTokenEnabled = try reader["AuthTokenEnabled"].readIfPresent()
        value.authTokenLastModifiedDate = try reader["AuthTokenLastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.transitEncryptionEnabled = try reader["TransitEncryptionEnabled"].readIfPresent()
        value.atRestEncryptionEnabled = try reader["AtRestEncryptionEnabled"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.replicationGroupLogDeliveryEnabled = try reader["ReplicationGroupLogDeliveryEnabled"].readIfPresent()
        value.logDeliveryConfigurations = try reader["LogDeliveryConfigurations"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.LogDeliveryConfiguration.read(from:), memberNodeInfo: "LogDeliveryConfiguration", isFlattened: false)
        value.networkType = try reader["NetworkType"].readIfPresent()
        value.ipDiscovery = try reader["IpDiscovery"].readIfPresent()
        value.transitEncryptionMode = try reader["TransitEncryptionMode"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.SecurityGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.SecurityGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.SecurityGroupMembership()
        value.securityGroupId = try reader["SecurityGroupId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheNode {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheNode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheNode()
        value.cacheNodeId = try reader["CacheNodeId"].readIfPresent()
        value.cacheNodeStatus = try reader["CacheNodeStatus"].readIfPresent()
        value.cacheNodeCreateTime = try reader["CacheNodeCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endpoint = try reader["Endpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.parameterGroupStatus = try reader["ParameterGroupStatus"].readIfPresent()
        value.sourceCacheNodeId = try reader["SourceCacheNodeId"].readIfPresent()
        value.customerAvailabilityZone = try reader["CustomerAvailabilityZone"].readIfPresent()
        value.customerOutpostArn = try reader["CustomerOutpostArn"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheParameterGroupStatus {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheParameterGroupStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheParameterGroupStatus()
        value.cacheParameterGroupName = try reader["CacheParameterGroupName"].readIfPresent()
        value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
        value.cacheNodeIdsToReboot = try reader["CacheNodeIdsToReboot"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "CacheNodeId", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.CacheSecurityGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheSecurityGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheSecurityGroupMembership()
        value.cacheSecurityGroupName = try reader["CacheSecurityGroupName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.NotificationConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NotificationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NotificationConfiguration()
        value.topicArn = try reader["TopicArn"].readIfPresent()
        value.topicStatus = try reader["TopicStatus"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.PendingModifiedValues {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.PendingModifiedValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.PendingModifiedValues()
        value.numCacheNodes = try reader["NumCacheNodes"].readIfPresent()
        value.cacheNodeIdsToRemove = try reader["CacheNodeIdsToRemove"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "CacheNodeId", isFlattened: false)
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.authTokenStatus = try reader["AuthTokenStatus"].readIfPresent()
        value.logDeliveryConfigurations = try reader["LogDeliveryConfigurations"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.PendingLogDeliveryConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.transitEncryptionEnabled = try reader["TransitEncryptionEnabled"].readIfPresent()
        value.transitEncryptionMode = try reader["TransitEncryptionMode"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheParameterGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheParameterGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheParameterGroup()
        value.cacheParameterGroupName = try reader["CacheParameterGroupName"].readIfPresent()
        value.cacheParameterGroupFamily = try reader["CacheParameterGroupFamily"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.isGlobal = try reader["IsGlobal"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheSubnetGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheSubnetGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheSubnetGroup()
        value.cacheSubnetGroupName = try reader["CacheSubnetGroupName"].readIfPresent()
        value.cacheSubnetGroupDescription = try reader["CacheSubnetGroupDescription"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Subnet.read(from:), memberNodeInfo: "Subnet", isFlattened: false)
        value.arn = try reader["ARN"].readIfPresent()
        value.supportedNetworkTypes = try reader["SupportedNetworkTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ElastiCacheClientTypes.NetworkType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.Subnet {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Subnet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Subnet()
        value.subnetIdentifier = try reader["SubnetIdentifier"].readIfPresent()
        value.subnetAvailabilityZone = try reader["SubnetAvailabilityZone"].readIfPresent(with: ElastiCacheClientTypes.AvailabilityZone.read(from:))
        value.subnetOutpost = try reader["SubnetOutpost"].readIfPresent(with: ElastiCacheClientTypes.SubnetOutpost.read(from:))
        value.supportedNetworkTypes = try reader["SupportedNetworkTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ElastiCacheClientTypes.NetworkType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.SubnetOutpost {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.SubnetOutpost {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.SubnetOutpost()
        value.subnetOutpostArn = try reader["SubnetOutpostArn"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.AvailabilityZone {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.AvailabilityZone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.AvailabilityZone()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.GlobalReplicationGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.GlobalReplicationGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.GlobalReplicationGroup()
        value.globalReplicationGroupId = try reader["GlobalReplicationGroupId"].readIfPresent()
        value.globalReplicationGroupDescription = try reader["GlobalReplicationGroupDescription"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.members = try reader["Members"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.GlobalReplicationGroupMember.read(from:), memberNodeInfo: "GlobalReplicationGroupMember", isFlattened: false)
        value.clusterEnabled = try reader["ClusterEnabled"].readIfPresent()
        value.globalNodeGroups = try reader["GlobalNodeGroups"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.GlobalNodeGroup.read(from:), memberNodeInfo: "GlobalNodeGroup", isFlattened: false)
        value.authTokenEnabled = try reader["AuthTokenEnabled"].readIfPresent()
        value.transitEncryptionEnabled = try reader["TransitEncryptionEnabled"].readIfPresent()
        value.atRestEncryptionEnabled = try reader["AtRestEncryptionEnabled"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.GlobalNodeGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.GlobalNodeGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.GlobalNodeGroup()
        value.globalNodeGroupId = try reader["GlobalNodeGroupId"].readIfPresent()
        value.slots = try reader["Slots"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.GlobalReplicationGroupMember {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.GlobalReplicationGroupMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.GlobalReplicationGroupMember()
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.replicationGroupRegion = try reader["ReplicationGroupRegion"].readIfPresent()
        value.role = try reader["Role"].readIfPresent()
        value.automaticFailover = try reader["AutomaticFailover"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.ServerlessCache {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ServerlessCache {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ServerlessCache()
        value.serverlessCacheName = try reader["ServerlessCacheName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.status = try reader["Status"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
        value.fullEngineVersion = try reader["FullEngineVersion"].readIfPresent()
        value.cacheUsageLimits = try reader["CacheUsageLimits"].readIfPresent(with: ElastiCacheClientTypes.CacheUsageLimits.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "SecurityGroupId", isFlattened: false)
        value.endpoint = try reader["Endpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.readerEndpoint = try reader["ReaderEndpoint"].readIfPresent(with: ElastiCacheClientTypes.Endpoint.read(from:))
        value.arn = try reader["ARN"].readIfPresent()
        value.userGroupId = try reader["UserGroupId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "SubnetId", isFlattened: false)
        value.snapshotRetentionLimit = try reader["SnapshotRetentionLimit"].readIfPresent()
        value.dailySnapshotTime = try reader["DailySnapshotTime"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheUsageLimits {

    static func write(value: ElastiCacheClientTypes.CacheUsageLimits?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DataStorage"].write(value.dataStorage, with: ElastiCacheClientTypes.DataStorage.write(value:to:))
        try writer["ECPUPerSecond"].write(value.ecpuPerSecond, with: ElastiCacheClientTypes.ECPUPerSecond.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheUsageLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheUsageLimits()
        value.dataStorage = try reader["DataStorage"].readIfPresent(with: ElastiCacheClientTypes.DataStorage.read(from:))
        value.ecpuPerSecond = try reader["ECPUPerSecond"].readIfPresent(with: ElastiCacheClientTypes.ECPUPerSecond.read(from:))
        return value
    }
}

extension ElastiCacheClientTypes.ECPUPerSecond {

    static func write(value: ElastiCacheClientTypes.ECPUPerSecond?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Maximum"].write(value.maximum)
        try writer["Minimum"].write(value.minimum)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ECPUPerSecond {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ECPUPerSecond()
        value.maximum = try reader["Maximum"].readIfPresent()
        value.minimum = try reader["Minimum"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.DataStorage {

    static func write(value: ElastiCacheClientTypes.DataStorage?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Maximum"].write(value.maximum)
        try writer["Minimum"].write(value.minimum)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.DataStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.DataStorage()
        value.maximum = try reader["Maximum"].readIfPresent()
        value.minimum = try reader["Minimum"].readIfPresent()
        value.unit = try reader["Unit"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ElastiCacheClientTypes.Authentication {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Authentication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Authentication()
        value.type = try reader["Type"].readIfPresent()
        value.passwordCount = try reader["PasswordCount"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.UserGroupPendingChanges {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.UserGroupPendingChanges {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.UserGroupPendingChanges()
        value.userIdsToRemove = try reader["UserIdsToRemove"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userIdsToAdd = try reader["UserIdsToAdd"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.CacheEngineVersion {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheEngineVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheEngineVersion()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.cacheParameterGroupFamily = try reader["CacheParameterGroupFamily"].readIfPresent()
        value.cacheEngineDescription = try reader["CacheEngineDescription"].readIfPresent()
        value.cacheEngineVersionDescription = try reader["CacheEngineVersionDescription"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.Parameter {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Parameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Parameter()
        value.parameterName = try reader["ParameterName"].readIfPresent()
        value.parameterValue = try reader["ParameterValue"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.source = try reader["Source"].readIfPresent()
        value.dataType = try reader["DataType"].readIfPresent()
        value.allowedValues = try reader["AllowedValues"].readIfPresent()
        value.isModifiable = try reader["IsModifiable"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.changeType = try reader["ChangeType"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheNodeTypeSpecificParameter {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheNodeTypeSpecificParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheNodeTypeSpecificParameter()
        value.parameterName = try reader["ParameterName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.source = try reader["Source"].readIfPresent()
        value.dataType = try reader["DataType"].readIfPresent()
        value.allowedValues = try reader["AllowedValues"].readIfPresent()
        value.isModifiable = try reader["IsModifiable"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.cacheNodeTypeSpecificValues = try reader["CacheNodeTypeSpecificValues"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheNodeTypeSpecificValue.read(from:), memberNodeInfo: "CacheNodeTypeSpecificValue", isFlattened: false)
        value.changeType = try reader["ChangeType"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheNodeTypeSpecificValue {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheNodeTypeSpecificValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheNodeTypeSpecificValue()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.EngineDefaults {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.EngineDefaults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.EngineDefaults()
        value.cacheParameterGroupFamily = try reader["CacheParameterGroupFamily"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        value.cacheNodeTypeSpecificParameters = try reader["CacheNodeTypeSpecificParameters"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheNodeTypeSpecificParameter.read(from:), memberNodeInfo: "CacheNodeTypeSpecificParameter", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.Event {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.Event {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.Event()
        value.sourceIdentifier = try reader["SourceIdentifier"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.date = try reader["Date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ElastiCacheClientTypes.ReservedCacheNode {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ReservedCacheNode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ReservedCacheNode()
        value.reservedCacheNodeId = try reader["ReservedCacheNodeId"].readIfPresent()
        value.reservedCacheNodesOfferingId = try reader["ReservedCacheNodesOfferingId"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.duration = try reader["Duration"].readIfPresent()
        value.fixedPrice = try reader["FixedPrice"].readIfPresent()
        value.usagePrice = try reader["UsagePrice"].readIfPresent()
        value.cacheNodeCount = try reader["CacheNodeCount"].readIfPresent()
        value.productDescription = try reader["ProductDescription"].readIfPresent()
        value.offeringType = try reader["OfferingType"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.RecurringCharge.read(from:), memberNodeInfo: "RecurringCharge", isFlattened: false)
        value.reservationARN = try reader["ReservationARN"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.RecurringCharge {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.RecurringCharge {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.RecurringCharge()
        value.recurringChargeAmount = try reader["RecurringChargeAmount"].readIfPresent()
        value.recurringChargeFrequency = try reader["RecurringChargeFrequency"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.ReservedCacheNodesOffering {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ReservedCacheNodesOffering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ReservedCacheNodesOffering()
        value.reservedCacheNodesOfferingId = try reader["ReservedCacheNodesOfferingId"].readIfPresent()
        value.cacheNodeType = try reader["CacheNodeType"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent()
        value.fixedPrice = try reader["FixedPrice"].readIfPresent()
        value.usagePrice = try reader["UsagePrice"].readIfPresent()
        value.productDescription = try reader["ProductDescription"].readIfPresent()
        value.offeringType = try reader["OfferingType"].readIfPresent()
        value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.RecurringCharge.read(from:), memberNodeInfo: "RecurringCharge", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.ServiceUpdate {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.ServiceUpdate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.ServiceUpdate()
        value.serviceUpdateName = try reader["ServiceUpdateName"].readIfPresent()
        value.serviceUpdateReleaseDate = try reader["ServiceUpdateReleaseDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.serviceUpdateEndDate = try reader["ServiceUpdateEndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.serviceUpdateSeverity = try reader["ServiceUpdateSeverity"].readIfPresent()
        value.serviceUpdateRecommendedApplyByDate = try reader["ServiceUpdateRecommendedApplyByDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.serviceUpdateStatus = try reader["ServiceUpdateStatus"].readIfPresent()
        value.serviceUpdateDescription = try reader["ServiceUpdateDescription"].readIfPresent()
        value.serviceUpdateType = try reader["ServiceUpdateType"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.autoUpdateAfterRecommendedApplyByDate = try reader["AutoUpdateAfterRecommendedApplyByDate"].readIfPresent()
        value.estimatedUpdateTime = try reader["EstimatedUpdateTime"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.UpdateAction {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.UpdateAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.UpdateAction()
        value.replicationGroupId = try reader["ReplicationGroupId"].readIfPresent()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.serviceUpdateName = try reader["ServiceUpdateName"].readIfPresent()
        value.serviceUpdateReleaseDate = try reader["ServiceUpdateReleaseDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.serviceUpdateSeverity = try reader["ServiceUpdateSeverity"].readIfPresent()
        value.serviceUpdateStatus = try reader["ServiceUpdateStatus"].readIfPresent()
        value.serviceUpdateRecommendedApplyByDate = try reader["ServiceUpdateRecommendedApplyByDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.serviceUpdateType = try reader["ServiceUpdateType"].readIfPresent()
        value.updateActionAvailableDate = try reader["UpdateActionAvailableDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updateActionStatus = try reader["UpdateActionStatus"].readIfPresent()
        value.nodesUpdated = try reader["NodesUpdated"].readIfPresent()
        value.updateActionStatusModifiedDate = try reader["UpdateActionStatusModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.slaMet = try reader["SlaMet"].readIfPresent()
        value.nodeGroupUpdateStatus = try reader["NodeGroupUpdateStatus"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.NodeGroupUpdateStatus.read(from:), memberNodeInfo: "NodeGroupUpdateStatus", isFlattened: false)
        value.cacheNodeUpdateStatus = try reader["CacheNodeUpdateStatus"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.CacheNodeUpdateStatus.read(from:), memberNodeInfo: "CacheNodeUpdateStatus", isFlattened: false)
        value.estimatedUpdateTime = try reader["EstimatedUpdateTime"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.CacheNodeUpdateStatus {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.CacheNodeUpdateStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.CacheNodeUpdateStatus()
        value.cacheNodeId = try reader["CacheNodeId"].readIfPresent()
        value.nodeUpdateStatus = try reader["NodeUpdateStatus"].readIfPresent()
        value.nodeDeletionDate = try reader["NodeDeletionDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateStartDate = try reader["NodeUpdateStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateEndDate = try reader["NodeUpdateEndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateInitiatedBy = try reader["NodeUpdateInitiatedBy"].readIfPresent()
        value.nodeUpdateInitiatedDate = try reader["NodeUpdateInitiatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateStatusModifiedDate = try reader["NodeUpdateStatusModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ElastiCacheClientTypes.NodeGroupUpdateStatus {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NodeGroupUpdateStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NodeGroupUpdateStatus()
        value.nodeGroupId = try reader["NodeGroupId"].readIfPresent()
        value.nodeGroupMemberUpdateStatus = try reader["NodeGroupMemberUpdateStatus"].readListIfPresent(memberReadingClosure: ElastiCacheClientTypes.NodeGroupMemberUpdateStatus.read(from:), memberNodeInfo: "NodeGroupMemberUpdateStatus", isFlattened: false)
        return value
    }
}

extension ElastiCacheClientTypes.NodeGroupMemberUpdateStatus {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.NodeGroupMemberUpdateStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.NodeGroupMemberUpdateStatus()
        value.cacheClusterId = try reader["CacheClusterId"].readIfPresent()
        value.cacheNodeId = try reader["CacheNodeId"].readIfPresent()
        value.nodeUpdateStatus = try reader["NodeUpdateStatus"].readIfPresent()
        value.nodeDeletionDate = try reader["NodeDeletionDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateStartDate = try reader["NodeUpdateStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateEndDate = try reader["NodeUpdateEndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateInitiatedBy = try reader["NodeUpdateInitiatedBy"].readIfPresent()
        value.nodeUpdateInitiatedDate = try reader["NodeUpdateInitiatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nodeUpdateStatusModifiedDate = try reader["NodeUpdateStatusModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ElastiCacheClientTypes.UserGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.UserGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.UserGroup()
        value.userGroupId = try reader["UserGroupId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.userIds = try reader["UserIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.pendingChanges = try reader["PendingChanges"].readIfPresent(with: ElastiCacheClientTypes.UserGroupPendingChanges.read(from:))
        value.replicationGroups = try reader["ReplicationGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.serverlessCaches = try reader["ServerlessCaches"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.User {

    static func read(from reader: SmithyXML.Reader) throws -> ElastiCacheClientTypes.User {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElastiCacheClientTypes.User()
        value.userId = try reader["UserId"].readIfPresent()
        value.userName = try reader["UserName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.accessString = try reader["AccessString"].readIfPresent()
        value.userGroupIds = try reader["UserGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.authentication = try reader["Authentication"].readIfPresent(with: ElastiCacheClientTypes.Authentication.read(from:))
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension ElastiCacheClientTypes.LogDeliveryConfigurationRequest {

    static func write(value: ElastiCacheClientTypes.LogDeliveryConfigurationRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DestinationDetails"].write(value.destinationDetails, with: ElastiCacheClientTypes.DestinationDetails.write(value:to:))
        try writer["DestinationType"].write(value.destinationType)
        try writer["Enabled"].write(value.enabled)
        try writer["LogFormat"].write(value.logFormat)
        try writer["LogType"].write(value.logType)
    }
}

extension ElastiCacheClientTypes.AuthenticationMode {

    static func write(value: ElastiCacheClientTypes.AuthenticationMode?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Passwords"].writeList(value.passwords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }
}

extension ElastiCacheClientTypes.ConfigureShard {

    static func write(value: ElastiCacheClientTypes.ConfigureShard?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["NewReplicaCount"].write(value.newReplicaCount)
        try writer["NodeGroupId"].write(value.nodeGroupId)
        try writer["PreferredAvailabilityZones"].writeList(value.preferredAvailabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "PreferredAvailabilityZone", isFlattened: false)
        try writer["PreferredOutpostArns"].writeList(value.preferredOutpostArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "PreferredOutpostArn", isFlattened: false)
    }
}

extension ElastiCacheClientTypes.TimeRangeFilter {

    static func write(value: ElastiCacheClientTypes.TimeRangeFilter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
    }
}

extension ElastiCacheClientTypes.Filter {

    static func write(value: ElastiCacheClientTypes.Filter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ElastiCacheClientTypes.RegionalConfiguration {

    static func write(value: ElastiCacheClientTypes.RegionalConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ReplicationGroupId"].write(value.replicationGroupId)
        try writer["ReplicationGroupRegion"].write(value.replicationGroupRegion)
        try writer["ReshardingConfiguration"].writeList(value.reshardingConfiguration, memberWritingClosure: ElastiCacheClientTypes.ReshardingConfiguration.write(value:to:), memberNodeInfo: "ReshardingConfiguration", isFlattened: false)
    }
}

extension ElastiCacheClientTypes.ReshardingConfiguration {

    static func write(value: ElastiCacheClientTypes.ReshardingConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["NodeGroupId"].write(value.nodeGroupId)
        try writer["PreferredAvailabilityZones"].writeList(value.preferredAvailabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
    }
}

extension ElastiCacheClientTypes.ParameterNameValue {

    static func write(value: ElastiCacheClientTypes.ParameterNameValue?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ParameterName"].write(value.parameterName)
        try writer["ParameterValue"].write(value.parameterValue)
    }
}

extension ElastiCacheClientTypes.CustomerNodeEndpoint {

    static func write(value: ElastiCacheClientTypes.CustomerNodeEndpoint?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Address"].write(value.address)
        try writer["Port"].write(value.port)
    }
}

public enum ElastiCacheClientTypes {}
