// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClient {
    /// Paginate over `[DescribeEndpointsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeEndpointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeEndpointsOutput`
    public func describeEndpointsPaginated(input: DescribeEndpointsInput) -> ClientRuntime.PaginatorSequence<DescribeEndpointsInput, DescribeEndpointsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeEndpointsInput, DescribeEndpointsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeEndpoints(input:))
    }
}

extension DescribeEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEndpointsInput {
        return DescribeEndpointsInput(
            maxResults: self.maxResults,
            mode: self.mode,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == DescribeEndpointsInput, OperationStackOutput == DescribeEndpointsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeEndpointsPaginated`
    /// to access the nested member `[MediaConvertClientTypes.Endpoint]`
    /// - Returns: `[MediaConvertClientTypes.Endpoint]`
    public func endpoints() async throws -> [MediaConvertClientTypes.Endpoint] {
        return try await self.asyncCompactMap { item in item.endpoints }
    }
}
extension MediaConvertClient {
    /// Paginate over `[ListJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJobsOutput`
    public func listJobsPaginated(input: ListJobsInput) -> ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput> {
        return ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listJobs(input:))
    }
}

extension ListJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJobsInput {
        return ListJobsInput(
            maxResults: self.maxResults,
            nextToken: token,
            order: self.order,
            queue: self.queue,
            status: self.status
        )}
}

extension PaginatorSequence where OperationStackInput == ListJobsInput, OperationStackOutput == ListJobsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listJobsPaginated`
    /// to access the nested member `[MediaConvertClientTypes.Job]`
    /// - Returns: `[MediaConvertClientTypes.Job]`
    public func jobs() async throws -> [MediaConvertClientTypes.Job] {
        return try await self.asyncCompactMap { item in item.jobs }
    }
}
extension MediaConvertClient {
    /// Paginate over `[ListJobTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJobTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJobTemplatesOutput`
    public func listJobTemplatesPaginated(input: ListJobTemplatesInput) -> ClientRuntime.PaginatorSequence<ListJobTemplatesInput, ListJobTemplatesOutput> {
        return ClientRuntime.PaginatorSequence<ListJobTemplatesInput, ListJobTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listJobTemplates(input:))
    }
}

extension ListJobTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJobTemplatesInput {
        return ListJobTemplatesInput(
            category: self.category,
            listBy: self.listBy,
            maxResults: self.maxResults,
            nextToken: token,
            order: self.order
        )}
}

extension PaginatorSequence where OperationStackInput == ListJobTemplatesInput, OperationStackOutput == ListJobTemplatesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listJobTemplatesPaginated`
    /// to access the nested member `[MediaConvertClientTypes.JobTemplate]`
    /// - Returns: `[MediaConvertClientTypes.JobTemplate]`
    public func jobTemplates() async throws -> [MediaConvertClientTypes.JobTemplate] {
        return try await self.asyncCompactMap { item in item.jobTemplates }
    }
}
extension MediaConvertClient {
    /// Paginate over `[ListPresetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPresetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPresetsOutput`
    public func listPresetsPaginated(input: ListPresetsInput) -> ClientRuntime.PaginatorSequence<ListPresetsInput, ListPresetsOutput> {
        return ClientRuntime.PaginatorSequence<ListPresetsInput, ListPresetsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPresets(input:))
    }
}

extension ListPresetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPresetsInput {
        return ListPresetsInput(
            category: self.category,
            listBy: self.listBy,
            maxResults: self.maxResults,
            nextToken: token,
            order: self.order
        )}
}

extension PaginatorSequence where OperationStackInput == ListPresetsInput, OperationStackOutput == ListPresetsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPresetsPaginated`
    /// to access the nested member `[MediaConvertClientTypes.Preset]`
    /// - Returns: `[MediaConvertClientTypes.Preset]`
    public func presets() async throws -> [MediaConvertClientTypes.Preset] {
        return try await self.asyncCompactMap { item in item.presets }
    }
}
extension MediaConvertClient {
    /// Paginate over `[ListQueuesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListQueuesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListQueuesOutput`
    public func listQueuesPaginated(input: ListQueuesInput) -> ClientRuntime.PaginatorSequence<ListQueuesInput, ListQueuesOutput> {
        return ClientRuntime.PaginatorSequence<ListQueuesInput, ListQueuesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listQueues(input:))
    }
}

extension ListQueuesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListQueuesInput {
        return ListQueuesInput(
            listBy: self.listBy,
            maxResults: self.maxResults,
            nextToken: token,
            order: self.order
        )}
}

extension PaginatorSequence where OperationStackInput == ListQueuesInput, OperationStackOutput == ListQueuesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listQueuesPaginated`
    /// to access the nested member `[MediaConvertClientTypes.Queue]`
    /// - Returns: `[MediaConvertClientTypes.Queue]`
    public func queues() async throws -> [MediaConvertClientTypes.Queue] {
        return try await self.asyncCompactMap { item in item.queues }
    }
}
