//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension MediaConvertClientTypes {

    /// Set to ENABLED to force a rendition to be included.
    public enum RequiredFlag: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RequiredFlag] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Allowed renditions to specify a list of possible resolutions in your ABR stack. * MediaConvert will create an ABR stack exclusively from the list of resolutions that you specify. * Some resolutions in the Allowed renditions list may not be included, however you can force a resolution to be included by setting Required to ENABLED. * You must specify at least one resolution that is greater than or equal to any resolutions that you specify in Min top rendition size or Min bottom rendition size. * If you specify Allowed renditions, you must not specify a separate rule for Force include renditions.
    public struct AllowedRenditionSize: Swift.Sendable {
        /// Use Height to define the video resolution height, in pixels, for this rule.
        public var height: Swift.Int?
        /// Set to ENABLED to force a rendition to be included.
        public var `required`: MediaConvertClientTypes.RequiredFlag?
        /// Use Width to define the video resolution width, in pixels, for this rule.
        public var width: Swift.Int?

        public init(
            height: Swift.Int? = nil,
            `required`: MediaConvertClientTypes.RequiredFlag? = nil,
            width: Swift.Int? = nil
        )
        {
            self.height = height
            self.`required` = `required`
            self.width = width
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the QuickTime audio channel layout tags for the audio channels in this audio track. Enter channel layout tags in the same order as your output's audio channel order. For example, if your output audio track has a left and a right channel, enter Left (L) for the first channel and Right (R) for the second. If your output has multiple single-channel audio tracks, enter a single channel layout tag for each track.
    public enum AudioChannelTag: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case c
        case cs
        case hi
        case l
        case lc
        case lfe
        case lfe2
        case ls
        case lsd
        case lt
        case lw
        case m
        case nar
        case r
        case rc
        case rs
        case rsd
        case rsl
        case rsr
        case rt
        case rw
        case tbc
        case tbl
        case tbr
        case tcs
        case vhc
        case vhl
        case vhr
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioChannelTag] {
            return [
                .c,
                .cs,
                .hi,
                .l,
                .lc,
                .lfe,
                .lfe2,
                .ls,
                .lsd,
                .lt,
                .lw,
                .m,
                .nar,
                .r,
                .rc,
                .rs,
                .rsd,
                .rsl,
                .rsr,
                .rt,
                .rw,
                .tbc,
                .tbl,
                .tbr,
                .tcs,
                .vhc,
                .vhl,
                .vhr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .c: return "C"
            case .cs: return "CS"
            case .hi: return "HI"
            case .l: return "L"
            case .lc: return "LC"
            case .lfe: return "LFE"
            case .lfe2: return "LFE2"
            case .ls: return "LS"
            case .lsd: return "LSD"
            case .lt: return "LT"
            case .lw: return "LW"
            case .m: return "M"
            case .nar: return "NAR"
            case .r: return "R"
            case .rc: return "RC"
            case .rs: return "RS"
            case .rsd: return "RSD"
            case .rsl: return "RSL"
            case .rsr: return "RSR"
            case .rt: return "RT"
            case .rw: return "RW"
            case .tbc: return "TBC"
            case .tbl: return "TBL"
            case .tbr: return "TBR"
            case .tcs: return "TCS"
            case .vhc: return "VHC"
            case .vhl: return "VHL"
            case .vhr: return "VHR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the QuickTime audio channel layout tags for the audio channels in this audio track. When you don't specify a value, MediaConvert labels your track as Center (C) by default. To use Audio layout tagging, your output must be in a QuickTime (MOV) container and your audio codec must be AAC, WAV, or AIFF.
    public struct AudioChannelTaggingSettings: Swift.Sendable {
        /// Specify the QuickTime audio channel layout tags for the audio channels in this audio track. Enter channel layout tags in the same order as your output's audio channel order. For example, if your output audio track has a left and a right channel, enter Left (L) for the first channel and Right (R) for the second. If your output has multiple single-channel audio tracks, enter a single channel layout tag for each track.
        public var channelTag: MediaConvertClientTypes.AudioChannelTag?
        /// Specify the QuickTime audio channel layout tags for the audio channels in this audio track. Enter channel layout tags in the same order as your output's audio channel order. For example, if your output audio track has a left and a right channel, enter Left (L) for the first channel and Right (R) for the second. If your output has multiple single-channel audio tracks, enter a single channel layout tag for each track.
        public var channelTags: [MediaConvertClientTypes.AudioChannelTag]?

        public init(
            channelTag: MediaConvertClientTypes.AudioChannelTag? = nil,
            channelTags: [MediaConvertClientTypes.AudioChannelTag]? = nil
        )
        {
            self.channelTag = channelTag
            self.channelTags = channelTags
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose one of the following audio normalization algorithms: ITU-R BS.1770-1: Ungated loudness. A measurement of ungated average loudness for an entire piece of content, suitable for measurement of short-form content under ATSC recommendation A/85. Supports up to 5.1 audio channels. ITU-R BS.1770-2: Gated loudness. A measurement of gated average loudness compliant with the requirements of EBU-R128. Supports up to 5.1 audio channels. ITU-R BS.1770-3: Modified peak. The same loudness measurement algorithm as 1770-2, with an updated true peak measurement. ITU-R BS.1770-4: Higher channel count. Allows for more audio channels than the other algorithms, including configurations such as 7.1.
    public enum AudioNormalizationAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ituBs17701
        case ituBs17702
        case ituBs17703
        case ituBs17704
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationAlgorithm] {
            return [
                .ituBs17701,
                .ituBs17702,
                .ituBs17703,
                .ituBs17704
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ituBs17701: return "ITU_BS_1770_1"
            case .ituBs17702: return "ITU_BS_1770_2"
            case .ituBs17703: return "ITU_BS_1770_3"
            case .ituBs17704: return "ITU_BS_1770_4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When enabled the output audio is corrected using the chosen algorithm. If disabled, the audio will be measured but not adjusted.
    public enum AudioNormalizationAlgorithmControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case correctAudio
        case measureOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationAlgorithmControl] {
            return [
                .correctAudio,
                .measureOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .correctAudio: return "CORRECT_AUDIO"
            case .measureOnly: return "MEASURE_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If set to LOG, log each output's audio track loudness to a CSV file.
    public enum AudioNormalizationLoudnessLogging: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dontLog
        case log
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationLoudnessLogging] {
            return [
                .dontLog,
                .log
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dontLog: return "DONT_LOG"
            case .log: return "LOG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If set to TRUE_PEAK, calculate and log the TruePeak for each output's audio track loudness.
    public enum AudioNormalizationPeakCalculation: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case truePeak
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioNormalizationPeakCalculation] {
            return [
                .none,
                .truePeak
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .truePeak: return "TRUE_PEAK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
    public struct AudioNormalizationSettings: Swift.Sendable {
        /// Choose one of the following audio normalization algorithms: ITU-R BS.1770-1: Ungated loudness. A measurement of ungated average loudness for an entire piece of content, suitable for measurement of short-form content under ATSC recommendation A/85. Supports up to 5.1 audio channels. ITU-R BS.1770-2: Gated loudness. A measurement of gated average loudness compliant with the requirements of EBU-R128. Supports up to 5.1 audio channels. ITU-R BS.1770-3: Modified peak. The same loudness measurement algorithm as 1770-2, with an updated true peak measurement. ITU-R BS.1770-4: Higher channel count. Allows for more audio channels than the other algorithms, including configurations such as 7.1.
        public var algorithm: MediaConvertClientTypes.AudioNormalizationAlgorithm?
        /// When enabled the output audio is corrected using the chosen algorithm. If disabled, the audio will be measured but not adjusted.
        public var algorithmControl: MediaConvertClientTypes.AudioNormalizationAlgorithmControl?
        /// Content measuring above this level will be corrected to the target level. Content measuring below this level will not be corrected.
        public var correctionGateLevel: Swift.Int?
        /// If set to LOG, log each output's audio track loudness to a CSV file.
        public var loudnessLogging: MediaConvertClientTypes.AudioNormalizationLoudnessLogging?
        /// If set to TRUE_PEAK, calculate and log the TruePeak for each output's audio track loudness.
        public var peakCalculation: MediaConvertClientTypes.AudioNormalizationPeakCalculation?
        /// When you use Audio normalization, optionally use this setting to specify a target loudness. If you don't specify a value here, the encoder chooses a value for you, based on the algorithm that you choose for Algorithm. If you choose algorithm 1770-1, the encoder will choose -24 LKFS; otherwise, the encoder will choose -23 LKFS.
        public var targetLkfs: Swift.Double?
        /// Specify the True-peak limiter threshold in decibels relative to full scale (dBFS). The peak inter-audio sample loudness in your output will be limited to the value that you specify, without affecting the overall target LKFS. Enter a value from 0 to -8. Leave blank to use the default value 0.
        public var truePeakLimiterThreshold: Swift.Double?

        public init(
            algorithm: MediaConvertClientTypes.AudioNormalizationAlgorithm? = nil,
            algorithmControl: MediaConvertClientTypes.AudioNormalizationAlgorithmControl? = nil,
            correctionGateLevel: Swift.Int? = nil,
            loudnessLogging: MediaConvertClientTypes.AudioNormalizationLoudnessLogging? = nil,
            peakCalculation: MediaConvertClientTypes.AudioNormalizationPeakCalculation? = nil,
            targetLkfs: Swift.Double? = nil,
            truePeakLimiterThreshold: Swift.Double? = nil
        )
        {
            self.algorithm = algorithm
            self.algorithmControl = algorithmControl
            self.correctionGateLevel = correctionGateLevel
            self.loudnessLogging = loudnessLogging
            self.peakCalculation = peakCalculation
            self.targetLkfs = targetLkfs
            self.truePeakLimiterThreshold = truePeakLimiterThreshold
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to FOLLOW_INPUT, if the input contains an ISO 639 audio_type, then that value is passed through to the output. If the input contains no ISO 639 audio_type, the value in Audio Type is included in the output. Otherwise the value in Audio Type is included in the output. Note that this field and audioType are both ignored if audioDescriptionBroadcasterMix is set to BROADCASTER_MIXED_AD.
    public enum AudioTypeControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioTypeControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NORMAL when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    public enum AacAudioDescriptionBroadcasterMix: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case broadcasterMixedAd
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [AacAudioDescriptionBroadcasterMix] {
            return [
                .broadcasterMixedAd,
                .normal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .broadcasterMixedAd: return "BROADCASTER_MIXED_AD"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the AAC profile. For the widest player compatibility and where higher bitrates are acceptable: Keep the default profile, LC (AAC-LC) For improved audio performance at lower bitrates: Choose HEV1 or HEV2. HEV1 (AAC-HE v1) adds spectral band replication to improve speech audio at low bitrates. HEV2 (AAC-HE v2) adds parametric stereo, which optimizes for encoding stereo audio at very low bitrates.
    public enum AacCodecProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hev1
        case hev2
        case lc
        case sdkUnknown(Swift.String)

        public static var allCases: [AacCodecProfile] {
            return [
                .hev1,
                .hev2,
                .lc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hev2: return "HEV2"
            case .lc: return "LC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The Coding mode that you specify determines the number of audio channels and the audio channel layout metadata in your AAC output. Valid coding modes depend on the Rate control mode and Profile that you select. The following list shows the number of audio channels and channel layout for each coding mode. * 1.0 Audio Description (Receiver Mix): One channel, C. Includes audio description data from your stereo input. For more information see ETSI TS 101 154 Annex E. * 1.0 Mono: One channel, C. * 2.0 Stereo: Two channels, L, R. * 5.1 Surround: Six channels, C, L, R, Ls, Rs, LFE.
    public enum AacCodingMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adReceiverMix
        case codingMode10
        case codingMode11
        case codingMode20
        case codingMode51
        case sdkUnknown(Swift.String)

        public static var allCases: [AacCodingMode] {
            return [
                .adReceiverMix,
                .codingMode10,
                .codingMode11,
                .codingMode20,
                .codingMode51
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adReceiverMix: return "AD_RECEIVER_MIX"
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode11: return "CODING_MODE_1_1"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode51: return "CODING_MODE_5_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the AAC rate control mode. For a constant bitrate: Choose CBR. Your AAC output bitrate will be equal to the value that you choose for Bitrate. For a variable bitrate: Choose VBR. Your AAC output bitrate will vary according to your audio content and the value that you choose for Bitrate quality.
    public enum AacRateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [AacRateControlMode] {
            return [
                .cbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enables LATM/LOAS AAC output. Note that if you use LATM/LOAS AAC in an output, you must choose "No container" for the output container.
    public enum AacRawFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case latmLoas
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AacRawFormat] {
            return [
                .latmLoas,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .latmLoas: return "LATM_LOAS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use MPEG-2 AAC instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    public enum AacSpecification: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mpeg2
        case mpeg4
        case sdkUnknown(Swift.String)

        public static var allCases: [AacSpecification] {
            return [
                .mpeg2,
                .mpeg4
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mpeg2: return "MPEG2"
            case .mpeg4: return "MPEG4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the quality of your variable bitrate (VBR) AAC audio. For a list of approximate VBR bitrates, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/aac-support.html#aac_vbr
    public enum AacVbrQuality: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case mediumHigh
        case mediumLow
        case sdkUnknown(Swift.String)

        public static var allCases: [AacVbrQuality] {
            return [
                .high,
                .low,
                .mediumHigh,
                .mediumLow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .mediumHigh: return "MEDIUM_HIGH"
            case .mediumLow: return "MEDIUM_LOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode to "VBR" or "CBR". In VBR mode, you control the audio quality with the setting VBR quality. In CBR mode, you use the setting Bitrate. Defaults and valid values depend on the rate control mode.
    public struct AacSettings: Swift.Sendable {
        /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NORMAL when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
        public var audioDescriptionBroadcasterMix: MediaConvertClientTypes.AacAudioDescriptionBroadcasterMix?
        /// Specify the average bitrate in bits per second. The set of valid values for this setting is: 6000, 8000, 10000, 12000, 14000, 16000, 20000, 24000, 28000, 32000, 40000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 160000, 192000, 224000, 256000, 288000, 320000, 384000, 448000, 512000, 576000, 640000, 768000, 896000, 1024000. The value you set is also constrained by the values that you choose for Profile, Bitrate control mode, and Sample rate. Default values depend on Bitrate control mode and Profile.
        public var bitrate: Swift.Int?
        /// Specify the AAC profile. For the widest player compatibility and where higher bitrates are acceptable: Keep the default profile, LC (AAC-LC) For improved audio performance at lower bitrates: Choose HEV1 or HEV2. HEV1 (AAC-HE v1) adds spectral band replication to improve speech audio at low bitrates. HEV2 (AAC-HE v2) adds parametric stereo, which optimizes for encoding stereo audio at very low bitrates.
        public var codecProfile: MediaConvertClientTypes.AacCodecProfile?
        /// The Coding mode that you specify determines the number of audio channels and the audio channel layout metadata in your AAC output. Valid coding modes depend on the Rate control mode and Profile that you select. The following list shows the number of audio channels and channel layout for each coding mode. * 1.0 Audio Description (Receiver Mix): One channel, C. Includes audio description data from your stereo input. For more information see ETSI TS 101 154 Annex E. * 1.0 Mono: One channel, C. * 2.0 Stereo: Two channels, L, R. * 5.1 Surround: Six channels, C, L, R, Ls, Rs, LFE.
        public var codingMode: MediaConvertClientTypes.AacCodingMode?
        /// Specify the AAC rate control mode. For a constant bitrate: Choose CBR. Your AAC output bitrate will be equal to the value that you choose for Bitrate. For a variable bitrate: Choose VBR. Your AAC output bitrate will vary according to your audio content and the value that you choose for Bitrate quality.
        public var rateControlMode: MediaConvertClientTypes.AacRateControlMode?
        /// Enables LATM/LOAS AAC output. Note that if you use LATM/LOAS AAC in an output, you must choose "No container" for the output container.
        public var rawFormat: MediaConvertClientTypes.AacRawFormat?
        /// Specify the AAC sample rate in samples per second (Hz). Valid sample rates depend on the AAC profile and Coding mode that you select. For a list of supported sample rates, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/aac-support.html
        public var sampleRate: Swift.Int?
        /// Use MPEG-2 AAC instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
        public var specification: MediaConvertClientTypes.AacSpecification?
        /// Specify the quality of your variable bitrate (VBR) AAC audio. For a list of approximate VBR bitrates, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/aac-support.html#aac_vbr
        public var vbrQuality: MediaConvertClientTypes.AacVbrQuality?

        public init(
            audioDescriptionBroadcasterMix: MediaConvertClientTypes.AacAudioDescriptionBroadcasterMix? = nil,
            bitrate: Swift.Int? = nil,
            codecProfile: MediaConvertClientTypes.AacCodecProfile? = nil,
            codingMode: MediaConvertClientTypes.AacCodingMode? = nil,
            rateControlMode: MediaConvertClientTypes.AacRateControlMode? = nil,
            rawFormat: MediaConvertClientTypes.AacRawFormat? = nil,
            sampleRate: Swift.Int? = nil,
            specification: MediaConvertClientTypes.AacSpecification? = nil,
            vbrQuality: MediaConvertClientTypes.AacVbrQuality? = nil
        )
        {
            self.audioDescriptionBroadcasterMix = audioDescriptionBroadcasterMix
            self.bitrate = bitrate
            self.codecProfile = codecProfile
            self.codingMode = codingMode
            self.rateControlMode = rateControlMode
            self.rawFormat = rawFormat
            self.sampleRate = sampleRate
            self.specification = specification
            self.vbrQuality = vbrQuality
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the bitstream mode for the AC-3 stream that the encoder emits. For more information about the AC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public enum Ac3BitstreamMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commentary
        case completeMain
        case dialogue
        case emergency
        case hearingImpaired
        case musicAndEffects
        case visuallyImpaired
        case voiceOver
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3BitstreamMode] {
            return [
                .commentary,
                .completeMain,
                .dialogue,
                .emergency,
                .hearingImpaired,
                .musicAndEffects,
                .visuallyImpaired,
                .voiceOver
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commentary: return "COMMENTARY"
            case .completeMain: return "COMPLETE_MAIN"
            case .dialogue: return "DIALOGUE"
            case .emergency: return "EMERGENCY"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .musicAndEffects: return "MUSIC_AND_EFFECTS"
            case .visuallyImpaired: return "VISUALLY_IMPAIRED"
            case .voiceOver: return "VOICE_OVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Dolby Digital coding mode. Determines number of channels.
    public enum Ac3CodingMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode10
        case codingMode11
        case codingMode20
        case codingMode32Lfe
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3CodingMode] {
            return [
                .codingMode10,
                .codingMode11,
                .codingMode20,
                .codingMode32Lfe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode11: return "CODING_MODE_1_1"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode32Lfe: return "CODING_MODE_3_2_LFE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Ac3DynamicRangeCompressionLine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3DynamicRangeCompressionLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you want to add Dolby dynamic range compression (DRC) signaling to your output stream, we recommend that you use the mode-specific settings instead of Dynamic range compression profile. The mode-specific settings are Dynamic range compression profile, line mode and Dynamic range compression profile, RF mode. Note that when you specify values for all three settings, MediaConvert ignores the value of this setting in favor of the mode-specific settings. If you do use this setting instead of the mode-specific settings, choose None to leave out DRC signaling. Keep the default Film standard to set the profile to Dolby's film standard profile for all operating modes.
    public enum Ac3DynamicRangeCompressionProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmStandard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3DynamicRangeCompressionProfile] {
            return [
                .filmStandard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmStandard: return "FILM_STANDARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Ac3DynamicRangeCompressionRf: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3DynamicRangeCompressionRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
    public enum Ac3LfeFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3LfeFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public enum Ac3MetadataControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3MetadataControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value AC3.
    public struct Ac3Settings: Swift.Sendable {
        /// Specify the average bitrate in bits per second. The bitrate that you specify must be a multiple of 8000 within the allowed minimum and maximum values. Leave blank to use the default bitrate for the coding mode you select according ETSI TS 102 366. Valid bitrates for coding mode 1/0: Default: 96000. Minimum: 64000. Maximum: 128000. Valid bitrates for coding mode 1/1: Default: 192000. Minimum: 128000. Maximum: 384000. Valid bitrates for coding mode 2/0: Default: 192000. Minimum: 128000. Maximum: 384000. Valid bitrates for coding mode 3/2 with FLE: Default: 384000. Minimum: 384000. Maximum: 640000.
        public var bitrate: Swift.Int?
        /// Specify the bitstream mode for the AC-3 stream that the encoder emits. For more information about the AC3 bitstream mode, see ATSC A/52-2012 (Annex E).
        public var bitstreamMode: MediaConvertClientTypes.Ac3BitstreamMode?
        /// Dolby Digital coding mode. Determines number of channels.
        public var codingMode: MediaConvertClientTypes.Ac3CodingMode?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionLine: MediaConvertClientTypes.Ac3DynamicRangeCompressionLine?
        /// When you want to add Dolby dynamic range compression (DRC) signaling to your output stream, we recommend that you use the mode-specific settings instead of Dynamic range compression profile. The mode-specific settings are Dynamic range compression profile, line mode and Dynamic range compression profile, RF mode. Note that when you specify values for all three settings, MediaConvert ignores the value of this setting in favor of the mode-specific settings. If you do use this setting instead of the mode-specific settings, choose None to leave out DRC signaling. Keep the default Film standard to set the profile to Dolby's film standard profile for all operating modes.
        public var dynamicRangeCompressionProfile: MediaConvertClientTypes.Ac3DynamicRangeCompressionProfile?
        /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionRf: MediaConvertClientTypes.Ac3DynamicRangeCompressionRf?
        /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
        public var lfeFilter: MediaConvertClientTypes.Ac3LfeFilter?
        /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaConvertClientTypes.Ac3MetadataControl?
        /// This value is always 48000. It represents the sample rate in Hz.
        public var sampleRate: Swift.Int?

        public init(
            bitrate: Swift.Int? = nil,
            bitstreamMode: MediaConvertClientTypes.Ac3BitstreamMode? = nil,
            codingMode: MediaConvertClientTypes.Ac3CodingMode? = nil,
            dialnorm: Swift.Int? = nil,
            dynamicRangeCompressionLine: MediaConvertClientTypes.Ac3DynamicRangeCompressionLine? = nil,
            dynamicRangeCompressionProfile: MediaConvertClientTypes.Ac3DynamicRangeCompressionProfile? = nil,
            dynamicRangeCompressionRf: MediaConvertClientTypes.Ac3DynamicRangeCompressionRf? = nil,
            lfeFilter: MediaConvertClientTypes.Ac3LfeFilter? = nil,
            metadataControl: MediaConvertClientTypes.Ac3MetadataControl? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dialnorm = dialnorm
            self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
            self.dynamicRangeCompressionProfile = dynamicRangeCompressionProfile
            self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
            self.lfeFilter = lfeFilter
            self.metadataControl = metadataControl
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value AIFF.
    public struct AiffSettings: Swift.Sendable {
        /// Specify Bit depth, in bits per sample, to choose the encoding quality for this audio track.
        public var bitDepth: Swift.Int?
        /// Specify the number of channels in this output audio track. Valid values are 1 and even numbers up to 64. For example, 1, 2, 4, 6, and so on, up to 64.
        public var channels: Swift.Int?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Int?

        public init(
            bitDepth: Swift.Int? = nil,
            channels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.bitDepth = bitDepth
            self.channels = channels
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
    public enum AudioCodec: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aac
        case ac3
        case aiff
        case eac3
        case eac3Atmos
        case flac
        case mp2
        case mp3
        case opus
        case passthrough
        case vorbis
        case wav
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioCodec] {
            return [
                .aac,
                .ac3,
                .aiff,
                .eac3,
                .eac3Atmos,
                .flac,
                .mp2,
                .mp3,
                .opus,
                .passthrough,
                .vorbis,
                .wav
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aac: return "AAC"
            case .ac3: return "AC3"
            case .aiff: return "AIFF"
            case .eac3: return "EAC3"
            case .eac3Atmos: return "EAC3_ATMOS"
            case .flac: return "FLAC"
            case .mp2: return "MP2"
            case .mp3: return "MP3"
            case .opus: return "OPUS"
            case .passthrough: return "PASSTHROUGH"
            case .vorbis: return "VORBIS"
            case .wav: return "WAV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public enum Eac3AtmosBitstreamMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completeMain
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosBitstreamMode] {
            return [
                .completeMain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completeMain: return "COMPLETE_MAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The coding mode for Dolby Digital Plus JOC (Atmos).
    public enum Eac3AtmosCodingMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode514
        case codingMode714
        case codingMode916
        case codingModeAuto
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosCodingMode] {
            return [
                .codingMode514,
                .codingMode714,
                .codingMode916,
                .codingModeAuto
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode514: return "CODING_MODE_5_1_4"
            case .codingMode714: return "CODING_MODE_7_1_4"
            case .codingMode916: return "CODING_MODE_9_1_6"
            case .codingModeAuto: return "CODING_MODE_AUTO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
    public enum Eac3AtmosDialogueIntelligence: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDialogueIntelligence] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert should use any downmix metadata from your input file. Keep the default value, Custom to provide downmix values in your job settings. Choose Follow source to use the metadata from your input. Related settings--Use these settings to specify your downmix values: Left only/Right only surround, Left total/Right total surround, Left total/Right total center, Left only/Right only center, and Stereo downmix. When you keep Custom for Downmix control and you don't specify values for the related settings, MediaConvert uses default values for those settings.
    public enum Eac3AtmosDownmixControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDownmixControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the line operating mode. Default value: Film light Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom for the setting Dynamic range control. Otherwise, MediaConvert ignores Dynamic range compression line. For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Eac3AtmosDynamicRangeCompressionLine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDynamicRangeCompressionLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the RF operating mode. Default value: Film light Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom for the setting Dynamic range control. Otherwise, MediaConvert ignores Dynamic range compression RF. For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Eac3AtmosDynamicRangeCompressionRf: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDynamicRangeCompressionRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert should use any dynamic range control metadata from your input file. Keep the default value, Custom, to provide dynamic range control values in your job settings. Choose Follow source to use the metadata from your input. Related settings--Use these settings to specify your dynamic range control values: Dynamic range compression line and Dynamic range compression RF. When you keep the value Custom for Dynamic range control and you don't specify values for the related settings, MediaConvert uses default values for those settings.
    public enum Eac3AtmosDynamicRangeControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosDynamicRangeControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose how the service meters the loudness of your audio.
    public enum Eac3AtmosMeteringMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ituBs17701
        case ituBs17702
        case ituBs17703
        case ituBs17704
        case leqA
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosMeteringMode] {
            return [
                .ituBs17701,
                .ituBs17702,
                .ituBs17703,
                .ituBs17704,
                .leqA
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ituBs17701: return "ITU_BS_1770_1"
            case .ituBs17702: return "ITU_BS_1770_2"
            case .ituBs17703: return "ITU_BS_1770_3"
            case .ituBs17704: return "ITU_BS_1770_4"
            case .leqA: return "LEQ_A"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose how the service does stereo downmixing. Default value: Not indicated Related setting: To have MediaConvert use this value, keep the default value, Custom for the setting Downmix control. Otherwise, MediaConvert ignores Stereo downmix.
    public enum Eac3AtmosStereoDownmix: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dpl2
        case notIndicated
        case stereo
        case surround
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosStereoDownmix] {
            return [
                .dpl2,
                .notIndicated,
                .stereo,
                .surround
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dpl2: return "DPL2"
            case .notIndicated: return "NOT_INDICATED"
            case .stereo: return "STEREO"
            case .surround: return "SURROUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
    public enum Eac3AtmosSurroundExMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosSurroundExMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value EAC3_ATMOS.
    public struct Eac3AtmosSettings: Swift.Sendable {
        /// Specify the average bitrate for this output in bits per second. Valid values: 384k, 448k, 576k, 640k, 768k, 1024k Default value: 448k Note that MediaConvert supports 384k only with channel-based immersive (CBI) 7.1.4 and 5.1.4 inputs. For CBI 9.1.6 and other input types, MediaConvert automatically increases your output bitrate to 448k.
        public var bitrate: Swift.Int?
        /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
        public var bitstreamMode: MediaConvertClientTypes.Eac3AtmosBitstreamMode?
        /// The coding mode for Dolby Digital Plus JOC (Atmos).
        public var codingMode: MediaConvertClientTypes.Eac3AtmosCodingMode?
        /// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
        public var dialogueIntelligence: MediaConvertClientTypes.Eac3AtmosDialogueIntelligence?
        /// Specify whether MediaConvert should use any downmix metadata from your input file. Keep the default value, Custom to provide downmix values in your job settings. Choose Follow source to use the metadata from your input. Related settings--Use these settings to specify your downmix values: Left only/Right only surround, Left total/Right total surround, Left total/Right total center, Left only/Right only center, and Stereo downmix. When you keep Custom for Downmix control and you don't specify values for the related settings, MediaConvert uses default values for those settings.
        public var downmixControl: MediaConvertClientTypes.Eac3AtmosDownmixControl?
        /// Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the line operating mode. Default value: Film light Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom for the setting Dynamic range control. Otherwise, MediaConvert ignores Dynamic range compression line. For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionLine?
        /// Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the RF operating mode. Default value: Film light Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom for the setting Dynamic range control. Otherwise, MediaConvert ignores Dynamic range compression RF. For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionRf?
        /// Specify whether MediaConvert should use any dynamic range control metadata from your input file. Keep the default value, Custom, to provide dynamic range control values in your job settings. Choose Follow source to use the metadata from your input. Related settings--Use these settings to specify your dynamic range control values: Dynamic range compression line and Dynamic range compression RF. When you keep the value Custom for Dynamic range control and you don't specify values for the related settings, MediaConvert uses default values for those settings.
        public var dynamicRangeControl: MediaConvertClientTypes.Eac3AtmosDynamicRangeControl?
        /// Specify a value for the following Dolby Atmos setting: Left only/Right only center mix (Lo/Ro center). MediaConvert uses this value for downmixing. Default value: -3 dB. Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix. Related setting: To have MediaConvert use this value, keep the default value, Custom for the setting Downmix control. Otherwise, MediaConvert ignores Left only/Right only center.
        public var loRoCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Atmos setting: Left only/Right only. MediaConvert uses this value for downmixing. Default value: -3 dB. Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix. Related setting: To have MediaConvert use this value, keep the default value, Custom for the setting Downmix control. Otherwise, MediaConvert ignores Left only/Right only surround.
        public var loRoSurroundMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Atmos setting: Left total/Right total center mix (Lt/Rt center). MediaConvert uses this value for downmixing. Default value: -3 dB Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix. Related setting: To have MediaConvert use this value, keep the default value, Custom for the setting Downmix control. Otherwise, MediaConvert ignores Left total/Right total center.
        public var ltRtCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Atmos setting: Left total/Right total surround mix (Lt/Rt surround). MediaConvert uses this value for downmixing. Default value: -3 dB Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix. Related setting: To have MediaConvert use this value, keep the default value, Custom for the setting Downmix control. Otherwise, the service ignores Left total/Right total surround.
        public var ltRtSurroundMixLevel: Swift.Double?
        /// Choose how the service meters the loudness of your audio.
        public var meteringMode: MediaConvertClientTypes.Eac3AtmosMeteringMode?
        /// This value is always 48000. It represents the sample rate in Hz.
        public var sampleRate: Swift.Int?
        /// Specify the percentage of audio content, from 0% to 100%, that must be speech in order for the encoder to use the measured speech loudness as the overall program loudness. Default value: 15%
        public var speechThreshold: Swift.Int?
        /// Choose how the service does stereo downmixing. Default value: Not indicated Related setting: To have MediaConvert use this value, keep the default value, Custom for the setting Downmix control. Otherwise, MediaConvert ignores Stereo downmix.
        public var stereoDownmix: MediaConvertClientTypes.Eac3AtmosStereoDownmix?
        /// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
        public var surroundExMode: MediaConvertClientTypes.Eac3AtmosSurroundExMode?

        public init(
            bitrate: Swift.Int? = nil,
            bitstreamMode: MediaConvertClientTypes.Eac3AtmosBitstreamMode? = nil,
            codingMode: MediaConvertClientTypes.Eac3AtmosCodingMode? = nil,
            dialogueIntelligence: MediaConvertClientTypes.Eac3AtmosDialogueIntelligence? = nil,
            downmixControl: MediaConvertClientTypes.Eac3AtmosDownmixControl? = nil,
            dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionLine? = nil,
            dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionRf? = nil,
            dynamicRangeControl: MediaConvertClientTypes.Eac3AtmosDynamicRangeControl? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            meteringMode: MediaConvertClientTypes.Eac3AtmosMeteringMode? = nil,
            sampleRate: Swift.Int? = nil,
            speechThreshold: Swift.Int? = nil,
            stereoDownmix: MediaConvertClientTypes.Eac3AtmosStereoDownmix? = nil,
            surroundExMode: MediaConvertClientTypes.Eac3AtmosSurroundExMode? = nil
        )
        {
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dialogueIntelligence = dialogueIntelligence
            self.downmixControl = downmixControl
            self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
            self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
            self.dynamicRangeControl = dynamicRangeControl
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.meteringMode = meteringMode
            self.sampleRate = sampleRate
            self.speechThreshold = speechThreshold
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
        }
    }
}

extension MediaConvertClientTypes {

    /// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    public enum Eac3AttenuationControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attenuate3Db
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AttenuationControl] {
            return [
                .attenuate3Db,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attenuate3Db: return "ATTENUATE_3_DB"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
    public enum Eac3BitstreamMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commentary
        case completeMain
        case emergency
        case hearingImpaired
        case visuallyImpaired
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3BitstreamMode] {
            return [
                .commentary,
                .completeMain,
                .emergency,
                .hearingImpaired,
                .visuallyImpaired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commentary: return "COMMENTARY"
            case .completeMain: return "COMPLETE_MAIN"
            case .emergency: return "EMERGENCY"
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .visuallyImpaired: return "VISUALLY_IMPAIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Dolby Digital Plus coding mode. Determines number of channels.
    public enum Eac3CodingMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codingMode10
        case codingMode20
        case codingMode32
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3CodingMode] {
            return [
                .codingMode10,
                .codingMode20,
                .codingMode32
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codingMode10: return "CODING_MODE_1_0"
            case .codingMode20: return "CODING_MODE_2_0"
            case .codingMode32: return "CODING_MODE_3_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Activates a DC highpass filter for all input channels.
    public enum Eac3DcFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DcFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Eac3DynamicRangeCompressionLine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DynamicRangeCompressionLine] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Eac3DynamicRangeCompressionRf: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3DynamicRangeCompressionRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When encoding 3/2 audio, controls whether the LFE channel is enabled
    public enum Eac3LfeControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lfe
        case noLfe
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3LfeControl] {
            return [
                .lfe,
                .noLfe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lfe: return "LFE"
            case .noLfe: return "NO_LFE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
    public enum Eac3LfeFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3LfeFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    public enum Eac3MetadataControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3MetadataControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    public enum Eac3PassthroughControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noPassthrough
        case whenPossible
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3PassthroughControl] {
            return [
                .noPassthrough,
                .whenPossible
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noPassthrough: return "NO_PASSTHROUGH"
            case .whenPossible: return "WHEN_POSSIBLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
    public enum Eac3PhaseControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noShift
        case shift90Degrees
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3PhaseControl] {
            return [
                .noShift,
                .shift90Degrees
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noShift: return "NO_SHIFT"
            case .shift90Degrees: return "SHIFT_90_DEGREES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs for the setting Coding mode. If you choose a different value for Coding mode, the service ignores Stereo downmix.
    public enum Eac3StereoDownmix: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dpl2
        case loRo
        case ltRt
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3StereoDownmix] {
            return [
                .dpl2,
                .loRo,
                .ltRt,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dpl2: return "DPL2"
            case .loRo: return "LO_RO"
            case .ltRt: return "LT_RT"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    public enum Eac3SurroundExMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3SurroundExMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    public enum Eac3SurroundMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case notIndicated
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3SurroundMode] {
            return [
                .disabled,
                .enabled,
                .notIndicated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .notIndicated: return "NOT_INDICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value EAC3.
    public struct Eac3Settings: Swift.Sendable {
        /// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
        public var attenuationControl: MediaConvertClientTypes.Eac3AttenuationControl?
        /// Specify the average bitrate in bits per second. The bitrate that you specify must be a multiple of 8000 within the allowed minimum and maximum values. Leave blank to use the default bitrate for the coding mode you select according ETSI TS 102 366. Valid bitrates for coding mode 1/0: Default: 96000. Minimum: 32000. Maximum: 3024000. Valid bitrates for coding mode 2/0: Default: 192000. Minimum: 96000. Maximum: 3024000. Valid bitrates for coding mode 3/2: Default: 384000. Minimum: 192000. Maximum: 3024000.
        public var bitrate: Swift.Int?
        /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
        public var bitstreamMode: MediaConvertClientTypes.Eac3BitstreamMode?
        /// Dolby Digital Plus coding mode. Determines number of channels.
        public var codingMode: MediaConvertClientTypes.Eac3CodingMode?
        /// Activates a DC highpass filter for all input channels.
        public var dcFilter: MediaConvertClientTypes.Eac3DcFilter?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3DynamicRangeCompressionLine?
        /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile. For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3DynamicRangeCompressionRf?
        /// When encoding 3/2 audio, controls whether the LFE channel is enabled
        public var lfeControl: MediaConvertClientTypes.Eac3LfeControl?
        /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
        public var lfeFilter: MediaConvertClientTypes.Eac3LfeFilter?
        /// Specify a value for the following Dolby Digital Plus setting: Left only/Right only center mix. MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix. Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs for the setting Coding mode. If you choose a different value for Coding mode, the service ignores Left only/Right only center.
        public var loRoCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Digital Plus setting: Left only/Right only. MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix. Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs for the setting Coding mode. If you choose a different value for Coding mode, the service ignores Left only/Right only surround.
        public var loRoSurroundMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Digital Plus setting: Left total/Right total center mix. MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix. Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs for the setting Coding mode. If you choose a different value for Coding mode, the service ignores Left total/Right total center.
        public var ltRtCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Digital Plus setting: Left total/Right total surround mix. MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix. Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs for the setting Coding mode. If you choose a different value for Coding mode, the service ignores Left total/Right total surround.
        public var ltRtSurroundMixLevel: Swift.Double?
        /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaConvertClientTypes.Eac3MetadataControl?
        /// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
        public var passthroughControl: MediaConvertClientTypes.Eac3PassthroughControl?
        /// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
        public var phaseControl: MediaConvertClientTypes.Eac3PhaseControl?
        /// This value is always 48000. It represents the sample rate in Hz.
        public var sampleRate: Swift.Int?
        /// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs for the setting Coding mode. If you choose a different value for Coding mode, the service ignores Stereo downmix.
        public var stereoDownmix: MediaConvertClientTypes.Eac3StereoDownmix?
        /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
        public var surroundExMode: MediaConvertClientTypes.Eac3SurroundExMode?
        /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
        public var surroundMode: MediaConvertClientTypes.Eac3SurroundMode?

        public init(
            attenuationControl: MediaConvertClientTypes.Eac3AttenuationControl? = nil,
            bitrate: Swift.Int? = nil,
            bitstreamMode: MediaConvertClientTypes.Eac3BitstreamMode? = nil,
            codingMode: MediaConvertClientTypes.Eac3CodingMode? = nil,
            dcFilter: MediaConvertClientTypes.Eac3DcFilter? = nil,
            dialnorm: Swift.Int? = nil,
            dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3DynamicRangeCompressionLine? = nil,
            dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3DynamicRangeCompressionRf? = nil,
            lfeControl: MediaConvertClientTypes.Eac3LfeControl? = nil,
            lfeFilter: MediaConvertClientTypes.Eac3LfeFilter? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            metadataControl: MediaConvertClientTypes.Eac3MetadataControl? = nil,
            passthroughControl: MediaConvertClientTypes.Eac3PassthroughControl? = nil,
            phaseControl: MediaConvertClientTypes.Eac3PhaseControl? = nil,
            sampleRate: Swift.Int? = nil,
            stereoDownmix: MediaConvertClientTypes.Eac3StereoDownmix? = nil,
            surroundExMode: MediaConvertClientTypes.Eac3SurroundExMode? = nil,
            surroundMode: MediaConvertClientTypes.Eac3SurroundMode? = nil
        )
        {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dcFilter = dcFilter
            self.dialnorm = dialnorm
            self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
            self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
            self.lfeControl = lfeControl
            self.lfeFilter = lfeFilter
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.metadataControl = metadataControl
            self.passthroughControl = passthroughControl
            self.phaseControl = phaseControl
            self.sampleRate = sampleRate
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
            self.surroundMode = surroundMode
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value FLAC.
    public struct FlacSettings: Swift.Sendable {
        /// Specify Bit depth (BitDepth), in bits per sample, to choose the encoding quality for this audio track.
        public var bitDepth: Swift.Int?
        /// Specify the number of channels in this output audio track. Choosing Mono on the console gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are between 1 and 8.
        public var channels: Swift.Int?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Int?

        public init(
            bitDepth: Swift.Int? = nil,
            channels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.bitDepth = bitDepth
            self.channels = channels
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value MP2.
    public struct Mp2Settings: Swift.Sendable {
        /// Specify the average bitrate in bits per second.
        public var bitrate: Swift.Int?
        /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
        public var channels: Swift.Int?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Int?

        public init(
            bitrate: Swift.Int? = nil,
            channels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.bitrate = bitrate
            self.channels = channels
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    public enum Mp3RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [Mp3RateControlMode] {
            return [
                .cbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value MP3.
    public struct Mp3Settings: Swift.Sendable {
        /// Specify the average bitrate in bits per second.
        public var bitrate: Swift.Int?
        /// Specify the number of channels in this output audio track. Choosing Mono gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
        public var channels: Swift.Int?
        /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
        public var rateControlMode: MediaConvertClientTypes.Mp3RateControlMode?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Int?
        /// Required when you set Bitrate control mode to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
        public var vbrQuality: Swift.Int?

        public init(
            bitrate: Swift.Int? = nil,
            channels: Swift.Int? = nil,
            rateControlMode: MediaConvertClientTypes.Mp3RateControlMode? = nil,
            sampleRate: Swift.Int? = nil,
            vbrQuality: Swift.Int? = nil
        )
        {
            self.bitrate = bitrate
            self.channels = channels
            self.rateControlMode = rateControlMode
            self.sampleRate = sampleRate
            self.vbrQuality = vbrQuality
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value OPUS.
    public struct OpusSettings: Swift.Sendable {
        /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
        public var bitrate: Swift.Int?
        /// Specify the number of channels in this output audio track. Choosing Mono on gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
        public var channels: Swift.Int?
        /// Optional. Sample rate in Hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
        public var sampleRate: Swift.Int?

        public init(
            bitrate: Swift.Int? = nil,
            channels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.bitrate = bitrate
            self.channels = channels
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value Vorbis.
    public struct VorbisSettings: Swift.Sendable {
        /// Optional. Specify the number of channels in this output audio track. Choosing Mono on the console gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2. The default value is 2.
        public var channels: Swift.Int?
        /// Optional. Specify the audio sample rate in Hz. Valid values are 22050, 32000, 44100, and 48000. The default value is 48000.
        public var sampleRate: Swift.Int?
        /// Optional. Specify the variable audio quality of this Vorbis output from -1 (lowest quality, ~45 kbit/s) to 10 (highest quality, ~500 kbit/s). The default value is 4 (~128 kbit/s). Values 5 and 6 are approximately 160 and 192 kbit/s, respectively.
        public var vbrQuality: Swift.Int?

        public init(
            channels: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil,
            vbrQuality: Swift.Int? = nil
        )
        {
            self.channels = channels
            self.sampleRate = sampleRate
            self.vbrQuality = vbrQuality
        }
    }
}

extension MediaConvertClientTypes {

    /// The service defaults to using RIFF for WAV outputs. If your output audio is likely to exceed 4 GB in file size, or if you otherwise need the extended support of the RF64 format, set your output WAV file format to RF64.
    public enum WavFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rf64
        case riff
        case sdkUnknown(Swift.String)

        public static var allCases: [WavFormat] {
            return [
                .rf64,
                .riff
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rf64: return "RF64"
            case .riff: return "RIFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value WAV.
    public struct WavSettings: Swift.Sendable {
        /// Specify Bit depth, in bits per sample, to choose the encoding quality for this audio track.
        public var bitDepth: Swift.Int?
        /// Specify the number of channels in this output audio track. Valid values are 1 and even numbers up to 64. For example, 1, 2, 4, 6, and so on, up to 64.
        public var channels: Swift.Int?
        /// The service defaults to using RIFF for WAV outputs. If your output audio is likely to exceed 4 GB in file size, or if you otherwise need the extended support of the RF64 format, set your output WAV file format to RF64.
        public var format: MediaConvertClientTypes.WavFormat?
        /// Sample rate in Hz.
        public var sampleRate: Swift.Int?

        public init(
            bitDepth: Swift.Int? = nil,
            channels: Swift.Int? = nil,
            format: MediaConvertClientTypes.WavFormat? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.bitDepth = bitDepth
            self.channels = channels
            self.format = format
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to audio encoding. The settings in this group vary depending on the value that you choose for your audio codec.
    public struct AudioCodecSettings: Swift.Sendable {
        /// Required when you set Codec to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode to "VBR" or "CBR". In VBR mode, you control the audio quality with the setting VBR quality. In CBR mode, you use the setting Bitrate. Defaults and valid values depend on the rate control mode.
        public var aacSettings: MediaConvertClientTypes.AacSettings?
        /// Required when you set Codec to the value AC3.
        public var ac3Settings: MediaConvertClientTypes.Ac3Settings?
        /// Required when you set Codec to the value AIFF.
        public var aiffSettings: MediaConvertClientTypes.AiffSettings?
        /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
        public var codec: MediaConvertClientTypes.AudioCodec?
        /// Required when you set Codec to the value EAC3_ATMOS.
        public var eac3AtmosSettings: MediaConvertClientTypes.Eac3AtmosSettings?
        /// Required when you set Codec to the value EAC3.
        public var eac3Settings: MediaConvertClientTypes.Eac3Settings?
        /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value FLAC.
        public var flacSettings: MediaConvertClientTypes.FlacSettings?
        /// Required when you set Codec to the value MP2.
        public var mp2Settings: MediaConvertClientTypes.Mp2Settings?
        /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value MP3.
        public var mp3Settings: MediaConvertClientTypes.Mp3Settings?
        /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value OPUS.
        public var opusSettings: MediaConvertClientTypes.OpusSettings?
        /// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value Vorbis.
        public var vorbisSettings: MediaConvertClientTypes.VorbisSettings?
        /// Required when you set Codec to the value WAV.
        public var wavSettings: MediaConvertClientTypes.WavSettings?

        public init(
            aacSettings: MediaConvertClientTypes.AacSettings? = nil,
            ac3Settings: MediaConvertClientTypes.Ac3Settings? = nil,
            aiffSettings: MediaConvertClientTypes.AiffSettings? = nil,
            codec: MediaConvertClientTypes.AudioCodec? = nil,
            eac3AtmosSettings: MediaConvertClientTypes.Eac3AtmosSettings? = nil,
            eac3Settings: MediaConvertClientTypes.Eac3Settings? = nil,
            flacSettings: MediaConvertClientTypes.FlacSettings? = nil,
            mp2Settings: MediaConvertClientTypes.Mp2Settings? = nil,
            mp3Settings: MediaConvertClientTypes.Mp3Settings? = nil,
            opusSettings: MediaConvertClientTypes.OpusSettings? = nil,
            vorbisSettings: MediaConvertClientTypes.VorbisSettings? = nil,
            wavSettings: MediaConvertClientTypes.WavSettings? = nil
        )
        {
            self.aacSettings = aacSettings
            self.ac3Settings = ac3Settings
            self.aiffSettings = aiffSettings
            self.codec = codec
            self.eac3AtmosSettings = eac3AtmosSettings
            self.eac3Settings = eac3Settings
            self.flacSettings = flacSettings
            self.mp2Settings = mp2Settings
            self.mp3Settings = mp3Settings
            self.opusSettings = opusSettings
            self.vorbisSettings = vorbisSettings
            self.wavSettings = wavSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
    public enum LanguageCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aar
        case abk
        case afr
        case aka
        case amh
        case ara
        case arg
        case asm
        case ava
        case ave
        case aym
        case aze
        case bak
        case bam
        case bel
        case ben
        case bih
        case bis
        case bod
        case bos
        case bre
        case bul
        case cat
        case ces
        case cha
        case che
        case chu
        case chv
        case cor
        case cos
        case cre
        case cym
        case dan
        case deu
        case div
        case dzo
        case ell
        case eng
        case enm
        case epo
        case est
        case eus
        case ewe
        case fao
        case fas
        case fij
        case fin
        case fra
        case frm
        case fry
        case ful
        case ger
        case gla
        case gle
        case glg
        case glv
        case grn
        case guj
        case hat
        case hau
        case heb
        case her
        case hin
        case hmo
        case hrv
        case hun
        case hye
        case ibo
        case ido
        case iii
        case iku
        case ile
        case ina
        case ind
        case ipk
        case isl
        case ita
        case jav
        case jpn
        case kal
        case kan
        case kas
        case kat
        case kau
        case kaz
        case khm
        case kik
        case kin
        case kir
        case kom
        case kon
        case kor
        case kua
        case kur
        case lao
        case lat
        case lav
        case lim
        case lin
        case lit
        case ltz
        case lub
        case lug
        case mah
        case mal
        case mar
        case mkd
        case mlg
        case mlt
        case mon
        case mri
        case msa
        case mya
        case nau
        case nav
        case nbl
        case nde
        case ndo
        case nep
        case nld
        case nno
        case nob
        case nor
        case nya
        case oci
        case oji
        case ori
        case orj
        case orm
        case oss
        case pan
        case pli
        case pol
        case por
        case pus
        case qaa
        case qpc
        case que
        case roh
        case ron
        case run
        case rus
        case sag
        case san
        case sin
        case slk
        case slv
        case sme
        case smo
        case sna
        case snd
        case som
        case sot
        case spa
        case sqi
        case srb
        case srd
        case srp
        case ssw
        case sun
        case swa
        case swe
        case tah
        case tam
        case tat
        case tel
        case tgk
        case tgl
        case tha
        case tir
        case tng
        case ton
        case tsn
        case tso
        case tuk
        case tur
        case twi
        case uig
        case ukr
        case urd
        case uzb
        case ven
        case vie
        case vol
        case wln
        case wol
        case xho
        case yid
        case yor
        case zha
        case zho
        case zul
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .aar,
                .abk,
                .afr,
                .aka,
                .amh,
                .ara,
                .arg,
                .asm,
                .ava,
                .ave,
                .aym,
                .aze,
                .bak,
                .bam,
                .bel,
                .ben,
                .bih,
                .bis,
                .bod,
                .bos,
                .bre,
                .bul,
                .cat,
                .ces,
                .cha,
                .che,
                .chu,
                .chv,
                .cor,
                .cos,
                .cre,
                .cym,
                .dan,
                .deu,
                .div,
                .dzo,
                .ell,
                .eng,
                .enm,
                .epo,
                .est,
                .eus,
                .ewe,
                .fao,
                .fas,
                .fij,
                .fin,
                .fra,
                .frm,
                .fry,
                .ful,
                .ger,
                .gla,
                .gle,
                .glg,
                .glv,
                .grn,
                .guj,
                .hat,
                .hau,
                .heb,
                .her,
                .hin,
                .hmo,
                .hrv,
                .hun,
                .hye,
                .ibo,
                .ido,
                .iii,
                .iku,
                .ile,
                .ina,
                .ind,
                .ipk,
                .isl,
                .ita,
                .jav,
                .jpn,
                .kal,
                .kan,
                .kas,
                .kat,
                .kau,
                .kaz,
                .khm,
                .kik,
                .kin,
                .kir,
                .kom,
                .kon,
                .kor,
                .kua,
                .kur,
                .lao,
                .lat,
                .lav,
                .lim,
                .lin,
                .lit,
                .ltz,
                .lub,
                .lug,
                .mah,
                .mal,
                .mar,
                .mkd,
                .mlg,
                .mlt,
                .mon,
                .mri,
                .msa,
                .mya,
                .nau,
                .nav,
                .nbl,
                .nde,
                .ndo,
                .nep,
                .nld,
                .nno,
                .nob,
                .nor,
                .nya,
                .oci,
                .oji,
                .ori,
                .orj,
                .orm,
                .oss,
                .pan,
                .pli,
                .pol,
                .por,
                .pus,
                .qaa,
                .qpc,
                .que,
                .roh,
                .ron,
                .run,
                .rus,
                .sag,
                .san,
                .sin,
                .slk,
                .slv,
                .sme,
                .smo,
                .sna,
                .snd,
                .som,
                .sot,
                .spa,
                .sqi,
                .srb,
                .srd,
                .srp,
                .ssw,
                .sun,
                .swa,
                .swe,
                .tah,
                .tam,
                .tat,
                .tel,
                .tgk,
                .tgl,
                .tha,
                .tir,
                .tng,
                .ton,
                .tsn,
                .tso,
                .tuk,
                .tur,
                .twi,
                .uig,
                .ukr,
                .urd,
                .uzb,
                .ven,
                .vie,
                .vol,
                .wln,
                .wol,
                .xho,
                .yid,
                .yor,
                .zha,
                .zho,
                .zul
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aar: return "AAR"
            case .abk: return "ABK"
            case .afr: return "AFR"
            case .aka: return "AKA"
            case .amh: return "AMH"
            case .ara: return "ARA"
            case .arg: return "ARG"
            case .asm: return "ASM"
            case .ava: return "AVA"
            case .ave: return "AVE"
            case .aym: return "AYM"
            case .aze: return "AZE"
            case .bak: return "BAK"
            case .bam: return "BAM"
            case .bel: return "BEL"
            case .ben: return "BEN"
            case .bih: return "BIH"
            case .bis: return "BIS"
            case .bod: return "BOD"
            case .bos: return "BOS"
            case .bre: return "BRE"
            case .bul: return "BUL"
            case .cat: return "CAT"
            case .ces: return "CES"
            case .cha: return "CHA"
            case .che: return "CHE"
            case .chu: return "CHU"
            case .chv: return "CHV"
            case .cor: return "COR"
            case .cos: return "COS"
            case .cre: return "CRE"
            case .cym: return "CYM"
            case .dan: return "DAN"
            case .deu: return "DEU"
            case .div: return "DIV"
            case .dzo: return "DZO"
            case .ell: return "ELL"
            case .eng: return "ENG"
            case .enm: return "ENM"
            case .epo: return "EPO"
            case .est: return "EST"
            case .eus: return "EUS"
            case .ewe: return "EWE"
            case .fao: return "FAO"
            case .fas: return "FAS"
            case .fij: return "FIJ"
            case .fin: return "FIN"
            case .fra: return "FRA"
            case .frm: return "FRM"
            case .fry: return "FRY"
            case .ful: return "FUL"
            case .ger: return "GER"
            case .gla: return "GLA"
            case .gle: return "GLE"
            case .glg: return "GLG"
            case .glv: return "GLV"
            case .grn: return "GRN"
            case .guj: return "GUJ"
            case .hat: return "HAT"
            case .hau: return "HAU"
            case .heb: return "HEB"
            case .her: return "HER"
            case .hin: return "HIN"
            case .hmo: return "HMO"
            case .hrv: return "HRV"
            case .hun: return "HUN"
            case .hye: return "HYE"
            case .ibo: return "IBO"
            case .ido: return "IDO"
            case .iii: return "III"
            case .iku: return "IKU"
            case .ile: return "ILE"
            case .ina: return "INA"
            case .ind: return "IND"
            case .ipk: return "IPK"
            case .isl: return "ISL"
            case .ita: return "ITA"
            case .jav: return "JAV"
            case .jpn: return "JPN"
            case .kal: return "KAL"
            case .kan: return "KAN"
            case .kas: return "KAS"
            case .kat: return "KAT"
            case .kau: return "KAU"
            case .kaz: return "KAZ"
            case .khm: return "KHM"
            case .kik: return "KIK"
            case .kin: return "KIN"
            case .kir: return "KIR"
            case .kom: return "KOM"
            case .kon: return "KON"
            case .kor: return "KOR"
            case .kua: return "KUA"
            case .kur: return "KUR"
            case .lao: return "LAO"
            case .lat: return "LAT"
            case .lav: return "LAV"
            case .lim: return "LIM"
            case .lin: return "LIN"
            case .lit: return "LIT"
            case .ltz: return "LTZ"
            case .lub: return "LUB"
            case .lug: return "LUG"
            case .mah: return "MAH"
            case .mal: return "MAL"
            case .mar: return "MAR"
            case .mkd: return "MKD"
            case .mlg: return "MLG"
            case .mlt: return "MLT"
            case .mon: return "MON"
            case .mri: return "MRI"
            case .msa: return "MSA"
            case .mya: return "MYA"
            case .nau: return "NAU"
            case .nav: return "NAV"
            case .nbl: return "NBL"
            case .nde: return "NDE"
            case .ndo: return "NDO"
            case .nep: return "NEP"
            case .nld: return "NLD"
            case .nno: return "NNO"
            case .nob: return "NOB"
            case .nor: return "NOR"
            case .nya: return "NYA"
            case .oci: return "OCI"
            case .oji: return "OJI"
            case .ori: return "ORI"
            case .orj: return "ORJ"
            case .orm: return "ORM"
            case .oss: return "OSS"
            case .pan: return "PAN"
            case .pli: return "PLI"
            case .pol: return "POL"
            case .por: return "POR"
            case .pus: return "PUS"
            case .qaa: return "QAA"
            case .qpc: return "QPC"
            case .que: return "QUE"
            case .roh: return "ROH"
            case .ron: return "RON"
            case .run: return "RUN"
            case .rus: return "RUS"
            case .sag: return "SAG"
            case .san: return "SAN"
            case .sin: return "SIN"
            case .slk: return "SLK"
            case .slv: return "SLV"
            case .sme: return "SME"
            case .smo: return "SMO"
            case .sna: return "SNA"
            case .snd: return "SND"
            case .som: return "SOM"
            case .sot: return "SOT"
            case .spa: return "SPA"
            case .sqi: return "SQI"
            case .srb: return "SRB"
            case .srd: return "SRD"
            case .srp: return "SRP"
            case .ssw: return "SSW"
            case .sun: return "SUN"
            case .swa: return "SWA"
            case .swe: return "SWE"
            case .tah: return "TAH"
            case .tam: return "TAM"
            case .tat: return "TAT"
            case .tel: return "TEL"
            case .tgk: return "TGK"
            case .tgl: return "TGL"
            case .tha: return "THA"
            case .tir: return "TIR"
            case .tng: return "TNG"
            case .ton: return "TON"
            case .tsn: return "TSN"
            case .tso: return "TSO"
            case .tuk: return "TUK"
            case .tur: return "TUR"
            case .twi: return "TWI"
            case .uig: return "UIG"
            case .ukr: return "UKR"
            case .urd: return "URD"
            case .uzb: return "UZB"
            case .ven: return "VEN"
            case .vie: return "VIE"
            case .vol: return "VOL"
            case .wln: return "WLN"
            case .wol: return "WOL"
            case .xho: return "XHO"
            case .yid: return "YID"
            case .yor: return "YOR"
            case .zha: return "ZHA"
            case .zho: return "ZHO"
            case .zul: return "ZUL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify which source for language code takes precedence for this audio track. When you choose Follow input, the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code. When you choose Use configured, the service uses the language code that you specify.
    public enum AudioLanguageCodeControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followInput
        case useConfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioLanguageCodeControl] {
            return [
                .followInput,
                .useConfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followInput: return "FOLLOW_INPUT"
            case .useConfigured: return "USE_CONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// OutputChannel mapping settings.
    public struct OutputChannelMapping: Swift.Sendable {
        /// Use this setting to specify your remix values when they are integers, such as -10, 0, or 4.
        public var inputChannels: [Swift.Int]?
        /// Use this setting to specify your remix values when they have a decimal component, such as -10.312, 0.08, or 4.9. MediaConvert rounds your remixing values to the nearest thousandth.
        public var inputChannelsFineTune: [Swift.Double]?

        public init(
            inputChannels: [Swift.Int]? = nil,
            inputChannelsFineTune: [Swift.Double]? = nil
        )
        {
            self.inputChannels = inputChannels
            self.inputChannelsFineTune = inputChannelsFineTune
        }
    }
}

extension MediaConvertClientTypes {

    /// Channel mapping contains the group of fields that hold the remixing value for each channel, in dB. Specify remix values to indicate how much of the content from your input audio channel you want in your output audio channels. Each instance of the InputChannels or InputChannelsFineTune array specifies these values for one output channel. Use one instance of this array for each output channel. In the console, each array corresponds to a column in the graphical depiction of the mapping matrix. The rows of the graphical matrix correspond to input channels. Valid values are within the range from -60 (mute) through 6. A setting of 0 passes the input channel unchanged to the output channel (no attenuation or amplification). Use InputChannels or InputChannelsFineTune to specify your remix values. Don't use both.
    public struct ChannelMapping: Swift.Sendable {
        /// In your JSON job specification, include one child of OutputChannels for each audio channel that you want in your output. Each child should contain one instance of InputChannels or InputChannelsFineTune.
        public var outputChannels: [MediaConvertClientTypes.OutputChannelMapping]?

        public init(
            outputChannels: [MediaConvertClientTypes.OutputChannelMapping]? = nil
        )
        {
            self.outputChannels = outputChannels
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Manual audio remixing to adjust audio levels for each audio channel in each output of your job. With audio remixing, you can output more or fewer audio channels than your input audio source provides.
    public struct RemixSettings: Swift.Sendable {
        /// Optionally specify the channel in your input that contains your audio description audio signal. MediaConvert mixes your audio signal across all output channels, while reducing their volume according to your data stream. When you specify an audio description audio channel, you must also specify an audio description data channel. For more information about audio description signals, see the BBC WHP 198 and 051 white papers.
        public var audioDescriptionAudioChannel: Swift.Int?
        /// Optionally specify the channel in your input that contains your audio description data stream. MediaConvert mixes your audio signal across all output channels, while reducing their volume according to your data stream. When you specify an audio description data channel, you must also specify an audio description audio channel. For more information about audio description signals, see the BBC WHP 198 and 051 white papers.
        public var audioDescriptionDataChannel: Swift.Int?
        /// Channel mapping contains the group of fields that hold the remixing value for each channel, in dB. Specify remix values to indicate how much of the content from your input audio channel you want in your output audio channels. Each instance of the InputChannels or InputChannelsFineTune array specifies these values for one output channel. Use one instance of this array for each output channel. In the console, each array corresponds to a column in the graphical depiction of the mapping matrix. The rows of the graphical matrix correspond to input channels. Valid values are within the range from -60 (mute) through 6. A setting of 0 passes the input channel unchanged to the output channel (no attenuation or amplification). Use InputChannels or InputChannelsFineTune to specify your remix values. Don't use both.
        public var channelMapping: MediaConvertClientTypes.ChannelMapping?
        /// Specify the number of audio channels from your input that you want to use in your output. With remixing, you might combine or split the data in these channels, so the number of channels in your final output might be different. If you are doing both input channel mapping and output channel mapping, the number of output channels in your input mapping must be the same as the number of input channels in your output mapping.
        public var channelsIn: Swift.Int?
        /// Specify the number of channels in this output after remixing. Valid values: 1, 2, 4, 6, 8... 64. (1 and even numbers to 64.) If you are doing both input channel mapping and output channel mapping, the number of output channels in your input mapping must be the same as the number of input channels in your output mapping.
        public var channelsOut: Swift.Int?

        public init(
            audioDescriptionAudioChannel: Swift.Int? = nil,
            audioDescriptionDataChannel: Swift.Int? = nil,
            channelMapping: MediaConvertClientTypes.ChannelMapping? = nil,
            channelsIn: Swift.Int? = nil,
            channelsOut: Swift.Int? = nil
        )
        {
            self.audioDescriptionAudioChannel = audioDescriptionAudioChannel
            self.audioDescriptionDataChannel = audioDescriptionDataChannel
            self.channelMapping = channelMapping
            self.channelsIn = channelsIn
            self.channelsOut = channelsOut
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to one audio tab on the MediaConvert console. In your job JSON, an instance of AudioDescription is equivalent to one audio tab in the console. Usually, one audio tab corresponds to one output audio track. Depending on how you set up your input audio selectors and whether you use audio selector groups, one audio tab can correspond to a group of output audio tracks.
    public struct AudioDescription: Swift.Sendable {
        /// Specify the QuickTime audio channel layout tags for the audio channels in this audio track. When you don't specify a value, MediaConvert labels your track as Center (C) by default. To use Audio layout tagging, your output must be in a QuickTime (MOV) container and your audio codec must be AAC, WAV, or AIFF.
        public var audioChannelTaggingSettings: MediaConvertClientTypes.AudioChannelTaggingSettings?
        /// Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
        public var audioNormalizationSettings: MediaConvertClientTypes.AudioNormalizationSettings?
        /// Specifies which audio data to use from each input. In the simplest case, specify an "Audio Selector":#inputs-audio_selector by name based on its order within each input. For example if you specify "Audio Selector 3", then the third audio selector will be used from each input. If an input does not have an "Audio Selector 3", then the audio selector marked as "default" in that input will be used. If there is no audio selector marked as "default", silence will be inserted for the duration of that input. Alternatively, an "Audio Selector Group":#inputs-audio_selector_group name may be specified, with similar default/silence behavior. If no audio_source_name is specified, then "Audio Selector 1" will be chosen automatically.
        public var audioSourceName: Swift.String?
        /// Applies only if Follow Input Audio Type is unchecked (false). A number between 0 and 255. The following are defined in ISO-IEC 13818-1: 0 = Undefined, 1 = Clean Effects, 2 = Hearing Impaired, 3 = Visually Impaired Commentary, 4-255 = Reserved.
        public var audioType: Swift.Int?
        /// When set to FOLLOW_INPUT, if the input contains an ISO 639 audio_type, then that value is passed through to the output. If the input contains no ISO 639 audio_type, the value in Audio Type is included in the output. Otherwise the value in Audio Type is included in the output. Note that this field and audioType are both ignored if audioDescriptionBroadcasterMix is set to BROADCASTER_MIXED_AD.
        public var audioTypeControl: MediaConvertClientTypes.AudioTypeControl?
        /// Settings related to audio encoding. The settings in this group vary depending on the value that you choose for your audio codec.
        public var codecSettings: MediaConvertClientTypes.AudioCodecSettings?
        /// Specify the language for this audio output track. The service puts this language code into your output audio track when you set Language code control to Use configured. The service also uses your specified custom language code when you set Language code control to Follow input, but your input file doesn't specify a language code. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
        public var customLanguageCode: Swift.String?
        /// Indicates the language of the audio output track. The ISO 639 language specified in the 'Language Code' drop down will be used when 'Follow Input Language Code' is not selected or when 'Follow Input Language Code' is selected but there is no ISO 639 language code specified by the input.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// Specify which source for language code takes precedence for this audio track. When you choose Follow input, the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code. When you choose Use configured, the service uses the language code that you specify.
        public var languageCodeControl: MediaConvertClientTypes.AudioLanguageCodeControl?
        /// Advanced audio remixing settings.
        public var remixSettings: MediaConvertClientTypes.RemixSettings?
        /// Specify a label for this output audio stream. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
        public var streamName: Swift.String?

        public init(
            audioChannelTaggingSettings: MediaConvertClientTypes.AudioChannelTaggingSettings? = nil,
            audioNormalizationSettings: MediaConvertClientTypes.AudioNormalizationSettings? = nil,
            audioSourceName: Swift.String? = nil,
            audioType: Swift.Int? = nil,
            audioTypeControl: MediaConvertClientTypes.AudioTypeControl? = nil,
            codecSettings: MediaConvertClientTypes.AudioCodecSettings? = nil,
            customLanguageCode: Swift.String? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            languageCodeControl: MediaConvertClientTypes.AudioLanguageCodeControl? = nil,
            remixSettings: MediaConvertClientTypes.RemixSettings? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.audioChannelTaggingSettings = audioChannelTaggingSettings
            self.audioNormalizationSettings = audioNormalizationSettings
            self.audioSourceName = audioSourceName
            self.audioType = audioType
            self.audioTypeControl = audioTypeControl
            self.codecSettings = codecSettings
            self.customLanguageCode = customLanguageCode
            self.languageCode = languageCode
            self.languageCodeControl = languageCodeControl
            self.remixSettings = remixSettings
            self.streamName = streamName
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Force include renditions to specify one or more resolutions to include your ABR stack. * (Recommended) To optimize automated ABR, specify as few resolutions as possible. * (Required) The number of resolutions that you specify must be equal to, or less than, the Max renditions setting. * If you specify a Min top rendition size rule, specify at least one resolution that is equal to, or greater than, Min top rendition size. * If you specify a Min bottom rendition size rule, only specify resolutions that are equal to, or greater than, Min bottom rendition size. * If you specify a Force include renditions rule, do not specify a separate rule for Allowed renditions. * Note: The ABR stack may include other resolutions that you do not specify here, depending on the Max renditions setting.
    public struct ForceIncludeRenditionSize: Swift.Sendable {
        /// Use Height to define the video resolution height, in pixels, for this rule.
        public var height: Swift.Int?
        /// Use Width to define the video resolution width, in pixels, for this rule.
        public var width: Swift.Int?

        public init(
            height: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.height = height
            self.width = width
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Min bottom rendition size to specify a minimum size for the lowest resolution in your ABR stack. * The lowest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 640x360 the lowest resolution in your ABR stack will be equal to or greater than to 640x360. * If you specify a Min top rendition size rule, the value that you specify for Min bottom rendition size must be less than, or equal to, Min top rendition size.
    public struct MinBottomRenditionSize: Swift.Sendable {
        /// Use Height to define the video resolution height, in pixels, for this rule.
        public var height: Swift.Int?
        /// Use Width to define the video resolution width, in pixels, for this rule.
        public var width: Swift.Int?

        public init(
            height: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.height = height
            self.width = width
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Min top rendition size to specify a minimum size for the highest resolution in your ABR stack. * The highest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 1280x720 the highest resolution in your ABR stack will be equal to or greater than 1280x720. * If you specify a value for Max resolution, the value that you specify for Min top rendition size must be less than, or equal to, Max resolution.
    public struct MinTopRenditionSize: Swift.Sendable {
        /// Use Height to define the video resolution height, in pixels, for this rule.
        public var height: Swift.Int?
        /// Use Width to define the video resolution width, in pixels, for this rule.
        public var width: Swift.Int?

        public init(
            height: Swift.Int? = nil,
            width: Swift.Int? = nil
        )
        {
            self.height = height
            self.width = width
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Min top rendition size to specify a minimum size for the highest resolution in your ABR stack. * The highest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 1280x720 the highest resolution in your ABR stack will be equal to or greater than 1280x720. * If you specify a value for Max resolution, the value that you specify for Min top rendition size must be less than, or equal to, Max resolution. Use Min bottom rendition size to specify a minimum size for the lowest resolution in your ABR stack. * The lowest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 640x360 the lowest resolution in your ABR stack will be equal to or greater than to 640x360. * If you specify a Min top rendition size rule, the value that you specify for Min bottom rendition size must be less than, or equal to, Min top rendition size. Use Force include renditions to specify one or more resolutions to include your ABR stack. * (Recommended) To optimize automated ABR, specify as few resolutions as possible. * (Required) The number of resolutions that you specify must be equal to, or less than, the Max renditions setting. * If you specify a Min top rendition size rule, specify at least one resolution that is equal to, or greater than, Min top rendition size. * If you specify a Min bottom rendition size rule, only specify resolutions that are equal to, or greater than, Min bottom rendition size. * If you specify a Force include renditions rule, do not specify a separate rule for Allowed renditions. * Note: The ABR stack may include other resolutions that you do not specify here, depending on the Max renditions setting. Use Allowed renditions to specify a list of possible resolutions in your ABR stack. * (Required) The number of resolutions that you specify must be equal to, or greater than, the Max renditions setting. * MediaConvert will create an ABR stack exclusively from the list of resolutions that you specify. * Some resolutions in the Allowed renditions list may not be included, however you can force a resolution to be included by setting Required to ENABLED. * You must specify at least one resolution that is greater than or equal to any resolutions that you specify in Min top rendition size or Min bottom rendition size. * If you specify Allowed renditions, you must not specify a separate rule for Force include renditions.
    public enum RuleType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allowedRenditions
        case forceIncludeRenditions
        case minBottomRenditionSize
        case minTopRenditionSize
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleType] {
            return [
                .allowedRenditions,
                .forceIncludeRenditions,
                .minBottomRenditionSize,
                .minTopRenditionSize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allowedRenditions: return "ALLOWED_RENDITIONS"
            case .forceIncludeRenditions: return "FORCE_INCLUDE_RENDITIONS"
            case .minBottomRenditionSize: return "MIN_BOTTOM_RENDITION_SIZE"
            case .minTopRenditionSize: return "MIN_TOP_RENDITION_SIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify one or more Automated ABR rule types. Note: Force include and Allowed renditions are mutually exclusive.
    public struct AutomatedAbrRule: Swift.Sendable {
        /// When customer adds the allowed renditions rule for auto ABR ladder, they are required to add at leat one rendition to allowedRenditions list
        public var allowedRenditions: [MediaConvertClientTypes.AllowedRenditionSize]?
        /// When customer adds the force include renditions rule for auto ABR ladder, they are required to add at leat one rendition to forceIncludeRenditions list
        public var forceIncludeRenditions: [MediaConvertClientTypes.ForceIncludeRenditionSize]?
        /// Use Min bottom rendition size to specify a minimum size for the lowest resolution in your ABR stack. * The lowest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 640x360 the lowest resolution in your ABR stack will be equal to or greater than to 640x360. * If you specify a Min top rendition size rule, the value that you specify for Min bottom rendition size must be less than, or equal to, Min top rendition size.
        public var minBottomRenditionSize: MediaConvertClientTypes.MinBottomRenditionSize?
        /// Use Min top rendition size to specify a minimum size for the highest resolution in your ABR stack. * The highest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 1280x720 the highest resolution in your ABR stack will be equal to or greater than 1280x720. * If you specify a value for Max resolution, the value that you specify for Min top rendition size must be less than, or equal to, Max resolution.
        public var minTopRenditionSize: MediaConvertClientTypes.MinTopRenditionSize?
        /// Use Min top rendition size to specify a minimum size for the highest resolution in your ABR stack. * The highest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 1280x720 the highest resolution in your ABR stack will be equal to or greater than 1280x720. * If you specify a value for Max resolution, the value that you specify for Min top rendition size must be less than, or equal to, Max resolution. Use Min bottom rendition size to specify a minimum size for the lowest resolution in your ABR stack. * The lowest resolution in your ABR stack will be equal to or greater than the value that you enter. For example: If you specify 640x360 the lowest resolution in your ABR stack will be equal to or greater than to 640x360. * If you specify a Min top rendition size rule, the value that you specify for Min bottom rendition size must be less than, or equal to, Min top rendition size. Use Force include renditions to specify one or more resolutions to include your ABR stack. * (Recommended) To optimize automated ABR, specify as few resolutions as possible. * (Required) The number of resolutions that you specify must be equal to, or less than, the Max renditions setting. * If you specify a Min top rendition size rule, specify at least one resolution that is equal to, or greater than, Min top rendition size. * If you specify a Min bottom rendition size rule, only specify resolutions that are equal to, or greater than, Min bottom rendition size. * If you specify a Force include renditions rule, do not specify a separate rule for Allowed renditions. * Note: The ABR stack may include other resolutions that you do not specify here, depending on the Max renditions setting. Use Allowed renditions to specify a list of possible resolutions in your ABR stack. * (Required) The number of resolutions that you specify must be equal to, or greater than, the Max renditions setting. * MediaConvert will create an ABR stack exclusively from the list of resolutions that you specify. * Some resolutions in the Allowed renditions list may not be included, however you can force a resolution to be included by setting Required to ENABLED. * You must specify at least one resolution that is greater than or equal to any resolutions that you specify in Min top rendition size or Min bottom rendition size. * If you specify Allowed renditions, you must not specify a separate rule for Force include renditions.
        public var type: MediaConvertClientTypes.RuleType?

        public init(
            allowedRenditions: [MediaConvertClientTypes.AllowedRenditionSize]? = nil,
            forceIncludeRenditions: [MediaConvertClientTypes.ForceIncludeRenditionSize]? = nil,
            minBottomRenditionSize: MediaConvertClientTypes.MinBottomRenditionSize? = nil,
            minTopRenditionSize: MediaConvertClientTypes.MinTopRenditionSize? = nil,
            type: MediaConvertClientTypes.RuleType? = nil
        )
        {
            self.allowedRenditions = allowedRenditions
            self.forceIncludeRenditions = forceIncludeRenditions
            self.minBottomRenditionSize = minBottomRenditionSize
            self.minTopRenditionSize = minTopRenditionSize
            self.type = type
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates.
    public enum BurninSubtitleAlignment: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case centered
        case `left`
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleAlignment] {
            return [
                .auto,
                .centered,
                .left
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .centered: return "CENTERED"
            case .left: return "LEFT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless Style passthrough is set to Enabled and Font color set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color for additional font color controls. When you choose White text only, or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
    public enum BurninSubtitleApplyFontColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allText
        case whiteTextOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleApplyFontColor] {
            return [
                .allText,
                .whiteTextOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allText: return "ALL_TEXT"
            case .whiteTextOnly: return "WHITE_TEXT_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color of the rectangle behind the captions. Leave background color blank and set Style passthrough to enabled to use the background color data from your input captions, if present.
    public enum BurninSubtitleBackgroundColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleBackgroundColor] {
            return [
                .auto,
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font to best match, or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    public enum BurninSubtitleFallbackFont: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bestMatch
        case monospacedSansserif
        case monospacedSerif
        case proportionalSansserif
        case proportionalSerif
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleFallbackFont] {
            return [
                .bestMatch,
                .monospacedSansserif,
                .monospacedSerif,
                .proportionalSansserif,
                .proportionalSerif
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bestMatch: return "BEST_MATCH"
            case .monospacedSansserif: return "MONOSPACED_SANSSERIF"
            case .monospacedSerif: return "MONOSPACED_SERIF"
            case .proportionalSansserif: return "PROPORTIONAL_SANSSERIF"
            case .proportionalSerif: return "PROPORTIONAL_SERIF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color of the burned-in captions text. Leave Font color blank and set Style passthrough to enabled to use the font color data from your input captions, if present.
    public enum BurninSubtitleFontColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case blue
        case green
        case hex
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleFontColor] {
            return [
                .auto,
                .black,
                .blue,
                .green,
                .hex,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .hex: return "HEX"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset.
    public enum FontScript: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case hans
        case hant
        case sdkUnknown(Swift.String)

        public static var allCases: [FontScript] {
            return [
                .automatic,
                .hans,
                .hant
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .hans: return "HANS"
            case .hant: return "HANT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify font outline color. Leave Outline color blank and set Style passthrough to enabled to use the font outline color data from your input captions, if present.
    public enum BurninSubtitleOutlineColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleOutlineColor] {
            return [
                .auto,
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color of the shadow cast by the captions. Leave Shadow color blank and set Style passthrough to enabled to use the shadow color data from your input captions, if present.
    public enum BurninSubtitleShadowColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleShadowColor] {
            return [
                .auto,
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To use the available style, color, and position information from your input captions: Set Style passthrough to Enabled. Note that MediaConvert uses default settings for any missing style or position information in your input captions To ignore the style and position information from your input captions and use default settings: Leave blank or keep the default value, Disabled. Default settings include white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings. You can also override any fonts by manually specifying custom font files.
    public enum BurnInSubtitleStylePassthrough: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [BurnInSubtitleStylePassthrough] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether the text spacing in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read for closed captions.
    public enum BurninSubtitleTeletextSpacing: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case fixedGrid
        case proportional
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleTeletextSpacing] {
            return [
                .auto,
                .fixedGrid,
                .proportional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .fixedGrid: return "FIXED_GRID"
            case .proportional: return "PROPORTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Burn-in is a captions delivery method, rather than a captions format. Burn-in writes the captions directly on your video frames, replacing pixels of video content with the captions. Set up burn-in captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html.
    public struct BurninDestinationSettings: Swift.Sendable {
        /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates.
        public var alignment: MediaConvertClientTypes.BurninSubtitleAlignment?
        /// Ignore this setting unless Style passthrough is set to Enabled and Font color set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color for additional font color controls. When you choose White text only, or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
        public var applyFontColor: MediaConvertClientTypes.BurninSubtitleApplyFontColor?
        /// Specify the color of the rectangle behind the captions. Leave background color blank and set Style passthrough to enabled to use the background color data from your input captions, if present.
        public var backgroundColor: MediaConvertClientTypes.BurninSubtitleBackgroundColor?
        /// Specify the opacity of the background rectangle. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough is set to enabled, leave blank to pass through the background style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all backgrounds from your output captions.
        public var backgroundOpacity: Swift.Int?
        /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font to best match, or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
        public var fallbackFont: MediaConvertClientTypes.BurninSubtitleFallbackFont?
        /// Specify the color of the burned-in captions text. Leave Font color blank and set Style passthrough to enabled to use the font color data from your input captions, if present.
        public var fontColor: MediaConvertClientTypes.BurninSubtitleFontColor?
        /// Specify a bold TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a regular, an italic, and a bold italic font file.
        public var fontFileBold: Swift.String?
        /// Specify a bold italic TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a regular, a bold, and an italic font file.
        public var fontFileBoldItalic: Swift.String?
        /// Specify an italic TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a regular, a bold, and a bold italic font file.
        public var fontFileItalic: Swift.String?
        /// Specify a regular TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a bold, an italic, and a bold italic font file.
        public var fontFileRegular: Swift.String?
        /// Specify the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
        public var fontOpacity: Swift.Int?
        /// Specify the Font resolution in DPI (dots per inch).
        public var fontResolution: Swift.Int?
        /// Set Font script to Automatically determined, or leave blank, to automatically determine the font script in your input captions. Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese (HANT) if your input font script uses Simplified or Traditional Chinese.
        public var fontScript: MediaConvertClientTypes.FontScript?
        /// Specify the Font size in pixels. Must be a positive integer. Set to 0, or leave blank, for automatic font size.
        public var fontSize: Swift.Int?
        /// Ignore this setting unless your Font color is set to Hex. Enter either six or eight hexidecimal digits, representing red, green, and blue, with two optional extra digits for alpha. For example a value of 1122AABB is a red value of 0x11, a green value of 0x22, a blue value of 0xAA, and an alpha value of 0xBB.
        public var hexFontColor: Swift.String?
        /// Specify font outline color. Leave Outline color blank and set Style passthrough to enabled to use the font outline color data from your input captions, if present.
        public var outlineColor: MediaConvertClientTypes.BurninSubtitleOutlineColor?
        /// Specify the Outline size of the caption text, in pixels. Leave Outline size blank and set Style passthrough to enabled to use the outline size data from your input captions, if present.
        public var outlineSize: Swift.Int?
        /// Specify the color of the shadow cast by the captions. Leave Shadow color blank and set Style passthrough to enabled to use the shadow color data from your input captions, if present.
        public var shadowColor: MediaConvertClientTypes.BurninSubtitleShadowColor?
        /// Specify the opacity of the shadow. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough is set to Enabled, leave Shadow opacity blank to pass through the shadow style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all shadows from your output captions.
        public var shadowOpacity: Swift.Int?
        /// Specify the horizontal offset of the shadow, relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.
        public var shadowXOffset: Swift.Int?
        /// Specify the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. Leave Shadow y-offset blank and set Style passthrough to enabled to use the shadow y-offset data from your input captions, if present.
        public var shadowYOffset: Swift.Int?
        /// To use the available style, color, and position information from your input captions: Set Style passthrough to Enabled. Note that MediaConvert uses default settings for any missing style or position information in your input captions To ignore the style and position information from your input captions and use default settings: Leave blank or keep the default value, Disabled. Default settings include white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings. You can also override any fonts by manually specifying custom font files.
        public var stylePassthrough: MediaConvertClientTypes.BurnInSubtitleStylePassthrough?
        /// Specify whether the text spacing in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read for closed captions.
        public var teletextSpacing: MediaConvertClientTypes.BurninSubtitleTeletextSpacing?
        /// Specify the horizontal position of the captions, relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter.
        public var xPosition: Swift.Int?
        /// Specify the vertical position of the captions, relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output.
        public var yPosition: Swift.Int?

        public init(
            alignment: MediaConvertClientTypes.BurninSubtitleAlignment? = nil,
            applyFontColor: MediaConvertClientTypes.BurninSubtitleApplyFontColor? = nil,
            backgroundColor: MediaConvertClientTypes.BurninSubtitleBackgroundColor? = nil,
            backgroundOpacity: Swift.Int? = nil,
            fallbackFont: MediaConvertClientTypes.BurninSubtitleFallbackFont? = nil,
            fontColor: MediaConvertClientTypes.BurninSubtitleFontColor? = nil,
            fontFileBold: Swift.String? = nil,
            fontFileBoldItalic: Swift.String? = nil,
            fontFileItalic: Swift.String? = nil,
            fontFileRegular: Swift.String? = nil,
            fontOpacity: Swift.Int? = nil,
            fontResolution: Swift.Int? = nil,
            fontScript: MediaConvertClientTypes.FontScript? = nil,
            fontSize: Swift.Int? = nil,
            hexFontColor: Swift.String? = nil,
            outlineColor: MediaConvertClientTypes.BurninSubtitleOutlineColor? = nil,
            outlineSize: Swift.Int? = nil,
            shadowColor: MediaConvertClientTypes.BurninSubtitleShadowColor? = nil,
            shadowOpacity: Swift.Int? = nil,
            shadowXOffset: Swift.Int? = nil,
            shadowYOffset: Swift.Int? = nil,
            stylePassthrough: MediaConvertClientTypes.BurnInSubtitleStylePassthrough? = nil,
            teletextSpacing: MediaConvertClientTypes.BurninSubtitleTeletextSpacing? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.alignment = alignment
            self.applyFontColor = applyFontColor
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.fallbackFont = fallbackFont
            self.fontColor = fontColor
            self.fontFileBold = fontFileBold
            self.fontFileBoldItalic = fontFileBoldItalic
            self.fontFileItalic = fontFileItalic
            self.fontFileRegular = fontFileRegular
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontScript = fontScript
            self.fontSize = fontSize
            self.hexFontColor = hexFontColor
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.stylePassthrough = stylePassthrough
            self.teletextSpacing = teletextSpacing
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Note that your choice of video output container constrains your choice of output captions format. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/captions-support-tables.html. If you are using SCTE-20 and you want to create an output that complies with the SCTE-43 spec, choose SCTE-20 plus embedded. To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20.
    public enum CaptionDestinationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case burnIn
        case dvbSub
        case embedded
        case embeddedPlusScte20
        case imsc
        case scc
        case scte20PlusEmbedded
        case smi
        case srt
        case teletext
        case ttml
        case webvtt
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptionDestinationType] {
            return [
                .burnIn,
                .dvbSub,
                .embedded,
                .embeddedPlusScte20,
                .imsc,
                .scc,
                .scte20PlusEmbedded,
                .smi,
                .srt,
                .teletext,
                .ttml,
                .webvtt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .burnIn: return "BURN_IN"
            case .dvbSub: return "DVB_SUB"
            case .embedded: return "EMBEDDED"
            case .embeddedPlusScte20: return "EMBEDDED_PLUS_SCTE20"
            case .imsc: return "IMSC"
            case .scc: return "SCC"
            case .scte20PlusEmbedded: return "SCTE20_PLUS_EMBEDDED"
            case .smi: return "SMI"
            case .srt: return "SRT"
            case .teletext: return "TELETEXT"
            case .ttml: return "TTML"
            case .webvtt: return "WEBVTT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Within your job settings, all of your DVB-Sub settings must be identical.
    public enum DvbSubtitleAlignment: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case centered
        case `left`
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleAlignment] {
            return [
                .auto,
                .centered,
                .left
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .centered: return "CENTERED"
            case .left: return "LEFT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless Style Passthrough is set to Enabled and Font color set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color for additional font color controls. When you choose White text only, or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
    public enum DvbSubtitleApplyFontColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allText
        case whiteTextOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleApplyFontColor] {
            return [
                .allText,
                .whiteTextOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allText: return "ALL_TEXT"
            case .whiteTextOnly: return "WHITE_TEXT_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color of the rectangle behind the captions. Leave background color blank and set Style passthrough to enabled to use the background color data from your input captions, if present.
    public enum DvbSubtitleBackgroundColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleBackgroundColor] {
            return [
                .auto,
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how MediaConvert handles the display definition segment (DDS). To exclude the DDS from this set of captions: Keep the default, None. To include the DDS: Choose Specified. When you do, also specify the offset coordinates of the display window with DDS x-coordinate and DDS y-coordinate. To include the DDS, but not include display window data: Choose No display window. When you do, you can write position metadata to the page composition segment (PCS) with DDS x-coordinate and DDS y-coordinate. For video resolutions with a height of 576 pixels or less, MediaConvert doesn't include the DDS, regardless of the value you choose for DDS handling. All burn-in and DVB-Sub font settings must match.
    public enum DvbddsHandling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case noDisplayWindow
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbddsHandling] {
            return [
                .none,
                .noDisplayWindow,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .noDisplayWindow: return "NO_DISPLAY_WINDOW"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font to best match, or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    public enum DvbSubSubtitleFallbackFont: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bestMatch
        case monospacedSansserif
        case monospacedSerif
        case proportionalSansserif
        case proportionalSerif
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubSubtitleFallbackFont] {
            return [
                .bestMatch,
                .monospacedSansserif,
                .monospacedSerif,
                .proportionalSansserif,
                .proportionalSerif
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bestMatch: return "BEST_MATCH"
            case .monospacedSansserif: return "MONOSPACED_SANSSERIF"
            case .monospacedSerif: return "MONOSPACED_SERIF"
            case .proportionalSansserif: return "PROPORTIONAL_SANSSERIF"
            case .proportionalSerif: return "PROPORTIONAL_SERIF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color of the captions text. Leave Font color blank and set Style passthrough to enabled to use the font color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
    public enum DvbSubtitleFontColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case blue
        case green
        case hex
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleFontColor] {
            return [
                .auto,
                .black,
                .blue,
                .green,
                .hex,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .hex: return "HEX"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify font outline color. Leave Outline color blank and set Style passthrough to enabled to use the font outline color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
    public enum DvbSubtitleOutlineColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case blue
        case green
        case red
        case white
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleOutlineColor] {
            return [
                .auto,
                .black,
                .blue,
                .green,
                .red,
                .white,
                .yellow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .blue: return "BLUE"
            case .green: return "GREEN"
            case .red: return "RED"
            case .white: return "WHITE"
            case .yellow: return "YELLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color of the shadow cast by the captions. Leave Shadow color blank and set Style passthrough to enabled to use the shadow color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
    public enum DvbSubtitleShadowColor: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case black
        case `none`
        case white
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleShadowColor] {
            return [
                .auto,
                .black,
                .none,
                .white
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .black: return "BLACK"
            case .none: return "NONE"
            case .white: return "WHITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To use the available style, color, and position information from your input captions: Set Style passthrough to Enabled. Note that MediaConvert uses default settings for any missing style or position information in your input captions To ignore the style and position information from your input captions and use default settings: Leave blank or keep the default value, Disabled. Default settings include white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings. You can also override any fonts by manually specifying custom font files.
    public enum DvbSubtitleStylePassthrough: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleStylePassthrough] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your DVB subtitles are standard or for hearing impaired. Choose hearing impaired if your subtitles include audio descriptions and dialogue. Choose standard if your subtitles include only dialogue.
    public enum DvbSubtitlingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hearingImpaired
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitlingType] {
            return [
                .hearingImpaired,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hearingImpaired: return "HEARING_IMPAIRED"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether the Text spacing in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read for closed captions. Within your job settings, all of your DVB-Sub settings must be identical.
    public enum DvbSubtitleTeletextSpacing: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case fixedGrid
        case proportional
        case sdkUnknown(Swift.String)

        public static var allCases: [DvbSubtitleTeletextSpacing] {
            return [
                .auto,
                .fixedGrid,
                .proportional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .fixedGrid: return "FIXED_GRID"
            case .proportional: return "PROPORTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to DVB-Sub captions. Set up DVB-Sub captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/dvb-sub-output-captions.html.
    public struct DvbSubDestinationSettings: Swift.Sendable {
        /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Within your job settings, all of your DVB-Sub settings must be identical.
        public var alignment: MediaConvertClientTypes.DvbSubtitleAlignment?
        /// Ignore this setting unless Style Passthrough is set to Enabled and Font color set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color for additional font color controls. When you choose White text only, or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
        public var applyFontColor: MediaConvertClientTypes.DvbSubtitleApplyFontColor?
        /// Specify the color of the rectangle behind the captions. Leave background color blank and set Style passthrough to enabled to use the background color data from your input captions, if present.
        public var backgroundColor: MediaConvertClientTypes.DvbSubtitleBackgroundColor?
        /// Specify the opacity of the background rectangle. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough is set to enabled, leave blank to pass through the background style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all backgrounds from your output captions. Within your job settings, all of your DVB-Sub settings must be identical.
        public var backgroundOpacity: Swift.Int?
        /// Specify how MediaConvert handles the display definition segment (DDS). To exclude the DDS from this set of captions: Keep the default, None. To include the DDS: Choose Specified. When you do, also specify the offset coordinates of the display window with DDS x-coordinate and DDS y-coordinate. To include the DDS, but not include display window data: Choose No display window. When you do, you can write position metadata to the page composition segment (PCS) with DDS x-coordinate and DDS y-coordinate. For video resolutions with a height of 576 pixels or less, MediaConvert doesn't include the DDS, regardless of the value you choose for DDS handling. All burn-in and DVB-Sub font settings must match.
        public var ddsHandling: MediaConvertClientTypes.DvbddsHandling?
        /// Use this setting, along with DDS y-coordinate, to specify the upper left corner of the display definition segment (DDS) display window. With this setting, specify the distance, in pixels, between the left side of the frame and the left side of the DDS display window. Keep the default value, 0, to have MediaConvert automatically choose this offset. Related setting: When you use this setting, you must set DDS handling to a value other than None. MediaConvert uses these values to determine whether to write page position data to the DDS or to the page composition segment. All burn-in and DVB-Sub font settings must match.
        public var ddsXCoordinate: Swift.Int?
        /// Use this setting, along with DDS x-coordinate, to specify the upper left corner of the display definition segment (DDS) display window. With this setting, specify the distance, in pixels, between the top of the frame and the top of the DDS display window. Keep the default value, 0, to have MediaConvert automatically choose this offset. Related setting: When you use this setting, you must set DDS handling to a value other than None. MediaConvert uses these values to determine whether to write page position data to the DDS or to the page composition segment (PCS). All burn-in and DVB-Sub font settings must match.
        public var ddsYCoordinate: Swift.Int?
        /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font to best match, or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
        public var fallbackFont: MediaConvertClientTypes.DvbSubSubtitleFallbackFont?
        /// Specify the color of the captions text. Leave Font color blank and set Style passthrough to enabled to use the font color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
        public var fontColor: MediaConvertClientTypes.DvbSubtitleFontColor?
        /// Specify a bold TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a regular, an italic, and a bold italic font file.
        public var fontFileBold: Swift.String?
        /// Specify a bold italic TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a regular, a bold, and an italic font file.
        public var fontFileBoldItalic: Swift.String?
        /// Specify an italic TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a regular, a bold, and a bold italic font file.
        public var fontFileItalic: Swift.String?
        /// Specify a regular TrueType font file to use when rendering your output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also separately specify a bold, an italic, and a bold italic font file.
        public var fontFileRegular: Swift.String?
        /// Specify the opacity of the burned-in captions. 255 is opaque; 0 is transparent. Within your job settings, all of your DVB-Sub settings must be identical.
        public var fontOpacity: Swift.Int?
        /// Specify the Font resolution in DPI (dots per inch). Within your job settings, all of your DVB-Sub settings must be identical.
        public var fontResolution: Swift.Int?
        /// Set Font script to Automatically determined, or leave blank, to automatically determine the font script in your input captions. Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese (HANT) if your input font script uses Simplified or Traditional Chinese. Within your job settings, all of your DVB-Sub settings must be identical.
        public var fontScript: MediaConvertClientTypes.FontScript?
        /// Specify the Font size in pixels. Must be a positive integer. Set to 0, or leave blank, for automatic font size. Within your job settings, all of your DVB-Sub settings must be identical.
        public var fontSize: Swift.Int?
        /// Specify the height, in pixels, of this set of DVB-Sub captions. The default value is 576 pixels. Related setting: When you use this setting, you must set DDS handling to a value other than None. All burn-in and DVB-Sub font settings must match.
        public var height: Swift.Int?
        /// Ignore this setting unless your Font color is set to Hex. Enter either six or eight hexidecimal digits, representing red, green, and blue, with two optional extra digits for alpha. For example a value of 1122AABB is a red value of 0x11, a green value of 0x22, a blue value of 0xAA, and an alpha value of 0xBB.
        public var hexFontColor: Swift.String?
        /// Specify font outline color. Leave Outline color blank and set Style passthrough to enabled to use the font outline color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
        public var outlineColor: MediaConvertClientTypes.DvbSubtitleOutlineColor?
        /// Specify the Outline size of the caption text, in pixels. Leave Outline size blank and set Style passthrough to enabled to use the outline size data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
        public var outlineSize: Swift.Int?
        /// Specify the color of the shadow cast by the captions. Leave Shadow color blank and set Style passthrough to enabled to use the shadow color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
        public var shadowColor: MediaConvertClientTypes.DvbSubtitleShadowColor?
        /// Specify the opacity of the shadow. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough is set to Enabled, leave Shadow opacity blank to pass through the shadow style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all shadows from your output captions. Within your job settings, all of your DVB-Sub settings must be identical.
        public var shadowOpacity: Swift.Int?
        /// Specify the horizontal offset of the shadow, relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. Within your job settings, all of your DVB-Sub settings must be identical.
        public var shadowXOffset: Swift.Int?
        /// Specify the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. Leave Shadow y-offset blank and set Style passthrough to enabled to use the shadow y-offset data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
        public var shadowYOffset: Swift.Int?
        /// To use the available style, color, and position information from your input captions: Set Style passthrough to Enabled. Note that MediaConvert uses default settings for any missing style or position information in your input captions To ignore the style and position information from your input captions and use default settings: Leave blank or keep the default value, Disabled. Default settings include white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings. You can also override any fonts by manually specifying custom font files.
        public var stylePassthrough: MediaConvertClientTypes.DvbSubtitleStylePassthrough?
        /// Specify whether your DVB subtitles are standard or for hearing impaired. Choose hearing impaired if your subtitles include audio descriptions and dialogue. Choose standard if your subtitles include only dialogue.
        public var subtitlingType: MediaConvertClientTypes.DvbSubtitlingType?
        /// Specify whether the Text spacing in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read for closed captions. Within your job settings, all of your DVB-Sub settings must be identical.
        public var teletextSpacing: MediaConvertClientTypes.DvbSubtitleTeletextSpacing?
        /// Specify the width, in pixels, of this set of DVB-Sub captions. The default value is 720 pixels. Related setting: When you use this setting, you must set DDS handling to a value other than None. All burn-in and DVB-Sub font settings must match.
        public var width: Swift.Int?
        /// Specify the horizontal position of the captions, relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter. Within your job settings, all of your DVB-Sub settings must be identical.
        public var xPosition: Swift.Int?
        /// Specify the vertical position of the captions, relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output. Within your job settings, all of your DVB-Sub settings must be identical.
        public var yPosition: Swift.Int?

        public init(
            alignment: MediaConvertClientTypes.DvbSubtitleAlignment? = nil,
            applyFontColor: MediaConvertClientTypes.DvbSubtitleApplyFontColor? = nil,
            backgroundColor: MediaConvertClientTypes.DvbSubtitleBackgroundColor? = nil,
            backgroundOpacity: Swift.Int? = nil,
            ddsHandling: MediaConvertClientTypes.DvbddsHandling? = nil,
            ddsXCoordinate: Swift.Int? = nil,
            ddsYCoordinate: Swift.Int? = nil,
            fallbackFont: MediaConvertClientTypes.DvbSubSubtitleFallbackFont? = nil,
            fontColor: MediaConvertClientTypes.DvbSubtitleFontColor? = nil,
            fontFileBold: Swift.String? = nil,
            fontFileBoldItalic: Swift.String? = nil,
            fontFileItalic: Swift.String? = nil,
            fontFileRegular: Swift.String? = nil,
            fontOpacity: Swift.Int? = nil,
            fontResolution: Swift.Int? = nil,
            fontScript: MediaConvertClientTypes.FontScript? = nil,
            fontSize: Swift.Int? = nil,
            height: Swift.Int? = nil,
            hexFontColor: Swift.String? = nil,
            outlineColor: MediaConvertClientTypes.DvbSubtitleOutlineColor? = nil,
            outlineSize: Swift.Int? = nil,
            shadowColor: MediaConvertClientTypes.DvbSubtitleShadowColor? = nil,
            shadowOpacity: Swift.Int? = nil,
            shadowXOffset: Swift.Int? = nil,
            shadowYOffset: Swift.Int? = nil,
            stylePassthrough: MediaConvertClientTypes.DvbSubtitleStylePassthrough? = nil,
            subtitlingType: MediaConvertClientTypes.DvbSubtitlingType? = nil,
            teletextSpacing: MediaConvertClientTypes.DvbSubtitleTeletextSpacing? = nil,
            width: Swift.Int? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.alignment = alignment
            self.applyFontColor = applyFontColor
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.ddsHandling = ddsHandling
            self.ddsXCoordinate = ddsXCoordinate
            self.ddsYCoordinate = ddsYCoordinate
            self.fallbackFont = fallbackFont
            self.fontColor = fontColor
            self.fontFileBold = fontFileBold
            self.fontFileBoldItalic = fontFileBoldItalic
            self.fontFileItalic = fontFileItalic
            self.fontFileRegular = fontFileRegular
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontScript = fontScript
            self.fontSize = fontSize
            self.height = height
            self.hexFontColor = hexFontColor
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.stylePassthrough = stylePassthrough
            self.subtitlingType = subtitlingType
            self.teletextSpacing = teletextSpacing
            self.width = width
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to CEA/EIA-608 and CEA/EIA-708 (also called embedded or ancillary) captions. Set up embedded captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/embedded-output-captions.html.
    public struct EmbeddedDestinationSettings: Swift.Sendable {
        /// Ignore this setting unless your input captions are SCC format and your output captions are embedded in the video stream. Specify a CC number for each captions channel in this output. If you have two channels, choose CC numbers that aren't in the same field. For example, choose 1 and 3. For more information, see https://docs.aws.amazon.com/console/mediaconvert/dual-scc-to-embedded.
        public var destination608ChannelNumber: Swift.Int?
        /// Ignore this setting unless your input captions are SCC format and you want both 608 and 708 captions embedded in your output stream. Optionally, specify the 708 service number for each output captions channel. Choose a different number for each channel. To use this setting, also set Force 608 to 708 upconvert to Upconvert in your input captions selector settings. If you choose to upconvert but don't specify a 708 service number, MediaConvert uses the number that you specify for CC channel number for the 708 service number. For more information, see https://docs.aws.amazon.com/console/mediaconvert/dual-scc-to-embedded.
        public var destination708ServiceNumber: Swift.Int?

        public init(
            destination608ChannelNumber: Swift.Int? = nil,
            destination708ServiceNumber: Swift.Int? = nil
        )
        {
            self.destination608ChannelNumber = destination608ChannelNumber
            self.destination708ServiceNumber = destination708ServiceNumber
        }
    }
}

extension MediaConvertClientTypes {

    /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: . If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: .
    public enum ImscAccessibilitySubs: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ImscAccessibilitySubs] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    public enum ImscStylePassthrough: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ImscStylePassthrough] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to IMSC captions. IMSC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
    public struct ImscDestinationSettings: Swift.Sendable {
        /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: . If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: .
        public var accessibility: MediaConvertClientTypes.ImscAccessibilitySubs?
        /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
        public var stylePassthrough: MediaConvertClientTypes.ImscStylePassthrough?

        public init(
            accessibility: MediaConvertClientTypes.ImscAccessibilitySubs? = nil,
            stylePassthrough: MediaConvertClientTypes.ImscStylePassthrough? = nil
        )
        {
            self.accessibility = accessibility
            self.stylePassthrough = stylePassthrough
        }
    }
}

extension MediaConvertClientTypes {

    /// Set Framerate to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe.
    public enum SccDestinationFramerate: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case framerate2397
        case framerate24
        case framerate25
        case framerate2997Dropframe
        case framerate2997NonDropframe
        case sdkUnknown(Swift.String)

        public static var allCases: [SccDestinationFramerate] {
            return [
                .framerate2397,
                .framerate24,
                .framerate25,
                .framerate2997Dropframe,
                .framerate2997NonDropframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .framerate2397: return "FRAMERATE_23_97"
            case .framerate24: return "FRAMERATE_24"
            case .framerate25: return "FRAMERATE_25"
            case .framerate2997Dropframe: return "FRAMERATE_29_97_DROPFRAME"
            case .framerate2997NonDropframe: return "FRAMERATE_29_97_NON_DROPFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to SCC captions. SCC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/scc-srt-output-captions.html.
    public struct SccDestinationSettings: Swift.Sendable {
        /// Set Framerate to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe.
        public var framerate: MediaConvertClientTypes.SccDestinationFramerate?

        public init(
            framerate: MediaConvertClientTypes.SccDestinationFramerate? = nil
        )
        {
            self.framerate = framerate
        }
    }
}

extension MediaConvertClientTypes {

    /// Set Style passthrough to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use simplified output captions.
    public enum SrtStylePassthrough: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SrtStylePassthrough] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to SRT captions. SRT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video.
    public struct SrtDestinationSettings: Swift.Sendable {
        /// Set Style passthrough to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use simplified output captions.
        public var stylePassthrough: MediaConvertClientTypes.SrtStylePassthrough?

        public init(
            stylePassthrough: MediaConvertClientTypes.SrtStylePassthrough? = nil
        )
        {
            self.stylePassthrough = stylePassthrough
        }
    }
}

extension MediaConvertClientTypes {

    /// A page type as defined in the standard ETSI EN 300 468, Table 94
    public enum TeletextPageType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pageTypeAddlInfo
        case pageTypeHearingImpairedSubtitle
        case pageTypeInitial
        case pageTypeProgramSchedule
        case pageTypeSubtitle
        case sdkUnknown(Swift.String)

        public static var allCases: [TeletextPageType] {
            return [
                .pageTypeAddlInfo,
                .pageTypeHearingImpairedSubtitle,
                .pageTypeInitial,
                .pageTypeProgramSchedule,
                .pageTypeSubtitle
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pageTypeAddlInfo: return "PAGE_TYPE_ADDL_INFO"
            case .pageTypeHearingImpairedSubtitle: return "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"
            case .pageTypeInitial: return "PAGE_TYPE_INITIAL"
            case .pageTypeProgramSchedule: return "PAGE_TYPE_PROGRAM_SCHEDULE"
            case .pageTypeSubtitle: return "PAGE_TYPE_SUBTITLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to teletext captions. Set up teletext captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/teletext-output-captions.html.
    public struct TeletextDestinationSettings: Swift.Sendable {
        /// Set pageNumber to the Teletext page number for the destination captions for this output. This value must be a three-digit hexadecimal string; strings ending in -FF are invalid. If you are passing through the entire set of Teletext data, do not use this field.
        public var pageNumber: Swift.String?
        /// Specify the page types for this Teletext page. If you don't specify a value here, the service sets the page type to the default value Subtitle. If you pass through the entire set of Teletext data, don't use this field. When you pass through a set of Teletext pages, your output has the same page types as your input.
        public var pageTypes: [MediaConvertClientTypes.TeletextPageType]?

        public init(
            pageNumber: Swift.String? = nil,
            pageTypes: [MediaConvertClientTypes.TeletextPageType]? = nil
        )
        {
            self.pageNumber = pageNumber
            self.pageTypes = pageTypes
        }
    }
}

extension MediaConvertClientTypes {

    /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
    public enum TtmlStylePassthrough: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [TtmlStylePassthrough] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to TTML captions. TTML is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
    public struct TtmlDestinationSettings: Swift.Sendable {
        /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
        public var stylePassthrough: MediaConvertClientTypes.TtmlStylePassthrough?

        public init(
            stylePassthrough: MediaConvertClientTypes.TtmlStylePassthrough? = nil
        )
        {
            self.stylePassthrough = stylePassthrough
        }
    }
}

extension MediaConvertClientTypes {

    /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: . If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: .
    public enum WebvttAccessibilitySubs: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [WebvttAccessibilitySubs] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To use the available style, color, and position information from your input captions: Set Style passthrough to Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Set Style passthrough to Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Set Style passthrough to Disabled, or leave blank.
    public enum WebvttStylePassthrough: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case strict
        case sdkUnknown(Swift.String)

        public static var allCases: [WebvttStylePassthrough] {
            return [
                .disabled,
                .enabled,
                .strict
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .strict: return "STRICT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to WebVTT captions. WebVTT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
    public struct WebvttDestinationSettings: Swift.Sendable {
        /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: . If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: .
        public var accessibility: MediaConvertClientTypes.WebvttAccessibilitySubs?
        /// To use the available style, color, and position information from your input captions: Set Style passthrough to Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Set Style passthrough to Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Set Style passthrough to Disabled, or leave blank.
        public var stylePassthrough: MediaConvertClientTypes.WebvttStylePassthrough?

        public init(
            accessibility: MediaConvertClientTypes.WebvttAccessibilitySubs? = nil,
            stylePassthrough: MediaConvertClientTypes.WebvttStylePassthrough? = nil
        )
        {
            self.accessibility = accessibility
            self.stylePassthrough = stylePassthrough
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to one captions tab on the MediaConvert console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    public struct CaptionDestinationSettings: Swift.Sendable {
        /// Burn-in is a captions delivery method, rather than a captions format. Burn-in writes the captions directly on your video frames, replacing pixels of video content with the captions. Set up burn-in captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html.
        public var burninDestinationSettings: MediaConvertClientTypes.BurninDestinationSettings?
        /// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Note that your choice of video output container constrains your choice of output captions format. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/captions-support-tables.html. If you are using SCTE-20 and you want to create an output that complies with the SCTE-43 spec, choose SCTE-20 plus embedded. To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20.
        public var destinationType: MediaConvertClientTypes.CaptionDestinationType?
        /// Settings related to DVB-Sub captions. Set up DVB-Sub captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/dvb-sub-output-captions.html.
        public var dvbSubDestinationSettings: MediaConvertClientTypes.DvbSubDestinationSettings?
        /// Settings related to CEA/EIA-608 and CEA/EIA-708 (also called embedded or ancillary) captions. Set up embedded captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/embedded-output-captions.html.
        public var embeddedDestinationSettings: MediaConvertClientTypes.EmbeddedDestinationSettings?
        /// Settings related to IMSC captions. IMSC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
        public var imscDestinationSettings: MediaConvertClientTypes.ImscDestinationSettings?
        /// Settings related to SCC captions. SCC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/scc-srt-output-captions.html.
        public var sccDestinationSettings: MediaConvertClientTypes.SccDestinationSettings?
        /// Settings related to SRT captions. SRT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video.
        public var srtDestinationSettings: MediaConvertClientTypes.SrtDestinationSettings?
        /// Settings related to teletext captions. Set up teletext captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/teletext-output-captions.html.
        public var teletextDestinationSettings: MediaConvertClientTypes.TeletextDestinationSettings?
        /// Settings related to TTML captions. TTML is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
        public var ttmlDestinationSettings: MediaConvertClientTypes.TtmlDestinationSettings?
        /// Settings related to WebVTT captions. WebVTT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
        public var webvttDestinationSettings: MediaConvertClientTypes.WebvttDestinationSettings?

        public init(
            burninDestinationSettings: MediaConvertClientTypes.BurninDestinationSettings? = nil,
            destinationType: MediaConvertClientTypes.CaptionDestinationType? = nil,
            dvbSubDestinationSettings: MediaConvertClientTypes.DvbSubDestinationSettings? = nil,
            embeddedDestinationSettings: MediaConvertClientTypes.EmbeddedDestinationSettings? = nil,
            imscDestinationSettings: MediaConvertClientTypes.ImscDestinationSettings? = nil,
            sccDestinationSettings: MediaConvertClientTypes.SccDestinationSettings? = nil,
            srtDestinationSettings: MediaConvertClientTypes.SrtDestinationSettings? = nil,
            teletextDestinationSettings: MediaConvertClientTypes.TeletextDestinationSettings? = nil,
            ttmlDestinationSettings: MediaConvertClientTypes.TtmlDestinationSettings? = nil,
            webvttDestinationSettings: MediaConvertClientTypes.WebvttDestinationSettings? = nil
        )
        {
            self.burninDestinationSettings = burninDestinationSettings
            self.destinationType = destinationType
            self.dvbSubDestinationSettings = dvbSubDestinationSettings
            self.embeddedDestinationSettings = embeddedDestinationSettings
            self.imscDestinationSettings = imscDestinationSettings
            self.sccDestinationSettings = sccDestinationSettings
            self.srtDestinationSettings = srtDestinationSettings
            self.teletextDestinationSettings = teletextDestinationSettings
            self.ttmlDestinationSettings = ttmlDestinationSettings
            self.webvttDestinationSettings = webvttDestinationSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// This object holds groups of settings related to captions for one output. For each output that has captions, include one instance of CaptionDescriptions.
    public struct CaptionDescription: Swift.Sendable {
        /// Specifies which "Caption Selector":#inputs-caption_selector to use from each input when generating captions. The name should be of the format "Caption Selector ", which denotes that the Nth Caption Selector will be used from each input.
        public var captionSelectorName: Swift.String?
        /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
        public var customLanguageCode: Swift.String?
        /// Settings related to one captions tab on the MediaConvert console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
        public var destinationSettings: MediaConvertClientTypes.CaptionDestinationSettings?
        /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
        public var languageDescription: Swift.String?

        public init(
            captionSelectorName: Swift.String? = nil,
            customLanguageCode: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.CaptionDestinationSettings? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            languageDescription: Swift.String? = nil
        )
        {
            self.captionSelectorName = captionSelectorName
            self.customLanguageCode = customLanguageCode
            self.destinationSettings = destinationSettings
            self.languageCode = languageCode
            self.languageDescription = languageDescription
        }
    }
}

extension MediaConvertClientTypes {

    /// Caption Description for preset
    public struct CaptionDescriptionPreset: Swift.Sendable {
        /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
        public var customLanguageCode: Swift.String?
        /// Settings related to one captions tab on the MediaConvert console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
        public var destinationSettings: MediaConvertClientTypes.CaptionDestinationSettings?
        /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
        public var languageDescription: Swift.String?

        public init(
            customLanguageCode: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.CaptionDestinationSettings? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            languageDescription: Swift.String? = nil
        )
        {
            self.customLanguageCode = customLanguageCode
            self.destinationSettings = destinationSettings
            self.languageCode = languageCode
            self.languageDescription = languageDescription
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the details for each pair of HLS and DASH additional manifests that you want the service to generate for this CMAF output group. Each pair of manifests can reference a different subset of outputs in the group.
    public struct CmafAdditionalManifest: Swift.Sendable {
        /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your HLS group is film-name.m3u8. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.m3u8. For HLS output groups, specify a manifestNameModifier that is different from the nameModifier of the output. The service uses the output name modifier to create unique names for the individual variant manifests.
        public var manifestNameModifier: Swift.String?
        /// Specify the outputs that you want this additional top-level manifest to reference.
        public var selectedOutputs: [Swift.String]?

        public init(
            manifestNameModifier: Swift.String? = nil,
            selectedOutputs: [Swift.String]? = nil
        )
        {
            self.manifestNameModifier = manifestNameModifier
            self.selectedOutputs = selectedOutputs
        }
    }
}

extension MediaConvertClientTypes {

    /// If your input video has accurate color space metadata, or if you don't know about color space: Keep the default value, Follow. MediaConvert will automatically detect your input color space. If your input video has metadata indicating the wrong color space, or has missing metadata: Specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate: Choose Force HDR 10. Specify correct values in the input HDR 10 metadata settings. For more information about HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr. When you specify an input color space, MediaConvert uses the following color space metadata, which includes color primaries, transfer characteristics, and matrix coefficients:
    ///
    /// * HDR 10: BT.2020, PQ, BT.2020 non-constant
    ///
    /// * HLG 2020: BT.2020, HLG, BT.2020 non-constant
    ///
    /// * P3DCI (Theater): DCIP3, SMPTE 428M, BT.709
    ///
    /// * P3D65 (SDR): Display P3, sRGB, BT.709
    ///
    /// * P3D65 (HDR): Display P3, PQ, BT.709
    public enum ColorSpace: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case hdr10
        case hlg2020
        case p3d65Hdr
        case p3d65Sdr
        case p3dci
        case rec601
        case rec709
        case sdkUnknown(Swift.String)

        public static var allCases: [ColorSpace] {
            return [
                .follow,
                .hdr10,
                .hlg2020,
                .p3d65Hdr,
                .p3d65Sdr,
                .p3dci,
                .rec601,
                .rec709
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .hdr10: return "HDR10"
            case .hlg2020: return "HLG_2020"
            case .p3d65Hdr: return "P3D65_HDR"
            case .p3d65Sdr: return "P3D65_SDR"
            case .p3dci: return "P3DCI"
            case .rec601: return "REC_601"
            case .rec709: return "REC_709"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Custom 3D lut settings
    public struct ColorConversion3DLUTSetting: Swift.Sendable {
        /// Specify the input file S3, HTTP, or HTTPS URL for your 3D LUT .cube file. Note that MediaConvert accepts 3D LUT files up to 8MB in size.
        public var fileInput: Swift.String?
        /// Specify which inputs use this 3D LUT, according to their color space.
        public var inputColorSpace: MediaConvertClientTypes.ColorSpace?
        /// Specify which inputs use this 3D LUT, according to their luminance. To apply this 3D LUT to HDR10 or P3D65 (HDR) inputs with a specific mastering luminance: Enter an integer from 0 to 2147483647, corresponding to the input's Maximum luminance value. To apply this 3D LUT to any input regardless of its luminance: Leave blank, or enter 0.
        public var inputMasteringLuminance: Swift.Int?
        /// Specify which outputs use this 3D LUT, according to their color space.
        public var outputColorSpace: MediaConvertClientTypes.ColorSpace?
        /// Specify which outputs use this 3D LUT, according to their luminance. To apply this 3D LUT to HDR10 or P3D65 (HDR) outputs with a specific luminance: Enter an integer from 0 to 2147483647, corresponding to the output's luminance. To apply this 3D LUT to any output regardless of its luminance: Leave blank, or enter 0.
        public var outputMasteringLuminance: Swift.Int?

        public init(
            fileInput: Swift.String? = nil,
            inputColorSpace: MediaConvertClientTypes.ColorSpace? = nil,
            inputMasteringLuminance: Swift.Int? = nil,
            outputColorSpace: MediaConvertClientTypes.ColorSpace? = nil,
            outputMasteringLuminance: Swift.Int? = nil
        )
        {
            self.fileInput = fileInput
            self.inputColorSpace = inputColorSpace
            self.inputMasteringLuminance = inputMasteringLuminance
            self.outputColorSpace = outputColorSpace
            self.outputMasteringLuminance = outputMasteringLuminance
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the details for each additional DASH manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
    public struct DashAdditionalManifest: Swift.Sendable {
        /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your DASH group is film-name.mpd. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.mpd.
        public var manifestNameModifier: Swift.String?
        /// Specify the outputs that you want this additional top-level manifest to reference.
        public var selectedOutputs: [Swift.String]?

        public init(
            manifestNameModifier: Swift.String? = nil,
            selectedOutputs: [Swift.String]? = nil
        )
        {
            self.manifestNameModifier = manifestNameModifier
            self.selectedOutputs = selectedOutputs
        }
    }
}

extension MediaConvertClientTypes {

    /// Describes an account-specific API endpoint.
    public struct Endpoint: Swift.Sendable {
        /// URL of endpoint
        public var url: Swift.String?

        public init(
            url: Swift.String? = nil
        )
        {
            self.url = url
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the details for each additional HLS manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
    public struct HlsAdditionalManifest: Swift.Sendable {
        /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your HLS group is film-name.m3u8. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.m3u8. For HLS output groups, specify a manifestNameModifier that is different from the nameModifier of the output. The service uses the output name modifier to create unique names for the individual variant manifests.
        public var manifestNameModifier: Swift.String?
        /// Specify the outputs that you want this additional top-level manifest to reference.
        public var selectedOutputs: [Swift.String]?

        public init(
            manifestNameModifier: Swift.String? = nil,
            selectedOutputs: [Swift.String]? = nil
        )
        {
            self.manifestNameModifier = manifestNameModifier
            self.selectedOutputs = selectedOutputs
        }
    }
}

extension MediaConvertClientTypes {

    /// Ad marker for Apple HLS manifest.
    public enum HlsAdMarkers: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case elemental
        case elementalScte35
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAdMarkers] {
            return [
                .elemental,
                .elementalScte35
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .elemental: return "ELEMENTAL"
            case .elementalScte35: return "ELEMENTAL_SCTE35"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Caption Language Mapping
    public struct HlsCaptionLanguageMapping: Swift.Sendable {
        /// Caption channel.
        public var captionChannel: Swift.Int?
        /// Specify the language for this captions channel, using the ISO 639-2 or ISO 639-3 three-letter language code
        public var customLanguageCode: Swift.String?
        /// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// Caption language description.
        public var languageDescription: Swift.String?

        public init(
            captionChannel: Swift.Int? = nil,
            customLanguageCode: Swift.String? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            languageDescription: Swift.String? = nil
        )
        {
            self.captionChannel = captionChannel
            self.customLanguageCode = customLanguageCode
            self.languageCode = languageCode
            self.languageDescription = languageDescription
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Configuration for a destination queue to which the job can hop once a customer-defined minimum wait time has passed.
    public struct HopDestination: Swift.Sendable {
        /// Optional. When you set up a job to use queue hopping, you can specify a different relative priority for the job in the destination queue. If you don't specify, the relative priority will remain the same as in the previous queue.
        public var priority: Swift.Int?
        /// Optional unless the job is submitted on the default queue. When you set up a job to use queue hopping, you can specify a destination queue. This queue cannot be the original queue to which the job is submitted. If the original queue isn't the default queue and you don't specify the destination queue, the job will move to the default queue.
        public var queue: Swift.String?
        /// Required for setting up a job to use queue hopping. Minimum wait time in minutes until the job can hop to the destination queue. Valid range is 1 to 4320 minutes, inclusive.
        public var waitMinutes: Swift.Int?

        public init(
            priority: Swift.Int? = nil,
            queue: Swift.String? = nil,
            waitMinutes: Swift.Int? = nil
        )
        {
            self.priority = priority
            self.queue = queue
            self.waitMinutes = waitMinutes
        }
    }
}

extension MediaConvertClientTypes {

    /// To insert ID3 tags in your output, specify two values. Use ID3 tag to specify the base 64 encoded string and use Timecode to specify the time when the tag should be inserted. To insert multiple ID3 tags in your output, create multiple instances of ID3 insertion.
    public struct Id3Insertion: Swift.Sendable {
        /// Use ID3 tag to provide a fully formed ID3 tag in base64-encode format.
        public var id3: Swift.String?
        /// Provide a Timecode in HH:MM:SS:FF or HH:MM:SS;FF format.
        public var timecode: Swift.String?

        public init(
            id3: Swift.String? = nil,
            timecode: Swift.String? = nil
        )
        {
            self.id3 = id3
            self.timecode = timecode
        }
    }
}

extension MediaConvertClientTypes {

    /// Use to remove noise, blocking, blurriness, or ringing from your input as a pre-filter step before encoding. The Advanced input filter removes more types of compression artifacts and is an improvement when compared to basic Deblock and Denoise filters. To remove video compression artifacts from your input and improve the video quality: Choose Enabled. Additionally, this filter can help increase the video quality of your output relative to its bitrate, since noisy inputs are more complex and require more bits to encode. To help restore loss of detail after applying the filter, you can optionally add texture or sharpening as an additional step. Jobs that use this feature incur pro-tier pricing. To not apply advanced input filtering: Choose Disabled. Note that you can still apply basic filtering with Deblock and Denoise.
    public enum AdvancedInputFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AdvancedInputFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
    public enum AdvancedInputFilterAddTexture: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AdvancedInputFilterAddTexture] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
    public enum AdvancedInputFilterSharpen: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [AdvancedInputFilterSharpen] {
            return [
                .high,
                .low,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional settings for Advanced input filter when you set Advanced input filter to Enabled.
    public struct AdvancedInputFilterSettings: Swift.Sendable {
        /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
        public var addTexture: MediaConvertClientTypes.AdvancedInputFilterAddTexture?
        /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
        public var sharpening: MediaConvertClientTypes.AdvancedInputFilterSharpen?

        public init(
            addTexture: MediaConvertClientTypes.AdvancedInputFilterAddTexture? = nil,
            sharpening: MediaConvertClientTypes.AdvancedInputFilterSharpen? = nil
        )
        {
            self.addTexture = addTexture
            self.sharpening = sharpening
        }
    }
}

extension MediaConvertClientTypes {

    /// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab. Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
    public struct AudioSelectorGroup: Swift.Sendable {
        /// Name of an Audio Selector within the same input to include in the group. Audio selector names are standardized, based on their order within the input (e.g., "Audio Selector 1"). The audio selector name parameter can be repeated to add any number of audio selectors to the group.
        public var audioSelectorNames: [Swift.String]?

        public init(
            audioSelectorNames: [Swift.String]? = nil
        )
        {
            self.audioSelectorNames = audioSelectorNames
        }
    }
}

extension MediaConvertClientTypes {

    /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
    public enum AudioDurationCorrection: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disabled
        case force
        case frame
        case track
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioDurationCorrection] {
            return [
                .auto,
                .disabled,
                .force,
                .frame,
                .track
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case .force: return "FORCE"
            case .frame: return "FRAME"
            case .track: return "TRACK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
    public enum AudioDefaultSelection: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case notDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioDefaultSelection] {
            return [
                .default,
                .notDefault
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .notDefault: return "NOT_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings specific to audio sources in an HLS alternate rendition group. Specify the properties (renditionGroupId, renditionName or renditionLanguageCode) to identify the unique audio track among the alternative rendition groups present in the HLS manifest. If no unique track is found, or multiple tracks match the properties provided, the job fails. If no properties in hlsRenditionGroupSettings are specified, the default audio track within the video segment is chosen. If there is no audio within video segment, the alternative audio with DEFAULT=YES is chosen instead.
    public struct HlsRenditionGroupSettings: Swift.Sendable {
        /// Optional. Specify alternative group ID
        public var renditionGroupId: Swift.String?
        /// Optional. Specify ISO 639-2 or ISO 639-3 code in the language property
        public var renditionLanguageCode: MediaConvertClientTypes.LanguageCode?
        /// Optional. Specify media name
        public var renditionName: Swift.String?

        public init(
            renditionGroupId: Swift.String? = nil,
            renditionLanguageCode: MediaConvertClientTypes.LanguageCode? = nil,
            renditionName: Swift.String? = nil
        )
        {
            self.renditionGroupId = renditionGroupId
            self.renditionLanguageCode = renditionLanguageCode
            self.renditionName = renditionName
        }
    }
}

extension MediaConvertClientTypes {

    /// Specifies the type of the audio selector.
    public enum AudioSelectorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hlsRenditionGroup
        case languageCode
        case pid
        case track
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioSelectorType] {
            return [
                .hlsRenditionGroup,
                .languageCode,
                .pid,
                .track
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hlsRenditionGroup: return "HLS_RENDITION_GROUP"
            case .languageCode: return "LANGUAGE_CODE"
            case .pid: return "PID"
            case .track: return "TRACK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Audio selectors to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
    public struct AudioSelector: Swift.Sendable {
        /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
        public var audioDurationCorrection: MediaConvertClientTypes.AudioDurationCorrection?
        /// Selects a specific language code from within an audio source, using the ISO 639-2 or ISO 639-3 three-letter language code
        public var customLanguageCode: Swift.String?
        /// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
        public var defaultSelection: MediaConvertClientTypes.AudioDefaultSelection?
        /// Specifies audio data from an external file source.
        public var externalAudioFileInput: Swift.String?
        /// Settings specific to audio sources in an HLS alternate rendition group. Specify the properties (renditionGroupId, renditionName or renditionLanguageCode) to identify the unique audio track among the alternative rendition groups present in the HLS manifest. If no unique track is found, or multiple tracks match the properties provided, the job fails. If no properties in hlsRenditionGroupSettings are specified, the default audio track within the video segment is chosen. If there is no audio within video segment, the alternative audio with DEFAULT=YES is chosen instead.
        public var hlsRenditionGroupSettings: MediaConvertClientTypes.HlsRenditionGroupSettings?
        /// Selects a specific language code from within an audio source.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// Specifies a time delta in milliseconds to offset the audio from the input video.
        public var offset: Swift.Int?
        /// Selects a specific PID from within an audio source (e.g. 257 selects PID 0x101).
        public var pids: [Swift.Int]?
        /// Use this setting for input streams that contain Dolby E, to have the service extract specific program data from the track. To select multiple programs, create multiple selectors with the same Track and different Program numbers. In the console, this setting is visible when you set Selector type to Track. Choose the program number from the dropdown list. If your input file has incorrect metadata, you can choose All channels instead of a program number to have the service ignore the program IDs and include all the programs in the track.
        public var programSelection: Swift.Int?
        /// Use these settings to reorder the audio channels of one input to match those of another input. This allows you to combine the two files into a single output, one after the other.
        public var remixSettings: MediaConvertClientTypes.RemixSettings?
        /// Specifies the type of the audio selector.
        public var selectorType: MediaConvertClientTypes.AudioSelectorType?
        /// Identify a track from the input audio to include in this selector by entering the track index number. To include several tracks in a single audio selector, specify multiple tracks as follows. Using the console, enter a comma-separated list. For example, type "1,2,3" to include tracks 1 through 3.
        public var tracks: [Swift.Int]?

        public init(
            audioDurationCorrection: MediaConvertClientTypes.AudioDurationCorrection? = nil,
            customLanguageCode: Swift.String? = nil,
            defaultSelection: MediaConvertClientTypes.AudioDefaultSelection? = nil,
            externalAudioFileInput: Swift.String? = nil,
            hlsRenditionGroupSettings: MediaConvertClientTypes.HlsRenditionGroupSettings? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            offset: Swift.Int? = nil,
            pids: [Swift.Int]? = nil,
            programSelection: Swift.Int? = nil,
            remixSettings: MediaConvertClientTypes.RemixSettings? = nil,
            selectorType: MediaConvertClientTypes.AudioSelectorType? = nil,
            tracks: [Swift.Int]? = nil
        )
        {
            self.audioDurationCorrection = audioDurationCorrection
            self.customLanguageCode = customLanguageCode
            self.defaultSelection = defaultSelection
            self.externalAudioFileInput = externalAudioFileInput
            self.hlsRenditionGroupSettings = hlsRenditionGroupSettings
            self.languageCode = languageCode
            self.offset = offset
            self.pids = pids
            self.programSelection = programSelection
            self.remixSettings = remixSettings
            self.selectorType = selectorType
            self.tracks = tracks
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    public enum AncillaryConvert608To708: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [AncillaryConvert608To708] {
            return [
                .disabled,
                .upconvert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
    public enum AncillaryTerminateCaptions: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case endOfInput
        case sdkUnknown(Swift.String)

        public static var allCases: [AncillaryTerminateCaptions] {
            return [
                .disabled,
                .endOfInput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .endOfInput: return "END_OF_INPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for ancillary captions source.
    public struct AncillarySourceSettings: Swift.Sendable {
        /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
        public var convert608To708: MediaConvertClientTypes.AncillaryConvert608To708?
        /// Specifies the 608 channel number in the ancillary data track from which to extract captions. Unused for passthrough.
        public var sourceAncillaryChannelNumber: Swift.Int?
        /// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
        public var terminateCaptions: MediaConvertClientTypes.AncillaryTerminateCaptions?

        public init(
            convert608To708: MediaConvertClientTypes.AncillaryConvert608To708? = nil,
            sourceAncillaryChannelNumber: Swift.Int? = nil,
            terminateCaptions: MediaConvertClientTypes.AncillaryTerminateCaptions? = nil
        )
        {
            self.convert608To708 = convert608To708
            self.sourceAncillaryChannelNumber = sourceAncillaryChannelNumber
            self.terminateCaptions = terminateCaptions
        }
    }
}

extension MediaConvertClientTypes {

    /// DVB Sub Source Settings
    public struct DvbSubSourceSettings: Swift.Sendable {
        /// When using DVB-Sub with Burn-in, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
        public var pid: Swift.Int?

        public init(
            pid: Swift.Int? = nil
        )
        {
            self.pid = pid
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    public enum EmbeddedConvert608To708: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedConvert608To708] {
            return [
                .disabled,
                .upconvert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
    public enum EmbeddedTerminateCaptions: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case endOfInput
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedTerminateCaptions] {
            return [
                .disabled,
                .endOfInput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .endOfInput: return "END_OF_INPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for embedded captions Source
    public struct EmbeddedSourceSettings: Swift.Sendable {
        /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
        public var convert608To708: MediaConvertClientTypes.EmbeddedConvert608To708?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public var source608ChannelNumber: Swift.Int?
        /// Specifies the video track index used for extracting captions. The system only supports one input video track, so this should always be set to '1'.
        public var source608TrackNumber: Swift.Int?
        /// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
        public var terminateCaptions: MediaConvertClientTypes.EmbeddedTerminateCaptions?

        public init(
            convert608To708: MediaConvertClientTypes.EmbeddedConvert608To708? = nil,
            source608ChannelNumber: Swift.Int? = nil,
            source608TrackNumber: Swift.Int? = nil,
            terminateCaptions: MediaConvertClientTypes.EmbeddedTerminateCaptions? = nil
        )
        {
            self.convert608To708 = convert608To708
            self.source608ChannelNumber = source608ChannelNumber
            self.source608TrackNumber = source608TrackNumber
            self.terminateCaptions = terminateCaptions
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
    public enum CaptionSourceByteRateLimit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptionSourceByteRateLimit] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    public enum FileSourceConvert608To708: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case upconvert
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSourceConvert608To708] {
            return [
                .disabled,
                .upconvert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .upconvert: return "UPCONVERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
    public enum CaptionSourceConvertPaintOnToPopOn: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptionSourceConvertPaintOnToPopOn] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    public struct CaptionSourceFramerate: Swift.Sendable {
        /// Specify the denominator of the fraction that represents the frame rate for the setting Caption source frame rate. Use this setting along with the setting Framerate numerator.
        public var framerateDenominator: Swift.Int?
        /// Specify the numerator of the fraction that represents the frame rate for the setting Caption source frame rate. Use this setting along with the setting Framerate denominator.
        public var framerateNumerator: Swift.Int?

        public init(
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil
        )
        {
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
        }
    }
}

extension MediaConvertClientTypes {

    /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
    public enum FileSourceTimeDeltaUnits: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case milliseconds
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSourceTimeDeltaUnits] {
            return [
                .milliseconds,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .milliseconds: return "MILLISECONDS"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If your input captions are SCC, SMI, SRT, STL, TTML, WebVTT, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    public struct FileSourceSettings: Swift.Sendable {
        /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
        public var byteRateLimit: MediaConvertClientTypes.CaptionSourceByteRateLimit?
        /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
        public var convert608To708: MediaConvertClientTypes.FileSourceConvert608To708?
        /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
        public var convertPaintToPop: MediaConvertClientTypes.CaptionSourceConvertPaintOnToPopOn?
        /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
        public var framerate: MediaConvertClientTypes.CaptionSourceFramerate?
        /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', 'webvtt', and 'vtt'.
        public var sourceFile: Swift.String?
        /// Optional. Use this setting when you need to adjust the sync between your sidecar captions and your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html. Enter a positive or negative number to modify the times in the captions file. For example, type 15 to add 15 seconds to all the times in the captions file. Type -5 to subtract 5 seconds from the times in the captions file. You can optionally specify your time delta in milliseconds instead of seconds. When you do so, set the related setting, Time delta units to Milliseconds. Note that, when you specify a time delta for timecode-based caption sources, such as SCC and STL, and your time delta isn't a multiple of the input frame rate, MediaConvert snaps the captions to the nearest frame. For example, when your input video frame rate is 25 fps and you specify 1010ms for time delta, MediaConvert delays your captions by 1000 ms.
        public var timeDelta: Swift.Int?
        /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
        public var timeDeltaUnits: MediaConvertClientTypes.FileSourceTimeDeltaUnits?

        public init(
            byteRateLimit: MediaConvertClientTypes.CaptionSourceByteRateLimit? = nil,
            convert608To708: MediaConvertClientTypes.FileSourceConvert608To708? = nil,
            convertPaintToPop: MediaConvertClientTypes.CaptionSourceConvertPaintOnToPopOn? = nil,
            framerate: MediaConvertClientTypes.CaptionSourceFramerate? = nil,
            sourceFile: Swift.String? = nil,
            timeDelta: Swift.Int? = nil,
            timeDeltaUnits: MediaConvertClientTypes.FileSourceTimeDeltaUnits? = nil
        )
        {
            self.byteRateLimit = byteRateLimit
            self.convert608To708 = convert608To708
            self.convertPaintToPop = convertPaintToPop
            self.framerate = framerate
            self.sourceFile = sourceFile
            self.timeDelta = timeDelta
            self.timeDeltaUnits = timeDeltaUnits
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Source to identify the format of your input captions. The service cannot auto-detect caption format.
    public enum CaptionSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ancillary
        case dvbSub
        case embedded
        case imsc
        case nullSource
        case scc
        case scte20
        case smi
        case smpteTt
        case srt
        case stl
        case teletext
        case ttml
        case webvtt
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptionSourceType] {
            return [
                .ancillary,
                .dvbSub,
                .embedded,
                .imsc,
                .nullSource,
                .scc,
                .scte20,
                .smi,
                .smpteTt,
                .srt,
                .stl,
                .teletext,
                .ttml,
                .webvtt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ancillary: return "ANCILLARY"
            case .dvbSub: return "DVB_SUB"
            case .embedded: return "EMBEDDED"
            case .imsc: return "IMSC"
            case .nullSource: return "NULL_SOURCE"
            case .scc: return "SCC"
            case .scte20: return "SCTE20"
            case .smi: return "SMI"
            case .smpteTt: return "SMPTE_TT"
            case .srt: return "SRT"
            case .stl: return "STL"
            case .teletext: return "TELETEXT"
            case .ttml: return "TTML"
            case .webvtt: return "WEBVTT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings specific to Teletext caption sources, including Page number.
    public struct TeletextSourceSettings: Swift.Sendable {
        /// Use Page Number to specify the three-digit hexadecimal page number that will be used for Teletext captions. Do not use this setting if you are passing through teletext from the input source to output.
        public var pageNumber: Swift.String?

        public init(
            pageNumber: Swift.String? = nil
        )
        {
            self.pageNumber = pageNumber
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings specific to caption sources that are specified by track number. Currently, this is only IMSC captions in an IMF package. If your caption source is IMSC 1.1 in a separate xml file, use FileSourceSettings instead of TrackSourceSettings.
    public struct TrackSourceSettings: Swift.Sendable {
        /// Use this setting to select a single captions track from a source. Track numbers correspond to the order in the captions source file. For IMF sources, track numbering is based on the order that the captions appear in the CPL. For example, use 1 to select the captions asset that is listed first in the CPL. To include more than one captions track in your job outputs, create multiple input captions selectors. Specify one track per selector.
        public var trackNumber: Swift.Int?

        public init(
            trackNumber: Swift.Int? = nil
        )
        {
            self.trackNumber = trackNumber
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings specific to WebVTT sources in HLS alternative rendition group. Specify the properties (renditionGroupId, renditionName or renditionLanguageCode) to identify the unique subtitle track among the alternative rendition groups present in the HLS manifest. If no unique track is found, or multiple tracks match the specified properties, the job fails. If there is only one subtitle track in the rendition group, the settings can be left empty and the default subtitle track will be chosen. If your caption source is a sidecar file, use FileSourceSettings instead of WebvttHlsSourceSettings.
    public struct WebvttHlsSourceSettings: Swift.Sendable {
        /// Optional. Specify alternative group ID
        public var renditionGroupId: Swift.String?
        /// Optional. Specify ISO 639-2 or ISO 639-3 code in the language property
        public var renditionLanguageCode: MediaConvertClientTypes.LanguageCode?
        /// Optional. Specify media name
        public var renditionName: Swift.String?

        public init(
            renditionGroupId: Swift.String? = nil,
            renditionLanguageCode: MediaConvertClientTypes.LanguageCode? = nil,
            renditionName: Swift.String? = nil
        )
        {
            self.renditionGroupId = renditionGroupId
            self.renditionLanguageCode = renditionLanguageCode
            self.renditionName = renditionName
        }
    }
}

extension MediaConvertClientTypes {

    /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    public struct CaptionSourceSettings: Swift.Sendable {
        /// Settings for ancillary captions source.
        public var ancillarySourceSettings: MediaConvertClientTypes.AncillarySourceSettings?
        /// DVB Sub Source Settings
        public var dvbSubSourceSettings: MediaConvertClientTypes.DvbSubSourceSettings?
        /// Settings for embedded captions Source
        public var embeddedSourceSettings: MediaConvertClientTypes.EmbeddedSourceSettings?
        /// If your input captions are SCC, SMI, SRT, STL, TTML, WebVTT, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
        public var fileSourceSettings: MediaConvertClientTypes.FileSourceSettings?
        /// Use Source to identify the format of your input captions. The service cannot auto-detect caption format.
        public var sourceType: MediaConvertClientTypes.CaptionSourceType?
        /// Settings specific to Teletext caption sources, including Page number.
        public var teletextSourceSettings: MediaConvertClientTypes.TeletextSourceSettings?
        /// Settings specific to caption sources that are specified by track number. Currently, this is only IMSC captions in an IMF package. If your caption source is IMSC 1.1 in a separate xml file, use FileSourceSettings instead of TrackSourceSettings.
        public var trackSourceSettings: MediaConvertClientTypes.TrackSourceSettings?
        /// Settings specific to WebVTT sources in HLS alternative rendition group. Specify the properties (renditionGroupId, renditionName or renditionLanguageCode) to identify the unique subtitle track among the alternative rendition groups present in the HLS manifest. If no unique track is found, or multiple tracks match the specified properties, the job fails. If there is only one subtitle track in the rendition group, the settings can be left empty and the default subtitle track will be chosen. If your caption source is a sidecar file, use FileSourceSettings instead of WebvttHlsSourceSettings.
        public var webvttHlsSourceSettings: MediaConvertClientTypes.WebvttHlsSourceSettings?

        public init(
            ancillarySourceSettings: MediaConvertClientTypes.AncillarySourceSettings? = nil,
            dvbSubSourceSettings: MediaConvertClientTypes.DvbSubSourceSettings? = nil,
            embeddedSourceSettings: MediaConvertClientTypes.EmbeddedSourceSettings? = nil,
            fileSourceSettings: MediaConvertClientTypes.FileSourceSettings? = nil,
            sourceType: MediaConvertClientTypes.CaptionSourceType? = nil,
            teletextSourceSettings: MediaConvertClientTypes.TeletextSourceSettings? = nil,
            trackSourceSettings: MediaConvertClientTypes.TrackSourceSettings? = nil,
            webvttHlsSourceSettings: MediaConvertClientTypes.WebvttHlsSourceSettings? = nil
        )
        {
            self.ancillarySourceSettings = ancillarySourceSettings
            self.dvbSubSourceSettings = dvbSubSourceSettings
            self.embeddedSourceSettings = embeddedSourceSettings
            self.fileSourceSettings = fileSourceSettings
            self.sourceType = sourceType
            self.teletextSourceSettings = teletextSourceSettings
            self.trackSourceSettings = trackSourceSettings
            self.webvttHlsSourceSettings = webvttHlsSourceSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 100 captions selectors per input.
    public struct CaptionSelector: Swift.Sendable {
        /// The specific language to extract from source, using the ISO 639-2 or ISO 639-3 three-letter language code. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
        public var customLanguageCode: Swift.String?
        /// The specific language to extract from source. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
        public var sourceSettings: MediaConvertClientTypes.CaptionSourceSettings?

        public init(
            customLanguageCode: Swift.String? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            sourceSettings: MediaConvertClientTypes.CaptionSourceSettings? = nil
        )
        {
            self.customLanguageCode = customLanguageCode
            self.languageCode = languageCode
            self.sourceSettings = sourceSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Rectangle to identify a specific area of the video frame.
    public struct Rectangle: Swift.Sendable {
        /// Height of rectangle in pixels. Specify only even numbers.
        public var height: Swift.Int?
        /// Width of rectangle in pixels. Specify only even numbers.
        public var width: Swift.Int?
        /// The distance, in pixels, between the rectangle and the left edge of the video frame. Specify only even numbers.
        public var x: Swift.Int?
        /// The distance, in pixels, between the rectangle and the top edge of the video frame. Specify only even numbers.
        public var y: Swift.Int?

        public init(
            height: Swift.Int? = nil,
            width: Swift.Int? = nil,
            x: Swift.Int? = nil,
            y: Swift.Int? = nil
        )
        {
            self.height = height
            self.width = width
            self.x = x
            self.y = y
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable Deblock to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
    public enum InputDeblockFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDeblockFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the encryption mode that you used to encrypt your input files.
    public enum DecryptionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aesCbc
        case aesCtr
        case aesGcm
        case sdkUnknown(Swift.String)

        public static var allCases: [DecryptionMode] {
            return [
                .aesCbc,
                .aesCtr,
                .aesGcm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aesCbc: return "AES_CBC"
            case .aesCtr: return "AES_CTR"
            case .aesGcm: return "AES_GCM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
    public struct InputDecryptionSettings: Swift.Sendable {
        /// Specify the encryption mode that you used to encrypt your input files.
        public var decryptionMode: MediaConvertClientTypes.DecryptionMode?
        /// Warning! Don't provide your encryption key in plaintext. Your job settings could be intercepted, making your encrypted content vulnerable. Specify the encrypted version of the data key that you used to encrypt your content. The data key must be encrypted by AWS Key Management Service (KMS). The key can be 128, 192, or 256 bits.
        public var encryptedDecryptionKey: Swift.String?
        /// Specify the initialization vector that you used when you encrypted your content before uploading it to Amazon S3. You can use a 16-byte initialization vector with any encryption mode. Or, you can use a 12-byte initialization vector with GCM or CTR. MediaConvert accepts only initialization vectors that are base64-encoded.
        public var initializationVector: Swift.String?
        /// Specify the AWS Region for AWS Key Management Service (KMS) that you used to encrypt your data key, if that Region is different from the one you are using for AWS Elemental MediaConvert.
        public var kmsKeyRegion: Swift.String?

        public init(
            decryptionMode: MediaConvertClientTypes.DecryptionMode? = nil,
            encryptedDecryptionKey: Swift.String? = nil,
            initializationVector: Swift.String? = nil,
            kmsKeyRegion: Swift.String? = nil
        )
        {
            self.decryptionMode = decryptionMode
            self.encryptedDecryptionKey = encryptedDecryptionKey
            self.initializationVector = initializationVector
            self.kmsKeyRegion = kmsKeyRegion
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable Denoise to filter noise from the input. Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
    public enum InputDenoiseFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InputDenoiseFilter] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether to apply input filtering to improve the video quality of your input. To apply filtering depending on your input type and quality: Choose Auto. To apply no filtering: Choose Disable. To apply filtering regardless of your input type and quality: Choose Force. When you do, you must also specify a value for Filter strength.
    public enum InputFilterEnable: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disable
        case force
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFilterEnable] {
            return [
                .auto,
                .disable,
                .force
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disable: return "DISABLE"
            case .force: return "FORCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings apply to a specific graphic overlay. You can include multiple overlays in your job.
    public struct InsertableImage: Swift.Sendable {
        /// Specify the time, in milliseconds, for the image to remain on the output video. This duration includes fade-in time but not fade-out time.
        public var duration: Swift.Int?
        /// Specify the length of time, in milliseconds, between the Start time that you specify for the image insertion and the time that the image appears at full opacity. Full opacity is the level that you specify for the opacity setting. If you don't specify a value for Fade-in, the image will appear abruptly at the overlay start time.
        public var fadeIn: Swift.Int?
        /// Specify the length of time, in milliseconds, between the end of the time that you have specified for the image overlay Duration and when the overlaid image has faded to total transparency. If you don't specify a value for Fade-out, the image will disappear abruptly at the end of the inserted image duration.
        public var fadeOut: Swift.Int?
        /// Specify the height of the inserted image in pixels. If you specify a value that's larger than the video resolution height, the service will crop your overlaid image to fit. To use the native height of the image, keep this setting blank.
        public var height: Swift.Int?
        /// Specify the HTTP, HTTPS, or Amazon S3 location of the image that you want to overlay on the video. Use a PNG or TGA file.
        public var imageInserterInput: Swift.String?
        /// Specify the distance, in pixels, between the inserted image and the left edge of the video frame. Required for any image overlay that you specify.
        public var imagex: Swift.Int?
        /// Specify the distance, in pixels, between the overlaid image and the top edge of the video frame. Required for any image overlay that you specify.
        public var imagey: Swift.Int?
        /// Specify how overlapping inserted images appear. Images with higher values for Layer appear on top of images with lower values for Layer.
        public var layer: Swift.Int?
        /// Use Opacity to specify how much of the underlying video shows through the inserted image. 0 is transparent and 100 is fully opaque. Default is 50.
        public var opacity: Swift.Int?
        /// Specify the timecode of the frame that you want the overlay to first appear on. This must be in timecode (HH:MM:SS:FF or HH:MM:SS;FF) format. Remember to take into account your timecode source settings.
        public var startTime: Swift.String?
        /// Specify the width of the inserted image in pixels. If you specify a value that's larger than the video resolution width, the service will crop your overlaid image to fit. To use the native width of the image, keep this setting blank.
        public var width: Swift.Int?

        public init(
            duration: Swift.Int? = nil,
            fadeIn: Swift.Int? = nil,
            fadeOut: Swift.Int? = nil,
            height: Swift.Int? = nil,
            imageInserterInput: Swift.String? = nil,
            imagex: Swift.Int? = nil,
            imagey: Swift.Int? = nil,
            layer: Swift.Int? = nil,
            opacity: Swift.Int? = nil,
            startTime: Swift.String? = nil,
            width: Swift.Int? = nil
        )
        {
            self.duration = duration
            self.fadeIn = fadeIn
            self.fadeOut = fadeOut
            self.height = height
            self.imageInserterInput = imageInserterInput
            self.imagex = imagex
            self.imagey = imagey
            self.layer = layer
            self.opacity = opacity
            self.startTime = startTime
            self.width = width
        }
    }
}

extension MediaConvertClientTypes {

    /// Use the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input or output individually. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/graphic-overlay.html. This setting is disabled by default.
    public struct ImageInserter: Swift.Sendable {
        /// Specify the images that you want to overlay on your video. The images must be PNG or TGA files.
        public var insertableImages: [MediaConvertClientTypes.InsertableImage]?
        /// Specify the reference white level, in nits, for all of your image inserter images. Use to correct brightness levels within HDR10 outputs. For 1,000 nit peak brightness displays, we recommend that you set SDR reference white level to 203 (according to ITU-R BT.2408). Leave blank to use the default value of 100, or specify an integer from 100 to 1000.
        public var sdrReferenceWhiteLevel: Swift.Int?

        public init(
            insertableImages: [MediaConvertClientTypes.InsertableImage]? = nil,
            sdrReferenceWhiteLevel: Swift.Int? = nil
        )
        {
            self.insertableImages = insertableImages
            self.sdrReferenceWhiteLevel = sdrReferenceWhiteLevel
        }
    }
}

extension MediaConvertClientTypes {

    /// To transcode only portions of your input, include one input clip for each part of your input that you want in your output. All input clips that you specify will be included in every output of the job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/assembling-multiple-inputs-and-input-clips.html.
    public struct InputClipping: Swift.Sendable {
        /// Set End timecode to the end of the portion of the input you are clipping. The frame corresponding to the End timecode value is included in the clip. Start timecode or End timecode may be left blank, but not both. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When choosing this value, take into account your setting for timecode source under input settings. For example, if you have embedded timecodes that start at 01:00:00:00 and you want your clip to end six minutes into the video, use 01:06:00:00.
        public var endTimecode: Swift.String?
        /// Set Start timecode to the beginning of the portion of the input you are clipping. The frame corresponding to the Start timecode value is included in the clip. Start timecode or End timecode may be left blank, but not both. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When choosing this value, take into account your setting for Input timecode source. For example, if you have embedded timecodes that start at 01:00:00:00 and you want your clip to begin five minutes into the video, use 01:05:00:00.
        public var startTimecode: Swift.String?

        public init(
            endTimecode: Swift.String? = nil,
            startTimecode: Swift.String? = nil
        )
        {
            self.endTimecode = endTimecode
            self.startTimecode = startTimecode
        }
    }
}

extension MediaConvertClientTypes {

    /// When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn't automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don't specify, the default value is Auto. Auto is the correct setting for all inputs that are not PsF. Don't set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
    public enum InputScanType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case psf
        case sdkUnknown(Swift.String)

        public static var allCases: [InputScanType] {
            return [
                .auto,
                .psf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .psf: return "PSF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Set PSI control for transport stream inputs to specify which data the demux process to scans.
    ///
    /// * Ignore PSI - Scan all PIDs for audio and video.
    ///
    /// * Use PSI - Scan only PSI data.
    public enum InputPsiControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignorePsi
        case usePsi
        case sdkUnknown(Swift.String)

        public static var allCases: [InputPsiControl] {
            return [
                .ignorePsi,
                .usePsi
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignorePsi: return "IGNORE_PSI"
            case .usePsi: return "USE_PSI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this Timecode source setting, located under the input settings, to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded to use the timecodes in your input video. Choose Start at zero to start the first frame at zero. Choose Specified start to start the first frame at the timecode that you specify in the setting Start timecode. If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
    public enum InputTimecodeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case embedded
        case specifiedstart
        case zerobased
        case sdkUnknown(Swift.String)

        public static var allCases: [InputTimecodeSource] {
            return [
                .embedded,
                .specifiedstart,
                .zerobased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .embedded: return "EMBEDDED"
            case .specifiedstart: return "SPECIFIEDSTART"
            case .zerobased: return "ZEROBASED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you include Video generator, MediaConvert creates a video input with black frames. Use this setting if you do not have a video input or if you want to add black video frames before, or after, other inputs. You can specify Video generator, or you can specify an Input file, but you cannot specify both. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/video-generator.html
    public struct InputVideoGenerator: Swift.Sendable {
        /// Specify the number of audio channels to include in your video generator input. MediaConvert creates these audio channels as silent audio within a single audio track. Enter an integer from 1 to 32.
        public var channels: Swift.Int?
        /// Specify the duration, in milliseconds, for your video generator input. Enter an integer from 50 to 86400000.
        public var duration: Swift.Int?
        /// Specify the denominator of the fraction that represents the frame rate for your video generator input. When you do, you must also specify a value for Frame rate numerator. MediaConvert uses a default frame rate of 29.97 when you leave Frame rate numerator and Frame rate denominator blank.
        public var framerateDenominator: Swift.Int?
        /// Specify the numerator of the fraction that represents the frame rate for your video generator input. When you do, you must also specify a value for Frame rate denominator. MediaConvert uses a default frame rate of 29.97 when you leave Frame rate numerator and Frame rate denominator blank.
        public var framerateNumerator: Swift.Int?
        /// Specify the audio sample rate, in Hz, for the silent audio in your video generator input. Enter an integer from 32000 to 48000.
        public var sampleRate: Swift.Int?

        public init(
            channels: Swift.Int? = nil,
            duration: Swift.Int? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            sampleRate: Swift.Int? = nil
        )
        {
            self.channels = channels
            self.duration = duration
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.sampleRate = sampleRate
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the Unit type to use when you enter a value for X position, Y position, Width, or Height. You can choose Pixels or Percentage. Leave blank to use the default value, Pixels.
    public enum VideoOverlayUnit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case percentage
        case pixels
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoOverlayUnit] {
            return [
                .percentage,
                .pixels
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .percentage: return "PERCENTAGE"
            case .pixels: return "PIXELS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// position of video overlay
    public struct VideoOverlayPosition: Swift.Sendable {
        /// To scale your video overlay to the same height as the base input video: Leave blank. To scale the height of your video overlay to a different height: Enter an integer representing the Unit type that you choose, either Pixels or Percentage. For example, when you enter 360 and choose Pixels, your video overlay will be rendered with a height of 360. When you enter 50, choose Percentage, and your overlay's source has a height of 1080, your video overlay will be rendered with a height of 540. To scale your overlay to a specific height while automatically maintaining its original aspect ratio, enter a value for Height and leave Width blank.
        public var height: Swift.Int?
        /// Specify the Unit type to use when you enter a value for X position, Y position, Width, or Height. You can choose Pixels or Percentage. Leave blank to use the default value, Pixels.
        public var unit: MediaConvertClientTypes.VideoOverlayUnit?
        /// To scale your video overlay to the same width as the base input video: Leave blank. To scale the width of your video overlay to a different width: Enter an integer representing the Unit type that you choose, either Pixels or Percentage. For example, when you enter 640 and choose Pixels, your video overlay will scale to a height of 640 pixels. When you enter 50, choose Percentage, and your overlay's source has a width of 1920, your video overlay will scale to a width of 960. To scale your overlay to a specific width while automatically maintaining its original aspect ratio, enter a value for Width and leave Height blank.
        public var width: Swift.Int?
        /// To position the left edge of your video overlay along the left edge of the base input video's frame: Keep blank, or enter 0. To position the left edge of your video overlay to the right, relative to the left edge of the base input video's frame: Enter an integer representing the Unit type that you choose, either Pixels or Percentage. For example, when you enter 10 and choose Pixels, your video overlay will be positioned 10 pixels from the left edge of the base input video's frame. When you enter 10, choose Percentage, and your base input video is 1920x1080, your video overlay will be positioned 192 pixels from the left edge of the base input video's frame.
        public var xPosition: Swift.Int?
        /// To position the top edge of your video overlay along the top edge of the base input video's frame: Keep blank, or enter 0. To position the top edge of your video overlay down, relative to the top edge of the base input video's frame: Enter an integer representing the Unit type that you choose, either Pixels or Percentage. For example, when you enter 10 and choose Pixels, your video overlay will be positioned 10 pixels from the top edge of the base input video's frame. When you enter 10, choose Percentage, and your underlying video is 1920x1080, your video overlay will be positioned 108 pixels from the top edge of the base input video's frame.
        public var yPosition: Swift.Int?

        public init(
            height: Swift.Int? = nil,
            unit: MediaConvertClientTypes.VideoOverlayUnit? = nil,
            width: Swift.Int? = nil,
            xPosition: Swift.Int? = nil,
            yPosition: Swift.Int? = nil
        )
        {
            self.height = height
            self.unit = unit
            self.width = width
            self.xPosition = xPosition
            self.yPosition = yPosition
        }
    }
}

extension MediaConvertClientTypes {

    /// To transcode only portions of your video overlay, include one input clip for each part of your video overlay that you want in your output.
    public struct VideoOverlayInputClipping: Swift.Sendable {
        /// Specify the timecode of the last frame to include in your video overlay's clip. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
        public var endTimecode: Swift.String?
        /// Specify the timecode of the first frame to include in your video overlay's clip. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
        public var startTimecode: Swift.String?

        public init(
            endTimecode: Swift.String? = nil,
            startTimecode: Swift.String? = nil
        )
        {
            self.endTimecode = endTimecode
            self.startTimecode = startTimecode
        }
    }
}

extension MediaConvertClientTypes {

    /// Input settings for Video overlay. You can include one or more video overlays in sequence at different times that you specify.
    public struct VideoOverlayInput: Swift.Sendable {
        /// Specify the input file S3, HTTP, or HTTPS URL for your video overlay. To specify one or more Transitions for your base input video instead: Leave blank.
        public var fileInput: Swift.String?
        /// Specify one or more clips to use from your video overlay. When you include an input clip, you must also specify its start timecode, end timecode, or both start and end timecode.
        public var inputClippings: [MediaConvertClientTypes.VideoOverlayInputClipping]?
        /// Specify the timecode source for your video overlay input clips. To use the timecode present in your video overlay: Choose Embedded. To use a zerobased timecode: Choose Start at 0. To choose a timecode: Choose Specified start. When you do, enter the starting timecode in Start timecode. If you don't specify a value for Timecode source, MediaConvert uses Embedded by default.
        public var timecodeSource: MediaConvertClientTypes.InputTimecodeSource?
        /// Specify the starting timecode for this video overlay. To use this setting, you must set Timecode source to Specified start.
        public var timecodeStart: Swift.String?

        public init(
            fileInput: Swift.String? = nil,
            inputClippings: [MediaConvertClientTypes.VideoOverlayInputClipping]? = nil,
            timecodeSource: MediaConvertClientTypes.InputTimecodeSource? = nil,
            timecodeStart: Swift.String? = nil
        )
        {
            self.fileInput = fileInput
            self.inputClippings = inputClippings
            self.timecodeSource = timecodeSource
            self.timecodeStart = timecodeStart
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your video overlay repeats or plays only once. To repeat your video overlay on a loop: Keep the default value, Repeat. Your overlay will repeat for the duration of the base input video. To playback your video overlay only once: Choose Once. With either option, you can end playback at a time that you specify by entering a value for End timecode.
    public enum VideoOverlayPlayBackMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case once
        case `repeat`
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoOverlayPlayBackMode] {
            return [
                .once,
                .repeat
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .once: return "ONCE"
            case .repeat: return "REPEAT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify one or more Transitions for your video overlay. Use Transitions to reposition or resize your overlay over time. To use the same position and size for the duration of your video overlay: Leave blank. To specify a Transition: Enter a value for Start timecode, End Timecode, X Position, Y Position, Width, or Height.
    public struct VideoOverlayTransition: Swift.Sendable {
        /// Specify the ending position for this transition, relative to the base input video's frame. Your video overlay will move smoothly to this position, beginning at this transition's Start timecode and ending at this transition's End timecode.
        public var endPosition: MediaConvertClientTypes.VideoOverlayPosition?
        /// Specify the timecode for when this transition ends. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
        public var endTimecode: Swift.String?
        /// Specify the timecode for when this transition begins. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
        public var startTimecode: Swift.String?

        public init(
            endPosition: MediaConvertClientTypes.VideoOverlayPosition? = nil,
            endTimecode: Swift.String? = nil,
            startTimecode: Swift.String? = nil
        )
        {
            self.endPosition = endPosition
            self.endTimecode = endTimecode
            self.startTimecode = startTimecode
        }
    }
}

extension MediaConvertClientTypes {

    /// Overlay one or more videos on top of your input video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/video-overlays.html
    public struct VideoOverlay: Swift.Sendable {
        /// Enter the end timecode in the base input video for this overlay. Your overlay will be active through this frame. To display your video overlay for the duration of the base input video: Leave blank. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS isthe second, and FF is the frame number. When entering this value, take into account your choice for the base input video's timecode source. For example, if you have embedded timecodes that start at 01:00:00:00 and you want your overlay to end ten minutes into the video, enter 01:10:00:00.
        public var endTimecode: Swift.String?
        /// Specify the Initial position of your video overlay. To specify the Initial position of your video overlay, including distance from the left or top edge of the base input video's frame, or size: Enter a value for X position, Y position, Width, or Height. To use the full frame of the base input video: Leave blank.
        public var initialPosition: MediaConvertClientTypes.VideoOverlayPosition?
        /// Input settings for Video overlay. You can include one or more video overlays in sequence at different times that you specify.
        public var input: MediaConvertClientTypes.VideoOverlayInput?
        /// Specify whether your video overlay repeats or plays only once. To repeat your video overlay on a loop: Keep the default value, Repeat. Your overlay will repeat for the duration of the base input video. To playback your video overlay only once: Choose Once. With either option, you can end playback at a time that you specify by entering a value for End timecode.
        public var playback: MediaConvertClientTypes.VideoOverlayPlayBackMode?
        /// Enter the start timecode in the base input video for this overlay. Your overlay will be active starting with this frame. To display your video overlay starting at the beginning of the base input video: Leave blank. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for the base input video's timecode source. For example, if you have embedded timecodes that start at 01:00:00:00 and you want your overlay to begin five minutes into the video, enter 01:05:00:00.
        public var startTimecode: Swift.String?
        /// Specify one or more transitions for your video overlay. Use Transitions to reposition or resize your overlay over time. To use the same position and size for the duration of your video overlay: Leave blank. To specify a Transition: Enter a value for Start timecode, End Timecode, X Position, Y Position, Width, or Height.
        public var transitions: [MediaConvertClientTypes.VideoOverlayTransition]?

        public init(
            endTimecode: Swift.String? = nil,
            initialPosition: MediaConvertClientTypes.VideoOverlayPosition? = nil,
            input: MediaConvertClientTypes.VideoOverlayInput? = nil,
            playback: MediaConvertClientTypes.VideoOverlayPlayBackMode? = nil,
            startTimecode: Swift.String? = nil,
            transitions: [MediaConvertClientTypes.VideoOverlayTransition]? = nil
        )
        {
            self.endTimecode = endTimecode
            self.initialPosition = initialPosition
            self.input = input
            self.playback = playback
            self.startTimecode = startTimecode
            self.transitions = transitions
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
    public enum AlphaBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case discard
        case remapToLuma
        case sdkUnknown(Swift.String)

        public static var allCases: [AlphaBehavior] {
            return [
                .discard,
                .remapToLuma
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .discard: return "DISCARD"
            case .remapToLuma: return "REMAP_TO_LUMA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// There are two sources for color metadata, the input file and the job input settings Color space and HDR master display information settings. The Color space usage setting determines which takes precedence. Choose Force to use color metadata from the input job settings. If you don't specify values for those settings, the service defaults to using metadata from your input. FALLBACK - Choose Fallback to use color metadata from the source when it is present. If there's no color metadata in your input file, the service defaults to using values you specify in the input settings.
    public enum ColorSpaceUsage: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fallback
        case force
        case sdkUnknown(Swift.String)

        public static var allCases: [ColorSpaceUsage] {
            return [
                .fallback,
                .force
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fallback: return "FALLBACK"
            case .force: return "FORCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Set Embedded timecode override to Use MDPM when your AVCHD input contains timecode tag data in the Modified Digital Video Pack Metadata. When you do, we recommend you also set Timecode source to Embedded. Leave Embedded timecode override blank, or set to None, when your input does not contain MDPM timecode.
    public enum EmbeddedTimecodeOverride: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case useMdpm
        case sdkUnknown(Swift.String)

        public static var allCases: [EmbeddedTimecodeOverride] {
            return [
                .none,
                .useMdpm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .useMdpm: return "USE_MDPM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
    public struct Hdr10Metadata: Swift.Sendable {
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var bluePrimaryX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var bluePrimaryY: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var greenPrimaryX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var greenPrimaryY: Swift.Int?
        /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
        public var maxContentLightLevel: Swift.Int?
        /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
        public var maxFrameAverageLightLevel: Swift.Int?
        /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
        public var maxLuminance: Swift.Int?
        /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
        public var minLuminance: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var redPrimaryX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var redPrimaryY: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var whitePointX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var whitePointY: Swift.Int?

        public init(
            bluePrimaryX: Swift.Int? = nil,
            bluePrimaryY: Swift.Int? = nil,
            greenPrimaryX: Swift.Int? = nil,
            greenPrimaryY: Swift.Int? = nil,
            maxContentLightLevel: Swift.Int? = nil,
            maxFrameAverageLightLevel: Swift.Int? = nil,
            maxLuminance: Swift.Int? = nil,
            minLuminance: Swift.Int? = nil,
            redPrimaryX: Swift.Int? = nil,
            redPrimaryY: Swift.Int? = nil,
            whitePointX: Swift.Int? = nil,
            whitePointY: Swift.Int? = nil
        )
        {
            self.bluePrimaryX = bluePrimaryX
            self.bluePrimaryY = bluePrimaryY
            self.greenPrimaryX = greenPrimaryX
            self.greenPrimaryY = greenPrimaryY
            self.maxContentLightLevel = maxContentLightLevel
            self.maxFrameAverageLightLevel = maxFrameAverageLightLevel
            self.maxLuminance = maxLuminance
            self.minLuminance = minLuminance
            self.redPrimaryX = redPrimaryX
            self.redPrimaryY = redPrimaryY
            self.whitePointX = whitePointX
            self.whitePointY = whitePointY
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting if your input has video and audio durations that don't align, and your output or player has strict alignment requirements. Examples: Input audio track has a delayed start. Input video track ends before audio ends. When you set Pad video to Black, MediaConvert generates black video frames so that output video and audio durations match. Black video frames are added at the beginning or end, depending on your input. To keep the default behavior and not generate black video, set Pad video to Disabled or leave blank.
    public enum PadVideo: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case black
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [PadVideo] {
            return [
                .black,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .black: return "BLACK"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Rotate to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
    public enum InputRotate: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case degrees180
        case degrees270
        case degrees90
        case degree0
        case sdkUnknown(Swift.String)

        public static var allCases: [InputRotate] {
            return [
                .auto,
                .degrees180,
                .degrees270,
                .degrees90,
                .degree0
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .degrees180: return "DEGREES_180"
            case .degrees270: return "DEGREES_270"
            case .degrees90: return "DEGREES_90"
            case .degree0: return "DEGREE_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If the sample range metadata in your input video is accurate, or if you don't know about sample range, keep the default value, Follow, for this setting. When you do, the service automatically detects your input sample range. If your input video has metadata indicating the wrong sample range, specify the accurate sample range here. When you do, MediaConvert ignores any sample range information in the input metadata. Regardless of whether MediaConvert uses the input sample range or the sample range that you specify, MediaConvert uses the sample range for transcoding and also writes it to the output metadata.
    public enum InputSampleRange: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case follow
        case fullRange
        case limitedRange
        case sdkUnknown(Swift.String)

        public static var allCases: [InputSampleRange] {
            return [
                .follow,
                .fullRange,
                .limitedRange
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .follow: return "FOLLOW"
            case .fullRange: return "FULL_RANGE"
            case .limitedRange: return "LIMITED_RANGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
    public struct VideoSelector: Swift.Sendable {
        /// Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
        public var alphaBehavior: MediaConvertClientTypes.AlphaBehavior?
        /// If your input video has accurate color space metadata, or if you don't know about color space: Keep the default value, Follow. MediaConvert will automatically detect your input color space. If your input video has metadata indicating the wrong color space, or has missing metadata: Specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate: Choose Force HDR 10. Specify correct values in the input HDR 10 metadata settings. For more information about HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr. When you specify an input color space, MediaConvert uses the following color space metadata, which includes color primaries, transfer characteristics, and matrix coefficients:
        ///
        /// * HDR 10: BT.2020, PQ, BT.2020 non-constant
        ///
        /// * HLG 2020: BT.2020, HLG, BT.2020 non-constant
        ///
        /// * P3DCI (Theater): DCIP3, SMPTE 428M, BT.709
        ///
        /// * P3D65 (SDR): Display P3, sRGB, BT.709
        ///
        /// * P3D65 (HDR): Display P3, PQ, BT.709
        public var colorSpace: MediaConvertClientTypes.ColorSpace?
        /// There are two sources for color metadata, the input file and the job input settings Color space and HDR master display information settings. The Color space usage setting determines which takes precedence. Choose Force to use color metadata from the input job settings. If you don't specify values for those settings, the service defaults to using metadata from your input. FALLBACK - Choose Fallback to use color metadata from the source when it is present. If there's no color metadata in your input file, the service defaults to using values you specify in the input settings.
        public var colorSpaceUsage: MediaConvertClientTypes.ColorSpaceUsage?
        /// Set Embedded timecode override to Use MDPM when your AVCHD input contains timecode tag data in the Modified Digital Video Pack Metadata. When you do, we recommend you also set Timecode source to Embedded. Leave Embedded timecode override blank, or set to None, when your input does not contain MDPM timecode.
        public var embeddedTimecodeOverride: MediaConvertClientTypes.EmbeddedTimecodeOverride?
        /// Use these settings to provide HDR 10 metadata that is missing or inaccurate in your input video. Appropriate values vary depending on the input video and must be provided by a color grader. The color grader generates these values during the HDR 10 mastering process. The valid range for each of these settings is 0 to 50,000. Each increment represents 0.00002 in CIE1931 color coordinate. Related settings - When you specify these values, you must also set Color space to HDR 10. To specify whether the the values you specify here take precedence over the values in the metadata of your input file, set Color space usage. To specify whether color metadata is included in an output, set Color metadata. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
        public var hdr10Metadata: MediaConvertClientTypes.Hdr10Metadata?
        /// Specify the maximum mastering display luminance. Enter an integer from 0 to 2147483647, in units of 0.0001 nits. For example, enter 10000000 for 1000 nits.
        public var maxLuminance: Swift.Int?
        /// Use this setting if your input has video and audio durations that don't align, and your output or player has strict alignment requirements. Examples: Input audio track has a delayed start. Input video track ends before audio ends. When you set Pad video to Black, MediaConvert generates black video frames so that output video and audio durations match. Black video frames are added at the beginning or end, depending on your input. To keep the default behavior and not generate black video, set Pad video to Disabled or leave blank.
        public var padVideo: MediaConvertClientTypes.PadVideo?
        /// Use PID to select specific video data from an input file. Specify this value as an integer; the system automatically converts it to the hexidecimal value. For example, 257 selects PID 0x101. A PID, or packet identifier, is an identifier for a set of data in an MPEG-2 transport stream container.
        public var pid: Swift.Int?
        /// Selects a specific program from within a multi-program transport stream. Note that Quad 4K is not currently supported.
        public var programNumber: Swift.Int?
        /// Use Rotate to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
        public var rotate: MediaConvertClientTypes.InputRotate?
        /// If the sample range metadata in your input video is accurate, or if you don't know about sample range, keep the default value, Follow, for this setting. When you do, the service automatically detects your input sample range. If your input video has metadata indicating the wrong sample range, specify the accurate sample range here. When you do, MediaConvert ignores any sample range information in the input metadata. Regardless of whether MediaConvert uses the input sample range or the sample range that you specify, MediaConvert uses the sample range for transcoding and also writes it to the output metadata.
        public var sampleRange: MediaConvertClientTypes.InputSampleRange?

        public init(
            alphaBehavior: MediaConvertClientTypes.AlphaBehavior? = nil,
            colorSpace: MediaConvertClientTypes.ColorSpace? = nil,
            colorSpaceUsage: MediaConvertClientTypes.ColorSpaceUsage? = nil,
            embeddedTimecodeOverride: MediaConvertClientTypes.EmbeddedTimecodeOverride? = nil,
            hdr10Metadata: MediaConvertClientTypes.Hdr10Metadata? = nil,
            maxLuminance: Swift.Int? = nil,
            padVideo: MediaConvertClientTypes.PadVideo? = nil,
            pid: Swift.Int? = nil,
            programNumber: Swift.Int? = nil,
            rotate: MediaConvertClientTypes.InputRotate? = nil,
            sampleRange: MediaConvertClientTypes.InputSampleRange? = nil
        )
        {
            self.alphaBehavior = alphaBehavior
            self.colorSpace = colorSpace
            self.colorSpaceUsage = colorSpaceUsage
            self.embeddedTimecodeOverride = embeddedTimecodeOverride
            self.hdr10Metadata = hdr10Metadata
            self.maxLuminance = maxLuminance
            self.padVideo = padVideo
            self.pid = pid
            self.programNumber = programNumber
            self.rotate = rotate
            self.sampleRange = sampleRange
        }
    }
}

extension MediaConvertClientTypes {

    /// Use inputs to define the source files used in your transcoding job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/specify-input-settings.html. You can use multiple video inputs to do input stitching. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/assembling-multiple-inputs-and-input-clips.html
    public struct Input: Swift.Sendable {
        /// Use to remove noise, blocking, blurriness, or ringing from your input as a pre-filter step before encoding. The Advanced input filter removes more types of compression artifacts and is an improvement when compared to basic Deblock and Denoise filters. To remove video compression artifacts from your input and improve the video quality: Choose Enabled. Additionally, this filter can help increase the video quality of your output relative to its bitrate, since noisy inputs are more complex and require more bits to encode. To help restore loss of detail after applying the filter, you can optionally add texture or sharpening as an additional step. Jobs that use this feature incur pro-tier pricing. To not apply advanced input filtering: Choose Disabled. Note that you can still apply basic filtering with Deblock and Denoise.
        public var advancedInputFilter: MediaConvertClientTypes.AdvancedInputFilter?
        /// Optional settings for Advanced input filter when you set Advanced input filter to Enabled.
        public var advancedInputFilterSettings: MediaConvertClientTypes.AdvancedInputFilterSettings?
        /// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab. Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
        public var audioSelectorGroups: [Swift.String: MediaConvertClientTypes.AudioSelectorGroup]?
        /// Use Audio selectors to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
        public var audioSelectors: [Swift.String: MediaConvertClientTypes.AudioSelector]?
        /// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 100 captions selectors per input.
        public var captionSelectors: [Swift.String: MediaConvertClientTypes.CaptionSelector]?
        /// Use Cropping selection to specify the video area that the service will include in the output video frame. If you specify a value here, it will override any value that you specify in the output setting Cropping selection.
        public var crop: MediaConvertClientTypes.Rectangle?
        /// Enable Deblock to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
        public var deblockFilter: MediaConvertClientTypes.InputDeblockFilter?
        /// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
        public var decryptionSettings: MediaConvertClientTypes.InputDecryptionSettings?
        /// Enable Denoise to filter noise from the input. Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
        public var denoiseFilter: MediaConvertClientTypes.InputDenoiseFilter?
        /// Use this setting only when your video source has Dolby Vision studio mastering metadata that is carried in a separate XML file. Specify the Amazon S3 location for the metadata XML file. MediaConvert uses this file to provide global and frame-level metadata for Dolby Vision preprocessing. When you specify a file here and your input also has interleaved global and frame level metadata, MediaConvert ignores the interleaved metadata and uses only the the metadata from this external XML file. Note that your IAM service role must grant MediaConvert read permissions to this file. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
        public var dolbyVisionMetadataXml: Swift.String?
        /// Specify the source file for your transcoding job. You can use multiple inputs in a single job. The service concatenates these inputs, in the order that you specify them in the job, to create the outputs. If your input format is IMF, specify your input by providing the path to your CPL. For example, "s3://bucket/vf/cpl.xml". If the CPL is in an incomplete IMP, make sure to use Supplemental IMPs to specify any supplemental IMPs that contain assets referenced by the CPL.
        public var fileInput: Swift.String?
        /// Specify whether to apply input filtering to improve the video quality of your input. To apply filtering depending on your input type and quality: Choose Auto. To apply no filtering: Choose Disable. To apply filtering regardless of your input type and quality: Choose Force. When you do, you must also specify a value for Filter strength.
        public var filterEnable: MediaConvertClientTypes.InputFilterEnable?
        /// Specify the strength of the input filter. To apply an automatic amount of filtering based the compression artifacts measured in your input: We recommend that you leave Filter strength blank and set Filter enable to Auto. To manually apply filtering: Enter a value from 1 to 5, where 1 is the least amount of filtering and 5 is the most. The value that you enter applies to the strength of the Deblock or Denoise filters, or to the strength of the Advanced input filter.
        public var filterStrength: Swift.Int?
        /// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input individually. This setting is disabled by default.
        public var imageInserter: MediaConvertClientTypes.ImageInserter?
        /// Contains sets of start and end times that together specify a portion of the input to be used in the outputs. If you provide only a start time, the clip will be the entire input from that point to the end. If you provide only an end time, it will be the entire input up to that point. When you specify more than one input clip, the transcoding service creates the job outputs by stringing the clips together in the order you specify them.
        public var inputClippings: [MediaConvertClientTypes.InputClipping]?
        /// When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn't automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don't specify, the default value is Auto. Auto is the correct setting for all inputs that are not PsF. Don't set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
        public var inputScanType: MediaConvertClientTypes.InputScanType?
        /// Use Selection placement to define the video area in your output frame. The area outside of the rectangle that you specify here is black. If you specify a value here, it will override any value that you specify in the output setting Selection placement. If you specify a value here, this will override any AFD values in your input, even if you set Respond to AFD to Respond. If you specify a value here, this will ignore anything that you specify for the setting Scaling Behavior.
        public var position: MediaConvertClientTypes.Rectangle?
        /// Use Program to select a specific program from within a multi-program transport stream. Note that Quad 4K is not currently supported. Default is the first program within the transport stream. If the program you specify doesn't exist, the transcoding service will use this default.
        public var programNumber: Swift.Int?
        /// Set PSI control for transport stream inputs to specify which data the demux process to scans.
        ///
        /// * Ignore PSI - Scan all PIDs for audio and video.
        ///
        /// * Use PSI - Scan only PSI data.
        public var psiControl: MediaConvertClientTypes.InputPsiControl?
        /// Provide a list of any necessary supplemental IMPs. You need supplemental IMPs if the CPL that you're using for your input is in an incomplete IMP. Specify either the supplemental IMP directories with a trailing slash or the ASSETMAP.xml files. For example ["s3://bucket/ov/", "s3://bucket/vf2/ASSETMAP.xml"]. You don't need to specify the IMP that contains your input CPL, because the service automatically detects it.
        public var supplementalImps: [Swift.String]?
        /// Use this Timecode source setting, located under the input settings, to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded to use the timecodes in your input video. Choose Start at zero to start the first frame at zero. Choose Specified start to start the first frame at the timecode that you specify in the setting Start timecode. If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
        public var timecodeSource: MediaConvertClientTypes.InputTimecodeSource?
        /// Specify the timecode that you want the service to use for this input's initial frame. To use this setting, you must set the Timecode source setting, located under the input settings, to Specified start. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
        public var timecodeStart: Swift.String?
        /// When you include Video generator, MediaConvert creates a video input with black frames. Use this setting if you do not have a video input or if you want to add black video frames before, or after, other inputs. You can specify Video generator, or you can specify an Input file, but you cannot specify both. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/video-generator.html
        public var videoGenerator: MediaConvertClientTypes.InputVideoGenerator?
        /// Contains an array of video overlays.
        public var videoOverlays: [MediaConvertClientTypes.VideoOverlay]?
        /// Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
        public var videoSelector: MediaConvertClientTypes.VideoSelector?

        public init(
            advancedInputFilter: MediaConvertClientTypes.AdvancedInputFilter? = nil,
            advancedInputFilterSettings: MediaConvertClientTypes.AdvancedInputFilterSettings? = nil,
            audioSelectorGroups: [Swift.String: MediaConvertClientTypes.AudioSelectorGroup]? = nil,
            audioSelectors: [Swift.String: MediaConvertClientTypes.AudioSelector]? = nil,
            captionSelectors: [Swift.String: MediaConvertClientTypes.CaptionSelector]? = nil,
            crop: MediaConvertClientTypes.Rectangle? = nil,
            deblockFilter: MediaConvertClientTypes.InputDeblockFilter? = nil,
            decryptionSettings: MediaConvertClientTypes.InputDecryptionSettings? = nil,
            denoiseFilter: MediaConvertClientTypes.InputDenoiseFilter? = nil,
            dolbyVisionMetadataXml: Swift.String? = nil,
            fileInput: Swift.String? = nil,
            filterEnable: MediaConvertClientTypes.InputFilterEnable? = nil,
            filterStrength: Swift.Int? = nil,
            imageInserter: MediaConvertClientTypes.ImageInserter? = nil,
            inputClippings: [MediaConvertClientTypes.InputClipping]? = nil,
            inputScanType: MediaConvertClientTypes.InputScanType? = nil,
            position: MediaConvertClientTypes.Rectangle? = nil,
            programNumber: Swift.Int? = nil,
            psiControl: MediaConvertClientTypes.InputPsiControl? = nil,
            supplementalImps: [Swift.String]? = nil,
            timecodeSource: MediaConvertClientTypes.InputTimecodeSource? = nil,
            timecodeStart: Swift.String? = nil,
            videoGenerator: MediaConvertClientTypes.InputVideoGenerator? = nil,
            videoOverlays: [MediaConvertClientTypes.VideoOverlay]? = nil,
            videoSelector: MediaConvertClientTypes.VideoSelector? = nil
        )
        {
            self.advancedInputFilter = advancedInputFilter
            self.advancedInputFilterSettings = advancedInputFilterSettings
            self.audioSelectorGroups = audioSelectorGroups
            self.audioSelectors = audioSelectors
            self.captionSelectors = captionSelectors
            self.crop = crop
            self.deblockFilter = deblockFilter
            self.decryptionSettings = decryptionSettings
            self.denoiseFilter = denoiseFilter
            self.dolbyVisionMetadataXml = dolbyVisionMetadataXml
            self.fileInput = fileInput
            self.filterEnable = filterEnable
            self.filterStrength = filterStrength
            self.imageInserter = imageInserter
            self.inputClippings = inputClippings
            self.inputScanType = inputScanType
            self.position = position
            self.programNumber = programNumber
            self.psiControl = psiControl
            self.supplementalImps = supplementalImps
            self.timecodeSource = timecodeSource
            self.timecodeStart = timecodeStart
            self.videoGenerator = videoGenerator
            self.videoOverlays = videoOverlays
            self.videoSelector = videoSelector
        }
    }
}

extension MediaConvertClientTypes {

    /// Specified video input in a template.
    public struct InputTemplate: Swift.Sendable {
        /// Use to remove noise, blocking, blurriness, or ringing from your input as a pre-filter step before encoding. The Advanced input filter removes more types of compression artifacts and is an improvement when compared to basic Deblock and Denoise filters. To remove video compression artifacts from your input and improve the video quality: Choose Enabled. Additionally, this filter can help increase the video quality of your output relative to its bitrate, since noisy inputs are more complex and require more bits to encode. To help restore loss of detail after applying the filter, you can optionally add texture or sharpening as an additional step. Jobs that use this feature incur pro-tier pricing. To not apply advanced input filtering: Choose Disabled. Note that you can still apply basic filtering with Deblock and Denoise.
        public var advancedInputFilter: MediaConvertClientTypes.AdvancedInputFilter?
        /// Optional settings for Advanced input filter when you set Advanced input filter to Enabled.
        public var advancedInputFilterSettings: MediaConvertClientTypes.AdvancedInputFilterSettings?
        /// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab. Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
        public var audioSelectorGroups: [Swift.String: MediaConvertClientTypes.AudioSelectorGroup]?
        /// Use Audio selectors to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
        public var audioSelectors: [Swift.String: MediaConvertClientTypes.AudioSelector]?
        /// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 100 captions selectors per input.
        public var captionSelectors: [Swift.String: MediaConvertClientTypes.CaptionSelector]?
        /// Use Cropping selection to specify the video area that the service will include in the output video frame. If you specify a value here, it will override any value that you specify in the output setting Cropping selection.
        public var crop: MediaConvertClientTypes.Rectangle?
        /// Enable Deblock to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
        public var deblockFilter: MediaConvertClientTypes.InputDeblockFilter?
        /// Enable Denoise to filter noise from the input. Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
        public var denoiseFilter: MediaConvertClientTypes.InputDenoiseFilter?
        /// Use this setting only when your video source has Dolby Vision studio mastering metadata that is carried in a separate XML file. Specify the Amazon S3 location for the metadata XML file. MediaConvert uses this file to provide global and frame-level metadata for Dolby Vision preprocessing. When you specify a file here and your input also has interleaved global and frame level metadata, MediaConvert ignores the interleaved metadata and uses only the the metadata from this external XML file. Note that your IAM service role must grant MediaConvert read permissions to this file. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
        public var dolbyVisionMetadataXml: Swift.String?
        /// Specify whether to apply input filtering to improve the video quality of your input. To apply filtering depending on your input type and quality: Choose Auto. To apply no filtering: Choose Disable. To apply filtering regardless of your input type and quality: Choose Force. When you do, you must also specify a value for Filter strength.
        public var filterEnable: MediaConvertClientTypes.InputFilterEnable?
        /// Specify the strength of the input filter. To apply an automatic amount of filtering based the compression artifacts measured in your input: We recommend that you leave Filter strength blank and set Filter enable to Auto. To manually apply filtering: Enter a value from 1 to 5, where 1 is the least amount of filtering and 5 is the most. The value that you enter applies to the strength of the Deblock or Denoise filters, or to the strength of the Advanced input filter.
        public var filterStrength: Swift.Int?
        /// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input individually. This setting is disabled by default.
        public var imageInserter: MediaConvertClientTypes.ImageInserter?
        /// Contains sets of start and end times that together specify a portion of the input to be used in the outputs. If you provide only a start time, the clip will be the entire input from that point to the end. If you provide only an end time, it will be the entire input up to that point. When you specify more than one input clip, the transcoding service creates the job outputs by stringing the clips together in the order you specify them.
        public var inputClippings: [MediaConvertClientTypes.InputClipping]?
        /// When you have a progressive segmented frame (PsF) input, use this setting to flag the input as PsF. MediaConvert doesn't automatically detect PsF. Therefore, flagging your input as PsF results in better preservation of video quality when you do deinterlacing and frame rate conversion. If you don't specify, the default value is Auto. Auto is the correct setting for all inputs that are not PsF. Don't set this value to PsF when your input is interlaced. Doing so creates horizontal interlacing artifacts.
        public var inputScanType: MediaConvertClientTypes.InputScanType?
        /// Use Selection placement to define the video area in your output frame. The area outside of the rectangle that you specify here is black. If you specify a value here, it will override any value that you specify in the output setting Selection placement. If you specify a value here, this will override any AFD values in your input, even if you set Respond to AFD to Respond. If you specify a value here, this will ignore anything that you specify for the setting Scaling Behavior.
        public var position: MediaConvertClientTypes.Rectangle?
        /// Use Program to select a specific program from within a multi-program transport stream. Note that Quad 4K is not currently supported. Default is the first program within the transport stream. If the program you specify doesn't exist, the transcoding service will use this default.
        public var programNumber: Swift.Int?
        /// Set PSI control for transport stream inputs to specify which data the demux process to scans.
        ///
        /// * Ignore PSI - Scan all PIDs for audio and video.
        ///
        /// * Use PSI - Scan only PSI data.
        public var psiControl: MediaConvertClientTypes.InputPsiControl?
        /// Use this Timecode source setting, located under the input settings, to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded to use the timecodes in your input video. Choose Start at zero to start the first frame at zero. Choose Specified start to start the first frame at the timecode that you specify in the setting Start timecode. If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
        public var timecodeSource: MediaConvertClientTypes.InputTimecodeSource?
        /// Specify the timecode that you want the service to use for this input's initial frame. To use this setting, you must set the Timecode source setting, located under the input settings, to Specified start. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
        public var timecodeStart: Swift.String?
        /// Contains an array of video overlays.
        public var videoOverlays: [MediaConvertClientTypes.VideoOverlay]?
        /// Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
        public var videoSelector: MediaConvertClientTypes.VideoSelector?

        public init(
            advancedInputFilter: MediaConvertClientTypes.AdvancedInputFilter? = nil,
            advancedInputFilterSettings: MediaConvertClientTypes.AdvancedInputFilterSettings? = nil,
            audioSelectorGroups: [Swift.String: MediaConvertClientTypes.AudioSelectorGroup]? = nil,
            audioSelectors: [Swift.String: MediaConvertClientTypes.AudioSelector]? = nil,
            captionSelectors: [Swift.String: MediaConvertClientTypes.CaptionSelector]? = nil,
            crop: MediaConvertClientTypes.Rectangle? = nil,
            deblockFilter: MediaConvertClientTypes.InputDeblockFilter? = nil,
            denoiseFilter: MediaConvertClientTypes.InputDenoiseFilter? = nil,
            dolbyVisionMetadataXml: Swift.String? = nil,
            filterEnable: MediaConvertClientTypes.InputFilterEnable? = nil,
            filterStrength: Swift.Int? = nil,
            imageInserter: MediaConvertClientTypes.ImageInserter? = nil,
            inputClippings: [MediaConvertClientTypes.InputClipping]? = nil,
            inputScanType: MediaConvertClientTypes.InputScanType? = nil,
            position: MediaConvertClientTypes.Rectangle? = nil,
            programNumber: Swift.Int? = nil,
            psiControl: MediaConvertClientTypes.InputPsiControl? = nil,
            timecodeSource: MediaConvertClientTypes.InputTimecodeSource? = nil,
            timecodeStart: Swift.String? = nil,
            videoOverlays: [MediaConvertClientTypes.VideoOverlay]? = nil,
            videoSelector: MediaConvertClientTypes.VideoSelector? = nil
        )
        {
            self.advancedInputFilter = advancedInputFilter
            self.advancedInputFilterSettings = advancedInputFilterSettings
            self.audioSelectorGroups = audioSelectorGroups
            self.audioSelectors = audioSelectors
            self.captionSelectors = captionSelectors
            self.crop = crop
            self.deblockFilter = deblockFilter
            self.denoiseFilter = denoiseFilter
            self.dolbyVisionMetadataXml = dolbyVisionMetadataXml
            self.filterEnable = filterEnable
            self.filterStrength = filterStrength
            self.imageInserter = imageInserter
            self.inputClippings = inputClippings
            self.inputScanType = inputScanType
            self.position = position
            self.programNumber = programNumber
            self.psiControl = psiControl
            self.timecodeSource = timecodeSource
            self.timecodeStart = timecodeStart
            self.videoOverlays = videoOverlays
            self.videoSelector = videoSelector
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether the service runs your job with accelerated transcoding. Choose DISABLED if you don't want accelerated transcoding. Choose ENABLED if you want your job to run with accelerated transcoding and to fail if your input files or your job settings aren't compatible with accelerated transcoding. Choose PREFERRED if you want your job to run with accelerated transcoding if the job is compatible with the feature and to run at standard speed if it's not.
    public enum AccelerationMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case preferred
        case sdkUnknown(Swift.String)

        public static var allCases: [AccelerationMode] {
            return [
                .disabled,
                .enabled,
                .preferred
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .preferred: return "PREFERRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    public struct AccelerationSettings: Swift.Sendable {
        /// Specify the conditions when the service will run your job with accelerated transcoding.
        /// This member is required.
        public var mode: MediaConvertClientTypes.AccelerationMode?

        public init(
            mode: MediaConvertClientTypes.AccelerationMode? = nil
        )
        {
            self.mode = mode
        }
    }
}

extension MediaConvertClientTypes {

    /// Describes whether the current job is running with accelerated transcoding. For jobs that have Acceleration (AccelerationMode) set to DISABLED, AccelerationStatus is always NOT_APPLICABLE. For jobs that have Acceleration (AccelerationMode) set to ENABLED or PREFERRED, AccelerationStatus is one of the other states. AccelerationStatus is IN_PROGRESS initially, while the service determines whether the input files and job settings are compatible with accelerated transcoding. If they are, AcclerationStatus is ACCELERATED. If your input files and job settings aren't compatible with accelerated transcoding, the service either fails your job or runs it without accelerated transcoding, depending on how you set Acceleration (AccelerationMode). When the service runs your job without accelerated transcoding, AccelerationStatus is NOT_ACCELERATED.
    public enum AccelerationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accelerated
        case inProgress
        case notAccelerated
        case notApplicable
        case sdkUnknown(Swift.String)

        public static var allCases: [AccelerationStatus] {
            return [
                .accelerated,
                .inProgress,
                .notAccelerated,
                .notApplicable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accelerated: return "ACCELERATED"
            case .inProgress: return "IN_PROGRESS"
            case .notAccelerated: return "NOT_ACCELERATED"
            case .notApplicable: return "NOT_APPLICABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
    public enum BillingTagsSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case job
        case jobTemplate
        case preset
        case queue
        case sdkUnknown(Swift.String)

        public static var allCases: [BillingTagsSource] {
            return [
                .job,
                .jobTemplate,
                .preset,
                .queue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .job: return "JOB"
            case .jobTemplate: return "JOB_TEMPLATE"
            case .preset: return "PRESET"
            case .queue: return "QUEUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// A job's phase can be PROBING, TRANSCODING OR UPLOADING
    public enum JobPhase: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case probing
        case transcoding
        case uploading
        case sdkUnknown(Swift.String)

        public static var allCases: [JobPhase] {
            return [
                .probing,
                .transcoding,
                .uploading
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .probing: return "PROBING"
            case .transcoding: return "TRANSCODING"
            case .uploading: return "UPLOADING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Provides messages from the service about jobs that you have already successfully submitted.
    public struct JobMessages: Swift.Sendable {
        /// List of messages that are informational only and don't indicate a problem with your job.
        public var info: [Swift.String]?
        /// List of messages that warn about conditions that might cause your job not to run or to fail.
        public var warning: [Swift.String]?

        public init(
            info: [Swift.String]? = nil,
            warning: [Swift.String]? = nil
        )
        {
            self.info = info
            self.warning = warning
        }
    }
}

extension MediaConvertClientTypes {

    /// Contains details about the output's video stream
    public struct VideoDetail: Swift.Sendable {
        /// Height in pixels for the output
        public var heightInPx: Swift.Int?
        /// Width in pixels for the output
        public var widthInPx: Swift.Int?

        public init(
            heightInPx: Swift.Int? = nil,
            widthInPx: Swift.Int? = nil
        )
        {
            self.heightInPx = heightInPx
            self.widthInPx = widthInPx
        }
    }
}

extension MediaConvertClientTypes {

    /// Details regarding output
    public struct OutputDetail: Swift.Sendable {
        /// Duration in milliseconds
        public var durationInMs: Swift.Int?
        /// Contains details about the output's video stream
        public var videoDetails: MediaConvertClientTypes.VideoDetail?

        public init(
            durationInMs: Swift.Int? = nil,
            videoDetails: MediaConvertClientTypes.VideoDetail? = nil
        )
        {
            self.durationInMs = durationInMs
            self.videoDetails = videoDetails
        }
    }
}

extension MediaConvertClientTypes {

    /// Contains details about the output groups specified in the job settings.
    public struct OutputGroupDetail: Swift.Sendable {
        /// Details about the output
        public var outputDetails: [MediaConvertClientTypes.OutputDetail]?

        public init(
            outputDetails: [MediaConvertClientTypes.OutputDetail]? = nil
        )
        {
            self.outputDetails = outputDetails
        }
    }
}

extension MediaConvertClientTypes {

    /// Description of the source and destination queues between which the job has moved, along with the timestamp of the move
    public struct QueueTransition: Swift.Sendable {
        /// The queue that the job was on after the transition.
        public var destinationQueue: Swift.String?
        /// The queue that the job was on before the transition.
        public var sourceQueue: Swift.String?
        /// The time, in Unix epoch format, that the job moved from the source queue to the destination queue.
        public var timestamp: Foundation.Date?

        public init(
            destinationQueue: Swift.String? = nil,
            sourceQueue: Swift.String? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.destinationQueue = destinationQueue
            self.sourceQueue = sourceQueue
            self.timestamp = timestamp
        }
    }
}

extension MediaConvertClientTypes {

    /// Use ad avail blanking settings to specify your output content during SCTE-35 triggered ad avails. You can blank your video or overlay it with an image. MediaConvert also removes any audio and embedded captions during the ad avail. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ad-avail-blanking.html.
    public struct AvailBlanking: Swift.Sendable {
        /// Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public var availBlankingImage: Swift.String?

        public init(
            availBlankingImage: Swift.String? = nil
        )
        {
            self.availBlankingImage = availBlankingImage
        }
    }
}

extension MediaConvertClientTypes {

    /// ESAM ManifestConfirmConditionNotification defined by OC-SP-ESAM-API-I03-131025.
    public struct EsamManifestConfirmConditionNotification: Swift.Sendable {
        /// Provide your ESAM ManifestConfirmConditionNotification XML document inside your JSON job settings. Form the XML document as per OC-SP-ESAM-API-I03-131025. The transcoder will use the Manifest Conditioning instructions in the message that you supply.
        public var mccXml: Swift.String?

        public init(
            mccXml: Swift.String? = nil
        )
        {
            self.mccXml = mccXml
        }
    }
}

extension MediaConvertClientTypes {

    /// ESAM SignalProcessingNotification data defined by OC-SP-ESAM-API-I03-131025.
    public struct EsamSignalProcessingNotification: Swift.Sendable {
        /// Provide your ESAM SignalProcessingNotification XML document inside your JSON job settings. Form the XML document as per OC-SP-ESAM-API-I03-131025. The transcoder will use the signal processing instructions in the message that you supply. For your MPEG2-TS file outputs, if you want the service to place SCTE-35 markers at the insertion points you specify in the XML document, you must also enable SCTE-35 ESAM. Note that you can either specify an ESAM XML document or enable SCTE-35 passthrough. You can't do both.
        public var sccXml: Swift.String?

        public init(
            sccXml: Swift.String? = nil
        )
        {
            self.sccXml = sccXml
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
    public struct EsamSettings: Swift.Sendable {
        /// Specifies an ESAM ManifestConfirmConditionNotification XML as per OC-SP-ESAM-API-I03-131025. The transcoder uses the manifest conditioning instructions that you provide in the setting MCC XML.
        public var manifestConfirmConditionNotification: MediaConvertClientTypes.EsamManifestConfirmConditionNotification?
        /// Specifies the stream distance, in milliseconds, between the SCTE 35 messages that the transcoder places and the splice points that they refer to. If the time between the start of the asset and the SCTE-35 message is less than this value, then the transcoder places the SCTE-35 marker at the beginning of the stream.
        public var responseSignalPreroll: Swift.Int?
        /// Specifies an ESAM SignalProcessingNotification XML as per OC-SP-ESAM-API-I03-131025. The transcoder uses the signal processing instructions that you provide in the setting SCC XML.
        public var signalProcessingNotification: MediaConvertClientTypes.EsamSignalProcessingNotification?

        public init(
            manifestConfirmConditionNotification: MediaConvertClientTypes.EsamManifestConfirmConditionNotification? = nil,
            responseSignalPreroll: Swift.Int? = nil,
            signalProcessingNotification: MediaConvertClientTypes.EsamSignalProcessingNotification? = nil
        )
        {
            self.manifestConfirmConditionNotification = manifestConfirmConditionNotification
            self.responseSignalPreroll = responseSignalPreroll
            self.signalProcessingNotification = signalProcessingNotification
        }
    }
}

extension MediaConvertClientTypes {

    /// The action to take on copy and redistribution control XDS packets. If you select PASSTHROUGH, packets will not be changed. If you select STRIP, any packets will be removed in output captions.
    public enum CopyProtectionAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case passthrough
        case strip
        case sdkUnknown(Swift.String)

        public static var allCases: [CopyProtectionAction] {
            return [
                .passthrough,
                .strip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .strip: return "STRIP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The action to take on content advisory XDS packets. If you select PASSTHROUGH, packets will not be changed. If you select STRIP, any packets will be removed in output captions.
    public enum VchipAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case passthrough
        case strip
        case sdkUnknown(Swift.String)

        public static var allCases: [VchipAction] {
            return [
                .passthrough,
                .strip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .strip: return "STRIP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If your source content has EIA-608 Line 21 Data Services, enable this feature to specify what MediaConvert does with the Extended Data Services (XDS) packets. You can choose to pass through XDS packets, or remove them from the output. For more information about XDS, see EIA-608 Line Data Services, section 9.5.1.5 05h Content Advisory.
    public struct ExtendedDataServices: Swift.Sendable {
        /// The action to take on copy and redistribution control XDS packets. If you select PASSTHROUGH, packets will not be changed. If you select STRIP, any packets will be removed in output captions.
        public var copyProtectionAction: MediaConvertClientTypes.CopyProtectionAction?
        /// The action to take on content advisory XDS packets. If you select PASSTHROUGH, packets will not be changed. If you select STRIP, any packets will be removed in output captions.
        public var vchipAction: MediaConvertClientTypes.VchipAction?

        public init(
            copyProtectionAction: MediaConvertClientTypes.CopyProtectionAction? = nil,
            vchipAction: MediaConvertClientTypes.VchipAction? = nil
        )
        {
            self.copyProtectionAction = copyProtectionAction
            self.vchipAction = vchipAction
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
    public struct KantarWatermarkSettings: Swift.Sendable {
        /// Provide an audio channel name from your Kantar audio license.
        public var channelName: Swift.String?
        /// Specify a unique identifier for Kantar to use for this piece of content.
        public var contentReference: Swift.String?
        /// Provide the name of the AWS Secrets Manager secret where your Kantar credentials are stored. Note that your MediaConvert service role must provide access to this secret. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/granting-permissions-for-mediaconvert-to-access-secrets-manager-secret.html. For instructions on creating a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html, in the AWS Secrets Manager User Guide.
        public var credentialsSecretName: Swift.String?
        /// Optional. Specify an offset, in whole seconds, from the start of your output and the beginning of the watermarking. When you don't specify an offset, Kantar defaults to zero.
        public var fileOffset: Swift.Double?
        /// Provide your Kantar license ID number. You should get this number from Kantar.
        public var kantarLicenseId: Swift.Int?
        /// Provide the HTTPS endpoint to the Kantar server. You should get this endpoint from Kantar.
        public var kantarServerUrl: Swift.String?
        /// Optional. Specify the Amazon S3 bucket where you want MediaConvert to store your Kantar watermark XML logs. When you don't specify a bucket, MediaConvert doesn't save these logs. Note that your MediaConvert service role must provide access to this location. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
        public var logDestination: Swift.String?
        /// You can optionally use this field to specify the first timestamp that Kantar embeds during watermarking. Kantar suggests that you be very cautious when using this Kantar feature, and that you use it only on channels that are managed specifically for use with this feature by your Audience Measurement Operator. For more information about this feature, contact Kantar technical support.
        public var metadata3: Swift.String?
        /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
        public var metadata4: Swift.String?
        /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
        public var metadata5: Swift.String?
        /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
        public var metadata6: Swift.String?
        /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
        public var metadata7: Swift.String?
        /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
        public var metadata8: Swift.String?

        public init(
            channelName: Swift.String? = nil,
            contentReference: Swift.String? = nil,
            credentialsSecretName: Swift.String? = nil,
            fileOffset: Swift.Double? = nil,
            kantarLicenseId: Swift.Int? = nil,
            kantarServerUrl: Swift.String? = nil,
            logDestination: Swift.String? = nil,
            metadata3: Swift.String? = nil,
            metadata4: Swift.String? = nil,
            metadata5: Swift.String? = nil,
            metadata6: Swift.String? = nil,
            metadata7: Swift.String? = nil,
            metadata8: Swift.String? = nil
        )
        {
            self.channelName = channelName
            self.contentReference = contentReference
            self.credentialsSecretName = credentialsSecretName
            self.fileOffset = fileOffset
            self.kantarLicenseId = kantarLicenseId
            self.kantarServerUrl = kantarServerUrl
            self.logDestination = logDestination
            self.metadata3 = metadata3
            self.metadata4 = metadata4
            self.metadata5 = metadata5
            self.metadata6 = metadata6
            self.metadata7 = metadata7
            self.metadata8 = metadata8
        }
    }
}

extension MediaConvertClientTypes {

    /// For motion overlays that don't have a built-in frame rate, specify the frame rate of the overlay in frames per second, as a fraction. For example, specify 24 fps as 24/1. The overlay frame rate doesn't need to match the frame rate of the underlying video.
    public struct MotionImageInsertionFramerate: Swift.Sendable {
        /// The bottom of the fraction that expresses your overlay frame rate. For example, if your frame rate is 24 fps, set this value to 1.
        public var framerateDenominator: Swift.Int?
        /// The top of the fraction that expresses your overlay frame rate. For example, if your frame rate is 24 fps, set this value to 24.
        public var framerateNumerator: Swift.Int?

        public init(
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil
        )
        {
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the type of motion graphic asset that you are providing for your overlay. You can choose either a .mov file or a series of .png files.
    public enum MotionImageInsertionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mov
        case png
        case sdkUnknown(Swift.String)

        public static var allCases: [MotionImageInsertionMode] {
            return [
                .mov,
                .png
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mov: return "MOV"
            case .png: return "PNG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the offset between the upper-left corner of the video frame and the top left corner of the overlay.
    public struct MotionImageInsertionOffset: Swift.Sendable {
        /// Set the distance, in pixels, between the overlay and the left edge of the video frame.
        public var imagex: Swift.Int?
        /// Set the distance, in pixels, between the overlay and the top edge of the video frame.
        public var imagey: Swift.Int?

        public init(
            imagex: Swift.Int? = nil,
            imagey: Swift.Int? = nil
        )
        {
            self.imagex = imagex
            self.imagey = imagey
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your motion graphic overlay repeats on a loop or plays only once.
    public enum MotionImagePlayback: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case once
        case `repeat`
        case sdkUnknown(Swift.String)

        public static var allCases: [MotionImagePlayback] {
            return [
                .once,
                .repeat
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .once: return "ONCE"
            case .repeat: return "REPEAT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Overlay motion graphics on top of your video. The motion graphics that you specify here appear on all outputs in all output groups. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/motion-graphic-overlay.html.
    public struct MotionImageInserter: Swift.Sendable {
        /// If your motion graphic asset is a .mov file, keep this setting unspecified. If your motion graphic asset is a series of .png files, specify the frame rate of the overlay in frames per second, as a fraction. For example, specify 24 fps as 24/1. Make sure that the number of images in your series matches the frame rate and your intended overlay duration. For example, if you want a 30-second overlay at 30 fps, you should have 900 .png images. This overlay frame rate doesn't need to match the frame rate of the underlying video.
        public var framerate: MediaConvertClientTypes.MotionImageInsertionFramerate?
        /// Specify the .mov file or series of .png files that you want to overlay on your video. For .png files, provide the file name of the first file in the series. Make sure that the names of the .png files end with sequential numbers that specify the order that they are played in. For example, overlay_000.png, overlay_001.png, overlay_002.png, and so on. The sequence must start at zero, and each image file name must have the same number of digits. Pad your initial file names with enough zeros to complete the sequence. For example, if the first image is overlay_0.png, there can be only 10 images in the sequence, with the last image being overlay_9.png. But if the first image is overlay_00.png, there can be 100 images in the sequence.
        public var input: Swift.String?
        /// Choose the type of motion graphic asset that you are providing for your overlay. You can choose either a .mov file or a series of .png files.
        public var insertionMode: MediaConvertClientTypes.MotionImageInsertionMode?
        /// Use Offset to specify the placement of your motion graphic overlay on the video frame. Specify in pixels, from the upper-left corner of the frame. If you don't specify an offset, the service scales your overlay to the full size of the frame. Otherwise, the service inserts the overlay at its native resolution and scales the size up or down with any video scaling.
        public var offset: MediaConvertClientTypes.MotionImageInsertionOffset?
        /// Specify whether your motion graphic overlay repeats on a loop or plays only once.
        public var playback: MediaConvertClientTypes.MotionImagePlayback?
        /// Specify when the motion overlay begins. Use timecode format (HH:MM:SS:FF or HH:MM:SS;FF). Make sure that the timecode you provide here takes into account how you have set up your timecode configuration under both job settings and input settings. The simplest way to do that is to set both to start at 0. If you need to set up your job to follow timecodes embedded in your source that don't start at zero, make sure that you specify a start time that is after the first embedded timecode. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/setting-up-timecode.html
        public var startTime: Swift.String?

        public init(
            framerate: MediaConvertClientTypes.MotionImageInsertionFramerate? = nil,
            input: Swift.String? = nil,
            insertionMode: MediaConvertClientTypes.MotionImageInsertionMode? = nil,
            offset: MediaConvertClientTypes.MotionImageInsertionOffset? = nil,
            playback: MediaConvertClientTypes.MotionImagePlayback? = nil,
            startTime: Swift.String? = nil
        )
        {
            self.framerate = framerate
            self.input = input
            self.insertionMode = insertionMode
            self.offset = offset
            self.playback = playback
            self.startTime = startTime
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration, MediaConvert enables PCM to ID3 tagging for all outputs in the job.
    public struct NielsenConfiguration: Swift.Sendable {
        /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
        public var breakoutCode: Swift.Int?
        /// Use Distributor ID to specify the distributor ID that is assigned to your organization by Nielsen.
        public var distributorId: Swift.String?

        public init(
            breakoutCode: Swift.Int? = nil,
            distributorId: Swift.String? = nil
        )
        {
            self.breakoutCode = breakoutCode
            self.distributorId = distributorId
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW, you must provide a value for the setting SID. When you choose CBET, you must provide a value for the setting CSID. When you choose NAES 2, NW, and CBET, you must provide values for both of these settings.
    public enum NielsenActiveWatermarkProcessType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbet
        case naes2AndNw
        case naes2AndNwAndCbet
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenActiveWatermarkProcessType] {
            return [
                .cbet,
                .naes2AndNw,
                .naes2AndNwAndCbet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbet: return "CBET"
            case .naes2AndNw: return "NAES2_AND_NW"
            case .naes2AndNwAndCbet: return "NAES2_AND_NW_AND_CBET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked, the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already have non-linear Nielsen watermarks.
    public enum NielsenSourceWatermarkStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clean
        case watermarked
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenSourceWatermarkStatusType] {
            return [
                .clean,
                .watermarked
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clean: return "CLEAN"
            case .watermarked: return "WATERMARKED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs. To create assets that have unique TIC values for each audio track, choose Use unique TICs.
    public enum NielsenUniqueTicPerAudioTrackType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case reserveUniqueTicsPerTrack
        case sameTicsPerTrack
        case sdkUnknown(Swift.String)

        public static var allCases: [NielsenUniqueTicPerAudioTrackType] {
            return [
                .reserveUniqueTicsPerTrack,
                .sameTicsPerTrack
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .reserveUniqueTicsPerTrack: return "RESERVE_UNIQUE_TICS_PER_TRACK"
            case .sameTicsPerTrack: return "SAME_TICS_PER_TRACK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to specifying these values, you also need to set up your cloud TIC server. These settings apply to every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
    public struct NielsenNonLinearWatermarkSettings: Swift.Sendable {
        /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW, you must provide a value for the setting SID. When you choose CBET, you must provide a value for the setting CSID. When you choose NAES 2, NW, and CBET, you must provide values for both of these settings.
        public var activeWatermarkProcess: MediaConvertClientTypes.NielsenActiveWatermarkProcessType?
        /// Optional. Use this setting when you want the service to include an ADI file in the Nielsen metadata .zip file. To provide an ADI file, store it in Amazon S3 and provide a URL to it here. The URL should be in the following format: S3://bucket/path/ADI-file. For more information about the metadata .zip file, see the setting Metadata destination.
        public var adiFilename: Swift.String?
        /// Use the asset ID that you provide to Nielsen to uniquely identify this asset. Required for all Nielsen non-linear watermarking.
        public var assetId: Swift.String?
        /// Use the asset name that you provide to Nielsen for this asset. Required for all Nielsen non-linear watermarking.
        public var assetName: Swift.String?
        /// Use the CSID that Nielsen provides to you. This CBET source ID should be unique to your Nielsen account but common to all of your output assets that have CBET watermarking. Required when you choose a value for the setting Watermark types that includes CBET.
        public var cbetSourceId: Swift.String?
        /// Optional. If this asset uses an episode ID with Nielsen, provide it here.
        public var episodeId: Swift.String?
        /// Specify the Amazon S3 location where you want MediaConvert to save your Nielsen non-linear metadata .zip file. This Amazon S3 bucket must be in the same Region as the one where you do your MediaConvert transcoding. If you want to include an ADI file in this .zip file, use the setting ADI file to specify it. MediaConvert delivers the Nielsen metadata .zip files only to your metadata destination Amazon S3 bucket. It doesn't deliver the .zip files to Nielsen. You are responsible for delivering the metadata .zip files to Nielsen.
        public var metadataDestination: Swift.String?
        /// Use the SID that Nielsen provides to you. This source ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking. This ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking.
        public var sourceId: Swift.Int?
        /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked, the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already have non-linear Nielsen watermarks.
        public var sourceWatermarkStatus: MediaConvertClientTypes.NielsenSourceWatermarkStatusType?
        /// Specify the endpoint for the TIC server that you have deployed and configured in the AWS Cloud. Required for all Nielsen non-linear watermarking. MediaConvert can't connect directly to a TIC server. Instead, you must use API Gateway to provide a RESTful interface between MediaConvert and a TIC server that you deploy in your AWS account. For more information on deploying a TIC server in your AWS account and the required API Gateway, contact Nielsen support.
        public var ticServerUrl: Swift.String?
        /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs. To create assets that have unique TIC values for each audio track, choose Use unique TICs.
        public var uniqueTicPerAudioTrack: MediaConvertClientTypes.NielsenUniqueTicPerAudioTrackType?

        public init(
            activeWatermarkProcess: MediaConvertClientTypes.NielsenActiveWatermarkProcessType? = nil,
            adiFilename: Swift.String? = nil,
            assetId: Swift.String? = nil,
            assetName: Swift.String? = nil,
            cbetSourceId: Swift.String? = nil,
            episodeId: Swift.String? = nil,
            metadataDestination: Swift.String? = nil,
            sourceId: Swift.Int? = nil,
            sourceWatermarkStatus: MediaConvertClientTypes.NielsenSourceWatermarkStatusType? = nil,
            ticServerUrl: Swift.String? = nil,
            uniqueTicPerAudioTrack: MediaConvertClientTypes.NielsenUniqueTicPerAudioTrackType? = nil
        )
        {
            self.activeWatermarkProcess = activeWatermarkProcess
            self.adiFilename = adiFilename
            self.assetId = assetId
            self.assetName = assetName
            self.cbetSourceId = cbetSourceId
            self.episodeId = episodeId
            self.metadataDestination = metadataDestination
            self.sourceId = sourceId
            self.sourceWatermarkStatus = sourceWatermarkStatus
            self.ticServerUrl = ticServerUrl
            self.uniqueTicPerAudioTrack = uniqueTicPerAudioTrack
        }
    }
}

extension MediaConvertClientTypes {

    /// Use automated ABR to have MediaConvert set up the renditions in your ABR package for you automatically, based on characteristics of your input video. This feature optimizes video quality while minimizing the overall size of your ABR package.
    public struct AutomatedAbrSettings: Swift.Sendable {
        /// Specify the maximum average bitrate for MediaConvert to use in your automated ABR stack. If you don't specify a value, MediaConvert uses 8,000,000 (8 mb/s) by default. The average bitrate of your highest-quality rendition will be equal to or below this value, depending on the quality, complexity, and resolution of your content. Note that the instantaneous maximum bitrate may vary above the value that you specify.
        public var maxAbrBitrate: Swift.Int?
        /// Optional. The maximum number of renditions that MediaConvert will create in your automated ABR stack. The number of renditions is determined automatically, based on analysis of each job, but will never exceed this limit. When you set this to Auto in the console, which is equivalent to excluding it from your JSON job specification, MediaConvert defaults to a limit of 15.
        public var maxRenditions: Swift.Int?
        /// Specify the minimum average bitrate for MediaConvert to use in your automated ABR stack. If you don't specify a value, MediaConvert uses 600,000 (600 kb/s) by default. The average bitrate of your lowest-quality rendition will be near this value. Note that the instantaneous minimum bitrate may vary below the value that you specify.
        public var minAbrBitrate: Swift.Int?
        /// Optional. Use Automated ABR rules to specify restrictions for the rendition sizes MediaConvert will create in your ABR stack. You can use these rules if your ABR workflow has specific rendition size requirements, but you still want MediaConvert to optimize for video quality and overall file size.
        public var rules: [MediaConvertClientTypes.AutomatedAbrRule]?

        public init(
            maxAbrBitrate: Swift.Int? = nil,
            maxRenditions: Swift.Int? = nil,
            minAbrBitrate: Swift.Int? = nil,
            rules: [MediaConvertClientTypes.AutomatedAbrRule]? = nil
        )
        {
            self.maxAbrBitrate = maxAbrBitrate
            self.maxRenditions = maxRenditions
            self.minAbrBitrate = minAbrBitrate
            self.rules = rules
        }
    }
}

extension MediaConvertClientTypes {

    /// Use automated encoding to have MediaConvert choose your encoding settings for you, based on characteristics of your input video.
    public struct AutomatedEncodingSettings: Swift.Sendable {
        /// Use automated ABR to have MediaConvert set up the renditions in your ABR package for you automatically, based on characteristics of your input video. This feature optimizes video quality while minimizing the overall size of your ABR package.
        public var abrSettings: MediaConvertClientTypes.AutomatedAbrSettings?

        public init(
            abrSettings: MediaConvertClientTypes.AutomatedAbrSettings? = nil
        )
        {
            self.abrSettings = abrSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled and control caching in your video distribution set up. For example, use the Cache-Control http header.
    public enum CmafClientCache: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafClientCache] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    public enum CmafCodecSpecification: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rfc4281
        case rfc6381
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafCodecSpecification] {
            return [
                .rfc4281,
                .rfc6381
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rfc4281: return "RFC_4281"
            case .rfc6381: return "RFC_6381"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how MediaConvert writes SegmentTimeline in your output DASH manifest. To write a SegmentTimeline in each video Representation: Keep the default value, Basic. To write a common SegmentTimeline in the video AdaptationSet: Choose Compact. Note that MediaConvert will still write a SegmentTimeline in any Representation that does not share a common timeline. To write a video AdaptationSet for each different output framerate, and a common SegmentTimeline in each AdaptationSet: Choose Distinct.
    public enum DashManifestStyle: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case basic
        case compact
        case distinct
        case sdkUnknown(Swift.String)

        public static var allCases: [DashManifestStyle] {
            return [
                .basic,
                .compact,
                .distinct
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .basic: return "BASIC"
            case .compact: return "COMPACT"
            case .distinct: return "DISTINCT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose an Amazon S3 canned ACL for MediaConvert to apply to this output.
    public enum S3ObjectCannedAcl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authenticatedRead
        case bucketOwnerFullControl
        case bucketOwnerRead
        case publicRead
        case sdkUnknown(Swift.String)

        public static var allCases: [S3ObjectCannedAcl] {
            return [
                .authenticatedRead,
                .bucketOwnerFullControl,
                .bucketOwnerRead,
                .publicRead
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "AUTHENTICATED_READ"
            case .bucketOwnerFullControl: return "BUCKET_OWNER_FULL_CONTROL"
            case .bucketOwnerRead: return "BUCKET_OWNER_READ"
            case .publicRead: return "PUBLIC_READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Have MediaConvert automatically apply Amazon S3 access control for the outputs in this output group. When you don't use this setting, S3 automatically applies the default access control list PRIVATE.
    public struct S3DestinationAccessControl: Swift.Sendable {
        /// Choose an Amazon S3 canned ACL for MediaConvert to apply to this output.
        public var cannedAcl: MediaConvertClientTypes.S3ObjectCannedAcl?

        public init(
            cannedAcl: MediaConvertClientTypes.S3ObjectCannedAcl? = nil
        )
        {
            self.cannedAcl = cannedAcl
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how you want your data keys managed. AWS uses data keys to encrypt your content. AWS also encrypts the data keys themselves, using a customer master key (CMK), and then stores the encrypted data keys alongside your encrypted content. Use this setting to specify which AWS service manages the CMK. For simplest set up, choose Amazon S3. If you want your master key to be managed by AWS Key Management Service (KMS), choose AWS KMS. By default, when you choose AWS KMS, KMS uses the AWS managed customer master key (CMK) associated with Amazon S3 to encrypt your data keys. You can optionally choose to specify a different, customer managed CMK. Do so by specifying the Amazon Resource Name (ARN) of the key for the setting KMS ARN.
    public enum S3ServerSideEncryptionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case serverSideEncryptionKms
        case serverSideEncryptionS3
        case sdkUnknown(Swift.String)

        public static var allCases: [S3ServerSideEncryptionType] {
            return [
                .serverSideEncryptionKms,
                .serverSideEncryptionS3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .serverSideEncryptionKms: return "SERVER_SIDE_ENCRYPTION_KMS"
            case .serverSideEncryptionS3: return "SERVER_SIDE_ENCRYPTION_S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for how your job outputs are encrypted as they are uploaded to Amazon S3.
    public struct S3EncryptionSettings: Swift.Sendable {
        /// Specify how you want your data keys managed. AWS uses data keys to encrypt your content. AWS also encrypts the data keys themselves, using a customer master key (CMK), and then stores the encrypted data keys alongside your encrypted content. Use this setting to specify which AWS service manages the CMK. For simplest set up, choose Amazon S3. If you want your master key to be managed by AWS Key Management Service (KMS), choose AWS KMS. By default, when you choose AWS KMS, KMS uses the AWS managed customer master key (CMK) associated with Amazon S3 to encrypt your data keys. You can optionally choose to specify a different, customer managed CMK. Do so by specifying the Amazon Resource Name (ARN) of the key for the setting KMS ARN.
        public var encryptionType: MediaConvertClientTypes.S3ServerSideEncryptionType?
        /// Optionally, specify the encryption context that you want to use alongside your KMS key. AWS KMS uses this encryption context as additional authenticated data (AAD) to support authenticated encryption. This value must be a base64-encoded UTF-8 string holding JSON which represents a string-string map. To use this setting, you must also set Server-side encryption to AWS KMS. For more information about encryption context, see: https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context.
        public var kmsEncryptionContext: Swift.String?
        /// Optionally, specify the customer master key (CMK) that you want to use to encrypt the data key that AWS uses to encrypt your output content. Enter the Amazon Resource Name (ARN) of the CMK. To use this setting, you must also set Server-side encryption to AWS KMS. If you set Server-side encryption to AWS KMS but don't specify a CMK here, AWS uses the AWS managed CMK associated with Amazon S3.
        public var kmsKeyArn: Swift.String?

        public init(
            encryptionType: MediaConvertClientTypes.S3ServerSideEncryptionType? = nil,
            kmsEncryptionContext: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kmsEncryptionContext = kmsEncryptionContext
            self.kmsKeyArn = kmsKeyArn
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the S3 storage class to use for this output. To use your destination's default storage class: Keep the default value, Not set. For more information about S3 storage classes, see https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html
    public enum S3StorageClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deepArchive
        case glacier
        case intelligentTiering
        case onezoneIa
        case reducedRedundancy
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [S3StorageClass] {
            return [
                .deepArchive,
                .glacier,
                .intelligentTiering,
                .onezoneIa,
                .reducedRedundancy,
                .standard,
                .standardIa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings associated with S3 destination
    public struct S3DestinationSettings: Swift.Sendable {
        /// Optional. Have MediaConvert automatically apply Amazon S3 access control for the outputs in this output group. When you don't use this setting, S3 automatically applies the default access control list PRIVATE.
        public var accessControl: MediaConvertClientTypes.S3DestinationAccessControl?
        /// Settings for how your job outputs are encrypted as they are uploaded to Amazon S3.
        public var encryption: MediaConvertClientTypes.S3EncryptionSettings?
        /// Specify the S3 storage class to use for this output. To use your destination's default storage class: Keep the default value, Not set. For more information about S3 storage classes, see https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html
        public var storageClass: MediaConvertClientTypes.S3StorageClass?

        public init(
            accessControl: MediaConvertClientTypes.S3DestinationAccessControl? = nil,
            encryption: MediaConvertClientTypes.S3EncryptionSettings? = nil,
            storageClass: MediaConvertClientTypes.S3StorageClass? = nil
        )
        {
            self.accessControl = accessControl
            self.encryption = encryption
            self.storageClass = storageClass
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings associated with the destination. Will vary based on the type of destination
    public struct DestinationSettings: Swift.Sendable {
        /// Settings associated with S3 destination
        public var s3Settings: MediaConvertClientTypes.S3DestinationSettings?

        public init(
            s3Settings: MediaConvertClientTypes.S3DestinationSettings? = nil
        )
        {
            self.s3Settings = s3Settings
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample or AES_CTR.
    public enum CmafEncryptionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aesCtr
        case sampleAes
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafEncryptionType] {
            return [
                .aesCtr,
                .sampleAes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aesCtr: return "AES_CTR"
            case .sampleAes: return "SAMPLE_AES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
    public enum CmafInitializationVectorInManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafInitializationVectorInManifest] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify which SPEKE version 2.0 audio preset MediaConvert uses to request content keys from your SPEKE server. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/drm-content-speke-v2-presets.html To encrypt to your audio outputs, choose from the following: Audio preset 1, Audio preset 2, or Audio preset 3. To encrypt your audio outputs, using the same content key for both your audio and video outputs: Choose Shared. When you do, you must also set SPEKE v2.0 video preset to Shared. To not encrypt your audio outputs: Choose Unencrypted. When you do, to encrypt your video outputs, you must also specify a SPEKE v2.0 video preset (other than Shared or Unencrypted).
    public enum PresetSpeke20Audio: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case presetAudio1
        case presetAudio2
        case presetAudio3
        case shared
        case unencrypted
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetSpeke20Audio] {
            return [
                .presetAudio1,
                .presetAudio2,
                .presetAudio3,
                .shared,
                .unencrypted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .presetAudio1: return "PRESET_AUDIO_1"
            case .presetAudio2: return "PRESET_AUDIO_2"
            case .presetAudio3: return "PRESET_AUDIO_3"
            case .shared: return "SHARED"
            case .unencrypted: return "UNENCRYPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify which SPEKE version 2.0 video preset MediaConvert uses to request content keys from your SPEKE server. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/drm-content-speke-v2-presets.html To encrypt to your video outputs, choose from the following: Video preset 1, Video preset 2, Video preset 3, Video preset 4, Video preset 5, Video preset 6, Video preset 7, or Video preset 8. To encrypt your video outputs, using the same content key for both your video and audio outputs: Choose Shared. When you do, you must also set SPEKE v2.0 audio preset to Shared. To not encrypt your video outputs: Choose Unencrypted. When you do, to encrypt your audio outputs, you must also specify a SPEKE v2.0 audio preset (other than Shared or Unencrypted).
    public enum PresetSpeke20Video: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case presetVideo1
        case presetVideo2
        case presetVideo3
        case presetVideo4
        case presetVideo5
        case presetVideo6
        case presetVideo7
        case presetVideo8
        case shared
        case unencrypted
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetSpeke20Video] {
            return [
                .presetVideo1,
                .presetVideo2,
                .presetVideo3,
                .presetVideo4,
                .presetVideo5,
                .presetVideo6,
                .presetVideo7,
                .presetVideo8,
                .shared,
                .unencrypted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .presetVideo1: return "PRESET_VIDEO_1"
            case .presetVideo2: return "PRESET_VIDEO_2"
            case .presetVideo3: return "PRESET_VIDEO_3"
            case .presetVideo4: return "PRESET_VIDEO_4"
            case .presetVideo5: return "PRESET_VIDEO_5"
            case .presetVideo6: return "PRESET_VIDEO_6"
            case .presetVideo7: return "PRESET_VIDEO_7"
            case .presetVideo8: return "PRESET_VIDEO_8"
            case .shared: return "SHARED"
            case .unencrypted: return "UNENCRYPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the SPEKE version, either v1.0 or v2.0, that MediaConvert uses when encrypting your output. For more information, see: https://docs.aws.amazon.com/speke/latest/documentation/speke-api-specification.html To use SPEKE v1.0: Leave blank. To use SPEKE v2.0: Specify a SPEKE v2.0 video preset and a SPEKE v2.0 audio preset.
    public struct EncryptionContractConfiguration: Swift.Sendable {
        /// Specify which SPEKE version 2.0 audio preset MediaConvert uses to request content keys from your SPEKE server. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/drm-content-speke-v2-presets.html To encrypt to your audio outputs, choose from the following: Audio preset 1, Audio preset 2, or Audio preset 3. To encrypt your audio outputs, using the same content key for both your audio and video outputs: Choose Shared. When you do, you must also set SPEKE v2.0 video preset to Shared. To not encrypt your audio outputs: Choose Unencrypted. When you do, to encrypt your video outputs, you must also specify a SPEKE v2.0 video preset (other than Shared or Unencrypted).
        public var spekeAudioPreset: MediaConvertClientTypes.PresetSpeke20Audio?
        /// Specify which SPEKE version 2.0 video preset MediaConvert uses to request content keys from your SPEKE server. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/drm-content-speke-v2-presets.html To encrypt to your video outputs, choose from the following: Video preset 1, Video preset 2, Video preset 3, Video preset 4, Video preset 5, Video preset 6, Video preset 7, or Video preset 8. To encrypt your video outputs, using the same content key for both your video and audio outputs: Choose Shared. When you do, you must also set SPEKE v2.0 audio preset to Shared. To not encrypt your video outputs: Choose Unencrypted. When you do, to encrypt your audio outputs, you must also specify a SPEKE v2.0 audio preset (other than Shared or Unencrypted).
        public var spekeVideoPreset: MediaConvertClientTypes.PresetSpeke20Video?

        public init(
            spekeAudioPreset: MediaConvertClientTypes.PresetSpeke20Audio? = nil,
            spekeVideoPreset: MediaConvertClientTypes.PresetSpeke20Video? = nil
        )
        {
            self.spekeAudioPreset = spekeAudioPreset
            self.spekeVideoPreset = spekeVideoPreset
        }
    }
}

extension MediaConvertClientTypes {

    /// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
    public struct SpekeKeyProviderCmaf: Swift.Sendable {
        /// If you want your key provider to encrypt the content keys that it provides to MediaConvert, set up a certificate with a master key using AWS Certificate Manager. Specify the certificate's Amazon Resource Name (ARN) here.
        public var certificateArn: Swift.String?
        /// Specify the DRM system IDs that you want signaled in the DASH manifest that MediaConvert creates as part of this CMAF package. The DASH manifest can currently signal up to three system IDs. For more information, see https://dashif.org/identifiers/content_protection/.
        public var dashSignaledSystemIds: [Swift.String]?
        /// Specify the SPEKE version, either v1.0 or v2.0, that MediaConvert uses when encrypting your output. For more information, see: https://docs.aws.amazon.com/speke/latest/documentation/speke-api-specification.html To use SPEKE v1.0: Leave blank. To use SPEKE v2.0: Specify a SPEKE v2.0 video preset and a SPEKE v2.0 audio preset.
        public var encryptionContractConfiguration: MediaConvertClientTypes.EncryptionContractConfiguration?
        /// Specify the DRM system ID that you want signaled in the HLS manifest that MediaConvert creates as part of this CMAF package. The HLS manifest can currently signal only one system ID. For more information, see https://dashif.org/identifiers/content_protection/.
        public var hlsSignaledSystemIds: [Swift.String]?
        /// Specify the resource ID that your SPEKE-compliant key provider uses to identify this content.
        public var resourceId: Swift.String?
        /// Specify the URL to the key server that your SPEKE-compliant DRM key provider uses to provide keys for encrypting your content.
        public var url: Swift.String?

        public init(
            certificateArn: Swift.String? = nil,
            dashSignaledSystemIds: [Swift.String]? = nil,
            encryptionContractConfiguration: MediaConvertClientTypes.EncryptionContractConfiguration? = nil,
            hlsSignaledSystemIds: [Swift.String]? = nil,
            resourceId: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.dashSignaledSystemIds = dashSignaledSystemIds
            self.encryptionContractConfiguration = encryptionContractConfiguration
            self.hlsSignaledSystemIds = hlsSignaledSystemIds
            self.resourceId = resourceId
            self.url = url
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings to set up encryption with a static key provider.
    public struct StaticKeyProvider: Swift.Sendable {
        /// Relates to DRM implementation. Sets the value of the KEYFORMAT attribute. Must be 'identity' or a reverse DNS string. May be omitted to indicate an implicit value of 'identity'.
        public var keyFormat: Swift.String?
        /// Relates to DRM implementation. Either a single positive integer version value or a slash delimited list of version values (1/2/3).
        public var keyFormatVersions: Swift.String?
        /// Relates to DRM implementation. Use a 32-character hexidecimal string to specify Key Value.
        public var staticKeyValue: Swift.String?
        /// Relates to DRM implementation. The location of the license server used for protecting content.
        public var url: Swift.String?

        public init(
            keyFormat: Swift.String? = nil,
            keyFormatVersions: Swift.String? = nil,
            staticKeyValue: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.keyFormat = keyFormat
            self.keyFormatVersions = keyFormatVersions
            self.staticKeyValue = staticKeyValue
            self.url = url
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    public enum CmafKeyProviderType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case speke
        case staticKey
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafKeyProviderType] {
            return [
                .speke,
                .staticKey
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .speke: return "SPEKE"
            case .staticKey: return "STATIC_KEY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for CMAF encryption
    public struct CmafEncryptionSettings: Swift.Sendable {
        /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
        public var constantInitializationVector: Swift.String?
        /// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample or AES_CTR.
        public var encryptionMethod: MediaConvertClientTypes.CmafEncryptionType?
        /// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
        public var initializationVectorInManifest: MediaConvertClientTypes.CmafInitializationVectorInManifest?
        /// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
        public var spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProviderCmaf?
        /// Use these settings to set up encryption with a static key provider.
        public var staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider?
        /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
        public var type: MediaConvertClientTypes.CmafKeyProviderType?

        public init(
            constantInitializationVector: Swift.String? = nil,
            encryptionMethod: MediaConvertClientTypes.CmafEncryptionType? = nil,
            initializationVectorInManifest: MediaConvertClientTypes.CmafInitializationVectorInManifest? = nil,
            spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProviderCmaf? = nil,
            staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider? = nil,
            type: MediaConvertClientTypes.CmafKeyProviderType? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.encryptionMethod = encryptionMethod
            self.initializationVectorInManifest = initializationVectorInManifest
            self.spekeKeyProvider = spekeKeyProvider
            self.staticKeyProvider = staticKeyProvider
            self.type = type
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. When you enable Write HLS manifest, MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. When you enable Write DASH manifest, MediaConvert adds an entry in the .mpd manifest for each set of images that you generate. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    public enum CmafImageBasedTrickPlay: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case advanced
        case `none`
        case thumbnail
        case thumbnailAndFullframe
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafImageBasedTrickPlay] {
            return [
                .advanced,
                .none,
                .thumbnail,
                .thumbnailAndFullframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .advanced: return "ADVANCED"
            case .none: return "NONE"
            case .thumbnail: return "THUMBNAIL"
            case .thumbnailAndFullframe: return "THUMBNAIL_AND_FULLFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
    public enum CmafIntervalCadence: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followCustom
        case followIframe
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafIntervalCadence] {
            return [
                .followCustom,
                .followIframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followCustom: return "FOLLOW_CUSTOM"
            case .followIframe: return "FOLLOW_IFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    public struct CmafImageBasedTrickPlaySettings: Swift.Sendable {
        /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
        public var intervalCadence: MediaConvertClientTypes.CmafIntervalCadence?
        /// Height of each thumbnail within each tile image, in pixels. Leave blank to maintain aspect ratio with thumbnail width. If following the aspect ratio would lead to a total tile height greater than 4096, then the job will be rejected. Must be divisible by 2.
        public var thumbnailHeight: Swift.Int?
        /// Enter the interval, in seconds, that MediaConvert uses to generate thumbnails. If the interval you enter doesn't align with the output frame rate, MediaConvert automatically rounds the interval to align with the output frame rate. For example, if the output frame rate is 29.97 frames per second and you enter 5, MediaConvert uses a 150 frame interval to generate thumbnails.
        public var thumbnailInterval: Swift.Double?
        /// Width of each thumbnail within each tile image, in pixels. Default is 312. Must be divisible by 8.
        public var thumbnailWidth: Swift.Int?
        /// Number of thumbnails in each column of a tile image. Set a value between 2 and 2048. Must be divisible by 2.
        public var tileHeight: Swift.Int?
        /// Number of thumbnails in each row of a tile image. Set a value between 1 and 512.
        public var tileWidth: Swift.Int?

        public init(
            intervalCadence: MediaConvertClientTypes.CmafIntervalCadence? = nil,
            thumbnailHeight: Swift.Int? = nil,
            thumbnailInterval: Swift.Double? = nil,
            thumbnailWidth: Swift.Int? = nil,
            tileHeight: Swift.Int? = nil,
            tileWidth: Swift.Int? = nil
        )
        {
            self.intervalCadence = intervalCadence
            self.thumbnailHeight = thumbnailHeight
            self.thumbnailInterval = thumbnailInterval
            self.thumbnailWidth = thumbnailWidth
            self.tileHeight = tileHeight
            self.tileWidth = tileWidth
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to GZIP, compresses HLS playlist.
    public enum CmafManifestCompression: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafManifestCompression] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Indicates whether the output manifest should use floating point values for segment duration.
    public enum CmafManifestDurationFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case floatingPoint
        case integer
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafManifestDurationFormat] {
            return [
                .floatingPoint,
                .integer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .floatingPoint: return "FLOATING_POINT"
            case .integer: return "INTEGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how the value for bandwidth is determined for each video Representation in your output MPD manifest. We recommend that you choose a MPD manifest bandwidth type that is compatible with your downstream player configuration. Max: Use the same value that you specify for Max bitrate in the video output, in bits per second. Average: Use the calculated average bitrate of the encoded video output, in bits per second.
    public enum CmafMpdManifestBandwidthType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case max
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafMpdManifestBandwidthType] {
            return [
                .average,
                .max
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .max: return "MAX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your DASH profile is on-demand or main. When you choose Main profile, the service signals urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand, the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control to Single file.
    public enum CmafMpdProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mainProfile
        case onDemandProfile
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafMpdProfile] {
            return [
                .mainProfile,
                .onDemandProfile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mainProfile: return "MAIN_PROFILE"
            case .onDemandProfile: return "ON_DEMAND_PROFILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
    public enum CmafPtsOffsetHandlingForBFrames: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case matchInitialPts
        case zeroBased
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafPtsOffsetHandlingForBFrames] {
            return [
                .matchInitialPts,
                .zeroBased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .matchInitialPts: return "MATCH_INITIAL_PTS"
            case .zeroBased: return "ZERO_BASED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
    public enum CmafSegmentControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segmentedFiles
        case singleFile
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafSegmentControl] {
            return [
                .segmentedFiles,
                .singleFile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segmentedFiles: return "SEGMENTED_FILES"
            case .singleFile: return "SINGLE_FILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how you want MediaConvert to determine the segment length. Choose Exact to have the encoder use the exact length that you specify with the setting Segment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
    public enum CmafSegmentLengthControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exact
        case gopMultiple
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafSegmentLengthControl] {
            return [
                .exact,
                .gopMultiple
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exact: return "EXACT"
            case .gopMultiple: return "GOP_MULTIPLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    public enum CmafStreamInfResolution: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafStreamInfResolution] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (>= 0.5) and rounded down if less than 0.5 (< 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
    public enum CmafTargetDurationCompatibilityMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case legacy
        case specCompliant
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafTargetDurationCompatibilityMode] {
            return [
                .legacy,
                .specCompliant
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .legacy: return "LEGACY"
            case .specCompliant: return "SPEC_COMPLIANT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the video sample composition time offset mode in the output fMP4 TRUN box. For wider player compatibility, set Video composition offsets to Unsigned or leave blank. The earliest presentation time may be greater than zero, and sample composition time offsets will increment using unsigned integers. For strict fMP4 video and audio timing, set Video composition offsets to Signed. The earliest presentation time will be equal to zero, and sample composition time offsets will increment using signed integers.
    public enum CmafVideoCompositionOffsets: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case signed
        case unsigned
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafVideoCompositionOffsets] {
            return [
                .signed,
                .unsigned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .signed: return "SIGNED"
            case .unsigned: return "UNSIGNED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to ENABLED, a DASH MPD manifest will be generated for this output.
    public enum CmafWriteDASHManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafWriteDASHManifest] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to ENABLED, an Apple HLS manifest will be generated for this output.
    public enum CmafWriteHLSManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafWriteHLSManifest] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you enable Precise segment duration in DASH manifests, your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
    public enum CmafWriteSegmentTimelineInRepresentation: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafWriteSegmentTimelineInRepresentation] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to your CMAF output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
    public struct CmafGroupSettings: Swift.Sendable {
        /// By default, the service creates one top-level .m3u8 HLS manifest and one top -level .mpd DASH manifest for each CMAF output group in your job. These default manifests reference every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here. For each additional manifest that you specify, the service creates one HLS manifest and one DASH manifest.
        public var additionalManifests: [MediaConvertClientTypes.CmafAdditionalManifest]?
        /// A partial URI prefix that will be put in the manifest file at the top level BaseURL element. Can be used if streams are delivered from a different URL than the manifest file.
        public var baseUrl: Swift.String?
        /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled and control caching in your video distribution set up. For example, use the Cache-Control http header.
        public var clientCache: MediaConvertClientTypes.CmafClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public var codecSpecification: MediaConvertClientTypes.CmafCodecSpecification?
        /// Specify whether MediaConvert generates I-frame only video segments for DASH trick play, also known as trick mode. When specified, the I-frame only video segments are included within an additional AdaptationSet in your DASH output manifest. To generate I-frame only video segments: Enter a name as a text string, up to 256 character long. This name is appended to the end of this output group's base filename, that you specify as part of your destination URI, and used for the I-frame only video segment files. You may also include format identifiers. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html#using-settings-variables-with-streaming-outputs To not generate I-frame only video segments: Leave blank.
        public var dashIFrameTrickPlayNameModifier: Swift.String?
        /// Specify how MediaConvert writes SegmentTimeline in your output DASH manifest. To write a SegmentTimeline in each video Representation: Keep the default value, Basic. To write a common SegmentTimeline in the video AdaptationSet: Choose Compact. Note that MediaConvert will still write a SegmentTimeline in any Representation that does not share a common timeline. To write a video AdaptationSet for each different output framerate, and a common SegmentTimeline in each AdaptationSet: Choose Distinct.
        public var dashManifestStyle: MediaConvertClientTypes.DashManifestStyle?
        /// Use Destination to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?
        /// DRM settings.
        public var encryption: MediaConvertClientTypes.CmafEncryptionSettings?
        /// Specify the length, in whole seconds, of the mp4 fragments. When you don't specify a value, MediaConvert defaults to 2. Related setting: Use Fragment length control to specify whether the encoder enforces this value strictly.
        public var fragmentLength: Swift.Int?
        /// Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. When you enable Write HLS manifest, MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. When you enable Write DASH manifest, MediaConvert adds an entry in the .mpd manifest for each set of images that you generate. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
        public var imageBasedTrickPlay: MediaConvertClientTypes.CmafImageBasedTrickPlay?
        /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
        public var imageBasedTrickPlaySettings: MediaConvertClientTypes.CmafImageBasedTrickPlaySettings?
        /// When set to GZIP, compresses HLS playlist.
        public var manifestCompression: MediaConvertClientTypes.CmafManifestCompression?
        /// Indicates whether the output manifest should use floating point values for segment duration.
        public var manifestDurationFormat: MediaConvertClientTypes.CmafManifestDurationFormat?
        /// Minimum time of initially buffered media that is needed to ensure smooth playout.
        public var minBufferTime: Swift.Int?
        /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
        public var minFinalSegmentLength: Swift.Double?
        /// Specify how the value for bandwidth is determined for each video Representation in your output MPD manifest. We recommend that you choose a MPD manifest bandwidth type that is compatible with your downstream player configuration. Max: Use the same value that you specify for Max bitrate in the video output, in bits per second. Average: Use the calculated average bitrate of the encoded video output, in bits per second.
        public var mpdManifestBandwidthType: MediaConvertClientTypes.CmafMpdManifestBandwidthType?
        /// Specify whether your DASH profile is on-demand or main. When you choose Main profile, the service signals urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand, the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control to Single file.
        public var mpdProfile: MediaConvertClientTypes.CmafMpdProfile?
        /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
        public var ptsOffsetHandlingForBFrames: MediaConvertClientTypes.CmafPtsOffsetHandlingForBFrames?
        /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
        public var segmentControl: MediaConvertClientTypes.CmafSegmentControl?
        /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control to specify whether the encoder enforces this value strictly. Use Segment control to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
        public var segmentLength: Swift.Int?
        /// Specify how you want MediaConvert to determine the segment length. Choose Exact to have the encoder use the exact length that you specify with the setting Segment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
        public var segmentLengthControl: MediaConvertClientTypes.CmafSegmentLengthControl?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public var streamInfResolution: MediaConvertClientTypes.CmafStreamInfResolution?
        /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (>= 0.5) and rounded down if less than 0.5 (< 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
        public var targetDurationCompatibilityMode: MediaConvertClientTypes.CmafTargetDurationCompatibilityMode?
        /// Specify the video sample composition time offset mode in the output fMP4 TRUN box. For wider player compatibility, set Video composition offsets to Unsigned or leave blank. The earliest presentation time may be greater than zero, and sample composition time offsets will increment using unsigned integers. For strict fMP4 video and audio timing, set Video composition offsets to Signed. The earliest presentation time will be equal to zero, and sample composition time offsets will increment using signed integers.
        public var videoCompositionOffsets: MediaConvertClientTypes.CmafVideoCompositionOffsets?
        /// When set to ENABLED, a DASH MPD manifest will be generated for this output.
        public var writeDashManifest: MediaConvertClientTypes.CmafWriteDASHManifest?
        /// When set to ENABLED, an Apple HLS manifest will be generated for this output.
        public var writeHlsManifest: MediaConvertClientTypes.CmafWriteHLSManifest?
        /// When you enable Precise segment duration in DASH manifests, your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
        public var writeSegmentTimelineInRepresentation: MediaConvertClientTypes.CmafWriteSegmentTimelineInRepresentation?

        public init(
            additionalManifests: [MediaConvertClientTypes.CmafAdditionalManifest]? = nil,
            baseUrl: Swift.String? = nil,
            clientCache: MediaConvertClientTypes.CmafClientCache? = nil,
            codecSpecification: MediaConvertClientTypes.CmafCodecSpecification? = nil,
            dashIFrameTrickPlayNameModifier: Swift.String? = nil,
            dashManifestStyle: MediaConvertClientTypes.DashManifestStyle? = nil,
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil,
            encryption: MediaConvertClientTypes.CmafEncryptionSettings? = nil,
            fragmentLength: Swift.Int? = nil,
            imageBasedTrickPlay: MediaConvertClientTypes.CmafImageBasedTrickPlay? = nil,
            imageBasedTrickPlaySettings: MediaConvertClientTypes.CmafImageBasedTrickPlaySettings? = nil,
            manifestCompression: MediaConvertClientTypes.CmafManifestCompression? = nil,
            manifestDurationFormat: MediaConvertClientTypes.CmafManifestDurationFormat? = nil,
            minBufferTime: Swift.Int? = nil,
            minFinalSegmentLength: Swift.Double? = nil,
            mpdManifestBandwidthType: MediaConvertClientTypes.CmafMpdManifestBandwidthType? = nil,
            mpdProfile: MediaConvertClientTypes.CmafMpdProfile? = nil,
            ptsOffsetHandlingForBFrames: MediaConvertClientTypes.CmafPtsOffsetHandlingForBFrames? = nil,
            segmentControl: MediaConvertClientTypes.CmafSegmentControl? = nil,
            segmentLength: Swift.Int? = nil,
            segmentLengthControl: MediaConvertClientTypes.CmafSegmentLengthControl? = nil,
            streamInfResolution: MediaConvertClientTypes.CmafStreamInfResolution? = nil,
            targetDurationCompatibilityMode: MediaConvertClientTypes.CmafTargetDurationCompatibilityMode? = nil,
            videoCompositionOffsets: MediaConvertClientTypes.CmafVideoCompositionOffsets? = nil,
            writeDashManifest: MediaConvertClientTypes.CmafWriteDASHManifest? = nil,
            writeHlsManifest: MediaConvertClientTypes.CmafWriteHLSManifest? = nil,
            writeSegmentTimelineInRepresentation: MediaConvertClientTypes.CmafWriteSegmentTimelineInRepresentation? = nil
        )
        {
            self.additionalManifests = additionalManifests
            self.baseUrl = baseUrl
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.dashIFrameTrickPlayNameModifier = dashIFrameTrickPlayNameModifier
            self.dashManifestStyle = dashManifestStyle
            self.destination = destination
            self.destinationSettings = destinationSettings
            self.encryption = encryption
            self.fragmentLength = fragmentLength
            self.imageBasedTrickPlay = imageBasedTrickPlay
            self.imageBasedTrickPlaySettings = imageBasedTrickPlaySettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minBufferTime = minBufferTime
            self.minFinalSegmentLength = minFinalSegmentLength
            self.mpdManifestBandwidthType = mpdManifestBandwidthType
            self.mpdProfile = mpdProfile
            self.ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames
            self.segmentControl = segmentControl
            self.segmentLength = segmentLength
            self.segmentLengthControl = segmentLengthControl
            self.streamInfResolution = streamInfResolution
            self.targetDurationCompatibilityMode = targetDurationCompatibilityMode
            self.videoCompositionOffsets = videoCompositionOffsets
            self.writeDashManifest = writeDashManifest
            self.writeHlsManifest = writeHlsManifest
            self.writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration, to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
    public enum DashIsoGroupAudioChannelConfigSchemeIdUri: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dolbyChannelConfiguration
        case mpegChannelConfiguration
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoGroupAudioChannelConfigSchemeIdUri] {
            return [
                .dolbyChannelConfiguration,
                .mpegChannelConfiguration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dolbyChannelConfiguration: return "DOLBY_CHANNEL_CONFIGURATION"
            case .mpegChannelConfiguration: return "MPEG_CHANNEL_CONFIGURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1. If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
    public enum DashIsoPlaybackDeviceCompatibility: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cencV1
        case unencryptedSei
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoPlaybackDeviceCompatibility] {
            return [
                .cencV1,
                .unencryptedSei
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cencV1: return "CENC_V1"
            case .unencryptedSei: return "UNENCRYPTED_SEI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    public struct SpekeKeyProvider: Swift.Sendable {
        /// If you want your key provider to encrypt the content keys that it provides to MediaConvert, set up a certificate with a master key using AWS Certificate Manager. Specify the certificate's Amazon Resource Name (ARN) here.
        public var certificateArn: Swift.String?
        /// Specify the SPEKE version, either v1.0 or v2.0, that MediaConvert uses when encrypting your output. For more information, see: https://docs.aws.amazon.com/speke/latest/documentation/speke-api-specification.html To use SPEKE v1.0: Leave blank. To use SPEKE v2.0: Specify a SPEKE v2.0 video preset and a SPEKE v2.0 audio preset.
        public var encryptionContractConfiguration: MediaConvertClientTypes.EncryptionContractConfiguration?
        /// Specify the resource ID that your SPEKE-compliant key provider uses to identify this content.
        public var resourceId: Swift.String?
        /// Relates to SPEKE implementation. DRM system identifiers. DASH output groups support a max of two system ids. Other group types support one system id. See https://dashif.org/identifiers/content_protection/ for more details.
        public var systemIds: [Swift.String]?
        /// Specify the URL to the key server that your SPEKE-compliant DRM key provider uses to provide keys for encrypting your content.
        public var url: Swift.String?

        public init(
            certificateArn: Swift.String? = nil,
            encryptionContractConfiguration: MediaConvertClientTypes.EncryptionContractConfiguration? = nil,
            resourceId: Swift.String? = nil,
            systemIds: [Swift.String]? = nil,
            url: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.encryptionContractConfiguration = encryptionContractConfiguration
            self.resourceId = resourceId
            self.systemIds = systemIds
            self.url = url
        }
    }
}

extension MediaConvertClientTypes {

    /// Specifies DRM settings for DASH outputs.
    public struct DashIsoEncryptionSettings: Swift.Sendable {
        /// This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1. If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
        public var playbackDeviceCompatibility: MediaConvertClientTypes.DashIsoPlaybackDeviceCompatibility?
        /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
        public var spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider?

        public init(
            playbackDeviceCompatibility: MediaConvertClientTypes.DashIsoPlaybackDeviceCompatibility? = nil,
            spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.playbackDeviceCompatibility = playbackDeviceCompatibility
            self.spekeKeyProvider = spekeKeyProvider
        }
    }
}

extension MediaConvertClientTypes {

    /// Supports HbbTV specification as indicated
    public enum DashIsoHbbtvCompliance: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hbbtv15
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoHbbtvCompliance] {
            return [
                .hbbtv15,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hbbtv15: return "HBBTV_1_5"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. MediaConvert adds an entry in the .mpd manifest for each set of images that you generate. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    public enum DashIsoImageBasedTrickPlay: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case advanced
        case `none`
        case thumbnail
        case thumbnailAndFullframe
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoImageBasedTrickPlay] {
            return [
                .advanced,
                .none,
                .thumbnail,
                .thumbnailAndFullframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .advanced: return "ADVANCED"
            case .none: return "NONE"
            case .thumbnail: return "THUMBNAIL"
            case .thumbnailAndFullframe: return "THUMBNAIL_AND_FULLFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
    public enum DashIsoIntervalCadence: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followCustom
        case followIframe
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoIntervalCadence] {
            return [
                .followCustom,
                .followIframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followCustom: return "FOLLOW_CUSTOM"
            case .followIframe: return "FOLLOW_IFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    public struct DashIsoImageBasedTrickPlaySettings: Swift.Sendable {
        /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
        public var intervalCadence: MediaConvertClientTypes.DashIsoIntervalCadence?
        /// Height of each thumbnail within each tile image, in pixels. Leave blank to maintain aspect ratio with thumbnail width. If following the aspect ratio would lead to a total tile height greater than 4096, then the job will be rejected. Must be divisible by 2.
        public var thumbnailHeight: Swift.Int?
        /// Enter the interval, in seconds, that MediaConvert uses to generate thumbnails. If the interval you enter doesn't align with the output frame rate, MediaConvert automatically rounds the interval to align with the output frame rate. For example, if the output frame rate is 29.97 frames per second and you enter 5, MediaConvert uses a 150 frame interval to generate thumbnails.
        public var thumbnailInterval: Swift.Double?
        /// Width of each thumbnail within each tile image, in pixels. Default is 312. Must be divisible by 8.
        public var thumbnailWidth: Swift.Int?
        /// Number of thumbnails in each column of a tile image. Set a value between 2 and 2048. Must be divisible by 2.
        public var tileHeight: Swift.Int?
        /// Number of thumbnails in each row of a tile image. Set a value between 1 and 512.
        public var tileWidth: Swift.Int?

        public init(
            intervalCadence: MediaConvertClientTypes.DashIsoIntervalCadence? = nil,
            thumbnailHeight: Swift.Int? = nil,
            thumbnailInterval: Swift.Double? = nil,
            thumbnailWidth: Swift.Int? = nil,
            tileHeight: Swift.Int? = nil,
            tileWidth: Swift.Int? = nil
        )
        {
            self.intervalCadence = intervalCadence
            self.thumbnailHeight = thumbnailHeight
            self.thumbnailInterval = thumbnailInterval
            self.thumbnailWidth = thumbnailWidth
            self.tileHeight = tileHeight
            self.tileWidth = tileWidth
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how the value for bandwidth is determined for each video Representation in your output MPD manifest. We recommend that you choose a MPD manifest bandwidth type that is compatible with your downstream player configuration. Max: Use the same value that you specify for Max bitrate in the video output, in bits per second. Average: Use the calculated average bitrate of the encoded video output, in bits per second.
    public enum DashIsoMpdManifestBandwidthType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case max
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoMpdManifestBandwidthType] {
            return [
                .average,
                .max
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .max: return "MAX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your DASH profile is on-demand or main. When you choose Main profile, the service signals urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand, the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control to Single file.
    public enum DashIsoMpdProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mainProfile
        case onDemandProfile
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoMpdProfile] {
            return [
                .mainProfile,
                .onDemandProfile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mainProfile: return "MAIN_PROFILE"
            case .onDemandProfile: return "ON_DEMAND_PROFILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
    public enum DashIsoPtsOffsetHandlingForBFrames: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case matchInitialPts
        case zeroBased
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoPtsOffsetHandlingForBFrames] {
            return [
                .matchInitialPts,
                .zeroBased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .matchInitialPts: return "MATCH_INITIAL_PTS"
            case .zeroBased: return "ZERO_BASED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
    public enum DashIsoSegmentControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segmentedFiles
        case singleFile
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoSegmentControl] {
            return [
                .segmentedFiles,
                .singleFile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segmentedFiles: return "SEGMENTED_FILES"
            case .singleFile: return "SINGLE_FILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how you want MediaConvert to determine the segment length. Choose Exact to have the encoder use the exact length that you specify with the setting Segment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
    public enum DashIsoSegmentLengthControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exact
        case gopMultiple
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoSegmentLengthControl] {
            return [
                .exact,
                .gopMultiple
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exact: return "EXACT"
            case .gopMultiple: return "GOP_MULTIPLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the video sample composition time offset mode in the output fMP4 TRUN box. For wider player compatibility, set Video composition offsets to Unsigned or leave blank. The earliest presentation time may be greater than zero, and sample composition time offsets will increment using unsigned integers. For strict fMP4 video and audio timing, set Video composition offsets to Signed. The earliest presentation time will be equal to zero, and sample composition time offsets will increment using signed integers.
    public enum DashIsoVideoCompositionOffsets: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case signed
        case unsigned
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoVideoCompositionOffsets] {
            return [
                .signed,
                .unsigned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .signed: return "SIGNED"
            case .unsigned: return "UNSIGNED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you enable Precise segment duration in manifests, your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
    public enum DashIsoWriteSegmentTimelineInRepresentation: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DashIsoWriteSegmentTimelineInRepresentation] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to your DASH output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
    public struct DashIsoGroupSettings: Swift.Sendable {
        /// By default, the service creates one .mpd DASH manifest for each DASH ISO output group in your job. This default manifest references every output in the output group. To create additional DASH manifests that reference a subset of the outputs in the output group, specify a list of them here.
        public var additionalManifests: [MediaConvertClientTypes.DashAdditionalManifest]?
        /// Use this setting only when your audio codec is a Dolby one (AC3, EAC3, or Atmos) and your downstream workflow requires that your DASH manifest use the Dolby channel configuration tag, rather than the MPEG one. For example, you might need to use this to make dynamic ad insertion work. Specify which audio channel configuration scheme ID URI MediaConvert writes in your DASH manifest. Keep the default value, MPEG channel configuration, to have MediaConvert write this: urn:mpeg:mpegB:cicp:ChannelConfiguration. Choose Dolby channel configuration to have MediaConvert write this instead: tag:dolby.com,2014:dash:audio_channel_configuration:2011.
        public var audioChannelConfigSchemeIdUri: MediaConvertClientTypes.DashIsoGroupAudioChannelConfigSchemeIdUri?
        /// A partial URI prefix that will be put in the manifest (.mpd) file at the top level BaseURL element. Can be used if streams are delivered from a different URL than the manifest file.
        public var baseUrl: Swift.String?
        /// Specify whether MediaConvert generates I-frame only video segments for DASH trick play, also known as trick mode. When specified, the I-frame only video segments are included within an additional AdaptationSet in your DASH output manifest. To generate I-frame only video segments: Enter a name as a text string, up to 256 character long. This name is appended to the end of this output group's base filename, that you specify as part of your destination URI, and used for the I-frame only video segment files. You may also include format identifiers. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html#using-settings-variables-with-streaming-outputs To not generate I-frame only video segments: Leave blank.
        public var dashIFrameTrickPlayNameModifier: Swift.String?
        /// Specify how MediaConvert writes SegmentTimeline in your output DASH manifest. To write a SegmentTimeline in each video Representation: Keep the default value, Basic. To write a common SegmentTimeline in the video AdaptationSet: Choose Compact. Note that MediaConvert will still write a SegmentTimeline in any Representation that does not share a common timeline. To write a video AdaptationSet for each different output framerate, and a common SegmentTimeline in each AdaptationSet: Choose Distinct.
        public var dashManifestStyle: MediaConvertClientTypes.DashManifestStyle?
        /// Use Destination to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?
        /// DRM settings.
        public var encryption: MediaConvertClientTypes.DashIsoEncryptionSettings?
        /// Length of fragments to generate (in seconds). Fragment length must be compatible with GOP size and Framerate. Note that fragments will end on the next keyframe after this number of seconds, so actual fragment length may be longer. When Emit Single File is checked, the fragmentation is internal to a single output file and it does not cause the creation of many output files as in other output types.
        public var fragmentLength: Swift.Int?
        /// Supports HbbTV specification as indicated
        public var hbbtvCompliance: MediaConvertClientTypes.DashIsoHbbtvCompliance?
        /// Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. MediaConvert adds an entry in the .mpd manifest for each set of images that you generate. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
        public var imageBasedTrickPlay: MediaConvertClientTypes.DashIsoImageBasedTrickPlay?
        /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
        public var imageBasedTrickPlaySettings: MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings?
        /// Minimum time of initially buffered media that is needed to ensure smooth playout.
        public var minBufferTime: Swift.Int?
        /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
        public var minFinalSegmentLength: Swift.Double?
        /// Specify how the value for bandwidth is determined for each video Representation in your output MPD manifest. We recommend that you choose a MPD manifest bandwidth type that is compatible with your downstream player configuration. Max: Use the same value that you specify for Max bitrate in the video output, in bits per second. Average: Use the calculated average bitrate of the encoded video output, in bits per second.
        public var mpdManifestBandwidthType: MediaConvertClientTypes.DashIsoMpdManifestBandwidthType?
        /// Specify whether your DASH profile is on-demand or main. When you choose Main profile, the service signals urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand, the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control to Single file.
        public var mpdProfile: MediaConvertClientTypes.DashIsoMpdProfile?
        /// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
        public var ptsOffsetHandlingForBFrames: MediaConvertClientTypes.DashIsoPtsOffsetHandlingForBFrames?
        /// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
        public var segmentControl: MediaConvertClientTypes.DashIsoSegmentControl?
        /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 30. Related settings: Use Segment length control to specify whether the encoder enforces this value strictly. Use Segment control to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
        public var segmentLength: Swift.Int?
        /// Specify how you want MediaConvert to determine the segment length. Choose Exact to have the encoder use the exact length that you specify with the setting Segment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
        public var segmentLengthControl: MediaConvertClientTypes.DashIsoSegmentLengthControl?
        /// Specify the video sample composition time offset mode in the output fMP4 TRUN box. For wider player compatibility, set Video composition offsets to Unsigned or leave blank. The earliest presentation time may be greater than zero, and sample composition time offsets will increment using unsigned integers. For strict fMP4 video and audio timing, set Video composition offsets to Signed. The earliest presentation time will be equal to zero, and sample composition time offsets will increment using signed integers.
        public var videoCompositionOffsets: MediaConvertClientTypes.DashIsoVideoCompositionOffsets?
        /// If you get an HTTP error in the 400 range when you play back your DASH output, enable this setting and run your transcoding job again. When you enable this setting, the service writes precise segment durations in the DASH manifest. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When you don't enable this setting, the service writes approximate segment durations in your DASH manifest.
        public var writeSegmentTimelineInRepresentation: MediaConvertClientTypes.DashIsoWriteSegmentTimelineInRepresentation?

        public init(
            additionalManifests: [MediaConvertClientTypes.DashAdditionalManifest]? = nil,
            audioChannelConfigSchemeIdUri: MediaConvertClientTypes.DashIsoGroupAudioChannelConfigSchemeIdUri? = nil,
            baseUrl: Swift.String? = nil,
            dashIFrameTrickPlayNameModifier: Swift.String? = nil,
            dashManifestStyle: MediaConvertClientTypes.DashManifestStyle? = nil,
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil,
            encryption: MediaConvertClientTypes.DashIsoEncryptionSettings? = nil,
            fragmentLength: Swift.Int? = nil,
            hbbtvCompliance: MediaConvertClientTypes.DashIsoHbbtvCompliance? = nil,
            imageBasedTrickPlay: MediaConvertClientTypes.DashIsoImageBasedTrickPlay? = nil,
            imageBasedTrickPlaySettings: MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings? = nil,
            minBufferTime: Swift.Int? = nil,
            minFinalSegmentLength: Swift.Double? = nil,
            mpdManifestBandwidthType: MediaConvertClientTypes.DashIsoMpdManifestBandwidthType? = nil,
            mpdProfile: MediaConvertClientTypes.DashIsoMpdProfile? = nil,
            ptsOffsetHandlingForBFrames: MediaConvertClientTypes.DashIsoPtsOffsetHandlingForBFrames? = nil,
            segmentControl: MediaConvertClientTypes.DashIsoSegmentControl? = nil,
            segmentLength: Swift.Int? = nil,
            segmentLengthControl: MediaConvertClientTypes.DashIsoSegmentLengthControl? = nil,
            videoCompositionOffsets: MediaConvertClientTypes.DashIsoVideoCompositionOffsets? = nil,
            writeSegmentTimelineInRepresentation: MediaConvertClientTypes.DashIsoWriteSegmentTimelineInRepresentation? = nil
        )
        {
            self.additionalManifests = additionalManifests
            self.audioChannelConfigSchemeIdUri = audioChannelConfigSchemeIdUri
            self.baseUrl = baseUrl
            self.dashIFrameTrickPlayNameModifier = dashIFrameTrickPlayNameModifier
            self.dashManifestStyle = dashManifestStyle
            self.destination = destination
            self.destinationSettings = destinationSettings
            self.encryption = encryption
            self.fragmentLength = fragmentLength
            self.hbbtvCompliance = hbbtvCompliance
            self.imageBasedTrickPlay = imageBasedTrickPlay
            self.imageBasedTrickPlaySettings = imageBasedTrickPlaySettings
            self.minBufferTime = minBufferTime
            self.minFinalSegmentLength = minFinalSegmentLength
            self.mpdManifestBandwidthType = mpdManifestBandwidthType
            self.mpdProfile = mpdProfile
            self.ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFrames
            self.segmentControl = segmentControl
            self.segmentLength = segmentLength
            self.segmentLengthControl = segmentLengthControl
            self.videoCompositionOffsets = videoCompositionOffsets
            self.writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentation
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to your File output group. MediaConvert uses this group of settings to generate a single standalone file, rather than a streaming package.
    public struct FileGroupSettings: Swift.Sendable {
        /// Use Destination to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?

        public init(
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil
        )
        {
            self.destination = destination
            self.destinationSettings = destinationSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include, to output audio-only headers. Choose Exclude to remove the audio-only headers from your audio segments.
    public enum HlsAudioOnlyHeader: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAudioOnlyHeader] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    public enum HlsCaptionLanguageSetting: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case `none`
        case omit
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCaptionLanguageSetting] {
            return [
                .insert,
                .none,
                .omit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case .omit: return "OMIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Set Caption segment length control to Match video to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments to create caption segments that are 300 seconds long.
    public enum HlsCaptionSegmentLengthControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case largeSegments
        case matchVideo
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCaptionSegmentLengthControl] {
            return [
                .largeSegments,
                .matchVideo
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .largeSegments: return "LARGE_SEGMENTS"
            case .matchVideo: return "MATCH_VIDEO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled and control caching in your video distribution set up. For example, use the Cache-Control http header.
    public enum HlsClientCache: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsClientCache] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    public enum HlsCodecSpecification: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rfc4281
        case rfc6381
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsCodecSpecification] {
            return [
                .rfc4281,
                .rfc6381
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rfc4281: return "RFC_4281"
            case .rfc6381: return "RFC_6381"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Indicates whether segments should be placed in subdirectories.
    public enum HlsDirectoryStructure: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case singleDirectory
        case subdirectoryPerStream
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsDirectoryStructure] {
            return [
                .singleDirectory,
                .subdirectoryPerStream
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .singleDirectory: return "SINGLE_DIRECTORY"
            case .subdirectoryPerStream: return "SUBDIRECTORY_PER_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
    public enum HlsEncryptionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case sampleAes
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsEncryptionType] {
            return [
                .aes128,
                .sampleAes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES128"
            case .sampleAes: return "SAMPLE_AES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
    public enum HlsInitializationVectorInManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsInitializationVectorInManifest] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
    public enum HlsOfflineEncrypted: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsOfflineEncrypted] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    public enum HlsKeyProviderType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case speke
        case staticKey
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsKeyProviderType] {
            return [
                .speke,
                .staticKey
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .speke: return "SPEKE"
            case .staticKey: return "STATIC_KEY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for HLS encryption
    public struct HlsEncryptionSettings: Swift.Sendable {
        /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
        public var constantInitializationVector: Swift.String?
        /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
        public var encryptionMethod: MediaConvertClientTypes.HlsEncryptionType?
        /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
        public var initializationVectorInManifest: MediaConvertClientTypes.HlsInitializationVectorInManifest?
        /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
        public var offlineEncrypted: MediaConvertClientTypes.HlsOfflineEncrypted?
        /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
        public var spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider?
        /// Use these settings to set up encryption with a static key provider.
        public var staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider?
        /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
        public var type: MediaConvertClientTypes.HlsKeyProviderType?

        public init(
            constantInitializationVector: Swift.String? = nil,
            encryptionMethod: MediaConvertClientTypes.HlsEncryptionType? = nil,
            initializationVectorInManifest: MediaConvertClientTypes.HlsInitializationVectorInManifest? = nil,
            offlineEncrypted: MediaConvertClientTypes.HlsOfflineEncrypted? = nil,
            spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider? = nil,
            staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider? = nil,
            type: MediaConvertClientTypes.HlsKeyProviderType? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.encryptionMethod = encryptionMethod
            self.initializationVectorInManifest = initializationVectorInManifest
            self.offlineEncrypted = offlineEncrypted
            self.spekeKeyProvider = spekeKeyProvider
            self.staticKeyProvider = staticKeyProvider
            self.type = type
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    public enum HlsImageBasedTrickPlay: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case advanced
        case `none`
        case thumbnail
        case thumbnailAndFullframe
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsImageBasedTrickPlay] {
            return [
                .advanced,
                .none,
                .thumbnail,
                .thumbnailAndFullframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .advanced: return "ADVANCED"
            case .none: return "NONE"
            case .thumbnail: return "THUMBNAIL"
            case .thumbnailAndFullframe: return "THUMBNAIL_AND_FULLFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
    public enum HlsIntervalCadence: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case followCustom
        case followIframe
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIntervalCadence] {
            return [
                .followCustom,
                .followIframe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .followCustom: return "FOLLOW_CUSTOM"
            case .followIframe: return "FOLLOW_IFRAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    public struct HlsImageBasedTrickPlaySettings: Swift.Sendable {
        /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
        public var intervalCadence: MediaConvertClientTypes.HlsIntervalCadence?
        /// Height of each thumbnail within each tile image, in pixels. Leave blank to maintain aspect ratio with thumbnail width. If following the aspect ratio would lead to a total tile height greater than 4096, then the job will be rejected. Must be divisible by 2.
        public var thumbnailHeight: Swift.Int?
        /// Enter the interval, in seconds, that MediaConvert uses to generate thumbnails. If the interval you enter doesn't align with the output frame rate, MediaConvert automatically rounds the interval to align with the output frame rate. For example, if the output frame rate is 29.97 frames per second and you enter 5, MediaConvert uses a 150 frame interval to generate thumbnails.
        public var thumbnailInterval: Swift.Double?
        /// Width of each thumbnail within each tile image, in pixels. Default is 312. Must be divisible by 8.
        public var thumbnailWidth: Swift.Int?
        /// Number of thumbnails in each column of a tile image. Set a value between 2 and 2048. Must be divisible by 2.
        public var tileHeight: Swift.Int?
        /// Number of thumbnails in each row of a tile image. Set a value between 1 and 512.
        public var tileWidth: Swift.Int?

        public init(
            intervalCadence: MediaConvertClientTypes.HlsIntervalCadence? = nil,
            thumbnailHeight: Swift.Int? = nil,
            thumbnailInterval: Swift.Double? = nil,
            thumbnailWidth: Swift.Int? = nil,
            tileHeight: Swift.Int? = nil,
            tileWidth: Swift.Int? = nil
        )
        {
            self.intervalCadence = intervalCadence
            self.thumbnailHeight = thumbnailHeight
            self.thumbnailInterval = thumbnailInterval
            self.thumbnailWidth = thumbnailWidth
            self.tileHeight = tileHeight
            self.tileWidth = tileWidth
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to GZIP, compresses HLS playlist.
    public enum HlsManifestCompression: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsManifestCompression] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Indicates whether the output manifest should use floating point values for segment duration.
    public enum HlsManifestDurationFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case floatingPoint
        case integer
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsManifestDurationFormat] {
            return [
                .floatingPoint,
                .integer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .floatingPoint: return "FLOATING_POINT"
            case .integer: return "INTEGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    public enum HlsOutputSelection: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case manifestsAndSegments
        case segmentsOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsOutputSelection] {
            return [
                .manifestsAndSegments,
                .segmentsOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .manifestsAndSegments: return "MANIFESTS_AND_SEGMENTS"
            case .segmentsOnly: return "SEGMENTS_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    public enum HlsProgramDateTime: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsProgramDateTime] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert generates HLS manifests while your job is running or when your job is complete. To generate HLS manifests while your job is running: Choose Enabled. Use if you want to play back your content as soon as it's available. MediaConvert writes the parent and child manifests after the first three media segments are written to your destination S3 bucket. It then writes new updated manifests after each additional segment is written. The parent manifest includes the latest BANDWIDTH and AVERAGE-BANDWIDTH attributes, and child manifests include the latest available media segment. When your job completes, the final child playlists include an EXT-X-ENDLIST tag. To generate HLS manifests only when your job completes: Choose Disabled.
    public enum HlsProgressiveWriteHlsManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsProgressiveWriteHlsManifest] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    public enum HlsSegmentControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case segmentedFiles
        case singleFile
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsSegmentControl] {
            return [
                .segmentedFiles,
                .singleFile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .segmentedFiles: return "SEGMENTED_FILES"
            case .singleFile: return "SINGLE_FILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how you want MediaConvert to determine the segment length. Choose Exact to have the encoder use the exact length that you specify with the setting Segment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
    public enum HlsSegmentLengthControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exact
        case gopMultiple
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsSegmentLengthControl] {
            return [
                .exact,
                .gopMultiple
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exact: return "EXACT"
            case .gopMultiple: return "GOP_MULTIPLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    public enum HlsStreamInfResolution: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsStreamInfResolution] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (>= 0.5) and rounded down if less than 0.5 (< 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
    public enum HlsTargetDurationCompatibilityMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case legacy
        case specCompliant
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsTargetDurationCompatibilityMode] {
            return [
                .legacy,
                .specCompliant
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .legacy: return "LEGACY"
            case .specCompliant: return "SPEC_COMPLIANT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the type of the ID3 frame to use for ID3 timestamps in your output. To include ID3 timestamps: Specify PRIV or TDRL and set ID3 metadata to Passthrough. To exclude ID3 timestamps: Set ID3 timestamp frame type to None.
    public enum HlsTimedMetadataId3Frame: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case priv
        case tdrl
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsTimedMetadataId3Frame] {
            return [
                .none,
                .priv,
                .tdrl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .priv: return "PRIV"
            case .tdrl: return "TDRL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
    public struct HlsGroupSettings: Swift.Sendable {
        /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
        public var adMarkers: [MediaConvertClientTypes.HlsAdMarkers]?
        /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
        public var additionalManifests: [MediaConvertClientTypes.HlsAdditionalManifest]?
        /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include, to output audio-only headers. Choose Exclude to remove the audio-only headers from your audio segments.
        public var audioOnlyHeader: MediaConvertClientTypes.HlsAudioOnlyHeader?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrl: Swift.String?
        /// Language to be used on Caption outputs
        public var captionLanguageMappings: [MediaConvertClientTypes.HlsCaptionLanguageMapping]?
        /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
        public var captionLanguageSetting: MediaConvertClientTypes.HlsCaptionLanguageSetting?
        /// Set Caption segment length control to Match video to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments to create caption segments that are 300 seconds long.
        public var captionSegmentLengthControl: MediaConvertClientTypes.HlsCaptionSegmentLengthControl?
        /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled and control caching in your video distribution set up. For example, use the Cache-Control http header.
        public var clientCache: MediaConvertClientTypes.HlsClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public var codecSpecification: MediaConvertClientTypes.HlsCodecSpecification?
        /// Use Destination to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?
        /// Indicates whether segments should be placed in subdirectories.
        public var directoryStructure: MediaConvertClientTypes.HlsDirectoryStructure?
        /// DRM settings.
        public var encryption: MediaConvertClientTypes.HlsEncryptionSettings?
        /// Specify whether MediaConvert generates images for trick play. Keep the default value, None, to not generate any images. Choose Thumbnail to generate tiled thumbnails. Choose Thumbnail and full frame to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
        public var imageBasedTrickPlay: MediaConvertClientTypes.HlsImageBasedTrickPlay?
        /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
        public var imageBasedTrickPlaySettings: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings?
        /// When set to GZIP, compresses HLS playlist.
        public var manifestCompression: MediaConvertClientTypes.HlsManifestCompression?
        /// Indicates whether the output manifest should use floating point values for segment duration.
        public var manifestDurationFormat: MediaConvertClientTypes.HlsManifestDurationFormat?
        /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
        public var minFinalSegmentLength: Swift.Double?
        /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
        public var minSegmentLength: Swift.Int?
        /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
        public var outputSelection: MediaConvertClientTypes.HlsOutputSelection?
        /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
        public var programDateTime: MediaConvertClientTypes.HlsProgramDateTime?
        /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
        public var programDateTimePeriod: Swift.Int?
        /// Specify whether MediaConvert generates HLS manifests while your job is running or when your job is complete. To generate HLS manifests while your job is running: Choose Enabled. Use if you want to play back your content as soon as it's available. MediaConvert writes the parent and child manifests after the first three media segments are written to your destination S3 bucket. It then writes new updated manifests after each additional segment is written. The parent manifest includes the latest BANDWIDTH and AVERAGE-BANDWIDTH attributes, and child manifests include the latest available media segment. When your job completes, the final child playlists include an EXT-X-ENDLIST tag. To generate HLS manifests only when your job completes: Choose Disabled.
        public var progressiveWriteHlsManifest: MediaConvertClientTypes.HlsProgressiveWriteHlsManifest?
        /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
        public var segmentControl: MediaConvertClientTypes.HlsSegmentControl?
        /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control to specify whether the encoder enforces this value strictly. Use Segment control to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
        public var segmentLength: Swift.Int?
        /// Specify how you want MediaConvert to determine the segment length. Choose Exact to have the encoder use the exact length that you specify with the setting Segment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
        public var segmentLengthControl: MediaConvertClientTypes.HlsSegmentLengthControl?
        /// Specify the number of segments to write to a subdirectory before starting a new one. You must also set Directory structure to Subdirectory per stream for this setting to have an effect.
        public var segmentsPerSubdirectory: Swift.Int?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public var streamInfResolution: MediaConvertClientTypes.HlsStreamInfResolution?
        /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (>= 0.5) and rounded down if less than 0.5 (< 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
        public var targetDurationCompatibilityMode: MediaConvertClientTypes.HlsTargetDurationCompatibilityMode?
        /// Specify the type of the ID3 frame to use for ID3 timestamps in your output. To include ID3 timestamps: Specify PRIV or TDRL and set ID3 metadata to Passthrough. To exclude ID3 timestamps: Set ID3 timestamp frame type to None.
        public var timedMetadataId3Frame: MediaConvertClientTypes.HlsTimedMetadataId3Frame?
        /// Specify the interval in seconds to write ID3 timestamps in your output. The first timestamp starts at the output timecode and date, and increases incrementally with each ID3 timestamp. To use the default interval of 10 seconds: Leave blank. To include this metadata in your output: Set ID3 timestamp frame type to PRIV or TDRL, and set ID3 metadata to Passthrough.
        public var timedMetadataId3Period: Swift.Int?
        /// Provides an extra millisecond delta offset to fine tune the timestamps.
        public var timestampDeltaMilliseconds: Swift.Int?

        public init(
            adMarkers: [MediaConvertClientTypes.HlsAdMarkers]? = nil,
            additionalManifests: [MediaConvertClientTypes.HlsAdditionalManifest]? = nil,
            audioOnlyHeader: MediaConvertClientTypes.HlsAudioOnlyHeader? = nil,
            baseUrl: Swift.String? = nil,
            captionLanguageMappings: [MediaConvertClientTypes.HlsCaptionLanguageMapping]? = nil,
            captionLanguageSetting: MediaConvertClientTypes.HlsCaptionLanguageSetting? = nil,
            captionSegmentLengthControl: MediaConvertClientTypes.HlsCaptionSegmentLengthControl? = nil,
            clientCache: MediaConvertClientTypes.HlsClientCache? = nil,
            codecSpecification: MediaConvertClientTypes.HlsCodecSpecification? = nil,
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil,
            directoryStructure: MediaConvertClientTypes.HlsDirectoryStructure? = nil,
            encryption: MediaConvertClientTypes.HlsEncryptionSettings? = nil,
            imageBasedTrickPlay: MediaConvertClientTypes.HlsImageBasedTrickPlay? = nil,
            imageBasedTrickPlaySettings: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings? = nil,
            manifestCompression: MediaConvertClientTypes.HlsManifestCompression? = nil,
            manifestDurationFormat: MediaConvertClientTypes.HlsManifestDurationFormat? = nil,
            minFinalSegmentLength: Swift.Double? = nil,
            minSegmentLength: Swift.Int? = nil,
            outputSelection: MediaConvertClientTypes.HlsOutputSelection? = nil,
            programDateTime: MediaConvertClientTypes.HlsProgramDateTime? = nil,
            programDateTimePeriod: Swift.Int? = nil,
            progressiveWriteHlsManifest: MediaConvertClientTypes.HlsProgressiveWriteHlsManifest? = nil,
            segmentControl: MediaConvertClientTypes.HlsSegmentControl? = nil,
            segmentLength: Swift.Int? = nil,
            segmentLengthControl: MediaConvertClientTypes.HlsSegmentLengthControl? = nil,
            segmentsPerSubdirectory: Swift.Int? = nil,
            streamInfResolution: MediaConvertClientTypes.HlsStreamInfResolution? = nil,
            targetDurationCompatibilityMode: MediaConvertClientTypes.HlsTargetDurationCompatibilityMode? = nil,
            timedMetadataId3Frame: MediaConvertClientTypes.HlsTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil,
            timestampDeltaMilliseconds: Swift.Int? = nil
        )
        {
            self.adMarkers = adMarkers
            self.additionalManifests = additionalManifests
            self.audioOnlyHeader = audioOnlyHeader
            self.baseUrl = baseUrl
            self.captionLanguageMappings = captionLanguageMappings
            self.captionLanguageSetting = captionLanguageSetting
            self.captionSegmentLengthControl = captionSegmentLengthControl
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.destination = destination
            self.destinationSettings = destinationSettings
            self.directoryStructure = directoryStructure
            self.encryption = encryption
            self.imageBasedTrickPlay = imageBasedTrickPlay
            self.imageBasedTrickPlaySettings = imageBasedTrickPlaySettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minFinalSegmentLength = minFinalSegmentLength
            self.minSegmentLength = minSegmentLength
            self.outputSelection = outputSelection
            self.programDateTime = programDateTime
            self.programDateTimePeriod = programDateTimePeriod
            self.progressiveWriteHlsManifest = progressiveWriteHlsManifest
            self.segmentControl = segmentControl
            self.segmentLength = segmentLength
            self.segmentLengthControl = segmentLengthControl
            self.segmentsPerSubdirectory = segmentsPerSubdirectory
            self.streamInfResolution = streamInfResolution
            self.targetDurationCompatibilityMode = targetDurationCompatibilityMode
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
            self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the details for each additional Microsoft Smooth Streaming manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
    public struct MsSmoothAdditionalManifest: Swift.Sendable {
        /// Specify a name modifier that the service adds to the name of this manifest to make it different from the file names of the other main manifests in the output group. For example, say that the default main manifest for your Microsoft Smooth group is film-name.ismv. If you enter "-no-premium" for this setting, then the file name the service generates for this top-level manifest is film-name-no-premium.ismv.
        public var manifestNameModifier: Swift.String?
        /// Specify the outputs that you want this additional top-level manifest to reference.
        public var selectedOutputs: [Swift.String]?

        public init(
            manifestNameModifier: Swift.String? = nil,
            selectedOutputs: [Swift.String]? = nil
        )
        {
            self.manifestNameModifier = manifestNameModifier
            self.selectedOutputs = selectedOutputs
        }
    }
}

extension MediaConvertClientTypes {

    /// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
    public enum MsSmoothAudioDeduplication: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case combineDuplicateStreams
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [MsSmoothAudioDeduplication] {
            return [
                .combineDuplicateStreams,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .combineDuplicateStreams: return "COMBINE_DUPLICATE_STREAMS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using DRM, set DRM System to specify the value SpekeKeyProvider.
    public struct MsSmoothEncryptionSettings: Swift.Sendable {
        /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
        public var spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider?

        public init(
            spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.spekeKeyProvider = spekeKeyProvider
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how you want MediaConvert to determine the fragment length. Choose Exact to have the encoder use the exact length that you specify with the setting Fragment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
    public enum MsSmoothFragmentLengthControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exact
        case gopMultiple
        case sdkUnknown(Swift.String)

        public static var allCases: [MsSmoothFragmentLengthControl] {
            return [
                .exact,
                .gopMultiple
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exact: return "EXACT"
            case .gopMultiple: return "GOP_MULTIPLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Manifest encoding to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
    public enum MsSmoothManifestEncoding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case utf16
        case utf8
        case sdkUnknown(Swift.String)

        public static var allCases: [MsSmoothManifestEncoding] {
            return [
                .utf16,
                .utf8
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .utf16: return "UTF16"
            case .utf8: return "UTF8"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
    public struct MsSmoothGroupSettings: Swift.Sendable {
        /// By default, the service creates one .ism Microsoft Smooth Streaming manifest for each Microsoft Smooth Streaming output group in your job. This default manifest references every output in the output group. To create additional manifests that reference a subset of the outputs in the output group, specify a list of them here.
        public var additionalManifests: [MediaConvertClientTypes.MsSmoothAdditionalManifest]?
        /// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
        public var audioDeduplication: MediaConvertClientTypes.MsSmoothAudioDeduplication?
        /// Use Destination to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?
        /// If you are using DRM, set DRM System to specify the value SpekeKeyProvider.
        public var encryption: MediaConvertClientTypes.MsSmoothEncryptionSettings?
        /// Specify how you want MediaConvert to determine the fragment length. Choose Exact to have the encoder use the exact length that you specify with the setting Fragment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
        public var fragmentLength: Swift.Int?
        /// Specify how you want MediaConvert to determine the fragment length. Choose Exact to have the encoder use the exact length that you specify with the setting Fragment length. This might result in extra I-frames. Choose Multiple of GOP to have the encoder round up the segment lengths to match the next GOP boundary.
        public var fragmentLengthControl: MediaConvertClientTypes.MsSmoothFragmentLengthControl?
        /// Use Manifest encoding to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
        public var manifestEncoding: MediaConvertClientTypes.MsSmoothManifestEncoding?

        public init(
            additionalManifests: [MediaConvertClientTypes.MsSmoothAdditionalManifest]? = nil,
            audioDeduplication: MediaConvertClientTypes.MsSmoothAudioDeduplication? = nil,
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil,
            encryption: MediaConvertClientTypes.MsSmoothEncryptionSettings? = nil,
            fragmentLength: Swift.Int? = nil,
            fragmentLengthControl: MediaConvertClientTypes.MsSmoothFragmentLengthControl? = nil,
            manifestEncoding: MediaConvertClientTypes.MsSmoothManifestEncoding? = nil
        )
        {
            self.additionalManifests = additionalManifests
            self.audioDeduplication = audioDeduplication
            self.destination = destination
            self.destinationSettings = destinationSettings
            self.encryption = encryption
            self.fragmentLength = fragmentLength
            self.fragmentLengthControl = fragmentLengthControl
            self.manifestEncoding = manifestEncoding
        }
    }
}

extension MediaConvertClientTypes {

    /// Type of output group (File group, Apple HLS, DASH ISO, Microsoft Smooth Streaming, CMAF)
    public enum OutputGroupType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cmafGroupSettings
        case dashIsoGroupSettings
        case fileGroupSettings
        case hlsGroupSettings
        case msSmoothGroupSettings
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputGroupType] {
            return [
                .cmafGroupSettings,
                .dashIsoGroupSettings,
                .fileGroupSettings,
                .hlsGroupSettings,
                .msSmoothGroupSettings
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cmafGroupSettings: return "CMAF_GROUP_SETTINGS"
            case .dashIsoGroupSettings: return "DASH_ISO_GROUP_SETTINGS"
            case .fileGroupSettings: return "FILE_GROUP_SETTINGS"
            case .hlsGroupSettings: return "HLS_GROUP_SETTINGS"
            case .msSmoothGroupSettings: return "MS_SMOOTH_GROUP_SETTINGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Output Group settings, including type
    public struct OutputGroupSettings: Swift.Sendable {
        /// Settings related to your CMAF output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
        public var cmafGroupSettings: MediaConvertClientTypes.CmafGroupSettings?
        /// Settings related to your DASH output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
        public var dashIsoGroupSettings: MediaConvertClientTypes.DashIsoGroupSettings?
        /// Settings related to your File output group. MediaConvert uses this group of settings to generate a single standalone file, rather than a streaming package.
        public var fileGroupSettings: MediaConvertClientTypes.FileGroupSettings?
        /// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
        public var hlsGroupSettings: MediaConvertClientTypes.HlsGroupSettings?
        /// Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.
        public var msSmoothGroupSettings: MediaConvertClientTypes.MsSmoothGroupSettings?
        /// Type of output group (File group, Apple HLS, DASH ISO, Microsoft Smooth Streaming, CMAF)
        public var type: MediaConvertClientTypes.OutputGroupType?

        public init(
            cmafGroupSettings: MediaConvertClientTypes.CmafGroupSettings? = nil,
            dashIsoGroupSettings: MediaConvertClientTypes.DashIsoGroupSettings? = nil,
            fileGroupSettings: MediaConvertClientTypes.FileGroupSettings? = nil,
            hlsGroupSettings: MediaConvertClientTypes.HlsGroupSettings? = nil,
            msSmoothGroupSettings: MediaConvertClientTypes.MsSmoothGroupSettings? = nil,
            type: MediaConvertClientTypes.OutputGroupType? = nil
        )
        {
            self.cmafGroupSettings = cmafGroupSettings
            self.dashIsoGroupSettings = dashIsoGroupSettings
            self.fileGroupSettings = fileGroupSettings
            self.hlsGroupSettings = hlsGroupSettings
            self.msSmoothGroupSettings = msSmoothGroupSettings
            self.type = type
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public enum CmfcAudioDuration: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultCodecDuration
        case matchVideoDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcAudioDuration] {
            return [
                .defaultCodecDuration,
                .matchVideoDuration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
            case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. Choose Audio-only variant stream (AUDIO_ONLY_VARIANT_STREAM) for any variant that you want to prohibit the client from playing with video. This causes MediaConvert to represent the variant as an EXT-X-STREAM-INF in the HLS manifest. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
    public enum CmfcAudioTrackType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alternateAudioAutoSelect
        case alternateAudioAutoSelectDefault
        case alternateAudioNotAutoSelect
        case audioOnlyVariantStream
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcAudioTrackType] {
            return [
                .alternateAudioAutoSelect,
                .alternateAudioAutoSelectDefault,
                .alternateAudioNotAutoSelect,
                .audioOnlyVariantStream
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
            case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
            case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
            case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    public enum CmfcDescriptiveVideoServiceFlag: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dontFlag
        case flag
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcDescriptiveVideoServiceFlag] {
            return [
                .dontFlag,
                .flag
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dontFlag: return "DONT_FLAG"
            case .flag: return "FLAG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose Include to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    public enum CmfcIFrameOnlyManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcIFrameOnlyManifest] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    public enum CmfcKlvMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcKlvMetadata] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata to Passthrough.
    public enum CmfcManifestMetadataSignaling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcManifestMetadataSignaling] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML.
    public enum CmfcScte35Esam: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcScte35Esam] {
            return [
                .insert,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want those SCTE-35 markers in this output.
    public enum CmfcScte35Source: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcScte35Source] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To include ID3 metadata in this output: Set ID3 metadata to Passthrough. Specify this ID3 metadata in Custom ID3 metadata inserter. MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None or leave blank.
    public enum CmfcTimedMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcTimedMetadata] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata to Passthrough.
    public enum CmfcTimedMetadataBoxVersion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case version0
        case version1
        case sdkUnknown(Swift.String)

        public static var allCases: [CmfcTimedMetadataBoxVersion] {
            return [
                .version0,
                .version1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .version0: return "VERSION_0"
            case .version1: return "VERSION_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings relate to the fragmented MP4 container for the segments in your CMAF outputs.
    public struct CmfcSettings: Swift.Sendable {
        /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
        public var audioDuration: MediaConvertClientTypes.CmfcAudioDuration?
        /// Specify the audio rendition group for this audio rendition. Specify up to one value for each audio output in your output group. This value appears in your HLS parent manifest in the EXT-X-MEDIA tag of TYPE=AUDIO, as the value for the GROUP-ID attribute. For example, if you specify "audio_aac_1" for Audio group ID, it appears in your manifest like this: #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio_aac_1". Related setting: To associate the rendition group that this audio track belongs to with a video rendition, include the same value that you provide here for that video output's setting Audio rendition sets.
        public var audioGroupId: Swift.String?
        /// List the audio rendition groups that you want included with this video rendition. Use a comma-separated list. For example, say you want to include the audio rendition groups that have the audio group IDs "audio_aac_1" and "audio_dolby". Then you would specify this value: "audio_aac_1,audio_dolby". Related setting: The rendition groups that you include in your comma-separated list should all match values that you specify in the setting Audio group ID for audio renditions in the same output group as this video rendition. Default behavior: If you don't specify anything here and for Audio group ID, MediaConvert puts each audio variant in its own audio rendition group and associates it with every video variant. Each value in your list appears in your HLS parent manifest in the EXT-X-STREAM-INF tag as the value for the AUDIO attribute. To continue the previous example, say that the file name for the child manifest for your video rendition is "amazing_video_1.m3u8". Then, in your parent manifest, each value will appear on separate lines, like this: #EXT-X-STREAM-INF:AUDIO="audio_aac_1"... amazing_video_1.m3u8 #EXT-X-STREAM-INF:AUDIO="audio_dolby"... amazing_video_1.m3u8
        public var audioRenditionSets: Swift.String?
        /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. Choose Audio-only variant stream (AUDIO_ONLY_VARIANT_STREAM) for any variant that you want to prohibit the client from playing with video. This causes MediaConvert to represent the variant as an EXT-X-STREAM-INF in the HLS manifest. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
        public var audioTrackType: MediaConvertClientTypes.CmfcAudioTrackType?
        /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
        public var descriptiveVideoServiceFlag: MediaConvertClientTypes.CmfcDescriptiveVideoServiceFlag?
        /// Choose Include to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
        public var iFrameOnlyManifest: MediaConvertClientTypes.CmfcIFrameOnlyManifest?
        /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
        public var klvMetadata: MediaConvertClientTypes.CmfcKlvMetadata?
        /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata to Passthrough.
        public var manifestMetadataSignaling: MediaConvertClientTypes.CmfcManifestMetadataSignaling?
        /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML.
        public var scte35Esam: MediaConvertClientTypes.CmfcScte35Esam?
        /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want those SCTE-35 markers in this output.
        public var scte35Source: MediaConvertClientTypes.CmfcScte35Source?
        /// To include ID3 metadata in this output: Set ID3 metadata to Passthrough. Specify this ID3 metadata in Custom ID3 metadata inserter. MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None or leave blank.
        public var timedMetadata: MediaConvertClientTypes.CmfcTimedMetadata?
        /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata to Passthrough.
        public var timedMetadataBoxVersion: MediaConvertClientTypes.CmfcTimedMetadataBoxVersion?
        /// Specify the event message box (eMSG) scheme ID URI for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata to Passthrough.
        public var timedMetadataSchemeIdUri: Swift.String?
        /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata to Passthrough.
        public var timedMetadataValue: Swift.String?

        public init(
            audioDuration: MediaConvertClientTypes.CmfcAudioDuration? = nil,
            audioGroupId: Swift.String? = nil,
            audioRenditionSets: Swift.String? = nil,
            audioTrackType: MediaConvertClientTypes.CmfcAudioTrackType? = nil,
            descriptiveVideoServiceFlag: MediaConvertClientTypes.CmfcDescriptiveVideoServiceFlag? = nil,
            iFrameOnlyManifest: MediaConvertClientTypes.CmfcIFrameOnlyManifest? = nil,
            klvMetadata: MediaConvertClientTypes.CmfcKlvMetadata? = nil,
            manifestMetadataSignaling: MediaConvertClientTypes.CmfcManifestMetadataSignaling? = nil,
            scte35Esam: MediaConvertClientTypes.CmfcScte35Esam? = nil,
            scte35Source: MediaConvertClientTypes.CmfcScte35Source? = nil,
            timedMetadata: MediaConvertClientTypes.CmfcTimedMetadata? = nil,
            timedMetadataBoxVersion: MediaConvertClientTypes.CmfcTimedMetadataBoxVersion? = nil,
            timedMetadataSchemeIdUri: Swift.String? = nil,
            timedMetadataValue: Swift.String? = nil
        )
        {
            self.audioDuration = audioDuration
            self.audioGroupId = audioGroupId
            self.audioRenditionSets = audioRenditionSets
            self.audioTrackType = audioTrackType
            self.descriptiveVideoServiceFlag = descriptiveVideoServiceFlag
            self.iFrameOnlyManifest = iFrameOnlyManifest
            self.klvMetadata = klvMetadata
            self.manifestMetadataSignaling = manifestMetadataSignaling
            self.scte35Esam = scte35Esam
            self.scte35Source = scte35Source
            self.timedMetadata = timedMetadata
            self.timedMetadataBoxVersion = timedMetadataBoxVersion
            self.timedMetadataSchemeIdUri = timedMetadataSchemeIdUri
            self.timedMetadataValue = timedMetadataValue
        }
    }
}

extension MediaConvertClientTypes {

    /// Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
    public enum ContainerType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cmfc
        case f4v
        case ismv
        case m2ts
        case m3u8
        case mov
        case mp4
        case mpd
        case mxf
        case ogg
        case raw
        case webm
        case y4m
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerType] {
            return [
                .cmfc,
                .f4v,
                .ismv,
                .m2ts,
                .m3u8,
                .mov,
                .mp4,
                .mpd,
                .mxf,
                .ogg,
                .raw,
                .webm,
                .y4m
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cmfc: return "CMFC"
            case .f4v: return "F4V"
            case .ismv: return "ISMV"
            case .m2ts: return "M2TS"
            case .m3u8: return "M3U8"
            case .mov: return "MOV"
            case .mp4: return "MP4"
            case .mpd: return "MPD"
            case .mxf: return "MXF"
            case .ogg: return "OGG"
            case .raw: return "RAW"
            case .webm: return "WEBM"
            case .y4m: return "Y4M"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To place the MOOV atom at the beginning of your output, which is useful for progressive downloading: Leave blank or choose Progressive download. To place the MOOV at the end of your output: Choose Normal.
    public enum F4vMoovPlacement: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case normal
        case progressiveDownload
        case sdkUnknown(Swift.String)

        public static var allCases: [F4vMoovPlacement] {
            return [
                .normal,
                .progressiveDownload
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .normal: return "NORMAL"
            case .progressiveDownload: return "PROGRESSIVE_DOWNLOAD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for F4v container
    public struct F4vSettings: Swift.Sendable {
        /// To place the MOOV atom at the beginning of your output, which is useful for progressive downloading: Leave blank or choose Progressive download. To place the MOOV at the end of your output: Choose Normal.
        public var moovPlacement: MediaConvertClientTypes.F4vMoovPlacement?

        public init(
            moovPlacement: MediaConvertClientTypes.F4vMoovPlacement? = nil
        )
        {
            self.moovPlacement = moovPlacement
        }
    }
}

extension MediaConvertClientTypes {

    /// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
    public enum M2tsAudioBufferModel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case atsc
        case dvb
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioBufferModel] {
            return [
                .atsc,
                .dvb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .atsc: return "ATSC"
            case .dvb: return "DVB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public enum M2tsAudioDuration: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultCodecDuration
        case matchVideoDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsAudioDuration] {
            return [
                .defaultCodecDuration,
                .matchVideoDuration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
            case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
    public enum M2tsBufferModel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiplex
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsBufferModel] {
            return [
                .multiplex,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiplex: return "MULTIPLEX"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value to allow all PTS values.
    public enum M2tsDataPtsControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alignToVideo
        case auto
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsDataPtsControl] {
            return [
                .alignToVideo,
                .auto
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alignToVideo: return "ALIGN_TO_VIDEO"
            case .auto: return "AUTO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings to insert a DVB Network Information Table (NIT) in the transport stream of this output.
    public struct DvbNitSettings: Swift.Sendable {
        /// The numeric value placed in the Network Information Table (NIT).
        public var networkId: Swift.Int?
        /// The network name text placed in the network_name_descriptor inside the Network Information Table. Maximum length is 256 characters.
        public var networkName: Swift.String?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var nitInterval: Swift.Int?

        public init(
            networkId: Swift.Int? = nil,
            networkName: Swift.String? = nil,
            nitInterval: Swift.Int? = nil
        )
        {
            self.networkId = networkId
            self.networkName = networkName
            self.nitInterval = nitInterval
        }
    }
}

extension MediaConvertClientTypes {

    /// Selects method of inserting SDT information into output stream. "Follow input SDT" copies SDT information from input stream to output stream. "Follow input SDT if present" copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT Manually" means user will enter the SDT information. "No SDT" means output stream will not contain SDT information.
    public enum OutputSdt: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sdtFollow
        case sdtFollowIfPresent
        case sdtManual
        case sdtNone
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputSdt] {
            return [
                .sdtFollow,
                .sdtFollowIfPresent,
                .sdtManual,
                .sdtNone
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sdtFollow: return "SDT_FOLLOW"
            case .sdtFollowIfPresent: return "SDT_FOLLOW_IF_PRESENT"
            case .sdtManual: return "SDT_MANUAL"
            case .sdtNone: return "SDT_NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings to insert a DVB Service Description Table (SDT) in the transport stream of this output.
    public struct DvbSdtSettings: Swift.Sendable {
        /// Selects method of inserting SDT information into output stream. "Follow input SDT" copies SDT information from input stream to output stream. "Follow input SDT if present" copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT Manually" means user will enter the SDT information. "No SDT" means output stream will not contain SDT information.
        public var outputSdt: MediaConvertClientTypes.OutputSdt?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var sdtInterval: Swift.Int?
        /// The service name placed in the service_descriptor in the Service Description Table. Maximum length is 256 characters.
        public var serviceName: Swift.String?
        /// The service provider name placed in the service_descriptor in the Service Description Table. Maximum length is 256 characters.
        public var serviceProviderName: Swift.String?

        public init(
            outputSdt: MediaConvertClientTypes.OutputSdt? = nil,
            sdtInterval: Swift.Int? = nil,
            serviceName: Swift.String? = nil,
            serviceProviderName: Swift.String? = nil
        )
        {
            self.outputSdt = outputSdt
            self.sdtInterval = sdtInterval
            self.serviceName = serviceName
            self.serviceProviderName = serviceProviderName
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings to insert a DVB Time and Date Table (TDT) in the transport stream of this output.
    public struct DvbTdtSettings: Swift.Sendable {
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var tdtInterval: Swift.Int?

        public init(
            tdtInterval: Swift.Int? = nil
        )
        {
            self.tdtInterval = tdtInterval
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
    public enum M2tsEbpAudioInterval: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case videoAndFixedIntervals
        case videoInterval
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEbpAudioInterval] {
            return [
                .videoAndFixedIntervals,
                .videoInterval
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .videoAndFixedIntervals: return "VIDEO_AND_FIXED_INTERVALS"
            case .videoInterval: return "VIDEO_INTERVAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
    public enum M2tsEbpPlacement: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case videoAndAudioPids
        case videoPid
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEbpPlacement] {
            return [
                .videoAndAudioPids,
                .videoPid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .videoAndAudioPids: return "VIDEO_AND_AUDIO_PIDS"
            case .videoPid: return "VIDEO_PID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Controls whether to include the ES Rate field in the PES header.
    public enum M2tsEsRateInPes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsEsRateInPes] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force.
    public enum M2tsForceTsVideoEbpOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case force
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsForceTsVideoEbpOrder] {
            return [
                .default,
                .force
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .force: return "FORCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and passes it through to the output transport stream. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    public enum M2tsKlvMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsKlvMetadata] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public enum M2tsNielsenId3: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsNielsenId3] {
            return [
                .insert,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
    public enum M2tsPcrControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configuredPcrPeriod
        case pcrEveryPesPacket
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsPcrControl] {
            return [
                .configuredPcrPeriod,
                .pcrEveryPesPacket
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
            case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether MediaConvert automatically attempts to prevent decoder buffer underflows in your transport stream output. Use if you are seeing decoder buffer underflows in your output and are unable to increase your transport stream's bitrate. For most workflows: We recommend that you keep the default value, Disabled. To prevent decoder buffer underflows in your output, when possible: Choose Enabled. Note that if MediaConvert prevents a decoder buffer underflow in your output, output video quality is reduced and your job will take longer to complete.
    public enum M2tsPreventBufferUnderflow: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsPreventBufferUnderflow] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
    public enum TsPtsOffset: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [TsPtsOffset] {
            return [
                .auto,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
    public enum M2tsRateMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsRateMode] {
            return [
                .cbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for SCTE-35 signals from ESAM. Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML.
    public struct M2tsScte35Esam: Swift.Sendable {
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream generated by ESAM.
        public var scte35EsamPid: Swift.Int?

        public init(
            scte35EsamPid: Swift.Int? = nil
        )
        {
            self.scte35EsamPid = scte35EsamPid
        }
    }
}

extension MediaConvertClientTypes {

    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None. Also provide the ESAM XML as a string in the setting Signal processing notification XML. Also enable ESAM SCTE-35 (include the property scte35Esam).
    public enum M2tsScte35Source: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsScte35Source] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    public enum M2tsSegmentationMarkers: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ebp
        case ebpLegacy
        case `none`
        case psiSegstart
        case raiAdapt
        case raiSegstart
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsSegmentationMarkers] {
            return [
                .ebp,
                .ebpLegacy,
                .none,
                .psiSegstart,
                .raiAdapt,
                .raiSegstart
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ebp: return "EBP"
            case .ebpLegacy: return "EBP_LEGACY"
            case .none: return "NONE"
            case .psiSegstart: return "PSI_SEGSTART"
            case .raiAdapt: return "RAI_ADAPT"
            case .raiSegstart: return "RAI_SEGSTART"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
    public enum M2tsSegmentationStyle: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case maintainCadence
        case resetCadence
        case sdkUnknown(Swift.String)

        public static var allCases: [M2tsSegmentationStyle] {
            return [
                .maintainCadence,
                .resetCadence
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .maintainCadence: return "MAINTAIN_CADENCE"
            case .resetCadence: return "RESET_CADENCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
    public struct M2tsSettings: Swift.Sendable {
        /// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
        public var audioBufferModel: MediaConvertClientTypes.M2tsAudioBufferModel?
        /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
        public var audioDuration: MediaConvertClientTypes.M2tsAudioDuration?
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Specify the packet identifiers (PIDs) for any elementary audio streams you include in this output. Specify multiple PIDs as a JSON array. Default is the range 482-492.
        public var audioPids: [Swift.Int]?
        /// Specify the output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate. Other common values are 3750000, 7500000, and 15000000.
        public var bitrate: Swift.Int?
        /// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
        public var bufferModel: MediaConvertClientTypes.M2tsBufferModel?
        /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value to allow all PTS values.
        public var dataPTSControl: MediaConvertClientTypes.M2tsDataPtsControl?
        /// Use these settings to insert a DVB Network Information Table (NIT) in the transport stream of this output.
        public var dvbNitSettings: MediaConvertClientTypes.DvbNitSettings?
        /// Use these settings to insert a DVB Service Description Table (SDT) in the transport stream of this output.
        public var dvbSdtSettings: MediaConvertClientTypes.DvbSdtSettings?
        /// Specify the packet identifiers (PIDs) for DVB subtitle data included in this output. Specify multiple PIDs as a JSON array. Default is the range 460-479.
        public var dvbSubPids: [Swift.Int]?
        /// Use these settings to insert a DVB Time and Date Table (TDT) in the transport stream of this output.
        public var dvbTdtSettings: MediaConvertClientTypes.DvbTdtSettings?
        /// Specify the packet identifier (PID) for DVB teletext data you include in this output. Default is 499.
        public var dvbTeletextPid: Swift.Int?
        /// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
        public var ebpAudioInterval: MediaConvertClientTypes.M2tsEbpAudioInterval?
        /// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
        public var ebpPlacement: MediaConvertClientTypes.M2tsEbpPlacement?
        /// Controls whether to include the ES Rate field in the PES header.
        public var esRateInPes: MediaConvertClientTypes.M2tsEsRateInPes?
        /// Keep the default value unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force.
        public var forceTsVideoEbpOrder: MediaConvertClientTypes.M2tsForceTsVideoEbpOrder?
        /// The length, in seconds, of each fragment. Only used with EBP markers.
        public var fragmentTime: Swift.Double?
        /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and passes it through to the output transport stream. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
        public var klvMetadata: MediaConvertClientTypes.M2tsKlvMetadata?
        /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
        public var maxPcrInterval: Swift.Int?
        /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
        public var minEbpInterval: Swift.Int?
        /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3: MediaConvertClientTypes.M2tsNielsenId3?
        /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
        public var nullPacketBitrate: Swift.Double?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var patInterval: Swift.Int?
        /// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaConvertClientTypes.M2tsPcrControl?
        /// Specify the packet identifier (PID) for the program clock reference (PCR) in this output. If you do not specify a value, the service will use the value for Video PID.
        public var pcrPid: Swift.Int?
        /// Specify the number of milliseconds between instances of the program map table (PMT) in the output transport stream.
        public var pmtInterval: Swift.Int?
        /// Specify the packet identifier (PID) for the program map table (PMT) itself. Default is 480.
        public var pmtPid: Swift.Int?
        /// Specify whether MediaConvert automatically attempts to prevent decoder buffer underflows in your transport stream output. Use if you are seeing decoder buffer underflows in your output and are unable to increase your transport stream's bitrate. For most workflows: We recommend that you keep the default value, Disabled. To prevent decoder buffer underflows in your output, when possible: Choose Enabled. Note that if MediaConvert prevents a decoder buffer underflow in your output, output video quality is reduced and your job will take longer to complete.
        public var preventBufferUnderflow: MediaConvertClientTypes.M2tsPreventBufferUnderflow?
        /// Specify the packet identifier (PID) of the private metadata stream. Default is 503.
        public var privateMetadataPid: Swift.Int?
        /// Use Program number to specify the program number used in the program map table (PMT) for this output. Default is 1. Program numbers and program map tables are parts of MPEG-2 transport stream containers, used for organizing data.
        public var programNumber: Swift.Int?
        /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
        public var ptsOffset: Swift.Int?
        /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
        public var ptsOffsetMode: MediaConvertClientTypes.TsPtsOffset?
        /// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
        public var rateMode: MediaConvertClientTypes.M2tsRateMode?
        /// Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML.
        public var scte35Esam: MediaConvertClientTypes.M2tsScte35Esam?
        /// Specify the packet identifier (PID) of the SCTE-35 stream in the transport stream.
        public var scte35Pid: Swift.Int?
        /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None. Also provide the ESAM XML as a string in the setting Signal processing notification XML. Also enable ESAM SCTE-35 (include the property scte35Esam).
        public var scte35Source: MediaConvertClientTypes.M2tsScte35Source?
        /// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
        public var segmentationMarkers: MediaConvertClientTypes.M2tsSegmentationMarkers?
        /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
        public var segmentationStyle: MediaConvertClientTypes.M2tsSegmentationStyle?
        /// Specify the length, in seconds, of each segment. Required unless markers is set to none.
        public var segmentationTime: Swift.Double?
        /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
        public var timedMetadataPid: Swift.Int?
        /// Specify the ID for the transport stream itself in the program map table for this output. Transport stream IDs and program map tables are parts of MPEG-2 transport stream containers, used for organizing data.
        public var transportStreamId: Swift.Int?
        /// Specify the packet identifier (PID) of the elementary video stream in the transport stream.
        public var videoPid: Swift.Int?

        public init(
            audioBufferModel: MediaConvertClientTypes.M2tsAudioBufferModel? = nil,
            audioDuration: MediaConvertClientTypes.M2tsAudioDuration? = nil,
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: [Swift.Int]? = nil,
            bitrate: Swift.Int? = nil,
            bufferModel: MediaConvertClientTypes.M2tsBufferModel? = nil,
            dataPTSControl: MediaConvertClientTypes.M2tsDataPtsControl? = nil,
            dvbNitSettings: MediaConvertClientTypes.DvbNitSettings? = nil,
            dvbSdtSettings: MediaConvertClientTypes.DvbSdtSettings? = nil,
            dvbSubPids: [Swift.Int]? = nil,
            dvbTdtSettings: MediaConvertClientTypes.DvbTdtSettings? = nil,
            dvbTeletextPid: Swift.Int? = nil,
            ebpAudioInterval: MediaConvertClientTypes.M2tsEbpAudioInterval? = nil,
            ebpPlacement: MediaConvertClientTypes.M2tsEbpPlacement? = nil,
            esRateInPes: MediaConvertClientTypes.M2tsEsRateInPes? = nil,
            forceTsVideoEbpOrder: MediaConvertClientTypes.M2tsForceTsVideoEbpOrder? = nil,
            fragmentTime: Swift.Double? = nil,
            klvMetadata: MediaConvertClientTypes.M2tsKlvMetadata? = nil,
            maxPcrInterval: Swift.Int? = nil,
            minEbpInterval: Swift.Int? = nil,
            nielsenId3: MediaConvertClientTypes.M2tsNielsenId3? = nil,
            nullPacketBitrate: Swift.Double? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaConvertClientTypes.M2tsPcrControl? = nil,
            pcrPid: Swift.Int? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.Int? = nil,
            preventBufferUnderflow: MediaConvertClientTypes.M2tsPreventBufferUnderflow? = nil,
            privateMetadataPid: Swift.Int? = nil,
            programNumber: Swift.Int? = nil,
            ptsOffset: Swift.Int? = nil,
            ptsOffsetMode: MediaConvertClientTypes.TsPtsOffset? = nil,
            rateMode: MediaConvertClientTypes.M2tsRateMode? = nil,
            scte35Esam: MediaConvertClientTypes.M2tsScte35Esam? = nil,
            scte35Pid: Swift.Int? = nil,
            scte35Source: MediaConvertClientTypes.M2tsScte35Source? = nil,
            segmentationMarkers: MediaConvertClientTypes.M2tsSegmentationMarkers? = nil,
            segmentationStyle: MediaConvertClientTypes.M2tsSegmentationStyle? = nil,
            segmentationTime: Swift.Double? = nil,
            timedMetadataPid: Swift.Int? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.Int? = nil
        )
        {
            self.audioBufferModel = audioBufferModel
            self.audioDuration = audioDuration
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.bitrate = bitrate
            self.bufferModel = bufferModel
            self.dataPTSControl = dataPTSControl
            self.dvbNitSettings = dvbNitSettings
            self.dvbSdtSettings = dvbSdtSettings
            self.dvbSubPids = dvbSubPids
            self.dvbTdtSettings = dvbTdtSettings
            self.dvbTeletextPid = dvbTeletextPid
            self.ebpAudioInterval = ebpAudioInterval
            self.ebpPlacement = ebpPlacement
            self.esRateInPes = esRateInPes
            self.forceTsVideoEbpOrder = forceTsVideoEbpOrder
            self.fragmentTime = fragmentTime
            self.klvMetadata = klvMetadata
            self.maxPcrInterval = maxPcrInterval
            self.minEbpInterval = minEbpInterval
            self.nielsenId3 = nielsenId3
            self.nullPacketBitrate = nullPacketBitrate
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.preventBufferUnderflow = preventBufferUnderflow
            self.privateMetadataPid = privateMetadataPid
            self.programNumber = programNumber
            self.ptsOffset = ptsOffset
            self.ptsOffsetMode = ptsOffsetMode
            self.rateMode = rateMode
            self.scte35Esam = scte35Esam
            self.scte35Pid = scte35Pid
            self.scte35Source = scte35Source
            self.segmentationMarkers = segmentationMarkers
            self.segmentationStyle = segmentationStyle
            self.segmentationTime = segmentationTime
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public enum M3u8AudioDuration: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultCodecDuration
        case matchVideoDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8AudioDuration] {
            return [
                .defaultCodecDuration,
                .matchVideoDuration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
            case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
    public enum M3u8DataPtsControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alignToVideo
        case auto
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8DataPtsControl] {
            return [
                .alignToVideo,
                .auto
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alignToVideo: return "ALIGN_TO_VIDEO"
            case .auto: return "AUTO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    public enum M3u8NielsenId3: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8NielsenId3] {
            return [
                .insert,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    public enum M3u8PcrControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configuredPcrPeriod
        case pcrEveryPesPacket
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8PcrControl] {
            return [
                .configuredPcrPeriod,
                .pcrEveryPesPacket
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configuredPcrPeriod: return "CONFIGURED_PCR_PERIOD"
            case .pcrEveryPesPacket: return "PCR_EVERY_PES_PACKET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
    public enum M3u8Scte35Source: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [M3u8Scte35Source] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
    public enum TimedMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [TimedMetadata] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
    public struct M3u8Settings: Swift.Sendable {
        /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
        public var audioDuration: MediaConvertClientTypes.M3u8AudioDuration?
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
        public var audioPids: [Swift.Int]?
        /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
        public var dataPTSControl: MediaConvertClientTypes.M3u8DataPtsControl?
        /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
        public var maxPcrInterval: Swift.Int?
        /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3: MediaConvertClientTypes.M3u8NielsenId3?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var patInterval: Swift.Int?
        /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaConvertClientTypes.M3u8PcrControl?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
        public var pcrPid: Swift.Int?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var pmtInterval: Swift.Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
        public var pmtPid: Swift.Int?
        /// Packet Identifier (PID) of the private metadata stream in the transport stream.
        public var privateMetadataPid: Swift.Int?
        /// The value of the program number field in the Program Map Table.
        public var programNumber: Swift.Int?
        /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
        public var ptsOffset: Swift.Int?
        /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
        public var ptsOffsetMode: MediaConvertClientTypes.TsPtsOffset?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
        public var scte35Pid: Swift.Int?
        /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
        public var scte35Source: MediaConvertClientTypes.M3u8Scte35Source?
        /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
        public var timedMetadata: MediaConvertClientTypes.TimedMetadata?
        /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
        public var timedMetadataPid: Swift.Int?
        /// The value of the transport stream ID field in the Program Map Table.
        public var transportStreamId: Swift.Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream.
        public var videoPid: Swift.Int?

        public init(
            audioDuration: MediaConvertClientTypes.M3u8AudioDuration? = nil,
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: [Swift.Int]? = nil,
            dataPTSControl: MediaConvertClientTypes.M3u8DataPtsControl? = nil,
            maxPcrInterval: Swift.Int? = nil,
            nielsenId3: MediaConvertClientTypes.M3u8NielsenId3? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaConvertClientTypes.M3u8PcrControl? = nil,
            pcrPid: Swift.Int? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.Int? = nil,
            privateMetadataPid: Swift.Int? = nil,
            programNumber: Swift.Int? = nil,
            ptsOffset: Swift.Int? = nil,
            ptsOffsetMode: MediaConvertClientTypes.TsPtsOffset? = nil,
            scte35Pid: Swift.Int? = nil,
            scte35Source: MediaConvertClientTypes.M3u8Scte35Source? = nil,
            timedMetadata: MediaConvertClientTypes.TimedMetadata? = nil,
            timedMetadataPid: Swift.Int? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.Int? = nil
        )
        {
            self.audioDuration = audioDuration
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.dataPTSControl = dataPTSControl
            self.maxPcrInterval = maxPcrInterval
            self.nielsenId3 = nielsenId3
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.privateMetadataPid = privateMetadataPid
            self.programNumber = programNumber
            self.ptsOffset = ptsOffset
            self.ptsOffsetMode = ptsOffsetMode
            self.scte35Pid = scte35Pid
            self.scte35Source = scte35Source
            self.timedMetadata = timedMetadata
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }
}

extension MediaConvertClientTypes {

    /// When enabled, include 'clap' atom if appropriate for the video output settings.
    public enum MovClapAtom: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [MovClapAtom] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    public enum MovCslgAtom: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [MovCslgAtom] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
    public enum MovMpeg2FourCCControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mpeg
        case xdcam
        case sdkUnknown(Swift.String)

        public static var allCases: [MovMpeg2FourCCControl] {
            return [
                .mpeg,
                .xdcam
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mpeg: return "MPEG"
            case .xdcam: return "XDCAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Unless you need Omneon compatibility: Keep the default value, None. To make this output compatible with Omneon: Choose Omneon. When you do, MediaConvert increases the length of the 'elst' edit list atom. Note that this might cause file rejections when a recipient of the output file doesn't expect this extra padding.
    public enum MovPaddingControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case omneon
        case sdkUnknown(Swift.String)

        public static var allCases: [MovPaddingControl] {
            return [
                .none,
                .omneon
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .omneon: return "OMNEON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Always keep the default value (SELF_CONTAINED) for this setting.
    public enum MovReference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case external
        case selfContained
        case sdkUnknown(Swift.String)

        public static var allCases: [MovReference] {
            return [
                .external,
                .selfContained
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .external: return "EXTERNAL"
            case .selfContained: return "SELF_CONTAINED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings relate to your QuickTime MOV output container.
    public struct MovSettings: Swift.Sendable {
        /// When enabled, include 'clap' atom if appropriate for the video output settings.
        public var clapAtom: MediaConvertClientTypes.MovClapAtom?
        /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
        public var cslgAtom: MediaConvertClientTypes.MovCslgAtom?
        /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
        public var mpeg2FourCCControl: MediaConvertClientTypes.MovMpeg2FourCCControl?
        /// Unless you need Omneon compatibility: Keep the default value, None. To make this output compatible with Omneon: Choose Omneon. When you do, MediaConvert increases the length of the 'elst' edit list atom. Note that this might cause file rejections when a recipient of the output file doesn't expect this extra padding.
        public var paddingControl: MediaConvertClientTypes.MovPaddingControl?
        /// Always keep the default value (SELF_CONTAINED) for this setting.
        public var reference: MediaConvertClientTypes.MovReference?

        public init(
            clapAtom: MediaConvertClientTypes.MovClapAtom? = nil,
            cslgAtom: MediaConvertClientTypes.MovCslgAtom? = nil,
            mpeg2FourCCControl: MediaConvertClientTypes.MovMpeg2FourCCControl? = nil,
            paddingControl: MediaConvertClientTypes.MovPaddingControl? = nil,
            reference: MediaConvertClientTypes.MovReference? = nil
        )
        {
            self.clapAtom = clapAtom
            self.cslgAtom = cslgAtom
            self.mpeg2FourCCControl = mpeg2FourCCControl
            self.paddingControl = paddingControl
            self.reference = reference
        }
    }
}

extension MediaConvertClientTypes {

    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    public enum Mp4CslgAtom: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [Mp4CslgAtom] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Inserts a free-space box immediately after the moov box.
    public enum Mp4FreeSpaceBox: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [Mp4FreeSpaceBox] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To place the MOOV atom at the beginning of your output, which is useful for progressive downloading: Leave blank or choose Progressive download. To place the MOOV at the end of your output: Choose Normal.
    public enum Mp4MoovPlacement: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case normal
        case progressiveDownload
        case sdkUnknown(Swift.String)

        public static var allCases: [Mp4MoovPlacement] {
            return [
                .normal,
                .progressiveDownload
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .normal: return "NORMAL"
            case .progressiveDownload: return "PROGRESSIVE_DOWNLOAD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings relate to your MP4 output container. You can create audio only outputs with this container. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/supported-codecs-containers-audio-only.html#output-codecs-and-containers-supported-for-audio-only.
    public struct Mp4Settings: Swift.Sendable {
        /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
        public var audioDuration: MediaConvertClientTypes.CmfcAudioDuration?
        /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
        public var cslgAtom: MediaConvertClientTypes.Mp4CslgAtom?
        /// Ignore this setting unless compliance to the CTTS box version specification matters in your workflow. Specify a value of 1 to set your CTTS box version to 1 and make your output compliant with the specification. When you specify a value of 1, you must also set CSLG atom to the value INCLUDE. Keep the default value 0 to set your CTTS box version to 0. This can provide backward compatibility for some players and packagers.
        public var cttsVersion: Swift.Int?
        /// Inserts a free-space box immediately after the moov box.
        public var freeSpaceBox: MediaConvertClientTypes.Mp4FreeSpaceBox?
        /// To place the MOOV atom at the beginning of your output, which is useful for progressive downloading: Leave blank or choose Progressive download. To place the MOOV at the end of your output: Choose Normal.
        public var moovPlacement: MediaConvertClientTypes.Mp4MoovPlacement?
        /// Overrides the "Major Brand" field in the output file. Usually not necessary to specify.
        public var mp4MajorBrand: Swift.String?

        public init(
            audioDuration: MediaConvertClientTypes.CmfcAudioDuration? = nil,
            cslgAtom: MediaConvertClientTypes.Mp4CslgAtom? = nil,
            cttsVersion: Swift.Int? = nil,
            freeSpaceBox: MediaConvertClientTypes.Mp4FreeSpaceBox? = nil,
            moovPlacement: MediaConvertClientTypes.Mp4MoovPlacement? = nil,
            mp4MajorBrand: Swift.String? = nil
        )
        {
            self.audioDuration = audioDuration
            self.cslgAtom = cslgAtom
            self.cttsVersion = cttsVersion
            self.freeSpaceBox = freeSpaceBox
            self.moovPlacement = moovPlacement
            self.mp4MajorBrand = mp4MajorBrand
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Choose Include to have MediaConvert mark up your DASH manifest with elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude, to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest:
    public enum MpdAccessibilityCaptionHints: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdAccessibilityCaptionHints] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    public enum MpdAudioDuration: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultCodecDuration
        case matchVideoDuration
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdAudioDuration] {
            return [
                .defaultCodecDuration,
                .matchVideoDuration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultCodecDuration: return "DEFAULT_CODEC_DURATION"
            case .matchVideoDuration: return "MATCH_VIDEO_DURATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions. You specify sidecar captions in a separate output from your audio and video. Choose Raw for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
    public enum MpdCaptionContainerType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fragmentedMp4
        case raw
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdCaptionContainerType] {
            return [
                .fragmentedMp4,
                .raw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fragmentedMp4: return "FRAGMENTED_MP4"
            case .raw: return "RAW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    public enum MpdKlvMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdKlvMetadata] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata to Passthrough.
    public enum MpdManifestMetadataSignaling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdManifestMetadataSignaling] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML.
    public enum MpdScte35Esam: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insert
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdScte35Esam] {
            return [
                .insert,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insert: return "INSERT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want those SCTE-35 markers in this output.
    public enum MpdScte35Source: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdScte35Source] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To include ID3 metadata in this output: Set ID3 metadata to Passthrough. Specify this ID3 metadata in Custom ID3 metadata inserter. MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None or leave blank.
    public enum MpdTimedMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdTimedMetadata] {
            return [
                .none,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata to Passthrough.
    public enum MpdTimedMetadataBoxVersion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case version0
        case version1
        case sdkUnknown(Swift.String)

        public static var allCases: [MpdTimedMetadataBoxVersion] {
            return [
                .version0,
                .version1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .version0: return "VERSION_0"
            case .version1: return "VERSION_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings relate to the fragmented MP4 container for the segments in your DASH outputs.
    public struct MpdSettings: Swift.Sendable {
        /// Optional. Choose Include to have MediaConvert mark up your DASH manifest with elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude, to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest:
        public var accessibilityCaptionHints: MediaConvertClientTypes.MpdAccessibilityCaptionHints?
        /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
        public var audioDuration: MediaConvertClientTypes.MpdAudioDuration?
        /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions. You specify sidecar captions in a separate output from your audio and video. Choose Raw for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
        public var captionContainerType: MediaConvertClientTypes.MpdCaptionContainerType?
        /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
        public var klvMetadata: MediaConvertClientTypes.MpdKlvMetadata?
        /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata to Passthrough.
        public var manifestMetadataSignaling: MediaConvertClientTypes.MpdManifestMetadataSignaling?
        /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML.
        public var scte35Esam: MediaConvertClientTypes.MpdScte35Esam?
        /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want those SCTE-35 markers in this output.
        public var scte35Source: MediaConvertClientTypes.MpdScte35Source?
        /// To include ID3 metadata in this output: Set ID3 metadata to Passthrough. Specify this ID3 metadata in Custom ID3 metadata inserter. MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None or leave blank.
        public var timedMetadata: MediaConvertClientTypes.MpdTimedMetadata?
        /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata to Passthrough.
        public var timedMetadataBoxVersion: MediaConvertClientTypes.MpdTimedMetadataBoxVersion?
        /// Specify the event message box (eMSG) scheme ID URI for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata to Passthrough.
        public var timedMetadataSchemeIdUri: Swift.String?
        /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata to Passthrough.
        public var timedMetadataValue: Swift.String?

        public init(
            accessibilityCaptionHints: MediaConvertClientTypes.MpdAccessibilityCaptionHints? = nil,
            audioDuration: MediaConvertClientTypes.MpdAudioDuration? = nil,
            captionContainerType: MediaConvertClientTypes.MpdCaptionContainerType? = nil,
            klvMetadata: MediaConvertClientTypes.MpdKlvMetadata? = nil,
            manifestMetadataSignaling: MediaConvertClientTypes.MpdManifestMetadataSignaling? = nil,
            scte35Esam: MediaConvertClientTypes.MpdScte35Esam? = nil,
            scte35Source: MediaConvertClientTypes.MpdScte35Source? = nil,
            timedMetadata: MediaConvertClientTypes.MpdTimedMetadata? = nil,
            timedMetadataBoxVersion: MediaConvertClientTypes.MpdTimedMetadataBoxVersion? = nil,
            timedMetadataSchemeIdUri: Swift.String? = nil,
            timedMetadataValue: Swift.String? = nil
        )
        {
            self.accessibilityCaptionHints = accessibilityCaptionHints
            self.audioDuration = audioDuration
            self.captionContainerType = captionContainerType
            self.klvMetadata = klvMetadata
            self.manifestMetadataSignaling = manifestMetadataSignaling
            self.scte35Esam = scte35Esam
            self.scte35Source = scte35Source
            self.timedMetadata = timedMetadata
            self.timedMetadataBoxVersion = timedMetadataBoxVersion
            self.timedMetadataSchemeIdUri = timedMetadataSchemeIdUri
            self.timedMetadataValue = timedMetadataValue
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don't copy to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output's video encoding settings.
    public enum MxfAfdSignaling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case copyFromVideo
        case noCopy
        case sdkUnknown(Swift.String)

        public static var allCases: [MxfAfdSignaling] {
            return [
                .copyFromVideo,
                .noCopy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .copyFromVideo: return "COPY_FROM_VIDEO"
            case .noCopy: return "NO_COPY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the MXF profile, also called shim, for this output. To automatically select a profile according to your output video codec and resolution, leave blank. For a list of codecs supported with each MXF profile, see https://docs.aws.amazon.com/mediaconvert/latest/ug/codecs-supported-with-each-mxf-profile.html. For more information about the automatic selection behavior, see https://docs.aws.amazon.com/mediaconvert/latest/ug/default-automatic-selection-of-mxf-profiles.html.
    public enum MxfProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case d10
        case op1a
        case xavc
        case xdcam
        case xdcamRdd9
        case sdkUnknown(Swift.String)

        public static var allCases: [MxfProfile] {
            return [
                .d10,
                .op1a,
                .xavc,
                .xdcam,
                .xdcamRdd9
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .d10: return "D_10"
            case .op1a: return "OP1A"
            case .xavc: return "XAVC"
            case .xdcam: return "XDCAM"
            case .xdcamRdd9: return "XDCAM_RDD9"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// To create an output that complies with the XAVC file format guidelines for interoperability, keep the default value, Drop frames for compliance. To include all frames from your input in this output, keep the default setting, Allow any duration. The number of frames that MediaConvert excludes when you set this to Drop frames for compliance depends on the output frame rate and duration.
    public enum MxfXavcDurationMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allowAnyDuration
        case dropFramesForCompliance
        case sdkUnknown(Swift.String)

        public static var allCases: [MxfXavcDurationMode] {
            return [
                .allowAnyDuration,
                .dropFramesForCompliance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allowAnyDuration: return "ALLOW_ANY_DURATION"
            case .dropFramesForCompliance: return "DROP_FRAMES_FOR_COMPLIANCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC profile settings for MXF outputs when you set your MXF profile to XAVC.
    public struct MxfXavcProfileSettings: Swift.Sendable {
        /// To create an output that complies with the XAVC file format guidelines for interoperability, keep the default value, Drop frames for compliance. To include all frames from your input in this output, keep the default setting, Allow any duration. The number of frames that MediaConvert excludes when you set this to Drop frames for compliance depends on the output frame rate and duration.
        public var durationMode: MediaConvertClientTypes.MxfXavcDurationMode?
        /// Specify a value for this setting only for outputs that you set up with one of these two XAVC profiles: XAVC HD Intra CBG or XAVC 4K Intra CBG. Specify the amount of space in each frame that the service reserves for ancillary data, such as teletext captions. The default value for this setting is 1492 bytes per frame. This should be sufficient to prevent overflow unless you have multiple pages of teletext captions data. If you have a large amount of teletext data, specify a larger number.
        public var maxAncDataSize: Swift.Int?

        public init(
            durationMode: MediaConvertClientTypes.MxfXavcDurationMode? = nil,
            maxAncDataSize: Swift.Int? = nil
        )
        {
            self.durationMode = durationMode
            self.maxAncDataSize = maxAncDataSize
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings relate to your MXF output container.
    public struct MxfSettings: Swift.Sendable {
        /// Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don't copy to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output's video encoding settings.
        public var afdSignaling: MediaConvertClientTypes.MxfAfdSignaling?
        /// Specify the MXF profile, also called shim, for this output. To automatically select a profile according to your output video codec and resolution, leave blank. For a list of codecs supported with each MXF profile, see https://docs.aws.amazon.com/mediaconvert/latest/ug/codecs-supported-with-each-mxf-profile.html. For more information about the automatic selection behavior, see https://docs.aws.amazon.com/mediaconvert/latest/ug/default-automatic-selection-of-mxf-profiles.html.
        public var profile: MediaConvertClientTypes.MxfProfile?
        /// Specify the XAVC profile settings for MXF outputs when you set your MXF profile to XAVC.
        public var xavcProfileSettings: MediaConvertClientTypes.MxfXavcProfileSettings?

        public init(
            afdSignaling: MediaConvertClientTypes.MxfAfdSignaling? = nil,
            profile: MediaConvertClientTypes.MxfProfile? = nil,
            xavcProfileSettings: MediaConvertClientTypes.MxfXavcProfileSettings? = nil
        )
        {
            self.afdSignaling = afdSignaling
            self.profile = profile
            self.xavcProfileSettings = xavcProfileSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Container specific settings.
    public struct ContainerSettings: Swift.Sendable {
        /// These settings relate to the fragmented MP4 container for the segments in your CMAF outputs.
        public var cmfcSettings: MediaConvertClientTypes.CmfcSettings?
        /// Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
        public var container: MediaConvertClientTypes.ContainerType?
        /// Settings for F4v container
        public var f4vSettings: MediaConvertClientTypes.F4vSettings?
        /// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
        public var m2tsSettings: MediaConvertClientTypes.M2tsSettings?
        /// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
        public var m3u8Settings: MediaConvertClientTypes.M3u8Settings?
        /// These settings relate to your QuickTime MOV output container.
        public var movSettings: MediaConvertClientTypes.MovSettings?
        /// These settings relate to your MP4 output container. You can create audio only outputs with this container. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/supported-codecs-containers-audio-only.html#output-codecs-and-containers-supported-for-audio-only.
        public var mp4Settings: MediaConvertClientTypes.Mp4Settings?
        /// These settings relate to the fragmented MP4 container for the segments in your DASH outputs.
        public var mpdSettings: MediaConvertClientTypes.MpdSettings?
        /// These settings relate to your MXF output container.
        public var mxfSettings: MediaConvertClientTypes.MxfSettings?

        public init(
            cmfcSettings: MediaConvertClientTypes.CmfcSettings? = nil,
            container: MediaConvertClientTypes.ContainerType? = nil,
            f4vSettings: MediaConvertClientTypes.F4vSettings? = nil,
            m2tsSettings: MediaConvertClientTypes.M2tsSettings? = nil,
            m3u8Settings: MediaConvertClientTypes.M3u8Settings? = nil,
            movSettings: MediaConvertClientTypes.MovSettings? = nil,
            mp4Settings: MediaConvertClientTypes.Mp4Settings? = nil,
            mpdSettings: MediaConvertClientTypes.MpdSettings? = nil,
            mxfSettings: MediaConvertClientTypes.MxfSettings? = nil
        )
        {
            self.cmfcSettings = cmfcSettings
            self.container = container
            self.f4vSettings = f4vSettings
            self.m2tsSettings = m2tsSettings
            self.m3u8Settings = m3u8Settings
            self.movSettings = movSettings
            self.mp4Settings = mp4Settings
            self.mpdSettings = mpdSettings
            self.mxfSettings = mxfSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create a raw audio-only file with no container. Regardless of the value that you specify here, if this output has video, the service will place outputs into an MPEG2-TS container.
    public enum HlsAudioOnlyContainer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case m2ts
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAudioOnlyContainer] {
            return [
                .automatic,
                .m2ts
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .m2ts: return "M2TS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    public enum HlsAudioTrackType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alternateAudioAutoSelect
        case alternateAudioAutoSelectDefault
        case alternateAudioNotAutoSelect
        case audioOnlyVariantStream
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsAudioTrackType] {
            return [
                .alternateAudioAutoSelect,
                .alternateAudioAutoSelectDefault,
                .alternateAudioNotAutoSelect,
                .audioOnlyVariantStream
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alternateAudioAutoSelect: return "ALTERNATE_AUDIO_AUTO_SELECT"
            case .alternateAudioAutoSelectDefault: return "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
            case .alternateAudioNotAutoSelect: return "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
            case .audioOnlyVariantStream: return "AUDIO_ONLY_VARIANT_STREAM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    public enum HlsDescriptiveVideoServiceFlag: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dontFlag
        case flag
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsDescriptiveVideoServiceFlag] {
            return [
                .dontFlag,
                .flag
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dontFlag: return "DONT_FLAG"
            case .flag: return "FLAG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    public enum HlsIFrameOnlyManifest: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [HlsIFrameOnlyManifest] {
            return [
                .exclude,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "EXCLUDE"
            case .include: return "INCLUDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for HLS output groups
    public struct HlsSettings: Swift.Sendable {
        /// Specifies the group to which the audio rendition belongs.
        public var audioGroupId: Swift.String?
        /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
        public var audioOnlyContainer: MediaConvertClientTypes.HlsAudioOnlyContainer?
        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public var audioRenditionSets: Swift.String?
        /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
        public var audioTrackType: MediaConvertClientTypes.HlsAudioTrackType?
        /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
        public var descriptiveVideoServiceFlag: MediaConvertClientTypes.HlsDescriptiveVideoServiceFlag?
        /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
        public var iFrameOnlyManifest: MediaConvertClientTypes.HlsIFrameOnlyManifest?
        /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
        public var segmentModifier: Swift.String?

        public init(
            audioGroupId: Swift.String? = nil,
            audioOnlyContainer: MediaConvertClientTypes.HlsAudioOnlyContainer? = nil,
            audioRenditionSets: Swift.String? = nil,
            audioTrackType: MediaConvertClientTypes.HlsAudioTrackType? = nil,
            descriptiveVideoServiceFlag: MediaConvertClientTypes.HlsDescriptiveVideoServiceFlag? = nil,
            iFrameOnlyManifest: MediaConvertClientTypes.HlsIFrameOnlyManifest? = nil,
            segmentModifier: Swift.String? = nil
        )
        {
            self.audioGroupId = audioGroupId
            self.audioOnlyContainer = audioOnlyContainer
            self.audioRenditionSets = audioRenditionSets
            self.audioTrackType = audioTrackType
            self.descriptiveVideoServiceFlag = descriptiveVideoServiceFlag
            self.iFrameOnlyManifest = iFrameOnlyManifest
            self.segmentModifier = segmentModifier
        }
    }
}

extension MediaConvertClientTypes {

    /// Specific settings for this type of output.
    public struct OutputSettings: Swift.Sendable {
        /// Settings for HLS output groups
        public var hlsSettings: MediaConvertClientTypes.HlsSettings?

        public init(
            hlsSettings: MediaConvertClientTypes.HlsSettings? = nil
        )
        {
            self.hlsSettings = hlsSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
    public enum AfdSignaling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case fixed
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AfdSignaling] {
            return [
                .auto,
                .fixed,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .fixed: return "FIXED"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The anti-alias filter is automatically applied to all outputs. The service no longer accepts the value DISABLED for AntiAlias. If you specify that in your job, the service will ignore the setting.
    public enum AntiAlias: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AntiAlias] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to Spatial adaptive quantization.
    public enum Av1AdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1AdaptiveQuantization] {
            return [
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the Bit depth. You can choose 8-bit or 10-bit.
    public enum Av1BitDepth: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bit10
        case bit8
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1BitDepth] {
            return [
                .bit10,
                .bit8
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bit10: return "BIT_10"
            case .bit8: return "BIT_8"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Film grain synthesis replaces film grain present in your content with similar quality synthesized AV1 film grain. We recommend that you choose Enabled to reduce the bandwidth of your QVBR quality level 5, 6, 7, or 8 outputs. For QVBR quality level 9 or 10 outputs we recommend that you keep the default value, Disabled. When you include Film grain synthesis, you cannot include the Noise reducer preprocessor.
    public enum Av1FilmGrainSynthesis: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1FilmGrainSynthesis] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum Av1FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum Av1FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for quality-defined variable bitrate encoding with the AV1 codec. Use these settings only when you set QVBR for Rate control mode.
    public struct Av1QvbrSettings: Swift.Sendable {
        /// Use this setting only when you set Rate control mode to QVBR. Specify the target quality level for this output. MediaConvert determines the right number of bits to use for each part of the video to maintain the video quality that you specify. When you keep the default value, AUTO, MediaConvert picks a quality level for you, based on characteristics of your input video. If you prefer to specify a quality level, specify a number from 1 through 10. Use higher numbers for greater quality. Level 10 results in nearly lossless compression. The quality level for most broadcast-quality transcodes is between 6 and 9. Optionally, to specify a value between whole numbers, also provide a value for the setting qvbrQualityLevelFineTune. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33.
        public var qvbrQualityLevel: Swift.Int?
        /// Optional. Specify a value here to set the QVBR quality to a level that is between whole numbers. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33. MediaConvert rounds your QVBR quality level to the nearest third of a whole number. For example, if you set qvbrQualityLevel to 7 and you set qvbrQualityLevelFineTune to .25, your actual QVBR quality level is 7.33.
        public var qvbrQualityLevelFineTune: Swift.Double?

        public init(
            qvbrQualityLevel: Swift.Int? = nil,
            qvbrQualityLevelFineTune: Swift.Double? = nil
        )
        {
            self.qvbrQualityLevel = qvbrQualityLevel
            self.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune
        }
    }
}

extension MediaConvertClientTypes {

    /// 'With AV1 outputs, for rate control mode, MediaConvert supports only quality-defined variable bitrate (QVBR). You can''t use CBR or VBR.'
    public enum Av1RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case qvbr
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1RateControlMode] {
            return [
                .qvbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .qvbr: return "QVBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public enum Av1SpatialAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Av1SpatialAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec, under VideoDescription>CodecSettings to the value AV1.
    public struct Av1Settings: Swift.Sendable {
        /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to Spatial adaptive quantization.
        public var adaptiveQuantization: MediaConvertClientTypes.Av1AdaptiveQuantization?
        /// Specify the Bit depth. You can choose 8-bit or 10-bit.
        public var bitDepth: MediaConvertClientTypes.Av1BitDepth?
        /// Film grain synthesis replaces film grain present in your content with similar quality synthesized AV1 film grain. We recommend that you choose Enabled to reduce the bandwidth of your QVBR quality level 5, 6, 7, or 8 outputs. For QVBR quality level 9 or 10 outputs we recommend that you keep the default value, Disabled. When you include Film grain synthesis, you cannot include the Noise reducer preprocessor.
        public var filmGrainSynthesis: MediaConvertClientTypes.Av1FilmGrainSynthesis?
        /// Use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.Av1FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.Av1FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Specify the GOP length (keyframe interval) in frames. With AV1, MediaConvert doesn't support GOP length in seconds. This value must be greater than zero and preferably equal to 1 + ((numberBFrames + 1) * x), where x is an integer value.
        public var gopSize: Swift.Double?
        /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.
        public var maxBitrate: Swift.Int?
        /// Specify from the number of B-frames, in the range of 0-15. For AV1 encoding, we recommend using 7 or 15. Choose a larger number for a lower bitrate and smaller file size; choose a smaller number for better video quality.
        public var numberBFramesBetweenReferenceFrames: Swift.Int?
        /// Settings for quality-defined variable bitrate encoding with the H.265 codec. Use these settings only when you set QVBR for Rate control mode.
        public var qvbrSettings: MediaConvertClientTypes.Av1QvbrSettings?
        /// 'With AV1 outputs, for rate control mode, MediaConvert supports only quality-defined variable bitrate (QVBR). You can''t use CBR or VBR.'
        public var rateControlMode: MediaConvertClientTypes.Av1RateControlMode?
        /// Specify the number of slices per picture. This value must be 1, 2, 4, 8, 16, or 32. For progressive pictures, this value must be less than or equal to the number of macroblock rows. For interlaced pictures, this value must be less than or equal to half the number of macroblock rows.
        public var slices: Swift.Int?
        /// Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
        public var spatialAdaptiveQuantization: MediaConvertClientTypes.Av1SpatialAdaptiveQuantization?

        public init(
            adaptiveQuantization: MediaConvertClientTypes.Av1AdaptiveQuantization? = nil,
            bitDepth: MediaConvertClientTypes.Av1BitDepth? = nil,
            filmGrainSynthesis: MediaConvertClientTypes.Av1FilmGrainSynthesis? = nil,
            framerateControl: MediaConvertClientTypes.Av1FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.Av1FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            maxBitrate: Swift.Int? = nil,
            numberBFramesBetweenReferenceFrames: Swift.Int? = nil,
            qvbrSettings: MediaConvertClientTypes.Av1QvbrSettings? = nil,
            rateControlMode: MediaConvertClientTypes.Av1RateControlMode? = nil,
            slices: Swift.Int? = nil,
            spatialAdaptiveQuantization: MediaConvertClientTypes.Av1SpatialAdaptiveQuantization? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.bitDepth = bitDepth
            self.filmGrainSynthesis = filmGrainSynthesis
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopSize = gopSize
            self.maxBitrate = maxBitrate
            self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
            self.qvbrSettings = qvbrSettings
            self.rateControlMode = rateControlMode
            self.slices = slices
            self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the AVC-Intra class of your output. The AVC-Intra class selection determines the output video bit rate depending on the frame rate of the output. Outputs with higher class values have higher bitrates and improved image quality. Note that for Class 4K/2K, MediaConvert supports only 4:2:2 chroma subsampling.
    public enum AvcIntraClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case class100
        case class200
        case class4k2k
        case class50
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraClass] {
            return [
                .class100,
                .class200,
                .class4k2k,
                .class50
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .class100: return "CLASS_100"
            case .class200: return "CLASS_200"
            case .class4k2k: return "CLASS_4K_2K"
            case .class50: return "CLASS_50"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how many transcoding passes MediaConvert does with your video. When you choose Multi-pass, your video quality is better and your output bitrate is more accurate. That is, the actual bitrate of your output is closer to the target bitrate defined in the specification. When you choose Single-pass, your encoding time is faster. The default behavior is Single-pass.
    public enum AvcIntraUhdQualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPass
        case singlePass
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraUhdQualityTuningLevel] {
            return [
                .multiPass,
                .singlePass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPass: return "MULTI_PASS"
            case .singlePass: return "SINGLE_PASS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional when you set AVC-Intra class to Class 4K/2K. When you set AVC-Intra class to a different value, this object isn't allowed.
    public struct AvcIntraUhdSettings: Swift.Sendable {
        /// Optional. Use Quality tuning level to choose how many transcoding passes MediaConvert does with your video. When you choose Multi-pass, your video quality is better and your output bitrate is more accurate. That is, the actual bitrate of your output is closer to the target bitrate defined in the specification. When you choose Single-pass, your encoding time is faster. The default behavior is Single-pass.
        public var qualityTuningLevel: MediaConvertClientTypes.AvcIntraUhdQualityTuningLevel?

        public init(
            qualityTuningLevel: MediaConvertClientTypes.AvcIntraUhdQualityTuningLevel? = nil
        )
        {
            self.qualityTuningLevel = qualityTuningLevel
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum AvcIntraFramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraFramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum AvcIntraFramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraFramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public enum AvcIntraInterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomField
        case followBottomField
        case followTopField
        case progressive
        case topField
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraInterlaceMode] {
            return [
                .bottomField,
                .followBottomField,
                .followTopField,
                .progressive,
                .topField
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomField: return "BOTTOM_FIELD"
            case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
            case .followTopField: return "FOLLOW_TOP_FIELD"
            case .progressive: return "PROGRESSIVE"
            case .topField: return "TOP_FIELD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum AvcIntraScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
    public enum AvcIntraSlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraSlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public enum AvcIntraTelecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AvcIntraTelecine] {
            return [
                .hard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    public struct AvcIntraSettings: Swift.Sendable {
        /// Specify the AVC-Intra class of your output. The AVC-Intra class selection determines the output video bit rate depending on the frame rate of the output. Outputs with higher class values have higher bitrates and improved image quality. Note that for Class 4K/2K, MediaConvert supports only 4:2:2 chroma subsampling.
        public var avcIntraClass: MediaConvertClientTypes.AvcIntraClass?
        /// Optional when you set AVC-Intra class to Class 4K/2K. When you set AVC-Intra class to a different value, this object isn't allowed.
        public var avcIntraUhdSettings: MediaConvertClientTypes.AvcIntraUhdSettings?
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.AvcIntraFramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.AvcIntraFramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
        public var interlaceMode: MediaConvertClientTypes.AvcIntraInterlaceMode?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.AvcIntraScanTypeConversionMode?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.AvcIntraSlowPal?
        /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
        public var telecine: MediaConvertClientTypes.AvcIntraTelecine?

        public init(
            avcIntraClass: MediaConvertClientTypes.AvcIntraClass? = nil,
            avcIntraUhdSettings: MediaConvertClientTypes.AvcIntraUhdSettings? = nil,
            framerateControl: MediaConvertClientTypes.AvcIntraFramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.AvcIntraFramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.AvcIntraInterlaceMode? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.AvcIntraScanTypeConversionMode? = nil,
            slowPal: MediaConvertClientTypes.AvcIntraSlowPal? = nil,
            telecine: MediaConvertClientTypes.AvcIntraTelecine? = nil
        )
        {
            self.avcIntraClass = avcIntraClass
            self.avcIntraUhdSettings = avcIntraUhdSettings
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.interlaceMode = interlaceMode
            self.scanTypeConversionMode = scanTypeConversionMode
            self.slowPal = slowPal
            self.telecine = telecine
        }
    }
}

extension MediaConvertClientTypes {

    /// Type of video codec
    public enum VideoCodec: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case av1
        case avcIntra
        case frameCapture
        case h264
        case h265
        case mpeg2
        case passthrough
        case prores
        case uncompressed
        case vc3
        case vp8
        case vp9
        case xavc
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoCodec] {
            return [
                .av1,
                .avcIntra,
                .frameCapture,
                .h264,
                .h265,
                .mpeg2,
                .passthrough,
                .prores,
                .uncompressed,
                .vc3,
                .vp8,
                .vp9,
                .xavc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .av1: return "AV1"
            case .avcIntra: return "AVC_INTRA"
            case .frameCapture: return "FRAME_CAPTURE"
            case .h264: return "H_264"
            case .h265: return "H_265"
            case .mpeg2: return "MPEG2"
            case .passthrough: return "PASSTHROUGH"
            case .prores: return "PRORES"
            case .uncompressed: return "UNCOMPRESSED"
            case .vc3: return "VC3"
            case .vp8: return "VP8"
            case .vp9: return "VP9"
            case .xavc: return "XAVC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value FRAME_CAPTURE.
    public struct FrameCaptureSettings: Swift.Sendable {
        /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.n.jpg where n is the 0-based sequence number of each Capture.
        public var framerateDenominator: Swift.Int?
        /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.NNNNNNN.jpg where N is the 0-based frame sequence number zero padded to 7 decimal places.
        public var framerateNumerator: Swift.Int?
        /// Maximum number of captures (encoded jpg output files).
        public var maxCaptures: Swift.Int?
        /// JPEG Quality - a higher value equals higher quality.
        public var quality: Swift.Int?

        public init(
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            maxCaptures: Swift.Int? = nil,
            quality: Swift.Int? = nil
        )
        {
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.maxCaptures = maxCaptures
            self.quality = quality
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Auto, for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set H264AdaptiveQuantization to a value other than Auto. Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off. Related settings: The value that you choose here applies to the following settings: H264FlickerAdaptiveQuantization, H264SpatialAdaptiveQuantization, and H264TemporalAdaptiveQuantization.
    public enum H264AdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H264AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optionally specify the level of sharpening to apply when you use the Bandwidth reduction filter. Sharpening adds contrast to the edges of your video content and can reduce softness. Keep the default value Off to apply no sharpening. Set Sharpening strength to Low to apply a minimal amount of sharpening, or High to apply a maximum amount of sharpening.
    public enum BandwidthReductionFilterSharpening: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [BandwidthReductionFilterSharpening] {
            return [
                .high,
                .low,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the strength of the Bandwidth reduction filter. For most workflows, we recommend that you choose Auto to reduce the bandwidth of your output with little to no perceptual decrease in video quality. For high quality and high bitrate outputs, choose Low. For the most bandwidth reduction, choose High. We recommend that you choose High for low bitrate outputs. Note that High may incur a slight increase in the softness of your output.
    public enum BandwidthReductionFilterStrength: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case low
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [BandwidthReductionFilterStrength] {
            return [
                .auto,
                .high,
                .low,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The Bandwidth reduction filter increases the video quality of your output relative to its bitrate. Use to lower the bitrate of your constant quality QVBR output, with little or no perceptual decrease in quality. Or, use to increase the video quality of outputs with other rate control modes relative to the bitrate that you specify. Bandwidth reduction increases further when your input is low quality or noisy. Outputs that use this feature incur pro-tier pricing. When you include Bandwidth reduction filter, you cannot include the Noise reducer preprocessor.
    public struct BandwidthReductionFilter: Swift.Sendable {
        /// Optionally specify the level of sharpening to apply when you use the Bandwidth reduction filter. Sharpening adds contrast to the edges of your video content and can reduce softness. Keep the default value Off to apply no sharpening. Set Sharpening strength to Low to apply a minimal amount of sharpening, or High to apply a maximum amount of sharpening.
        public var sharpening: MediaConvertClientTypes.BandwidthReductionFilterSharpening?
        /// Specify the strength of the Bandwidth reduction filter. For most workflows, we recommend that you choose Auto to reduce the bandwidth of your output with little to no perceptual decrease in video quality. For high quality and high bitrate outputs, choose Low. For the most bandwidth reduction, choose High. We recommend that you choose High for low bitrate outputs. Note that High may incur a slight increase in the softness of your output.
        public var strength: MediaConvertClientTypes.BandwidthReductionFilterStrength?

        public init(
            sharpening: MediaConvertClientTypes.BandwidthReductionFilterSharpening? = nil,
            strength: MediaConvertClientTypes.BandwidthReductionFilterStrength? = nil
        )
        {
            self.sharpening = sharpening
            self.strength = strength
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto.
    public enum H264CodecLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case level1
        case level11
        case level12
        case level13
        case level2
        case level21
        case level22
        case level3
        case level31
        case level32
        case level4
        case level41
        case level42
        case level5
        case level51
        case level52
        case sdkUnknown(Swift.String)

        public static var allCases: [H264CodecLevel] {
            return [
                .auto,
                .level1,
                .level11,
                .level12,
                .level13,
                .level2,
                .level21,
                .level22,
                .level3,
                .level31,
                .level32,
                .level4,
                .level41,
                .level42,
                .level5,
                .level51,
                .level52
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .level1: return "LEVEL_1"
            case .level11: return "LEVEL_1_1"
            case .level12: return "LEVEL_1_2"
            case .level13: return "LEVEL_1_3"
            case .level2: return "LEVEL_2"
            case .level21: return "LEVEL_2_1"
            case .level22: return "LEVEL_2_2"
            case .level3: return "LEVEL_3"
            case .level31: return "LEVEL_3_1"
            case .level32: return "LEVEL_3_2"
            case .level4: return "LEVEL_4"
            case .level41: return "LEVEL_4_1"
            case .level42: return "LEVEL_4_2"
            case .level5: return "LEVEL_5"
            case .level51: return "LEVEL_5_1"
            case .level52: return "LEVEL_5_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// H.264 Profile. High 4:2:2 and 10-bit profiles are only available with the AVC-I License.
    public enum H264CodecProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case baseline
        case high
        case high10bit
        case high422
        case high42210bit
        case main
        case sdkUnknown(Swift.String)

        public static var allCases: [H264CodecProfile] {
            return [
                .baseline,
                .high,
                .high10bit,
                .high422,
                .high42210bit,
                .main
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .baseline: return "BASELINE"
            case .high: return "HIGH"
            case .high10bit: return "HIGH_10BIT"
            case .high422: return "HIGH_422"
            case .high42210bit: return "HIGH_422_10BIT"
            case .main: return "MAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames.
    public enum H264DynamicSubGop: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adaptive
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [H264DynamicSubGop] {
            return [
                .adaptive,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adaptive: return "ADAPTIVE"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optionally include or suppress markers at the end of your output that signal the end of the video stream. To include end of stream markers: Leave blank or keep the default value, Include. To not include end of stream markers: Choose Suppress. This is useful when your output will be inserted into another stream.
    public enum H264EndOfStreamMarkers: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case include
        case suppress
        case sdkUnknown(Swift.String)

        public static var allCases: [H264EndOfStreamMarkers] {
            return [
                .include,
                .suppress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .include: return "INCLUDE"
            case .suppress: return "SUPPRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Entropy encoding mode. Use CABAC (must be in Main or High profile) or CAVLC.
    public enum H264EntropyEncoding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cabac
        case cavlc
        case sdkUnknown(Swift.String)

        public static var allCases: [H264EntropyEncoding] {
            return [
                .cabac,
                .cavlc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cabac: return "CABAC"
            case .cavlc: return "CAVLC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The video encoding method for your MPEG-4 AVC output. Keep the default value, PAFF, to have MediaConvert use PAFF encoding for interlaced outputs. Choose Force field to disable PAFF encoding and create separate interlaced fields. Choose MBAFF to disable PAFF and have MediaConvert use MBAFF encoding for interlaced outputs.
    public enum H264FieldEncoding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forceField
        case mbaff
        case paff
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FieldEncoding] {
            return [
                .forceField,
                .mbaff,
                .paff
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forceField: return "FORCE_FIELD"
            case .mbaff: return "MBAFF"
            case .paff: return "PAFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264FlickerAdaptiveQuantization is Disabled. Change this value to Enabled to reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. To manually enable or disable H264FlickerAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
    public enum H264FlickerAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FlickerAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum H264FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum H264FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [H264FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether to allow B-frames to be referenced by other frame types. To use reference B-frames when your GOP structure has 1 or more B-frames: Leave blank or keep the default value Enabled. We recommend that you choose Enabled to help improve the video quality of your output relative to its bitrate. To not use reference B-frames: Choose Disabled.
    public enum H264GopBReference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264GopBReference] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how the transcoder determines GOP size for this output. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. To enable this automatic behavior, choose Auto and and leave GOP size blank. By default, if you don't specify GOP mode control, MediaConvert will use automatic behavior. If your output group specifies HLS, DASH, or CMAF, set GOP mode control to Auto and leave GOP size blank in each output in your output group. To explicitly specify the GOP length, choose Specified, frames or Specified, seconds and then provide the GOP length in the related setting GOP size.
    public enum H264GopSizeUnits: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [H264GopSizeUnits] {
            return [
                .auto,
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public enum H264InterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomField
        case followBottomField
        case followTopField
        case progressive
        case topField
        case sdkUnknown(Swift.String)

        public static var allCases: [H264InterlaceMode] {
            return [
                .bottomField,
                .followBottomField,
                .followTopField,
                .progressive,
                .topField
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomField: return "BOTTOM_FIELD"
            case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
            case .followTopField: return "FOLLOW_TOP_FIELD"
            case .progressive: return "PROGRESSIVE"
            case .topField: return "TOP_FIELD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public enum H264ParControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The Quality tuning level you choose represents a trade-off between the encoding speed of your job and the output video quality. For the fastest encoding speed at the cost of video quality: Choose Single pass. For a good balance between encoding speed and video quality: Leave blank or keep the default value Single pass HQ. For the best video quality, at the cost of encoding speed: Choose Multi pass HQ. MediaConvert performs an analysis pass on your input followed by an encoding pass. Outputs that use this feature incur pro-tier pricing.
    public enum H264QualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPassHq
        case singlePass
        case singlePassHq
        case sdkUnknown(Swift.String)

        public static var allCases: [H264QualityTuningLevel] {
            return [
                .multiPassHq,
                .singlePass,
                .singlePassHq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPassHq: return "MULTI_PASS_HQ"
            case .singlePass: return "SINGLE_PASS"
            case .singlePassHq: return "SINGLE_PASS_HQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for quality-defined variable bitrate encoding with the H.264 codec. Use these settings only when you set QVBR for Rate control mode.
    public struct H264QvbrSettings: Swift.Sendable {
        /// Use this setting only when Rate control mode is QVBR and Quality tuning level is Multi-pass HQ. For Max average bitrate values suited to the complexity of your input video, the service limits the average bitrate of the video part of this output to the value that you choose. That is, the total size of the video element is less than or equal to the value you set multiplied by the number of seconds of encoded output.
        public var maxAverageBitrate: Swift.Int?
        /// Use this setting only when you set Rate control mode to QVBR. Specify the target quality level for this output. MediaConvert determines the right number of bits to use for each part of the video to maintain the video quality that you specify. When you keep the default value, AUTO, MediaConvert picks a quality level for you, based on characteristics of your input video. If you prefer to specify a quality level, specify a number from 1 through 10. Use higher numbers for greater quality. Level 10 results in nearly lossless compression. The quality level for most broadcast-quality transcodes is between 6 and 9. Optionally, to specify a value between whole numbers, also provide a value for the setting qvbrQualityLevelFineTune. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33.
        public var qvbrQualityLevel: Swift.Int?
        /// Optional. Specify a value here to set the QVBR quality to a level that is between whole numbers. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33. MediaConvert rounds your QVBR quality level to the nearest third of a whole number. For example, if you set qvbrQualityLevel to 7 and you set qvbrQualityLevelFineTune to .25, your actual QVBR quality level is 7.33.
        public var qvbrQualityLevelFineTune: Swift.Double?

        public init(
            maxAverageBitrate: Swift.Int? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            qvbrQualityLevelFineTune: Swift.Double? = nil
        )
        {
            self.maxAverageBitrate = maxAverageBitrate
            self.qvbrQualityLevel = qvbrQualityLevel
            self.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
    public enum H264RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case qvbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [H264RateControlMode] {
            return [
                .cbr,
                .qvbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .qvbr: return "QVBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Places a PPS header on each encoded picture, even if repeated.
    public enum H264RepeatPps: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264RepeatPps] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether to apply Saliency aware encoding to your output. Use to improve the perceptual video quality of your output by allocating more encoding bits to the prominent or noticeable parts of your content. To apply saliency aware encoding, when possible: We recommend that you choose Preferred. The effects of Saliency aware encoding are best seen in lower bitrate outputs. When you choose Preferred, note that Saliency aware encoding will only apply to outputs that are 720p or higher in resolution. To not apply saliency aware encoding, prioritizing encoding speed over perceptual video quality: Choose Disabled.
    public enum H264SaliencyAwareEncoding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case preferred
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SaliencyAwareEncoding] {
            return [
                .disabled,
                .preferred
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .preferred: return "PREFERRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum H264ScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [H264ScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
    public enum H264SceneChangeDetect: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case transitionDetection
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SceneChangeDetect] {
            return [
                .disabled,
                .enabled,
                .transitionDetection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .transitionDetection: return "TRANSITION_DETECTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
    public enum H264SlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Only use this setting when you change the default value, Auto, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264SpatialAdaptiveQuantization is Enabled. Keep this default value to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to set H264SpatialAdaptiveQuantization to Disabled. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher. To manually enable or disable H264SpatialAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
    public enum H264SpatialAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264SpatialAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Produces a bitstream compliant with SMPTE RP-2027.
    public enum H264Syntax: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case rp2027
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Syntax] {
            return [
                .default,
                .rp2027
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .rp2027: return "RP2027"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine produces a 29.97i output. Soft telecine produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public enum H264Telecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case soft
        case sdkUnknown(Swift.String)

        public static var allCases: [H264Telecine] {
            return [
                .hard,
                .none,
                .soft
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case .soft: return "SOFT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264TemporalAdaptiveQuantization is Enabled. Keep this default value to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to set H264TemporalAdaptiveQuantization to Disabled. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization. To manually enable or disable H264TemporalAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
    public enum H264TemporalAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264TemporalAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
    public enum H264UnregisteredSeiTimecode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H264UnregisteredSeiTimecode] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value H_264.
    public struct H264Settings: Swift.Sendable {
        /// Keep the default value, Auto, for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set H264AdaptiveQuantization to a value other than Auto. Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off. Related settings: The value that you choose here applies to the following settings: H264FlickerAdaptiveQuantization, H264SpatialAdaptiveQuantization, and H264TemporalAdaptiveQuantization.
        public var adaptiveQuantization: MediaConvertClientTypes.H264AdaptiveQuantization?
        /// The Bandwidth reduction filter increases the video quality of your output relative to its bitrate. Use to lower the bitrate of your constant quality QVBR output, with little or no perceptual decrease in quality. Or, use to increase the video quality of outputs with other rate control modes relative to the bitrate that you specify. Bandwidth reduction increases further when your input is low quality or noisy. Outputs that use this feature incur pro-tier pricing. When you include Bandwidth reduction filter, you cannot include the Noise reducer preprocessor.
        public var bandwidthReductionFilter: MediaConvertClientTypes.BandwidthReductionFilter?
        /// Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto.
        public var codecLevel: MediaConvertClientTypes.H264CodecLevel?
        /// H.264 Profile. High 4:2:2 and 10-bit profiles are only available with the AVC-I License.
        public var codecProfile: MediaConvertClientTypes.H264CodecProfile?
        /// Specify whether to allow the number of B-frames in your output GOP structure to vary or not depending on your input video content. To improve the subjective video quality of your output that has high-motion content: Leave blank or keep the default value Adaptive. MediaConvert will use fewer B-frames for high-motion video content than low-motion content. The maximum number of B- frames is limited by the value that you choose for B-frames between reference frames. To use the same number B-frames for all types of content: Choose Static.
        public var dynamicSubGop: MediaConvertClientTypes.H264DynamicSubGop?
        /// Optionally include or suppress markers at the end of your output that signal the end of the video stream. To include end of stream markers: Leave blank or keep the default value, Include. To not include end of stream markers: Choose Suppress. This is useful when your output will be inserted into another stream.
        public var endOfStreamMarkers: MediaConvertClientTypes.H264EndOfStreamMarkers?
        /// Entropy encoding mode. Use CABAC (must be in Main or High profile) or CAVLC.
        public var entropyEncoding: MediaConvertClientTypes.H264EntropyEncoding?
        /// The video encoding method for your MPEG-4 AVC output. Keep the default value, PAFF, to have MediaConvert use PAFF encoding for interlaced outputs. Choose Force field to disable PAFF encoding and create separate interlaced fields. Choose MBAFF to disable PAFF and have MediaConvert use MBAFF encoding for interlaced outputs.
        public var fieldEncoding: MediaConvertClientTypes.H264FieldEncoding?
        /// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264FlickerAdaptiveQuantization is Disabled. Change this value to Enabled to reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. To manually enable or disable H264FlickerAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
        public var flickerAdaptiveQuantization: MediaConvertClientTypes.H264FlickerAdaptiveQuantization?
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.H264FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.H264FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Specify whether to allow B-frames to be referenced by other frame types. To use reference B-frames when your GOP structure has 1 or more B-frames: Leave blank or keep the default value Enabled. We recommend that you choose Enabled to help improve the video quality of your output relative to its bitrate. To not use reference B-frames: Choose Disabled.
        public var gopBReference: MediaConvertClientTypes.H264GopBReference?
        /// Specify the relative frequency of open to closed GOPs in this output. For example, if you want to allow four open GOPs and then require a closed GOP, set this value to 5. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. In the console, do this by keeping the default empty value. If you do explicitly specify a value, for segmented outputs, don't set this value to 0.
        public var gopClosedCadence: Swift.Int?
        /// Use this setting only when you set GOP mode control to Specified, frames or Specified, seconds. Specify the GOP length using a whole number of frames or a decimal value of seconds. MediaConvert will interpret this value as frames or seconds depending on the value you choose for GOP mode control. If you want to allow MediaConvert to automatically determine GOP size, leave GOP size blank and set GOP mode control to Auto. If your output group specifies HLS, DASH, or CMAF, leave GOP size blank and set GOP mode control to Auto in each output in your output group.
        public var gopSize: Swift.Double?
        /// Specify how the transcoder determines GOP size for this output. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. To enable this automatic behavior, choose Auto and and leave GOP size blank. By default, if you don't specify GOP mode control, MediaConvert will use automatic behavior. If your output group specifies HLS, DASH, or CMAF, set GOP mode control to Auto and leave GOP size blank in each output in your output group. To explicitly specify the GOP length, choose Specified, frames or Specified, seconds and then provide the GOP length in the related setting GOP size.
        public var gopSizeUnits: MediaConvertClientTypes.H264GopSizeUnits?
        /// If your downstream systems have strict buffer requirements: Specify the minimum percentage of the HRD buffer that's available at the end of each encoded video segment. For the best video quality: Set to 0 or leave blank to automatically determine the final buffer fill percentage.
        public var hrdBufferFinalFillPercentage: Swift.Int?
        /// Percentage of the buffer that should initially be filled (HRD buffer model).
        public var hrdBufferInitialFillPercentage: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
        public var hrdBufferSize: Swift.Int?
        /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
        public var interlaceMode: MediaConvertClientTypes.H264InterlaceMode?
        /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.
        public var maxBitrate: Swift.Int?
        /// Specify the minimum number of frames allowed between two IDR-frames in your output. This includes frames created at the start of a GOP or a scene change. Use Min I-Interval to improve video compression by varying GOP size when two IDR-frames would be created near each other. For example, if a regular cadence-driven IDR-frame would fall within 5 frames of a scene-change IDR-frame, and you set Min I-interval to 5, then the encoder would only write an IDR-frame for the scene-change. In this way, one GOP is shortened or extended. If a cadence-driven IDR-frame would be further than 5 frames from a scene-change IDR-frame, then the encoder leaves all IDR-frames in place. To use an automatically determined interval: We recommend that you keep this value blank. This allows for MediaConvert to use an optimal setting according to the characteristics of your input video, and results in better video compression. To manually specify an interval: Enter a value from 1 to 30. Use when your downstream systems have specific GOP size requirements. To disable GOP size variance: Enter 0. MediaConvert will only create IDR-frames at the start of your output's cadence-driven GOP. Use when your downstream systems require a regular GOP size.
        public var minIInterval: Swift.Int?
        /// Specify the number of B-frames between reference frames in this output. For the best video quality: Leave blank. MediaConvert automatically determines the number of B-frames to use based on the characteristics of your input video. To manually specify the number of B-frames between reference frames: Enter an integer from 0 to 7.
        public var numberBFramesBetweenReferenceFrames: Swift.Int?
        /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
        public var numberReferenceFrames: Swift.Int?
        /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
        public var parControl: MediaConvertClientTypes.H264ParControl?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
        public var parDenominator: Swift.Int?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
        public var parNumerator: Swift.Int?
        /// The Quality tuning level you choose represents a trade-off between the encoding speed of your job and the output video quality. For the fastest encoding speed at the cost of video quality: Choose Single pass. For a good balance between encoding speed and video quality: Leave blank or keep the default value Single pass HQ. For the best video quality, at the cost of encoding speed: Choose Multi pass HQ. MediaConvert performs an analysis pass on your input followed by an encoding pass. Outputs that use this feature incur pro-tier pricing.
        public var qualityTuningLevel: MediaConvertClientTypes.H264QualityTuningLevel?
        /// Settings for quality-defined variable bitrate encoding with the H.265 codec. Use these settings only when you set QVBR for Rate control mode.
        public var qvbrSettings: MediaConvertClientTypes.H264QvbrSettings?
        /// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
        public var rateControlMode: MediaConvertClientTypes.H264RateControlMode?
        /// Places a PPS header on each encoded picture, even if repeated.
        public var repeatPps: MediaConvertClientTypes.H264RepeatPps?
        /// Specify whether to apply Saliency aware encoding to your output. Use to improve the perceptual video quality of your output by allocating more encoding bits to the prominent or noticeable parts of your content. To apply saliency aware encoding, when possible: We recommend that you choose Preferred. The effects of Saliency aware encoding are best seen in lower bitrate outputs. When you choose Preferred, note that Saliency aware encoding will only apply to outputs that are 720p or higher in resolution. To not apply saliency aware encoding, prioritizing encoding speed over perceptual video quality: Choose Disabled.
        public var saliencyAwareEncoding: MediaConvertClientTypes.H264SaliencyAwareEncoding?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.H264ScanTypeConversionMode?
        /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
        public var sceneChangeDetect: MediaConvertClientTypes.H264SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
        public var slices: Swift.Int?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.H264SlowPal?
        /// Ignore this setting unless you need to comply with a specification that requires a specific value. If you don't have a specification requirement, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness or by enabling a noise reducer filter. The Softness setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
        public var softness: Swift.Int?
        /// Only use this setting when you change the default value, Auto, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264SpatialAdaptiveQuantization is Enabled. Keep this default value to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to set H264SpatialAdaptiveQuantization to Disabled. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher. To manually enable or disable H264SpatialAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
        public var spatialAdaptiveQuantization: MediaConvertClientTypes.H264SpatialAdaptiveQuantization?
        /// Produces a bitstream compliant with SMPTE RP-2027.
        public var syntax: MediaConvertClientTypes.H264Syntax?
        /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine produces a 29.97i output. Soft telecine produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
        public var telecine: MediaConvertClientTypes.H264Telecine?
        /// Only use this setting when you change the default value, AUTO, for the setting H264AdaptiveQuantization. When you keep all defaults, excluding H264AdaptiveQuantization and all other adaptive quantization from your JSON job specification, MediaConvert automatically applies the best types of quantization for your video content. When you set H264AdaptiveQuantization to a value other than AUTO, the default value for H264TemporalAdaptiveQuantization is Enabled. Keep this default value to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to set H264TemporalAdaptiveQuantization to Disabled. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization. To manually enable or disable H264TemporalAdaptiveQuantization, you must set Adaptive quantization to a value other than AUTO.
        public var temporalAdaptiveQuantization: MediaConvertClientTypes.H264TemporalAdaptiveQuantization?
        /// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
        public var unregisteredSeiTimecode: MediaConvertClientTypes.H264UnregisteredSeiTimecode?

        public init(
            adaptiveQuantization: MediaConvertClientTypes.H264AdaptiveQuantization? = nil,
            bandwidthReductionFilter: MediaConvertClientTypes.BandwidthReductionFilter? = nil,
            bitrate: Swift.Int? = nil,
            codecLevel: MediaConvertClientTypes.H264CodecLevel? = nil,
            codecProfile: MediaConvertClientTypes.H264CodecProfile? = nil,
            dynamicSubGop: MediaConvertClientTypes.H264DynamicSubGop? = nil,
            endOfStreamMarkers: MediaConvertClientTypes.H264EndOfStreamMarkers? = nil,
            entropyEncoding: MediaConvertClientTypes.H264EntropyEncoding? = nil,
            fieldEncoding: MediaConvertClientTypes.H264FieldEncoding? = nil,
            flickerAdaptiveQuantization: MediaConvertClientTypes.H264FlickerAdaptiveQuantization? = nil,
            framerateControl: MediaConvertClientTypes.H264FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.H264FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopBReference: MediaConvertClientTypes.H264GopBReference? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaConvertClientTypes.H264GopSizeUnits? = nil,
            hrdBufferFinalFillPercentage: Swift.Int? = nil,
            hrdBufferInitialFillPercentage: Swift.Int? = nil,
            hrdBufferSize: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.H264InterlaceMode? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            numberBFramesBetweenReferenceFrames: Swift.Int? = nil,
            numberReferenceFrames: Swift.Int? = nil,
            parControl: MediaConvertClientTypes.H264ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            qualityTuningLevel: MediaConvertClientTypes.H264QualityTuningLevel? = nil,
            qvbrSettings: MediaConvertClientTypes.H264QvbrSettings? = nil,
            rateControlMode: MediaConvertClientTypes.H264RateControlMode? = nil,
            repeatPps: MediaConvertClientTypes.H264RepeatPps? = nil,
            saliencyAwareEncoding: MediaConvertClientTypes.H264SaliencyAwareEncoding? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.H264ScanTypeConversionMode? = nil,
            sceneChangeDetect: MediaConvertClientTypes.H264SceneChangeDetect? = nil,
            slices: Swift.Int? = nil,
            slowPal: MediaConvertClientTypes.H264SlowPal? = nil,
            softness: Swift.Int? = nil,
            spatialAdaptiveQuantization: MediaConvertClientTypes.H264SpatialAdaptiveQuantization? = nil,
            syntax: MediaConvertClientTypes.H264Syntax? = nil,
            telecine: MediaConvertClientTypes.H264Telecine? = nil,
            temporalAdaptiveQuantization: MediaConvertClientTypes.H264TemporalAdaptiveQuantization? = nil,
            unregisteredSeiTimecode: MediaConvertClientTypes.H264UnregisteredSeiTimecode? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.bandwidthReductionFilter = bandwidthReductionFilter
            self.bitrate = bitrate
            self.codecLevel = codecLevel
            self.codecProfile = codecProfile
            self.dynamicSubGop = dynamicSubGop
            self.endOfStreamMarkers = endOfStreamMarkers
            self.entropyEncoding = entropyEncoding
            self.fieldEncoding = fieldEncoding
            self.flickerAdaptiveQuantization = flickerAdaptiveQuantization
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.hrdBufferFinalFillPercentage = hrdBufferFinalFillPercentage
            self.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage
            self.hrdBufferSize = hrdBufferSize
            self.interlaceMode = interlaceMode
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
            self.numberReferenceFrames = numberReferenceFrames
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.qualityTuningLevel = qualityTuningLevel
            self.qvbrSettings = qvbrSettings
            self.rateControlMode = rateControlMode
            self.repeatPps = repeatPps
            self.saliencyAwareEncoding = saliencyAwareEncoding
            self.scanTypeConversionMode = scanTypeConversionMode
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.slowPal = slowPal
            self.softness = softness
            self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
            self.syntax = syntax
            self.telecine = telecine
            self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
            self.unregisteredSeiTimecode = unregisteredSeiTimecode
        }
    }
}

extension MediaConvertClientTypes {

    /// When you set Adaptive Quantization to Auto, or leave blank, MediaConvert automatically applies quantization to improve the video quality of your output. Set Adaptive Quantization to Low, Medium, High, Higher, or Max to manually control the strength of the quantization filter. When you do, you can specify a value for Spatial Adaptive Quantization, Temporal Adaptive Quantization, and Flicker Adaptive Quantization, to further control the quantization filter. Set Adaptive Quantization to Off to apply no quantization to your output.
    public enum H265AdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H265AdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).
    public enum H265AlternateTransferFunctionSei: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265AlternateTransferFunctionSei] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// H.265 Level.
    public enum H265CodecLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case level1
        case level2
        case level21
        case level3
        case level31
        case level4
        case level41
        case level5
        case level51
        case level52
        case level6
        case level61
        case level62
        case sdkUnknown(Swift.String)

        public static var allCases: [H265CodecLevel] {
            return [
                .auto,
                .level1,
                .level2,
                .level21,
                .level3,
                .level31,
                .level4,
                .level41,
                .level5,
                .level51,
                .level52,
                .level6,
                .level61,
                .level62
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .level1: return "LEVEL_1"
            case .level2: return "LEVEL_2"
            case .level21: return "LEVEL_2_1"
            case .level3: return "LEVEL_3"
            case .level31: return "LEVEL_3_1"
            case .level4: return "LEVEL_4"
            case .level41: return "LEVEL_4_1"
            case .level5: return "LEVEL_5"
            case .level51: return "LEVEL_5_1"
            case .level52: return "LEVEL_5_2"
            case .level6: return "LEVEL_6"
            case .level61: return "LEVEL_6_1"
            case .level62: return "LEVEL_6_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
    public enum H265CodecProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case main10High
        case main10Main
        case main42210bitHigh
        case main42210bitMain
        case main4228bitHigh
        case main4228bitMain
        case mainHigh
        case mainMain
        case sdkUnknown(Swift.String)

        public static var allCases: [H265CodecProfile] {
            return [
                .main10High,
                .main10Main,
                .main42210bitHigh,
                .main42210bitMain,
                .main4228bitHigh,
                .main4228bitMain,
                .mainHigh,
                .mainMain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .main10High: return "MAIN10_HIGH"
            case .main10Main: return "MAIN10_MAIN"
            case .main42210bitHigh: return "MAIN_422_10BIT_HIGH"
            case .main42210bitMain: return "MAIN_422_10BIT_MAIN"
            case .main4228bitHigh: return "MAIN_422_8BIT_HIGH"
            case .main4228bitMain: return "MAIN_422_8BIT_MAIN"
            case .mainHigh: return "MAIN_HIGH"
            case .mainMain: return "MAIN_MAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames.
    public enum H265DynamicSubGop: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adaptive
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [H265DynamicSubGop] {
            return [
                .adaptive,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adaptive: return "ADAPTIVE"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optionally include or suppress markers at the end of your output that signal the end of the video stream. To include end of stream markers: Leave blank or keep the default value, Include. To not include end of stream markers: Choose Suppress. This is useful when your output will be inserted into another stream.
    public enum H265EndOfStreamMarkers: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case include
        case suppress
        case sdkUnknown(Swift.String)

        public static var allCases: [H265EndOfStreamMarkers] {
            return [
                .include,
                .suppress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .include: return "INCLUDE"
            case .suppress: return "SUPPRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off.
    public enum H265FlickerAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265FlickerAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum H265FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H265FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum H265FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [H265FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether to allow B-frames to be referenced by other frame types. To use reference B-frames when your GOP structure has 1 or more B-frames: Leave blank or keep the default value Enabled. We recommend that you choose Enabled to help improve the video quality of your output relative to its bitrate. To not use reference B-frames: Choose Disabled.
    public enum H265GopBReference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265GopBReference] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how the transcoder determines GOP size for this output. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. To enable this automatic behavior, choose Auto and and leave GOP size blank. By default, if you don't specify GOP mode control, MediaConvert will use automatic behavior. If your output group specifies HLS, DASH, or CMAF, set GOP mode control to Auto and leave GOP size blank in each output in your output group. To explicitly specify the GOP length, choose Specified, frames or Specified, seconds and then provide the GOP length in the related setting GOP size.
    public enum H265GopSizeUnits: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [H265GopSizeUnits] {
            return [
                .auto,
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public enum H265InterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomField
        case followBottomField
        case followTopField
        case progressive
        case topField
        case sdkUnknown(Swift.String)

        public static var allCases: [H265InterlaceMode] {
            return [
                .bottomField,
                .followBottomField,
                .followTopField,
                .progressive,
                .topField
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomField: return "BOTTOM_FIELD"
            case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
            case .followTopField: return "FOLLOW_TOP_FIELD"
            case .progressive: return "PROGRESSIVE"
            case .topField: return "TOP_FIELD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public enum H265ParControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [H265ParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public enum H265QualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPassHq
        case singlePass
        case singlePassHq
        case sdkUnknown(Swift.String)

        public static var allCases: [H265QualityTuningLevel] {
            return [
                .multiPassHq,
                .singlePass,
                .singlePassHq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPassHq: return "MULTI_PASS_HQ"
            case .singlePass: return "SINGLE_PASS"
            case .singlePassHq: return "SINGLE_PASS_HQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for quality-defined variable bitrate encoding with the H.265 codec. Use these settings only when you set QVBR for Rate control mode.
    public struct H265QvbrSettings: Swift.Sendable {
        /// Use this setting only when Rate control mode is QVBR and Quality tuning level is Multi-pass HQ. For Max average bitrate values suited to the complexity of your input video, the service limits the average bitrate of the video part of this output to the value that you choose. That is, the total size of the video element is less than or equal to the value you set multiplied by the number of seconds of encoded output.
        public var maxAverageBitrate: Swift.Int?
        /// Use this setting only when you set Rate control mode to QVBR. Specify the target quality level for this output. MediaConvert determines the right number of bits to use for each part of the video to maintain the video quality that you specify. When you keep the default value, AUTO, MediaConvert picks a quality level for you, based on characteristics of your input video. If you prefer to specify a quality level, specify a number from 1 through 10. Use higher numbers for greater quality. Level 10 results in nearly lossless compression. The quality level for most broadcast-quality transcodes is between 6 and 9. Optionally, to specify a value between whole numbers, also provide a value for the setting qvbrQualityLevelFineTune. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33.
        public var qvbrQualityLevel: Swift.Int?
        /// Optional. Specify a value here to set the QVBR quality to a level that is between whole numbers. For example, if you want your QVBR quality level to be 7.33, set qvbrQualityLevel to 7 and set qvbrQualityLevelFineTune to .33. MediaConvert rounds your QVBR quality level to the nearest third of a whole number. For example, if you set qvbrQualityLevel to 7 and you set qvbrQualityLevelFineTune to .25, your actual QVBR quality level is 7.33.
        public var qvbrQualityLevelFineTune: Swift.Double?

        public init(
            maxAverageBitrate: Swift.Int? = nil,
            qvbrQualityLevel: Swift.Int? = nil,
            qvbrQualityLevelFineTune: Swift.Double? = nil
        )
        {
            self.maxAverageBitrate = maxAverageBitrate
            self.qvbrQualityLevel = qvbrQualityLevel
            self.qvbrQualityLevelFineTune = qvbrQualityLevelFineTune
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
    public enum H265RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case qvbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [H265RateControlMode] {
            return [
                .cbr,
                .qvbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .qvbr: return "QVBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify Sample Adaptive Offset (SAO) filter strength. Adaptive mode dynamically selects best strength based on content
    public enum H265SampleAdaptiveOffsetFilterMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adaptive
        case `default`
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [H265SampleAdaptiveOffsetFilterMode] {
            return [
                .adaptive,
                .default,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adaptive: return "ADAPTIVE"
            case .default: return "DEFAULT"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum H265ScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [H265ScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
    public enum H265SceneChangeDetect: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case transitionDetection
        case sdkUnknown(Swift.String)

        public static var allCases: [H265SceneChangeDetect] {
            return [
                .disabled,
                .enabled,
                .transitionDetection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .transitionDetection: return "TRANSITION_DETECTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
    public enum H265SlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265SlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public enum H265SpatialAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265SpatialAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// This field applies only if the Streams > Advanced > Framerate field is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer field and the Streams > Advanced > Interlaced Mode field to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
    public enum H265Telecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case soft
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Telecine] {
            return [
                .hard,
                .none,
                .soft
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case .soft: return "SOFT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization.
    public enum H265TemporalAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265TemporalAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.
    public enum H265TemporalIds: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265TemporalIds] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.
    public enum H265Tiles: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265Tiles] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
    public enum H265UnregisteredSeiTimecode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [H265UnregisteredSeiTimecode] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.
    public enum H265WriteMp4PackagingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hev1
        case hvc1
        case sdkUnknown(Swift.String)

        public static var allCases: [H265WriteMp4PackagingType] {
            return [
                .hev1,
                .hvc1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hev1: return "HEV1"
            case .hvc1: return "HVC1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for H265 codec
    public struct H265Settings: Swift.Sendable {
        /// When you set Adaptive Quantization to Auto, or leave blank, MediaConvert automatically applies quantization to improve the video quality of your output. Set Adaptive Quantization to Low, Medium, High, Higher, or Max to manually control the strength of the quantization filter. When you do, you can specify a value for Spatial Adaptive Quantization, Temporal Adaptive Quantization, and Flicker Adaptive Quantization, to further control the quantization filter. Set Adaptive Quantization to Off to apply no quantization to your output.
        public var adaptiveQuantization: MediaConvertClientTypes.H265AdaptiveQuantization?
        /// Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).
        public var alternateTransferFunctionSei: MediaConvertClientTypes.H265AlternateTransferFunctionSei?
        /// The Bandwidth reduction filter increases the video quality of your output relative to its bitrate. Use to lower the bitrate of your constant quality QVBR output, with little or no perceptual decrease in quality. Or, use to increase the video quality of outputs with other rate control modes relative to the bitrate that you specify. Bandwidth reduction increases further when your input is low quality or noisy. Outputs that use this feature incur pro-tier pricing. When you include Bandwidth reduction filter, you cannot include the Noise reducer preprocessor.
        public var bandwidthReductionFilter: MediaConvertClientTypes.BandwidthReductionFilter?
        /// Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// H.265 Level.
        public var codecLevel: MediaConvertClientTypes.H265CodecLevel?
        /// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
        public var codecProfile: MediaConvertClientTypes.H265CodecProfile?
        /// Specify whether to allow the number of B-frames in your output GOP structure to vary or not depending on your input video content. To improve the subjective video quality of your output that has high-motion content: Leave blank or keep the default value Adaptive. MediaConvert will use fewer B-frames for high-motion video content than low-motion content. The maximum number of B- frames is limited by the value that you choose for B-frames between reference frames. To use the same number B-frames for all types of content: Choose Static.
        public var dynamicSubGop: MediaConvertClientTypes.H265DynamicSubGop?
        /// Optionally include or suppress markers at the end of your output that signal the end of the video stream. To include end of stream markers: Leave blank or keep the default value, Include. To not include end of stream markers: Choose Suppress. This is useful when your output will be inserted into another stream.
        public var endOfStreamMarkers: MediaConvertClientTypes.H265EndOfStreamMarkers?
        /// Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set adaptiveQuantization to a value other than Off.
        public var flickerAdaptiveQuantization: MediaConvertClientTypes.H265FlickerAdaptiveQuantization?
        /// Use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.H265FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.H265FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Specify whether to allow B-frames to be referenced by other frame types. To use reference B-frames when your GOP structure has 1 or more B-frames: Leave blank or keep the default value Enabled. We recommend that you choose Enabled to help improve the video quality of your output relative to its bitrate. To not use reference B-frames: Choose Disabled.
        public var gopBReference: MediaConvertClientTypes.H265GopBReference?
        /// Specify the relative frequency of open to closed GOPs in this output. For example, if you want to allow four open GOPs and then require a closed GOP, set this value to 5. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. To enable this automatic behavior, do this by keeping the default empty value. If you do explicitly specify a value, for segmented outputs, don't set this value to 0.
        public var gopClosedCadence: Swift.Int?
        /// Use this setting only when you set GOP mode control to Specified, frames or Specified, seconds. Specify the GOP length using a whole number of frames or a decimal value of seconds. MediaConvert will interpret this value as frames or seconds depending on the value you choose for GOP mode control. If you want to allow MediaConvert to automatically determine GOP size, leave GOP size blank and set GOP mode control to Auto. If your output group specifies HLS, DASH, or CMAF, leave GOP size blank and set GOP mode control to Auto in each output in your output group.
        public var gopSize: Swift.Double?
        /// Specify how the transcoder determines GOP size for this output. We recommend that you have the transcoder automatically choose this value for you based on characteristics of your input video. To enable this automatic behavior, choose Auto and and leave GOP size blank. By default, if you don't specify GOP mode control, MediaConvert will use automatic behavior. If your output group specifies HLS, DASH, or CMAF, set GOP mode control to Auto and leave GOP size blank in each output in your output group. To explicitly specify the GOP length, choose Specified, frames or Specified, seconds and then provide the GOP length in the related setting GOP size.
        public var gopSizeUnits: MediaConvertClientTypes.H265GopSizeUnits?
        /// If your downstream systems have strict buffer requirements: Specify the minimum percentage of the HRD buffer that's available at the end of each encoded video segment. For the best video quality: Set to 0 or leave blank to automatically determine the final buffer fill percentage.
        public var hrdBufferFinalFillPercentage: Swift.Int?
        /// Percentage of the buffer that should initially be filled (HRD buffer model).
        public var hrdBufferInitialFillPercentage: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
        public var hrdBufferSize: Swift.Int?
        /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
        public var interlaceMode: MediaConvertClientTypes.H265InterlaceMode?
        /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. Required when Rate control mode is QVBR.
        public var maxBitrate: Swift.Int?
        /// Specify the minimum number of frames allowed between two IDR-frames in your output. This includes frames created at the start of a GOP or a scene change. Use Min I-Interval to improve video compression by varying GOP size when two IDR-frames would be created near each other. For example, if a regular cadence-driven IDR-frame would fall within 5 frames of a scene-change IDR-frame, and you set Min I-interval to 5, then the encoder would only write an IDR-frame for the scene-change. In this way, one GOP is shortened or extended. If a cadence-driven IDR-frame would be further than 5 frames from a scene-change IDR-frame, then the encoder leaves all IDR-frames in place. To use an automatically determined interval: We recommend that you keep this value blank. This allows for MediaConvert to use an optimal setting according to the characteristics of your input video, and results in better video compression. To manually specify an interval: Enter a value from 1 to 30. Use when your downstream systems have specific GOP size requirements. To disable GOP size variance: Enter 0. MediaConvert will only create IDR-frames at the start of your output's cadence-driven GOP. Use when your downstream systems require a regular GOP size.
        public var minIInterval: Swift.Int?
        /// Specify the number of B-frames between reference frames in this output. For the best video quality: Leave blank. MediaConvert automatically determines the number of B-frames to use based on the characteristics of your input video. To manually specify the number of B-frames between reference frames: Enter an integer from 0 to 7.
        public var numberBFramesBetweenReferenceFrames: Swift.Int?
        /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
        public var numberReferenceFrames: Swift.Int?
        /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
        public var parControl: MediaConvertClientTypes.H265ParControl?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
        public var parDenominator: Swift.Int?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
        public var parNumerator: Swift.Int?
        /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
        public var qualityTuningLevel: MediaConvertClientTypes.H265QualityTuningLevel?
        /// Settings for quality-defined variable bitrate encoding with the H.265 codec. Use these settings only when you set QVBR for Rate control mode.
        public var qvbrSettings: MediaConvertClientTypes.H265QvbrSettings?
        /// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
        public var rateControlMode: MediaConvertClientTypes.H265RateControlMode?
        /// Specify Sample Adaptive Offset (SAO) filter strength. Adaptive mode dynamically selects best strength based on content
        public var sampleAdaptiveOffsetFilterMode: MediaConvertClientTypes.H265SampleAdaptiveOffsetFilterMode?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.H265ScanTypeConversionMode?
        /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
        public var sceneChangeDetect: MediaConvertClientTypes.H265SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
        public var slices: Swift.Int?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.H265SlowPal?
        /// Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
        public var spatialAdaptiveQuantization: MediaConvertClientTypes.H265SpatialAdaptiveQuantization?
        /// This field applies only if the Streams > Advanced > Framerate field is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer field and the Streams > Advanced > Interlaced Mode field to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
        public var telecine: MediaConvertClientTypes.H265Telecine?
        /// Keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization.
        public var temporalAdaptiveQuantization: MediaConvertClientTypes.H265TemporalAdaptiveQuantization?
        /// Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.
        public var temporalIds: MediaConvertClientTypes.H265TemporalIds?
        /// Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.
        public var tiles: MediaConvertClientTypes.H265Tiles?
        /// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
        public var unregisteredSeiTimecode: MediaConvertClientTypes.H265UnregisteredSeiTimecode?
        /// If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.
        public var writeMp4PackagingType: MediaConvertClientTypes.H265WriteMp4PackagingType?

        public init(
            adaptiveQuantization: MediaConvertClientTypes.H265AdaptiveQuantization? = nil,
            alternateTransferFunctionSei: MediaConvertClientTypes.H265AlternateTransferFunctionSei? = nil,
            bandwidthReductionFilter: MediaConvertClientTypes.BandwidthReductionFilter? = nil,
            bitrate: Swift.Int? = nil,
            codecLevel: MediaConvertClientTypes.H265CodecLevel? = nil,
            codecProfile: MediaConvertClientTypes.H265CodecProfile? = nil,
            dynamicSubGop: MediaConvertClientTypes.H265DynamicSubGop? = nil,
            endOfStreamMarkers: MediaConvertClientTypes.H265EndOfStreamMarkers? = nil,
            flickerAdaptiveQuantization: MediaConvertClientTypes.H265FlickerAdaptiveQuantization? = nil,
            framerateControl: MediaConvertClientTypes.H265FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.H265FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopBReference: MediaConvertClientTypes.H265GopBReference? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaConvertClientTypes.H265GopSizeUnits? = nil,
            hrdBufferFinalFillPercentage: Swift.Int? = nil,
            hrdBufferInitialFillPercentage: Swift.Int? = nil,
            hrdBufferSize: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.H265InterlaceMode? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            numberBFramesBetweenReferenceFrames: Swift.Int? = nil,
            numberReferenceFrames: Swift.Int? = nil,
            parControl: MediaConvertClientTypes.H265ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            qualityTuningLevel: MediaConvertClientTypes.H265QualityTuningLevel? = nil,
            qvbrSettings: MediaConvertClientTypes.H265QvbrSettings? = nil,
            rateControlMode: MediaConvertClientTypes.H265RateControlMode? = nil,
            sampleAdaptiveOffsetFilterMode: MediaConvertClientTypes.H265SampleAdaptiveOffsetFilterMode? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.H265ScanTypeConversionMode? = nil,
            sceneChangeDetect: MediaConvertClientTypes.H265SceneChangeDetect? = nil,
            slices: Swift.Int? = nil,
            slowPal: MediaConvertClientTypes.H265SlowPal? = nil,
            spatialAdaptiveQuantization: MediaConvertClientTypes.H265SpatialAdaptiveQuantization? = nil,
            telecine: MediaConvertClientTypes.H265Telecine? = nil,
            temporalAdaptiveQuantization: MediaConvertClientTypes.H265TemporalAdaptiveQuantization? = nil,
            temporalIds: MediaConvertClientTypes.H265TemporalIds? = nil,
            tiles: MediaConvertClientTypes.H265Tiles? = nil,
            unregisteredSeiTimecode: MediaConvertClientTypes.H265UnregisteredSeiTimecode? = nil,
            writeMp4PackagingType: MediaConvertClientTypes.H265WriteMp4PackagingType? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.alternateTransferFunctionSei = alternateTransferFunctionSei
            self.bandwidthReductionFilter = bandwidthReductionFilter
            self.bitrate = bitrate
            self.codecLevel = codecLevel
            self.codecProfile = codecProfile
            self.dynamicSubGop = dynamicSubGop
            self.endOfStreamMarkers = endOfStreamMarkers
            self.flickerAdaptiveQuantization = flickerAdaptiveQuantization
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.hrdBufferFinalFillPercentage = hrdBufferFinalFillPercentage
            self.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage
            self.hrdBufferSize = hrdBufferSize
            self.interlaceMode = interlaceMode
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
            self.numberReferenceFrames = numberReferenceFrames
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.qualityTuningLevel = qualityTuningLevel
            self.qvbrSettings = qvbrSettings
            self.rateControlMode = rateControlMode
            self.sampleAdaptiveOffsetFilterMode = sampleAdaptiveOffsetFilterMode
            self.scanTypeConversionMode = scanTypeConversionMode
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.slowPal = slowPal
            self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
            self.telecine = telecine
            self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
            self.temporalIds = temporalIds
            self.tiles = tiles
            self.unregisteredSeiTimecode = unregisteredSeiTimecode
            self.writeMp4PackagingType = writeMp4PackagingType
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Spatial adaptive quantization, and Temporal adaptive quantization.
    public enum Mpeg2AdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2AdaptiveQuantization] {
            return [
                .high,
                .low,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Level to set the MPEG-2 level for the video output.
    public enum Mpeg2CodecLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case high1440
        case low
        case main
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2CodecLevel] {
            return [
                .auto,
                .high,
                .high1440,
                .low,
                .main
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .high1440: return "HIGH1440"
            case .low: return "LOW"
            case .main: return "MAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Profile to set the MPEG-2 profile for the video output.
    public enum Mpeg2CodecProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case main
        case profile422
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2CodecProfile] {
            return [
                .main,
                .profile422
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .main: return "MAIN"
            case .profile422: return "PROFILE_422"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames.
    public enum Mpeg2DynamicSubGop: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adaptive
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2DynamicSubGop] {
            return [
                .adaptive,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adaptive: return "ADAPTIVE"
            case .static: return "STATIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum Mpeg2FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum Mpeg2FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the units for GOP size. If you don't specify a value here, by default the encoder measures GOP size in frames.
    public enum Mpeg2GopSizeUnits: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frames
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2GopSizeUnits] {
            return [
                .frames,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frames: return "FRAMES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public enum Mpeg2InterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomField
        case followBottomField
        case followTopField
        case progressive
        case topField
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2InterlaceMode] {
            return [
                .bottomField,
                .followBottomField,
                .followTopField,
                .progressive,
                .topField
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomField: return "BOTTOM_FIELD"
            case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
            case .followTopField: return "FOLLOW_TOP_FIELD"
            case .progressive: return "PROGRESSIVE"
            case .topField: return "TOP_FIELD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Intra DC precision to set quantization precision for intra-block DC coefficients. If you choose the value auto, the service will automatically select the precision based on the per-frame compression ratio.
    public enum Mpeg2IntraDcPrecision: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case intraDcPrecision10
        case intraDcPrecision11
        case intraDcPrecision8
        case intraDcPrecision9
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2IntraDcPrecision] {
            return [
                .auto,
                .intraDcPrecision10,
                .intraDcPrecision11,
                .intraDcPrecision8,
                .intraDcPrecision9
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .intraDcPrecision10: return "INTRA_DC_PRECISION_10"
            case .intraDcPrecision11: return "INTRA_DC_PRECISION_11"
            case .intraDcPrecision8: return "INTRA_DC_PRECISION_8"
            case .intraDcPrecision9: return "INTRA_DC_PRECISION_9"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public enum Mpeg2ParControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public enum Mpeg2QualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPass
        case singlePass
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2QualityTuningLevel] {
            return [
                .multiPass,
                .singlePass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPass: return "MULTI_PASS"
            case .singlePass: return "SINGLE_PASS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Rate control mode to specify whether the bitrate is variable (vbr) or constant (cbr).
    public enum Mpeg2RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbr
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2RateControlMode] {
            return [
                .cbr,
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbr: return "CBR"
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum Mpeg2ScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2ScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default.
    public enum Mpeg2SceneChangeDetect: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2SceneChangeDetect] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
    public enum Mpeg2SlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2SlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public enum Mpeg2SpatialAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2SpatialAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether this output's video uses the D10 syntax. Keep the default value to not use the syntax. Related settings: When you choose D10 for your MXF profile, you must also set this value to D10.
    public enum Mpeg2Syntax: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case d10
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2Syntax] {
            return [
                .default,
                .d10
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .d10: return "D_10"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine produces a 29.97i output. Soft telecine produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public enum Mpeg2Telecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case soft
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2Telecine] {
            return [
                .hard,
                .none,
                .soft
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case .soft: return "SOFT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization.
    public enum Mpeg2TemporalAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Mpeg2TemporalAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value MPEG2.
    public struct Mpeg2Settings: Swift.Sendable {
        /// Specify the strength of any adaptive quantization filters that you enable. The value that you choose here applies to the following settings: Spatial adaptive quantization, and Temporal adaptive quantization.
        public var adaptiveQuantization: MediaConvertClientTypes.Mpeg2AdaptiveQuantization?
        /// Specify the average bitrate in bits per second. Required for VBR and CBR. For MS Smooth outputs, bitrates must be unique when rounded down to the nearest multiple of 1000.
        public var bitrate: Swift.Int?
        /// Use Level to set the MPEG-2 level for the video output.
        public var codecLevel: MediaConvertClientTypes.Mpeg2CodecLevel?
        /// Use Profile to set the MPEG-2 profile for the video output.
        public var codecProfile: MediaConvertClientTypes.Mpeg2CodecProfile?
        /// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames.
        public var dynamicSubGop: MediaConvertClientTypes.Mpeg2DynamicSubGop?
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.Mpeg2FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.Mpeg2FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Specify the relative frequency of open to closed GOPs in this output. For example, if you want to allow four open GOPs and then require a closed GOP, set this value to 5. When you create a streaming output, we recommend that you keep the default value, 1, so that players starting mid-stream receive an IDR frame as quickly as possible. Don't set this value to 0; that would break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// Specify the interval between keyframes, in seconds or frames, for this output. Default: 12 Related settings: When you specify the GOP size in seconds, set GOP mode control to Specified, seconds. The default value for GOP mode control is Frames.
        public var gopSize: Swift.Double?
        /// Specify the units for GOP size. If you don't specify a value here, by default the encoder measures GOP size in frames.
        public var gopSizeUnits: MediaConvertClientTypes.Mpeg2GopSizeUnits?
        /// If your downstream systems have strict buffer requirements: Specify the minimum percentage of the HRD buffer that's available at the end of each encoded video segment. For the best video quality: Set to 0 or leave blank to automatically determine the final buffer fill percentage.
        public var hrdBufferFinalFillPercentage: Swift.Int?
        /// Percentage of the buffer that should initially be filled (HRD buffer model).
        public var hrdBufferInitialFillPercentage: Swift.Int?
        /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
        public var hrdBufferSize: Swift.Int?
        /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
        public var interlaceMode: MediaConvertClientTypes.Mpeg2InterlaceMode?
        /// Use Intra DC precision to set quantization precision for intra-block DC coefficients. If you choose the value auto, the service will automatically select the precision based on the per-frame compression ratio.
        public var intraDcPrecision: MediaConvertClientTypes.Mpeg2IntraDcPrecision?
        /// Maximum bitrate in bits/second. For example, enter five megabits per second as 5000000.
        public var maxBitrate: Swift.Int?
        /// Specify the minimum number of frames allowed between two IDR-frames in your output. This includes frames created at the start of a GOP or a scene change. Use Min I-Interval to improve video compression by varying GOP size when two IDR-frames would be created near each other. For example, if a regular cadence-driven IDR-frame would fall within 5 frames of a scene-change IDR-frame, and you set Min I-interval to 5, then the encoder would only write an IDR-frame for the scene-change. In this way, one GOP is shortened or extended. If a cadence-driven IDR-frame would be further than 5 frames from a scene-change IDR-frame, then the encoder leaves all IDR-frames in place. To manually specify an interval: Enter a value from 1 to 30. Use when your downstream systems have specific GOP size requirements. To disable GOP size variance: Enter 0. MediaConvert will only create IDR-frames at the start of your output's cadence-driven GOP. Use when your downstream systems require a regular GOP size.
        public var minIInterval: Swift.Int?
        /// Specify the number of B-frames that MediaConvert puts between reference frames in this output. Valid values are whole numbers from 0 through 7. When you don't specify a value, MediaConvert defaults to 2.
        public var numberBFramesBetweenReferenceFrames: Swift.Int?
        /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
        public var parControl: MediaConvertClientTypes.Mpeg2ParControl?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
        public var parDenominator: Swift.Int?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
        public var parNumerator: Swift.Int?
        /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
        public var qualityTuningLevel: MediaConvertClientTypes.Mpeg2QualityTuningLevel?
        /// Use Rate control mode to specify whether the bitrate is variable (vbr) or constant (cbr).
        public var rateControlMode: MediaConvertClientTypes.Mpeg2RateControlMode?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.Mpeg2ScanTypeConversionMode?
        /// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default.
        public var sceneChangeDetect: MediaConvertClientTypes.Mpeg2SceneChangeDetect?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.Mpeg2SlowPal?
        /// Ignore this setting unless you need to comply with a specification that requires a specific value. If you don't have a specification requirement, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness or by enabling a noise reducer filter. The Softness setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, to use the AWS Elemental default matrices. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
        public var softness: Swift.Int?
        /// Keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
        public var spatialAdaptiveQuantization: MediaConvertClientTypes.Mpeg2SpatialAdaptiveQuantization?
        /// Specify whether this output's video uses the D10 syntax. Keep the default value to not use the syntax. Related settings: When you choose D10 for your MXF profile, you must also set this value to D10.
        public var syntax: MediaConvertClientTypes.Mpeg2Syntax?
        /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard or soft telecine to create a smoother picture. Hard telecine produces a 29.97i output. Soft telecine produces an output with a 23.976 output that signals to the video player device to do the conversion during play back. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
        public var telecine: MediaConvertClientTypes.Mpeg2Telecine?
        /// Keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal quantization, adjust the strength of the filter with the setting Adaptive quantization.
        public var temporalAdaptiveQuantization: MediaConvertClientTypes.Mpeg2TemporalAdaptiveQuantization?

        public init(
            adaptiveQuantization: MediaConvertClientTypes.Mpeg2AdaptiveQuantization? = nil,
            bitrate: Swift.Int? = nil,
            codecLevel: MediaConvertClientTypes.Mpeg2CodecLevel? = nil,
            codecProfile: MediaConvertClientTypes.Mpeg2CodecProfile? = nil,
            dynamicSubGop: MediaConvertClientTypes.Mpeg2DynamicSubGop? = nil,
            framerateControl: MediaConvertClientTypes.Mpeg2FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.Mpeg2FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopClosedCadence: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            gopSizeUnits: MediaConvertClientTypes.Mpeg2GopSizeUnits? = nil,
            hrdBufferFinalFillPercentage: Swift.Int? = nil,
            hrdBufferInitialFillPercentage: Swift.Int? = nil,
            hrdBufferSize: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.Mpeg2InterlaceMode? = nil,
            intraDcPrecision: MediaConvertClientTypes.Mpeg2IntraDcPrecision? = nil,
            maxBitrate: Swift.Int? = nil,
            minIInterval: Swift.Int? = nil,
            numberBFramesBetweenReferenceFrames: Swift.Int? = nil,
            parControl: MediaConvertClientTypes.Mpeg2ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            qualityTuningLevel: MediaConvertClientTypes.Mpeg2QualityTuningLevel? = nil,
            rateControlMode: MediaConvertClientTypes.Mpeg2RateControlMode? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.Mpeg2ScanTypeConversionMode? = nil,
            sceneChangeDetect: MediaConvertClientTypes.Mpeg2SceneChangeDetect? = nil,
            slowPal: MediaConvertClientTypes.Mpeg2SlowPal? = nil,
            softness: Swift.Int? = nil,
            spatialAdaptiveQuantization: MediaConvertClientTypes.Mpeg2SpatialAdaptiveQuantization? = nil,
            syntax: MediaConvertClientTypes.Mpeg2Syntax? = nil,
            telecine: MediaConvertClientTypes.Mpeg2Telecine? = nil,
            temporalAdaptiveQuantization: MediaConvertClientTypes.Mpeg2TemporalAdaptiveQuantization? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.bitrate = bitrate
            self.codecLevel = codecLevel
            self.codecProfile = codecProfile
            self.dynamicSubGop = dynamicSubGop
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopClosedCadence = gopClosedCadence
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.hrdBufferFinalFillPercentage = hrdBufferFinalFillPercentage
            self.hrdBufferInitialFillPercentage = hrdBufferInitialFillPercentage
            self.hrdBufferSize = hrdBufferSize
            self.interlaceMode = interlaceMode
            self.intraDcPrecision = intraDcPrecision
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFrames
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.qualityTuningLevel = qualityTuningLevel
            self.rateControlMode = rateControlMode
            self.scanTypeConversionMode = scanTypeConversionMode
            self.sceneChangeDetect = sceneChangeDetect
            self.slowPal = slowPal
            self.softness = softness
            self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
            self.syntax = syntax
            self.telecine = telecine
            self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
        }
    }
}

extension MediaConvertClientTypes {

    /// This setting applies only to ProRes 4444 and ProRes 4444 XQ outputs that you create from inputs that use 4:4:4 chroma sampling. Set Preserve 4:4:4 sampling to allow outputs to also use 4:4:4 chroma sampling. You must specify a value for this setting when your output codec profile supports 4:4:4 chroma sampling. Related Settings: For Apple ProRes outputs with 4:4:4 chroma sampling: Choose Preserve 4:4:4 sampling. Use when your input has 4:4:4 chroma sampling and your output codec Profile is Apple ProRes 4444 or 4444 XQ. Note that when you choose Preserve 4:4:4 sampling, you cannot include any of the following Preprocessors: Dolby Vision, HDR10+, or Noise reducer.
    public enum ProresChromaSampling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case preserve444Sampling
        case subsampleTo422
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresChromaSampling] {
            return [
                .preserve444Sampling,
                .subsampleTo422
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .preserve444Sampling: return "PRESERVE_444_SAMPLING"
            case .subsampleTo422: return "SUBSAMPLE_TO_422"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Profile to specify the type of Apple ProRes codec to use for this output.
    public enum ProresCodecProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appleProres422
        case appleProres422Hq
        case appleProres422Lt
        case appleProres422Proxy
        case appleProres4444
        case appleProres4444Xq
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresCodecProfile] {
            return [
                .appleProres422,
                .appleProres422Hq,
                .appleProres422Lt,
                .appleProres422Proxy,
                .appleProres4444,
                .appleProres4444Xq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appleProres422: return "APPLE_PRORES_422"
            case .appleProres422Hq: return "APPLE_PRORES_422_HQ"
            case .appleProres422Lt: return "APPLE_PRORES_422_LT"
            case .appleProres422Proxy: return "APPLE_PRORES_422_PROXY"
            case .appleProres4444: return "APPLE_PRORES_4444"
            case .appleProres4444Xq: return "APPLE_PRORES_4444_XQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum ProresFramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresFramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum ProresFramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresFramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public enum ProresInterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomField
        case followBottomField
        case followTopField
        case progressive
        case topField
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresInterlaceMode] {
            return [
                .bottomField,
                .followBottomField,
                .followTopField,
                .progressive,
                .topField
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomField: return "BOTTOM_FIELD"
            case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
            case .followTopField: return "FOLLOW_TOP_FIELD"
            case .progressive: return "PROGRESSIVE"
            case .topField: return "TOP_FIELD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public enum ProresParControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum ProresScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
    public enum ProresSlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresSlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public enum ProresTelecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ProresTelecine] {
            return [
                .hard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value PRORES.
    public struct ProresSettings: Swift.Sendable {
        /// This setting applies only to ProRes 4444 and ProRes 4444 XQ outputs that you create from inputs that use 4:4:4 chroma sampling. Set Preserve 4:4:4 sampling to allow outputs to also use 4:4:4 chroma sampling. You must specify a value for this setting when your output codec profile supports 4:4:4 chroma sampling. Related Settings: For Apple ProRes outputs with 4:4:4 chroma sampling: Choose Preserve 4:4:4 sampling. Use when your input has 4:4:4 chroma sampling and your output codec Profile is Apple ProRes 4444 or 4444 XQ. Note that when you choose Preserve 4:4:4 sampling, you cannot include any of the following Preprocessors: Dolby Vision, HDR10+, or Noise reducer.
        public var chromaSampling: MediaConvertClientTypes.ProresChromaSampling?
        /// Use Profile to specify the type of Apple ProRes codec to use for this output.
        public var codecProfile: MediaConvertClientTypes.ProresCodecProfile?
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.ProresFramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.ProresFramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
        public var interlaceMode: MediaConvertClientTypes.ProresInterlaceMode?
        /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
        public var parControl: MediaConvertClientTypes.ProresParControl?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
        public var parDenominator: Swift.Int?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
        public var parNumerator: Swift.Int?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.ProresScanTypeConversionMode?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output. When you enable slow PAL, MediaConvert relabels the video frames to 25 fps and resamples your audio to keep it synchronized with the video. Note that enabling this setting will slightly reduce the duration of your video. Required settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.ProresSlowPal?
        /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
        public var telecine: MediaConvertClientTypes.ProresTelecine?

        public init(
            chromaSampling: MediaConvertClientTypes.ProresChromaSampling? = nil,
            codecProfile: MediaConvertClientTypes.ProresCodecProfile? = nil,
            framerateControl: MediaConvertClientTypes.ProresFramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.ProresFramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.ProresInterlaceMode? = nil,
            parControl: MediaConvertClientTypes.ProresParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.ProresScanTypeConversionMode? = nil,
            slowPal: MediaConvertClientTypes.ProresSlowPal? = nil,
            telecine: MediaConvertClientTypes.ProresTelecine? = nil
        )
        {
            self.chromaSampling = chromaSampling
            self.codecProfile = codecProfile
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.interlaceMode = interlaceMode
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.scanTypeConversionMode = scanTypeConversionMode
            self.slowPal = slowPal
            self.telecine = telecine
        }
    }
}

extension MediaConvertClientTypes {

    /// The four character code for the uncompressed video.
    public enum UncompressedFourcc: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case i420
        case i422
        case i444
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedFourcc] {
            return [
                .i420,
                .i422,
                .i444
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .i420: return "I420"
            case .i422: return "I422"
            case .i444: return "I444"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum UncompressedFramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedFramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum UncompressedFramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedFramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Choose the scan line type for this output. If you don't specify a value, MediaConvert will create a progressive output.
    public enum UncompressedInterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedInterlaceMode] {
            return [
                .interlaced,
                .progressive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum UncompressedScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Framerate to 25.
    public enum UncompressedSlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedSlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public enum UncompressedTelecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [UncompressedTelecine] {
            return [
                .hard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec, under VideoDescription>CodecSettings to the value UNCOMPRESSED.
    public struct UncompressedSettings: Swift.Sendable {
        /// The four character code for the uncompressed video.
        public var fourcc: MediaConvertClientTypes.UncompressedFourcc?
        /// Use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.UncompressedFramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.UncompressedFramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Optional. Choose the scan line type for this output. If you don't specify a value, MediaConvert will create a progressive output.
        public var interlaceMode: MediaConvertClientTypes.UncompressedInterlaceMode?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.UncompressedScanTypeConversionMode?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.UncompressedSlowPal?
        /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
        public var telecine: MediaConvertClientTypes.UncompressedTelecine?

        public init(
            fourcc: MediaConvertClientTypes.UncompressedFourcc? = nil,
            framerateControl: MediaConvertClientTypes.UncompressedFramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.UncompressedFramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.UncompressedInterlaceMode? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.UncompressedScanTypeConversionMode? = nil,
            slowPal: MediaConvertClientTypes.UncompressedSlowPal? = nil,
            telecine: MediaConvertClientTypes.UncompressedTelecine? = nil
        )
        {
            self.fourcc = fourcc
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.interlaceMode = interlaceMode
            self.scanTypeConversionMode = scanTypeConversionMode
            self.slowPal = slowPal
            self.telecine = telecine
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum Vc3FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum Vc3FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Choose the scan line type for this output. If you don't specify a value, MediaConvert will create a progressive output.
    public enum Vc3InterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case progressive
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3InterlaceMode] {
            return [
                .interlaced,
                .progressive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .progressive: return "PROGRESSIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
    public enum Vc3ScanTypeConversionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interlaced
        case interlacedOptimize
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3ScanTypeConversionMode] {
            return [
                .interlaced,
                .interlacedOptimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interlaced: return "INTERLACED"
            case .interlacedOptimize: return "INTERLACED_OPTIMIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Framerate to 25.
    public enum Vc3SlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3SlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
    public enum Vc3Telecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3Telecine] {
            return [
                .hard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the VC3 class to choose the quality characteristics for this output. VC3 class, together with the settings Framerate (framerateNumerator and framerateDenominator) and Resolution (height and width), determine your output bitrate. For example, say that your video resolution is 1920x1080 and your framerate is 29.97. Then Class 145 gives you an output with a bitrate of approximately 145 Mbps and Class 220 gives you and output with a bitrate of approximately 220 Mbps. VC3 class also specifies the color bit depth of your output.
    public enum Vc3Class: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case class1458bit
        case class22010bit
        case class2208bit
        case sdkUnknown(Swift.String)

        public static var allCases: [Vc3Class] {
            return [
                .class1458bit,
                .class22010bit,
                .class2208bit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .class1458bit: return "CLASS_145_8BIT"
            case .class22010bit: return "CLASS_220_10BIT"
            case .class2208bit: return "CLASS_220_8BIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value VC3
    public struct Vc3Settings: Swift.Sendable {
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.Vc3FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.Vc3FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Optional. Choose the scan line type for this output. If you don't specify a value, MediaConvert will create a progressive output.
        public var interlaceMode: MediaConvertClientTypes.Vc3InterlaceMode?
        /// Use this setting for interlaced outputs, when your output frame rate is half of your input frame rate. In this situation, choose Optimized interlacing to create a better quality interlaced output. In this case, each progressive frame from the input corresponds to an interlaced field in the output. Keep the default value, Basic interlacing, for all other output frame rates. With basic interlacing, MediaConvert performs any frame rate conversion first and then interlaces the frames. When you choose Optimized interlacing and you set your output frame rate to a value that isn't suitable for optimized interlacing, MediaConvert automatically falls back to basic interlacing. Required settings: To use optimized interlacing, you must set Telecine to None or Soft. You can't use optimized interlacing for hard telecine outputs. You must also set Interlace mode to a value other than Progressive.
        public var scanTypeConversionMode: MediaConvertClientTypes.Vc3ScanTypeConversionMode?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Framerate to 25.
        public var slowPal: MediaConvertClientTypes.Vc3SlowPal?
        /// When you do frame rate conversion from 23.976 frames per second (fps) to 29.97 fps, and your output scan type is interlaced, you can optionally enable hard telecine to create a smoother picture. When you keep the default value, None, MediaConvert does a standard frame rate conversion to 29.97 without doing anything with the field polarity to create a smoother picture.
        public var telecine: MediaConvertClientTypes.Vc3Telecine?
        /// Specify the VC3 class to choose the quality characteristics for this output. VC3 class, together with the settings Framerate (framerateNumerator and framerateDenominator) and Resolution (height and width), determine your output bitrate. For example, say that your video resolution is 1920x1080 and your framerate is 29.97. Then Class 145 gives you an output with a bitrate of approximately 145 Mbps and Class 220 gives you and output with a bitrate of approximately 220 Mbps. VC3 class also specifies the color bit depth of your output.
        public var vc3Class: MediaConvertClientTypes.Vc3Class?

        public init(
            framerateControl: MediaConvertClientTypes.Vc3FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.Vc3FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.Vc3InterlaceMode? = nil,
            scanTypeConversionMode: MediaConvertClientTypes.Vc3ScanTypeConversionMode? = nil,
            slowPal: MediaConvertClientTypes.Vc3SlowPal? = nil,
            telecine: MediaConvertClientTypes.Vc3Telecine? = nil,
            vc3Class: MediaConvertClientTypes.Vc3Class? = nil
        )
        {
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.interlaceMode = interlaceMode
            self.scanTypeConversionMode = scanTypeConversionMode
            self.slowPal = slowPal
            self.telecine = telecine
            self.vc3Class = vc3Class
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum Vp8FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp8FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum Vp8FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp8FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public enum Vp8ParControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp8ParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    public enum Vp8QualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPass
        case multiPassHq
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp8QualityTuningLevel] {
            return [
                .multiPass,
                .multiPassHq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPass: return "MULTI_PASS"
            case .multiPassHq: return "MULTI_PASS_HQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
    public enum Vp8RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp8RateControlMode] {
            return [
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value VP8.
    public struct Vp8Settings: Swift.Sendable {
        /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
        public var bitrate: Swift.Int?
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.Vp8FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.Vp8FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// GOP Length (keyframe interval) in frames. Must be greater than zero.
        public var gopSize: Swift.Double?
        /// Optional. Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
        public var hrdBufferSize: Swift.Int?
        /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
        public var maxBitrate: Swift.Int?
        /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
        public var parControl: MediaConvertClientTypes.Vp8ParControl?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
        public var parDenominator: Swift.Int?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
        public var parNumerator: Swift.Int?
        /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
        public var qualityTuningLevel: MediaConvertClientTypes.Vp8QualityTuningLevel?
        /// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
        public var rateControlMode: MediaConvertClientTypes.Vp8RateControlMode?

        public init(
            bitrate: Swift.Int? = nil,
            framerateControl: MediaConvertClientTypes.Vp8FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.Vp8FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            hrdBufferSize: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            parControl: MediaConvertClientTypes.Vp8ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            qualityTuningLevel: MediaConvertClientTypes.Vp8QualityTuningLevel? = nil,
            rateControlMode: MediaConvertClientTypes.Vp8RateControlMode? = nil
        )
        {
            self.bitrate = bitrate
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopSize = gopSize
            self.hrdBufferSize = hrdBufferSize
            self.maxBitrate = maxBitrate
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.qualityTuningLevel = qualityTuningLevel
            self.rateControlMode = rateControlMode
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
    public enum Vp9FramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp9FramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum Vp9FramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp9FramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source, uses the PAR from your input video for your output. To specify a different PAR in the console, choose any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
    public enum Vp9ParControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp9ParControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    public enum Vp9QualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPass
        case multiPassHq
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp9QualityTuningLevel] {
            return [
                .multiPass,
                .multiPassHq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPass: return "MULTI_PASS"
            case .multiPassHq: return "MULTI_PASS_HQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
    public enum Vp9RateControlMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case vbr
        case sdkUnknown(Swift.String)

        public static var allCases: [Vp9RateControlMode] {
            return [
                .vbr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .vbr: return "VBR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value VP9.
    public struct Vp9Settings: Swift.Sendable {
        /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
        public var bitrate: Swift.Int?
        /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction.
        public var framerateControl: MediaConvertClientTypes.Vp9FramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.Vp9FramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// GOP Length (keyframe interval) in frames. Must be greater than zero.
        public var gopSize: Swift.Double?
        /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
        public var hrdBufferSize: Swift.Int?
        /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
        public var maxBitrate: Swift.Int?
        /// Optional. Specify how the service determines the pixel aspect ratio for this output. The default behavior is to use the same pixel aspect ratio as your input video.
        public var parControl: MediaConvertClientTypes.Vp9ParControl?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
        public var parDenominator: Swift.Int?
        /// Required when you set Pixel aspect ratio to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
        public var parNumerator: Swift.Int?
        /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
        public var qualityTuningLevel: MediaConvertClientTypes.Vp9QualityTuningLevel?
        /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
        public var rateControlMode: MediaConvertClientTypes.Vp9RateControlMode?

        public init(
            bitrate: Swift.Int? = nil,
            framerateControl: MediaConvertClientTypes.Vp9FramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.Vp9FramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            gopSize: Swift.Double? = nil,
            hrdBufferSize: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            parControl: MediaConvertClientTypes.Vp9ParControl? = nil,
            parDenominator: Swift.Int? = nil,
            parNumerator: Swift.Int? = nil,
            qualityTuningLevel: MediaConvertClientTypes.Vp9QualityTuningLevel? = nil,
            rateControlMode: MediaConvertClientTypes.Vp9RateControlMode? = nil
        )
        {
            self.bitrate = bitrate
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopSize = gopSize
            self.hrdBufferSize = hrdBufferSize
            self.maxBitrate = maxBitrate
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.qualityTuningLevel = qualityTuningLevel
            self.rateControlMode = rateControlMode
        }
    }
}

extension MediaConvertClientTypes {

    /// Keep the default value, Auto, for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set Adaptive quantization to a value other than Auto. Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off. Related settings: The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization, and Temporal adaptive quantization.
    public enum XavcAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case high
        case higher
        case low
        case max
        case medium
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcAdaptiveQuantization] {
            return [
                .auto,
                .high,
                .higher,
                .low,
                .max,
                .medium,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .high: return "HIGH"
            case .higher: return "HIGHER"
            case .low: return "LOW"
            case .max: return "MAX"
            case .medium: return "MEDIUM"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Choose a specific entropy encoding mode only when you want to override XAVC recommendations. If you choose the value auto, MediaConvert uses the mode that the XAVC file format specifies given this output's operating point.
    public enum XavcEntropyEncoding: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case cabac
        case cavlc
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcEntropyEncoding] {
            return [
                .auto,
                .cabac,
                .cavlc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .cabac: return "CABAC"
            case .cavlc: return "CAVLC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// If you are using the console, use the Frame rate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list. The framerates shown in the dropdown list are decimal approximations of fractions.
    public enum XavcFramerateControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initializeFromSource
        case specified
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcFramerateControl] {
            return [
                .initializeFromSource,
                .specified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initializeFromSource: return "INITIALIZE_FROM_SOURCE"
            case .specified: return "SPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
    public enum XavcFramerateConversionAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateDrop
        case frameformer
        case interpolate
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcFramerateConversionAlgorithm] {
            return [
                .duplicateDrop,
                .frameformer,
                .interpolate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateDrop: return "DUPLICATE_DROP"
            case .frameformer: return "FRAMEFORMER"
            case .interpolate: return "INTERPOLATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC profile for this output. For more information, see the Sony documentation at https://www.xavc-info.org/. Note that MediaConvert doesn't support the interlaced video XAVC operating points for XAVC_HD_INTRA_CBG. To create an interlaced XAVC output, choose the profile XAVC_HD.
    public enum XavcProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case xavc4k
        case xavc4kIntraCbg
        case xavc4kIntraVbr
        case xavcHd
        case xavcHdIntraCbg
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcProfile] {
            return [
                .xavc4k,
                .xavc4kIntraCbg,
                .xavc4kIntraVbr,
                .xavcHd,
                .xavcHdIntraCbg
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .xavc4k: return "XAVC_4K"
            case .xavc4kIntraCbg: return "XAVC_4K_INTRA_CBG"
            case .xavc4kIntraVbr: return "XAVC_4K_INTRA_VBR"
            case .xavcHd: return "XAVC_HD"
            case .xavcHdIntraCbg: return "XAVC_HD_INTRA_CBG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Frame rate to 25.
    public enum XavcSlowPal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcSlowPal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    public enum XavcSpatialAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcSpatialAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization.
    public enum XavcTemporalAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcTemporalAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC Intra 4k (CBG) Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
    public enum Xavc4kIntraCbgProfileClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case class100
        case class300
        case class480
        case sdkUnknown(Swift.String)

        public static var allCases: [Xavc4kIntraCbgProfileClass] {
            return [
                .class100,
                .class300,
                .class480
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .class100: return "CLASS_100"
            case .class300: return "CLASS_300"
            case .class480: return "CLASS_480"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Profile to the value XAVC_4K_INTRA_CBG.
    public struct Xavc4kIntraCbgProfileSettings: Swift.Sendable {
        /// Specify the XAVC Intra 4k (CBG) Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
        public var xavcClass: MediaConvertClientTypes.Xavc4kIntraCbgProfileClass?

        public init(
            xavcClass: MediaConvertClientTypes.Xavc4kIntraCbgProfileClass? = nil
        )
        {
            self.xavcClass = xavcClass
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC Intra 4k (VBR) Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
    public enum Xavc4kIntraVbrProfileClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case class100
        case class300
        case class480
        case sdkUnknown(Swift.String)

        public static var allCases: [Xavc4kIntraVbrProfileClass] {
            return [
                .class100,
                .class300,
                .class480
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .class100: return "CLASS_100"
            case .class300: return "CLASS_300"
            case .class480: return "CLASS_480"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Profile to the value XAVC_4K_INTRA_VBR.
    public struct Xavc4kIntraVbrProfileSettings: Swift.Sendable {
        /// Specify the XAVC Intra 4k (VBR) Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
        public var xavcClass: MediaConvertClientTypes.Xavc4kIntraVbrProfileClass?

        public init(
            xavcClass: MediaConvertClientTypes.Xavc4kIntraVbrProfileClass? = nil
        )
        {
            self.xavcClass = xavcClass
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC 4k (Long GOP) Bitrate Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
    public enum Xavc4kProfileBitrateClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bitrateClass100
        case bitrateClass140
        case bitrateClass200
        case sdkUnknown(Swift.String)

        public static var allCases: [Xavc4kProfileBitrateClass] {
            return [
                .bitrateClass100,
                .bitrateClass140,
                .bitrateClass200
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bitrateClass100: return "BITRATE_CLASS_100"
            case .bitrateClass140: return "BITRATE_CLASS_140"
            case .bitrateClass200: return "BITRATE_CLASS_200"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the codec profile for this output. Choose High, 8-bit, 4:2:0 (HIGH) or High, 10-bit, 4:2:2 (HIGH_422). These profiles are specified in ITU-T H.264.
    public enum Xavc4kProfileCodecProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case high422
        case sdkUnknown(Swift.String)

        public static var allCases: [Xavc4kProfileCodecProfile] {
            return [
                .high,
                .high422
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .high422: return "HIGH_422"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set Adaptive quantization to a value other than Off or Auto. Use Adaptive quantization to adjust the degree of smoothing that Flicker adaptive quantization provides.
    public enum XavcFlickerAdaptiveQuantization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcFlickerAdaptiveQuantization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify whether the encoder uses B-frames as reference frames for other pictures in the same GOP. Choose Allow to allow the encoder to use B-frames as reference frames. Choose Don't allow to prevent the encoder from using B-frames as reference frames.
    public enum XavcGopBReference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcGopBReference] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public enum Xavc4kProfileQualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPassHq
        case singlePass
        case singlePassHq
        case sdkUnknown(Swift.String)

        public static var allCases: [Xavc4kProfileQualityTuningLevel] {
            return [
                .multiPassHq,
                .singlePass,
                .singlePassHq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPassHq: return "MULTI_PASS_HQ"
            case .singlePass: return "SINGLE_PASS"
            case .singlePassHq: return "SINGLE_PASS_HQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Profile to the value XAVC_4K.
    public struct Xavc4kProfileSettings: Swift.Sendable {
        /// Specify the XAVC 4k (Long GOP) Bitrate Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
        public var bitrateClass: MediaConvertClientTypes.Xavc4kProfileBitrateClass?
        /// Specify the codec profile for this output. Choose High, 8-bit, 4:2:0 (HIGH) or High, 10-bit, 4:2:2 (HIGH_422). These profiles are specified in ITU-T H.264.
        public var codecProfile: MediaConvertClientTypes.Xavc4kProfileCodecProfile?
        /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set Adaptive quantization to a value other than Off or Auto. Use Adaptive quantization to adjust the degree of smoothing that Flicker adaptive quantization provides.
        public var flickerAdaptiveQuantization: MediaConvertClientTypes.XavcFlickerAdaptiveQuantization?
        /// Specify whether the encoder uses B-frames as reference frames for other pictures in the same GOP. Choose Allow to allow the encoder to use B-frames as reference frames. Choose Don't allow to prevent the encoder from using B-frames as reference frames.
        public var gopBReference: MediaConvertClientTypes.XavcGopBReference?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// Specify the size of the buffer that MediaConvert uses in the HRD buffer model for this output. Specify this value in bits; for example, enter five megabits as 5000000. When you don't set this value, or you set it to zero, MediaConvert calculates the default by doubling the bitrate of this output point.
        public var hrdBufferSize: Swift.Int?
        /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
        public var qualityTuningLevel: MediaConvertClientTypes.Xavc4kProfileQualityTuningLevel?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
        public var slices: Swift.Int?

        public init(
            bitrateClass: MediaConvertClientTypes.Xavc4kProfileBitrateClass? = nil,
            codecProfile: MediaConvertClientTypes.Xavc4kProfileCodecProfile? = nil,
            flickerAdaptiveQuantization: MediaConvertClientTypes.XavcFlickerAdaptiveQuantization? = nil,
            gopBReference: MediaConvertClientTypes.XavcGopBReference? = nil,
            gopClosedCadence: Swift.Int? = nil,
            hrdBufferSize: Swift.Int? = nil,
            qualityTuningLevel: MediaConvertClientTypes.Xavc4kProfileQualityTuningLevel? = nil,
            slices: Swift.Int? = nil
        )
        {
            self.bitrateClass = bitrateClass
            self.codecProfile = codecProfile
            self.flickerAdaptiveQuantization = flickerAdaptiveQuantization
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.hrdBufferSize = hrdBufferSize
            self.qualityTuningLevel = qualityTuningLevel
            self.slices = slices
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC Intra HD (CBG) Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
    public enum XavcHdIntraCbgProfileClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case class100
        case class200
        case class50
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcHdIntraCbgProfileClass] {
            return [
                .class100,
                .class200,
                .class50
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .class100: return "CLASS_100"
            case .class200: return "CLASS_200"
            case .class50: return "CLASS_50"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Profile to the value XAVC_HD_INTRA_CBG.
    public struct XavcHdIntraCbgProfileSettings: Swift.Sendable {
        /// Specify the XAVC Intra HD (CBG) Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
        public var xavcClass: MediaConvertClientTypes.XavcHdIntraCbgProfileClass?

        public init(
            xavcClass: MediaConvertClientTypes.XavcHdIntraCbgProfileClass? = nil
        )
        {
            self.xavcClass = xavcClass
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the XAVC HD (Long GOP) Bitrate Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
    public enum XavcHdProfileBitrateClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bitrateClass25
        case bitrateClass35
        case bitrateClass50
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcHdProfileBitrateClass] {
            return [
                .bitrateClass25,
                .bitrateClass35,
                .bitrateClass50
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bitrateClass25: return "BITRATE_CLASS_25"
            case .bitrateClass35: return "BITRATE_CLASS_35"
            case .bitrateClass50: return "BITRATE_CLASS_50"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
    public enum XavcInterlaceMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomField
        case followBottomField
        case followTopField
        case progressive
        case topField
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcInterlaceMode] {
            return [
                .bottomField,
                .followBottomField,
                .followTopField,
                .progressive,
                .topField
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomField: return "BOTTOM_FIELD"
            case .followBottomField: return "FOLLOW_BOTTOM_FIELD"
            case .followTopField: return "FOLLOW_TOP_FIELD"
            case .progressive: return "PROGRESSIVE"
            case .topField: return "TOP_FIELD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
    public enum XavcHdProfileQualityTuningLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiPassHq
        case singlePass
        case singlePassHq
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcHdProfileQualityTuningLevel] {
            return [
                .multiPassHq,
                .singlePass,
                .singlePassHq
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiPassHq: return "MULTI_PASS_HQ"
            case .singlePass: return "SINGLE_PASS"
            case .singlePassHq: return "SINGLE_PASS_HQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Ignore this setting unless you set Frame rate (framerateNumerator divided by framerateDenominator) to 29.970. If your input framerate is 23.976, choose Hard. Otherwise, keep the default value None. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-telecine-and-inverse-telecine.html.
    public enum XavcHdProfileTelecine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hard
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [XavcHdProfileTelecine] {
            return [
                .hard,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hard: return "HARD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Profile to the value XAVC_HD.
    public struct XavcHdProfileSettings: Swift.Sendable {
        /// Specify the XAVC HD (Long GOP) Bitrate Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
        public var bitrateClass: MediaConvertClientTypes.XavcHdProfileBitrateClass?
        /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. Enable this setting to have the encoder reduce I-frame pop. I-frame pop appears as a visual flicker that can arise when the encoder saves bits by copying some macroblocks many times from frame to frame, and then refreshes them at the I-frame. When you enable this setting, the encoder updates these macroblocks slightly more often to smooth out the flicker. This setting is disabled by default. Related setting: In addition to enabling this setting, you must also set Adaptive quantization to a value other than Off or Auto. Use Adaptive quantization to adjust the degree of smoothing that Flicker adaptive quantization provides.
        public var flickerAdaptiveQuantization: MediaConvertClientTypes.XavcFlickerAdaptiveQuantization?
        /// Specify whether the encoder uses B-frames as reference frames for other pictures in the same GOP. Choose Allow to allow the encoder to use B-frames as reference frames. Choose Don't allow to prevent the encoder from using B-frames as reference frames.
        public var gopBReference: MediaConvertClientTypes.XavcGopBReference?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public var gopClosedCadence: Swift.Int?
        /// Specify the size of the buffer that MediaConvert uses in the HRD buffer model for this output. Specify this value in bits; for example, enter five megabits as 5000000. When you don't set this value, or you set it to zero, MediaConvert calculates the default by doubling the bitrate of this output point.
        public var hrdBufferSize: Swift.Int?
        /// Choose the scan line type for the output. Keep the default value, Progressive to create a progressive output, regardless of the scan type of your input. Use Top field first or Bottom field first to create an output that's interlaced with the same field polarity throughout. Use Follow, default top or Follow, default bottom to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
        public var interlaceMode: MediaConvertClientTypes.XavcInterlaceMode?
        /// Optional. Use Quality tuning level to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
        public var qualityTuningLevel: MediaConvertClientTypes.XavcHdProfileQualityTuningLevel?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
        public var slices: Swift.Int?
        /// Ignore this setting unless you set Frame rate (framerateNumerator divided by framerateDenominator) to 29.970. If your input framerate is 23.976, choose Hard. Otherwise, keep the default value None. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-telecine-and-inverse-telecine.html.
        public var telecine: MediaConvertClientTypes.XavcHdProfileTelecine?

        public init(
            bitrateClass: MediaConvertClientTypes.XavcHdProfileBitrateClass? = nil,
            flickerAdaptiveQuantization: MediaConvertClientTypes.XavcFlickerAdaptiveQuantization? = nil,
            gopBReference: MediaConvertClientTypes.XavcGopBReference? = nil,
            gopClosedCadence: Swift.Int? = nil,
            hrdBufferSize: Swift.Int? = nil,
            interlaceMode: MediaConvertClientTypes.XavcInterlaceMode? = nil,
            qualityTuningLevel: MediaConvertClientTypes.XavcHdProfileQualityTuningLevel? = nil,
            slices: Swift.Int? = nil,
            telecine: MediaConvertClientTypes.XavcHdProfileTelecine? = nil
        )
        {
            self.bitrateClass = bitrateClass
            self.flickerAdaptiveQuantization = flickerAdaptiveQuantization
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.hrdBufferSize = hrdBufferSize
            self.interlaceMode = interlaceMode
            self.qualityTuningLevel = qualityTuningLevel
            self.slices = slices
            self.telecine = telecine
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Codec to the value XAVC.
    public struct XavcSettings: Swift.Sendable {
        /// Keep the default value, Auto, for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set Adaptive quantization to a value other than Auto. Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off. Related settings: The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization, and Temporal adaptive quantization.
        public var adaptiveQuantization: MediaConvertClientTypes.XavcAdaptiveQuantization?
        /// Optional. Choose a specific entropy encoding mode only when you want to override XAVC recommendations. If you choose the value auto, MediaConvert uses the mode that the XAVC file format specifies given this output's operating point.
        public var entropyEncoding: MediaConvertClientTypes.XavcEntropyEncoding?
        /// If you are using the console, use the Frame rate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list. The framerates shown in the dropdown list are decimal approximations of fractions.
        public var framerateControl: MediaConvertClientTypes.XavcFramerateControl?
        /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. For numerically simple conversions, such as 60 fps to 30 fps: We recommend that you keep the default value, Drop duplicate. For numerically complex conversions, to avoid stutter: Choose Interpolate. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence: Choose FrameFormer to do motion-compensated interpolation. FrameFormer uses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost. When you choose FrameFormer, your input video resolution must be at least 128x96.
        public var framerateConversionAlgorithm: MediaConvertClientTypes.XavcFramerateConversionAlgorithm?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Frame rate. In this example, specify 23.976.
        public var framerateDenominator: Swift.Int?
        /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
        public var framerateNumerator: Swift.Int?
        /// Specify the XAVC profile for this output. For more information, see the Sony documentation at https://www.xavc-info.org/. Note that MediaConvert doesn't support the interlaced video XAVC operating points for XAVC_HD_INTRA_CBG. To create an interlaced XAVC output, choose the profile XAVC_HD.
        public var profile: MediaConvertClientTypes.XavcProfile?
        /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Frame rate to 25.
        public var slowPal: MediaConvertClientTypes.XavcSlowPal?
        /// Ignore this setting unless your downstream workflow requires that you specify it explicitly. Otherwise, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness or by enabling a noise reducer filter. The Softness setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
        public var softness: Swift.Int?
        /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled, to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
        public var spatialAdaptiveQuantization: MediaConvertClientTypes.XavcSpatialAdaptiveQuantization?
        /// The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization.
        public var temporalAdaptiveQuantization: MediaConvertClientTypes.XavcTemporalAdaptiveQuantization?
        /// Required when you set Profile to the value XAVC_4K_INTRA_CBG.
        public var xavc4kIntraCbgProfileSettings: MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings?
        /// Required when you set Profile to the value XAVC_4K_INTRA_VBR.
        public var xavc4kIntraVbrProfileSettings: MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings?
        /// Required when you set Profile to the value XAVC_4K.
        public var xavc4kProfileSettings: MediaConvertClientTypes.Xavc4kProfileSettings?
        /// Required when you set Profile to the value XAVC_HD_INTRA_CBG.
        public var xavcHdIntraCbgProfileSettings: MediaConvertClientTypes.XavcHdIntraCbgProfileSettings?
        /// Required when you set Profile to the value XAVC_HD.
        public var xavcHdProfileSettings: MediaConvertClientTypes.XavcHdProfileSettings?

        public init(
            adaptiveQuantization: MediaConvertClientTypes.XavcAdaptiveQuantization? = nil,
            entropyEncoding: MediaConvertClientTypes.XavcEntropyEncoding? = nil,
            framerateControl: MediaConvertClientTypes.XavcFramerateControl? = nil,
            framerateConversionAlgorithm: MediaConvertClientTypes.XavcFramerateConversionAlgorithm? = nil,
            framerateDenominator: Swift.Int? = nil,
            framerateNumerator: Swift.Int? = nil,
            profile: MediaConvertClientTypes.XavcProfile? = nil,
            slowPal: MediaConvertClientTypes.XavcSlowPal? = nil,
            softness: Swift.Int? = nil,
            spatialAdaptiveQuantization: MediaConvertClientTypes.XavcSpatialAdaptiveQuantization? = nil,
            temporalAdaptiveQuantization: MediaConvertClientTypes.XavcTemporalAdaptiveQuantization? = nil,
            xavc4kIntraCbgProfileSettings: MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings? = nil,
            xavc4kIntraVbrProfileSettings: MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings? = nil,
            xavc4kProfileSettings: MediaConvertClientTypes.Xavc4kProfileSettings? = nil,
            xavcHdIntraCbgProfileSettings: MediaConvertClientTypes.XavcHdIntraCbgProfileSettings? = nil,
            xavcHdProfileSettings: MediaConvertClientTypes.XavcHdProfileSettings? = nil
        )
        {
            self.adaptiveQuantization = adaptiveQuantization
            self.entropyEncoding = entropyEncoding
            self.framerateControl = framerateControl
            self.framerateConversionAlgorithm = framerateConversionAlgorithm
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.profile = profile
            self.slowPal = slowPal
            self.softness = softness
            self.spatialAdaptiveQuantization = spatialAdaptiveQuantization
            self.temporalAdaptiveQuantization = temporalAdaptiveQuantization
            self.xavc4kIntraCbgProfileSettings = xavc4kIntraCbgProfileSettings
            self.xavc4kIntraVbrProfileSettings = xavc4kIntraVbrProfileSettings
            self.xavc4kProfileSettings = xavc4kProfileSettings
            self.xavcHdIntraCbgProfileSettings = xavcHdIntraCbgProfileSettings
            self.xavcHdProfileSettings = xavcHdProfileSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Video codec settings contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec. For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AV1, Av1Settings * AVC_INTRA, AvcIntraSettings * FRAME_CAPTURE, FrameCaptureSettings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * UNCOMPRESSED, UncompressedSettings * VC3, Vc3Settings * VP8, Vp8Settings * VP9, Vp9Settings * XAVC, XavcSettings
    public struct VideoCodecSettings: Swift.Sendable {
        /// Required when you set Codec, under VideoDescription>CodecSettings to the value AV1.
        public var av1Settings: MediaConvertClientTypes.Av1Settings?
        /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
        public var avcIntraSettings: MediaConvertClientTypes.AvcIntraSettings?
        /// Specifies the video codec. This must be equal to one of the enum values defined by the object VideoCodec. To passthrough the video stream of your input JPEG2000, VC-3, AVC-INTRA or Apple ProRes video without any video encoding: Choose Passthrough. If you have multiple input videos, note that they must have identical encoding attributes. When you choose Passthrough, your output container must be MXF or QuickTime MOV.
        public var codec: MediaConvertClientTypes.VideoCodec?
        /// Required when you set Codec to the value FRAME_CAPTURE.
        public var frameCaptureSettings: MediaConvertClientTypes.FrameCaptureSettings?
        /// Required when you set Codec to the value H_264.
        public var h264Settings: MediaConvertClientTypes.H264Settings?
        /// Settings for H265 codec
        public var h265Settings: MediaConvertClientTypes.H265Settings?
        /// Required when you set Codec to the value MPEG2.
        public var mpeg2Settings: MediaConvertClientTypes.Mpeg2Settings?
        /// Required when you set Codec to the value PRORES.
        public var proresSettings: MediaConvertClientTypes.ProresSettings?
        /// Required when you set Codec, under VideoDescription>CodecSettings to the value UNCOMPRESSED.
        public var uncompressedSettings: MediaConvertClientTypes.UncompressedSettings?
        /// Required when you set Codec to the value VC3
        public var vc3Settings: MediaConvertClientTypes.Vc3Settings?
        /// Required when you set Codec to the value VP8.
        public var vp8Settings: MediaConvertClientTypes.Vp8Settings?
        /// Required when you set Codec to the value VP9.
        public var vp9Settings: MediaConvertClientTypes.Vp9Settings?
        /// Required when you set Codec to the value XAVC.
        public var xavcSettings: MediaConvertClientTypes.XavcSettings?

        public init(
            av1Settings: MediaConvertClientTypes.Av1Settings? = nil,
            avcIntraSettings: MediaConvertClientTypes.AvcIntraSettings? = nil,
            codec: MediaConvertClientTypes.VideoCodec? = nil,
            frameCaptureSettings: MediaConvertClientTypes.FrameCaptureSettings? = nil,
            h264Settings: MediaConvertClientTypes.H264Settings? = nil,
            h265Settings: MediaConvertClientTypes.H265Settings? = nil,
            mpeg2Settings: MediaConvertClientTypes.Mpeg2Settings? = nil,
            proresSettings: MediaConvertClientTypes.ProresSettings? = nil,
            uncompressedSettings: MediaConvertClientTypes.UncompressedSettings? = nil,
            vc3Settings: MediaConvertClientTypes.Vc3Settings? = nil,
            vp8Settings: MediaConvertClientTypes.Vp8Settings? = nil,
            vp9Settings: MediaConvertClientTypes.Vp9Settings? = nil,
            xavcSettings: MediaConvertClientTypes.XavcSettings? = nil
        )
        {
            self.av1Settings = av1Settings
            self.avcIntraSettings = avcIntraSettings
            self.codec = codec
            self.frameCaptureSettings = frameCaptureSettings
            self.h264Settings = h264Settings
            self.h265Settings = h265Settings
            self.mpeg2Settings = mpeg2Settings
            self.proresSettings = proresSettings
            self.uncompressedSettings = uncompressedSettings
            self.vc3Settings = vc3Settings
            self.vp8Settings = vp8Settings
            self.vp9Settings = vp9Settings
            self.xavcSettings = xavcSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Choose Insert for this setting to include color metadata in this output. Choose Ignore to exclude color metadata from this output. If you don't specify a value, the service sets this to Insert by default.
    public enum ColorMetadata: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [ColorMetadata] {
            return [
                .ignore,
                .insert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Applies only to 29.97 fps outputs. When this feature is enabled, the service will use drop-frame timecode on outputs. If it is not possible to use drop-frame timecode, the system will fall back to non-drop-frame. This setting is enabled by default when Timecode insertion is enabled.
    public enum DropFrameTimecode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DropFrameTimecode] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Respond to AFD to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to NONE. A preferred implementation of this workflow is to set RespondToAfd to and set AfdSignaling to AUTO. * Choose None to remove all input AFD values from this output.
    public enum RespondToAfd: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case respond
        case sdkUnknown(Swift.String)

        public static var allCases: [RespondToAfd] {
            return [
                .none,
                .passthrough,
                .respond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case .respond: return "RESPOND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the video Scaling behavior when your output has a different resolution than your input. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/video-scaling.html
    public enum ScalingBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case fill
        case fit
        case fitNoUpscale
        case stretchToOutput
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingBehavior] {
            return [
                .default,
                .fill,
                .fit,
                .fitNoUpscale,
                .stretchToOutput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .fill: return "FILL"
            case .fit: return "FIT"
            case .fitNoUpscale: return "FIT_NO_UPSCALE"
            case .stretchToOutput: return "STRETCH_TO_OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration. In the console, these settings are located under Job > Job settings > Timecode configuration. Note - Timecode source under input settings does not affect the timecodes that are inserted in the output. Source under Job settings > Timecode configuration does.
    public enum VideoTimecodeInsertion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case picTimingSei
        case sdkUnknown(Swift.String)

        public static var allCases: [VideoTimecodeInsertion] {
            return [
                .disabled,
                .picTimingSei
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .picTimingSei: return "PIC_TIMING_SEI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify YUV limits and RGB tolerances when you set Sample range conversion to Limited range clip.
    public struct ClipLimits: Swift.Sendable {
        /// Specify the Maximum RGB color sample range tolerance for your output. MediaConvert corrects any YUV values that, when converted to RGB, would be outside the upper tolerance that you specify. Enter an integer from 90 to 105 as an offset percentage to the maximum possible value. Leave blank to use the default value 100. When you specify a value for Maximum RGB tolerance, you must set Sample range conversion to Limited range clip.
        public var maximumRGBTolerance: Swift.Int?
        /// Specify the Maximum YUV color sample limit. MediaConvert conforms any pixels in your input above the value that you specify to typical limited range bounds. Enter an integer from 920 to 1023. Leave blank to use the default value 940. The value that you enter applies to 10-bit ranges. For 8-bit ranges, MediaConvert automatically scales this value down. When you specify a value for Maximum YUV, you must set Sample range conversion to Limited range clip.
        public var maximumYUV: Swift.Int?
        /// Specify the Minimum RGB color sample range tolerance for your output. MediaConvert corrects any YUV values that, when converted to RGB, would be outside the lower tolerance that you specify. Enter an integer from -5 to 10 as an offset percentage to the minimum possible value. Leave blank to use the default value 0. When you specify a value for Minimum RGB tolerance, you must set Sample range conversion to Limited range clip.
        public var minimumRGBTolerance: Swift.Int?
        /// Specify the Minimum YUV color sample limit. MediaConvert conforms any pixels in your input below the value that you specify to typical limited range bounds. Enter an integer from 0 to 128. Leave blank to use the default value 64. The value that you enter applies to 10-bit ranges. For 8-bit ranges, MediaConvert automatically scales this value down. When you specify a value for Minumum YUV, you must set Sample range conversion to Limited range clip.
        public var minimumYUV: Swift.Int?

        public init(
            maximumRGBTolerance: Swift.Int? = nil,
            maximumYUV: Swift.Int? = nil,
            minimumRGBTolerance: Swift.Int? = nil,
            minimumYUV: Swift.Int? = nil
        )
        {
            self.maximumRGBTolerance = maximumRGBTolerance
            self.maximumYUV = maximumYUV
            self.minimumRGBTolerance = minimumRGBTolerance
            self.minimumYUV = minimumYUV
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses tone mapping to approximate the outcome of manually regrading from HDR to SDR. When you specify an output color space, MediaConvert uses the following color space metadata, which includes color primaries, transfer characteristics, and matrix coefficients:
    ///
    /// * HDR 10: BT.2020, PQ, BT.2020 non-constant
    ///
    /// * HLG 2020: BT.2020, HLG, BT.2020 non-constant
    ///
    /// * P3DCI (Theater): DCIP3, SMPTE 428M, BT.709
    ///
    /// * P3D65 (SDR): Display P3, sRGB, BT.709
    ///
    /// * P3D65 (HDR): Display P3, PQ, BT.709
    public enum ColorSpaceConversion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case force601
        case force709
        case forceHdr10
        case forceHlg2020
        case forceP3d65Hdr
        case forceP3d65Sdr
        case forceP3dci
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ColorSpaceConversion] {
            return [
                .force601,
                .force709,
                .forceHdr10,
                .forceHlg2020,
                .forceP3d65Hdr,
                .forceP3d65Sdr,
                .forceP3dci,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .force601: return "FORCE_601"
            case .force709: return "FORCE_709"
            case .forceHdr10: return "FORCE_HDR10"
            case .forceHlg2020: return "FORCE_HLG_2020"
            case .forceP3d65Hdr: return "FORCE_P3D65_HDR"
            case .forceP3d65Sdr: return "FORCE_P3D65_SDR"
            case .forceP3dci: return "FORCE_P3DCI"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how MediaConvert maps brightness and colors from your HDR input to your SDR output. The mode that you select represents a creative choice, with different tradeoffs in the details and tones of your output. To maintain details in bright or saturated areas of your output: Choose Preserve details. For some sources, your SDR output may look less bright and less saturated when compared to your HDR source. MediaConvert automatically applies this mode for HLG sources, regardless of your choice. For a bright and saturated output: Choose Vibrant. We recommend that you choose this mode when any of your source content is HDR10, and for the best results when it is mastered for 1000 nits. You may notice loss of details in bright or saturated areas of your output. HDR to SDR tone mapping has no effect when your input is SDR.
    public enum HDRToSDRToneMapper: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case preserveDetails
        case vibrant
        case sdkUnknown(Swift.String)

        public static var allCases: [HDRToSDRToneMapper] {
            return [
                .preserveDetails,
                .vibrant
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .preserveDetails: return "PRESERVE_DETAILS"
            case .vibrant: return "VIBRANT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how MediaConvert limits the color sample range for this output. To create a limited range output from a full range input: Choose Limited range squeeze. For full range inputs, MediaConvert performs a linear offset to color samples equally across all pixels and frames. Color samples in 10-bit outputs are limited to 64 through 940, and 8-bit outputs are limited to 16 through 235. Note: For limited range inputs, values for color samples are passed through to your output unchanged. MediaConvert does not limit the sample range. To correct pixels in your input that are out of range or out of gamut: Choose Limited range clip. Use for broadcast applications. MediaConvert conforms any pixels outside of the values that you specify under Minimum YUV and Maximum YUV to limited range bounds. MediaConvert also corrects any YUV values that, when converted to RGB, would be outside the bounds you specify under Minimum RGB tolerance and Maximum RGB tolerance. With either limited range conversion, MediaConvert writes the sample range metadata in the output.
    public enum SampleRangeConversion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case limitedRangeClip
        case limitedRangeSqueeze
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [SampleRangeConversion] {
            return [
                .limitedRangeClip,
                .limitedRangeSqueeze,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .limitedRangeClip: return "LIMITED_RANGE_CLIP"
            case .limitedRangeSqueeze: return "LIMITED_RANGE_SQUEEZE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for color correction.
    public struct ColorCorrector: Swift.Sendable {
        /// Brightness level.
        public var brightness: Swift.Int?
        /// Specify YUV limits and RGB tolerances when you set Sample range conversion to Limited range clip.
        public var clipLimits: MediaConvertClientTypes.ClipLimits?
        /// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses tone mapping to approximate the outcome of manually regrading from HDR to SDR. When you specify an output color space, MediaConvert uses the following color space metadata, which includes color primaries, transfer characteristics, and matrix coefficients:
        ///
        /// * HDR 10: BT.2020, PQ, BT.2020 non-constant
        ///
        /// * HLG 2020: BT.2020, HLG, BT.2020 non-constant
        ///
        /// * P3DCI (Theater): DCIP3, SMPTE 428M, BT.709
        ///
        /// * P3D65 (SDR): Display P3, sRGB, BT.709
        ///
        /// * P3D65 (HDR): Display P3, PQ, BT.709
        public var colorSpaceConversion: MediaConvertClientTypes.ColorSpaceConversion?
        /// Contrast level.
        public var contrast: Swift.Int?
        /// Use these settings when you convert to the HDR 10 color space. Specify the SMPTE ST 2086 Mastering Display Color Volume static metadata that you want signaled in the output. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator. When you set Color space conversion to HDR 10, these settings are required. You must set values for Max frame average light level and Max content light level; these settings don't have a default value. The default values for the other HDR 10 metadata settings are defined by the P3D65 color space. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
        public var hdr10Metadata: MediaConvertClientTypes.Hdr10Metadata?
        /// Specify how MediaConvert maps brightness and colors from your HDR input to your SDR output. The mode that you select represents a creative choice, with different tradeoffs in the details and tones of your output. To maintain details in bright or saturated areas of your output: Choose Preserve details. For some sources, your SDR output may look less bright and less saturated when compared to your HDR source. MediaConvert automatically applies this mode for HLG sources, regardless of your choice. For a bright and saturated output: Choose Vibrant. We recommend that you choose this mode when any of your source content is HDR10, and for the best results when it is mastered for 1000 nits. You may notice loss of details in bright or saturated areas of your output. HDR to SDR tone mapping has no effect when your input is SDR.
        public var hdrToSdrToneMapper: MediaConvertClientTypes.HDRToSDRToneMapper?
        /// Hue in degrees.
        public var hue: Swift.Int?
        /// Specify the maximum mastering display luminance. Enter an integer from 0 to 2147483647, in units of 0.0001 nits. For example, enter 10000000 for 1000 nits.
        public var maxLuminance: Swift.Int?
        /// Specify how MediaConvert limits the color sample range for this output. To create a limited range output from a full range input: Choose Limited range squeeze. For full range inputs, MediaConvert performs a linear offset to color samples equally across all pixels and frames. Color samples in 10-bit outputs are limited to 64 through 940, and 8-bit outputs are limited to 16 through 235. Note: For limited range inputs, values for color samples are passed through to your output unchanged. MediaConvert does not limit the sample range. To correct pixels in your input that are out of range or out of gamut: Choose Limited range clip. Use for broadcast applications. MediaConvert conforms any pixels outside of the values that you specify under Minimum YUV and Maximum YUV to limited range bounds. MediaConvert also corrects any YUV values that, when converted to RGB, would be outside the bounds you specify under Minimum RGB tolerance and Maximum RGB tolerance. With either limited range conversion, MediaConvert writes the sample range metadata in the output.
        public var sampleRangeConversion: MediaConvertClientTypes.SampleRangeConversion?
        /// Saturation level.
        public var saturation: Swift.Int?
        /// Specify the reference white level, in nits, for all of your SDR inputs. Use to correct brightness levels within HDR10 outputs. The following color metadata must be present in your SDR input: color primaries, transfer characteristics, and matrix coefficients. If your SDR input has missing color metadata, or if you want to correct input color metadata, manually specify a color space in the input video selector. For 1,000 nit peak brightness displays, we recommend that you set SDR reference white level to 203 (according to ITU-R BT.2408). Leave blank to use the default value of 100, or specify an integer from 100 to 1000.
        public var sdrReferenceWhiteLevel: Swift.Int?

        public init(
            brightness: Swift.Int? = nil,
            clipLimits: MediaConvertClientTypes.ClipLimits? = nil,
            colorSpaceConversion: MediaConvertClientTypes.ColorSpaceConversion? = nil,
            contrast: Swift.Int? = nil,
            hdr10Metadata: MediaConvertClientTypes.Hdr10Metadata? = nil,
            hdrToSdrToneMapper: MediaConvertClientTypes.HDRToSDRToneMapper? = nil,
            hue: Swift.Int? = nil,
            maxLuminance: Swift.Int? = nil,
            sampleRangeConversion: MediaConvertClientTypes.SampleRangeConversion? = nil,
            saturation: Swift.Int? = nil,
            sdrReferenceWhiteLevel: Swift.Int? = nil
        )
        {
            self.brightness = brightness
            self.clipLimits = clipLimits
            self.colorSpaceConversion = colorSpaceConversion
            self.contrast = contrast
            self.hdr10Metadata = hdr10Metadata
            self.hdrToSdrToneMapper = hdrToSdrToneMapper
            self.hue = hue
            self.maxLuminance = maxLuminance
            self.sampleRangeConversion = sampleRangeConversion
            self.saturation = saturation
            self.sdrReferenceWhiteLevel = sdrReferenceWhiteLevel
        }
    }
}

extension MediaConvertClientTypes {

    /// Only applies when you set Deinterlace mode to Deinterlace or Adaptive. Interpolate produces sharper pictures, while blend produces smoother motion. If your source file includes a ticker, such as a scrolling headline at the bottom of the frame: Choose Interpolate ticker or Blend ticker. To apply field doubling: Choose Linear interpolation. Note that Linear interpolation may introduce video artifacts into your output.
    public enum DeinterlaceAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case blend
        case blendTicker
        case interpolate
        case interpolateTicker
        case linearInterpolation
        case sdkUnknown(Swift.String)

        public static var allCases: [DeinterlaceAlgorithm] {
            return [
                .blend,
                .blendTicker,
                .interpolate,
                .interpolateTicker,
                .linearInterpolation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .blend: return "BLEND"
            case .blendTicker: return "BLEND_TICKER"
            case .interpolate: return "INTERPOLATE"
            case .interpolateTicker: return "INTERPOLATE_TICKER"
            case .linearInterpolation: return "LINEAR_INTERPOLATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// * When set to NORMAL (default), the deinterlacer does not convert frames that are tagged in metadata as progressive. It will only convert those that are tagged as some other type. - When set to FORCE_ALL_FRAMES, the deinterlacer converts every frame to progressive - even those that are already tagged as progressive. Turn Force mode on only if there is a good chance that the metadata has tagged frames as progressive when they are not progressive. Do not turn on otherwise; processing frames that are already progressive into progressive will probably result in lower quality video.
    public enum DeinterlacerControl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forceAllFrames
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [DeinterlacerControl] {
            return [
                .forceAllFrames,
                .normal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forceAllFrames: return "FORCE_ALL_FRAMES"
            case .normal: return "NORMAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Deinterlacer to choose how the service will do deinterlacing. Default is Deinterlace.
    ///
    /// * Deinterlace converts interlaced to progressive.
    ///
    /// * Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p.
    ///
    /// * Adaptive auto-detects and converts to progressive.
    public enum DeinterlacerMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adaptive
        case deinterlace
        case inverseTelecine
        case sdkUnknown(Swift.String)

        public static var allCases: [DeinterlacerMode] {
            return [
                .adaptive,
                .deinterlace,
                .inverseTelecine
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adaptive: return "ADAPTIVE"
            case .deinterlace: return "DEINTERLACE"
            case .inverseTelecine: return "INVERSE_TELECINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for deinterlacer
    public struct Deinterlacer: Swift.Sendable {
        /// Only applies when you set Deinterlace mode to Deinterlace or Adaptive. Interpolate produces sharper pictures, while blend produces smoother motion. If your source file includes a ticker, such as a scrolling headline at the bottom of the frame: Choose Interpolate ticker or Blend ticker. To apply field doubling: Choose Linear interpolation. Note that Linear interpolation may introduce video artifacts into your output.
        public var algorithm: MediaConvertClientTypes.DeinterlaceAlgorithm?
        /// * When set to NORMAL (default), the deinterlacer does not convert frames that are tagged in metadata as progressive. It will only convert those that are tagged as some other type. - When set to FORCE_ALL_FRAMES, the deinterlacer converts every frame to progressive - even those that are already tagged as progressive. Turn Force mode on only if there is a good chance that the metadata has tagged frames as progressive when they are not progressive. Do not turn on otherwise; processing frames that are already progressive into progressive will probably result in lower quality video.
        public var control: MediaConvertClientTypes.DeinterlacerControl?
        /// Use Deinterlacer to choose how the service will do deinterlacing. Default is Deinterlace.
        ///
        /// * Deinterlace converts interlaced to progressive.
        ///
        /// * Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p.
        ///
        /// * Adaptive auto-detects and converts to progressive.
        public var mode: MediaConvertClientTypes.DeinterlacerMode?

        public init(
            algorithm: MediaConvertClientTypes.DeinterlaceAlgorithm? = nil,
            control: MediaConvertClientTypes.DeinterlacerControl? = nil,
            mode: MediaConvertClientTypes.DeinterlacerMode? = nil
        )
        {
            self.algorithm = algorithm
            self.control = control
            self.mode = mode
        }
    }
}

extension MediaConvertClientTypes {

    /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
    public struct DolbyVisionLevel6Metadata: Swift.Sendable {
        /// Maximum Content Light Level. Static HDR metadata that corresponds to the brightest pixel in the entire stream. Measured in nits.
        public var maxCll: Swift.Int?
        /// Maximum Frame-Average Light Level. Static HDR metadata that corresponds to the highest frame-average brightness in the entire stream. Measured in nits.
        public var maxFall: Swift.Int?

        public init(
            maxCll: Swift.Int? = nil,
            maxFall: Swift.Int? = nil
        )
        {
            self.maxCll = maxCll
            self.maxFall = maxFall
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
    public enum DolbyVisionLevel6Mode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case passthrough
        case recalculate
        case specify
        case sdkUnknown(Swift.String)

        public static var allCases: [DolbyVisionLevel6Mode] {
            return [
                .passthrough,
                .recalculate,
                .specify
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .passthrough: return "PASSTHROUGH"
            case .recalculate: return "RECALCULATE"
            case .specify: return "SPECIFY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
    public enum DolbyVisionMapping: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hdr101000
        case hdr10Nomap
        case sdkUnknown(Swift.String)

        public static var allCases: [DolbyVisionMapping] {
            return [
                .hdr101000,
                .hdr10Nomap
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hdr101000: return "HDR10_1000"
            case .hdr10Nomap: return "HDR10_NOMAP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Required when you enable Dolby Vision. Use Profile 5 to include frame-interleaved Dolby Vision metadata in your output. Your input must include Dolby Vision metadata or an HDR10 YUV color space. Use Profile 8.1 to include frame-interleaved Dolby Vision metadata and HDR10 metadata in your output. Your input must include Dolby Vision metadata.
    public enum DolbyVisionProfile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case profile5
        case profile81
        case sdkUnknown(Swift.String)

        public static var allCases: [DolbyVisionProfile] {
            return [
                .profile5,
                .profile81
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .profile5: return "PROFILE_5"
            case .profile81: return "PROFILE_8_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Create Dolby Vision Profile 5 or Profile 8.1 compatible video output.
    public struct DolbyVision: Swift.Sendable {
        /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
        public var l6Metadata: MediaConvertClientTypes.DolbyVisionLevel6Metadata?
        /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
        public var l6Mode: MediaConvertClientTypes.DolbyVisionLevel6Mode?
        /// Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
        public var mapping: MediaConvertClientTypes.DolbyVisionMapping?
        /// Required when you enable Dolby Vision. Use Profile 5 to include frame-interleaved Dolby Vision metadata in your output. Your input must include Dolby Vision metadata or an HDR10 YUV color space. Use Profile 8.1 to include frame-interleaved Dolby Vision metadata and HDR10 metadata in your output. Your input must include Dolby Vision metadata.
        public var profile: MediaConvertClientTypes.DolbyVisionProfile?

        public init(
            l6Metadata: MediaConvertClientTypes.DolbyVisionLevel6Metadata? = nil,
            l6Mode: MediaConvertClientTypes.DolbyVisionLevel6Mode? = nil,
            mapping: MediaConvertClientTypes.DolbyVisionMapping? = nil,
            profile: MediaConvertClientTypes.DolbyVisionProfile? = nil
        )
        {
            self.l6Metadata = l6Metadata
            self.l6Mode = l6Mode
            self.mapping = mapping
            self.profile = profile
        }
    }
}

extension MediaConvertClientTypes {

    /// Setting for HDR10+ metadata insertion
    public struct Hdr10Plus: Swift.Sendable {
        /// Specify the HDR10+ mastering display normalized peak luminance, in nits. This is the normalized actual peak luminance of the mastering display, as defined by ST 2094-40.
        public var masteringMonitorNits: Swift.Int?
        /// Specify the HDR10+ target display nominal peak luminance, in nits. This is the nominal maximum luminance of the target display as defined by ST 2094-40.
        public var targetMonitorNits: Swift.Int?

        public init(
            masteringMonitorNits: Swift.Int? = nil,
            targetMonitorNits: Swift.Int? = nil
        )
        {
            self.masteringMonitorNits = masteringMonitorNits
            self.targetMonitorNits = targetMonitorNits
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Noise reducer filter to select one of the following spatial image filtering functions. To use this setting, you must also enable Noise reducer. * Bilateral preserves edges while reducing noise. * Mean (softest), Gaussian, Lanczos, and Sharpen (sharpest) do convolution filtering. * Conserve does min/max noise reduction. * Spatial does frequency-domain filtering based on JND principles. * Temporal optimizes video quality for complex motion.
    public enum NoiseReducerFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bilateral
        case conserve
        case gaussian
        case lanczos
        case mean
        case sharpen
        case spatial
        case temporal
        case sdkUnknown(Swift.String)

        public static var allCases: [NoiseReducerFilter] {
            return [
                .bilateral,
                .conserve,
                .gaussian,
                .lanczos,
                .mean,
                .sharpen,
                .spatial,
                .temporal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bilateral: return "BILATERAL"
            case .conserve: return "CONSERVE"
            case .gaussian: return "GAUSSIAN"
            case .lanczos: return "LANCZOS"
            case .mean: return "MEAN"
            case .sharpen: return "SHARPEN"
            case .spatial: return "SPATIAL"
            case .temporal: return "TEMPORAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for a noise reducer filter
    public struct NoiseReducerFilterSettings: Swift.Sendable {
        /// Relative strength of noise reducing filter. Higher values produce stronger filtering.
        public var strength: Swift.Int?

        public init(
            strength: Swift.Int? = nil
        )
        {
            self.strength = strength
        }
    }
}

extension MediaConvertClientTypes {

    /// Noise reducer filter settings for spatial filter.
    public struct NoiseReducerSpatialFilterSettings: Swift.Sendable {
        /// Specify strength of post noise reduction sharpening filter, with 0 disabling the filter and 3 enabling it at maximum strength.
        public var postFilterSharpenStrength: Swift.Int?
        /// The speed of the filter, from -2 (lower speed) to 3 (higher speed), with 0 being the nominal value.
        public var speed: Swift.Int?
        /// Relative strength of noise reducing filter. Higher values produce stronger filtering.
        public var strength: Swift.Int?

        public init(
            postFilterSharpenStrength: Swift.Int? = nil,
            speed: Swift.Int? = nil,
            strength: Swift.Int? = nil
        )
        {
            self.postFilterSharpenStrength = postFilterSharpenStrength
            self.speed = speed
            self.strength = strength
        }
    }
}

extension MediaConvertClientTypes {

    /// When you set Noise reducer to Temporal, the bandwidth and sharpness of your output is reduced. You can optionally use Post temporal sharpening to apply sharpening to the edges of your output. Note that Post temporal sharpening will also make the bandwidth reduction from the Noise reducer smaller. The default behavior, Auto, allows the transcoder to determine whether to apply sharpening, depending on your input type and quality. When you set Post temporal sharpening to Enabled, specify how much sharpening is applied using Post temporal sharpening strength. Set Post temporal sharpening to Disabled to not apply sharpening.
    public enum NoiseFilterPostTemporalSharpening: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NoiseFilterPostTemporalSharpening] {
            return [
                .auto,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Post temporal sharpening strength to define the amount of sharpening the transcoder applies to your output. Set Post temporal sharpening strength to Low, Medium, or High to indicate the amount of sharpening.
    public enum NoiseFilterPostTemporalSharpeningStrength: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [NoiseFilterPostTemporalSharpeningStrength] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Noise reducer filter settings for temporal filter.
    public struct NoiseReducerTemporalFilterSettings: Swift.Sendable {
        /// Use Aggressive mode for content that has complex motion. Higher values produce stronger temporal filtering. This filters highly complex scenes more aggressively and creates better VQ for low bitrate outputs.
        public var aggressiveMode: Swift.Int?
        /// When you set Noise reducer to Temporal, the bandwidth and sharpness of your output is reduced. You can optionally use Post temporal sharpening to apply sharpening to the edges of your output. Note that Post temporal sharpening will also make the bandwidth reduction from the Noise reducer smaller. The default behavior, Auto, allows the transcoder to determine whether to apply sharpening, depending on your input type and quality. When you set Post temporal sharpening to Enabled, specify how much sharpening is applied using Post temporal sharpening strength. Set Post temporal sharpening to Disabled to not apply sharpening.
        public var postTemporalSharpening: MediaConvertClientTypes.NoiseFilterPostTemporalSharpening?
        /// Use Post temporal sharpening strength to define the amount of sharpening the transcoder applies to your output. Set Post temporal sharpening strength to Low, Medium, or High to indicate the amount of sharpening.
        public var postTemporalSharpeningStrength: MediaConvertClientTypes.NoiseFilterPostTemporalSharpeningStrength?
        /// The speed of the filter (higher number is faster). Low setting reduces bit rate at the cost of transcode time, high setting improves transcode time at the cost of bit rate.
        public var speed: Swift.Int?
        /// Specify the strength of the noise reducing filter on this output. Higher values produce stronger filtering. We recommend the following value ranges, depending on the result that you want: * 0-2 for complexity reduction with minimal sharpness loss * 2-8 for complexity reduction with image preservation * 8-16 for a high level of complexity reduction
        public var strength: Swift.Int?

        public init(
            aggressiveMode: Swift.Int? = nil,
            postTemporalSharpening: MediaConvertClientTypes.NoiseFilterPostTemporalSharpening? = nil,
            postTemporalSharpeningStrength: MediaConvertClientTypes.NoiseFilterPostTemporalSharpeningStrength? = nil,
            speed: Swift.Int? = nil,
            strength: Swift.Int? = nil
        )
        {
            self.aggressiveMode = aggressiveMode
            self.postTemporalSharpening = postTemporalSharpening
            self.postTemporalSharpeningStrength = postTemporalSharpeningStrength
            self.speed = speed
            self.strength = strength
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable the Noise reducer feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default. When you enable Noise reducer, you must also select a value for Noise reducer filter. For AVC outputs, when you include Noise reducer, you cannot include the Bandwidth reduction filter.
    public struct NoiseReducer: Swift.Sendable {
        /// Use Noise reducer filter to select one of the following spatial image filtering functions. To use this setting, you must also enable Noise reducer. * Bilateral preserves edges while reducing noise. * Mean (softest), Gaussian, Lanczos, and Sharpen (sharpest) do convolution filtering. * Conserve does min/max noise reduction. * Spatial does frequency-domain filtering based on JND principles. * Temporal optimizes video quality for complex motion.
        public var filter: MediaConvertClientTypes.NoiseReducerFilter?
        /// Settings for a noise reducer filter
        public var filterSettings: MediaConvertClientTypes.NoiseReducerFilterSettings?
        /// Noise reducer filter settings for spatial filter.
        public var spatialFilterSettings: MediaConvertClientTypes.NoiseReducerSpatialFilterSettings?
        /// Noise reducer filter settings for temporal filter.
        public var temporalFilterSettings: MediaConvertClientTypes.NoiseReducerTemporalFilterSettings?

        public init(
            filter: MediaConvertClientTypes.NoiseReducerFilter? = nil,
            filterSettings: MediaConvertClientTypes.NoiseReducerFilterSettings? = nil,
            spatialFilterSettings: MediaConvertClientTypes.NoiseReducerSpatialFilterSettings? = nil,
            temporalFilterSettings: MediaConvertClientTypes.NoiseReducerTemporalFilterSettings? = nil
        )
        {
            self.filter = filter
            self.filterSettings = filterSettings
            self.spatialFilterSettings = spatialFilterSettings
            self.temporalFilterSettings = temporalFilterSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. Ignore this setting unless Nagra support directs you to specify a value. When you don't specify a value here, the Nagra NexGuard library uses its default value.
    public enum WatermarkingStrength: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case lighter
        case lightest
        case stronger
        case strongest
        case sdkUnknown(Swift.String)

        public static var allCases: [WatermarkingStrength] {
            return [
                .default,
                .lighter,
                .lightest,
                .stronger,
                .strongest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .lighter: return "LIGHTER"
            case .lightest: return "LIGHTEST"
            case .stronger: return "STRONGER"
            case .strongest: return "STRONGEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
    public struct NexGuardFileMarkerSettings: Swift.Sendable {
        /// Use the base64 license string that Nagra provides you. Enter it directly in your JSON job specification or in the console. Required when you include Nagra NexGuard File Marker watermarking in your job.
        public var license: Swift.String?
        /// Specify the payload ID that you want associated with this output. Valid values vary depending on your Nagra NexGuard forensic watermarking workflow. Required when you include Nagra NexGuard File Marker watermarking in your job. For PreRelease Content (NGPR/G2), specify an integer from 1 through 4,194,303. You must generate a unique ID for each asset you watermark, and keep a record of which ID you have assigned to each asset. Neither Nagra nor MediaConvert keep track of the relationship between output files and your IDs. For OTT Streaming, create two adaptive bitrate (ABR) stacks for each asset. Do this by setting up two output groups. For one output group, set the value of Payload ID to 0 in every output. For the other output group, set Payload ID to 1 in every output.
        public var payload: Swift.Int?
        /// Enter one of the watermarking preset strings that Nagra provides you. Required when you include Nagra NexGuard File Marker watermarking in your job.
        public var preset: Swift.String?
        /// Optional. Ignore this setting unless Nagra support directs you to specify a value. When you don't specify a value here, the Nagra NexGuard library uses its default value.
        public var strength: MediaConvertClientTypes.WatermarkingStrength?

        public init(
            license: Swift.String? = nil,
            payload: Swift.Int? = nil,
            preset: Swift.String? = nil,
            strength: MediaConvertClientTypes.WatermarkingStrength? = nil
        )
        {
            self.license = license
            self.payload = payload
            self.preset = preset
            self.strength = strength
        }
    }
}

extension MediaConvertClientTypes {

    /// If you work with a third party video watermarking partner, use the group of settings that correspond with your watermarking partner to include watermarks in your output.
    public struct PartnerWatermarking: Swift.Sendable {
        /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
        public var nexguardFileMarkerSettings: MediaConvertClientTypes.NexGuardFileMarkerSettings?

        public init(
            nexguardFileMarkerSettings: MediaConvertClientTypes.NexGuardFileMarkerSettings? = nil
        )
        {
            self.nexguardFileMarkerSettings = nexguardFileMarkerSettings
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Position under Timecode burn-in to specify the location the burned-in timecode on output video.
    public enum TimecodeBurninPosition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottomCenter
        case bottomLeft
        case bottomRight
        case middleCenter
        case middleLeft
        case middleRight
        case topCenter
        case topLeft
        case topRight
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeBurninPosition] {
            return [
                .bottomCenter,
                .bottomLeft,
                .bottomRight,
                .middleCenter,
                .middleLeft,
                .middleRight,
                .topCenter,
                .topLeft,
                .topRight
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottomCenter: return "BOTTOM_CENTER"
            case .bottomLeft: return "BOTTOM_LEFT"
            case .bottomRight: return "BOTTOM_RIGHT"
            case .middleCenter: return "MIDDLE_CENTER"
            case .middleLeft: return "MIDDLE_LEFT"
            case .middleRight: return "MIDDLE_RIGHT"
            case .topCenter: return "TOP_CENTER"
            case .topLeft: return "TOP_LEFT"
            case .topRight: return "TOP_RIGHT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for burning the output timecode and specified prefix into the output.
    public struct TimecodeBurnin: Swift.Sendable {
        /// Use Font size to set the font size of any burned-in timecode. Valid values are 10, 16, 32, 48.
        public var fontSize: Swift.Int?
        /// Use Position under Timecode burn-in to specify the location the burned-in timecode on output video.
        public var position: MediaConvertClientTypes.TimecodeBurninPosition?
        /// Use Prefix to place ASCII characters before any burned-in timecode. For example, a prefix of "EZ-" will result in the timecode "EZ-00:00:00:00". Provide either the characters themselves or the ASCII code equivalents. The supported range of characters is 0x20 through 0x7e. This includes letters, numbers, and all special characters represented on a standard English keyboard.
        public var `prefix`: Swift.String?

        public init(
            fontSize: Swift.Int? = nil,
            position: MediaConvertClientTypes.TimecodeBurninPosition? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.fontSize = fontSize
            self.position = position
            self.`prefix` = `prefix`
        }
    }
}

extension MediaConvertClientTypes {

    /// Find additional transcoding features under Preprocessors. Enable the features at each output individually. These features are disabled by default.
    public struct VideoPreprocessor: Swift.Sendable {
        /// Use these settings to convert the color space or to modify properties such as hue and contrast for this output. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/converting-the-color-space.html.
        public var colorCorrector: MediaConvertClientTypes.ColorCorrector?
        /// Use the deinterlacer to produce smoother motion and a clearer picture. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-scan-type.html.
        public var deinterlacer: MediaConvertClientTypes.Deinterlacer?
        /// Enable Dolby Vision feature to produce Dolby Vision compatible video output.
        public var dolbyVision: MediaConvertClientTypes.DolbyVision?
        /// Enable HDR10+ analysis and metadata injection. Compatible with HEVC only.
        public var hdr10Plus: MediaConvertClientTypes.Hdr10Plus?
        /// Enable the Image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each output individually. This setting is disabled by default.
        public var imageInserter: MediaConvertClientTypes.ImageInserter?
        /// Enable the Noise reducer feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default. When you enable Noise reducer, you must also select a value for Noise reducer filter. For AVC outputs, when you include Noise reducer, you cannot include the Bandwidth reduction filter.
        public var noiseReducer: MediaConvertClientTypes.NoiseReducer?
        /// If you work with a third party video watermarking partner, use the group of settings that correspond with your watermarking partner to include watermarks in your output.
        public var partnerWatermarking: MediaConvertClientTypes.PartnerWatermarking?
        /// Settings for burning the output timecode and specified prefix into the output.
        public var timecodeBurnin: MediaConvertClientTypes.TimecodeBurnin?

        public init(
            colorCorrector: MediaConvertClientTypes.ColorCorrector? = nil,
            deinterlacer: MediaConvertClientTypes.Deinterlacer? = nil,
            dolbyVision: MediaConvertClientTypes.DolbyVision? = nil,
            hdr10Plus: MediaConvertClientTypes.Hdr10Plus? = nil,
            imageInserter: MediaConvertClientTypes.ImageInserter? = nil,
            noiseReducer: MediaConvertClientTypes.NoiseReducer? = nil,
            partnerWatermarking: MediaConvertClientTypes.PartnerWatermarking? = nil,
            timecodeBurnin: MediaConvertClientTypes.TimecodeBurnin? = nil
        )
        {
            self.colorCorrector = colorCorrector
            self.deinterlacer = deinterlacer
            self.dolbyVision = dolbyVision
            self.hdr10Plus = hdr10Plus
            self.imageInserter = imageInserter
            self.noiseReducer = noiseReducer
            self.partnerWatermarking = partnerWatermarking
            self.timecodeBurnin = timecodeBurnin
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings related to video encoding of your output. The specific video settings depend on the video codec that you choose.
    public struct VideoDescription: Swift.Sendable {
        /// This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
        public var afdSignaling: MediaConvertClientTypes.AfdSignaling?
        /// The anti-alias filter is automatically applied to all outputs. The service no longer accepts the value DISABLED for AntiAlias. If you specify that in your job, the service will ignore the setting.
        public var antiAlias: MediaConvertClientTypes.AntiAlias?
        /// Video codec settings contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec. For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AV1, Av1Settings * AVC_INTRA, AvcIntraSettings * FRAME_CAPTURE, FrameCaptureSettings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * UNCOMPRESSED, UncompressedSettings * VC3, Vc3Settings * VP8, Vp8Settings * VP9, Vp9Settings * XAVC, XavcSettings
        public var codecSettings: MediaConvertClientTypes.VideoCodecSettings?
        /// Choose Insert for this setting to include color metadata in this output. Choose Ignore to exclude color metadata from this output. If you don't specify a value, the service sets this to Insert by default.
        public var colorMetadata: MediaConvertClientTypes.ColorMetadata?
        /// Use Cropping selection to specify the video area that the service will include in the output video frame.
        public var crop: MediaConvertClientTypes.Rectangle?
        /// Applies only to 29.97 fps outputs. When this feature is enabled, the service will use drop-frame timecode on outputs. If it is not possible to use drop-frame timecode, the system will fall back to non-drop-frame. This setting is enabled by default when Timecode insertion is enabled.
        public var dropFrameTimecode: MediaConvertClientTypes.DropFrameTimecode?
        /// Applies only if you set AFD Signaling to Fixed. Use Fixed to specify a four-bit AFD value which the service will write on all frames of this video output.
        public var fixedAfd: Swift.Int?
        /// Use Height to define the video resolution height, in pixels, for this output. To use the same resolution as your input: Leave both Width and Height blank. To evenly scale from your input resolution: Leave Height blank and enter a value for Width. For example, if your input is 1920x1080 and you set Width to 1280, your output will be 1280x720.
        public var height: Swift.Int?
        /// Use Selection placement to define the video area in your output frame. The area outside of the rectangle that you specify here is black.
        public var position: MediaConvertClientTypes.Rectangle?
        /// Use Respond to AFD to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to NONE. A preferred implementation of this workflow is to set RespondToAfd to and set AfdSignaling to AUTO. * Choose None to remove all input AFD values from this output.
        public var respondToAfd: MediaConvertClientTypes.RespondToAfd?
        /// Specify the video Scaling behavior when your output has a different resolution than your input. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/video-scaling.html
        public var scalingBehavior: MediaConvertClientTypes.ScalingBehavior?
        /// Use Sharpness setting to specify the strength of anti-aliasing. This setting changes the width of the anti-alias filter kernel used for scaling. Sharpness only applies if your output resolution is different from your input resolution. 0 is the softest setting, 100 the sharpest, and 50 recommended for most content.
        public var sharpness: Swift.Int?
        /// Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration. In the console, these settings are located under Job > Job settings > Timecode configuration. Note - Timecode source under input settings does not affect the timecodes that are inserted in the output. Source under Job settings > Timecode configuration does.
        public var timecodeInsertion: MediaConvertClientTypes.VideoTimecodeInsertion?
        /// Find additional transcoding features under Preprocessors. Enable the features at each output individually. These features are disabled by default.
        public var videoPreprocessors: MediaConvertClientTypes.VideoPreprocessor?
        /// Use Width to define the video resolution width, in pixels, for this output. To use the same resolution as your input: Leave both Width and Height blank. To evenly scale from your input resolution: Leave Width blank and enter a value for Height. For example, if your input is 1920x1080 and you set Height to 720, your output will be 1280x720.
        public var width: Swift.Int?

        public init(
            afdSignaling: MediaConvertClientTypes.AfdSignaling? = nil,
            antiAlias: MediaConvertClientTypes.AntiAlias? = nil,
            codecSettings: MediaConvertClientTypes.VideoCodecSettings? = nil,
            colorMetadata: MediaConvertClientTypes.ColorMetadata? = nil,
            crop: MediaConvertClientTypes.Rectangle? = nil,
            dropFrameTimecode: MediaConvertClientTypes.DropFrameTimecode? = nil,
            fixedAfd: Swift.Int? = nil,
            height: Swift.Int? = nil,
            position: MediaConvertClientTypes.Rectangle? = nil,
            respondToAfd: MediaConvertClientTypes.RespondToAfd? = nil,
            scalingBehavior: MediaConvertClientTypes.ScalingBehavior? = nil,
            sharpness: Swift.Int? = nil,
            timecodeInsertion: MediaConvertClientTypes.VideoTimecodeInsertion? = nil,
            videoPreprocessors: MediaConvertClientTypes.VideoPreprocessor? = nil,
            width: Swift.Int? = nil
        )
        {
            self.afdSignaling = afdSignaling
            self.antiAlias = antiAlias
            self.codecSettings = codecSettings
            self.colorMetadata = colorMetadata
            self.crop = crop
            self.dropFrameTimecode = dropFrameTimecode
            self.fixedAfd = fixedAfd
            self.height = height
            self.position = position
            self.respondToAfd = respondToAfd
            self.scalingBehavior = scalingBehavior
            self.sharpness = sharpness
            self.timecodeInsertion = timecodeInsertion
            self.videoPreprocessors = videoPreprocessors
            self.width = width
        }
    }
}

extension MediaConvertClientTypes {

    /// Each output in your job is a collection of settings that describes how you want MediaConvert to encode a single output file or stream. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/create-outputs.html.
    public struct Output: Swift.Sendable {
        /// Contains groups of audio encoding settings organized by audio codec. Include one instance of per output. Can contain multiple groups of encoding settings.
        public var audioDescriptions: [MediaConvertClientTypes.AudioDescription]?
        /// Contains groups of captions settings. For each output that has captions, include one instance of CaptionDescriptions. Can contain multiple groups of captions settings.
        public var captionDescriptions: [MediaConvertClientTypes.CaptionDescription]?
        /// Container specific settings.
        public var containerSettings: MediaConvertClientTypes.ContainerSettings?
        /// Use Extension to specify the file extension for outputs in File output groups. If you do not specify a value, the service will use default extensions by container type as follows * MPEG-2 transport stream, m2ts * Quicktime, mov * MXF container, mxf * MPEG-4 container, mp4 * WebM container, webm * No Container, the service will use codec extensions (e.g. AAC, H265, H265, AC3)
        public var `extension`: Swift.String?
        /// Use Name modifier to have the service add a string to the end of each output filename. You specify the base filename as part of your destination URI. When you create multiple outputs in the same output group, Name modifier is required. Name modifier also accepts format identifiers. For DASH ISO outputs, if you use the format identifiers $Number$ or $Time$ in one output, you must use them in the same way in all outputs of the output group.
        public var nameModifier: Swift.String?
        /// Specific settings for this type of output.
        public var outputSettings: MediaConvertClientTypes.OutputSettings?
        /// Use Preset to specify a preset for your transcoding settings. Provide the system or custom preset name. You can specify either Preset or Container settings, but not both.
        public var preset: Swift.String?
        /// VideoDescription contains a group of video encoding settings. The specific video settings depend on the video codec that you choose for the property codec. Include one instance of VideoDescription per output.
        public var videoDescription: MediaConvertClientTypes.VideoDescription?

        public init(
            audioDescriptions: [MediaConvertClientTypes.AudioDescription]? = nil,
            captionDescriptions: [MediaConvertClientTypes.CaptionDescription]? = nil,
            containerSettings: MediaConvertClientTypes.ContainerSettings? = nil,
            `extension`: Swift.String? = nil,
            nameModifier: Swift.String? = nil,
            outputSettings: MediaConvertClientTypes.OutputSettings? = nil,
            preset: Swift.String? = nil,
            videoDescription: MediaConvertClientTypes.VideoDescription? = nil
        )
        {
            self.audioDescriptions = audioDescriptions
            self.captionDescriptions = captionDescriptions
            self.containerSettings = containerSettings
            self.`extension` = `extension`
            self.nameModifier = nameModifier
            self.outputSettings = outputSettings
            self.preset = preset
            self.videoDescription = videoDescription
        }
    }
}

extension MediaConvertClientTypes {

    /// Group of outputs
    public struct OutputGroup: Swift.Sendable {
        /// Use automated encoding to have MediaConvert choose your encoding settings for you, based on characteristics of your input video.
        public var automatedEncodingSettings: MediaConvertClientTypes.AutomatedEncodingSettings?
        /// Use Custom Group Name to specify a name for the output group. This value is displayed on the console and can make your job settings JSON more human-readable. It does not affect your outputs. Use up to twelve characters that are either letters, numbers, spaces, or underscores.
        public var customName: Swift.String?
        /// Name of the output group
        public var name: Swift.String?
        /// Output Group settings, including type
        public var outputGroupSettings: MediaConvertClientTypes.OutputGroupSettings?
        /// This object holds groups of encoding settings, one group of settings per output.
        public var outputs: [MediaConvertClientTypes.Output]?

        public init(
            automatedEncodingSettings: MediaConvertClientTypes.AutomatedEncodingSettings? = nil,
            customName: Swift.String? = nil,
            name: Swift.String? = nil,
            outputGroupSettings: MediaConvertClientTypes.OutputGroupSettings? = nil,
            outputs: [MediaConvertClientTypes.Output]? = nil
        )
        {
            self.automatedEncodingSettings = automatedEncodingSettings
            self.customName = customName
            self.name = name
            self.outputGroupSettings = outputGroupSettings
            self.outputs = outputs
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Source to set how timecodes are handled within this job. To make sure that your video, audio, captions, and markers are synchronized and that time-based features, such as image inserter, work correctly, choose the Timecode source option that matches your assets. All timecodes are in a 24-hour format with frame number (HH:MM:SS:FF). * Embedded - Use the timecode that is in the input video. If no embedded timecode is in the source, the service will use Start at 0 instead. * Start at 0 - Set the timecode of the initial frame to 00:00:00:00. * Specified Start - Set the timecode of the initial frame to a value other than zero. You use Start timecode to provide this value.
    public enum TimecodeSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case embedded
        case specifiedstart
        case zerobased
        case sdkUnknown(Swift.String)

        public static var allCases: [TimecodeSource] {
            return [
                .embedded,
                .specifiedstart,
                .zerobased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .embedded: return "EMBEDDED"
            case .specifiedstart: return "SPECIFIEDSTART"
            case .zerobased: return "ZEROBASED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
    public struct TimecodeConfig: Swift.Sendable {
        /// If you use an editing platform that relies on an anchor timecode, use Anchor Timecode to specify a timecode that will match the input video frame to the output video frame. Use 24-hour format with frame number, (HH:MM:SS:FF) or (HH:MM:SS;FF). This setting ignores frame rate conversion. System behavior for Anchor Timecode varies depending on your setting for Source. * If Source is set to Specified Start, the first input frame is the specified value in Start Timecode. Anchor Timecode and Start Timecode are used calculate output timecode. * If Source is set to Start at 0 the first frame is 00:00:00:00. * If Source is set to Embedded, the first frame is the timecode value on the first input frame of the input.
        public var anchor: Swift.String?
        /// Use Source to set how timecodes are handled within this job. To make sure that your video, audio, captions, and markers are synchronized and that time-based features, such as image inserter, work correctly, choose the Timecode source option that matches your assets. All timecodes are in a 24-hour format with frame number (HH:MM:SS:FF). * Embedded - Use the timecode that is in the input video. If no embedded timecode is in the source, the service will use Start at 0 instead. * Start at 0 - Set the timecode of the initial frame to 00:00:00:00. * Specified Start - Set the timecode of the initial frame to a value other than zero. You use Start timecode to provide this value.
        public var source: MediaConvertClientTypes.TimecodeSource?
        /// Only use when you set Source to Specified start. Use Start timecode to specify the timecode for the initial frame. Use 24-hour format with frame number, (HH:MM:SS:FF) or (HH:MM:SS;FF).
        public var start: Swift.String?
        /// Only applies to outputs that support program-date-time stamp. Use Timestamp offset to overwrite the timecode date without affecting the time and frame number. Provide the new date as a string in the format "yyyy-mm-dd". To use Timestamp offset, you must also enable Insert program-date-time in the output settings. For example, if the date part of your timecodes is 2002-1-25 and you want to change it to one year later, set Timestamp offset to 2003-1-25.
        public var timestampOffset: Swift.String?

        public init(
            anchor: Swift.String? = nil,
            source: MediaConvertClientTypes.TimecodeSource? = nil,
            start: Swift.String? = nil,
            timestampOffset: Swift.String? = nil
        )
        {
            self.anchor = anchor
            self.source = source
            self.start = start
            self.timestampOffset = timestampOffset
        }
    }
}

extension MediaConvertClientTypes {

    /// Insert user-defined custom ID3 metadata at timecodes that you specify. In each output that you want to include this metadata, you must set ID3 metadata to Passthrough.
    public struct TimedMetadataInsertion: Swift.Sendable {
        /// Id3Insertions contains the array of Id3Insertion instances.
        public var id3Insertions: [MediaConvertClientTypes.Id3Insertion]?

        public init(
            id3Insertions: [MediaConvertClientTypes.Id3Insertion]? = nil
        )
        {
            self.id3Insertions = id3Insertions
        }
    }
}

extension MediaConvertClientTypes {

    /// JobSettings contains all the transcode settings for a job.
    public struct JobSettings: Swift.Sendable {
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time.
        public var adAvailOffset: Swift.Int?
        /// Settings for ad avail blanking. Video can be blanked or overlaid with an image, and audio muted during SCTE-35 triggered ad avails.
        public var availBlanking: MediaConvertClientTypes.AvailBlanking?
        /// Use 3D LUTs to specify custom color mapping behavior when you convert from one color space into another. You can include up to 8 different 3D LUTs. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/3d-luts.html
        public var colorConversion3DLUTSettings: [MediaConvertClientTypes.ColorConversion3DLUTSetting]?
        /// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
        public var esam: MediaConvertClientTypes.EsamSettings?
        /// If your source content has EIA-608 Line 21 Data Services, enable this feature to specify what MediaConvert does with the Extended Data Services (XDS) packets. You can choose to pass through XDS packets, or remove them from the output. For more information about XDS, see EIA-608 Line Data Services, section 9.5.1.5 05h Content Advisory.
        public var extendedDataServices: MediaConvertClientTypes.ExtendedDataServices?
        /// Specify the input that MediaConvert references for your default output settings. MediaConvert uses this input's Resolution, Frame rate, and Pixel aspect ratio for all outputs that you don't manually specify different output settings for. Enabling this setting will disable "Follow source" for all other inputs. If MediaConvert cannot follow your source, for example if you specify an audio-only input, MediaConvert uses the first followable input instead. In your JSON job specification, enter an integer from 1 to 150 corresponding to the order of your inputs.
        public var followSource: Swift.Int?
        /// Use Inputs to define source file used in the transcode job. There can be multiple inputs add in a job. These inputs will be concantenated together to create the output.
        public var inputs: [MediaConvertClientTypes.Input]?
        /// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
        public var kantarWatermark: MediaConvertClientTypes.KantarWatermarkSettings?
        /// Overlay motion graphics on top of your video. The motion graphics that you specify here appear on all outputs in all output groups. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/motion-graphic-overlay.html.
        public var motionImageInserter: MediaConvertClientTypes.MotionImageInserter?
        /// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration, MediaConvert enables PCM to ID3 tagging for all outputs in the job.
        public var nielsenConfiguration: MediaConvertClientTypes.NielsenConfiguration?
        /// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to specifying these values, you also need to set up your cloud TIC server. These settings apply to every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
        public var nielsenNonLinearWatermark: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings?
        /// Contains one group of settings for each set of outputs that share a common package type. All unpackaged files (MPEG-4, MPEG-2 TS, Quicktime, MXF, and no container) are grouped in a single output group as well. Required in is a group of settings that apply to the whole group. This required object depends on the value you set for Type. Type, settings object pairs are as follows. * FILE_GROUP_SETTINGS, FileGroupSettings * HLS_GROUP_SETTINGS, HlsGroupSettings * DASH_ISO_GROUP_SETTINGS, DashIsoGroupSettings * MS_SMOOTH_GROUP_SETTINGS, MsSmoothGroupSettings * CMAF_GROUP_SETTINGS, CmafGroupSettings
        public var outputGroups: [MediaConvertClientTypes.OutputGroup]?
        /// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
        public var timecodeConfig: MediaConvertClientTypes.TimecodeConfig?
        /// Insert user-defined custom ID3 metadata at timecodes that you specify. In each output that you want to include this metadata, you must set ID3 metadata to Passthrough.
        public var timedMetadataInsertion: MediaConvertClientTypes.TimedMetadataInsertion?

        public init(
            adAvailOffset: Swift.Int? = nil,
            availBlanking: MediaConvertClientTypes.AvailBlanking? = nil,
            colorConversion3DLUTSettings: [MediaConvertClientTypes.ColorConversion3DLUTSetting]? = nil,
            esam: MediaConvertClientTypes.EsamSettings? = nil,
            extendedDataServices: MediaConvertClientTypes.ExtendedDataServices? = nil,
            followSource: Swift.Int? = nil,
            inputs: [MediaConvertClientTypes.Input]? = nil,
            kantarWatermark: MediaConvertClientTypes.KantarWatermarkSettings? = nil,
            motionImageInserter: MediaConvertClientTypes.MotionImageInserter? = nil,
            nielsenConfiguration: MediaConvertClientTypes.NielsenConfiguration? = nil,
            nielsenNonLinearWatermark: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings? = nil,
            outputGroups: [MediaConvertClientTypes.OutputGroup]? = nil,
            timecodeConfig: MediaConvertClientTypes.TimecodeConfig? = nil,
            timedMetadataInsertion: MediaConvertClientTypes.TimedMetadataInsertion? = nil
        )
        {
            self.adAvailOffset = adAvailOffset
            self.availBlanking = availBlanking
            self.colorConversion3DLUTSettings = colorConversion3DLUTSettings
            self.esam = esam
            self.extendedDataServices = extendedDataServices
            self.followSource = followSource
            self.inputs = inputs
            self.kantarWatermark = kantarWatermark
            self.motionImageInserter = motionImageInserter
            self.nielsenConfiguration = nielsenConfiguration
            self.nielsenNonLinearWatermark = nielsenNonLinearWatermark
            self.outputGroups = outputGroups
            self.timecodeConfig = timecodeConfig
            self.timedMetadataInsertion = timedMetadataInsertion
        }
    }
}

extension MediaConvertClientTypes {

    /// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
    public enum SimulateReservedQueue: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SimulateReservedQueue] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    public enum JobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canceled
        case complete
        case error
        case progressing
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .canceled,
                .complete,
                .error,
                .progressing,
                .submitted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .complete: return "COMPLETE"
            case .error: return "ERROR"
            case .progressing: return "PROGRESSING"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public enum StatusUpdateInterval: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case seconds10
        case seconds12
        case seconds120
        case seconds15
        case seconds180
        case seconds20
        case seconds240
        case seconds30
        case seconds300
        case seconds360
        case seconds420
        case seconds480
        case seconds540
        case seconds60
        case seconds600
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusUpdateInterval] {
            return [
                .seconds10,
                .seconds12,
                .seconds120,
                .seconds15,
                .seconds180,
                .seconds20,
                .seconds240,
                .seconds30,
                .seconds300,
                .seconds360,
                .seconds420,
                .seconds480,
                .seconds540,
                .seconds60,
                .seconds600
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .seconds10: return "SECONDS_10"
            case .seconds12: return "SECONDS_12"
            case .seconds120: return "SECONDS_120"
            case .seconds15: return "SECONDS_15"
            case .seconds180: return "SECONDS_180"
            case .seconds20: return "SECONDS_20"
            case .seconds240: return "SECONDS_240"
            case .seconds30: return "SECONDS_30"
            case .seconds300: return "SECONDS_300"
            case .seconds360: return "SECONDS_360"
            case .seconds420: return "SECONDS_420"
            case .seconds480: return "SECONDS_480"
            case .seconds540: return "SECONDS_540"
            case .seconds60: return "SECONDS_60"
            case .seconds600: return "SECONDS_600"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
    public struct Timing: Swift.Sendable {
        /// The time, in Unix epoch format, that the transcoding job finished
        public var finishTime: Foundation.Date?
        /// The time, in Unix epoch format, that transcoding for the job began.
        public var startTime: Foundation.Date?
        /// The time, in Unix epoch format, that you submitted the job.
        public var submitTime: Foundation.Date?

        public init(
            finishTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil,
            submitTime: Foundation.Date? = nil
        )
        {
            self.finishTime = finishTime
            self.startTime = startTime
            self.submitTime = submitTime
        }
    }
}

extension MediaConvertClientTypes {

    /// Contains any warning codes and their count for the job.
    public struct WarningGroup: Swift.Sendable {
        /// Warning code that identifies a specific warning in the job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/warning_codes.html
        /// This member is required.
        public var code: Swift.Int?
        /// The number of times this warning occurred in the job.
        /// This member is required.
        public var count: Swift.Int?

        public init(
            code: Swift.Int? = nil,
            count: Swift.Int? = nil
        )
        {
            self.code = code
            self.count = count
        }
    }
}

extension MediaConvertClientTypes {

    /// Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public struct Job: Swift.Sendable {
        /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
        public var accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
        /// Describes whether the current job is running with accelerated transcoding. For jobs that have Acceleration (AccelerationMode) set to DISABLED, AccelerationStatus is always NOT_APPLICABLE. For jobs that have Acceleration (AccelerationMode) set to ENABLED or PREFERRED, AccelerationStatus is one of the other states. AccelerationStatus is IN_PROGRESS initially, while the service determines whether the input files and job settings are compatible with accelerated transcoding. If they are, AcclerationStatus is ACCELERATED. If your input files and job settings aren't compatible with accelerated transcoding, the service either fails your job or runs it without accelerated transcoding, depending on how you set Acceleration (AccelerationMode). When the service runs your job without accelerated transcoding, AccelerationStatus is NOT_ACCELERATED.
        public var accelerationStatus: MediaConvertClientTypes.AccelerationStatus?
        /// An identifier for this resource that is unique within all of AWS.
        public var arn: Swift.String?
        /// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
        public var billingTagsSource: MediaConvertClientTypes.BillingTagsSource?
        /// Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.
        public var clientRequestToken: Swift.String?
        /// The time, in Unix epoch format in seconds, when the job got created.
        public var createdAt: Foundation.Date?
        /// A job's phase can be PROBING, TRANSCODING OR UPLOADING
        public var currentPhase: MediaConvertClientTypes.JobPhase?
        /// Error code for the job
        public var errorCode: Swift.Int?
        /// Error message of Job
        public var errorMessage: Swift.String?
        /// Optional list of hop destinations.
        public var hopDestinations: [MediaConvertClientTypes.HopDestination]?
        /// A portion of the job's ARN, unique within your AWS Elemental MediaConvert resources
        public var id: Swift.String?
        /// The Job engine version that you requested for your job. Valid versions are in a YYYY-MM-DD format.
        public var jobEngineVersionRequested: Swift.String?
        /// The Job engine version that your job used. Job engine versions are in a YYYY-MM-DD format. When you request an expired version, the response for this property will be empty. Requests to create jobs with an expired version result in a regular job, as if no specific Job engine version was requested. When you request an invalid version, the response for this property will be empty. Requests to create jobs with an invalid version result in a 400 error message, and no job is created.
        public var jobEngineVersionUsed: Swift.String?
        /// An estimate of how far your job has progressed. This estimate is shown as a percentage of the total time from when your job leaves its queue to when your output files appear in your output Amazon S3 bucket. AWS Elemental MediaConvert provides jobPercentComplete in CloudWatch STATUS_UPDATE events and in the response to GetJob and ListJobs requests. The jobPercentComplete estimate is reliable for the following input containers: Quicktime, Transport Stream, MP4, and MXF. For some jobs, the service can't provide information about job progress. In those cases, jobPercentComplete returns a null value.
        public var jobPercentComplete: Swift.Int?
        /// The job template that the job is created from, if it is created from a job template.
        public var jobTemplate: Swift.String?
        /// Provides messages from the service about jobs that you have already successfully submitted.
        public var messages: MediaConvertClientTypes.JobMessages?
        /// List of output group details
        public var outputGroupDetails: [MediaConvertClientTypes.OutputGroupDetail]?
        /// Relative priority on the job.
        public var priority: Swift.Int?
        /// When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
        public var queue: Swift.String?
        /// The job's queue hopping history.
        public var queueTransitions: [MediaConvertClientTypes.QueueTransition]?
        /// The number of times that the service automatically attempted to process your job after encountering an error.
        public var retryCount: Swift.Int?
        /// The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
        /// This member is required.
        public var role: Swift.String?
        /// JobSettings contains all the transcode settings for a job.
        /// This member is required.
        public var settings: MediaConvertClientTypes.JobSettings?
        /// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
        public var simulateReservedQueue: MediaConvertClientTypes.SimulateReservedQueue?
        /// A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
        public var status: MediaConvertClientTypes.JobStatus?
        /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
        public var statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?
        /// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
        public var timing: MediaConvertClientTypes.Timing?
        /// User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.
        public var userMetadata: [Swift.String: Swift.String]?
        /// Contains any warning messages for the job. Use to help identify potential issues with your input, output, or job. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/warning_codes.html
        public var warnings: [MediaConvertClientTypes.WarningGroup]?

        public init(
            accelerationSettings: MediaConvertClientTypes.AccelerationSettings? = nil,
            accelerationStatus: MediaConvertClientTypes.AccelerationStatus? = nil,
            arn: Swift.String? = nil,
            billingTagsSource: MediaConvertClientTypes.BillingTagsSource? = nil,
            clientRequestToken: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            currentPhase: MediaConvertClientTypes.JobPhase? = nil,
            errorCode: Swift.Int? = nil,
            errorMessage: Swift.String? = nil,
            hopDestinations: [MediaConvertClientTypes.HopDestination]? = nil,
            id: Swift.String? = nil,
            jobEngineVersionRequested: Swift.String? = nil,
            jobEngineVersionUsed: Swift.String? = nil,
            jobPercentComplete: Swift.Int? = nil,
            jobTemplate: Swift.String? = nil,
            messages: MediaConvertClientTypes.JobMessages? = nil,
            outputGroupDetails: [MediaConvertClientTypes.OutputGroupDetail]? = nil,
            priority: Swift.Int? = nil,
            queue: Swift.String? = nil,
            queueTransitions: [MediaConvertClientTypes.QueueTransition]? = nil,
            retryCount: Swift.Int? = nil,
            role: Swift.String? = nil,
            settings: MediaConvertClientTypes.JobSettings? = nil,
            simulateReservedQueue: MediaConvertClientTypes.SimulateReservedQueue? = nil,
            status: MediaConvertClientTypes.JobStatus? = nil,
            statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval? = nil,
            timing: MediaConvertClientTypes.Timing? = nil,
            userMetadata: [Swift.String: Swift.String]? = nil,
            warnings: [MediaConvertClientTypes.WarningGroup]? = nil
        )
        {
            self.accelerationSettings = accelerationSettings
            self.accelerationStatus = accelerationStatus
            self.arn = arn
            self.billingTagsSource = billingTagsSource
            self.clientRequestToken = clientRequestToken
            self.createdAt = createdAt
            self.currentPhase = currentPhase
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.hopDestinations = hopDestinations
            self.id = id
            self.jobEngineVersionRequested = jobEngineVersionRequested
            self.jobEngineVersionUsed = jobEngineVersionUsed
            self.jobPercentComplete = jobPercentComplete
            self.jobTemplate = jobTemplate
            self.messages = messages
            self.outputGroupDetails = outputGroupDetails
            self.priority = priority
            self.queue = queue
            self.queueTransitions = queueTransitions
            self.retryCount = retryCount
            self.role = role
            self.settings = settings
            self.simulateReservedQueue = simulateReservedQueue
            self.status = status
            self.statusUpdateInterval = statusUpdateInterval
            self.timing = timing
            self.userMetadata = userMetadata
            self.warnings = warnings
        }
    }
}

extension MediaConvertClientTypes {

    /// Use Job engine versions to run jobs for your production workflow on one version, while you test and validate the latest version. Job engine versions are in a YYYY-MM-DD format.
    public struct JobEngineVersion: Swift.Sendable {
        /// The date that this Job engine version expires. Requests to create jobs with an expired version result in a regular job, as if no specific Job engine version was requested.
        public var expirationDate: Foundation.Date?
        /// Use Job engine versions to run jobs for your production workflow on one version, while you test and validate the latest version. Job engine versions are in a YYYY-MM-DD format.
        public var version: Swift.String?

        public init(
            expirationDate: Foundation.Date? = nil,
            version: Swift.String? = nil
        )
        {
            self.expirationDate = expirationDate
            self.version = version
        }
    }
}

extension MediaConvertClientTypes {

    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    public struct JobTemplateSettings: Swift.Sendable {
        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time.
        public var adAvailOffset: Swift.Int?
        /// Settings for ad avail blanking. Video can be blanked or overlaid with an image, and audio muted during SCTE-35 triggered ad avails.
        public var availBlanking: MediaConvertClientTypes.AvailBlanking?
        /// Use 3D LUTs to specify custom color mapping behavior when you convert from one color space into another. You can include up to 8 different 3D LUTs. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/3d-luts.html
        public var colorConversion3DLUTSettings: [MediaConvertClientTypes.ColorConversion3DLUTSetting]?
        /// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
        public var esam: MediaConvertClientTypes.EsamSettings?
        /// If your source content has EIA-608 Line 21 Data Services, enable this feature to specify what MediaConvert does with the Extended Data Services (XDS) packets. You can choose to pass through XDS packets, or remove them from the output. For more information about XDS, see EIA-608 Line Data Services, section 9.5.1.5 05h Content Advisory.
        public var extendedDataServices: MediaConvertClientTypes.ExtendedDataServices?
        /// Specify the input that MediaConvert references for your default output settings. MediaConvert uses this input's Resolution, Frame rate, and Pixel aspect ratio for all outputs that you don't manually specify different output settings for. Enabling this setting will disable "Follow source" for all other inputs. If MediaConvert cannot follow your source, for example if you specify an audio-only input, MediaConvert uses the first followable input instead. In your JSON job specification, enter an integer from 1 to 150 corresponding to the order of your inputs.
        public var followSource: Swift.Int?
        /// Use Inputs to define the source file used in the transcode job. There can only be one input in a job template. Using the API, you can include multiple inputs when referencing a job template.
        public var inputs: [MediaConvertClientTypes.InputTemplate]?
        /// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
        public var kantarWatermark: MediaConvertClientTypes.KantarWatermarkSettings?
        /// Overlay motion graphics on top of your video. The motion graphics that you specify here appear on all outputs in all output groups. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/motion-graphic-overlay.html.
        public var motionImageInserter: MediaConvertClientTypes.MotionImageInserter?
        /// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration, MediaConvert enables PCM to ID3 tagging for all outputs in the job.
        public var nielsenConfiguration: MediaConvertClientTypes.NielsenConfiguration?
        /// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to specifying these values, you also need to set up your cloud TIC server. These settings apply to every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
        public var nielsenNonLinearWatermark: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings?
        /// Contains one group of settings for each set of outputs that share a common package type. All unpackaged files (MPEG-4, MPEG-2 TS, Quicktime, MXF, and no container) are grouped in a single output group as well. Required in is a group of settings that apply to the whole group. This required object depends on the value you set for Type. Type, settings object pairs are as follows. * FILE_GROUP_SETTINGS, FileGroupSettings * HLS_GROUP_SETTINGS, HlsGroupSettings * DASH_ISO_GROUP_SETTINGS, DashIsoGroupSettings * MS_SMOOTH_GROUP_SETTINGS, MsSmoothGroupSettings * CMAF_GROUP_SETTINGS, CmafGroupSettings
        public var outputGroups: [MediaConvertClientTypes.OutputGroup]?
        /// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
        public var timecodeConfig: MediaConvertClientTypes.TimecodeConfig?
        /// Insert user-defined custom ID3 metadata at timecodes that you specify. In each output that you want to include this metadata, you must set ID3 metadata to Passthrough.
        public var timedMetadataInsertion: MediaConvertClientTypes.TimedMetadataInsertion?

        public init(
            adAvailOffset: Swift.Int? = nil,
            availBlanking: MediaConvertClientTypes.AvailBlanking? = nil,
            colorConversion3DLUTSettings: [MediaConvertClientTypes.ColorConversion3DLUTSetting]? = nil,
            esam: MediaConvertClientTypes.EsamSettings? = nil,
            extendedDataServices: MediaConvertClientTypes.ExtendedDataServices? = nil,
            followSource: Swift.Int? = nil,
            inputs: [MediaConvertClientTypes.InputTemplate]? = nil,
            kantarWatermark: MediaConvertClientTypes.KantarWatermarkSettings? = nil,
            motionImageInserter: MediaConvertClientTypes.MotionImageInserter? = nil,
            nielsenConfiguration: MediaConvertClientTypes.NielsenConfiguration? = nil,
            nielsenNonLinearWatermark: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings? = nil,
            outputGroups: [MediaConvertClientTypes.OutputGroup]? = nil,
            timecodeConfig: MediaConvertClientTypes.TimecodeConfig? = nil,
            timedMetadataInsertion: MediaConvertClientTypes.TimedMetadataInsertion? = nil
        )
        {
            self.adAvailOffset = adAvailOffset
            self.availBlanking = availBlanking
            self.colorConversion3DLUTSettings = colorConversion3DLUTSettings
            self.esam = esam
            self.extendedDataServices = extendedDataServices
            self.followSource = followSource
            self.inputs = inputs
            self.kantarWatermark = kantarWatermark
            self.motionImageInserter = motionImageInserter
            self.nielsenConfiguration = nielsenConfiguration
            self.nielsenNonLinearWatermark = nielsenNonLinearWatermark
            self.outputGroups = outputGroups
            self.timecodeConfig = timecodeConfig
            self.timedMetadataInsertion = timedMetadataInsertion
        }
    }
}

extension MediaConvertClientTypes {

    public enum ModelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case custom
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .custom,
                .system
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .custom: return "CUSTOM"
            case .system: return "SYSTEM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public struct JobTemplate: Swift.Sendable {
        /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
        public var accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
        /// An identifier for this resource that is unique within all of AWS.
        public var arn: Swift.String?
        /// An optional category you create to organize your job templates.
        public var category: Swift.String?
        /// The timestamp in epoch seconds for Job template creation.
        public var createdAt: Foundation.Date?
        /// An optional description you create for each job template.
        public var description: Swift.String?
        /// Optional list of hop destinations.
        public var hopDestinations: [MediaConvertClientTypes.HopDestination]?
        /// The timestamp in epoch seconds when the Job template was last updated.
        public var lastUpdated: Foundation.Date?
        /// A name you create for each job template. Each name must be unique within your account.
        /// This member is required.
        public var name: Swift.String?
        /// Relative priority on the job.
        public var priority: Swift.Int?
        /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
        public var queue: Swift.String?
        /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
        /// This member is required.
        public var settings: MediaConvertClientTypes.JobTemplateSettings?
        /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
        public var statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?
        /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
        public var type: MediaConvertClientTypes.ModelType?

        public init(
            accelerationSettings: MediaConvertClientTypes.AccelerationSettings? = nil,
            arn: Swift.String? = nil,
            category: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            hopDestinations: [MediaConvertClientTypes.HopDestination]? = nil,
            lastUpdated: Foundation.Date? = nil,
            name: Swift.String? = nil,
            priority: Swift.Int? = nil,
            queue: Swift.String? = nil,
            settings: MediaConvertClientTypes.JobTemplateSettings? = nil,
            statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval? = nil,
            type: MediaConvertClientTypes.ModelType? = nil
        )
        {
            self.accelerationSettings = accelerationSettings
            self.arn = arn
            self.category = category
            self.createdAt = createdAt
            self.description = description
            self.hopDestinations = hopDestinations
            self.lastUpdated = lastUpdated
            self.name = name
            self.priority = priority
            self.queue = queue
            self.settings = settings
            self.statusUpdateInterval = statusUpdateInterval
            self.type = type
        }
    }
}

extension MediaConvertClientTypes {

    /// Settings for preset
    public struct PresetSettings: Swift.Sendable {
        /// Contains groups of audio encoding settings organized by audio codec. Include one instance of per output. Can contain multiple groups of encoding settings.
        public var audioDescriptions: [MediaConvertClientTypes.AudioDescription]?
        /// This object holds groups of settings related to captions for one output. For each output that has captions, include one instance of CaptionDescriptions.
        public var captionDescriptions: [MediaConvertClientTypes.CaptionDescriptionPreset]?
        /// Container specific settings.
        public var containerSettings: MediaConvertClientTypes.ContainerSettings?
        /// VideoDescription contains a group of video encoding settings. The specific video settings depend on the video codec that you choose for the property codec. Include one instance of VideoDescription per output.
        public var videoDescription: MediaConvertClientTypes.VideoDescription?

        public init(
            audioDescriptions: [MediaConvertClientTypes.AudioDescription]? = nil,
            captionDescriptions: [MediaConvertClientTypes.CaptionDescriptionPreset]? = nil,
            containerSettings: MediaConvertClientTypes.ContainerSettings? = nil,
            videoDescription: MediaConvertClientTypes.VideoDescription? = nil
        )
        {
            self.audioDescriptions = audioDescriptions
            self.captionDescriptions = captionDescriptions
            self.containerSettings = containerSettings
            self.videoDescription = videoDescription
        }
    }
}

extension MediaConvertClientTypes {

    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public struct Preset: Swift.Sendable {
        /// An identifier for this resource that is unique within all of AWS.
        public var arn: Swift.String?
        /// An optional category you create to organize your presets.
        public var category: Swift.String?
        /// The timestamp in epoch seconds for preset creation.
        public var createdAt: Foundation.Date?
        /// An optional description you create for each preset.
        public var description: Swift.String?
        /// The timestamp in epoch seconds when the preset was last updated.
        public var lastUpdated: Foundation.Date?
        /// A name you create for each preset. Each name must be unique within your account.
        /// This member is required.
        public var name: Swift.String?
        /// Settings for preset
        /// This member is required.
        public var settings: MediaConvertClientTypes.PresetSettings?
        /// A preset can be of two types: system or custom. System or built-in preset can't be modified or deleted by the user.
        public var type: MediaConvertClientTypes.ModelType?

        public init(
            arn: Swift.String? = nil,
            category: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdated: Foundation.Date? = nil,
            name: Swift.String? = nil,
            settings: MediaConvertClientTypes.PresetSettings? = nil,
            type: MediaConvertClientTypes.ModelType? = nil
        )
        {
            self.arn = arn
            self.category = category
            self.createdAt = createdAt
            self.description = description
            self.lastUpdated = lastUpdated
            self.name = name
            self.settings = settings
            self.type = type
        }
    }
}

extension MediaConvertClientTypes {

    /// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
    public enum PricingPlan: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDemand
        case reserved
        case sdkUnknown(Swift.String)

        public static var allCases: [PricingPlan] {
            return [
                .onDemand,
                .reserved
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .reserved: return "RESERVED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// The length of the term of your reserved queue pricing plan commitment.
    public enum Commitment: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case oneYear
        case sdkUnknown(Swift.String)

        public static var allCases: [Commitment] {
            return [
                .oneYear
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .oneYear: return "ONE_YEAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
    public enum RenewalType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoRenew
        case expire
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalType] {
            return [
                .autoRenew,
                .expire
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoRenew: return "AUTO_RENEW"
            case .expire: return "EXPIRE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
    public enum ReservationPlanStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case expired
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservationPlanStatus] {
            return [
                .active,
                .expired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .expired: return "EXPIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    public struct ReservationPlan: Swift.Sendable {
        /// The length of the term of your reserved queue pricing plan commitment.
        public var commitment: MediaConvertClientTypes.Commitment?
        /// The timestamp in epoch seconds for when the current pricing plan term for this reserved queue expires.
        public var expiresAt: Foundation.Date?
        /// The timestamp in epoch seconds for when you set up the current pricing plan for this reserved queue.
        public var purchasedAt: Foundation.Date?
        /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
        public var renewalType: MediaConvertClientTypes.RenewalType?
        /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. When you increase this number, you extend your existing commitment with a new 12-month commitment for a larger number of RTS. The new commitment begins when you purchase the additional capacity. You can't decrease the number of RTS in your reserved queue.
        public var reservedSlots: Swift.Int?
        /// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
        public var status: MediaConvertClientTypes.ReservationPlanStatus?

        public init(
            commitment: MediaConvertClientTypes.Commitment? = nil,
            expiresAt: Foundation.Date? = nil,
            purchasedAt: Foundation.Date? = nil,
            renewalType: MediaConvertClientTypes.RenewalType? = nil,
            reservedSlots: Swift.Int? = nil,
            status: MediaConvertClientTypes.ReservationPlanStatus? = nil
        )
        {
            self.commitment = commitment
            self.expiresAt = expiresAt
            self.purchasedAt = purchasedAt
            self.renewalType = renewalType
            self.reservedSlots = reservedSlots
            self.status = status
        }
    }
}

extension MediaConvertClientTypes {

    /// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
    public enum QueueStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case paused
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueStatus] {
            return [
                .active,
                .paused
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .paused: return "PAUSED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public struct Queue: Swift.Sendable {
        /// An identifier for this resource that is unique within all of AWS.
        public var arn: Swift.String?
        /// The timestamp in epoch seconds for when you created the queue.
        public var createdAt: Foundation.Date?
        /// An optional description that you create for each queue.
        public var description: Swift.String?
        /// The timestamp in epoch seconds for when you most recently updated the queue.
        public var lastUpdated: Foundation.Date?
        /// A name that you create for each queue. Each name must be unique within your account.
        /// This member is required.
        public var name: Swift.String?
        /// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
        public var pricingPlan: MediaConvertClientTypes.PricingPlan?
        /// The estimated number of jobs with a PROGRESSING status.
        public var progressingJobsCount: Swift.Int?
        /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
        public var reservationPlan: MediaConvertClientTypes.ReservationPlan?
        /// Queues can be ACTIVE or PAUSED. If you pause a queue, the service won't begin processing jobs in that queue. Jobs that are running when you pause the queue continue to run until they finish or result in an error.
        public var status: MediaConvertClientTypes.QueueStatus?
        /// The estimated number of jobs with a SUBMITTED status.
        public var submittedJobsCount: Swift.Int?
        /// Specifies whether this on-demand queue is system or custom. System queues are built in. You can't modify or delete system queues. You can create and modify custom queues.
        public var type: MediaConvertClientTypes.ModelType?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdated: Foundation.Date? = nil,
            name: Swift.String? = nil,
            pricingPlan: MediaConvertClientTypes.PricingPlan? = nil,
            progressingJobsCount: Swift.Int? = nil,
            reservationPlan: MediaConvertClientTypes.ReservationPlan? = nil,
            status: MediaConvertClientTypes.QueueStatus? = nil,
            submittedJobsCount: Swift.Int? = nil,
            type: MediaConvertClientTypes.ModelType? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastUpdated = lastUpdated
            self.name = name
            self.pricingPlan = pricingPlan
            self.progressingJobsCount = progressingJobsCount
            self.reservationPlan = reservationPlan
            self.status = status
            self.submittedJobsCount = submittedJobsCount
            self.type = type
        }
    }
}

/// The service can't process your request because of a problem in the request. Please check your request form and syntax.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service couldn't complete your request because there is a conflict with the current state of the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You don't have permissions for this action with the credentials you sent.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service encountered an unexpected condition and can't fulfill your request.
public struct InternalServerErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you requested doesn't exist.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Too many requests have been sent in too short of a time. The service limits the rate at which it will accept requests.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateCertificateInput: Swift.Sendable {
    /// The ARN of the ACM certificate that you want to associate with your MediaConvert resource.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct AssociateCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct CancelJobInput: Swift.Sendable {
    /// The Job ID of the job to be cancelled.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct CancelJobOutput: Swift.Sendable {

    public init() { }
}

public struct CreateJobInput: Swift.Sendable {
    /// Optional. Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    public var accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
    /// Optional. Choose a tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up. Any transcoding outputs that don't have an associated tag will appear in your billing report unsorted. If you don't choose a valid value for this field, your job outputs will appear on the billing report unsorted.
    public var billingTagsSource: MediaConvertClientTypes.BillingTagsSource?
    /// Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.
    public var clientRequestToken: Swift.String?
    /// Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    public var hopDestinations: [MediaConvertClientTypes.HopDestination]?
    /// Use Job engine versions to run jobs for your production workflow on one version, while you test and validate the latest version. To specify a Job engine version: Enter a date in a YYYY-MM-DD format. For a list of valid Job engine versions, submit a ListVersions request. To not specify a Job engine version: Leave blank.
    public var jobEngineVersion: Swift.String?
    /// Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.
    public var jobTemplate: Swift.String?
    /// Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    public var priority: Swift.Int?
    /// Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.
    public var queue: Swift.String?
    /// Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
    /// This member is required.
    public var role: Swift.String?
    /// JobSettings contains all the transcode settings for a job.
    /// This member is required.
    public var settings: MediaConvertClientTypes.JobSettings?
    /// Optional. Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
    public var simulateReservedQueue: MediaConvertClientTypes.SimulateReservedQueue?
    /// Optional. Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public var statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?
    /// Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key. Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.
    public var tags: [Swift.String: Swift.String]?
    /// Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs. Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.
    public var userMetadata: [Swift.String: Swift.String]?

    public init(
        accelerationSettings: MediaConvertClientTypes.AccelerationSettings? = nil,
        billingTagsSource: MediaConvertClientTypes.BillingTagsSource? = nil,
        clientRequestToken: Swift.String? = nil,
        hopDestinations: [MediaConvertClientTypes.HopDestination]? = nil,
        jobEngineVersion: Swift.String? = nil,
        jobTemplate: Swift.String? = nil,
        priority: Swift.Int? = nil,
        queue: Swift.String? = nil,
        role: Swift.String? = nil,
        settings: MediaConvertClientTypes.JobSettings? = nil,
        simulateReservedQueue: MediaConvertClientTypes.SimulateReservedQueue? = nil,
        statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        userMetadata: [Swift.String: Swift.String]? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.billingTagsSource = billingTagsSource
        self.clientRequestToken = clientRequestToken
        self.hopDestinations = hopDestinations
        self.jobEngineVersion = jobEngineVersion
        self.jobTemplate = jobTemplate
        self.priority = priority
        self.queue = queue
        self.role = role
        self.settings = settings
        self.simulateReservedQueue = simulateReservedQueue
        self.statusUpdateInterval = statusUpdateInterval
        self.tags = tags
        self.userMetadata = userMetadata
    }
}

public struct CreateJobOutput: Swift.Sendable {
    /// Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public var job: MediaConvertClientTypes.Job?

    public init(
        job: MediaConvertClientTypes.Job? = nil
    )
    {
        self.job = job
    }
}

public struct CreateJobTemplateInput: Swift.Sendable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    public var accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
    /// Optional. A category for the job template you are creating
    public var category: Swift.String?
    /// Optional. A description of the job template you are creating.
    public var description: Swift.String?
    /// Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    public var hopDestinations: [MediaConvertClientTypes.HopDestination]?
    /// The name of the job template you are creating.
    /// This member is required.
    public var name: Swift.String?
    /// Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    public var priority: Swift.Int?
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    public var queue: Swift.String?
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    /// This member is required.
    public var settings: MediaConvertClientTypes.JobTemplateSettings?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public var statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public var tags: [Swift.String: Swift.String]?

    public init(
        accelerationSettings: MediaConvertClientTypes.AccelerationSettings? = nil,
        category: Swift.String? = nil,
        description: Swift.String? = nil,
        hopDestinations: [MediaConvertClientTypes.HopDestination]? = nil,
        name: Swift.String? = nil,
        priority: Swift.Int? = nil,
        queue: Swift.String? = nil,
        settings: MediaConvertClientTypes.JobTemplateSettings? = nil,
        statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.category = category
        self.description = description
        self.hopDestinations = hopDestinations
        self.name = name
        self.priority = priority
        self.queue = queue
        self.settings = settings
        self.statusUpdateInterval = statusUpdateInterval
        self.tags = tags
    }
}

public struct CreateJobTemplateOutput: Swift.Sendable {
    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public var jobTemplate: MediaConvertClientTypes.JobTemplate?

    public init(
        jobTemplate: MediaConvertClientTypes.JobTemplate? = nil
    )
    {
        self.jobTemplate = jobTemplate
    }
}

public struct CreatePresetInput: Swift.Sendable {
    /// Optional. A category for the preset you are creating.
    public var category: Swift.String?
    /// Optional. A description of the preset you are creating.
    public var description: Swift.String?
    /// The name of the preset you are creating.
    /// This member is required.
    public var name: Swift.String?
    /// Settings for preset
    /// This member is required.
    public var settings: MediaConvertClientTypes.PresetSettings?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public var tags: [Swift.String: Swift.String]?

    public init(
        category: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        settings: MediaConvertClientTypes.PresetSettings? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.category = category
        self.description = description
        self.name = name
        self.settings = settings
        self.tags = tags
    }
}

public struct CreatePresetOutput: Swift.Sendable {
    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public var preset: MediaConvertClientTypes.Preset?

    public init(
        preset: MediaConvertClientTypes.Preset? = nil
    )
    {
        self.preset = preset
    }
}

extension MediaConvertClientTypes {

    /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    public struct ReservationPlanSettings: Swift.Sendable {
        /// The length of the term of your reserved queue pricing plan commitment.
        /// This member is required.
        public var commitment: MediaConvertClientTypes.Commitment?
        /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term. When your term is auto renewed, you extend your commitment by 12 months from the auto renew date. You can cancel this commitment.
        /// This member is required.
        public var renewalType: MediaConvertClientTypes.RenewalType?
        /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. You can't decrease the number of RTS in your reserved queue. You can increase the number of RTS by extending your existing commitment with a new 12-month commitment for the larger number. The new commitment begins when you purchase the additional capacity. You can't cancel your commitment or revert to your original commitment after you increase the capacity.
        /// This member is required.
        public var reservedSlots: Swift.Int?

        public init(
            commitment: MediaConvertClientTypes.Commitment? = nil,
            renewalType: MediaConvertClientTypes.RenewalType? = nil,
            reservedSlots: Swift.Int? = nil
        )
        {
            self.commitment = commitment
            self.renewalType = renewalType
            self.reservedSlots = reservedSlots
        }
    }
}

public struct CreateQueueInput: Swift.Sendable {
    /// Optional. A description of the queue that you are creating.
    public var description: Swift.String?
    /// The name of the queue that you are creating.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment. When you use the API to create a queue, the default is on-demand.
    public var pricingPlan: MediaConvertClientTypes.PricingPlan?
    /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    public var reservationPlanSettings: MediaConvertClientTypes.ReservationPlanSettings?
    /// Initial state of the queue. If you create a paused queue, then jobs in that queue won't begin.
    public var status: MediaConvertClientTypes.QueueStatus?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    public var tags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        pricingPlan: MediaConvertClientTypes.PricingPlan? = nil,
        reservationPlanSettings: MediaConvertClientTypes.ReservationPlanSettings? = nil,
        status: MediaConvertClientTypes.QueueStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.name = name
        self.pricingPlan = pricingPlan
        self.reservationPlanSettings = reservationPlanSettings
        self.status = status
        self.tags = tags
    }
}

public struct CreateQueueOutput: Swift.Sendable {
    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public var queue: MediaConvertClientTypes.Queue?

    public init(
        queue: MediaConvertClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

public struct DeleteJobTemplateInput: Swift.Sendable {
    /// The name of the job template to be deleted.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteJobTemplateOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePolicyInput: Swift.Sendable {

    public init() { }
}

public struct DeletePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePresetInput: Swift.Sendable {
    /// The name of the preset to be deleted.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeletePresetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteQueueInput: Swift.Sendable {
    /// The name of the queue that you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteQueueOutput: Swift.Sendable {

    public init() { }
}

extension MediaConvertClientTypes {

    /// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    @available(*, deprecated, message: "DescribeEndpoints and account specific endpoints are no longer required. We recommend that you send your requests directly to the regional endpoint instead.")
    public enum DescribeEndpointsMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case getOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribeEndpointsMode] {
            return [
                .default,
                .getOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .getOnly: return "GET_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

@available(*, deprecated, message: "DescribeEndpoints and account specific endpoints are no longer required. We recommend that you send your requests directly to the regional endpoint instead.")
public struct DescribeEndpointsInput: Swift.Sendable {
    /// Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    public var maxResults: Swift.Int?
    /// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    @available(*, deprecated, message: "DescribeEndpoints and account specific endpoints are no longer required. We recommend that you send your requests directly to the regional endpoint instead.")
    public var mode: MediaConvertClientTypes.DescribeEndpointsMode?
    /// Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        mode: MediaConvertClientTypes.DescribeEndpointsMode? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.mode = mode
        self.nextToken = nextToken
    }
}

@available(*, deprecated, message: "DescribeEndpoints and account specific endpoints are no longer required. We recommend that you send your requests directly to the regional endpoint instead.")
public struct DescribeEndpointsOutput: Swift.Sendable {
    /// List of endpoints
    public var endpoints: [MediaConvertClientTypes.Endpoint]?
    /// Use this string to request the next batch of endpoints.
    public var nextToken: Swift.String?

    public init(
        endpoints: [MediaConvertClientTypes.Endpoint]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

public struct DisassociateCertificateInput: Swift.Sendable {
    /// The ARN of the ACM certificate that you want to disassociate from your MediaConvert resource.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DisassociateCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct GetJobInput: Swift.Sendable {
    /// the job ID of the job.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetJobOutput: Swift.Sendable {
    /// Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public var job: MediaConvertClientTypes.Job?

    public init(
        job: MediaConvertClientTypes.Job? = nil
    )
    {
        self.job = job
    }
}

public struct GetJobTemplateInput: Swift.Sendable {
    /// The name of the job template.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetJobTemplateOutput: Swift.Sendable {
    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public var jobTemplate: MediaConvertClientTypes.JobTemplate?

    public init(
        jobTemplate: MediaConvertClientTypes.JobTemplate? = nil
    )
    {
        self.jobTemplate = jobTemplate
    }
}

public struct GetPolicyInput: Swift.Sendable {

    public init() { }
}

extension MediaConvertClientTypes {

    /// An input policy allows or disallows a job you submit to run based on the conditions that you specify.
    public enum InputPolicy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allowed
        case disallowed
        case sdkUnknown(Swift.String)

        public static var allCases: [InputPolicy] {
            return [
                .allowed,
                .disallowed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allowed: return "ALLOWED"
            case .disallowed: return "DISALLOWED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public struct Policy: Swift.Sendable {
        /// Allow or disallow jobs that specify HTTP inputs.
        public var httpInputs: MediaConvertClientTypes.InputPolicy?
        /// Allow or disallow jobs that specify HTTPS inputs.
        public var httpsInputs: MediaConvertClientTypes.InputPolicy?
        /// Allow or disallow jobs that specify Amazon S3 inputs.
        public var s3Inputs: MediaConvertClientTypes.InputPolicy?

        public init(
            httpInputs: MediaConvertClientTypes.InputPolicy? = nil,
            httpsInputs: MediaConvertClientTypes.InputPolicy? = nil,
            s3Inputs: MediaConvertClientTypes.InputPolicy? = nil
        )
        {
            self.httpInputs = httpInputs
            self.httpsInputs = httpsInputs
            self.s3Inputs = s3Inputs
        }
    }
}

public struct GetPolicyOutput: Swift.Sendable {
    /// A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public var policy: MediaConvertClientTypes.Policy?

    public init(
        policy: MediaConvertClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

public struct GetPresetInput: Swift.Sendable {
    /// The name of the preset.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetPresetOutput: Swift.Sendable {
    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public var preset: MediaConvertClientTypes.Preset?

    public init(
        preset: MediaConvertClientTypes.Preset? = nil
    )
    {
        self.preset = preset
    }
}

public struct GetQueueInput: Swift.Sendable {
    /// The name of the queue that you want information about.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetQueueOutput: Swift.Sendable {
    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public var queue: MediaConvertClientTypes.Queue?

    public init(
        queue: MediaConvertClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

extension MediaConvertClientTypes {

    /// Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    public enum JobTemplateListBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationDate
        case name
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [JobTemplateListBy] {
            return [
                .creationDate,
                .name,
                .system
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationDate: return "CREATION_DATE"
            case .name: return "NAME"
            case .system: return "SYSTEM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaConvertClientTypes {

    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public enum Order: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [Order] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListJobsInput: Swift.Sendable {
    /// Optional. Number of jobs, up to twenty, that will be returned at one time.
    public var maxResults: Swift.Int?
    /// Optional. Use this string, provided with the response to a previous request, to request the next batch of jobs.
    public var nextToken: Swift.String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public var order: MediaConvertClientTypes.Order?
    /// Optional. Provide a queue name to get back only jobs from that queue.
    public var queue: Swift.String?
    /// Optional. A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    public var status: MediaConvertClientTypes.JobStatus?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        order: MediaConvertClientTypes.Order? = nil,
        queue: Swift.String? = nil,
        status: MediaConvertClientTypes.JobStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
        self.queue = queue
        self.status = status
    }
}

public struct ListJobsOutput: Swift.Sendable {
    /// List of jobs
    public var jobs: [MediaConvertClientTypes.Job]?
    /// Use this string to request the next batch of jobs.
    public var nextToken: Swift.String?

    public init(
        jobs: [MediaConvertClientTypes.Job]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextToken = nextToken
    }
}

public struct ListJobTemplatesInput: Swift.Sendable {
    /// Optionally, specify a job template category to limit responses to only job templates from that category.
    public var category: Swift.String?
    /// Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    public var listBy: MediaConvertClientTypes.JobTemplateListBy?
    /// Optional. Number of job templates, up to twenty, that will be returned at one time.
    public var maxResults: Swift.Int?
    /// Use this string, provided with the response to a previous request, to request the next batch of job templates.
    public var nextToken: Swift.String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public var order: MediaConvertClientTypes.Order?

    public init(
        category: Swift.String? = nil,
        listBy: MediaConvertClientTypes.JobTemplateListBy? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        order: MediaConvertClientTypes.Order? = nil
    )
    {
        self.category = category
        self.listBy = listBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
    }
}

public struct ListJobTemplatesOutput: Swift.Sendable {
    /// List of Job templates.
    public var jobTemplates: [MediaConvertClientTypes.JobTemplate]?
    /// Use this string to request the next batch of job templates.
    public var nextToken: Swift.String?

    public init(
        jobTemplates: [MediaConvertClientTypes.JobTemplate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobTemplates = jobTemplates
        self.nextToken = nextToken
    }
}

extension MediaConvertClientTypes {

    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    public enum PresetListBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationDate
        case name
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetListBy] {
            return [
                .creationDate,
                .name,
                .system
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationDate: return "CREATION_DATE"
            case .name: return "NAME"
            case .system: return "SYSTEM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListPresetsInput: Swift.Sendable {
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    public var category: Swift.String?
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    public var listBy: MediaConvertClientTypes.PresetListBy?
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    public var maxResults: Swift.Int?
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    public var nextToken: Swift.String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public var order: MediaConvertClientTypes.Order?

    public init(
        category: Swift.String? = nil,
        listBy: MediaConvertClientTypes.PresetListBy? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        order: MediaConvertClientTypes.Order? = nil
    )
    {
        self.category = category
        self.listBy = listBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
    }
}

public struct ListPresetsOutput: Swift.Sendable {
    /// Use this string to request the next batch of presets.
    public var nextToken: Swift.String?
    /// List of presets
    public var presets: [MediaConvertClientTypes.Preset]?

    public init(
        nextToken: Swift.String? = nil,
        presets: [MediaConvertClientTypes.Preset]? = nil
    )
    {
        self.nextToken = nextToken
        self.presets = presets
    }
}

extension MediaConvertClientTypes {

    /// Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
    public enum QueueListBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationDate
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueListBy] {
            return [
                .creationDate,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationDate: return "CREATION_DATE"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListQueuesInput: Swift.Sendable {
    /// Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
    public var listBy: MediaConvertClientTypes.QueueListBy?
    /// Optional. Number of queues, up to twenty, that will be returned at one time.
    public var maxResults: Swift.Int?
    /// Use this string, provided with the response to a previous request, to request the next batch of queues.
    public var nextToken: Swift.String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public var order: MediaConvertClientTypes.Order?

    public init(
        listBy: MediaConvertClientTypes.QueueListBy? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        order: MediaConvertClientTypes.Order? = nil
    )
    {
        self.listBy = listBy
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
    }
}

public struct ListQueuesOutput: Swift.Sendable {
    /// Use this string to request the next batch of queues.
    public var nextToken: Swift.String?
    /// List of queues.
    public var queues: [MediaConvertClientTypes.Queue]?

    public init(
        nextToken: Swift.String? = nil,
        queues: [MediaConvertClientTypes.Queue]? = nil
    )
    {
        self.nextToken = nextToken
        self.queues = queues
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource that you want to list tags for. To get the ARN, send a GET request with the resource name.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

extension MediaConvertClientTypes {

    /// The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
    public struct ResourceTags: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the resource.
        public var arn: Swift.String?
        /// The tags for the resource.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.tags = tags
        }
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
    public var resourceTags: MediaConvertClientTypes.ResourceTags?

    public init(
        resourceTags: MediaConvertClientTypes.ResourceTags? = nil
    )
    {
        self.resourceTags = resourceTags
    }
}

public struct ListVersionsInput: Swift.Sendable {
    /// Optional. Number of valid Job engine versions, up to twenty, that will be returned at one time.
    public var maxResults: Swift.Int?
    /// Optional. Use this string, provided with the response to a previous request, to request the next batch of Job engine versions.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListVersionsOutput: Swift.Sendable {
    /// Optional. Use this string, provided with the response to a previous request, to request the next batch of Job engine versions.
    public var nextToken: Swift.String?
    /// Retrieve a JSON array of all available Job engine versions and the date they expire.
    public var versions: [MediaConvertClientTypes.JobEngineVersion]?

    public init(
        nextToken: Swift.String? = nil,
        versions: [MediaConvertClientTypes.JobEngineVersion]? = nil
    )
    {
        self.nextToken = nextToken
        self.versions = versions
    }
}

public struct PutPolicyInput: Swift.Sendable {
    /// A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    /// This member is required.
    public var policy: MediaConvertClientTypes.Policy?

    public init(
        policy: MediaConvertClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

public struct PutPolicyOutput: Swift.Sendable {
    /// A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    public var policy: MediaConvertClientTypes.Policy?

    public init(
        policy: MediaConvertClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

public struct SearchJobsInput: Swift.Sendable {
    /// Optional. Provide your input file URL or your partial input file name. The maximum length for an input file is 300 characters.
    public var inputFile: Swift.String?
    /// Optional. Number of jobs, up to twenty, that will be returned at one time.
    public var maxResults: Swift.Int?
    /// Optional. Use this string, provided with the response to a previous request, to request the next batch of jobs.
    public var nextToken: Swift.String?
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    public var order: MediaConvertClientTypes.Order?
    /// Optional. Provide a queue name, or a queue ARN, to return only jobs from that queue.
    public var queue: Swift.String?
    /// Optional. A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    public var status: MediaConvertClientTypes.JobStatus?

    public init(
        inputFile: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        order: MediaConvertClientTypes.Order? = nil,
        queue: Swift.String? = nil,
        status: MediaConvertClientTypes.JobStatus? = nil
    )
    {
        self.inputFile = inputFile
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.order = order
        self.queue = queue
        self.status = status
    }
}

public struct SearchJobsOutput: Swift.Sendable {
    /// List of jobs.
    public var jobs: [MediaConvertClientTypes.Job]?
    /// Use this string to request the next batch of jobs.
    public var nextToken: Swift.String?

    public init(
        jobs: [MediaConvertClientTypes.Job]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextToken = nextToken
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource that you want to tag. To get the ARN, send a GET request with the resource name.
    /// This member is required.
    public var arn: Swift.String?
    /// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove tags from. To get the ARN, send a GET request with the resource name.
    /// This member is required.
    public var arn: Swift.String?
    /// The keys of the tags that you want to remove from the resource.
    public var tagKeys: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateJobTemplateInput: Swift.Sendable {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    public var accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
    /// The new category for the job template, if you are changing it.
    public var category: Swift.String?
    /// The new description for the job template, if you are changing it.
    public var description: Swift.String?
    /// Optional list of hop destinations.
    public var hopDestinations: [MediaConvertClientTypes.HopDestination]?
    /// The name of the job template you are modifying
    /// This member is required.
    public var name: Swift.String?
    /// Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    public var priority: Swift.Int?
    /// The new queue for the job template, if you are changing it.
    public var queue: Swift.String?
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    public var settings: MediaConvertClientTypes.JobTemplateSettings?
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    public var statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?

    public init(
        accelerationSettings: MediaConvertClientTypes.AccelerationSettings? = nil,
        category: Swift.String? = nil,
        description: Swift.String? = nil,
        hopDestinations: [MediaConvertClientTypes.HopDestination]? = nil,
        name: Swift.String? = nil,
        priority: Swift.Int? = nil,
        queue: Swift.String? = nil,
        settings: MediaConvertClientTypes.JobTemplateSettings? = nil,
        statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval? = nil
    )
    {
        self.accelerationSettings = accelerationSettings
        self.category = category
        self.description = description
        self.hopDestinations = hopDestinations
        self.name = name
        self.priority = priority
        self.queue = queue
        self.settings = settings
        self.statusUpdateInterval = statusUpdateInterval
    }
}

public struct UpdateJobTemplateOutput: Swift.Sendable {
    /// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    public var jobTemplate: MediaConvertClientTypes.JobTemplate?

    public init(
        jobTemplate: MediaConvertClientTypes.JobTemplate? = nil
    )
    {
        self.jobTemplate = jobTemplate
    }
}

public struct UpdatePresetInput: Swift.Sendable {
    /// The new category for the preset, if you are changing it.
    public var category: Swift.String?
    /// The new description for the preset, if you are changing it.
    public var description: Swift.String?
    /// The name of the preset you are modifying.
    /// This member is required.
    public var name: Swift.String?
    /// Settings for preset
    public var settings: MediaConvertClientTypes.PresetSettings?

    public init(
        category: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        settings: MediaConvertClientTypes.PresetSettings? = nil
    )
    {
        self.category = category
        self.description = description
        self.name = name
        self.settings = settings
    }
}

public struct UpdatePresetOutput: Swift.Sendable {
    /// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    public var preset: MediaConvertClientTypes.Preset?

    public init(
        preset: MediaConvertClientTypes.Preset? = nil
    )
    {
        self.preset = preset
    }
}

public struct UpdateQueueInput: Swift.Sendable {
    /// The new description for the queue, if you are changing it.
    public var description: Swift.String?
    /// The name of the queue that you are modifying.
    /// This member is required.
    public var name: Swift.String?
    /// The new details of your pricing plan for your reserved queue. When you set up a new pricing plan to replace an expired one, you enter into another 12-month commitment. When you add capacity to your queue by increasing the number of RTS, you extend the term of your commitment to 12 months from when you add capacity. After you make these commitments, you can't cancel them.
    public var reservationPlanSettings: MediaConvertClientTypes.ReservationPlanSettings?
    /// Pause or activate a queue by changing its status between ACTIVE and PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause the queue continue to run until they finish or result in an error.
    public var status: MediaConvertClientTypes.QueueStatus?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        reservationPlanSettings: MediaConvertClientTypes.ReservationPlanSettings? = nil,
        status: MediaConvertClientTypes.QueueStatus? = nil
    )
    {
        self.description = description
        self.name = name
        self.reservationPlanSettings = reservationPlanSettings
        self.status = status
    }
}

public struct UpdateQueueOutput: Swift.Sendable {
    /// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    public var queue: MediaConvertClientTypes.Queue?

    public init(
        queue: MediaConvertClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

extension AssociateCertificateInput {

    static func urlPathProvider(_ value: AssociateCertificateInput) -> Swift.String? {
        return "/2017-08-29/certificates"
    }
}

extension CancelJobInput {

    static func urlPathProvider(_ value: CancelJobInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2017-08-29/jobs/\(id.urlPercentEncoding())"
    }
}

extension CreateJobInput {

    static func urlPathProvider(_ value: CreateJobInput) -> Swift.String? {
        return "/2017-08-29/jobs"
    }
}

extension CreateJobTemplateInput {

    static func urlPathProvider(_ value: CreateJobTemplateInput) -> Swift.String? {
        return "/2017-08-29/jobTemplates"
    }
}

extension CreatePresetInput {

    static func urlPathProvider(_ value: CreatePresetInput) -> Swift.String? {
        return "/2017-08-29/presets"
    }
}

extension CreateQueueInput {

    static func urlPathProvider(_ value: CreateQueueInput) -> Swift.String? {
        return "/2017-08-29/queues"
    }
}

extension DeleteJobTemplateInput {

    static func urlPathProvider(_ value: DeleteJobTemplateInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/jobTemplates/\(name.urlPercentEncoding())"
    }
}

extension DeletePolicyInput {

    static func urlPathProvider(_ value: DeletePolicyInput) -> Swift.String? {
        return "/2017-08-29/policy"
    }
}

extension DeletePresetInput {

    static func urlPathProvider(_ value: DeletePresetInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/presets/\(name.urlPercentEncoding())"
    }
}

extension DeleteQueueInput {

    static func urlPathProvider(_ value: DeleteQueueInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/queues/\(name.urlPercentEncoding())"
    }
}

extension DescribeEndpointsInput {

    static func urlPathProvider(_ value: DescribeEndpointsInput) -> Swift.String? {
        return "/2017-08-29/endpoints"
    }
}

extension DisassociateCertificateInput {

    static func urlPathProvider(_ value: DisassociateCertificateInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/2017-08-29/certificates/\(arn.urlPercentEncoding())"
    }
}

extension GetJobInput {

    static func urlPathProvider(_ value: GetJobInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/2017-08-29/jobs/\(id.urlPercentEncoding())"
    }
}

extension GetJobTemplateInput {

    static func urlPathProvider(_ value: GetJobTemplateInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/jobTemplates/\(name.urlPercentEncoding())"
    }
}

extension GetPolicyInput {

    static func urlPathProvider(_ value: GetPolicyInput) -> Swift.String? {
        return "/2017-08-29/policy"
    }
}

extension GetPresetInput {

    static func urlPathProvider(_ value: GetPresetInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/presets/\(name.urlPercentEncoding())"
    }
}

extension GetQueueInput {

    static func urlPathProvider(_ value: GetQueueInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/queues/\(name.urlPercentEncoding())"
    }
}

extension ListJobsInput {

    static func urlPathProvider(_ value: ListJobsInput) -> Swift.String? {
        return "/2017-08-29/jobs"
    }
}

extension ListJobsInput {

    static func queryItemProvider(_ value: ListJobsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let order = value.order {
            let orderQueryItem = Smithy.URIQueryItem(name: "order".urlPercentEncoding(), value: Swift.String(order.rawValue).urlPercentEncoding())
            items.append(orderQueryItem)
        }
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let queue = value.queue {
            let queueQueryItem = Smithy.URIQueryItem(name: "queue".urlPercentEncoding(), value: Swift.String(queue).urlPercentEncoding())
            items.append(queueQueryItem)
        }
        return items
    }
}

extension ListJobTemplatesInput {

    static func urlPathProvider(_ value: ListJobTemplatesInput) -> Swift.String? {
        return "/2017-08-29/jobTemplates"
    }
}

extension ListJobTemplatesInput {

    static func queryItemProvider(_ value: ListJobTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let order = value.order {
            let orderQueryItem = Smithy.URIQueryItem(name: "order".urlPercentEncoding(), value: Swift.String(order.rawValue).urlPercentEncoding())
            items.append(orderQueryItem)
        }
        if let category = value.category {
            let categoryQueryItem = Smithy.URIQueryItem(name: "category".urlPercentEncoding(), value: Swift.String(category).urlPercentEncoding())
            items.append(categoryQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let listBy = value.listBy {
            let listByQueryItem = Smithy.URIQueryItem(name: "listBy".urlPercentEncoding(), value: Swift.String(listBy.rawValue).urlPercentEncoding())
            items.append(listByQueryItem)
        }
        return items
    }
}

extension ListPresetsInput {

    static func urlPathProvider(_ value: ListPresetsInput) -> Swift.String? {
        return "/2017-08-29/presets"
    }
}

extension ListPresetsInput {

    static func queryItemProvider(_ value: ListPresetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let order = value.order {
            let orderQueryItem = Smithy.URIQueryItem(name: "order".urlPercentEncoding(), value: Swift.String(order.rawValue).urlPercentEncoding())
            items.append(orderQueryItem)
        }
        if let category = value.category {
            let categoryQueryItem = Smithy.URIQueryItem(name: "category".urlPercentEncoding(), value: Swift.String(category).urlPercentEncoding())
            items.append(categoryQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let listBy = value.listBy {
            let listByQueryItem = Smithy.URIQueryItem(name: "listBy".urlPercentEncoding(), value: Swift.String(listBy.rawValue).urlPercentEncoding())
            items.append(listByQueryItem)
        }
        return items
    }
}

extension ListQueuesInput {

    static func urlPathProvider(_ value: ListQueuesInput) -> Swift.String? {
        return "/2017-08-29/queues"
    }
}

extension ListQueuesInput {

    static func queryItemProvider(_ value: ListQueuesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let order = value.order {
            let orderQueryItem = Smithy.URIQueryItem(name: "order".urlPercentEncoding(), value: Swift.String(order.rawValue).urlPercentEncoding())
            items.append(orderQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let listBy = value.listBy {
            let listByQueryItem = Smithy.URIQueryItem(name: "listBy".urlPercentEncoding(), value: Swift.String(listBy.rawValue).urlPercentEncoding())
            items.append(listByQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/2017-08-29/tags/\(arn.urlPercentEncoding())"
    }
}

extension ListVersionsInput {

    static func urlPathProvider(_ value: ListVersionsInput) -> Swift.String? {
        return "/2017-08-29/versions"
    }
}

extension ListVersionsInput {

    static func queryItemProvider(_ value: ListVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension PutPolicyInput {

    static func urlPathProvider(_ value: PutPolicyInput) -> Swift.String? {
        return "/2017-08-29/policy"
    }
}

extension SearchJobsInput {

    static func urlPathProvider(_ value: SearchJobsInput) -> Swift.String? {
        return "/2017-08-29/search"
    }
}

extension SearchJobsInput {

    static func queryItemProvider(_ value: SearchJobsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let order = value.order {
            let orderQueryItem = Smithy.URIQueryItem(name: "order".urlPercentEncoding(), value: Swift.String(order.rawValue).urlPercentEncoding())
            items.append(orderQueryItem)
        }
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let queue = value.queue {
            let queueQueryItem = Smithy.URIQueryItem(name: "queue".urlPercentEncoding(), value: Swift.String(queue).urlPercentEncoding())
            items.append(queueQueryItem)
        }
        if let inputFile = value.inputFile {
            let inputFileQueryItem = Smithy.URIQueryItem(name: "inputFile".urlPercentEncoding(), value: Swift.String(inputFile).urlPercentEncoding())
            items.append(inputFileQueryItem)
        }
        return items
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/2017-08-29/tags"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/2017-08-29/tags/\(arn.urlPercentEncoding())"
    }
}

extension UpdateJobTemplateInput {

    static func urlPathProvider(_ value: UpdateJobTemplateInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/jobTemplates/\(name.urlPercentEncoding())"
    }
}

extension UpdatePresetInput {

    static func urlPathProvider(_ value: UpdatePresetInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/presets/\(name.urlPercentEncoding())"
    }
}

extension UpdateQueueInput {

    static func urlPathProvider(_ value: UpdateQueueInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/2017-08-29/queues/\(name.urlPercentEncoding())"
    }
}

extension AssociateCertificateInput {

    static func write(value: AssociateCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }
}

extension CreateJobInput {

    static func write(value: CreateJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accelerationSettings"].write(value.accelerationSettings, with: MediaConvertClientTypes.AccelerationSettings.write(value:to:))
        try writer["billingTagsSource"].write(value.billingTagsSource)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["hopDestinations"].writeList(value.hopDestinations, memberWritingClosure: MediaConvertClientTypes.HopDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["jobEngineVersion"].write(value.jobEngineVersion)
        try writer["jobTemplate"].write(value.jobTemplate)
        try writer["priority"].write(value.priority)
        try writer["queue"].write(value.queue)
        try writer["role"].write(value.role)
        try writer["settings"].write(value.settings, with: MediaConvertClientTypes.JobSettings.write(value:to:))
        try writer["simulateReservedQueue"].write(value.simulateReservedQueue)
        try writer["statusUpdateInterval"].write(value.statusUpdateInterval)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["userMetadata"].writeMap(value.userMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateJobTemplateInput {

    static func write(value: CreateJobTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accelerationSettings"].write(value.accelerationSettings, with: MediaConvertClientTypes.AccelerationSettings.write(value:to:))
        try writer["category"].write(value.category)
        try writer["description"].write(value.description)
        try writer["hopDestinations"].writeList(value.hopDestinations, memberWritingClosure: MediaConvertClientTypes.HopDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["priority"].write(value.priority)
        try writer["queue"].write(value.queue)
        try writer["settings"].write(value.settings, with: MediaConvertClientTypes.JobTemplateSettings.write(value:to:))
        try writer["statusUpdateInterval"].write(value.statusUpdateInterval)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreatePresetInput {

    static func write(value: CreatePresetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["settings"].write(value.settings, with: MediaConvertClientTypes.PresetSettings.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateQueueInput {

    static func write(value: CreateQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["pricingPlan"].write(value.pricingPlan)
        try writer["reservationPlanSettings"].write(value.reservationPlanSettings, with: MediaConvertClientTypes.ReservationPlanSettings.write(value:to:))
        try writer["status"].write(value.status)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DescribeEndpointsInput {

    static func write(value: DescribeEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["mode"].write(value.mode)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension PutPolicyInput {

    static func write(value: PutPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policy"].write(value.policy, with: MediaConvertClientTypes.Policy.write(value:to:))
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateJobTemplateInput {

    static func write(value: UpdateJobTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accelerationSettings"].write(value.accelerationSettings, with: MediaConvertClientTypes.AccelerationSettings.write(value:to:))
        try writer["category"].write(value.category)
        try writer["description"].write(value.description)
        try writer["hopDestinations"].writeList(value.hopDestinations, memberWritingClosure: MediaConvertClientTypes.HopDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["priority"].write(value.priority)
        try writer["queue"].write(value.queue)
        try writer["settings"].write(value.settings, with: MediaConvertClientTypes.JobTemplateSettings.write(value:to:))
        try writer["statusUpdateInterval"].write(value.statusUpdateInterval)
    }
}

extension UpdatePresetInput {

    static func write(value: UpdatePresetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["description"].write(value.description)
        try writer["settings"].write(value.settings, with: MediaConvertClientTypes.PresetSettings.write(value:to:))
    }
}

extension UpdateQueueInput {

    static func write(value: UpdateQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["reservationPlanSettings"].write(value.reservationPlanSettings, with: MediaConvertClientTypes.ReservationPlanSettings.write(value:to:))
        try writer["status"].write(value.status)
    }
}

extension AssociateCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateCertificateOutput {
        return AssociateCertificateOutput()
    }
}

extension CancelJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelJobOutput {
        return CancelJobOutput()
    }
}

extension CreateJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateJobOutput()
        value.job = try reader["job"].readIfPresent(with: MediaConvertClientTypes.Job.read(from:))
        return value
    }
}

extension CreateJobTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateJobTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateJobTemplateOutput()
        value.jobTemplate = try reader["jobTemplate"].readIfPresent(with: MediaConvertClientTypes.JobTemplate.read(from:))
        return value
    }
}

extension CreatePresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePresetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePresetOutput()
        value.preset = try reader["preset"].readIfPresent(with: MediaConvertClientTypes.Preset.read(from:))
        return value
    }
}

extension CreateQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateQueueOutput()
        value.queue = try reader["queue"].readIfPresent(with: MediaConvertClientTypes.Queue.read(from:))
        return value
    }
}

extension DeleteJobTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteJobTemplateOutput {
        return DeleteJobTemplateOutput()
    }
}

extension DeletePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePolicyOutput {
        return DeletePolicyOutput()
    }
}

extension DeletePresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePresetOutput {
        return DeletePresetOutput()
    }
}

extension DeleteQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteQueueOutput {
        return DeleteQueueOutput()
    }
}

extension DescribeEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointsOutput()
        value.endpoints = try reader["endpoints"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DisassociateCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateCertificateOutput {
        return DisassociateCertificateOutput()
    }
}

extension GetJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetJobOutput()
        value.job = try reader["job"].readIfPresent(with: MediaConvertClientTypes.Job.read(from:))
        return value
    }
}

extension GetJobTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetJobTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetJobTemplateOutput()
        value.jobTemplate = try reader["jobTemplate"].readIfPresent(with: MediaConvertClientTypes.JobTemplate.read(from:))
        return value
    }
}

extension GetPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: MediaConvertClientTypes.Policy.read(from:))
        return value
    }
}

extension GetPresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPresetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPresetOutput()
        value.preset = try reader["preset"].readIfPresent(with: MediaConvertClientTypes.Preset.read(from:))
        return value
    }
}

extension GetQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQueueOutput()
        value.queue = try reader["queue"].readIfPresent(with: MediaConvertClientTypes.Queue.read(from:))
        return value
    }
}

extension ListJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListJobsOutput()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Job.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListJobTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListJobTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListJobTemplatesOutput()
        value.jobTemplates = try reader["jobTemplates"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.JobTemplate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListPresetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPresetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPresetsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.presets = try reader["presets"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Preset.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListQueuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQueuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQueuesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.queues = try reader["queues"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Queue.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.resourceTags = try reader["resourceTags"].readIfPresent(with: MediaConvertClientTypes.ResourceTags.read(from:))
        return value
    }
}

extension ListVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVersionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.versions = try reader["versions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.JobEngineVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: MediaConvertClientTypes.Policy.read(from:))
        return value
    }
}

extension SearchJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchJobsOutput()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Job.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateJobTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateJobTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateJobTemplateOutput()
        value.jobTemplate = try reader["jobTemplate"].readIfPresent(with: MediaConvertClientTypes.JobTemplate.read(from:))
        return value
    }
}

extension UpdatePresetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePresetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePresetOutput()
        value.preset = try reader["preset"].readIfPresent(with: MediaConvertClientTypes.Preset.read(from:))
        return value
    }
}

extension UpdateQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateQueueOutput()
        value.queue = try reader["queue"].readIfPresent(with: MediaConvertClientTypes.Queue.read(from:))
        return value
    }
}

enum AssociateCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateJobTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteJobTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetJobTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListJobTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPresetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQueuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateJobTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePresetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServerErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MediaConvertClientTypes.Job {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Job {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Job()
        value.accelerationSettings = try reader["accelerationSettings"].readIfPresent(with: MediaConvertClientTypes.AccelerationSettings.read(from:))
        value.accelerationStatus = try reader["accelerationStatus"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.billingTagsSource = try reader["billingTagsSource"].readIfPresent()
        value.clientRequestToken = try reader["clientRequestToken"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPhase = try reader["currentPhase"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.hopDestinations = try reader["hopDestinations"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.HopDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.jobEngineVersionRequested = try reader["jobEngineVersionRequested"].readIfPresent()
        value.jobEngineVersionUsed = try reader["jobEngineVersionUsed"].readIfPresent()
        value.jobPercentComplete = try reader["jobPercentComplete"].readIfPresent()
        value.jobTemplate = try reader["jobTemplate"].readIfPresent()
        value.messages = try reader["messages"].readIfPresent(with: MediaConvertClientTypes.JobMessages.read(from:))
        value.outputGroupDetails = try reader["outputGroupDetails"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.OutputGroupDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.priority = try reader["priority"].readIfPresent()
        value.queue = try reader["queue"].readIfPresent()
        value.queueTransitions = try reader["queueTransitions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.QueueTransition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.retryCount = try reader["retryCount"].readIfPresent()
        value.role = try reader["role"].readIfPresent() ?? ""
        value.settings = try reader["settings"].readIfPresent(with: MediaConvertClientTypes.JobSettings.read(from:))
        value.simulateReservedQueue = try reader["simulateReservedQueue"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusUpdateInterval = try reader["statusUpdateInterval"].readIfPresent()
        value.timing = try reader["timing"].readIfPresent(with: MediaConvertClientTypes.Timing.read(from:))
        value.userMetadata = try reader["userMetadata"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.warnings = try reader["warnings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.WarningGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.WarningGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.WarningGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.WarningGroup()
        value.code = try reader["code"].readIfPresent() ?? 0
        value.count = try reader["count"].readIfPresent() ?? 0
        return value
    }
}

extension MediaConvertClientTypes.Timing {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Timing {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Timing()
        value.finishTime = try reader["finishTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.submitTime = try reader["submitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MediaConvertClientTypes.JobSettings {

    static func write(value: MediaConvertClientTypes.JobSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adAvailOffset"].write(value.adAvailOffset)
        try writer["availBlanking"].write(value.availBlanking, with: MediaConvertClientTypes.AvailBlanking.write(value:to:))
        try writer["colorConversion3DLUTSettings"].writeList(value.colorConversion3DLUTSettings, memberWritingClosure: MediaConvertClientTypes.ColorConversion3DLUTSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["esam"].write(value.esam, with: MediaConvertClientTypes.EsamSettings.write(value:to:))
        try writer["extendedDataServices"].write(value.extendedDataServices, with: MediaConvertClientTypes.ExtendedDataServices.write(value:to:))
        try writer["followSource"].write(value.followSource)
        try writer["inputs"].writeList(value.inputs, memberWritingClosure: MediaConvertClientTypes.Input.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["kantarWatermark"].write(value.kantarWatermark, with: MediaConvertClientTypes.KantarWatermarkSettings.write(value:to:))
        try writer["motionImageInserter"].write(value.motionImageInserter, with: MediaConvertClientTypes.MotionImageInserter.write(value:to:))
        try writer["nielsenConfiguration"].write(value.nielsenConfiguration, with: MediaConvertClientTypes.NielsenConfiguration.write(value:to:))
        try writer["nielsenNonLinearWatermark"].write(value.nielsenNonLinearWatermark, with: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings.write(value:to:))
        try writer["outputGroups"].writeList(value.outputGroups, memberWritingClosure: MediaConvertClientTypes.OutputGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timecodeConfig"].write(value.timecodeConfig, with: MediaConvertClientTypes.TimecodeConfig.write(value:to:))
        try writer["timedMetadataInsertion"].write(value.timedMetadataInsertion, with: MediaConvertClientTypes.TimedMetadataInsertion.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.JobSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.JobSettings()
        value.adAvailOffset = try reader["adAvailOffset"].readIfPresent()
        value.availBlanking = try reader["availBlanking"].readIfPresent(with: MediaConvertClientTypes.AvailBlanking.read(from:))
        value.colorConversion3DLUTSettings = try reader["colorConversion3DLUTSettings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.ColorConversion3DLUTSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.esam = try reader["esam"].readIfPresent(with: MediaConvertClientTypes.EsamSettings.read(from:))
        value.extendedDataServices = try reader["extendedDataServices"].readIfPresent(with: MediaConvertClientTypes.ExtendedDataServices.read(from:))
        value.followSource = try reader["followSource"].readIfPresent()
        value.inputs = try reader["inputs"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Input.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.kantarWatermark = try reader["kantarWatermark"].readIfPresent(with: MediaConvertClientTypes.KantarWatermarkSettings.read(from:))
        value.motionImageInserter = try reader["motionImageInserter"].readIfPresent(with: MediaConvertClientTypes.MotionImageInserter.read(from:))
        value.nielsenConfiguration = try reader["nielsenConfiguration"].readIfPresent(with: MediaConvertClientTypes.NielsenConfiguration.read(from:))
        value.nielsenNonLinearWatermark = try reader["nielsenNonLinearWatermark"].readIfPresent(with: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings.read(from:))
        value.outputGroups = try reader["outputGroups"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.OutputGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.timecodeConfig = try reader["timecodeConfig"].readIfPresent(with: MediaConvertClientTypes.TimecodeConfig.read(from:))
        value.timedMetadataInsertion = try reader["timedMetadataInsertion"].readIfPresent(with: MediaConvertClientTypes.TimedMetadataInsertion.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.TimedMetadataInsertion {

    static func write(value: MediaConvertClientTypes.TimedMetadataInsertion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id3Insertions"].writeList(value.id3Insertions, memberWritingClosure: MediaConvertClientTypes.Id3Insertion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TimedMetadataInsertion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TimedMetadataInsertion()
        value.id3Insertions = try reader["id3Insertions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Id3Insertion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.Id3Insertion {

    static func write(value: MediaConvertClientTypes.Id3Insertion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id3"].write(value.id3)
        try writer["timecode"].write(value.timecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Id3Insertion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Id3Insertion()
        value.id3 = try reader["id3"].readIfPresent()
        value.timecode = try reader["timecode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.TimecodeConfig {

    static func write(value: MediaConvertClientTypes.TimecodeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anchor"].write(value.anchor)
        try writer["source"].write(value.source)
        try writer["start"].write(value.start)
        try writer["timestampOffset"].write(value.timestampOffset)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TimecodeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TimecodeConfig()
        value.anchor = try reader["anchor"].readIfPresent()
        value.source = try reader["source"].readIfPresent()
        value.start = try reader["start"].readIfPresent()
        value.timestampOffset = try reader["timestampOffset"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.OutputGroup {

    static func write(value: MediaConvertClientTypes.OutputGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["automatedEncodingSettings"].write(value.automatedEncodingSettings, with: MediaConvertClientTypes.AutomatedEncodingSettings.write(value:to:))
        try writer["customName"].write(value.customName)
        try writer["name"].write(value.name)
        try writer["outputGroupSettings"].write(value.outputGroupSettings, with: MediaConvertClientTypes.OutputGroupSettings.write(value:to:))
        try writer["outputs"].writeList(value.outputs, memberWritingClosure: MediaConvertClientTypes.Output.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OutputGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OutputGroup()
        value.automatedEncodingSettings = try reader["automatedEncodingSettings"].readIfPresent(with: MediaConvertClientTypes.AutomatedEncodingSettings.read(from:))
        value.customName = try reader["customName"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.outputGroupSettings = try reader["outputGroupSettings"].readIfPresent(with: MediaConvertClientTypes.OutputGroupSettings.read(from:))
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.Output.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.Output {

    static func write(value: MediaConvertClientTypes.Output?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDescriptions"].writeList(value.audioDescriptions, memberWritingClosure: MediaConvertClientTypes.AudioDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionDescriptions"].writeList(value.captionDescriptions, memberWritingClosure: MediaConvertClientTypes.CaptionDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["containerSettings"].write(value.containerSettings, with: MediaConvertClientTypes.ContainerSettings.write(value:to:))
        try writer["extension"].write(value.`extension`)
        try writer["nameModifier"].write(value.nameModifier)
        try writer["outputSettings"].write(value.outputSettings, with: MediaConvertClientTypes.OutputSettings.write(value:to:))
        try writer["preset"].write(value.preset)
        try writer["videoDescription"].write(value.videoDescription, with: MediaConvertClientTypes.VideoDescription.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Output {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Output()
        value.audioDescriptions = try reader["audioDescriptions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.AudioDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionDescriptions = try reader["captionDescriptions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.CaptionDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerSettings = try reader["containerSettings"].readIfPresent(with: MediaConvertClientTypes.ContainerSettings.read(from:))
        value.`extension` = try reader["extension"].readIfPresent()
        value.nameModifier = try reader["nameModifier"].readIfPresent()
        value.outputSettings = try reader["outputSettings"].readIfPresent(with: MediaConvertClientTypes.OutputSettings.read(from:))
        value.preset = try reader["preset"].readIfPresent()
        value.videoDescription = try reader["videoDescription"].readIfPresent(with: MediaConvertClientTypes.VideoDescription.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.VideoDescription {

    static func write(value: MediaConvertClientTypes.VideoDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["afdSignaling"].write(value.afdSignaling)
        try writer["antiAlias"].write(value.antiAlias)
        try writer["codecSettings"].write(value.codecSettings, with: MediaConvertClientTypes.VideoCodecSettings.write(value:to:))
        try writer["colorMetadata"].write(value.colorMetadata)
        try writer["crop"].write(value.crop, with: MediaConvertClientTypes.Rectangle.write(value:to:))
        try writer["dropFrameTimecode"].write(value.dropFrameTimecode)
        try writer["fixedAfd"].write(value.fixedAfd)
        try writer["height"].write(value.height)
        try writer["position"].write(value.position, with: MediaConvertClientTypes.Rectangle.write(value:to:))
        try writer["respondToAfd"].write(value.respondToAfd)
        try writer["scalingBehavior"].write(value.scalingBehavior)
        try writer["sharpness"].write(value.sharpness)
        try writer["timecodeInsertion"].write(value.timecodeInsertion)
        try writer["videoPreprocessors"].write(value.videoPreprocessors, with: MediaConvertClientTypes.VideoPreprocessor.write(value:to:))
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoDescription()
        value.afdSignaling = try reader["afdSignaling"].readIfPresent()
        value.antiAlias = try reader["antiAlias"].readIfPresent()
        value.codecSettings = try reader["codecSettings"].readIfPresent(with: MediaConvertClientTypes.VideoCodecSettings.read(from:))
        value.colorMetadata = try reader["colorMetadata"].readIfPresent()
        value.crop = try reader["crop"].readIfPresent(with: MediaConvertClientTypes.Rectangle.read(from:))
        value.dropFrameTimecode = try reader["dropFrameTimecode"].readIfPresent()
        value.fixedAfd = try reader["fixedAfd"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.position = try reader["position"].readIfPresent(with: MediaConvertClientTypes.Rectangle.read(from:))
        value.respondToAfd = try reader["respondToAfd"].readIfPresent()
        value.scalingBehavior = try reader["scalingBehavior"].readIfPresent()
        value.sharpness = try reader["sharpness"].readIfPresent()
        value.timecodeInsertion = try reader["timecodeInsertion"].readIfPresent()
        value.videoPreprocessors = try reader["videoPreprocessors"].readIfPresent(with: MediaConvertClientTypes.VideoPreprocessor.read(from:))
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VideoPreprocessor {

    static func write(value: MediaConvertClientTypes.VideoPreprocessor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["colorCorrector"].write(value.colorCorrector, with: MediaConvertClientTypes.ColorCorrector.write(value:to:))
        try writer["deinterlacer"].write(value.deinterlacer, with: MediaConvertClientTypes.Deinterlacer.write(value:to:))
        try writer["dolbyVision"].write(value.dolbyVision, with: MediaConvertClientTypes.DolbyVision.write(value:to:))
        try writer["hdr10Plus"].write(value.hdr10Plus, with: MediaConvertClientTypes.Hdr10Plus.write(value:to:))
        try writer["imageInserter"].write(value.imageInserter, with: MediaConvertClientTypes.ImageInserter.write(value:to:))
        try writer["noiseReducer"].write(value.noiseReducer, with: MediaConvertClientTypes.NoiseReducer.write(value:to:))
        try writer["partnerWatermarking"].write(value.partnerWatermarking, with: MediaConvertClientTypes.PartnerWatermarking.write(value:to:))
        try writer["timecodeBurnin"].write(value.timecodeBurnin, with: MediaConvertClientTypes.TimecodeBurnin.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoPreprocessor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoPreprocessor()
        value.colorCorrector = try reader["colorCorrector"].readIfPresent(with: MediaConvertClientTypes.ColorCorrector.read(from:))
        value.deinterlacer = try reader["deinterlacer"].readIfPresent(with: MediaConvertClientTypes.Deinterlacer.read(from:))
        value.dolbyVision = try reader["dolbyVision"].readIfPresent(with: MediaConvertClientTypes.DolbyVision.read(from:))
        value.hdr10Plus = try reader["hdr10Plus"].readIfPresent(with: MediaConvertClientTypes.Hdr10Plus.read(from:))
        value.imageInserter = try reader["imageInserter"].readIfPresent(with: MediaConvertClientTypes.ImageInserter.read(from:))
        value.noiseReducer = try reader["noiseReducer"].readIfPresent(with: MediaConvertClientTypes.NoiseReducer.read(from:))
        value.partnerWatermarking = try reader["partnerWatermarking"].readIfPresent(with: MediaConvertClientTypes.PartnerWatermarking.read(from:))
        value.timecodeBurnin = try reader["timecodeBurnin"].readIfPresent(with: MediaConvertClientTypes.TimecodeBurnin.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.TimecodeBurnin {

    static func write(value: MediaConvertClientTypes.TimecodeBurnin?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fontSize"].write(value.fontSize)
        try writer["position"].write(value.position)
        try writer["prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TimecodeBurnin {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TimecodeBurnin()
        value.fontSize = try reader["fontSize"].readIfPresent()
        value.position = try reader["position"].readIfPresent()
        value.`prefix` = try reader["prefix"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.PartnerWatermarking {

    static func write(value: MediaConvertClientTypes.PartnerWatermarking?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nexguardFileMarkerSettings"].write(value.nexguardFileMarkerSettings, with: MediaConvertClientTypes.NexGuardFileMarkerSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.PartnerWatermarking {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.PartnerWatermarking()
        value.nexguardFileMarkerSettings = try reader["nexguardFileMarkerSettings"].readIfPresent(with: MediaConvertClientTypes.NexGuardFileMarkerSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.NexGuardFileMarkerSettings {

    static func write(value: MediaConvertClientTypes.NexGuardFileMarkerSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["license"].write(value.license)
        try writer["payload"].write(value.payload)
        try writer["preset"].write(value.preset)
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NexGuardFileMarkerSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NexGuardFileMarkerSettings()
        value.license = try reader["license"].readIfPresent()
        value.payload = try reader["payload"].readIfPresent()
        value.preset = try reader["preset"].readIfPresent()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.NoiseReducer {

    static func write(value: MediaConvertClientTypes.NoiseReducer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter)
        try writer["filterSettings"].write(value.filterSettings, with: MediaConvertClientTypes.NoiseReducerFilterSettings.write(value:to:))
        try writer["spatialFilterSettings"].write(value.spatialFilterSettings, with: MediaConvertClientTypes.NoiseReducerSpatialFilterSettings.write(value:to:))
        try writer["temporalFilterSettings"].write(value.temporalFilterSettings, with: MediaConvertClientTypes.NoiseReducerTemporalFilterSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NoiseReducer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NoiseReducer()
        value.filter = try reader["filter"].readIfPresent()
        value.filterSettings = try reader["filterSettings"].readIfPresent(with: MediaConvertClientTypes.NoiseReducerFilterSettings.read(from:))
        value.spatialFilterSettings = try reader["spatialFilterSettings"].readIfPresent(with: MediaConvertClientTypes.NoiseReducerSpatialFilterSettings.read(from:))
        value.temporalFilterSettings = try reader["temporalFilterSettings"].readIfPresent(with: MediaConvertClientTypes.NoiseReducerTemporalFilterSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.NoiseReducerTemporalFilterSettings {

    static func write(value: MediaConvertClientTypes.NoiseReducerTemporalFilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aggressiveMode"].write(value.aggressiveMode)
        try writer["postTemporalSharpening"].write(value.postTemporalSharpening)
        try writer["postTemporalSharpeningStrength"].write(value.postTemporalSharpeningStrength)
        try writer["speed"].write(value.speed)
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NoiseReducerTemporalFilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NoiseReducerTemporalFilterSettings()
        value.aggressiveMode = try reader["aggressiveMode"].readIfPresent()
        value.postTemporalSharpening = try reader["postTemporalSharpening"].readIfPresent()
        value.postTemporalSharpeningStrength = try reader["postTemporalSharpeningStrength"].readIfPresent()
        value.speed = try reader["speed"].readIfPresent()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.NoiseReducerSpatialFilterSettings {

    static func write(value: MediaConvertClientTypes.NoiseReducerSpatialFilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["postFilterSharpenStrength"].write(value.postFilterSharpenStrength)
        try writer["speed"].write(value.speed)
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NoiseReducerSpatialFilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NoiseReducerSpatialFilterSettings()
        value.postFilterSharpenStrength = try reader["postFilterSharpenStrength"].readIfPresent()
        value.speed = try reader["speed"].readIfPresent()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.NoiseReducerFilterSettings {

    static func write(value: MediaConvertClientTypes.NoiseReducerFilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NoiseReducerFilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NoiseReducerFilterSettings()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ImageInserter {

    static func write(value: MediaConvertClientTypes.ImageInserter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["insertableImages"].writeList(value.insertableImages, memberWritingClosure: MediaConvertClientTypes.InsertableImage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sdrReferenceWhiteLevel"].write(value.sdrReferenceWhiteLevel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ImageInserter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ImageInserter()
        value.insertableImages = try reader["insertableImages"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.InsertableImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sdrReferenceWhiteLevel = try reader["sdrReferenceWhiteLevel"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.InsertableImage {

    static func write(value: MediaConvertClientTypes.InsertableImage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["fadeIn"].write(value.fadeIn)
        try writer["fadeOut"].write(value.fadeOut)
        try writer["height"].write(value.height)
        try writer["imageInserterInput"].write(value.imageInserterInput)
        try writer["imageX"].write(value.imagex)
        try writer["imageY"].write(value.imagey)
        try writer["layer"].write(value.layer)
        try writer["opacity"].write(value.opacity)
        try writer["startTime"].write(value.startTime)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.InsertableImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.InsertableImage()
        value.duration = try reader["duration"].readIfPresent()
        value.fadeIn = try reader["fadeIn"].readIfPresent()
        value.fadeOut = try reader["fadeOut"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.imageInserterInput = try reader["imageInserterInput"].readIfPresent()
        value.imagex = try reader["imageX"].readIfPresent()
        value.imagey = try reader["imageY"].readIfPresent()
        value.layer = try reader["layer"].readIfPresent()
        value.opacity = try reader["opacity"].readIfPresent()
        value.startTime = try reader["startTime"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Hdr10Plus {

    static func write(value: MediaConvertClientTypes.Hdr10Plus?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["masteringMonitorNits"].write(value.masteringMonitorNits)
        try writer["targetMonitorNits"].write(value.targetMonitorNits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Hdr10Plus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Hdr10Plus()
        value.masteringMonitorNits = try reader["masteringMonitorNits"].readIfPresent()
        value.targetMonitorNits = try reader["targetMonitorNits"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DolbyVision {

    static func write(value: MediaConvertClientTypes.DolbyVision?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["l6Metadata"].write(value.l6Metadata, with: MediaConvertClientTypes.DolbyVisionLevel6Metadata.write(value:to:))
        try writer["l6Mode"].write(value.l6Mode)
        try writer["mapping"].write(value.mapping)
        try writer["profile"].write(value.profile)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DolbyVision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DolbyVision()
        value.l6Metadata = try reader["l6Metadata"].readIfPresent(with: MediaConvertClientTypes.DolbyVisionLevel6Metadata.read(from:))
        value.l6Mode = try reader["l6Mode"].readIfPresent()
        value.mapping = try reader["mapping"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DolbyVisionLevel6Metadata {

    static func write(value: MediaConvertClientTypes.DolbyVisionLevel6Metadata?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxCll"].write(value.maxCll)
        try writer["maxFall"].write(value.maxFall)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DolbyVisionLevel6Metadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DolbyVisionLevel6Metadata()
        value.maxCll = try reader["maxCll"].readIfPresent()
        value.maxFall = try reader["maxFall"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Deinterlacer {

    static func write(value: MediaConvertClientTypes.Deinterlacer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["algorithm"].write(value.algorithm)
        try writer["control"].write(value.control)
        try writer["mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Deinterlacer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Deinterlacer()
        value.algorithm = try reader["algorithm"].readIfPresent()
        value.control = try reader["control"].readIfPresent()
        value.mode = try reader["mode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ColorCorrector {

    static func write(value: MediaConvertClientTypes.ColorCorrector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["brightness"].write(value.brightness)
        try writer["clipLimits"].write(value.clipLimits, with: MediaConvertClientTypes.ClipLimits.write(value:to:))
        try writer["colorSpaceConversion"].write(value.colorSpaceConversion)
        try writer["contrast"].write(value.contrast)
        try writer["hdr10Metadata"].write(value.hdr10Metadata, with: MediaConvertClientTypes.Hdr10Metadata.write(value:to:))
        try writer["hdrToSdrToneMapper"].write(value.hdrToSdrToneMapper)
        try writer["hue"].write(value.hue)
        try writer["maxLuminance"].write(value.maxLuminance)
        try writer["sampleRangeConversion"].write(value.sampleRangeConversion)
        try writer["saturation"].write(value.saturation)
        try writer["sdrReferenceWhiteLevel"].write(value.sdrReferenceWhiteLevel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ColorCorrector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ColorCorrector()
        value.brightness = try reader["brightness"].readIfPresent()
        value.clipLimits = try reader["clipLimits"].readIfPresent(with: MediaConvertClientTypes.ClipLimits.read(from:))
        value.colorSpaceConversion = try reader["colorSpaceConversion"].readIfPresent()
        value.contrast = try reader["contrast"].readIfPresent()
        value.hdr10Metadata = try reader["hdr10Metadata"].readIfPresent(with: MediaConvertClientTypes.Hdr10Metadata.read(from:))
        value.hdrToSdrToneMapper = try reader["hdrToSdrToneMapper"].readIfPresent()
        value.hue = try reader["hue"].readIfPresent()
        value.maxLuminance = try reader["maxLuminance"].readIfPresent()
        value.sampleRangeConversion = try reader["sampleRangeConversion"].readIfPresent()
        value.saturation = try reader["saturation"].readIfPresent()
        value.sdrReferenceWhiteLevel = try reader["sdrReferenceWhiteLevel"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Hdr10Metadata {

    static func write(value: MediaConvertClientTypes.Hdr10Metadata?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bluePrimaryX"].write(value.bluePrimaryX)
        try writer["bluePrimaryY"].write(value.bluePrimaryY)
        try writer["greenPrimaryX"].write(value.greenPrimaryX)
        try writer["greenPrimaryY"].write(value.greenPrimaryY)
        try writer["maxContentLightLevel"].write(value.maxContentLightLevel)
        try writer["maxFrameAverageLightLevel"].write(value.maxFrameAverageLightLevel)
        try writer["maxLuminance"].write(value.maxLuminance)
        try writer["minLuminance"].write(value.minLuminance)
        try writer["redPrimaryX"].write(value.redPrimaryX)
        try writer["redPrimaryY"].write(value.redPrimaryY)
        try writer["whitePointX"].write(value.whitePointX)
        try writer["whitePointY"].write(value.whitePointY)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Hdr10Metadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Hdr10Metadata()
        value.bluePrimaryX = try reader["bluePrimaryX"].readIfPresent()
        value.bluePrimaryY = try reader["bluePrimaryY"].readIfPresent()
        value.greenPrimaryX = try reader["greenPrimaryX"].readIfPresent()
        value.greenPrimaryY = try reader["greenPrimaryY"].readIfPresent()
        value.maxContentLightLevel = try reader["maxContentLightLevel"].readIfPresent()
        value.maxFrameAverageLightLevel = try reader["maxFrameAverageLightLevel"].readIfPresent()
        value.maxLuminance = try reader["maxLuminance"].readIfPresent()
        value.minLuminance = try reader["minLuminance"].readIfPresent()
        value.redPrimaryX = try reader["redPrimaryX"].readIfPresent()
        value.redPrimaryY = try reader["redPrimaryY"].readIfPresent()
        value.whitePointX = try reader["whitePointX"].readIfPresent()
        value.whitePointY = try reader["whitePointY"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ClipLimits {

    static func write(value: MediaConvertClientTypes.ClipLimits?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maximumRGBTolerance"].write(value.maximumRGBTolerance)
        try writer["maximumYUV"].write(value.maximumYUV)
        try writer["minimumRGBTolerance"].write(value.minimumRGBTolerance)
        try writer["minimumYUV"].write(value.minimumYUV)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ClipLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ClipLimits()
        value.maximumRGBTolerance = try reader["maximumRGBTolerance"].readIfPresent()
        value.maximumYUV = try reader["maximumYUV"].readIfPresent()
        value.minimumRGBTolerance = try reader["minimumRGBTolerance"].readIfPresent()
        value.minimumYUV = try reader["minimumYUV"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Rectangle {

    static func write(value: MediaConvertClientTypes.Rectangle?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["width"].write(value.width)
        try writer["x"].write(value.x)
        try writer["y"].write(value.y)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Rectangle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Rectangle()
        value.height = try reader["height"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        value.x = try reader["x"].readIfPresent()
        value.y = try reader["y"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VideoCodecSettings {

    static func write(value: MediaConvertClientTypes.VideoCodecSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["av1Settings"].write(value.av1Settings, with: MediaConvertClientTypes.Av1Settings.write(value:to:))
        try writer["avcIntraSettings"].write(value.avcIntraSettings, with: MediaConvertClientTypes.AvcIntraSettings.write(value:to:))
        try writer["codec"].write(value.codec)
        try writer["frameCaptureSettings"].write(value.frameCaptureSettings, with: MediaConvertClientTypes.FrameCaptureSettings.write(value:to:))
        try writer["h264Settings"].write(value.h264Settings, with: MediaConvertClientTypes.H264Settings.write(value:to:))
        try writer["h265Settings"].write(value.h265Settings, with: MediaConvertClientTypes.H265Settings.write(value:to:))
        try writer["mpeg2Settings"].write(value.mpeg2Settings, with: MediaConvertClientTypes.Mpeg2Settings.write(value:to:))
        try writer["proresSettings"].write(value.proresSettings, with: MediaConvertClientTypes.ProresSettings.write(value:to:))
        try writer["uncompressedSettings"].write(value.uncompressedSettings, with: MediaConvertClientTypes.UncompressedSettings.write(value:to:))
        try writer["vc3Settings"].write(value.vc3Settings, with: MediaConvertClientTypes.Vc3Settings.write(value:to:))
        try writer["vp8Settings"].write(value.vp8Settings, with: MediaConvertClientTypes.Vp8Settings.write(value:to:))
        try writer["vp9Settings"].write(value.vp9Settings, with: MediaConvertClientTypes.Vp9Settings.write(value:to:))
        try writer["xavcSettings"].write(value.xavcSettings, with: MediaConvertClientTypes.XavcSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoCodecSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoCodecSettings()
        value.av1Settings = try reader["av1Settings"].readIfPresent(with: MediaConvertClientTypes.Av1Settings.read(from:))
        value.avcIntraSettings = try reader["avcIntraSettings"].readIfPresent(with: MediaConvertClientTypes.AvcIntraSettings.read(from:))
        value.codec = try reader["codec"].readIfPresent()
        value.frameCaptureSettings = try reader["frameCaptureSettings"].readIfPresent(with: MediaConvertClientTypes.FrameCaptureSettings.read(from:))
        value.h264Settings = try reader["h264Settings"].readIfPresent(with: MediaConvertClientTypes.H264Settings.read(from:))
        value.h265Settings = try reader["h265Settings"].readIfPresent(with: MediaConvertClientTypes.H265Settings.read(from:))
        value.mpeg2Settings = try reader["mpeg2Settings"].readIfPresent(with: MediaConvertClientTypes.Mpeg2Settings.read(from:))
        value.proresSettings = try reader["proresSettings"].readIfPresent(with: MediaConvertClientTypes.ProresSettings.read(from:))
        value.uncompressedSettings = try reader["uncompressedSettings"].readIfPresent(with: MediaConvertClientTypes.UncompressedSettings.read(from:))
        value.vc3Settings = try reader["vc3Settings"].readIfPresent(with: MediaConvertClientTypes.Vc3Settings.read(from:))
        value.vp8Settings = try reader["vp8Settings"].readIfPresent(with: MediaConvertClientTypes.Vp8Settings.read(from:))
        value.vp9Settings = try reader["vp9Settings"].readIfPresent(with: MediaConvertClientTypes.Vp9Settings.read(from:))
        value.xavcSettings = try reader["xavcSettings"].readIfPresent(with: MediaConvertClientTypes.XavcSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.XavcSettings {

    static func write(value: MediaConvertClientTypes.XavcSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["entropyEncoding"].write(value.entropyEncoding)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["profile"].write(value.profile)
        try writer["slowPal"].write(value.slowPal)
        try writer["softness"].write(value.softness)
        try writer["spatialAdaptiveQuantization"].write(value.spatialAdaptiveQuantization)
        try writer["temporalAdaptiveQuantization"].write(value.temporalAdaptiveQuantization)
        try writer["xavc4kIntraCbgProfileSettings"].write(value.xavc4kIntraCbgProfileSettings, with: MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings.write(value:to:))
        try writer["xavc4kIntraVbrProfileSettings"].write(value.xavc4kIntraVbrProfileSettings, with: MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings.write(value:to:))
        try writer["xavc4kProfileSettings"].write(value.xavc4kProfileSettings, with: MediaConvertClientTypes.Xavc4kProfileSettings.write(value:to:))
        try writer["xavcHdIntraCbgProfileSettings"].write(value.xavcHdIntraCbgProfileSettings, with: MediaConvertClientTypes.XavcHdIntraCbgProfileSettings.write(value:to:))
        try writer["xavcHdProfileSettings"].write(value.xavcHdProfileSettings, with: MediaConvertClientTypes.XavcHdProfileSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.XavcSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.XavcSettings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.entropyEncoding = try reader["entropyEncoding"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.softness = try reader["softness"].readIfPresent()
        value.spatialAdaptiveQuantization = try reader["spatialAdaptiveQuantization"].readIfPresent()
        value.temporalAdaptiveQuantization = try reader["temporalAdaptiveQuantization"].readIfPresent()
        value.xavc4kIntraCbgProfileSettings = try reader["xavc4kIntraCbgProfileSettings"].readIfPresent(with: MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings.read(from:))
        value.xavc4kIntraVbrProfileSettings = try reader["xavc4kIntraVbrProfileSettings"].readIfPresent(with: MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings.read(from:))
        value.xavc4kProfileSettings = try reader["xavc4kProfileSettings"].readIfPresent(with: MediaConvertClientTypes.Xavc4kProfileSettings.read(from:))
        value.xavcHdIntraCbgProfileSettings = try reader["xavcHdIntraCbgProfileSettings"].readIfPresent(with: MediaConvertClientTypes.XavcHdIntraCbgProfileSettings.read(from:))
        value.xavcHdProfileSettings = try reader["xavcHdProfileSettings"].readIfPresent(with: MediaConvertClientTypes.XavcHdProfileSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.XavcHdProfileSettings {

    static func write(value: MediaConvertClientTypes.XavcHdProfileSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrateClass"].write(value.bitrateClass)
        try writer["flickerAdaptiveQuantization"].write(value.flickerAdaptiveQuantization)
        try writer["gopBReference"].write(value.gopBReference)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["slices"].write(value.slices)
        try writer["telecine"].write(value.telecine)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.XavcHdProfileSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.XavcHdProfileSettings()
        value.bitrateClass = try reader["bitrateClass"].readIfPresent()
        value.flickerAdaptiveQuantization = try reader["flickerAdaptiveQuantization"].readIfPresent()
        value.gopBReference = try reader["gopBReference"].readIfPresent()
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.XavcHdIntraCbgProfileSettings {

    static func write(value: MediaConvertClientTypes.XavcHdIntraCbgProfileSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["xavcClass"].write(value.xavcClass)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.XavcHdIntraCbgProfileSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.XavcHdIntraCbgProfileSettings()
        value.xavcClass = try reader["xavcClass"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Xavc4kProfileSettings {

    static func write(value: MediaConvertClientTypes.Xavc4kProfileSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrateClass"].write(value.bitrateClass)
        try writer["codecProfile"].write(value.codecProfile)
        try writer["flickerAdaptiveQuantization"].write(value.flickerAdaptiveQuantization)
        try writer["gopBReference"].write(value.gopBReference)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["slices"].write(value.slices)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Xavc4kProfileSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Xavc4kProfileSettings()
        value.bitrateClass = try reader["bitrateClass"].readIfPresent()
        value.codecProfile = try reader["codecProfile"].readIfPresent()
        value.flickerAdaptiveQuantization = try reader["flickerAdaptiveQuantization"].readIfPresent()
        value.gopBReference = try reader["gopBReference"].readIfPresent()
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings {

    static func write(value: MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["xavcClass"].write(value.xavcClass)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings()
        value.xavcClass = try reader["xavcClass"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings {

    static func write(value: MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["xavcClass"].write(value.xavcClass)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings()
        value.xavcClass = try reader["xavcClass"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Vp9Settings {

    static func write(value: MediaConvertClientTypes.Vp9Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopSize"].write(value.gopSize)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["rateControlMode"].write(value.rateControlMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Vp9Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Vp9Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Vp8Settings {

    static func write(value: MediaConvertClientTypes.Vp8Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopSize"].write(value.gopSize)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["rateControlMode"].write(value.rateControlMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Vp8Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Vp8Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Vc3Settings {

    static func write(value: MediaConvertClientTypes.Vc3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["slowPal"].write(value.slowPal)
        try writer["telecine"].write(value.telecine)
        try writer["vc3Class"].write(value.vc3Class)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Vc3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Vc3Settings()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        value.vc3Class = try reader["vc3Class"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.UncompressedSettings {

    static func write(value: MediaConvertClientTypes.UncompressedSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fourcc"].write(value.fourcc)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["slowPal"].write(value.slowPal)
        try writer["telecine"].write(value.telecine)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.UncompressedSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.UncompressedSettings()
        value.fourcc = try reader["fourcc"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ProresSettings {

    static func write(value: MediaConvertClientTypes.ProresSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["chromaSampling"].write(value.chromaSampling)
        try writer["codecProfile"].write(value.codecProfile)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["slowPal"].write(value.slowPal)
        try writer["telecine"].write(value.telecine)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ProresSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ProresSettings()
        value.chromaSampling = try reader["chromaSampling"].readIfPresent()
        value.codecProfile = try reader["codecProfile"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Mpeg2Settings {

    static func write(value: MediaConvertClientTypes.Mpeg2Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["bitrate"].write(value.bitrate)
        try writer["codecLevel"].write(value.codecLevel)
        try writer["codecProfile"].write(value.codecProfile)
        try writer["dynamicSubGop"].write(value.dynamicSubGop)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["hrdBufferFinalFillPercentage"].write(value.hrdBufferFinalFillPercentage)
        try writer["hrdBufferInitialFillPercentage"].write(value.hrdBufferInitialFillPercentage)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["intraDcPrecision"].write(value.intraDcPrecision)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["minIInterval"].write(value.minIInterval)
        try writer["numberBFramesBetweenReferenceFrames"].write(value.numberBFramesBetweenReferenceFrames)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["sceneChangeDetect"].write(value.sceneChangeDetect)
        try writer["slowPal"].write(value.slowPal)
        try writer["softness"].write(value.softness)
        try writer["spatialAdaptiveQuantization"].write(value.spatialAdaptiveQuantization)
        try writer["syntax"].write(value.syntax)
        try writer["telecine"].write(value.telecine)
        try writer["temporalAdaptiveQuantization"].write(value.temporalAdaptiveQuantization)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Mpeg2Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Mpeg2Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codecLevel = try reader["codecLevel"].readIfPresent()
        value.codecProfile = try reader["codecProfile"].readIfPresent()
        value.dynamicSubGop = try reader["dynamicSubGop"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.hrdBufferFinalFillPercentage = try reader["hrdBufferFinalFillPercentage"].readIfPresent()
        value.hrdBufferInitialFillPercentage = try reader["hrdBufferInitialFillPercentage"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.intraDcPrecision = try reader["intraDcPrecision"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.minIInterval = try reader["minIInterval"].readIfPresent()
        value.numberBFramesBetweenReferenceFrames = try reader["numberBFramesBetweenReferenceFrames"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.sceneChangeDetect = try reader["sceneChangeDetect"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.softness = try reader["softness"].readIfPresent()
        value.spatialAdaptiveQuantization = try reader["spatialAdaptiveQuantization"].readIfPresent()
        value.syntax = try reader["syntax"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        value.temporalAdaptiveQuantization = try reader["temporalAdaptiveQuantization"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.H265Settings {

    static func write(value: MediaConvertClientTypes.H265Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["alternateTransferFunctionSei"].write(value.alternateTransferFunctionSei)
        try writer["bandwidthReductionFilter"].write(value.bandwidthReductionFilter, with: MediaConvertClientTypes.BandwidthReductionFilter.write(value:to:))
        try writer["bitrate"].write(value.bitrate)
        try writer["codecLevel"].write(value.codecLevel)
        try writer["codecProfile"].write(value.codecProfile)
        try writer["dynamicSubGop"].write(value.dynamicSubGop)
        try writer["endOfStreamMarkers"].write(value.endOfStreamMarkers)
        try writer["flickerAdaptiveQuantization"].write(value.flickerAdaptiveQuantization)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopBReference"].write(value.gopBReference)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["hrdBufferFinalFillPercentage"].write(value.hrdBufferFinalFillPercentage)
        try writer["hrdBufferInitialFillPercentage"].write(value.hrdBufferInitialFillPercentage)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["minIInterval"].write(value.minIInterval)
        try writer["numberBFramesBetweenReferenceFrames"].write(value.numberBFramesBetweenReferenceFrames)
        try writer["numberReferenceFrames"].write(value.numberReferenceFrames)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["qvbrSettings"].write(value.qvbrSettings, with: MediaConvertClientTypes.H265QvbrSettings.write(value:to:))
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["sampleAdaptiveOffsetFilterMode"].write(value.sampleAdaptiveOffsetFilterMode)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["sceneChangeDetect"].write(value.sceneChangeDetect)
        try writer["slices"].write(value.slices)
        try writer["slowPal"].write(value.slowPal)
        try writer["spatialAdaptiveQuantization"].write(value.spatialAdaptiveQuantization)
        try writer["telecine"].write(value.telecine)
        try writer["temporalAdaptiveQuantization"].write(value.temporalAdaptiveQuantization)
        try writer["temporalIds"].write(value.temporalIds)
        try writer["tiles"].write(value.tiles)
        try writer["unregisteredSeiTimecode"].write(value.unregisteredSeiTimecode)
        try writer["writeMp4PackagingType"].write(value.writeMp4PackagingType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.H265Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.H265Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.alternateTransferFunctionSei = try reader["alternateTransferFunctionSei"].readIfPresent()
        value.bandwidthReductionFilter = try reader["bandwidthReductionFilter"].readIfPresent(with: MediaConvertClientTypes.BandwidthReductionFilter.read(from:))
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codecLevel = try reader["codecLevel"].readIfPresent()
        value.codecProfile = try reader["codecProfile"].readIfPresent()
        value.dynamicSubGop = try reader["dynamicSubGop"].readIfPresent()
        value.endOfStreamMarkers = try reader["endOfStreamMarkers"].readIfPresent()
        value.flickerAdaptiveQuantization = try reader["flickerAdaptiveQuantization"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopBReference = try reader["gopBReference"].readIfPresent()
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.hrdBufferFinalFillPercentage = try reader["hrdBufferFinalFillPercentage"].readIfPresent()
        value.hrdBufferInitialFillPercentage = try reader["hrdBufferInitialFillPercentage"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.minIInterval = try reader["minIInterval"].readIfPresent()
        value.numberBFramesBetweenReferenceFrames = try reader["numberBFramesBetweenReferenceFrames"].readIfPresent()
        value.numberReferenceFrames = try reader["numberReferenceFrames"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.qvbrSettings = try reader["qvbrSettings"].readIfPresent(with: MediaConvertClientTypes.H265QvbrSettings.read(from:))
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.sampleAdaptiveOffsetFilterMode = try reader["sampleAdaptiveOffsetFilterMode"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.sceneChangeDetect = try reader["sceneChangeDetect"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.spatialAdaptiveQuantization = try reader["spatialAdaptiveQuantization"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        value.temporalAdaptiveQuantization = try reader["temporalAdaptiveQuantization"].readIfPresent()
        value.temporalIds = try reader["temporalIds"].readIfPresent()
        value.tiles = try reader["tiles"].readIfPresent()
        value.unregisteredSeiTimecode = try reader["unregisteredSeiTimecode"].readIfPresent()
        value.writeMp4PackagingType = try reader["writeMp4PackagingType"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.H265QvbrSettings {

    static func write(value: MediaConvertClientTypes.H265QvbrSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxAverageBitrate"].write(value.maxAverageBitrate)
        try writer["qvbrQualityLevel"].write(value.qvbrQualityLevel)
        try writer["qvbrQualityLevelFineTune"].write(value.qvbrQualityLevelFineTune)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.H265QvbrSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.H265QvbrSettings()
        value.maxAverageBitrate = try reader["maxAverageBitrate"].readIfPresent()
        value.qvbrQualityLevel = try reader["qvbrQualityLevel"].readIfPresent()
        value.qvbrQualityLevelFineTune = try reader["qvbrQualityLevelFineTune"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.BandwidthReductionFilter {

    static func write(value: MediaConvertClientTypes.BandwidthReductionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sharpening"].write(value.sharpening)
        try writer["strength"].write(value.strength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.BandwidthReductionFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.BandwidthReductionFilter()
        value.sharpening = try reader["sharpening"].readIfPresent()
        value.strength = try reader["strength"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.H264Settings {

    static func write(value: MediaConvertClientTypes.H264Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["bandwidthReductionFilter"].write(value.bandwidthReductionFilter, with: MediaConvertClientTypes.BandwidthReductionFilter.write(value:to:))
        try writer["bitrate"].write(value.bitrate)
        try writer["codecLevel"].write(value.codecLevel)
        try writer["codecProfile"].write(value.codecProfile)
        try writer["dynamicSubGop"].write(value.dynamicSubGop)
        try writer["endOfStreamMarkers"].write(value.endOfStreamMarkers)
        try writer["entropyEncoding"].write(value.entropyEncoding)
        try writer["fieldEncoding"].write(value.fieldEncoding)
        try writer["flickerAdaptiveQuantization"].write(value.flickerAdaptiveQuantization)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopBReference"].write(value.gopBReference)
        try writer["gopClosedCadence"].write(value.gopClosedCadence)
        try writer["gopSize"].write(value.gopSize)
        try writer["gopSizeUnits"].write(value.gopSizeUnits)
        try writer["hrdBufferFinalFillPercentage"].write(value.hrdBufferFinalFillPercentage)
        try writer["hrdBufferInitialFillPercentage"].write(value.hrdBufferInitialFillPercentage)
        try writer["hrdBufferSize"].write(value.hrdBufferSize)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["minIInterval"].write(value.minIInterval)
        try writer["numberBFramesBetweenReferenceFrames"].write(value.numberBFramesBetweenReferenceFrames)
        try writer["numberReferenceFrames"].write(value.numberReferenceFrames)
        try writer["parControl"].write(value.parControl)
        try writer["parDenominator"].write(value.parDenominator)
        try writer["parNumerator"].write(value.parNumerator)
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
        try writer["qvbrSettings"].write(value.qvbrSettings, with: MediaConvertClientTypes.H264QvbrSettings.write(value:to:))
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["repeatPps"].write(value.repeatPps)
        try writer["saliencyAwareEncoding"].write(value.saliencyAwareEncoding)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["sceneChangeDetect"].write(value.sceneChangeDetect)
        try writer["slices"].write(value.slices)
        try writer["slowPal"].write(value.slowPal)
        try writer["softness"].write(value.softness)
        try writer["spatialAdaptiveQuantization"].write(value.spatialAdaptiveQuantization)
        try writer["syntax"].write(value.syntax)
        try writer["telecine"].write(value.telecine)
        try writer["temporalAdaptiveQuantization"].write(value.temporalAdaptiveQuantization)
        try writer["unregisteredSeiTimecode"].write(value.unregisteredSeiTimecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.H264Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.H264Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.bandwidthReductionFilter = try reader["bandwidthReductionFilter"].readIfPresent(with: MediaConvertClientTypes.BandwidthReductionFilter.read(from:))
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codecLevel = try reader["codecLevel"].readIfPresent()
        value.codecProfile = try reader["codecProfile"].readIfPresent()
        value.dynamicSubGop = try reader["dynamicSubGop"].readIfPresent()
        value.endOfStreamMarkers = try reader["endOfStreamMarkers"].readIfPresent()
        value.entropyEncoding = try reader["entropyEncoding"].readIfPresent()
        value.fieldEncoding = try reader["fieldEncoding"].readIfPresent()
        value.flickerAdaptiveQuantization = try reader["flickerAdaptiveQuantization"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopBReference = try reader["gopBReference"].readIfPresent()
        value.gopClosedCadence = try reader["gopClosedCadence"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.gopSizeUnits = try reader["gopSizeUnits"].readIfPresent()
        value.hrdBufferFinalFillPercentage = try reader["hrdBufferFinalFillPercentage"].readIfPresent()
        value.hrdBufferInitialFillPercentage = try reader["hrdBufferInitialFillPercentage"].readIfPresent()
        value.hrdBufferSize = try reader["hrdBufferSize"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.minIInterval = try reader["minIInterval"].readIfPresent()
        value.numberBFramesBetweenReferenceFrames = try reader["numberBFramesBetweenReferenceFrames"].readIfPresent()
        value.numberReferenceFrames = try reader["numberReferenceFrames"].readIfPresent()
        value.parControl = try reader["parControl"].readIfPresent()
        value.parDenominator = try reader["parDenominator"].readIfPresent()
        value.parNumerator = try reader["parNumerator"].readIfPresent()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        value.qvbrSettings = try reader["qvbrSettings"].readIfPresent(with: MediaConvertClientTypes.H264QvbrSettings.read(from:))
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.repeatPps = try reader["repeatPps"].readIfPresent()
        value.saliencyAwareEncoding = try reader["saliencyAwareEncoding"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.sceneChangeDetect = try reader["sceneChangeDetect"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.softness = try reader["softness"].readIfPresent()
        value.spatialAdaptiveQuantization = try reader["spatialAdaptiveQuantization"].readIfPresent()
        value.syntax = try reader["syntax"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        value.temporalAdaptiveQuantization = try reader["temporalAdaptiveQuantization"].readIfPresent()
        value.unregisteredSeiTimecode = try reader["unregisteredSeiTimecode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.H264QvbrSettings {

    static func write(value: MediaConvertClientTypes.H264QvbrSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxAverageBitrate"].write(value.maxAverageBitrate)
        try writer["qvbrQualityLevel"].write(value.qvbrQualityLevel)
        try writer["qvbrQualityLevelFineTune"].write(value.qvbrQualityLevelFineTune)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.H264QvbrSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.H264QvbrSettings()
        value.maxAverageBitrate = try reader["maxAverageBitrate"].readIfPresent()
        value.qvbrQualityLevel = try reader["qvbrQualityLevel"].readIfPresent()
        value.qvbrQualityLevelFineTune = try reader["qvbrQualityLevelFineTune"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.FrameCaptureSettings {

    static func write(value: MediaConvertClientTypes.FrameCaptureSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["maxCaptures"].write(value.maxCaptures)
        try writer["quality"].write(value.quality)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.FrameCaptureSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.FrameCaptureSettings()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.maxCaptures = try reader["maxCaptures"].readIfPresent()
        value.quality = try reader["quality"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AvcIntraSettings {

    static func write(value: MediaConvertClientTypes.AvcIntraSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["avcIntraClass"].write(value.avcIntraClass)
        try writer["avcIntraUhdSettings"].write(value.avcIntraUhdSettings, with: MediaConvertClientTypes.AvcIntraUhdSettings.write(value:to:))
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["interlaceMode"].write(value.interlaceMode)
        try writer["scanTypeConversionMode"].write(value.scanTypeConversionMode)
        try writer["slowPal"].write(value.slowPal)
        try writer["telecine"].write(value.telecine)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AvcIntraSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AvcIntraSettings()
        value.avcIntraClass = try reader["avcIntraClass"].readIfPresent()
        value.avcIntraUhdSettings = try reader["avcIntraUhdSettings"].readIfPresent(with: MediaConvertClientTypes.AvcIntraUhdSettings.read(from:))
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.interlaceMode = try reader["interlaceMode"].readIfPresent()
        value.scanTypeConversionMode = try reader["scanTypeConversionMode"].readIfPresent()
        value.slowPal = try reader["slowPal"].readIfPresent()
        value.telecine = try reader["telecine"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AvcIntraUhdSettings {

    static func write(value: MediaConvertClientTypes.AvcIntraUhdSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["qualityTuningLevel"].write(value.qualityTuningLevel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AvcIntraUhdSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AvcIntraUhdSettings()
        value.qualityTuningLevel = try reader["qualityTuningLevel"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Av1Settings {

    static func write(value: MediaConvertClientTypes.Av1Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adaptiveQuantization"].write(value.adaptiveQuantization)
        try writer["bitDepth"].write(value.bitDepth)
        try writer["filmGrainSynthesis"].write(value.filmGrainSynthesis)
        try writer["framerateControl"].write(value.framerateControl)
        try writer["framerateConversionAlgorithm"].write(value.framerateConversionAlgorithm)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["gopSize"].write(value.gopSize)
        try writer["maxBitrate"].write(value.maxBitrate)
        try writer["numberBFramesBetweenReferenceFrames"].write(value.numberBFramesBetweenReferenceFrames)
        try writer["qvbrSettings"].write(value.qvbrSettings, with: MediaConvertClientTypes.Av1QvbrSettings.write(value:to:))
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["slices"].write(value.slices)
        try writer["spatialAdaptiveQuantization"].write(value.spatialAdaptiveQuantization)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Av1Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Av1Settings()
        value.adaptiveQuantization = try reader["adaptiveQuantization"].readIfPresent()
        value.bitDepth = try reader["bitDepth"].readIfPresent()
        value.filmGrainSynthesis = try reader["filmGrainSynthesis"].readIfPresent()
        value.framerateControl = try reader["framerateControl"].readIfPresent()
        value.framerateConversionAlgorithm = try reader["framerateConversionAlgorithm"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.gopSize = try reader["gopSize"].readIfPresent()
        value.maxBitrate = try reader["maxBitrate"].readIfPresent()
        value.numberBFramesBetweenReferenceFrames = try reader["numberBFramesBetweenReferenceFrames"].readIfPresent()
        value.qvbrSettings = try reader["qvbrSettings"].readIfPresent(with: MediaConvertClientTypes.Av1QvbrSettings.read(from:))
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.slices = try reader["slices"].readIfPresent()
        value.spatialAdaptiveQuantization = try reader["spatialAdaptiveQuantization"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Av1QvbrSettings {

    static func write(value: MediaConvertClientTypes.Av1QvbrSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["qvbrQualityLevel"].write(value.qvbrQualityLevel)
        try writer["qvbrQualityLevelFineTune"].write(value.qvbrQualityLevelFineTune)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Av1QvbrSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Av1QvbrSettings()
        value.qvbrQualityLevel = try reader["qvbrQualityLevel"].readIfPresent()
        value.qvbrQualityLevelFineTune = try reader["qvbrQualityLevelFineTune"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.OutputSettings {

    static func write(value: MediaConvertClientTypes.OutputSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hlsSettings"].write(value.hlsSettings, with: MediaConvertClientTypes.HlsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OutputSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OutputSettings()
        value.hlsSettings = try reader["hlsSettings"].readIfPresent(with: MediaConvertClientTypes.HlsSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.HlsSettings {

    static func write(value: MediaConvertClientTypes.HlsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioGroupId"].write(value.audioGroupId)
        try writer["audioOnlyContainer"].write(value.audioOnlyContainer)
        try writer["audioRenditionSets"].write(value.audioRenditionSets)
        try writer["audioTrackType"].write(value.audioTrackType)
        try writer["descriptiveVideoServiceFlag"].write(value.descriptiveVideoServiceFlag)
        try writer["iFrameOnlyManifest"].write(value.iFrameOnlyManifest)
        try writer["segmentModifier"].write(value.segmentModifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsSettings()
        value.audioGroupId = try reader["audioGroupId"].readIfPresent()
        value.audioOnlyContainer = try reader["audioOnlyContainer"].readIfPresent()
        value.audioRenditionSets = try reader["audioRenditionSets"].readIfPresent()
        value.audioTrackType = try reader["audioTrackType"].readIfPresent()
        value.descriptiveVideoServiceFlag = try reader["descriptiveVideoServiceFlag"].readIfPresent()
        value.iFrameOnlyManifest = try reader["iFrameOnlyManifest"].readIfPresent()
        value.segmentModifier = try reader["segmentModifier"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ContainerSettings {

    static func write(value: MediaConvertClientTypes.ContainerSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cmfcSettings"].write(value.cmfcSettings, with: MediaConvertClientTypes.CmfcSettings.write(value:to:))
        try writer["container"].write(value.container)
        try writer["f4vSettings"].write(value.f4vSettings, with: MediaConvertClientTypes.F4vSettings.write(value:to:))
        try writer["m2tsSettings"].write(value.m2tsSettings, with: MediaConvertClientTypes.M2tsSettings.write(value:to:))
        try writer["m3u8Settings"].write(value.m3u8Settings, with: MediaConvertClientTypes.M3u8Settings.write(value:to:))
        try writer["movSettings"].write(value.movSettings, with: MediaConvertClientTypes.MovSettings.write(value:to:))
        try writer["mp4Settings"].write(value.mp4Settings, with: MediaConvertClientTypes.Mp4Settings.write(value:to:))
        try writer["mpdSettings"].write(value.mpdSettings, with: MediaConvertClientTypes.MpdSettings.write(value:to:))
        try writer["mxfSettings"].write(value.mxfSettings, with: MediaConvertClientTypes.MxfSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ContainerSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ContainerSettings()
        value.cmfcSettings = try reader["cmfcSettings"].readIfPresent(with: MediaConvertClientTypes.CmfcSettings.read(from:))
        value.container = try reader["container"].readIfPresent()
        value.f4vSettings = try reader["f4vSettings"].readIfPresent(with: MediaConvertClientTypes.F4vSettings.read(from:))
        value.m2tsSettings = try reader["m2tsSettings"].readIfPresent(with: MediaConvertClientTypes.M2tsSettings.read(from:))
        value.m3u8Settings = try reader["m3u8Settings"].readIfPresent(with: MediaConvertClientTypes.M3u8Settings.read(from:))
        value.movSettings = try reader["movSettings"].readIfPresent(with: MediaConvertClientTypes.MovSettings.read(from:))
        value.mp4Settings = try reader["mp4Settings"].readIfPresent(with: MediaConvertClientTypes.Mp4Settings.read(from:))
        value.mpdSettings = try reader["mpdSettings"].readIfPresent(with: MediaConvertClientTypes.MpdSettings.read(from:))
        value.mxfSettings = try reader["mxfSettings"].readIfPresent(with: MediaConvertClientTypes.MxfSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.MxfSettings {

    static func write(value: MediaConvertClientTypes.MxfSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["afdSignaling"].write(value.afdSignaling)
        try writer["profile"].write(value.profile)
        try writer["xavcProfileSettings"].write(value.xavcProfileSettings, with: MediaConvertClientTypes.MxfXavcProfileSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MxfSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MxfSettings()
        value.afdSignaling = try reader["afdSignaling"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        value.xavcProfileSettings = try reader["xavcProfileSettings"].readIfPresent(with: MediaConvertClientTypes.MxfXavcProfileSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.MxfXavcProfileSettings {

    static func write(value: MediaConvertClientTypes.MxfXavcProfileSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["durationMode"].write(value.durationMode)
        try writer["maxAncDataSize"].write(value.maxAncDataSize)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MxfXavcProfileSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MxfXavcProfileSettings()
        value.durationMode = try reader["durationMode"].readIfPresent()
        value.maxAncDataSize = try reader["maxAncDataSize"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MpdSettings {

    static func write(value: MediaConvertClientTypes.MpdSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessibilityCaptionHints"].write(value.accessibilityCaptionHints)
        try writer["audioDuration"].write(value.audioDuration)
        try writer["captionContainerType"].write(value.captionContainerType)
        try writer["klvMetadata"].write(value.klvMetadata)
        try writer["manifestMetadataSignaling"].write(value.manifestMetadataSignaling)
        try writer["scte35Esam"].write(value.scte35Esam)
        try writer["scte35Source"].write(value.scte35Source)
        try writer["timedMetadata"].write(value.timedMetadata)
        try writer["timedMetadataBoxVersion"].write(value.timedMetadataBoxVersion)
        try writer["timedMetadataSchemeIdUri"].write(value.timedMetadataSchemeIdUri)
        try writer["timedMetadataValue"].write(value.timedMetadataValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MpdSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MpdSettings()
        value.accessibilityCaptionHints = try reader["accessibilityCaptionHints"].readIfPresent()
        value.audioDuration = try reader["audioDuration"].readIfPresent()
        value.captionContainerType = try reader["captionContainerType"].readIfPresent()
        value.klvMetadata = try reader["klvMetadata"].readIfPresent()
        value.manifestMetadataSignaling = try reader["manifestMetadataSignaling"].readIfPresent()
        value.scte35Esam = try reader["scte35Esam"].readIfPresent()
        value.scte35Source = try reader["scte35Source"].readIfPresent()
        value.timedMetadata = try reader["timedMetadata"].readIfPresent()
        value.timedMetadataBoxVersion = try reader["timedMetadataBoxVersion"].readIfPresent()
        value.timedMetadataSchemeIdUri = try reader["timedMetadataSchemeIdUri"].readIfPresent()
        value.timedMetadataValue = try reader["timedMetadataValue"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Mp4Settings {

    static func write(value: MediaConvertClientTypes.Mp4Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDuration"].write(value.audioDuration)
        try writer["cslgAtom"].write(value.cslgAtom)
        try writer["cttsVersion"].write(value.cttsVersion)
        try writer["freeSpaceBox"].write(value.freeSpaceBox)
        try writer["moovPlacement"].write(value.moovPlacement)
        try writer["mp4MajorBrand"].write(value.mp4MajorBrand)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Mp4Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Mp4Settings()
        value.audioDuration = try reader["audioDuration"].readIfPresent()
        value.cslgAtom = try reader["cslgAtom"].readIfPresent()
        value.cttsVersion = try reader["cttsVersion"].readIfPresent()
        value.freeSpaceBox = try reader["freeSpaceBox"].readIfPresent()
        value.moovPlacement = try reader["moovPlacement"].readIfPresent()
        value.mp4MajorBrand = try reader["mp4MajorBrand"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MovSettings {

    static func write(value: MediaConvertClientTypes.MovSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clapAtom"].write(value.clapAtom)
        try writer["cslgAtom"].write(value.cslgAtom)
        try writer["mpeg2FourCCControl"].write(value.mpeg2FourCCControl)
        try writer["paddingControl"].write(value.paddingControl)
        try writer["reference"].write(value.reference)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MovSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MovSettings()
        value.clapAtom = try reader["clapAtom"].readIfPresent()
        value.cslgAtom = try reader["cslgAtom"].readIfPresent()
        value.mpeg2FourCCControl = try reader["mpeg2FourCCControl"].readIfPresent()
        value.paddingControl = try reader["paddingControl"].readIfPresent()
        value.reference = try reader["reference"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.M3u8Settings {

    static func write(value: MediaConvertClientTypes.M3u8Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDuration"].write(value.audioDuration)
        try writer["audioFramesPerPes"].write(value.audioFramesPerPes)
        try writer["audioPids"].writeList(value.audioPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dataPTSControl"].write(value.dataPTSControl)
        try writer["maxPcrInterval"].write(value.maxPcrInterval)
        try writer["nielsenId3"].write(value.nielsenId3)
        try writer["patInterval"].write(value.patInterval)
        try writer["pcrControl"].write(value.pcrControl)
        try writer["pcrPid"].write(value.pcrPid)
        try writer["pmtInterval"].write(value.pmtInterval)
        try writer["pmtPid"].write(value.pmtPid)
        try writer["privateMetadataPid"].write(value.privateMetadataPid)
        try writer["programNumber"].write(value.programNumber)
        try writer["ptsOffset"].write(value.ptsOffset)
        try writer["ptsOffsetMode"].write(value.ptsOffsetMode)
        try writer["scte35Pid"].write(value.scte35Pid)
        try writer["scte35Source"].write(value.scte35Source)
        try writer["timedMetadata"].write(value.timedMetadata)
        try writer["timedMetadataPid"].write(value.timedMetadataPid)
        try writer["transportStreamId"].write(value.transportStreamId)
        try writer["videoPid"].write(value.videoPid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.M3u8Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.M3u8Settings()
        value.audioDuration = try reader["audioDuration"].readIfPresent()
        value.audioFramesPerPes = try reader["audioFramesPerPes"].readIfPresent()
        value.audioPids = try reader["audioPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.dataPTSControl = try reader["dataPTSControl"].readIfPresent()
        value.maxPcrInterval = try reader["maxPcrInterval"].readIfPresent()
        value.nielsenId3 = try reader["nielsenId3"].readIfPresent()
        value.patInterval = try reader["patInterval"].readIfPresent()
        value.pcrControl = try reader["pcrControl"].readIfPresent()
        value.pcrPid = try reader["pcrPid"].readIfPresent()
        value.pmtInterval = try reader["pmtInterval"].readIfPresent()
        value.pmtPid = try reader["pmtPid"].readIfPresent()
        value.privateMetadataPid = try reader["privateMetadataPid"].readIfPresent()
        value.programNumber = try reader["programNumber"].readIfPresent()
        value.ptsOffset = try reader["ptsOffset"].readIfPresent()
        value.ptsOffsetMode = try reader["ptsOffsetMode"].readIfPresent()
        value.scte35Pid = try reader["scte35Pid"].readIfPresent()
        value.scte35Source = try reader["scte35Source"].readIfPresent()
        value.timedMetadata = try reader["timedMetadata"].readIfPresent()
        value.timedMetadataPid = try reader["timedMetadataPid"].readIfPresent()
        value.transportStreamId = try reader["transportStreamId"].readIfPresent()
        value.videoPid = try reader["videoPid"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.M2tsSettings {

    static func write(value: MediaConvertClientTypes.M2tsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioBufferModel"].write(value.audioBufferModel)
        try writer["audioDuration"].write(value.audioDuration)
        try writer["audioFramesPerPes"].write(value.audioFramesPerPes)
        try writer["audioPids"].writeList(value.audioPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["bitrate"].write(value.bitrate)
        try writer["bufferModel"].write(value.bufferModel)
        try writer["dataPTSControl"].write(value.dataPTSControl)
        try writer["dvbNitSettings"].write(value.dvbNitSettings, with: MediaConvertClientTypes.DvbNitSettings.write(value:to:))
        try writer["dvbSdtSettings"].write(value.dvbSdtSettings, with: MediaConvertClientTypes.DvbSdtSettings.write(value:to:))
        try writer["dvbSubPids"].writeList(value.dvbSubPids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dvbTdtSettings"].write(value.dvbTdtSettings, with: MediaConvertClientTypes.DvbTdtSettings.write(value:to:))
        try writer["dvbTeletextPid"].write(value.dvbTeletextPid)
        try writer["ebpAudioInterval"].write(value.ebpAudioInterval)
        try writer["ebpPlacement"].write(value.ebpPlacement)
        try writer["esRateInPes"].write(value.esRateInPes)
        try writer["forceTsVideoEbpOrder"].write(value.forceTsVideoEbpOrder)
        try writer["fragmentTime"].write(value.fragmentTime)
        try writer["klvMetadata"].write(value.klvMetadata)
        try writer["maxPcrInterval"].write(value.maxPcrInterval)
        try writer["minEbpInterval"].write(value.minEbpInterval)
        try writer["nielsenId3"].write(value.nielsenId3)
        try writer["nullPacketBitrate"].write(value.nullPacketBitrate)
        try writer["patInterval"].write(value.patInterval)
        try writer["pcrControl"].write(value.pcrControl)
        try writer["pcrPid"].write(value.pcrPid)
        try writer["pmtInterval"].write(value.pmtInterval)
        try writer["pmtPid"].write(value.pmtPid)
        try writer["preventBufferUnderflow"].write(value.preventBufferUnderflow)
        try writer["privateMetadataPid"].write(value.privateMetadataPid)
        try writer["programNumber"].write(value.programNumber)
        try writer["ptsOffset"].write(value.ptsOffset)
        try writer["ptsOffsetMode"].write(value.ptsOffsetMode)
        try writer["rateMode"].write(value.rateMode)
        try writer["scte35Esam"].write(value.scte35Esam, with: MediaConvertClientTypes.M2tsScte35Esam.write(value:to:))
        try writer["scte35Pid"].write(value.scte35Pid)
        try writer["scte35Source"].write(value.scte35Source)
        try writer["segmentationMarkers"].write(value.segmentationMarkers)
        try writer["segmentationStyle"].write(value.segmentationStyle)
        try writer["segmentationTime"].write(value.segmentationTime)
        try writer["timedMetadataPid"].write(value.timedMetadataPid)
        try writer["transportStreamId"].write(value.transportStreamId)
        try writer["videoPid"].write(value.videoPid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.M2tsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.M2tsSettings()
        value.audioBufferModel = try reader["audioBufferModel"].readIfPresent()
        value.audioDuration = try reader["audioDuration"].readIfPresent()
        value.audioFramesPerPes = try reader["audioFramesPerPes"].readIfPresent()
        value.audioPids = try reader["audioPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bufferModel = try reader["bufferModel"].readIfPresent()
        value.dataPTSControl = try reader["dataPTSControl"].readIfPresent()
        value.dvbNitSettings = try reader["dvbNitSettings"].readIfPresent(with: MediaConvertClientTypes.DvbNitSettings.read(from:))
        value.dvbSdtSettings = try reader["dvbSdtSettings"].readIfPresent(with: MediaConvertClientTypes.DvbSdtSettings.read(from:))
        value.dvbSubPids = try reader["dvbSubPids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.dvbTdtSettings = try reader["dvbTdtSettings"].readIfPresent(with: MediaConvertClientTypes.DvbTdtSettings.read(from:))
        value.dvbTeletextPid = try reader["dvbTeletextPid"].readIfPresent()
        value.ebpAudioInterval = try reader["ebpAudioInterval"].readIfPresent()
        value.ebpPlacement = try reader["ebpPlacement"].readIfPresent()
        value.esRateInPes = try reader["esRateInPes"].readIfPresent()
        value.forceTsVideoEbpOrder = try reader["forceTsVideoEbpOrder"].readIfPresent()
        value.fragmentTime = try reader["fragmentTime"].readIfPresent()
        value.klvMetadata = try reader["klvMetadata"].readIfPresent()
        value.maxPcrInterval = try reader["maxPcrInterval"].readIfPresent()
        value.minEbpInterval = try reader["minEbpInterval"].readIfPresent()
        value.nielsenId3 = try reader["nielsenId3"].readIfPresent()
        value.nullPacketBitrate = try reader["nullPacketBitrate"].readIfPresent()
        value.patInterval = try reader["patInterval"].readIfPresent()
        value.pcrControl = try reader["pcrControl"].readIfPresent()
        value.pcrPid = try reader["pcrPid"].readIfPresent()
        value.pmtInterval = try reader["pmtInterval"].readIfPresent()
        value.pmtPid = try reader["pmtPid"].readIfPresent()
        value.preventBufferUnderflow = try reader["preventBufferUnderflow"].readIfPresent()
        value.privateMetadataPid = try reader["privateMetadataPid"].readIfPresent()
        value.programNumber = try reader["programNumber"].readIfPresent()
        value.ptsOffset = try reader["ptsOffset"].readIfPresent()
        value.ptsOffsetMode = try reader["ptsOffsetMode"].readIfPresent()
        value.rateMode = try reader["rateMode"].readIfPresent()
        value.scte35Esam = try reader["scte35Esam"].readIfPresent(with: MediaConvertClientTypes.M2tsScte35Esam.read(from:))
        value.scte35Pid = try reader["scte35Pid"].readIfPresent()
        value.scte35Source = try reader["scte35Source"].readIfPresent()
        value.segmentationMarkers = try reader["segmentationMarkers"].readIfPresent()
        value.segmentationStyle = try reader["segmentationStyle"].readIfPresent()
        value.segmentationTime = try reader["segmentationTime"].readIfPresent()
        value.timedMetadataPid = try reader["timedMetadataPid"].readIfPresent()
        value.transportStreamId = try reader["transportStreamId"].readIfPresent()
        value.videoPid = try reader["videoPid"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.M2tsScte35Esam {

    static func write(value: MediaConvertClientTypes.M2tsScte35Esam?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scte35EsamPid"].write(value.scte35EsamPid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.M2tsScte35Esam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.M2tsScte35Esam()
        value.scte35EsamPid = try reader["scte35EsamPid"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DvbTdtSettings {

    static func write(value: MediaConvertClientTypes.DvbTdtSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tdtInterval"].write(value.tdtInterval)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DvbTdtSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DvbTdtSettings()
        value.tdtInterval = try reader["tdtInterval"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DvbSdtSettings {

    static func write(value: MediaConvertClientTypes.DvbSdtSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["outputSdt"].write(value.outputSdt)
        try writer["sdtInterval"].write(value.sdtInterval)
        try writer["serviceName"].write(value.serviceName)
        try writer["serviceProviderName"].write(value.serviceProviderName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DvbSdtSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DvbSdtSettings()
        value.outputSdt = try reader["outputSdt"].readIfPresent()
        value.sdtInterval = try reader["sdtInterval"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceProviderName = try reader["serviceProviderName"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DvbNitSettings {

    static func write(value: MediaConvertClientTypes.DvbNitSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["networkId"].write(value.networkId)
        try writer["networkName"].write(value.networkName)
        try writer["nitInterval"].write(value.nitInterval)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DvbNitSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DvbNitSettings()
        value.networkId = try reader["networkId"].readIfPresent()
        value.networkName = try reader["networkName"].readIfPresent()
        value.nitInterval = try reader["nitInterval"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.F4vSettings {

    static func write(value: MediaConvertClientTypes.F4vSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["moovPlacement"].write(value.moovPlacement)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.F4vSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.F4vSettings()
        value.moovPlacement = try reader["moovPlacement"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CmfcSettings {

    static func write(value: MediaConvertClientTypes.CmfcSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDuration"].write(value.audioDuration)
        try writer["audioGroupId"].write(value.audioGroupId)
        try writer["audioRenditionSets"].write(value.audioRenditionSets)
        try writer["audioTrackType"].write(value.audioTrackType)
        try writer["descriptiveVideoServiceFlag"].write(value.descriptiveVideoServiceFlag)
        try writer["iFrameOnlyManifest"].write(value.iFrameOnlyManifest)
        try writer["klvMetadata"].write(value.klvMetadata)
        try writer["manifestMetadataSignaling"].write(value.manifestMetadataSignaling)
        try writer["scte35Esam"].write(value.scte35Esam)
        try writer["scte35Source"].write(value.scte35Source)
        try writer["timedMetadata"].write(value.timedMetadata)
        try writer["timedMetadataBoxVersion"].write(value.timedMetadataBoxVersion)
        try writer["timedMetadataSchemeIdUri"].write(value.timedMetadataSchemeIdUri)
        try writer["timedMetadataValue"].write(value.timedMetadataValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CmfcSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CmfcSettings()
        value.audioDuration = try reader["audioDuration"].readIfPresent()
        value.audioGroupId = try reader["audioGroupId"].readIfPresent()
        value.audioRenditionSets = try reader["audioRenditionSets"].readIfPresent()
        value.audioTrackType = try reader["audioTrackType"].readIfPresent()
        value.descriptiveVideoServiceFlag = try reader["descriptiveVideoServiceFlag"].readIfPresent()
        value.iFrameOnlyManifest = try reader["iFrameOnlyManifest"].readIfPresent()
        value.klvMetadata = try reader["klvMetadata"].readIfPresent()
        value.manifestMetadataSignaling = try reader["manifestMetadataSignaling"].readIfPresent()
        value.scte35Esam = try reader["scte35Esam"].readIfPresent()
        value.scte35Source = try reader["scte35Source"].readIfPresent()
        value.timedMetadata = try reader["timedMetadata"].readIfPresent()
        value.timedMetadataBoxVersion = try reader["timedMetadataBoxVersion"].readIfPresent()
        value.timedMetadataSchemeIdUri = try reader["timedMetadataSchemeIdUri"].readIfPresent()
        value.timedMetadataValue = try reader["timedMetadataValue"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CaptionDescription {

    static func write(value: MediaConvertClientTypes.CaptionDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["captionSelectorName"].write(value.captionSelectorName)
        try writer["customLanguageCode"].write(value.customLanguageCode)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.CaptionDestinationSettings.write(value:to:))
        try writer["languageCode"].write(value.languageCode)
        try writer["languageDescription"].write(value.languageDescription)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CaptionDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CaptionDescription()
        value.captionSelectorName = try reader["captionSelectorName"].readIfPresent()
        value.customLanguageCode = try reader["customLanguageCode"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.CaptionDestinationSettings.read(from:))
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.languageDescription = try reader["languageDescription"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CaptionDestinationSettings {

    static func write(value: MediaConvertClientTypes.CaptionDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["burninDestinationSettings"].write(value.burninDestinationSettings, with: MediaConvertClientTypes.BurninDestinationSettings.write(value:to:))
        try writer["destinationType"].write(value.destinationType)
        try writer["dvbSubDestinationSettings"].write(value.dvbSubDestinationSettings, with: MediaConvertClientTypes.DvbSubDestinationSettings.write(value:to:))
        try writer["embeddedDestinationSettings"].write(value.embeddedDestinationSettings, with: MediaConvertClientTypes.EmbeddedDestinationSettings.write(value:to:))
        try writer["imscDestinationSettings"].write(value.imscDestinationSettings, with: MediaConvertClientTypes.ImscDestinationSettings.write(value:to:))
        try writer["sccDestinationSettings"].write(value.sccDestinationSettings, with: MediaConvertClientTypes.SccDestinationSettings.write(value:to:))
        try writer["srtDestinationSettings"].write(value.srtDestinationSettings, with: MediaConvertClientTypes.SrtDestinationSettings.write(value:to:))
        try writer["teletextDestinationSettings"].write(value.teletextDestinationSettings, with: MediaConvertClientTypes.TeletextDestinationSettings.write(value:to:))
        try writer["ttmlDestinationSettings"].write(value.ttmlDestinationSettings, with: MediaConvertClientTypes.TtmlDestinationSettings.write(value:to:))
        try writer["webvttDestinationSettings"].write(value.webvttDestinationSettings, with: MediaConvertClientTypes.WebvttDestinationSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CaptionDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CaptionDestinationSettings()
        value.burninDestinationSettings = try reader["burninDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.BurninDestinationSettings.read(from:))
        value.destinationType = try reader["destinationType"].readIfPresent()
        value.dvbSubDestinationSettings = try reader["dvbSubDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.DvbSubDestinationSettings.read(from:))
        value.embeddedDestinationSettings = try reader["embeddedDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.EmbeddedDestinationSettings.read(from:))
        value.imscDestinationSettings = try reader["imscDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.ImscDestinationSettings.read(from:))
        value.sccDestinationSettings = try reader["sccDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.SccDestinationSettings.read(from:))
        value.srtDestinationSettings = try reader["srtDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.SrtDestinationSettings.read(from:))
        value.teletextDestinationSettings = try reader["teletextDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.TeletextDestinationSettings.read(from:))
        value.ttmlDestinationSettings = try reader["ttmlDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.TtmlDestinationSettings.read(from:))
        value.webvttDestinationSettings = try reader["webvttDestinationSettings"].readIfPresent(with: MediaConvertClientTypes.WebvttDestinationSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.WebvttDestinationSettings {

    static func write(value: MediaConvertClientTypes.WebvttDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessibility"].write(value.accessibility)
        try writer["stylePassthrough"].write(value.stylePassthrough)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.WebvttDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.WebvttDestinationSettings()
        value.accessibility = try reader["accessibility"].readIfPresent()
        value.stylePassthrough = try reader["stylePassthrough"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.TtmlDestinationSettings {

    static func write(value: MediaConvertClientTypes.TtmlDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["stylePassthrough"].write(value.stylePassthrough)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TtmlDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TtmlDestinationSettings()
        value.stylePassthrough = try reader["stylePassthrough"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.TeletextDestinationSettings {

    static func write(value: MediaConvertClientTypes.TeletextDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageNumber"].write(value.pageNumber)
        try writer["pageTypes"].writeList(value.pageTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaConvertClientTypes.TeletextPageType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TeletextDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TeletextDestinationSettings()
        value.pageNumber = try reader["pageNumber"].readIfPresent()
        value.pageTypes = try reader["pageTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaConvertClientTypes.TeletextPageType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.SrtDestinationSettings {

    static func write(value: MediaConvertClientTypes.SrtDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["stylePassthrough"].write(value.stylePassthrough)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.SrtDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.SrtDestinationSettings()
        value.stylePassthrough = try reader["stylePassthrough"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.SccDestinationSettings {

    static func write(value: MediaConvertClientTypes.SccDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["framerate"].write(value.framerate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.SccDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.SccDestinationSettings()
        value.framerate = try reader["framerate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ImscDestinationSettings {

    static func write(value: MediaConvertClientTypes.ImscDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessibility"].write(value.accessibility)
        try writer["stylePassthrough"].write(value.stylePassthrough)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ImscDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ImscDestinationSettings()
        value.accessibility = try reader["accessibility"].readIfPresent()
        value.stylePassthrough = try reader["stylePassthrough"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.EmbeddedDestinationSettings {

    static func write(value: MediaConvertClientTypes.EmbeddedDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination608ChannelNumber"].write(value.destination608ChannelNumber)
        try writer["destination708ServiceNumber"].write(value.destination708ServiceNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.EmbeddedDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.EmbeddedDestinationSettings()
        value.destination608ChannelNumber = try reader["destination608ChannelNumber"].readIfPresent()
        value.destination708ServiceNumber = try reader["destination708ServiceNumber"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DvbSubDestinationSettings {

    static func write(value: MediaConvertClientTypes.DvbSubDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alignment"].write(value.alignment)
        try writer["applyFontColor"].write(value.applyFontColor)
        try writer["backgroundColor"].write(value.backgroundColor)
        try writer["backgroundOpacity"].write(value.backgroundOpacity)
        try writer["ddsHandling"].write(value.ddsHandling)
        try writer["ddsXCoordinate"].write(value.ddsXCoordinate)
        try writer["ddsYCoordinate"].write(value.ddsYCoordinate)
        try writer["fallbackFont"].write(value.fallbackFont)
        try writer["fontColor"].write(value.fontColor)
        try writer["fontFileBold"].write(value.fontFileBold)
        try writer["fontFileBoldItalic"].write(value.fontFileBoldItalic)
        try writer["fontFileItalic"].write(value.fontFileItalic)
        try writer["fontFileRegular"].write(value.fontFileRegular)
        try writer["fontOpacity"].write(value.fontOpacity)
        try writer["fontResolution"].write(value.fontResolution)
        try writer["fontScript"].write(value.fontScript)
        try writer["fontSize"].write(value.fontSize)
        try writer["height"].write(value.height)
        try writer["hexFontColor"].write(value.hexFontColor)
        try writer["outlineColor"].write(value.outlineColor)
        try writer["outlineSize"].write(value.outlineSize)
        try writer["shadowColor"].write(value.shadowColor)
        try writer["shadowOpacity"].write(value.shadowOpacity)
        try writer["shadowXOffset"].write(value.shadowXOffset)
        try writer["shadowYOffset"].write(value.shadowYOffset)
        try writer["stylePassthrough"].write(value.stylePassthrough)
        try writer["subtitlingType"].write(value.subtitlingType)
        try writer["teletextSpacing"].write(value.teletextSpacing)
        try writer["width"].write(value.width)
        try writer["xPosition"].write(value.xPosition)
        try writer["yPosition"].write(value.yPosition)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DvbSubDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DvbSubDestinationSettings()
        value.alignment = try reader["alignment"].readIfPresent()
        value.applyFontColor = try reader["applyFontColor"].readIfPresent()
        value.backgroundColor = try reader["backgroundColor"].readIfPresent()
        value.backgroundOpacity = try reader["backgroundOpacity"].readIfPresent()
        value.ddsHandling = try reader["ddsHandling"].readIfPresent()
        value.ddsXCoordinate = try reader["ddsXCoordinate"].readIfPresent()
        value.ddsYCoordinate = try reader["ddsYCoordinate"].readIfPresent()
        value.fallbackFont = try reader["fallbackFont"].readIfPresent()
        value.fontColor = try reader["fontColor"].readIfPresent()
        value.fontFileBold = try reader["fontFileBold"].readIfPresent()
        value.fontFileBoldItalic = try reader["fontFileBoldItalic"].readIfPresent()
        value.fontFileItalic = try reader["fontFileItalic"].readIfPresent()
        value.fontFileRegular = try reader["fontFileRegular"].readIfPresent()
        value.fontOpacity = try reader["fontOpacity"].readIfPresent()
        value.fontResolution = try reader["fontResolution"].readIfPresent()
        value.fontScript = try reader["fontScript"].readIfPresent()
        value.fontSize = try reader["fontSize"].readIfPresent()
        value.height = try reader["height"].readIfPresent()
        value.hexFontColor = try reader["hexFontColor"].readIfPresent()
        value.outlineColor = try reader["outlineColor"].readIfPresent()
        value.outlineSize = try reader["outlineSize"].readIfPresent()
        value.shadowColor = try reader["shadowColor"].readIfPresent()
        value.shadowOpacity = try reader["shadowOpacity"].readIfPresent()
        value.shadowXOffset = try reader["shadowXOffset"].readIfPresent()
        value.shadowYOffset = try reader["shadowYOffset"].readIfPresent()
        value.stylePassthrough = try reader["stylePassthrough"].readIfPresent()
        value.subtitlingType = try reader["subtitlingType"].readIfPresent()
        value.teletextSpacing = try reader["teletextSpacing"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        value.xPosition = try reader["xPosition"].readIfPresent()
        value.yPosition = try reader["yPosition"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.BurninDestinationSettings {

    static func write(value: MediaConvertClientTypes.BurninDestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alignment"].write(value.alignment)
        try writer["applyFontColor"].write(value.applyFontColor)
        try writer["backgroundColor"].write(value.backgroundColor)
        try writer["backgroundOpacity"].write(value.backgroundOpacity)
        try writer["fallbackFont"].write(value.fallbackFont)
        try writer["fontColor"].write(value.fontColor)
        try writer["fontFileBold"].write(value.fontFileBold)
        try writer["fontFileBoldItalic"].write(value.fontFileBoldItalic)
        try writer["fontFileItalic"].write(value.fontFileItalic)
        try writer["fontFileRegular"].write(value.fontFileRegular)
        try writer["fontOpacity"].write(value.fontOpacity)
        try writer["fontResolution"].write(value.fontResolution)
        try writer["fontScript"].write(value.fontScript)
        try writer["fontSize"].write(value.fontSize)
        try writer["hexFontColor"].write(value.hexFontColor)
        try writer["outlineColor"].write(value.outlineColor)
        try writer["outlineSize"].write(value.outlineSize)
        try writer["shadowColor"].write(value.shadowColor)
        try writer["shadowOpacity"].write(value.shadowOpacity)
        try writer["shadowXOffset"].write(value.shadowXOffset)
        try writer["shadowYOffset"].write(value.shadowYOffset)
        try writer["stylePassthrough"].write(value.stylePassthrough)
        try writer["teletextSpacing"].write(value.teletextSpacing)
        try writer["xPosition"].write(value.xPosition)
        try writer["yPosition"].write(value.yPosition)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.BurninDestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.BurninDestinationSettings()
        value.alignment = try reader["alignment"].readIfPresent()
        value.applyFontColor = try reader["applyFontColor"].readIfPresent()
        value.backgroundColor = try reader["backgroundColor"].readIfPresent()
        value.backgroundOpacity = try reader["backgroundOpacity"].readIfPresent()
        value.fallbackFont = try reader["fallbackFont"].readIfPresent()
        value.fontColor = try reader["fontColor"].readIfPresent()
        value.fontFileBold = try reader["fontFileBold"].readIfPresent()
        value.fontFileBoldItalic = try reader["fontFileBoldItalic"].readIfPresent()
        value.fontFileItalic = try reader["fontFileItalic"].readIfPresent()
        value.fontFileRegular = try reader["fontFileRegular"].readIfPresent()
        value.fontOpacity = try reader["fontOpacity"].readIfPresent()
        value.fontResolution = try reader["fontResolution"].readIfPresent()
        value.fontScript = try reader["fontScript"].readIfPresent()
        value.fontSize = try reader["fontSize"].readIfPresent()
        value.hexFontColor = try reader["hexFontColor"].readIfPresent()
        value.outlineColor = try reader["outlineColor"].readIfPresent()
        value.outlineSize = try reader["outlineSize"].readIfPresent()
        value.shadowColor = try reader["shadowColor"].readIfPresent()
        value.shadowOpacity = try reader["shadowOpacity"].readIfPresent()
        value.shadowXOffset = try reader["shadowXOffset"].readIfPresent()
        value.shadowYOffset = try reader["shadowYOffset"].readIfPresent()
        value.stylePassthrough = try reader["stylePassthrough"].readIfPresent()
        value.teletextSpacing = try reader["teletextSpacing"].readIfPresent()
        value.xPosition = try reader["xPosition"].readIfPresent()
        value.yPosition = try reader["yPosition"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AudioDescription {

    static func write(value: MediaConvertClientTypes.AudioDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioChannelTaggingSettings"].write(value.audioChannelTaggingSettings, with: MediaConvertClientTypes.AudioChannelTaggingSettings.write(value:to:))
        try writer["audioNormalizationSettings"].write(value.audioNormalizationSettings, with: MediaConvertClientTypes.AudioNormalizationSettings.write(value:to:))
        try writer["audioSourceName"].write(value.audioSourceName)
        try writer["audioType"].write(value.audioType)
        try writer["audioTypeControl"].write(value.audioTypeControl)
        try writer["codecSettings"].write(value.codecSettings, with: MediaConvertClientTypes.AudioCodecSettings.write(value:to:))
        try writer["customLanguageCode"].write(value.customLanguageCode)
        try writer["languageCode"].write(value.languageCode)
        try writer["languageCodeControl"].write(value.languageCodeControl)
        try writer["remixSettings"].write(value.remixSettings, with: MediaConvertClientTypes.RemixSettings.write(value:to:))
        try writer["streamName"].write(value.streamName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AudioDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AudioDescription()
        value.audioChannelTaggingSettings = try reader["audioChannelTaggingSettings"].readIfPresent(with: MediaConvertClientTypes.AudioChannelTaggingSettings.read(from:))
        value.audioNormalizationSettings = try reader["audioNormalizationSettings"].readIfPresent(with: MediaConvertClientTypes.AudioNormalizationSettings.read(from:))
        value.audioSourceName = try reader["audioSourceName"].readIfPresent()
        value.audioType = try reader["audioType"].readIfPresent()
        value.audioTypeControl = try reader["audioTypeControl"].readIfPresent()
        value.codecSettings = try reader["codecSettings"].readIfPresent(with: MediaConvertClientTypes.AudioCodecSettings.read(from:))
        value.customLanguageCode = try reader["customLanguageCode"].readIfPresent()
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.languageCodeControl = try reader["languageCodeControl"].readIfPresent()
        value.remixSettings = try reader["remixSettings"].readIfPresent(with: MediaConvertClientTypes.RemixSettings.read(from:))
        value.streamName = try reader["streamName"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.RemixSettings {

    static func write(value: MediaConvertClientTypes.RemixSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDescriptionAudioChannel"].write(value.audioDescriptionAudioChannel)
        try writer["audioDescriptionDataChannel"].write(value.audioDescriptionDataChannel)
        try writer["channelMapping"].write(value.channelMapping, with: MediaConvertClientTypes.ChannelMapping.write(value:to:))
        try writer["channelsIn"].write(value.channelsIn)
        try writer["channelsOut"].write(value.channelsOut)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.RemixSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.RemixSettings()
        value.audioDescriptionAudioChannel = try reader["audioDescriptionAudioChannel"].readIfPresent()
        value.audioDescriptionDataChannel = try reader["audioDescriptionDataChannel"].readIfPresent()
        value.channelMapping = try reader["channelMapping"].readIfPresent(with: MediaConvertClientTypes.ChannelMapping.read(from:))
        value.channelsIn = try reader["channelsIn"].readIfPresent()
        value.channelsOut = try reader["channelsOut"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ChannelMapping {

    static func write(value: MediaConvertClientTypes.ChannelMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["outputChannels"].writeList(value.outputChannels, memberWritingClosure: MediaConvertClientTypes.OutputChannelMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ChannelMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ChannelMapping()
        value.outputChannels = try reader["outputChannels"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.OutputChannelMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.OutputChannelMapping {

    static func write(value: MediaConvertClientTypes.OutputChannelMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputChannels"].writeList(value.inputChannels, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputChannelsFineTune"].writeList(value.inputChannelsFineTune, memberWritingClosure: SmithyReadWrite.WritingClosures.writeDouble(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OutputChannelMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OutputChannelMapping()
        value.inputChannels = try reader["inputChannels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputChannelsFineTune = try reader["inputChannelsFineTune"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.AudioCodecSettings {

    static func write(value: MediaConvertClientTypes.AudioCodecSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aacSettings"].write(value.aacSettings, with: MediaConvertClientTypes.AacSettings.write(value:to:))
        try writer["ac3Settings"].write(value.ac3Settings, with: MediaConvertClientTypes.Ac3Settings.write(value:to:))
        try writer["aiffSettings"].write(value.aiffSettings, with: MediaConvertClientTypes.AiffSettings.write(value:to:))
        try writer["codec"].write(value.codec)
        try writer["eac3AtmosSettings"].write(value.eac3AtmosSettings, with: MediaConvertClientTypes.Eac3AtmosSettings.write(value:to:))
        try writer["eac3Settings"].write(value.eac3Settings, with: MediaConvertClientTypes.Eac3Settings.write(value:to:))
        try writer["flacSettings"].write(value.flacSettings, with: MediaConvertClientTypes.FlacSettings.write(value:to:))
        try writer["mp2Settings"].write(value.mp2Settings, with: MediaConvertClientTypes.Mp2Settings.write(value:to:))
        try writer["mp3Settings"].write(value.mp3Settings, with: MediaConvertClientTypes.Mp3Settings.write(value:to:))
        try writer["opusSettings"].write(value.opusSettings, with: MediaConvertClientTypes.OpusSettings.write(value:to:))
        try writer["vorbisSettings"].write(value.vorbisSettings, with: MediaConvertClientTypes.VorbisSettings.write(value:to:))
        try writer["wavSettings"].write(value.wavSettings, with: MediaConvertClientTypes.WavSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AudioCodecSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AudioCodecSettings()
        value.aacSettings = try reader["aacSettings"].readIfPresent(with: MediaConvertClientTypes.AacSettings.read(from:))
        value.ac3Settings = try reader["ac3Settings"].readIfPresent(with: MediaConvertClientTypes.Ac3Settings.read(from:))
        value.aiffSettings = try reader["aiffSettings"].readIfPresent(with: MediaConvertClientTypes.AiffSettings.read(from:))
        value.codec = try reader["codec"].readIfPresent()
        value.eac3AtmosSettings = try reader["eac3AtmosSettings"].readIfPresent(with: MediaConvertClientTypes.Eac3AtmosSettings.read(from:))
        value.eac3Settings = try reader["eac3Settings"].readIfPresent(with: MediaConvertClientTypes.Eac3Settings.read(from:))
        value.flacSettings = try reader["flacSettings"].readIfPresent(with: MediaConvertClientTypes.FlacSettings.read(from:))
        value.mp2Settings = try reader["mp2Settings"].readIfPresent(with: MediaConvertClientTypes.Mp2Settings.read(from:))
        value.mp3Settings = try reader["mp3Settings"].readIfPresent(with: MediaConvertClientTypes.Mp3Settings.read(from:))
        value.opusSettings = try reader["opusSettings"].readIfPresent(with: MediaConvertClientTypes.OpusSettings.read(from:))
        value.vorbisSettings = try reader["vorbisSettings"].readIfPresent(with: MediaConvertClientTypes.VorbisSettings.read(from:))
        value.wavSettings = try reader["wavSettings"].readIfPresent(with: MediaConvertClientTypes.WavSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.WavSettings {

    static func write(value: MediaConvertClientTypes.WavSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitDepth"].write(value.bitDepth)
        try writer["channels"].write(value.channels)
        try writer["format"].write(value.format)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.WavSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.WavSettings()
        value.bitDepth = try reader["bitDepth"].readIfPresent()
        value.channels = try reader["channels"].readIfPresent()
        value.format = try reader["format"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VorbisSettings {

    static func write(value: MediaConvertClientTypes.VorbisSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channels"].write(value.channels)
        try writer["sampleRate"].write(value.sampleRate)
        try writer["vbrQuality"].write(value.vbrQuality)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VorbisSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VorbisSettings()
        value.channels = try reader["channels"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        value.vbrQuality = try reader["vbrQuality"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.OpusSettings {

    static func write(value: MediaConvertClientTypes.OpusSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["channels"].write(value.channels)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OpusSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OpusSettings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.channels = try reader["channels"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Mp3Settings {

    static func write(value: MediaConvertClientTypes.Mp3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["channels"].write(value.channels)
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["sampleRate"].write(value.sampleRate)
        try writer["vbrQuality"].write(value.vbrQuality)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Mp3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Mp3Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.channels = try reader["channels"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        value.vbrQuality = try reader["vbrQuality"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Mp2Settings {

    static func write(value: MediaConvertClientTypes.Mp2Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["channels"].write(value.channels)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Mp2Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Mp2Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.channels = try reader["channels"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.FlacSettings {

    static func write(value: MediaConvertClientTypes.FlacSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitDepth"].write(value.bitDepth)
        try writer["channels"].write(value.channels)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.FlacSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.FlacSettings()
        value.bitDepth = try reader["bitDepth"].readIfPresent()
        value.channels = try reader["channels"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Eac3Settings {

    static func write(value: MediaConvertClientTypes.Eac3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attenuationControl"].write(value.attenuationControl)
        try writer["bitrate"].write(value.bitrate)
        try writer["bitstreamMode"].write(value.bitstreamMode)
        try writer["codingMode"].write(value.codingMode)
        try writer["dcFilter"].write(value.dcFilter)
        try writer["dialnorm"].write(value.dialnorm)
        try writer["dynamicRangeCompressionLine"].write(value.dynamicRangeCompressionLine)
        try writer["dynamicRangeCompressionRf"].write(value.dynamicRangeCompressionRf)
        try writer["lfeControl"].write(value.lfeControl)
        try writer["lfeFilter"].write(value.lfeFilter)
        try writer["loRoCenterMixLevel"].write(value.loRoCenterMixLevel)
        try writer["loRoSurroundMixLevel"].write(value.loRoSurroundMixLevel)
        try writer["ltRtCenterMixLevel"].write(value.ltRtCenterMixLevel)
        try writer["ltRtSurroundMixLevel"].write(value.ltRtSurroundMixLevel)
        try writer["metadataControl"].write(value.metadataControl)
        try writer["passthroughControl"].write(value.passthroughControl)
        try writer["phaseControl"].write(value.phaseControl)
        try writer["sampleRate"].write(value.sampleRate)
        try writer["stereoDownmix"].write(value.stereoDownmix)
        try writer["surroundExMode"].write(value.surroundExMode)
        try writer["surroundMode"].write(value.surroundMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Eac3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Eac3Settings()
        value.attenuationControl = try reader["attenuationControl"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bitstreamMode = try reader["bitstreamMode"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.dcFilter = try reader["dcFilter"].readIfPresent()
        value.dialnorm = try reader["dialnorm"].readIfPresent()
        value.dynamicRangeCompressionLine = try reader["dynamicRangeCompressionLine"].readIfPresent()
        value.dynamicRangeCompressionRf = try reader["dynamicRangeCompressionRf"].readIfPresent()
        value.lfeControl = try reader["lfeControl"].readIfPresent()
        value.lfeFilter = try reader["lfeFilter"].readIfPresent()
        value.loRoCenterMixLevel = try reader["loRoCenterMixLevel"].readIfPresent()
        value.loRoSurroundMixLevel = try reader["loRoSurroundMixLevel"].readIfPresent()
        value.ltRtCenterMixLevel = try reader["ltRtCenterMixLevel"].readIfPresent()
        value.ltRtSurroundMixLevel = try reader["ltRtSurroundMixLevel"].readIfPresent()
        value.metadataControl = try reader["metadataControl"].readIfPresent()
        value.passthroughControl = try reader["passthroughControl"].readIfPresent()
        value.phaseControl = try reader["phaseControl"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        value.stereoDownmix = try reader["stereoDownmix"].readIfPresent()
        value.surroundExMode = try reader["surroundExMode"].readIfPresent()
        value.surroundMode = try reader["surroundMode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Eac3AtmosSettings {

    static func write(value: MediaConvertClientTypes.Eac3AtmosSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["bitstreamMode"].write(value.bitstreamMode)
        try writer["codingMode"].write(value.codingMode)
        try writer["dialogueIntelligence"].write(value.dialogueIntelligence)
        try writer["downmixControl"].write(value.downmixControl)
        try writer["dynamicRangeCompressionLine"].write(value.dynamicRangeCompressionLine)
        try writer["dynamicRangeCompressionRf"].write(value.dynamicRangeCompressionRf)
        try writer["dynamicRangeControl"].write(value.dynamicRangeControl)
        try writer["loRoCenterMixLevel"].write(value.loRoCenterMixLevel)
        try writer["loRoSurroundMixLevel"].write(value.loRoSurroundMixLevel)
        try writer["ltRtCenterMixLevel"].write(value.ltRtCenterMixLevel)
        try writer["ltRtSurroundMixLevel"].write(value.ltRtSurroundMixLevel)
        try writer["meteringMode"].write(value.meteringMode)
        try writer["sampleRate"].write(value.sampleRate)
        try writer["speechThreshold"].write(value.speechThreshold)
        try writer["stereoDownmix"].write(value.stereoDownmix)
        try writer["surroundExMode"].write(value.surroundExMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Eac3AtmosSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Eac3AtmosSettings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bitstreamMode = try reader["bitstreamMode"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.dialogueIntelligence = try reader["dialogueIntelligence"].readIfPresent()
        value.downmixControl = try reader["downmixControl"].readIfPresent()
        value.dynamicRangeCompressionLine = try reader["dynamicRangeCompressionLine"].readIfPresent()
        value.dynamicRangeCompressionRf = try reader["dynamicRangeCompressionRf"].readIfPresent()
        value.dynamicRangeControl = try reader["dynamicRangeControl"].readIfPresent()
        value.loRoCenterMixLevel = try reader["loRoCenterMixLevel"].readIfPresent()
        value.loRoSurroundMixLevel = try reader["loRoSurroundMixLevel"].readIfPresent()
        value.ltRtCenterMixLevel = try reader["ltRtCenterMixLevel"].readIfPresent()
        value.ltRtSurroundMixLevel = try reader["ltRtSurroundMixLevel"].readIfPresent()
        value.meteringMode = try reader["meteringMode"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        value.speechThreshold = try reader["speechThreshold"].readIfPresent()
        value.stereoDownmix = try reader["stereoDownmix"].readIfPresent()
        value.surroundExMode = try reader["surroundExMode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AiffSettings {

    static func write(value: MediaConvertClientTypes.AiffSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitDepth"].write(value.bitDepth)
        try writer["channels"].write(value.channels)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AiffSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AiffSettings()
        value.bitDepth = try reader["bitDepth"].readIfPresent()
        value.channels = try reader["channels"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Ac3Settings {

    static func write(value: MediaConvertClientTypes.Ac3Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bitrate"].write(value.bitrate)
        try writer["bitstreamMode"].write(value.bitstreamMode)
        try writer["codingMode"].write(value.codingMode)
        try writer["dialnorm"].write(value.dialnorm)
        try writer["dynamicRangeCompressionLine"].write(value.dynamicRangeCompressionLine)
        try writer["dynamicRangeCompressionProfile"].write(value.dynamicRangeCompressionProfile)
        try writer["dynamicRangeCompressionRf"].write(value.dynamicRangeCompressionRf)
        try writer["lfeFilter"].write(value.lfeFilter)
        try writer["metadataControl"].write(value.metadataControl)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Ac3Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Ac3Settings()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.bitstreamMode = try reader["bitstreamMode"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.dialnorm = try reader["dialnorm"].readIfPresent()
        value.dynamicRangeCompressionLine = try reader["dynamicRangeCompressionLine"].readIfPresent()
        value.dynamicRangeCompressionProfile = try reader["dynamicRangeCompressionProfile"].readIfPresent()
        value.dynamicRangeCompressionRf = try reader["dynamicRangeCompressionRf"].readIfPresent()
        value.lfeFilter = try reader["lfeFilter"].readIfPresent()
        value.metadataControl = try reader["metadataControl"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AacSettings {

    static func write(value: MediaConvertClientTypes.AacSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDescriptionBroadcasterMix"].write(value.audioDescriptionBroadcasterMix)
        try writer["bitrate"].write(value.bitrate)
        try writer["codecProfile"].write(value.codecProfile)
        try writer["codingMode"].write(value.codingMode)
        try writer["rateControlMode"].write(value.rateControlMode)
        try writer["rawFormat"].write(value.rawFormat)
        try writer["sampleRate"].write(value.sampleRate)
        try writer["specification"].write(value.specification)
        try writer["vbrQuality"].write(value.vbrQuality)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AacSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AacSettings()
        value.audioDescriptionBroadcasterMix = try reader["audioDescriptionBroadcasterMix"].readIfPresent()
        value.bitrate = try reader["bitrate"].readIfPresent()
        value.codecProfile = try reader["codecProfile"].readIfPresent()
        value.codingMode = try reader["codingMode"].readIfPresent()
        value.rateControlMode = try reader["rateControlMode"].readIfPresent()
        value.rawFormat = try reader["rawFormat"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        value.specification = try reader["specification"].readIfPresent()
        value.vbrQuality = try reader["vbrQuality"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AudioNormalizationSettings {

    static func write(value: MediaConvertClientTypes.AudioNormalizationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["algorithm"].write(value.algorithm)
        try writer["algorithmControl"].write(value.algorithmControl)
        try writer["correctionGateLevel"].write(value.correctionGateLevel)
        try writer["loudnessLogging"].write(value.loudnessLogging)
        try writer["peakCalculation"].write(value.peakCalculation)
        try writer["targetLkfs"].write(value.targetLkfs)
        try writer["truePeakLimiterThreshold"].write(value.truePeakLimiterThreshold)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AudioNormalizationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AudioNormalizationSettings()
        value.algorithm = try reader["algorithm"].readIfPresent()
        value.algorithmControl = try reader["algorithmControl"].readIfPresent()
        value.correctionGateLevel = try reader["correctionGateLevel"].readIfPresent()
        value.loudnessLogging = try reader["loudnessLogging"].readIfPresent()
        value.peakCalculation = try reader["peakCalculation"].readIfPresent()
        value.targetLkfs = try reader["targetLkfs"].readIfPresent()
        value.truePeakLimiterThreshold = try reader["truePeakLimiterThreshold"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AudioChannelTaggingSettings {

    static func write(value: MediaConvertClientTypes.AudioChannelTaggingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelTag"].write(value.channelTag)
        try writer["channelTags"].writeList(value.channelTags, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaConvertClientTypes.AudioChannelTag>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AudioChannelTaggingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AudioChannelTaggingSettings()
        value.channelTag = try reader["channelTag"].readIfPresent()
        value.channelTags = try reader["channelTags"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaConvertClientTypes.AudioChannelTag>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.OutputGroupSettings {

    static func write(value: MediaConvertClientTypes.OutputGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cmafGroupSettings"].write(value.cmafGroupSettings, with: MediaConvertClientTypes.CmafGroupSettings.write(value:to:))
        try writer["dashIsoGroupSettings"].write(value.dashIsoGroupSettings, with: MediaConvertClientTypes.DashIsoGroupSettings.write(value:to:))
        try writer["fileGroupSettings"].write(value.fileGroupSettings, with: MediaConvertClientTypes.FileGroupSettings.write(value:to:))
        try writer["hlsGroupSettings"].write(value.hlsGroupSettings, with: MediaConvertClientTypes.HlsGroupSettings.write(value:to:))
        try writer["msSmoothGroupSettings"].write(value.msSmoothGroupSettings, with: MediaConvertClientTypes.MsSmoothGroupSettings.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OutputGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OutputGroupSettings()
        value.cmafGroupSettings = try reader["cmafGroupSettings"].readIfPresent(with: MediaConvertClientTypes.CmafGroupSettings.read(from:))
        value.dashIsoGroupSettings = try reader["dashIsoGroupSettings"].readIfPresent(with: MediaConvertClientTypes.DashIsoGroupSettings.read(from:))
        value.fileGroupSettings = try reader["fileGroupSettings"].readIfPresent(with: MediaConvertClientTypes.FileGroupSettings.read(from:))
        value.hlsGroupSettings = try reader["hlsGroupSettings"].readIfPresent(with: MediaConvertClientTypes.HlsGroupSettings.read(from:))
        value.msSmoothGroupSettings = try reader["msSmoothGroupSettings"].readIfPresent(with: MediaConvertClientTypes.MsSmoothGroupSettings.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MsSmoothGroupSettings {

    static func write(value: MediaConvertClientTypes.MsSmoothGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalManifests"].writeList(value.additionalManifests, memberWritingClosure: MediaConvertClientTypes.MsSmoothAdditionalManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["audioDeduplication"].write(value.audioDeduplication)
        try writer["destination"].write(value.destination)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.DestinationSettings.write(value:to:))
        try writer["encryption"].write(value.encryption, with: MediaConvertClientTypes.MsSmoothEncryptionSettings.write(value:to:))
        try writer["fragmentLength"].write(value.fragmentLength)
        try writer["fragmentLengthControl"].write(value.fragmentLengthControl)
        try writer["manifestEncoding"].write(value.manifestEncoding)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MsSmoothGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MsSmoothGroupSettings()
        value.additionalManifests = try reader["additionalManifests"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.MsSmoothAdditionalManifest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.audioDeduplication = try reader["audioDeduplication"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.DestinationSettings.read(from:))
        value.encryption = try reader["encryption"].readIfPresent(with: MediaConvertClientTypes.MsSmoothEncryptionSettings.read(from:))
        value.fragmentLength = try reader["fragmentLength"].readIfPresent()
        value.fragmentLengthControl = try reader["fragmentLengthControl"].readIfPresent()
        value.manifestEncoding = try reader["manifestEncoding"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MsSmoothEncryptionSettings {

    static func write(value: MediaConvertClientTypes.MsSmoothEncryptionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaConvertClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MsSmoothEncryptionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MsSmoothEncryptionSettings()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaConvertClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.SpekeKeyProvider {

    static func write(value: MediaConvertClientTypes.SpekeKeyProvider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateArn"].write(value.certificateArn)
        try writer["encryptionContractConfiguration"].write(value.encryptionContractConfiguration, with: MediaConvertClientTypes.EncryptionContractConfiguration.write(value:to:))
        try writer["resourceId"].write(value.resourceId)
        try writer["systemIds"].writeList(value.systemIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.SpekeKeyProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.SpekeKeyProvider()
        value.certificateArn = try reader["certificateArn"].readIfPresent()
        value.encryptionContractConfiguration = try reader["encryptionContractConfiguration"].readIfPresent(with: MediaConvertClientTypes.EncryptionContractConfiguration.read(from:))
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.systemIds = try reader["systemIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.EncryptionContractConfiguration {

    static func write(value: MediaConvertClientTypes.EncryptionContractConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["spekeAudioPreset"].write(value.spekeAudioPreset)
        try writer["spekeVideoPreset"].write(value.spekeVideoPreset)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.EncryptionContractConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.EncryptionContractConfiguration()
        value.spekeAudioPreset = try reader["spekeAudioPreset"].readIfPresent()
        value.spekeVideoPreset = try reader["spekeVideoPreset"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DestinationSettings {

    static func write(value: MediaConvertClientTypes.DestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Settings"].write(value.s3Settings, with: MediaConvertClientTypes.S3DestinationSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DestinationSettings()
        value.s3Settings = try reader["s3Settings"].readIfPresent(with: MediaConvertClientTypes.S3DestinationSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.S3DestinationSettings {

    static func write(value: MediaConvertClientTypes.S3DestinationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessControl"].write(value.accessControl, with: MediaConvertClientTypes.S3DestinationAccessControl.write(value:to:))
        try writer["encryption"].write(value.encryption, with: MediaConvertClientTypes.S3EncryptionSettings.write(value:to:))
        try writer["storageClass"].write(value.storageClass)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.S3DestinationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.S3DestinationSettings()
        value.accessControl = try reader["accessControl"].readIfPresent(with: MediaConvertClientTypes.S3DestinationAccessControl.read(from:))
        value.encryption = try reader["encryption"].readIfPresent(with: MediaConvertClientTypes.S3EncryptionSettings.read(from:))
        value.storageClass = try reader["storageClass"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.S3EncryptionSettings {

    static func write(value: MediaConvertClientTypes.S3EncryptionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionType"].write(value.encryptionType)
        try writer["kmsEncryptionContext"].write(value.kmsEncryptionContext)
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.S3EncryptionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.S3EncryptionSettings()
        value.encryptionType = try reader["encryptionType"].readIfPresent()
        value.kmsEncryptionContext = try reader["kmsEncryptionContext"].readIfPresent()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.S3DestinationAccessControl {

    static func write(value: MediaConvertClientTypes.S3DestinationAccessControl?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cannedAcl"].write(value.cannedAcl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.S3DestinationAccessControl {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.S3DestinationAccessControl()
        value.cannedAcl = try reader["cannedAcl"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MsSmoothAdditionalManifest {

    static func write(value: MediaConvertClientTypes.MsSmoothAdditionalManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestNameModifier"].write(value.manifestNameModifier)
        try writer["selectedOutputs"].writeList(value.selectedOutputs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MsSmoothAdditionalManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MsSmoothAdditionalManifest()
        value.manifestNameModifier = try reader["manifestNameModifier"].readIfPresent()
        value.selectedOutputs = try reader["selectedOutputs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.HlsGroupSettings {

    static func write(value: MediaConvertClientTypes.HlsGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adMarkers"].writeList(value.adMarkers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaConvertClientTypes.HlsAdMarkers>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["additionalManifests"].writeList(value.additionalManifests, memberWritingClosure: MediaConvertClientTypes.HlsAdditionalManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["audioOnlyHeader"].write(value.audioOnlyHeader)
        try writer["baseUrl"].write(value.baseUrl)
        try writer["captionLanguageMappings"].writeList(value.captionLanguageMappings, memberWritingClosure: MediaConvertClientTypes.HlsCaptionLanguageMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionLanguageSetting"].write(value.captionLanguageSetting)
        try writer["captionSegmentLengthControl"].write(value.captionSegmentLengthControl)
        try writer["clientCache"].write(value.clientCache)
        try writer["codecSpecification"].write(value.codecSpecification)
        try writer["destination"].write(value.destination)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.DestinationSettings.write(value:to:))
        try writer["directoryStructure"].write(value.directoryStructure)
        try writer["encryption"].write(value.encryption, with: MediaConvertClientTypes.HlsEncryptionSettings.write(value:to:))
        try writer["imageBasedTrickPlay"].write(value.imageBasedTrickPlay)
        try writer["imageBasedTrickPlaySettings"].write(value.imageBasedTrickPlaySettings, with: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings.write(value:to:))
        try writer["manifestCompression"].write(value.manifestCompression)
        try writer["manifestDurationFormat"].write(value.manifestDurationFormat)
        try writer["minFinalSegmentLength"].write(value.minFinalSegmentLength)
        try writer["minSegmentLength"].write(value.minSegmentLength)
        try writer["outputSelection"].write(value.outputSelection)
        try writer["programDateTime"].write(value.programDateTime)
        try writer["programDateTimePeriod"].write(value.programDateTimePeriod)
        try writer["progressiveWriteHlsManifest"].write(value.progressiveWriteHlsManifest)
        try writer["segmentControl"].write(value.segmentControl)
        try writer["segmentLength"].write(value.segmentLength)
        try writer["segmentLengthControl"].write(value.segmentLengthControl)
        try writer["segmentsPerSubdirectory"].write(value.segmentsPerSubdirectory)
        try writer["streamInfResolution"].write(value.streamInfResolution)
        try writer["targetDurationCompatibilityMode"].write(value.targetDurationCompatibilityMode)
        try writer["timedMetadataId3Frame"].write(value.timedMetadataId3Frame)
        try writer["timedMetadataId3Period"].write(value.timedMetadataId3Period)
        try writer["timestampDeltaMilliseconds"].write(value.timestampDeltaMilliseconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsGroupSettings()
        value.adMarkers = try reader["adMarkers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaConvertClientTypes.HlsAdMarkers>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalManifests = try reader["additionalManifests"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.HlsAdditionalManifest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.audioOnlyHeader = try reader["audioOnlyHeader"].readIfPresent()
        value.baseUrl = try reader["baseUrl"].readIfPresent()
        value.captionLanguageMappings = try reader["captionLanguageMappings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.HlsCaptionLanguageMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionLanguageSetting = try reader["captionLanguageSetting"].readIfPresent()
        value.captionSegmentLengthControl = try reader["captionSegmentLengthControl"].readIfPresent()
        value.clientCache = try reader["clientCache"].readIfPresent()
        value.codecSpecification = try reader["codecSpecification"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.DestinationSettings.read(from:))
        value.directoryStructure = try reader["directoryStructure"].readIfPresent()
        value.encryption = try reader["encryption"].readIfPresent(with: MediaConvertClientTypes.HlsEncryptionSettings.read(from:))
        value.imageBasedTrickPlay = try reader["imageBasedTrickPlay"].readIfPresent()
        value.imageBasedTrickPlaySettings = try reader["imageBasedTrickPlaySettings"].readIfPresent(with: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings.read(from:))
        value.manifestCompression = try reader["manifestCompression"].readIfPresent()
        value.manifestDurationFormat = try reader["manifestDurationFormat"].readIfPresent()
        value.minFinalSegmentLength = try reader["minFinalSegmentLength"].readIfPresent()
        value.minSegmentLength = try reader["minSegmentLength"].readIfPresent()
        value.outputSelection = try reader["outputSelection"].readIfPresent()
        value.programDateTime = try reader["programDateTime"].readIfPresent()
        value.programDateTimePeriod = try reader["programDateTimePeriod"].readIfPresent()
        value.progressiveWriteHlsManifest = try reader["progressiveWriteHlsManifest"].readIfPresent()
        value.segmentControl = try reader["segmentControl"].readIfPresent()
        value.segmentLength = try reader["segmentLength"].readIfPresent()
        value.segmentLengthControl = try reader["segmentLengthControl"].readIfPresent()
        value.segmentsPerSubdirectory = try reader["segmentsPerSubdirectory"].readIfPresent()
        value.streamInfResolution = try reader["streamInfResolution"].readIfPresent()
        value.targetDurationCompatibilityMode = try reader["targetDurationCompatibilityMode"].readIfPresent()
        value.timedMetadataId3Frame = try reader["timedMetadataId3Frame"].readIfPresent()
        value.timedMetadataId3Period = try reader["timedMetadataId3Period"].readIfPresent()
        value.timestampDeltaMilliseconds = try reader["timestampDeltaMilliseconds"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.HlsImageBasedTrickPlaySettings {

    static func write(value: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["intervalCadence"].write(value.intervalCadence)
        try writer["thumbnailHeight"].write(value.thumbnailHeight)
        try writer["thumbnailInterval"].write(value.thumbnailInterval)
        try writer["thumbnailWidth"].write(value.thumbnailWidth)
        try writer["tileHeight"].write(value.tileHeight)
        try writer["tileWidth"].write(value.tileWidth)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsImageBasedTrickPlaySettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsImageBasedTrickPlaySettings()
        value.intervalCadence = try reader["intervalCadence"].readIfPresent()
        value.thumbnailHeight = try reader["thumbnailHeight"].readIfPresent()
        value.thumbnailInterval = try reader["thumbnailInterval"].readIfPresent()
        value.thumbnailWidth = try reader["thumbnailWidth"].readIfPresent()
        value.tileHeight = try reader["tileHeight"].readIfPresent()
        value.tileWidth = try reader["tileWidth"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.HlsEncryptionSettings {

    static func write(value: MediaConvertClientTypes.HlsEncryptionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["constantInitializationVector"].write(value.constantInitializationVector)
        try writer["encryptionMethod"].write(value.encryptionMethod)
        try writer["initializationVectorInManifest"].write(value.initializationVectorInManifest)
        try writer["offlineEncrypted"].write(value.offlineEncrypted)
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaConvertClientTypes.SpekeKeyProvider.write(value:to:))
        try writer["staticKeyProvider"].write(value.staticKeyProvider, with: MediaConvertClientTypes.StaticKeyProvider.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsEncryptionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsEncryptionSettings()
        value.constantInitializationVector = try reader["constantInitializationVector"].readIfPresent()
        value.encryptionMethod = try reader["encryptionMethod"].readIfPresent()
        value.initializationVectorInManifest = try reader["initializationVectorInManifest"].readIfPresent()
        value.offlineEncrypted = try reader["offlineEncrypted"].readIfPresent()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaConvertClientTypes.SpekeKeyProvider.read(from:))
        value.staticKeyProvider = try reader["staticKeyProvider"].readIfPresent(with: MediaConvertClientTypes.StaticKeyProvider.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.StaticKeyProvider {

    static func write(value: MediaConvertClientTypes.StaticKeyProvider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyFormat"].write(value.keyFormat)
        try writer["keyFormatVersions"].write(value.keyFormatVersions)
        try writer["staticKeyValue"].write(value.staticKeyValue)
        try writer["url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.StaticKeyProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.StaticKeyProvider()
        value.keyFormat = try reader["keyFormat"].readIfPresent()
        value.keyFormatVersions = try reader["keyFormatVersions"].readIfPresent()
        value.staticKeyValue = try reader["staticKeyValue"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.HlsCaptionLanguageMapping {

    static func write(value: MediaConvertClientTypes.HlsCaptionLanguageMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["captionChannel"].write(value.captionChannel)
        try writer["customLanguageCode"].write(value.customLanguageCode)
        try writer["languageCode"].write(value.languageCode)
        try writer["languageDescription"].write(value.languageDescription)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsCaptionLanguageMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsCaptionLanguageMapping()
        value.captionChannel = try reader["captionChannel"].readIfPresent()
        value.customLanguageCode = try reader["customLanguageCode"].readIfPresent()
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.languageDescription = try reader["languageDescription"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.HlsAdditionalManifest {

    static func write(value: MediaConvertClientTypes.HlsAdditionalManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestNameModifier"].write(value.manifestNameModifier)
        try writer["selectedOutputs"].writeList(value.selectedOutputs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsAdditionalManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsAdditionalManifest()
        value.manifestNameModifier = try reader["manifestNameModifier"].readIfPresent()
        value.selectedOutputs = try reader["selectedOutputs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.FileGroupSettings {

    static func write(value: MediaConvertClientTypes.FileGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.DestinationSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.FileGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.FileGroupSettings()
        value.destination = try reader["destination"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.DestinationSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.DashIsoGroupSettings {

    static func write(value: MediaConvertClientTypes.DashIsoGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalManifests"].writeList(value.additionalManifests, memberWritingClosure: MediaConvertClientTypes.DashAdditionalManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["audioChannelConfigSchemeIdUri"].write(value.audioChannelConfigSchemeIdUri)
        try writer["baseUrl"].write(value.baseUrl)
        try writer["dashIFrameTrickPlayNameModifier"].write(value.dashIFrameTrickPlayNameModifier)
        try writer["dashManifestStyle"].write(value.dashManifestStyle)
        try writer["destination"].write(value.destination)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.DestinationSettings.write(value:to:))
        try writer["encryption"].write(value.encryption, with: MediaConvertClientTypes.DashIsoEncryptionSettings.write(value:to:))
        try writer["fragmentLength"].write(value.fragmentLength)
        try writer["hbbtvCompliance"].write(value.hbbtvCompliance)
        try writer["imageBasedTrickPlay"].write(value.imageBasedTrickPlay)
        try writer["imageBasedTrickPlaySettings"].write(value.imageBasedTrickPlaySettings, with: MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings.write(value:to:))
        try writer["minBufferTime"].write(value.minBufferTime)
        try writer["minFinalSegmentLength"].write(value.minFinalSegmentLength)
        try writer["mpdManifestBandwidthType"].write(value.mpdManifestBandwidthType)
        try writer["mpdProfile"].write(value.mpdProfile)
        try writer["ptsOffsetHandlingForBFrames"].write(value.ptsOffsetHandlingForBFrames)
        try writer["segmentControl"].write(value.segmentControl)
        try writer["segmentLength"].write(value.segmentLength)
        try writer["segmentLengthControl"].write(value.segmentLengthControl)
        try writer["videoCompositionOffsets"].write(value.videoCompositionOffsets)
        try writer["writeSegmentTimelineInRepresentation"].write(value.writeSegmentTimelineInRepresentation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DashIsoGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DashIsoGroupSettings()
        value.additionalManifests = try reader["additionalManifests"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.DashAdditionalManifest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.audioChannelConfigSchemeIdUri = try reader["audioChannelConfigSchemeIdUri"].readIfPresent()
        value.baseUrl = try reader["baseUrl"].readIfPresent()
        value.dashIFrameTrickPlayNameModifier = try reader["dashIFrameTrickPlayNameModifier"].readIfPresent()
        value.dashManifestStyle = try reader["dashManifestStyle"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.DestinationSettings.read(from:))
        value.encryption = try reader["encryption"].readIfPresent(with: MediaConvertClientTypes.DashIsoEncryptionSettings.read(from:))
        value.fragmentLength = try reader["fragmentLength"].readIfPresent()
        value.hbbtvCompliance = try reader["hbbtvCompliance"].readIfPresent()
        value.imageBasedTrickPlay = try reader["imageBasedTrickPlay"].readIfPresent()
        value.imageBasedTrickPlaySettings = try reader["imageBasedTrickPlaySettings"].readIfPresent(with: MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings.read(from:))
        value.minBufferTime = try reader["minBufferTime"].readIfPresent()
        value.minFinalSegmentLength = try reader["minFinalSegmentLength"].readIfPresent()
        value.mpdManifestBandwidthType = try reader["mpdManifestBandwidthType"].readIfPresent()
        value.mpdProfile = try reader["mpdProfile"].readIfPresent()
        value.ptsOffsetHandlingForBFrames = try reader["ptsOffsetHandlingForBFrames"].readIfPresent()
        value.segmentControl = try reader["segmentControl"].readIfPresent()
        value.segmentLength = try reader["segmentLength"].readIfPresent()
        value.segmentLengthControl = try reader["segmentLengthControl"].readIfPresent()
        value.videoCompositionOffsets = try reader["videoCompositionOffsets"].readIfPresent()
        value.writeSegmentTimelineInRepresentation = try reader["writeSegmentTimelineInRepresentation"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings {

    static func write(value: MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["intervalCadence"].write(value.intervalCadence)
        try writer["thumbnailHeight"].write(value.thumbnailHeight)
        try writer["thumbnailInterval"].write(value.thumbnailInterval)
        try writer["thumbnailWidth"].write(value.thumbnailWidth)
        try writer["tileHeight"].write(value.tileHeight)
        try writer["tileWidth"].write(value.tileWidth)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DashIsoImageBasedTrickPlaySettings()
        value.intervalCadence = try reader["intervalCadence"].readIfPresent()
        value.thumbnailHeight = try reader["thumbnailHeight"].readIfPresent()
        value.thumbnailInterval = try reader["thumbnailInterval"].readIfPresent()
        value.thumbnailWidth = try reader["thumbnailWidth"].readIfPresent()
        value.tileHeight = try reader["tileHeight"].readIfPresent()
        value.tileWidth = try reader["tileWidth"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DashIsoEncryptionSettings {

    static func write(value: MediaConvertClientTypes.DashIsoEncryptionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["playbackDeviceCompatibility"].write(value.playbackDeviceCompatibility)
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaConvertClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DashIsoEncryptionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DashIsoEncryptionSettings()
        value.playbackDeviceCompatibility = try reader["playbackDeviceCompatibility"].readIfPresent()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaConvertClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.DashAdditionalManifest {

    static func write(value: MediaConvertClientTypes.DashAdditionalManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestNameModifier"].write(value.manifestNameModifier)
        try writer["selectedOutputs"].writeList(value.selectedOutputs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DashAdditionalManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DashAdditionalManifest()
        value.manifestNameModifier = try reader["manifestNameModifier"].readIfPresent()
        value.selectedOutputs = try reader["selectedOutputs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.CmafGroupSettings {

    static func write(value: MediaConvertClientTypes.CmafGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalManifests"].writeList(value.additionalManifests, memberWritingClosure: MediaConvertClientTypes.CmafAdditionalManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["baseUrl"].write(value.baseUrl)
        try writer["clientCache"].write(value.clientCache)
        try writer["codecSpecification"].write(value.codecSpecification)
        try writer["dashIFrameTrickPlayNameModifier"].write(value.dashIFrameTrickPlayNameModifier)
        try writer["dashManifestStyle"].write(value.dashManifestStyle)
        try writer["destination"].write(value.destination)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.DestinationSettings.write(value:to:))
        try writer["encryption"].write(value.encryption, with: MediaConvertClientTypes.CmafEncryptionSettings.write(value:to:))
        try writer["fragmentLength"].write(value.fragmentLength)
        try writer["imageBasedTrickPlay"].write(value.imageBasedTrickPlay)
        try writer["imageBasedTrickPlaySettings"].write(value.imageBasedTrickPlaySettings, with: MediaConvertClientTypes.CmafImageBasedTrickPlaySettings.write(value:to:))
        try writer["manifestCompression"].write(value.manifestCompression)
        try writer["manifestDurationFormat"].write(value.manifestDurationFormat)
        try writer["minBufferTime"].write(value.minBufferTime)
        try writer["minFinalSegmentLength"].write(value.minFinalSegmentLength)
        try writer["mpdManifestBandwidthType"].write(value.mpdManifestBandwidthType)
        try writer["mpdProfile"].write(value.mpdProfile)
        try writer["ptsOffsetHandlingForBFrames"].write(value.ptsOffsetHandlingForBFrames)
        try writer["segmentControl"].write(value.segmentControl)
        try writer["segmentLength"].write(value.segmentLength)
        try writer["segmentLengthControl"].write(value.segmentLengthControl)
        try writer["streamInfResolution"].write(value.streamInfResolution)
        try writer["targetDurationCompatibilityMode"].write(value.targetDurationCompatibilityMode)
        try writer["videoCompositionOffsets"].write(value.videoCompositionOffsets)
        try writer["writeDashManifest"].write(value.writeDashManifest)
        try writer["writeHlsManifest"].write(value.writeHlsManifest)
        try writer["writeSegmentTimelineInRepresentation"].write(value.writeSegmentTimelineInRepresentation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CmafGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CmafGroupSettings()
        value.additionalManifests = try reader["additionalManifests"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.CmafAdditionalManifest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.baseUrl = try reader["baseUrl"].readIfPresent()
        value.clientCache = try reader["clientCache"].readIfPresent()
        value.codecSpecification = try reader["codecSpecification"].readIfPresent()
        value.dashIFrameTrickPlayNameModifier = try reader["dashIFrameTrickPlayNameModifier"].readIfPresent()
        value.dashManifestStyle = try reader["dashManifestStyle"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.DestinationSettings.read(from:))
        value.encryption = try reader["encryption"].readIfPresent(with: MediaConvertClientTypes.CmafEncryptionSettings.read(from:))
        value.fragmentLength = try reader["fragmentLength"].readIfPresent()
        value.imageBasedTrickPlay = try reader["imageBasedTrickPlay"].readIfPresent()
        value.imageBasedTrickPlaySettings = try reader["imageBasedTrickPlaySettings"].readIfPresent(with: MediaConvertClientTypes.CmafImageBasedTrickPlaySettings.read(from:))
        value.manifestCompression = try reader["manifestCompression"].readIfPresent()
        value.manifestDurationFormat = try reader["manifestDurationFormat"].readIfPresent()
        value.minBufferTime = try reader["minBufferTime"].readIfPresent()
        value.minFinalSegmentLength = try reader["minFinalSegmentLength"].readIfPresent()
        value.mpdManifestBandwidthType = try reader["mpdManifestBandwidthType"].readIfPresent()
        value.mpdProfile = try reader["mpdProfile"].readIfPresent()
        value.ptsOffsetHandlingForBFrames = try reader["ptsOffsetHandlingForBFrames"].readIfPresent()
        value.segmentControl = try reader["segmentControl"].readIfPresent()
        value.segmentLength = try reader["segmentLength"].readIfPresent()
        value.segmentLengthControl = try reader["segmentLengthControl"].readIfPresent()
        value.streamInfResolution = try reader["streamInfResolution"].readIfPresent()
        value.targetDurationCompatibilityMode = try reader["targetDurationCompatibilityMode"].readIfPresent()
        value.videoCompositionOffsets = try reader["videoCompositionOffsets"].readIfPresent()
        value.writeDashManifest = try reader["writeDashManifest"].readIfPresent()
        value.writeHlsManifest = try reader["writeHlsManifest"].readIfPresent()
        value.writeSegmentTimelineInRepresentation = try reader["writeSegmentTimelineInRepresentation"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CmafImageBasedTrickPlaySettings {

    static func write(value: MediaConvertClientTypes.CmafImageBasedTrickPlaySettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["intervalCadence"].write(value.intervalCadence)
        try writer["thumbnailHeight"].write(value.thumbnailHeight)
        try writer["thumbnailInterval"].write(value.thumbnailInterval)
        try writer["thumbnailWidth"].write(value.thumbnailWidth)
        try writer["tileHeight"].write(value.tileHeight)
        try writer["tileWidth"].write(value.tileWidth)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CmafImageBasedTrickPlaySettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CmafImageBasedTrickPlaySettings()
        value.intervalCadence = try reader["intervalCadence"].readIfPresent()
        value.thumbnailHeight = try reader["thumbnailHeight"].readIfPresent()
        value.thumbnailInterval = try reader["thumbnailInterval"].readIfPresent()
        value.thumbnailWidth = try reader["thumbnailWidth"].readIfPresent()
        value.tileHeight = try reader["tileHeight"].readIfPresent()
        value.tileWidth = try reader["tileWidth"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CmafEncryptionSettings {

    static func write(value: MediaConvertClientTypes.CmafEncryptionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["constantInitializationVector"].write(value.constantInitializationVector)
        try writer["encryptionMethod"].write(value.encryptionMethod)
        try writer["initializationVectorInManifest"].write(value.initializationVectorInManifest)
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaConvertClientTypes.SpekeKeyProviderCmaf.write(value:to:))
        try writer["staticKeyProvider"].write(value.staticKeyProvider, with: MediaConvertClientTypes.StaticKeyProvider.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CmafEncryptionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CmafEncryptionSettings()
        value.constantInitializationVector = try reader["constantInitializationVector"].readIfPresent()
        value.encryptionMethod = try reader["encryptionMethod"].readIfPresent()
        value.initializationVectorInManifest = try reader["initializationVectorInManifest"].readIfPresent()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaConvertClientTypes.SpekeKeyProviderCmaf.read(from:))
        value.staticKeyProvider = try reader["staticKeyProvider"].readIfPresent(with: MediaConvertClientTypes.StaticKeyProvider.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.SpekeKeyProviderCmaf {

    static func write(value: MediaConvertClientTypes.SpekeKeyProviderCmaf?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateArn"].write(value.certificateArn)
        try writer["dashSignaledSystemIds"].writeList(value.dashSignaledSystemIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["encryptionContractConfiguration"].write(value.encryptionContractConfiguration, with: MediaConvertClientTypes.EncryptionContractConfiguration.write(value:to:))
        try writer["hlsSignaledSystemIds"].writeList(value.hlsSignaledSystemIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceId"].write(value.resourceId)
        try writer["url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.SpekeKeyProviderCmaf {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.SpekeKeyProviderCmaf()
        value.certificateArn = try reader["certificateArn"].readIfPresent()
        value.dashSignaledSystemIds = try reader["dashSignaledSystemIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.encryptionContractConfiguration = try reader["encryptionContractConfiguration"].readIfPresent(with: MediaConvertClientTypes.EncryptionContractConfiguration.read(from:))
        value.hlsSignaledSystemIds = try reader["hlsSignaledSystemIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CmafAdditionalManifest {

    static func write(value: MediaConvertClientTypes.CmafAdditionalManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestNameModifier"].write(value.manifestNameModifier)
        try writer["selectedOutputs"].writeList(value.selectedOutputs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CmafAdditionalManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CmafAdditionalManifest()
        value.manifestNameModifier = try reader["manifestNameModifier"].readIfPresent()
        value.selectedOutputs = try reader["selectedOutputs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.AutomatedEncodingSettings {

    static func write(value: MediaConvertClientTypes.AutomatedEncodingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["abrSettings"].write(value.abrSettings, with: MediaConvertClientTypes.AutomatedAbrSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AutomatedEncodingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AutomatedEncodingSettings()
        value.abrSettings = try reader["abrSettings"].readIfPresent(with: MediaConvertClientTypes.AutomatedAbrSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.AutomatedAbrSettings {

    static func write(value: MediaConvertClientTypes.AutomatedAbrSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxAbrBitrate"].write(value.maxAbrBitrate)
        try writer["maxRenditions"].write(value.maxRenditions)
        try writer["minAbrBitrate"].write(value.minAbrBitrate)
        try writer["rules"].writeList(value.rules, memberWritingClosure: MediaConvertClientTypes.AutomatedAbrRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AutomatedAbrSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AutomatedAbrSettings()
        value.maxAbrBitrate = try reader["maxAbrBitrate"].readIfPresent()
        value.maxRenditions = try reader["maxRenditions"].readIfPresent()
        value.minAbrBitrate = try reader["minAbrBitrate"].readIfPresent()
        value.rules = try reader["rules"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.AutomatedAbrRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.AutomatedAbrRule {

    static func write(value: MediaConvertClientTypes.AutomatedAbrRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowedRenditions"].writeList(value.allowedRenditions, memberWritingClosure: MediaConvertClientTypes.AllowedRenditionSize.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["forceIncludeRenditions"].writeList(value.forceIncludeRenditions, memberWritingClosure: MediaConvertClientTypes.ForceIncludeRenditionSize.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["minBottomRenditionSize"].write(value.minBottomRenditionSize, with: MediaConvertClientTypes.MinBottomRenditionSize.write(value:to:))
        try writer["minTopRenditionSize"].write(value.minTopRenditionSize, with: MediaConvertClientTypes.MinTopRenditionSize.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AutomatedAbrRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AutomatedAbrRule()
        value.allowedRenditions = try reader["allowedRenditions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.AllowedRenditionSize.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.forceIncludeRenditions = try reader["forceIncludeRenditions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.ForceIncludeRenditionSize.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.minBottomRenditionSize = try reader["minBottomRenditionSize"].readIfPresent(with: MediaConvertClientTypes.MinBottomRenditionSize.read(from:))
        value.minTopRenditionSize = try reader["minTopRenditionSize"].readIfPresent(with: MediaConvertClientTypes.MinTopRenditionSize.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MinTopRenditionSize {

    static func write(value: MediaConvertClientTypes.MinTopRenditionSize?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MinTopRenditionSize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MinTopRenditionSize()
        value.height = try reader["height"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MinBottomRenditionSize {

    static func write(value: MediaConvertClientTypes.MinBottomRenditionSize?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MinBottomRenditionSize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MinBottomRenditionSize()
        value.height = try reader["height"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ForceIncludeRenditionSize {

    static func write(value: MediaConvertClientTypes.ForceIncludeRenditionSize?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ForceIncludeRenditionSize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ForceIncludeRenditionSize()
        value.height = try reader["height"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AllowedRenditionSize {

    static func write(value: MediaConvertClientTypes.AllowedRenditionSize?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["required"].write(value.`required`)
        try writer["width"].write(value.width)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AllowedRenditionSize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AllowedRenditionSize()
        value.height = try reader["height"].readIfPresent()
        value.`required` = try reader["required"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.NielsenNonLinearWatermarkSettings {

    static func write(value: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["activeWatermarkProcess"].write(value.activeWatermarkProcess)
        try writer["adiFilename"].write(value.adiFilename)
        try writer["assetId"].write(value.assetId)
        try writer["assetName"].write(value.assetName)
        try writer["cbetSourceId"].write(value.cbetSourceId)
        try writer["episodeId"].write(value.episodeId)
        try writer["metadataDestination"].write(value.metadataDestination)
        try writer["sourceId"].write(value.sourceId)
        try writer["sourceWatermarkStatus"].write(value.sourceWatermarkStatus)
        try writer["ticServerUrl"].write(value.ticServerUrl)
        try writer["uniqueTicPerAudioTrack"].write(value.uniqueTicPerAudioTrack)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NielsenNonLinearWatermarkSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NielsenNonLinearWatermarkSettings()
        value.activeWatermarkProcess = try reader["activeWatermarkProcess"].readIfPresent()
        value.adiFilename = try reader["adiFilename"].readIfPresent()
        value.assetId = try reader["assetId"].readIfPresent()
        value.assetName = try reader["assetName"].readIfPresent()
        value.cbetSourceId = try reader["cbetSourceId"].readIfPresent()
        value.episodeId = try reader["episodeId"].readIfPresent()
        value.metadataDestination = try reader["metadataDestination"].readIfPresent()
        value.sourceId = try reader["sourceId"].readIfPresent()
        value.sourceWatermarkStatus = try reader["sourceWatermarkStatus"].readIfPresent()
        value.ticServerUrl = try reader["ticServerUrl"].readIfPresent()
        value.uniqueTicPerAudioTrack = try reader["uniqueTicPerAudioTrack"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.NielsenConfiguration {

    static func write(value: MediaConvertClientTypes.NielsenConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["breakoutCode"].write(value.breakoutCode)
        try writer["distributorId"].write(value.distributorId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.NielsenConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.NielsenConfiguration()
        value.breakoutCode = try reader["breakoutCode"].readIfPresent()
        value.distributorId = try reader["distributorId"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MotionImageInserter {

    static func write(value: MediaConvertClientTypes.MotionImageInserter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["framerate"].write(value.framerate, with: MediaConvertClientTypes.MotionImageInsertionFramerate.write(value:to:))
        try writer["input"].write(value.input)
        try writer["insertionMode"].write(value.insertionMode)
        try writer["offset"].write(value.offset, with: MediaConvertClientTypes.MotionImageInsertionOffset.write(value:to:))
        try writer["playback"].write(value.playback)
        try writer["startTime"].write(value.startTime)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MotionImageInserter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MotionImageInserter()
        value.framerate = try reader["framerate"].readIfPresent(with: MediaConvertClientTypes.MotionImageInsertionFramerate.read(from:))
        value.input = try reader["input"].readIfPresent()
        value.insertionMode = try reader["insertionMode"].readIfPresent()
        value.offset = try reader["offset"].readIfPresent(with: MediaConvertClientTypes.MotionImageInsertionOffset.read(from:))
        value.playback = try reader["playback"].readIfPresent()
        value.startTime = try reader["startTime"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MotionImageInsertionOffset {

    static func write(value: MediaConvertClientTypes.MotionImageInsertionOffset?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["imageX"].write(value.imagex)
        try writer["imageY"].write(value.imagey)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MotionImageInsertionOffset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MotionImageInsertionOffset()
        value.imagex = try reader["imageX"].readIfPresent()
        value.imagey = try reader["imageY"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.MotionImageInsertionFramerate {

    static func write(value: MediaConvertClientTypes.MotionImageInsertionFramerate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.MotionImageInsertionFramerate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.MotionImageInsertionFramerate()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.KantarWatermarkSettings {

    static func write(value: MediaConvertClientTypes.KantarWatermarkSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelName"].write(value.channelName)
        try writer["contentReference"].write(value.contentReference)
        try writer["credentialsSecretName"].write(value.credentialsSecretName)
        try writer["fileOffset"].write(value.fileOffset)
        try writer["kantarLicenseId"].write(value.kantarLicenseId)
        try writer["kantarServerUrl"].write(value.kantarServerUrl)
        try writer["logDestination"].write(value.logDestination)
        try writer["metadata3"].write(value.metadata3)
        try writer["metadata4"].write(value.metadata4)
        try writer["metadata5"].write(value.metadata5)
        try writer["metadata6"].write(value.metadata6)
        try writer["metadata7"].write(value.metadata7)
        try writer["metadata8"].write(value.metadata8)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.KantarWatermarkSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.KantarWatermarkSettings()
        value.channelName = try reader["channelName"].readIfPresent()
        value.contentReference = try reader["contentReference"].readIfPresent()
        value.credentialsSecretName = try reader["credentialsSecretName"].readIfPresent()
        value.fileOffset = try reader["fileOffset"].readIfPresent()
        value.kantarLicenseId = try reader["kantarLicenseId"].readIfPresent()
        value.kantarServerUrl = try reader["kantarServerUrl"].readIfPresent()
        value.logDestination = try reader["logDestination"].readIfPresent()
        value.metadata3 = try reader["metadata3"].readIfPresent()
        value.metadata4 = try reader["metadata4"].readIfPresent()
        value.metadata5 = try reader["metadata5"].readIfPresent()
        value.metadata6 = try reader["metadata6"].readIfPresent()
        value.metadata7 = try reader["metadata7"].readIfPresent()
        value.metadata8 = try reader["metadata8"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Input {

    static func write(value: MediaConvertClientTypes.Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["advancedInputFilter"].write(value.advancedInputFilter)
        try writer["advancedInputFilterSettings"].write(value.advancedInputFilterSettings, with: MediaConvertClientTypes.AdvancedInputFilterSettings.write(value:to:))
        try writer["audioSelectorGroups"].writeMap(value.audioSelectorGroups, valueWritingClosure: MediaConvertClientTypes.AudioSelectorGroup.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["audioSelectors"].writeMap(value.audioSelectors, valueWritingClosure: MediaConvertClientTypes.AudioSelector.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["captionSelectors"].writeMap(value.captionSelectors, valueWritingClosure: MediaConvertClientTypes.CaptionSelector.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["crop"].write(value.crop, with: MediaConvertClientTypes.Rectangle.write(value:to:))
        try writer["deblockFilter"].write(value.deblockFilter)
        try writer["decryptionSettings"].write(value.decryptionSettings, with: MediaConvertClientTypes.InputDecryptionSettings.write(value:to:))
        try writer["denoiseFilter"].write(value.denoiseFilter)
        try writer["dolbyVisionMetadataXml"].write(value.dolbyVisionMetadataXml)
        try writer["fileInput"].write(value.fileInput)
        try writer["filterEnable"].write(value.filterEnable)
        try writer["filterStrength"].write(value.filterStrength)
        try writer["imageInserter"].write(value.imageInserter, with: MediaConvertClientTypes.ImageInserter.write(value:to:))
        try writer["inputClippings"].writeList(value.inputClippings, memberWritingClosure: MediaConvertClientTypes.InputClipping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputScanType"].write(value.inputScanType)
        try writer["position"].write(value.position, with: MediaConvertClientTypes.Rectangle.write(value:to:))
        try writer["programNumber"].write(value.programNumber)
        try writer["psiControl"].write(value.psiControl)
        try writer["supplementalImps"].writeList(value.supplementalImps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timecodeSource"].write(value.timecodeSource)
        try writer["timecodeStart"].write(value.timecodeStart)
        try writer["videoGenerator"].write(value.videoGenerator, with: MediaConvertClientTypes.InputVideoGenerator.write(value:to:))
        try writer["videoOverlays"].writeList(value.videoOverlays, memberWritingClosure: MediaConvertClientTypes.VideoOverlay.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["videoSelector"].write(value.videoSelector, with: MediaConvertClientTypes.VideoSelector.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Input {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Input()
        value.advancedInputFilter = try reader["advancedInputFilter"].readIfPresent()
        value.advancedInputFilterSettings = try reader["advancedInputFilterSettings"].readIfPresent(with: MediaConvertClientTypes.AdvancedInputFilterSettings.read(from:))
        value.audioSelectorGroups = try reader["audioSelectorGroups"].readMapIfPresent(valueReadingClosure: MediaConvertClientTypes.AudioSelectorGroup.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.audioSelectors = try reader["audioSelectors"].readMapIfPresent(valueReadingClosure: MediaConvertClientTypes.AudioSelector.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.captionSelectors = try reader["captionSelectors"].readMapIfPresent(valueReadingClosure: MediaConvertClientTypes.CaptionSelector.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.crop = try reader["crop"].readIfPresent(with: MediaConvertClientTypes.Rectangle.read(from:))
        value.deblockFilter = try reader["deblockFilter"].readIfPresent()
        value.decryptionSettings = try reader["decryptionSettings"].readIfPresent(with: MediaConvertClientTypes.InputDecryptionSettings.read(from:))
        value.denoiseFilter = try reader["denoiseFilter"].readIfPresent()
        value.dolbyVisionMetadataXml = try reader["dolbyVisionMetadataXml"].readIfPresent()
        value.fileInput = try reader["fileInput"].readIfPresent()
        value.filterEnable = try reader["filterEnable"].readIfPresent()
        value.filterStrength = try reader["filterStrength"].readIfPresent()
        value.imageInserter = try reader["imageInserter"].readIfPresent(with: MediaConvertClientTypes.ImageInserter.read(from:))
        value.inputClippings = try reader["inputClippings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.InputClipping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputScanType = try reader["inputScanType"].readIfPresent()
        value.position = try reader["position"].readIfPresent(with: MediaConvertClientTypes.Rectangle.read(from:))
        value.programNumber = try reader["programNumber"].readIfPresent()
        value.psiControl = try reader["psiControl"].readIfPresent()
        value.supplementalImps = try reader["supplementalImps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.timecodeSource = try reader["timecodeSource"].readIfPresent()
        value.timecodeStart = try reader["timecodeStart"].readIfPresent()
        value.videoGenerator = try reader["videoGenerator"].readIfPresent(with: MediaConvertClientTypes.InputVideoGenerator.read(from:))
        value.videoOverlays = try reader["videoOverlays"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.VideoOverlay.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.videoSelector = try reader["videoSelector"].readIfPresent(with: MediaConvertClientTypes.VideoSelector.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.VideoSelector {

    static func write(value: MediaConvertClientTypes.VideoSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alphaBehavior"].write(value.alphaBehavior)
        try writer["colorSpace"].write(value.colorSpace)
        try writer["colorSpaceUsage"].write(value.colorSpaceUsage)
        try writer["embeddedTimecodeOverride"].write(value.embeddedTimecodeOverride)
        try writer["hdr10Metadata"].write(value.hdr10Metadata, with: MediaConvertClientTypes.Hdr10Metadata.write(value:to:))
        try writer["maxLuminance"].write(value.maxLuminance)
        try writer["padVideo"].write(value.padVideo)
        try writer["pid"].write(value.pid)
        try writer["programNumber"].write(value.programNumber)
        try writer["rotate"].write(value.rotate)
        try writer["sampleRange"].write(value.sampleRange)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoSelector()
        value.alphaBehavior = try reader["alphaBehavior"].readIfPresent()
        value.colorSpace = try reader["colorSpace"].readIfPresent()
        value.colorSpaceUsage = try reader["colorSpaceUsage"].readIfPresent()
        value.embeddedTimecodeOverride = try reader["embeddedTimecodeOverride"].readIfPresent()
        value.hdr10Metadata = try reader["hdr10Metadata"].readIfPresent(with: MediaConvertClientTypes.Hdr10Metadata.read(from:))
        value.maxLuminance = try reader["maxLuminance"].readIfPresent()
        value.padVideo = try reader["padVideo"].readIfPresent()
        value.pid = try reader["pid"].readIfPresent()
        value.programNumber = try reader["programNumber"].readIfPresent()
        value.rotate = try reader["rotate"].readIfPresent()
        value.sampleRange = try reader["sampleRange"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VideoOverlay {

    static func write(value: MediaConvertClientTypes.VideoOverlay?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTimecode"].write(value.endTimecode)
        try writer["initialPosition"].write(value.initialPosition, with: MediaConvertClientTypes.VideoOverlayPosition.write(value:to:))
        try writer["input"].write(value.input, with: MediaConvertClientTypes.VideoOverlayInput.write(value:to:))
        try writer["playback"].write(value.playback)
        try writer["startTimecode"].write(value.startTimecode)
        try writer["transitions"].writeList(value.transitions, memberWritingClosure: MediaConvertClientTypes.VideoOverlayTransition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoOverlay {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoOverlay()
        value.endTimecode = try reader["endTimecode"].readIfPresent()
        value.initialPosition = try reader["initialPosition"].readIfPresent(with: MediaConvertClientTypes.VideoOverlayPosition.read(from:))
        value.input = try reader["input"].readIfPresent(with: MediaConvertClientTypes.VideoOverlayInput.read(from:))
        value.playback = try reader["playback"].readIfPresent()
        value.startTimecode = try reader["startTimecode"].readIfPresent()
        value.transitions = try reader["transitions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.VideoOverlayTransition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.VideoOverlayTransition {

    static func write(value: MediaConvertClientTypes.VideoOverlayTransition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endPosition"].write(value.endPosition, with: MediaConvertClientTypes.VideoOverlayPosition.write(value:to:))
        try writer["endTimecode"].write(value.endTimecode)
        try writer["startTimecode"].write(value.startTimecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoOverlayTransition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoOverlayTransition()
        value.endPosition = try reader["endPosition"].readIfPresent(with: MediaConvertClientTypes.VideoOverlayPosition.read(from:))
        value.endTimecode = try reader["endTimecode"].readIfPresent()
        value.startTimecode = try reader["startTimecode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VideoOverlayPosition {

    static func write(value: MediaConvertClientTypes.VideoOverlayPosition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["height"].write(value.height)
        try writer["unit"].write(value.unit)
        try writer["width"].write(value.width)
        try writer["xPosition"].write(value.xPosition)
        try writer["yPosition"].write(value.yPosition)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoOverlayPosition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoOverlayPosition()
        value.height = try reader["height"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        value.width = try reader["width"].readIfPresent()
        value.xPosition = try reader["xPosition"].readIfPresent()
        value.yPosition = try reader["yPosition"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VideoOverlayInput {

    static func write(value: MediaConvertClientTypes.VideoOverlayInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fileInput"].write(value.fileInput)
        try writer["inputClippings"].writeList(value.inputClippings, memberWritingClosure: MediaConvertClientTypes.VideoOverlayInputClipping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timecodeSource"].write(value.timecodeSource)
        try writer["timecodeStart"].write(value.timecodeStart)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoOverlayInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoOverlayInput()
        value.fileInput = try reader["fileInput"].readIfPresent()
        value.inputClippings = try reader["inputClippings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.VideoOverlayInputClipping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.timecodeSource = try reader["timecodeSource"].readIfPresent()
        value.timecodeStart = try reader["timecodeStart"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.VideoOverlayInputClipping {

    static func write(value: MediaConvertClientTypes.VideoOverlayInputClipping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTimecode"].write(value.endTimecode)
        try writer["startTimecode"].write(value.startTimecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoOverlayInputClipping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoOverlayInputClipping()
        value.endTimecode = try reader["endTimecode"].readIfPresent()
        value.startTimecode = try reader["startTimecode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.InputVideoGenerator {

    static func write(value: MediaConvertClientTypes.InputVideoGenerator?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channels"].write(value.channels)
        try writer["duration"].write(value.duration)
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
        try writer["sampleRate"].write(value.sampleRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.InputVideoGenerator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.InputVideoGenerator()
        value.channels = try reader["channels"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        value.sampleRate = try reader["sampleRate"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.InputClipping {

    static func write(value: MediaConvertClientTypes.InputClipping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTimecode"].write(value.endTimecode)
        try writer["startTimecode"].write(value.startTimecode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.InputClipping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.InputClipping()
        value.endTimecode = try reader["endTimecode"].readIfPresent()
        value.startTimecode = try reader["startTimecode"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.InputDecryptionSettings {

    static func write(value: MediaConvertClientTypes.InputDecryptionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["decryptionMode"].write(value.decryptionMode)
        try writer["encryptedDecryptionKey"].write(value.encryptedDecryptionKey)
        try writer["initializationVector"].write(value.initializationVector)
        try writer["kmsKeyRegion"].write(value.kmsKeyRegion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.InputDecryptionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.InputDecryptionSettings()
        value.decryptionMode = try reader["decryptionMode"].readIfPresent()
        value.encryptedDecryptionKey = try reader["encryptedDecryptionKey"].readIfPresent()
        value.initializationVector = try reader["initializationVector"].readIfPresent()
        value.kmsKeyRegion = try reader["kmsKeyRegion"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CaptionSelector {

    static func write(value: MediaConvertClientTypes.CaptionSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customLanguageCode"].write(value.customLanguageCode)
        try writer["languageCode"].write(value.languageCode)
        try writer["sourceSettings"].write(value.sourceSettings, with: MediaConvertClientTypes.CaptionSourceSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CaptionSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CaptionSelector()
        value.customLanguageCode = try reader["customLanguageCode"].readIfPresent()
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.sourceSettings = try reader["sourceSettings"].readIfPresent(with: MediaConvertClientTypes.CaptionSourceSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.CaptionSourceSettings {

    static func write(value: MediaConvertClientTypes.CaptionSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ancillarySourceSettings"].write(value.ancillarySourceSettings, with: MediaConvertClientTypes.AncillarySourceSettings.write(value:to:))
        try writer["dvbSubSourceSettings"].write(value.dvbSubSourceSettings, with: MediaConvertClientTypes.DvbSubSourceSettings.write(value:to:))
        try writer["embeddedSourceSettings"].write(value.embeddedSourceSettings, with: MediaConvertClientTypes.EmbeddedSourceSettings.write(value:to:))
        try writer["fileSourceSettings"].write(value.fileSourceSettings, with: MediaConvertClientTypes.FileSourceSettings.write(value:to:))
        try writer["sourceType"].write(value.sourceType)
        try writer["teletextSourceSettings"].write(value.teletextSourceSettings, with: MediaConvertClientTypes.TeletextSourceSettings.write(value:to:))
        try writer["trackSourceSettings"].write(value.trackSourceSettings, with: MediaConvertClientTypes.TrackSourceSettings.write(value:to:))
        try writer["webvttHlsSourceSettings"].write(value.webvttHlsSourceSettings, with: MediaConvertClientTypes.WebvttHlsSourceSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CaptionSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CaptionSourceSettings()
        value.ancillarySourceSettings = try reader["ancillarySourceSettings"].readIfPresent(with: MediaConvertClientTypes.AncillarySourceSettings.read(from:))
        value.dvbSubSourceSettings = try reader["dvbSubSourceSettings"].readIfPresent(with: MediaConvertClientTypes.DvbSubSourceSettings.read(from:))
        value.embeddedSourceSettings = try reader["embeddedSourceSettings"].readIfPresent(with: MediaConvertClientTypes.EmbeddedSourceSettings.read(from:))
        value.fileSourceSettings = try reader["fileSourceSettings"].readIfPresent(with: MediaConvertClientTypes.FileSourceSettings.read(from:))
        value.sourceType = try reader["sourceType"].readIfPresent()
        value.teletextSourceSettings = try reader["teletextSourceSettings"].readIfPresent(with: MediaConvertClientTypes.TeletextSourceSettings.read(from:))
        value.trackSourceSettings = try reader["trackSourceSettings"].readIfPresent(with: MediaConvertClientTypes.TrackSourceSettings.read(from:))
        value.webvttHlsSourceSettings = try reader["webvttHlsSourceSettings"].readIfPresent(with: MediaConvertClientTypes.WebvttHlsSourceSettings.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.WebvttHlsSourceSettings {

    static func write(value: MediaConvertClientTypes.WebvttHlsSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["renditionGroupId"].write(value.renditionGroupId)
        try writer["renditionLanguageCode"].write(value.renditionLanguageCode)
        try writer["renditionName"].write(value.renditionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.WebvttHlsSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.WebvttHlsSourceSettings()
        value.renditionGroupId = try reader["renditionGroupId"].readIfPresent()
        value.renditionLanguageCode = try reader["renditionLanguageCode"].readIfPresent()
        value.renditionName = try reader["renditionName"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.TrackSourceSettings {

    static func write(value: MediaConvertClientTypes.TrackSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["trackNumber"].write(value.trackNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TrackSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TrackSourceSettings()
        value.trackNumber = try reader["trackNumber"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.TeletextSourceSettings {

    static func write(value: MediaConvertClientTypes.TeletextSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageNumber"].write(value.pageNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.TeletextSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.TeletextSourceSettings()
        value.pageNumber = try reader["pageNumber"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.FileSourceSettings {

    static func write(value: MediaConvertClientTypes.FileSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["byteRateLimit"].write(value.byteRateLimit)
        try writer["convert608To708"].write(value.convert608To708)
        try writer["convertPaintToPop"].write(value.convertPaintToPop)
        try writer["framerate"].write(value.framerate, with: MediaConvertClientTypes.CaptionSourceFramerate.write(value:to:))
        try writer["sourceFile"].write(value.sourceFile)
        try writer["timeDelta"].write(value.timeDelta)
        try writer["timeDeltaUnits"].write(value.timeDeltaUnits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.FileSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.FileSourceSettings()
        value.byteRateLimit = try reader["byteRateLimit"].readIfPresent()
        value.convert608To708 = try reader["convert608To708"].readIfPresent()
        value.convertPaintToPop = try reader["convertPaintToPop"].readIfPresent()
        value.framerate = try reader["framerate"].readIfPresent(with: MediaConvertClientTypes.CaptionSourceFramerate.read(from:))
        value.sourceFile = try reader["sourceFile"].readIfPresent()
        value.timeDelta = try reader["timeDelta"].readIfPresent()
        value.timeDeltaUnits = try reader["timeDeltaUnits"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.CaptionSourceFramerate {

    static func write(value: MediaConvertClientTypes.CaptionSourceFramerate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["framerateDenominator"].write(value.framerateDenominator)
        try writer["framerateNumerator"].write(value.framerateNumerator)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CaptionSourceFramerate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CaptionSourceFramerate()
        value.framerateDenominator = try reader["framerateDenominator"].readIfPresent()
        value.framerateNumerator = try reader["framerateNumerator"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.EmbeddedSourceSettings {

    static func write(value: MediaConvertClientTypes.EmbeddedSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["convert608To708"].write(value.convert608To708)
        try writer["source608ChannelNumber"].write(value.source608ChannelNumber)
        try writer["source608TrackNumber"].write(value.source608TrackNumber)
        try writer["terminateCaptions"].write(value.terminateCaptions)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.EmbeddedSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.EmbeddedSourceSettings()
        value.convert608To708 = try reader["convert608To708"].readIfPresent()
        value.source608ChannelNumber = try reader["source608ChannelNumber"].readIfPresent()
        value.source608TrackNumber = try reader["source608TrackNumber"].readIfPresent()
        value.terminateCaptions = try reader["terminateCaptions"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.DvbSubSourceSettings {

    static func write(value: MediaConvertClientTypes.DvbSubSourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pid"].write(value.pid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.DvbSubSourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.DvbSubSourceSettings()
        value.pid = try reader["pid"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AncillarySourceSettings {

    static func write(value: MediaConvertClientTypes.AncillarySourceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["convert608To708"].write(value.convert608To708)
        try writer["sourceAncillaryChannelNumber"].write(value.sourceAncillaryChannelNumber)
        try writer["terminateCaptions"].write(value.terminateCaptions)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AncillarySourceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AncillarySourceSettings()
        value.convert608To708 = try reader["convert608To708"].readIfPresent()
        value.sourceAncillaryChannelNumber = try reader["sourceAncillaryChannelNumber"].readIfPresent()
        value.terminateCaptions = try reader["terminateCaptions"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AudioSelector {

    static func write(value: MediaConvertClientTypes.AudioSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDurationCorrection"].write(value.audioDurationCorrection)
        try writer["customLanguageCode"].write(value.customLanguageCode)
        try writer["defaultSelection"].write(value.defaultSelection)
        try writer["externalAudioFileInput"].write(value.externalAudioFileInput)
        try writer["hlsRenditionGroupSettings"].write(value.hlsRenditionGroupSettings, with: MediaConvertClientTypes.HlsRenditionGroupSettings.write(value:to:))
        try writer["languageCode"].write(value.languageCode)
        try writer["offset"].write(value.offset)
        try writer["pids"].writeList(value.pids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["programSelection"].write(value.programSelection)
        try writer["remixSettings"].write(value.remixSettings, with: MediaConvertClientTypes.RemixSettings.write(value:to:))
        try writer["selectorType"].write(value.selectorType)
        try writer["tracks"].writeList(value.tracks, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AudioSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AudioSelector()
        value.audioDurationCorrection = try reader["audioDurationCorrection"].readIfPresent()
        value.customLanguageCode = try reader["customLanguageCode"].readIfPresent()
        value.defaultSelection = try reader["defaultSelection"].readIfPresent()
        value.externalAudioFileInput = try reader["externalAudioFileInput"].readIfPresent()
        value.hlsRenditionGroupSettings = try reader["hlsRenditionGroupSettings"].readIfPresent(with: MediaConvertClientTypes.HlsRenditionGroupSettings.read(from:))
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.offset = try reader["offset"].readIfPresent()
        value.pids = try reader["pids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.programSelection = try reader["programSelection"].readIfPresent()
        value.remixSettings = try reader["remixSettings"].readIfPresent(with: MediaConvertClientTypes.RemixSettings.read(from:))
        value.selectorType = try reader["selectorType"].readIfPresent()
        value.tracks = try reader["tracks"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.HlsRenditionGroupSettings {

    static func write(value: MediaConvertClientTypes.HlsRenditionGroupSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["renditionGroupId"].write(value.renditionGroupId)
        try writer["renditionLanguageCode"].write(value.renditionLanguageCode)
        try writer["renditionName"].write(value.renditionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HlsRenditionGroupSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HlsRenditionGroupSettings()
        value.renditionGroupId = try reader["renditionGroupId"].readIfPresent()
        value.renditionLanguageCode = try reader["renditionLanguageCode"].readIfPresent()
        value.renditionName = try reader["renditionName"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AudioSelectorGroup {

    static func write(value: MediaConvertClientTypes.AudioSelectorGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioSelectorNames"].writeList(value.audioSelectorNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AudioSelectorGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AudioSelectorGroup()
        value.audioSelectorNames = try reader["audioSelectorNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.AdvancedInputFilterSettings {

    static func write(value: MediaConvertClientTypes.AdvancedInputFilterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addTexture"].write(value.addTexture)
        try writer["sharpening"].write(value.sharpening)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AdvancedInputFilterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AdvancedInputFilterSettings()
        value.addTexture = try reader["addTexture"].readIfPresent()
        value.sharpening = try reader["sharpening"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ExtendedDataServices {

    static func write(value: MediaConvertClientTypes.ExtendedDataServices?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["copyProtectionAction"].write(value.copyProtectionAction)
        try writer["vchipAction"].write(value.vchipAction)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ExtendedDataServices {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ExtendedDataServices()
        value.copyProtectionAction = try reader["copyProtectionAction"].readIfPresent()
        value.vchipAction = try reader["vchipAction"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.EsamSettings {

    static func write(value: MediaConvertClientTypes.EsamSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestConfirmConditionNotification"].write(value.manifestConfirmConditionNotification, with: MediaConvertClientTypes.EsamManifestConfirmConditionNotification.write(value:to:))
        try writer["responseSignalPreroll"].write(value.responseSignalPreroll)
        try writer["signalProcessingNotification"].write(value.signalProcessingNotification, with: MediaConvertClientTypes.EsamSignalProcessingNotification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.EsamSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.EsamSettings()
        value.manifestConfirmConditionNotification = try reader["manifestConfirmConditionNotification"].readIfPresent(with: MediaConvertClientTypes.EsamManifestConfirmConditionNotification.read(from:))
        value.responseSignalPreroll = try reader["responseSignalPreroll"].readIfPresent()
        value.signalProcessingNotification = try reader["signalProcessingNotification"].readIfPresent(with: MediaConvertClientTypes.EsamSignalProcessingNotification.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.EsamSignalProcessingNotification {

    static func write(value: MediaConvertClientTypes.EsamSignalProcessingNotification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sccXml"].write(value.sccXml)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.EsamSignalProcessingNotification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.EsamSignalProcessingNotification()
        value.sccXml = try reader["sccXml"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.EsamManifestConfirmConditionNotification {

    static func write(value: MediaConvertClientTypes.EsamManifestConfirmConditionNotification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mccXml"].write(value.mccXml)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.EsamManifestConfirmConditionNotification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.EsamManifestConfirmConditionNotification()
        value.mccXml = try reader["mccXml"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ColorConversion3DLUTSetting {

    static func write(value: MediaConvertClientTypes.ColorConversion3DLUTSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fileInput"].write(value.fileInput)
        try writer["inputColorSpace"].write(value.inputColorSpace)
        try writer["inputMasteringLuminance"].write(value.inputMasteringLuminance)
        try writer["outputColorSpace"].write(value.outputColorSpace)
        try writer["outputMasteringLuminance"].write(value.outputMasteringLuminance)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ColorConversion3DLUTSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ColorConversion3DLUTSetting()
        value.fileInput = try reader["fileInput"].readIfPresent()
        value.inputColorSpace = try reader["inputColorSpace"].readIfPresent()
        value.inputMasteringLuminance = try reader["inputMasteringLuminance"].readIfPresent()
        value.outputColorSpace = try reader["outputColorSpace"].readIfPresent()
        value.outputMasteringLuminance = try reader["outputMasteringLuminance"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AvailBlanking {

    static func write(value: MediaConvertClientTypes.AvailBlanking?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availBlankingImage"].write(value.availBlankingImage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AvailBlanking {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AvailBlanking()
        value.availBlankingImage = try reader["availBlankingImage"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.QueueTransition {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.QueueTransition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.QueueTransition()
        value.destinationQueue = try reader["destinationQueue"].readIfPresent()
        value.sourceQueue = try reader["sourceQueue"].readIfPresent()
        value.timestamp = try reader["timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MediaConvertClientTypes.OutputGroupDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OutputGroupDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OutputGroupDetail()
        value.outputDetails = try reader["outputDetails"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.OutputDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.OutputDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.OutputDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.OutputDetail()
        value.durationInMs = try reader["durationInMs"].readIfPresent()
        value.videoDetails = try reader["videoDetails"].readIfPresent(with: MediaConvertClientTypes.VideoDetail.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.VideoDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.VideoDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.VideoDetail()
        value.heightInPx = try reader["heightInPx"].readIfPresent()
        value.widthInPx = try reader["widthInPx"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.JobMessages {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.JobMessages {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.JobMessages()
        value.info = try reader["info"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.warning = try reader["warning"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.HopDestination {

    static func write(value: MediaConvertClientTypes.HopDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["priority"].write(value.priority)
        try writer["queue"].write(value.queue)
        try writer["waitMinutes"].write(value.waitMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.HopDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.HopDestination()
        value.priority = try reader["priority"].readIfPresent()
        value.queue = try reader["queue"].readIfPresent()
        value.waitMinutes = try reader["waitMinutes"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.AccelerationSettings {

    static func write(value: MediaConvertClientTypes.AccelerationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.AccelerationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.AccelerationSettings()
        value.mode = try reader["mode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaConvertClientTypes.JobTemplate {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.JobTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.JobTemplate()
        value.accelerationSettings = try reader["accelerationSettings"].readIfPresent(with: MediaConvertClientTypes.AccelerationSettings.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.hopDestinations = try reader["hopDestinations"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.HopDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.priority = try reader["priority"].readIfPresent()
        value.queue = try reader["queue"].readIfPresent()
        value.settings = try reader["settings"].readIfPresent(with: MediaConvertClientTypes.JobTemplateSettings.read(from:))
        value.statusUpdateInterval = try reader["statusUpdateInterval"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.JobTemplateSettings {

    static func write(value: MediaConvertClientTypes.JobTemplateSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adAvailOffset"].write(value.adAvailOffset)
        try writer["availBlanking"].write(value.availBlanking, with: MediaConvertClientTypes.AvailBlanking.write(value:to:))
        try writer["colorConversion3DLUTSettings"].writeList(value.colorConversion3DLUTSettings, memberWritingClosure: MediaConvertClientTypes.ColorConversion3DLUTSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["esam"].write(value.esam, with: MediaConvertClientTypes.EsamSettings.write(value:to:))
        try writer["extendedDataServices"].write(value.extendedDataServices, with: MediaConvertClientTypes.ExtendedDataServices.write(value:to:))
        try writer["followSource"].write(value.followSource)
        try writer["inputs"].writeList(value.inputs, memberWritingClosure: MediaConvertClientTypes.InputTemplate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["kantarWatermark"].write(value.kantarWatermark, with: MediaConvertClientTypes.KantarWatermarkSettings.write(value:to:))
        try writer["motionImageInserter"].write(value.motionImageInserter, with: MediaConvertClientTypes.MotionImageInserter.write(value:to:))
        try writer["nielsenConfiguration"].write(value.nielsenConfiguration, with: MediaConvertClientTypes.NielsenConfiguration.write(value:to:))
        try writer["nielsenNonLinearWatermark"].write(value.nielsenNonLinearWatermark, with: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings.write(value:to:))
        try writer["outputGroups"].writeList(value.outputGroups, memberWritingClosure: MediaConvertClientTypes.OutputGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timecodeConfig"].write(value.timecodeConfig, with: MediaConvertClientTypes.TimecodeConfig.write(value:to:))
        try writer["timedMetadataInsertion"].write(value.timedMetadataInsertion, with: MediaConvertClientTypes.TimedMetadataInsertion.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.JobTemplateSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.JobTemplateSettings()
        value.adAvailOffset = try reader["adAvailOffset"].readIfPresent()
        value.availBlanking = try reader["availBlanking"].readIfPresent(with: MediaConvertClientTypes.AvailBlanking.read(from:))
        value.colorConversion3DLUTSettings = try reader["colorConversion3DLUTSettings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.ColorConversion3DLUTSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.esam = try reader["esam"].readIfPresent(with: MediaConvertClientTypes.EsamSettings.read(from:))
        value.extendedDataServices = try reader["extendedDataServices"].readIfPresent(with: MediaConvertClientTypes.ExtendedDataServices.read(from:))
        value.followSource = try reader["followSource"].readIfPresent()
        value.inputs = try reader["inputs"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.InputTemplate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.kantarWatermark = try reader["kantarWatermark"].readIfPresent(with: MediaConvertClientTypes.KantarWatermarkSettings.read(from:))
        value.motionImageInserter = try reader["motionImageInserter"].readIfPresent(with: MediaConvertClientTypes.MotionImageInserter.read(from:))
        value.nielsenConfiguration = try reader["nielsenConfiguration"].readIfPresent(with: MediaConvertClientTypes.NielsenConfiguration.read(from:))
        value.nielsenNonLinearWatermark = try reader["nielsenNonLinearWatermark"].readIfPresent(with: MediaConvertClientTypes.NielsenNonLinearWatermarkSettings.read(from:))
        value.outputGroups = try reader["outputGroups"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.OutputGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.timecodeConfig = try reader["timecodeConfig"].readIfPresent(with: MediaConvertClientTypes.TimecodeConfig.read(from:))
        value.timedMetadataInsertion = try reader["timedMetadataInsertion"].readIfPresent(with: MediaConvertClientTypes.TimedMetadataInsertion.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.InputTemplate {

    static func write(value: MediaConvertClientTypes.InputTemplate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["advancedInputFilter"].write(value.advancedInputFilter)
        try writer["advancedInputFilterSettings"].write(value.advancedInputFilterSettings, with: MediaConvertClientTypes.AdvancedInputFilterSettings.write(value:to:))
        try writer["audioSelectorGroups"].writeMap(value.audioSelectorGroups, valueWritingClosure: MediaConvertClientTypes.AudioSelectorGroup.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["audioSelectors"].writeMap(value.audioSelectors, valueWritingClosure: MediaConvertClientTypes.AudioSelector.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["captionSelectors"].writeMap(value.captionSelectors, valueWritingClosure: MediaConvertClientTypes.CaptionSelector.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["crop"].write(value.crop, with: MediaConvertClientTypes.Rectangle.write(value:to:))
        try writer["deblockFilter"].write(value.deblockFilter)
        try writer["denoiseFilter"].write(value.denoiseFilter)
        try writer["dolbyVisionMetadataXml"].write(value.dolbyVisionMetadataXml)
        try writer["filterEnable"].write(value.filterEnable)
        try writer["filterStrength"].write(value.filterStrength)
        try writer["imageInserter"].write(value.imageInserter, with: MediaConvertClientTypes.ImageInserter.write(value:to:))
        try writer["inputClippings"].writeList(value.inputClippings, memberWritingClosure: MediaConvertClientTypes.InputClipping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputScanType"].write(value.inputScanType)
        try writer["position"].write(value.position, with: MediaConvertClientTypes.Rectangle.write(value:to:))
        try writer["programNumber"].write(value.programNumber)
        try writer["psiControl"].write(value.psiControl)
        try writer["timecodeSource"].write(value.timecodeSource)
        try writer["timecodeStart"].write(value.timecodeStart)
        try writer["videoOverlays"].writeList(value.videoOverlays, memberWritingClosure: MediaConvertClientTypes.VideoOverlay.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["videoSelector"].write(value.videoSelector, with: MediaConvertClientTypes.VideoSelector.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.InputTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.InputTemplate()
        value.advancedInputFilter = try reader["advancedInputFilter"].readIfPresent()
        value.advancedInputFilterSettings = try reader["advancedInputFilterSettings"].readIfPresent(with: MediaConvertClientTypes.AdvancedInputFilterSettings.read(from:))
        value.audioSelectorGroups = try reader["audioSelectorGroups"].readMapIfPresent(valueReadingClosure: MediaConvertClientTypes.AudioSelectorGroup.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.audioSelectors = try reader["audioSelectors"].readMapIfPresent(valueReadingClosure: MediaConvertClientTypes.AudioSelector.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.captionSelectors = try reader["captionSelectors"].readMapIfPresent(valueReadingClosure: MediaConvertClientTypes.CaptionSelector.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.crop = try reader["crop"].readIfPresent(with: MediaConvertClientTypes.Rectangle.read(from:))
        value.deblockFilter = try reader["deblockFilter"].readIfPresent()
        value.denoiseFilter = try reader["denoiseFilter"].readIfPresent()
        value.dolbyVisionMetadataXml = try reader["dolbyVisionMetadataXml"].readIfPresent()
        value.filterEnable = try reader["filterEnable"].readIfPresent()
        value.filterStrength = try reader["filterStrength"].readIfPresent()
        value.imageInserter = try reader["imageInserter"].readIfPresent(with: MediaConvertClientTypes.ImageInserter.read(from:))
        value.inputClippings = try reader["inputClippings"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.InputClipping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputScanType = try reader["inputScanType"].readIfPresent()
        value.position = try reader["position"].readIfPresent(with: MediaConvertClientTypes.Rectangle.read(from:))
        value.programNumber = try reader["programNumber"].readIfPresent()
        value.psiControl = try reader["psiControl"].readIfPresent()
        value.timecodeSource = try reader["timecodeSource"].readIfPresent()
        value.timecodeStart = try reader["timecodeStart"].readIfPresent()
        value.videoOverlays = try reader["videoOverlays"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.VideoOverlay.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.videoSelector = try reader["videoSelector"].readIfPresent(with: MediaConvertClientTypes.VideoSelector.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.Preset {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Preset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Preset()
        value.arn = try reader["arn"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.settings = try reader["settings"].readIfPresent(with: MediaConvertClientTypes.PresetSettings.read(from:))
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.PresetSettings {

    static func write(value: MediaConvertClientTypes.PresetSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioDescriptions"].writeList(value.audioDescriptions, memberWritingClosure: MediaConvertClientTypes.AudioDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["captionDescriptions"].writeList(value.captionDescriptions, memberWritingClosure: MediaConvertClientTypes.CaptionDescriptionPreset.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["containerSettings"].write(value.containerSettings, with: MediaConvertClientTypes.ContainerSettings.write(value:to:))
        try writer["videoDescription"].write(value.videoDescription, with: MediaConvertClientTypes.VideoDescription.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.PresetSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.PresetSettings()
        value.audioDescriptions = try reader["audioDescriptions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.AudioDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captionDescriptions = try reader["captionDescriptions"].readListIfPresent(memberReadingClosure: MediaConvertClientTypes.CaptionDescriptionPreset.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerSettings = try reader["containerSettings"].readIfPresent(with: MediaConvertClientTypes.ContainerSettings.read(from:))
        value.videoDescription = try reader["videoDescription"].readIfPresent(with: MediaConvertClientTypes.VideoDescription.read(from:))
        return value
    }
}

extension MediaConvertClientTypes.CaptionDescriptionPreset {

    static func write(value: MediaConvertClientTypes.CaptionDescriptionPreset?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customLanguageCode"].write(value.customLanguageCode)
        try writer["destinationSettings"].write(value.destinationSettings, with: MediaConvertClientTypes.CaptionDestinationSettings.write(value:to:))
        try writer["languageCode"].write(value.languageCode)
        try writer["languageDescription"].write(value.languageDescription)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.CaptionDescriptionPreset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.CaptionDescriptionPreset()
        value.customLanguageCode = try reader["customLanguageCode"].readIfPresent()
        value.destinationSettings = try reader["destinationSettings"].readIfPresent(with: MediaConvertClientTypes.CaptionDestinationSettings.read(from:))
        value.languageCode = try reader["languageCode"].readIfPresent()
        value.languageDescription = try reader["languageDescription"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Queue {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Queue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Queue()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.pricingPlan = try reader["pricingPlan"].readIfPresent()
        value.progressingJobsCount = try reader["progressingJobsCount"].readIfPresent()
        value.reservationPlan = try reader["reservationPlan"].readIfPresent(with: MediaConvertClientTypes.ReservationPlan.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.submittedJobsCount = try reader["submittedJobsCount"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ReservationPlan {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ReservationPlan {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ReservationPlan()
        value.commitment = try reader["commitment"].readIfPresent()
        value.expiresAt = try reader["expiresAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.purchasedAt = try reader["purchasedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.renewalType = try reader["renewalType"].readIfPresent()
        value.reservedSlots = try reader["reservedSlots"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Endpoint()
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.Policy {

    static func write(value: MediaConvertClientTypes.Policy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["httpInputs"].write(value.httpInputs)
        try writer["httpsInputs"].write(value.httpsInputs)
        try writer["s3Inputs"].write(value.s3Inputs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.Policy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.Policy()
        value.httpInputs = try reader["httpInputs"].readIfPresent()
        value.httpsInputs = try reader["httpsInputs"].readIfPresent()
        value.s3Inputs = try reader["s3Inputs"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ResourceTags {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.ResourceTags {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.ResourceTags()
        value.arn = try reader["arn"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaConvertClientTypes.JobEngineVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaConvertClientTypes.JobEngineVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaConvertClientTypes.JobEngineVersion()
        value.expirationDate = try reader["expirationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension MediaConvertClientTypes.ReservationPlanSettings {

    static func write(value: MediaConvertClientTypes.ReservationPlanSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["commitment"].write(value.commitment)
        try writer["renewalType"].write(value.renewalType)
        try writer["reservedSlots"].write(value.reservedSlots)
    }
}

public enum MediaConvertClientTypes {}
