// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AbortEnvironmentUpdateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("AbortEnvironmentUpdate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AbortEnvironmentUpdateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct AbortEnvironmentUpdateInput: Swift.Equatable {
    /// This specifies the ID of the environment with the in-progress update that you want to cancel.
    public var environmentId: Swift.String?
    /// This specifies the name of the environment with the in-progress update that you want to cancel.
    public var environmentName: Swift.String?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
    }
}

struct AbortEnvironmentUpdateInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
}

extension AbortEnvironmentUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension AbortEnvironmentUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AbortEnvironmentUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AbortEnvironmentUpdateOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AbortEnvironmentUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AbortEnvironmentUpdateOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticBeanstalkClientTypes {
    public enum ActionHistoryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionHistoryStatus] {
            return [
                .completed,
                .failed,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionHistoryStatus(rawValue: rawValue) ?? ActionHistoryStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum ActionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case running
        case scheduled
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionStatus] {
            return [
                .pending,
                .running,
                .scheduled,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "Pending"
            case .running: return "Running"
            case .scheduled: return "Scheduled"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionStatus(rawValue: rawValue) ?? ActionStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum ActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case instancerefresh
        case platformupdate
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .instancerefresh,
                .platformupdate,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .instancerefresh: return "InstanceRefresh"
            case .platformupdate: return "PlatformUpdate"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionType(rawValue: rawValue) ?? ActionType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.ApplicationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn = "ApplicationArn"
        case applicationName = "ApplicationName"
        case configurationTemplates = "ConfigurationTemplates"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case resourceLifecycleConfig = "ResourceLifecycleConfig"
        case versions = "Versions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationArn = applicationArn {
            try container.encode(applicationArn, forKey: ClientRuntime.Key("ApplicationArn"))
        }
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let configurationTemplates = configurationTemplates {
            if !configurationTemplates.isEmpty {
                var configurationTemplatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationTemplates"))
                for (index0, configurationtemplatename0) in configurationTemplates.enumerated() {
                    try configurationTemplatesContainer.encode(configurationtemplatename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var configurationTemplatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationTemplates"))
                try configurationTemplatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dateCreated = dateCreated {
            try container.encodeTimestamp(dateCreated, format: .dateTime, forKey: ClientRuntime.Key("dateCreated"))
        }
        if let dateUpdated = dateUpdated {
            try container.encodeTimestamp(dateUpdated, format: .dateTime, forKey: ClientRuntime.Key("dateUpdated"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let resourceLifecycleConfig = resourceLifecycleConfig {
            try container.encode(resourceLifecycleConfig, forKey: ClientRuntime.Key("ResourceLifecycleConfig"))
        }
        if let versions = versions {
            if !versions.isEmpty {
                var versionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Versions"))
                for (index0, versionlabel0) in versions.enumerated() {
                    try versionsContainer.encode(versionlabel0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var versionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Versions"))
                try versionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        if containerValues.contains(.versions) {
            struct KeyVal0{struct member{}}
            let versionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .versions)
            if let versionsWrappedContainer = versionsWrappedContainer {
                let versionsContainer = try versionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var versionsBuffer:[Swift.String]? = nil
                if let versionsContainer = versionsContainer {
                    versionsBuffer = [Swift.String]()
                    for stringContainer0 in versionsContainer {
                        versionsBuffer?.append(stringContainer0)
                    }
                }
                versions = versionsBuffer
            } else {
                versions = []
            }
        } else {
            versions = nil
        }
        if containerValues.contains(.configurationTemplates) {
            struct KeyVal0{struct member{}}
            let configurationTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .configurationTemplates)
            if let configurationTemplatesWrappedContainer = configurationTemplatesWrappedContainer {
                let configurationTemplatesContainer = try configurationTemplatesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var configurationTemplatesBuffer:[Swift.String]? = nil
                if let configurationTemplatesContainer = configurationTemplatesContainer {
                    configurationTemplatesBuffer = [Swift.String]()
                    for stringContainer0 in configurationTemplatesContainer {
                        configurationTemplatesBuffer?.append(stringContainer0)
                    }
                }
                configurationTemplates = configurationTemplatesBuffer
            } else {
                configurationTemplates = []
            }
        } else {
            configurationTemplates = nil
        }
        let resourceLifecycleConfigDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig.self, forKey: .resourceLifecycleConfig)
        resourceLifecycleConfig = resourceLifecycleConfigDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the properties of an application.
    public struct ApplicationDescription: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the application.
        public var applicationArn: Swift.String?
        /// The name of the application.
        public var applicationName: Swift.String?
        /// The names of the configuration templates associated with this application.
        public var configurationTemplates: [Swift.String]?
        /// The date when the application was created.
        public var dateCreated: ClientRuntime.Date?
        /// The date when the application was last modified.
        public var dateUpdated: ClientRuntime.Date?
        /// User-defined description of the application.
        public var description: Swift.String?
        /// The lifecycle settings for the application.
        public var resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?
        /// The names of the versions for this application.
        public var versions: [Swift.String]?

        public init (
            applicationArn: Swift.String? = nil,
            applicationName: Swift.String? = nil,
            configurationTemplates: [Swift.String]? = nil,
            dateCreated: ClientRuntime.Date? = nil,
            dateUpdated: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig? = nil,
            versions: [Swift.String]? = nil
        )
        {
            self.applicationArn = applicationArn
            self.applicationName = applicationName
            self.configurationTemplates = configurationTemplates
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.description = description
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.versions = versions
        }
    }

}

extension ElasticBeanstalkClientTypes.ApplicationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case latency = "Latency"
        case requestCount = "RequestCount"
        case statusCodes = "StatusCodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let latency = latency {
            try container.encode(latency, forKey: ClientRuntime.Key("Latency"))
        }
        if requestCount != 0 {
            try container.encode(requestCount, forKey: ClientRuntime.Key("RequestCount"))
        }
        if let statusCodes = statusCodes {
            try container.encode(statusCodes, forKey: ClientRuntime.Key("StatusCodes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let requestCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .requestCount)
        requestCount = requestCountDecoded
        let statusCodesDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.StatusCodes.self, forKey: .statusCodes)
        statusCodes = statusCodesDecoded
        let latencyDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.Latency.self, forKey: .latency)
        latency = latencyDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Application request metrics for an AWS Elastic Beanstalk environment.
    public struct ApplicationMetrics: Swift.Equatable {
        /// The amount of time that the metrics cover (usually 10 seconds). For example, you might have 5 requests (request_count) within the most recent time slice of 10 seconds (duration).
        public var duration: Swift.Int?
        /// Represents the average latency for the slowest X percent of requests over the last 10 seconds. Latencies are in seconds with one millisecond resolution.
        public var latency: ElasticBeanstalkClientTypes.Latency?
        /// Average number of requests handled by the web server per second over the last 10 seconds.
        public var requestCount: Swift.Int
        /// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response.
        public var statusCodes: ElasticBeanstalkClientTypes.StatusCodes?

        public init (
            duration: Swift.Int? = nil,
            latency: ElasticBeanstalkClientTypes.Latency? = nil,
            requestCount: Swift.Int = 0,
            statusCodes: ElasticBeanstalkClientTypes.StatusCodes? = nil
        )
        {
            self.duration = duration
            self.latency = latency
            self.requestCount = requestCount
            self.statusCodes = statusCodes
        }
    }

}

extension ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceRole = "ServiceRole"
        case versionLifecycleConfig = "VersionLifecycleConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let serviceRole = serviceRole {
            try container.encode(serviceRole, forKey: ClientRuntime.Key("ServiceRole"))
        }
        if let versionLifecycleConfig = versionLifecycleConfig {
            try container.encode(versionLifecycleConfig, forKey: ClientRuntime.Key("VersionLifecycleConfig"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let versionLifecycleConfigDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationVersionLifecycleConfig.self, forKey: .versionLifecycleConfig)
        versionLifecycleConfig = versionLifecycleConfigDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
    public struct ApplicationResourceLifecycleConfig: Swift.Equatable {
        /// The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a VersionLifecycleConfig for the application in one of the supporting calls (CreateApplication or UpdateApplicationResourceLifecycle). After you provide it once, in either one of the calls, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again in subsequent UpdateApplicationResourceLifecycle calls. You can, however, specify it in subsequent calls to change the Service Role to another value.
        public var serviceRole: Swift.String?
        /// Defines lifecycle settings for application versions.
        public var versionLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationVersionLifecycleConfig?

        public init (
            serviceRole: Swift.String? = nil,
            versionLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationVersionLifecycleConfig? = nil
        )
        {
            self.serviceRole = serviceRole
            self.versionLifecycleConfig = versionLifecycleConfig
        }
    }

}

extension ElasticBeanstalkClientTypes.ApplicationVersionDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case applicationVersionArn = "ApplicationVersionArn"
        case buildArn = "BuildArn"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case sourceBuildInformation = "SourceBuildInformation"
        case sourceBundle = "SourceBundle"
        case status = "Status"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let applicationVersionArn = applicationVersionArn {
            try container.encode(applicationVersionArn, forKey: ClientRuntime.Key("ApplicationVersionArn"))
        }
        if let buildArn = buildArn {
            try container.encode(buildArn, forKey: ClientRuntime.Key("BuildArn"))
        }
        if let dateCreated = dateCreated {
            try container.encodeTimestamp(dateCreated, format: .dateTime, forKey: ClientRuntime.Key("dateCreated"))
        }
        if let dateUpdated = dateUpdated {
            try container.encodeTimestamp(dateUpdated, format: .dateTime, forKey: ClientRuntime.Key("dateUpdated"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let sourceBuildInformation = sourceBuildInformation {
            try container.encode(sourceBuildInformation, forKey: ClientRuntime.Key("SourceBuildInformation"))
        }
        if let sourceBundle = sourceBundle {
            try container.encode(sourceBundle, forKey: ClientRuntime.Key("SourceBundle"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationVersionArn)
        applicationVersionArn = applicationVersionArnDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let sourceBuildInformationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceBuildInformation.self, forKey: .sourceBuildInformation)
        sourceBuildInformation = sourceBuildInformationDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let sourceBundleDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.S3Location.self, forKey: .sourceBundle)
        sourceBundle = sourceBundleDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationVersionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the properties of an application version.
    public struct ApplicationVersionDescription: Swift.Equatable {
        /// The name of the application to which the application version belongs.
        public var applicationName: Swift.String?
        /// The Amazon Resource Name (ARN) of the application version.
        public var applicationVersionArn: Swift.String?
        /// Reference to the artifact from the AWS CodeBuild build.
        public var buildArn: Swift.String?
        /// The creation date of the application version.
        public var dateCreated: ClientRuntime.Date?
        /// The last modified date of the application version.
        public var dateUpdated: ClientRuntime.Date?
        /// The description of the application version.
        public var description: Swift.String?
        /// If the version's source code was retrieved from AWS CodeCommit, the location of the source code for the application version.
        public var sourceBuildInformation: ElasticBeanstalkClientTypes.SourceBuildInformation?
        /// The storage location of the application version's source bundle in Amazon S3.
        public var sourceBundle: ElasticBeanstalkClientTypes.S3Location?
        /// The processing status of the application version. Reflects the state of the application version during its creation. Many of the values are only applicable if you specified True for the Process parameter of the CreateApplicationVersion action. The following list describes the possible values.
        ///
        /// * Unprocessed – Application version wasn't pre-processed or validated. Elastic Beanstalk will validate configuration files during deployment of the application version to an environment.
        ///
        /// * Processing – Elastic Beanstalk is currently processing the application version.
        ///
        /// * Building – Application version is currently undergoing an AWS CodeBuild build.
        ///
        /// * Processed – Elastic Beanstalk was successfully pre-processed and validated.
        ///
        /// * Failed – Either the AWS CodeBuild build failed or configuration files didn't pass validation. This application version isn't usable.
        public var status: ElasticBeanstalkClientTypes.ApplicationVersionStatus?
        /// A unique identifier for the application version.
        public var versionLabel: Swift.String?

        public init (
            applicationName: Swift.String? = nil,
            applicationVersionArn: Swift.String? = nil,
            buildArn: Swift.String? = nil,
            dateCreated: ClientRuntime.Date? = nil,
            dateUpdated: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            sourceBuildInformation: ElasticBeanstalkClientTypes.SourceBuildInformation? = nil,
            sourceBundle: ElasticBeanstalkClientTypes.S3Location? = nil,
            status: ElasticBeanstalkClientTypes.ApplicationVersionStatus? = nil,
            versionLabel: Swift.String? = nil
        )
        {
            self.applicationName = applicationName
            self.applicationVersionArn = applicationVersionArn
            self.buildArn = buildArn
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.description = description
            self.sourceBuildInformation = sourceBuildInformation
            self.sourceBundle = sourceBundle
            self.status = status
            self.versionLabel = versionLabel
        }
    }

}

extension ElasticBeanstalkClientTypes.ApplicationVersionLifecycleConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxAgeRule = "MaxAgeRule"
        case maxCountRule = "MaxCountRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxAgeRule = maxAgeRule {
            try container.encode(maxAgeRule, forKey: ClientRuntime.Key("MaxAgeRule"))
        }
        if let maxCountRule = maxCountRule {
            try container.encode(maxCountRule, forKey: ClientRuntime.Key("MaxCountRule"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxCountRuleDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.MaxCountRule.self, forKey: .maxCountRule)
        maxCountRule = maxCountRuleDecoded
        let maxAgeRuleDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.MaxAgeRule.self, forKey: .maxAgeRule)
        maxAgeRule = maxAgeRuleDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The application version lifecycle settings for an application. Defines the rules that Elastic Beanstalk applies to an application's versions in order to avoid hitting the per-region limit for application versions. When Elastic Beanstalk deletes an application version from its database, you can no longer deploy that version to an environment. The source bundle remains in S3 unless you configure the rule to delete it.
    public struct ApplicationVersionLifecycleConfig: Swift.Equatable {
        /// Specify a max age rule to restrict the length of time that application versions are retained for an application.
        public var maxAgeRule: ElasticBeanstalkClientTypes.MaxAgeRule?
        /// Specify a max count rule to restrict the number of application versions that are retained for an application.
        public var maxCountRule: ElasticBeanstalkClientTypes.MaxCountRule?

        public init (
            maxAgeRule: ElasticBeanstalkClientTypes.MaxAgeRule? = nil,
            maxCountRule: ElasticBeanstalkClientTypes.MaxCountRule? = nil
        )
        {
            self.maxAgeRule = maxAgeRule
            self.maxCountRule = maxCountRule
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum ApplicationVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case building
        case failed
        case processed
        case processing
        case unprocessed
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationVersionStatus] {
            return [
                .building,
                .failed,
                .processed,
                .processing,
                .unprocessed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .building: return "Building"
            case .failed: return "Failed"
            case .processed: return "Processed"
            case .processing: return "Processing"
            case .unprocessed: return "Unprocessed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ApplicationVersionStatus(rawValue: rawValue) ?? ApplicationVersionStatus.sdkUnknown(rawValue)
        }
    }
}

extension ApplyEnvironmentManagedActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionId = actionId {
            try container.encode(actionId, forKey: ClientRuntime.Key("ActionId"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("ApplyEnvironmentManagedAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ApplyEnvironmentManagedActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to execute a scheduled managed action immediately.
public struct ApplyEnvironmentManagedActionInput: Swift.Equatable {
    /// The action ID of the scheduled managed action to execute.
    /// This member is required.
    public var actionId: Swift.String?
    /// The environment ID of the target environment.
    public var environmentId: Swift.String?
    /// The name of the target environment.
    public var environmentName: Swift.String?

    public init (
        actionId: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.actionId = actionId
        self.environmentId = environmentId
        self.environmentName = environmentName
    }
}

struct ApplyEnvironmentManagedActionInputBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let actionId: Swift.String?
}

extension ApplyEnvironmentManagedActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId = "ActionId"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
    }
}

extension ApplyEnvironmentManagedActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ApplyEnvironmentManagedActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ManagedActionInvalidStateException" : self = .managedActionInvalidStateException(try ManagedActionInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ApplyEnvironmentManagedActionOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case managedActionInvalidStateException(ManagedActionInvalidStateException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ApplyEnvironmentManagedActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ApplyEnvironmentManagedActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionDescription = output.actionDescription
            self.actionId = output.actionId
            self.actionType = output.actionType
            self.status = output.status
        } else {
            self.actionDescription = nil
            self.actionId = nil
            self.actionType = nil
            self.status = nil
        }
    }
}

/// The result message containing information about the managed action.
public struct ApplyEnvironmentManagedActionOutputResponse: Swift.Equatable {
    /// A description of the managed action.
    public var actionDescription: Swift.String?
    /// The action ID of the managed action.
    public var actionId: Swift.String?
    /// The type of managed action.
    public var actionType: ElasticBeanstalkClientTypes.ActionType?
    /// The status of the managed action.
    public var status: Swift.String?

    public init (
        actionDescription: Swift.String? = nil,
        actionId: Swift.String? = nil,
        actionType: ElasticBeanstalkClientTypes.ActionType? = nil,
        status: Swift.String? = nil
    )
    {
        self.actionDescription = actionDescription
        self.actionId = actionId
        self.actionType = actionType
        self.status = status
    }
}

struct ApplyEnvironmentManagedActionOutputResponseBody: Swift.Equatable {
    let actionId: Swift.String?
    let actionDescription: Swift.String?
    let actionType: ElasticBeanstalkClientTypes.ActionType?
    let status: Swift.String?
}

extension ApplyEnvironmentManagedActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionDescription = "ActionDescription"
        case actionId = "ActionId"
        case actionType = "ActionType"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ApplyEnvironmentManagedActionResult"))
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionDescription)
        actionDescription = actionDescriptionDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension AssociateEnvironmentOperationsRoleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let operationsRole = operationsRole {
            try container.encode(operationsRole, forKey: ClientRuntime.Key("OperationsRole"))
        }
        try container.encode("AssociateEnvironmentOperationsRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AssociateEnvironmentOperationsRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to add or change the operations role used by an environment.
public struct AssociateEnvironmentOperationsRoleInput: Swift.Equatable {
    /// The name of the environment to which to set the operations role.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
    /// This member is required.
    public var operationsRole: Swift.String?

    public init (
        environmentName: Swift.String? = nil,
        operationsRole: Swift.String? = nil
    )
    {
        self.environmentName = environmentName
        self.operationsRole = operationsRole
    }
}

struct AssociateEnvironmentOperationsRoleInputBody: Swift.Equatable {
    let environmentName: Swift.String?
    let operationsRole: Swift.String?
}

extension AssociateEnvironmentOperationsRoleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentName = "EnvironmentName"
        case operationsRole = "OperationsRole"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}

extension AssociateEnvironmentOperationsRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AssociateEnvironmentOperationsRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateEnvironmentOperationsRoleOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateEnvironmentOperationsRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateEnvironmentOperationsRoleOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticBeanstalkClientTypes.AutoScalingGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes an Auto Scaling launch configuration.
    public struct AutoScalingGroup: Swift.Equatable {
        /// The name of the AutoScalingGroup .
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ElasticBeanstalkClientTypes.BuildConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactName = "ArtifactName"
        case codeBuildServiceRole = "CodeBuildServiceRole"
        case computeType = "ComputeType"
        case image = "Image"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let artifactName = artifactName {
            try container.encode(artifactName, forKey: ClientRuntime.Key("ArtifactName"))
        }
        if let codeBuildServiceRole = codeBuildServiceRole {
            try container.encode(codeBuildServiceRole, forKey: ClientRuntime.Key("CodeBuildServiceRole"))
        }
        if let computeType = computeType {
            try container.encode(computeType, forKey: ClientRuntime.Key("ComputeType"))
        }
        if let image = image {
            try container.encode(image, forKey: ClientRuntime.Key("Image"))
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactName)
        artifactName = artifactNameDecoded
        let codeBuildServiceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeBuildServiceRole)
        codeBuildServiceRole = codeBuildServiceRoleDecoded
        let computeTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Settings for an AWS CodeBuild build.
    public struct BuildConfiguration: Swift.Equatable {
        /// The name of the artifact of the CodeBuild build. If provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label-artifact-name.zip. If not provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label.zip.
        public var artifactName: Swift.String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        /// This member is required.
        public var codeBuildServiceRole: Swift.String?
        /// Information about the compute resources the build project will use.
        ///
        /// * BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds
        ///
        /// * BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds
        ///
        /// * BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds
        public var computeType: ElasticBeanstalkClientTypes.ComputeType?
        /// The ID of the Docker image to use for this build project.
        /// This member is required.
        public var image: Swift.String?
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        public var timeoutInMinutes: Swift.Int?

        public init (
            artifactName: Swift.String? = nil,
            codeBuildServiceRole: Swift.String? = nil,
            computeType: ElasticBeanstalkClientTypes.ComputeType? = nil,
            image: Swift.String? = nil,
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.artifactName = artifactName
            self.codeBuildServiceRole = codeBuildServiceRole
            self.computeType = computeType
            self.image = image
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension ElasticBeanstalkClientTypes.Builder: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("ARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The builder used to build the custom platform.
    public struct Builder: Swift.Equatable {
        /// The ARN of the builder.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension ElasticBeanstalkClientTypes.CPUUtilization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ioWait = "IOWait"
        case irq = "IRQ"
        case idle = "Idle"
        case nice = "Nice"
        case privileged = "Privileged"
        case softIRQ = "SoftIRQ"
        case system = "System"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ioWait = ioWait {
            try container.encode(ioWait, forKey: ClientRuntime.Key("IOWait"))
        }
        if let irq = irq {
            try container.encode(irq, forKey: ClientRuntime.Key("IRQ"))
        }
        if let idle = idle {
            try container.encode(idle, forKey: ClientRuntime.Key("Idle"))
        }
        if let nice = nice {
            try container.encode(nice, forKey: ClientRuntime.Key("Nice"))
        }
        if let privileged = privileged {
            try container.encode(privileged, forKey: ClientRuntime.Key("Privileged"))
        }
        if let softIRQ = softIRQ {
            try container.encode(softIRQ, forKey: ClientRuntime.Key("SoftIRQ"))
        }
        if let system = system {
            try container.encode(system, forKey: ClientRuntime.Key("System"))
        }
        if let user = user {
            try container.encode(user, forKey: ClientRuntime.Key("User"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .user)
        user = userDecoded
        let niceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nice)
        nice = niceDecoded
        let systemDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .system)
        system = systemDecoded
        let idleDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .idle)
        idle = idleDecoded
        let ioWaitDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .ioWait)
        ioWait = ioWaitDecoded
        let irqDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .irq)
        irq = irqDecoded
        let softIRQDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .softIRQ)
        softIRQ = softIRQDecoded
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .privileged)
        privileged = privilegedDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// CPU utilization metrics for an instance.
    public struct CPUUtilization: Swift.Equatable {
        /// Percentage of time that the CPU has spent in the Idle state over the last 10 seconds.
        public var idle: Swift.Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the I/O Wait state over the last 10 seconds.
        public var ioWait: Swift.Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the IRQ state over the last 10 seconds.
        public var irq: Swift.Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the Nice state over the last 10 seconds.
        public var nice: Swift.Double?
        /// Available on Windows environments only. Percentage of time that the CPU has spent in the Privileged state over the last 10 seconds.
        public var privileged: Swift.Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the SoftIRQ state over the last 10 seconds.
        public var softIRQ: Swift.Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the System state over the last 10 seconds.
        public var system: Swift.Double?
        /// Percentage of time that the CPU has spent in the User state over the last 10 seconds.
        public var user: Swift.Double?

        public init (
            idle: Swift.Double? = nil,
            ioWait: Swift.Double? = nil,
            irq: Swift.Double? = nil,
            nice: Swift.Double? = nil,
            privileged: Swift.Double? = nil,
            softIRQ: Swift.Double? = nil,
            system: Swift.Double? = nil,
            user: Swift.Double? = nil
        )
        {
            self.idle = idle
            self.ioWait = ioWait
            self.irq = irq
            self.nice = nice
            self.privileged = privileged
            self.softIRQ = softIRQ
            self.system = system
            self.user = user
        }
    }

}

extension CheckDNSAvailabilityInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cnamePrefix = cnamePrefix {
            try container.encode(cnamePrefix, forKey: ClientRuntime.Key("CNAMEPrefix"))
        }
        try container.encode("CheckDNSAvailability", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CheckDNSAvailabilityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Results message indicating whether a CNAME is available.
public struct CheckDNSAvailabilityInput: Swift.Equatable {
    /// The prefix used when this CNAME is reserved.
    /// This member is required.
    public var cnamePrefix: Swift.String?

    public init (
        cnamePrefix: Swift.String? = nil
    )
    {
        self.cnamePrefix = cnamePrefix
    }
}

struct CheckDNSAvailabilityInputBody: Swift.Equatable {
    let cnamePrefix: Swift.String?
}

extension CheckDNSAvailabilityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cnamePrefix = "CNAMEPrefix"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cnamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cnamePrefix)
        cnamePrefix = cnamePrefixDecoded
    }
}

extension CheckDNSAvailabilityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CheckDNSAvailabilityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CheckDNSAvailabilityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CheckDNSAvailabilityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CheckDNSAvailabilityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.available = output.available
            self.fullyQualifiedCNAME = output.fullyQualifiedCNAME
        } else {
            self.available = nil
            self.fullyQualifiedCNAME = nil
        }
    }
}

/// Indicates if the specified CNAME is available.
public struct CheckDNSAvailabilityOutputResponse: Swift.Equatable {
    /// Indicates if the specified CNAME is available:
    ///
    /// * true : The CNAME is available.
    ///
    /// * false : The CNAME is not available.
    public var available: Swift.Bool?
    /// The fully qualified CNAME to reserve when [CreateEnvironment] is called with the provided prefix.
    public var fullyQualifiedCNAME: Swift.String?

    public init (
        available: Swift.Bool? = nil,
        fullyQualifiedCNAME: Swift.String? = nil
    )
    {
        self.available = available
        self.fullyQualifiedCNAME = fullyQualifiedCNAME
    }
}

struct CheckDNSAvailabilityOutputResponseBody: Swift.Equatable {
    let available: Swift.Bool?
    let fullyQualifiedCNAME: Swift.String?
}

extension CheckDNSAvailabilityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case available = "Available"
        case fullyQualifiedCNAME = "FullyQualifiedCNAME"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CheckDNSAvailabilityResult"))
        let availableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .available)
        available = availableDecoded
        let fullyQualifiedCNAMEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fullyQualifiedCNAME)
        fullyQualifiedCNAME = fullyQualifiedCNAMEDecoded
    }
}

extension CodeBuildNotInServiceRegionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CodeBuildNotInServiceRegionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// AWS CodeBuild is not available in the specified region.
public struct CodeBuildNotInServiceRegionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CodeBuildNotInServiceRegionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CodeBuildNotInServiceRegionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComposeEnvironmentsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let versionLabels = versionLabels {
            if !versionLabels.isEmpty {
                var versionLabelsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VersionLabels"))
                for (index0, versionlabel0) in versionLabels.enumerated() {
                    try versionLabelsContainer.encode(versionlabel0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var versionLabelsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VersionLabels"))
                try versionLabelsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ComposeEnvironments", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ComposeEnvironmentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to create or update a group of environments.
public struct ComposeEnvironmentsInput: Swift.Equatable {
    /// The name of the application to which the specified source bundles belong.
    public var applicationName: Swift.String?
    /// The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment's manifest ends with a + (plus) character. See [Environment Manifest (env.yaml)](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html) for details.
    public var groupName: Swift.String?
    /// A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create.
    public var versionLabels: [Swift.String]?

    public init (
        applicationName: Swift.String? = nil,
        groupName: Swift.String? = nil,
        versionLabels: [Swift.String]? = nil
    )
    {
        self.applicationName = applicationName
        self.groupName = groupName
        self.versionLabels = versionLabels
    }
}

struct ComposeEnvironmentsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let groupName: Swift.String?
    let versionLabels: [Swift.String]?
}

extension ComposeEnvironmentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case groupName = "GroupName"
        case versionLabels = "VersionLabels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        if containerValues.contains(.versionLabels) {
            struct KeyVal0{struct member{}}
            let versionLabelsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .versionLabels)
            if let versionLabelsWrappedContainer = versionLabelsWrappedContainer {
                let versionLabelsContainer = try versionLabelsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var versionLabelsBuffer:[Swift.String]? = nil
                if let versionLabelsContainer = versionLabelsContainer {
                    versionLabelsBuffer = [Swift.String]()
                    for stringContainer0 in versionLabelsContainer {
                        versionLabelsBuffer?.append(stringContainer0)
                    }
                }
                versionLabels = versionLabelsBuffer
            } else {
                versionLabels = []
            }
        } else {
            versionLabels = nil
        }
    }
}

extension ComposeEnvironmentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ComposeEnvironmentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyEnvironmentsException" : self = .tooManyEnvironmentsException(try TooManyEnvironmentsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ComposeEnvironmentsOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyEnvironmentsException(TooManyEnvironmentsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ComposeEnvironmentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ComposeEnvironmentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.environments = output.environments
            self.nextToken = output.nextToken
        } else {
            self.environments = nil
            self.nextToken = nil
        }
    }
}

/// Result message containing a list of environment descriptions.
public struct ComposeEnvironmentsOutputResponse: Swift.Equatable {
    /// Returns an [EnvironmentDescription] list.
    public var environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]?
    /// In a paginated request, the token that you can pass in a subsequent request to get the next response page.
    public var nextToken: Swift.String?

    public init (
        environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environments = environments
        self.nextToken = nextToken
    }
}

struct ComposeEnvironmentsOutputResponseBody: Swift.Equatable {
    let environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]?
    let nextToken: Swift.String?
}

extension ComposeEnvironmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environments = "Environments"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ComposeEnvironmentsResult"))
        if containerValues.contains(.environments) {
            struct KeyVal0{struct member{}}
            let environmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environments)
            if let environmentsWrappedContainer = environmentsWrappedContainer {
                let environmentsContainer = try environmentsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentDescription].self, forKey: .member)
                var environmentsBuffer:[ElasticBeanstalkClientTypes.EnvironmentDescription]? = nil
                if let environmentsContainer = environmentsContainer {
                    environmentsBuffer = [ElasticBeanstalkClientTypes.EnvironmentDescription]()
                    for structureContainer0 in environmentsContainer {
                        environmentsBuffer?.append(structureContainer0)
                    }
                }
                environments = environmentsBuffer
            } else {
                environments = []
            }
        } else {
            environments = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    public enum ComputeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case buildGeneral1Large
        case buildGeneral1Medium
        case buildGeneral1Small
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .buildGeneral1Large,
                .buildGeneral1Medium,
                .buildGeneral1Small,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .buildGeneral1Large: return "BUILD_GENERAL1_LARGE"
            case .buildGeneral1Medium: return "BUILD_GENERAL1_MEDIUM"
            case .buildGeneral1Small: return "BUILD_GENERAL1_SMALL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputeType(rawValue: rawValue) ?? ComputeType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum ConfigurationDeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deployed
        case failed
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationDeploymentStatus] {
            return [
                .deployed,
                .failed,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deployed: return "deployed"
            case .failed: return "failed"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationDeploymentStatus(rawValue: rawValue) ?? ConfigurationDeploymentStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.ConfigurationOptionDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSeverity = "ChangeSeverity"
        case defaultValue = "DefaultValue"
        case maxLength = "MaxLength"
        case maxValue = "MaxValue"
        case minValue = "MinValue"
        case name = "Name"
        case namespace = "Namespace"
        case regex = "Regex"
        case userDefined = "UserDefined"
        case valueOptions = "ValueOptions"
        case valueType = "ValueType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSeverity = changeSeverity {
            try container.encode(changeSeverity, forKey: ClientRuntime.Key("ChangeSeverity"))
        }
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let maxLength = maxLength {
            try container.encode(maxLength, forKey: ClientRuntime.Key("MaxLength"))
        }
        if let maxValue = maxValue {
            try container.encode(maxValue, forKey: ClientRuntime.Key("MaxValue"))
        }
        if let minValue = minValue {
            try container.encode(minValue, forKey: ClientRuntime.Key("MinValue"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let regex = regex {
            try container.encode(regex, forKey: ClientRuntime.Key("Regex"))
        }
        if let userDefined = userDefined {
            try container.encode(userDefined, forKey: ClientRuntime.Key("UserDefined"))
        }
        if let valueOptions = valueOptions {
            if !valueOptions.isEmpty {
                var valueOptionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValueOptions"))
                for (index0, configurationoptionpossiblevalue0) in valueOptions.enumerated() {
                    try valueOptionsContainer.encode(configurationoptionpossiblevalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valueOptionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValueOptions"))
                try valueOptionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let valueType = valueType {
            try container.encode(valueType, forKey: ClientRuntime.Key("ValueType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let changeSeverityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSeverity)
        changeSeverity = changeSeverityDecoded
        let userDefinedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userDefined)
        userDefined = userDefinedDecoded
        let valueTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ConfigurationOptionValueType.self, forKey: .valueType)
        valueType = valueTypeDecoded
        if containerValues.contains(.valueOptions) {
            struct KeyVal0{struct member{}}
            let valueOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .valueOptions)
            if let valueOptionsWrappedContainer = valueOptionsWrappedContainer {
                let valueOptionsContainer = try valueOptionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valueOptionsBuffer:[Swift.String]? = nil
                if let valueOptionsContainer = valueOptionsContainer {
                    valueOptionsBuffer = [Swift.String]()
                    for stringContainer0 in valueOptionsContainer {
                        valueOptionsBuffer?.append(stringContainer0)
                    }
                }
                valueOptions = valueOptionsBuffer
            } else {
                valueOptions = []
            }
        } else {
            valueOptions = nil
        }
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxValue)
        maxValue = maxValueDecoded
        let maxLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLength)
        maxLength = maxLengthDecoded
        let regexDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.OptionRestrictionRegex.self, forKey: .regex)
        regex = regexDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the possible values for a configuration option.
    public struct ConfigurationOptionDescription: Swift.Equatable {
        /// An indication of which action is required if the value for this configuration option changes:
        ///
        /// * NoInterruption : There is no interruption to the environment or application availability.
        ///
        /// * RestartEnvironment : The environment is entirely restarted, all AWS resources are deleted and recreated, and the environment is unavailable during the process.
        ///
        /// * RestartApplicationServer : The environment is available the entire time. However, a short application outage occurs when the application servers on the running Amazon EC2 instances are restarted.
        public var changeSeverity: Swift.String?
        /// The default value for this configuration option.
        public var defaultValue: Swift.String?
        /// If specified, the configuration option must be a string value no longer than this value.
        public var maxLength: Swift.Int?
        /// If specified, the configuration option must be a numeric value less than this value.
        public var maxValue: Swift.Int?
        /// If specified, the configuration option must be a numeric value greater than this value.
        public var minValue: Swift.Int?
        /// The name of the configuration option.
        public var name: Swift.String?
        /// A unique namespace identifying the option's associated AWS resource.
        public var namespace: Swift.String?
        /// If specified, the configuration option must be a string value that satisfies this regular expression.
        public var regex: ElasticBeanstalkClientTypes.OptionRestrictionRegex?
        /// An indication of whether the user defined this configuration option:
        ///
        /// * true : This configuration option was defined by the user. It is a valid choice for specifying if this as an Option to Remove when updating configuration settings.
        ///
        /// * false : This configuration was not defined by the user.
        ///
        ///
        /// Constraint: You can remove only UserDefined options from a configuration. Valid Values: true | false
        public var userDefined: Swift.Bool?
        /// If specified, values for the configuration option are selected from this list.
        public var valueOptions: [Swift.String]?
        /// An indication of which type of values this option has and whether it is allowable to select one or more than one of the possible values:
        ///
        /// * Scalar : Values for this option are a single selection from the possible values, or an unformatted string, or numeric value governed by the MIN/MAX/Regex constraints.
        ///
        /// * List : Values for this option are multiple selections from the possible values.
        ///
        /// * Boolean : Values for this option are either true or false .
        ///
        /// * Json : Values for this option are a JSON representation of a ConfigDocument.
        public var valueType: ElasticBeanstalkClientTypes.ConfigurationOptionValueType?

        public init (
            changeSeverity: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            maxLength: Swift.Int? = nil,
            maxValue: Swift.Int? = nil,
            minValue: Swift.Int? = nil,
            name: Swift.String? = nil,
            namespace: Swift.String? = nil,
            regex: ElasticBeanstalkClientTypes.OptionRestrictionRegex? = nil,
            userDefined: Swift.Bool? = nil,
            valueOptions: [Swift.String]? = nil,
            valueType: ElasticBeanstalkClientTypes.ConfigurationOptionValueType? = nil
        )
        {
            self.changeSeverity = changeSeverity
            self.defaultValue = defaultValue
            self.maxLength = maxLength
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.namespace = namespace
            self.regex = regex
            self.userDefined = userDefined
            self.valueOptions = valueOptions
            self.valueType = valueType
        }
    }

}

extension ElasticBeanstalkClientTypes.ConfigurationOptionSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case namespace = "Namespace"
        case optionName = "OptionName"
        case resourceName = "ResourceName"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: ClientRuntime.Key("OptionName"))
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let optionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionName)
        optionName = optionNameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A specification identifying an individual configuration option along with its current value. For a list of possible namespaces and option values, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide.
    public struct ConfigurationOptionSetting: Swift.Equatable {
        /// A unique namespace that identifies the option's associated AWS resource.
        public var namespace: Swift.String?
        /// The name of the configuration option.
        public var optionName: Swift.String?
        /// A unique resource name for the option setting. Use it for a time–based scaling configuration option.
        public var resourceName: Swift.String?
        /// The current value for the configuration option.
        public var value: Swift.String?

        public init (
            namespace: Swift.String? = nil,
            optionName: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.namespace = namespace
            self.optionName = optionName
            self.resourceName = resourceName
            self.value = value
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum ConfigurationOptionValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case list
        case scalar
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationOptionValueType] {
            return [
                .list,
                .scalar,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .list: return "List"
            case .scalar: return "Scalar"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationOptionValueType(rawValue: rawValue) ?? ConfigurationOptionValueType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.ConfigurationSettingsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case deploymentStatus = "DeploymentStatus"
        case description = "Description"
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let dateCreated = dateCreated {
            try container.encodeTimestamp(dateCreated, format: .dateTime, forKey: ClientRuntime.Key("dateCreated"))
        }
        if let dateUpdated = dateUpdated {
            try container.encodeTimestamp(dateUpdated, format: .dateTime, forKey: ClientRuntime.Key("dateUpdated"))
        }
        if let deploymentStatus = deploymentStatus {
            try container.encode(deploymentStatus, forKey: ClientRuntime.Key("DeploymentStatus"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the settings for a configuration set.
    public struct ConfigurationSettingsDescription: Swift.Equatable {
        /// The name of the application associated with this configuration set.
        public var applicationName: Swift.String?
        /// The date (in UTC time) when this configuration set was created.
        public var dateCreated: ClientRuntime.Date?
        /// The date (in UTC time) when this configuration set was last modified.
        public var dateUpdated: ClientRuntime.Date?
        /// If this configuration set is associated with an environment, the DeploymentStatus parameter indicates the deployment status of this configuration set:
        ///
        /// * null: This configuration is not associated with a running environment.
        ///
        /// * pending: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.
        ///
        /// * deployed: This is the configuration that is currently deployed to the associated running environment.
        ///
        /// * failed: This is a draft configuration that failed to successfully deploy.
        public var deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus?
        /// Describes this configuration set.
        public var description: Swift.String?
        /// If not null, the name of the environment for this configuration set.
        public var environmentName: Swift.String?
        /// A list of the configuration options and their values in this configuration set.
        public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
        /// The ARN of the platform version.
        public var platformArn: Swift.String?
        /// The name of the solution stack this configuration set uses.
        public var solutionStackName: Swift.String?
        /// If not null, the name of the configuration template for this configuration set.
        public var templateName: Swift.String?

        public init (
            applicationName: Swift.String? = nil,
            dateCreated: ClientRuntime.Date? = nil,
            dateUpdated: ClientRuntime.Date? = nil,
            deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus? = nil,
            description: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
            platformArn: Swift.String? = nil,
            solutionStackName: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.applicationName = applicationName
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.deploymentStatus = deploymentStatus
            self.description = description
            self.environmentName = environmentName
            self.optionSettings = optionSettings
            self.platformArn = platformArn
            self.solutionStackName = solutionStackName
            self.templateName = templateName
        }
    }

}

extension CreateApplicationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let resourceLifecycleConfig = resourceLifecycleConfig {
            try container.encode(resourceLifecycleConfig, forKey: ClientRuntime.Key("ResourceLifecycleConfig"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to create an application.
public struct CreateApplicationInput: Swift.Equatable {
    /// The name of the application. Must be unique within your account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Your description of the application.
    public var description: Swift.String?
    /// Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions.
    public var resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?
    /// Specifies the tags applied to the application. Elastic Beanstalk applies these tags only to the application. Environments that you create in the application don't inherit the tags.
    public var tags: [ElasticBeanstalkClientTypes.Tag]?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig? = nil,
        tags: [ElasticBeanstalkClientTypes.Tag]? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.resourceLifecycleConfig = resourceLifecycleConfig
        self.tags = tags
    }
}

struct CreateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let description: Swift.String?
    let resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?
    let tags: [ElasticBeanstalkClientTypes.Tag]?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
        case resourceLifecycleConfig = "ResourceLifecycleConfig"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let resourceLifecycleConfigDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig.self, forKey: .resourceLifecycleConfig)
        resourceLifecycleConfig = resourceLifecycleConfigDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TooManyApplicationsException" : self = .tooManyApplicationsException(try TooManyApplicationsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateApplicationOutputError: Swift.Error, Swift.Equatable {
    case tooManyApplicationsException(TooManyApplicationsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateApplicationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.application = output.application
        } else {
            self.application = nil
        }
    }
}

/// Result message containing a single description of an application.
public struct CreateApplicationOutputResponse: Swift.Equatable {
    /// The [ApplicationDescription] of the application.
    public var application: ElasticBeanstalkClientTypes.ApplicationDescription?

    public init (
        application: ElasticBeanstalkClientTypes.ApplicationDescription? = nil
    )
    {
        self.application = application
    }
}

struct CreateApplicationOutputResponseBody: Swift.Equatable {
    let application: ElasticBeanstalkClientTypes.ApplicationDescription?
}

extension CreateApplicationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case application = "Application"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateApplicationResult"))
        let applicationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationDescription.self, forKey: .application)
        application = applicationDecoded
    }
}

extension CreateApplicationVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let autoCreateApplication = autoCreateApplication {
            try container.encode(autoCreateApplication, forKey: ClientRuntime.Key("AutoCreateApplication"))
        }
        if let buildConfiguration = buildConfiguration {
            try container.encode(buildConfiguration, forKey: ClientRuntime.Key("BuildConfiguration"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let process = process {
            try container.encode(process, forKey: ClientRuntime.Key("Process"))
        }
        if let sourceBuildInformation = sourceBuildInformation {
            try container.encode(sourceBuildInformation, forKey: ClientRuntime.Key("SourceBuildInformation"))
        }
        if let sourceBundle = sourceBundle {
            try container.encode(sourceBundle, forKey: ClientRuntime.Key("SourceBundle"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("CreateApplicationVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateApplicationVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateApplicationVersionInput: Swift.Equatable {
    /// The name of the application. If no application is found with this name, and AutoCreateApplication is false, returns an InvalidParameterValue error.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Set to true to create an application with the specified name if it doesn't already exist.
    public var autoCreateApplication: Swift.Bool?
    /// Settings for an AWS CodeBuild build.
    public var buildConfiguration: ElasticBeanstalkClientTypes.BuildConfiguration?
    /// A description of this application version.
    public var description: Swift.String?
    /// Pre-processes and validates the environment manifest (env.yaml) and configuration files (*.config files in the .ebextensions folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment. You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional. The Process option validates Elastic Beanstalk configuration files. It doesn't validate your application's configuration files, like proxy server or Docker configuration.
    public var process: Swift.Bool?
    /// Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version.
    public var sourceBuildInformation: ElasticBeanstalkClientTypes.SourceBuildInformation?
    /// The Amazon S3 bucket and key that identify the location of the source bundle for this version. The Amazon S3 bucket must be in the same region as the environment. Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with SourceBuildInformation), but not both. If neither SourceBundle nor SourceBuildInformation are provided, Elastic Beanstalk uses a sample application.
    public var sourceBundle: ElasticBeanstalkClientTypes.S3Location?
    /// Specifies the tags applied to the application version. Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don't inherit the tags.
    public var tags: [ElasticBeanstalkClientTypes.Tag]?
    /// A label identifying this version. Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an InvalidParameterValue error.
    /// This member is required.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        autoCreateApplication: Swift.Bool? = nil,
        buildConfiguration: ElasticBeanstalkClientTypes.BuildConfiguration? = nil,
        description: Swift.String? = nil,
        process: Swift.Bool? = nil,
        sourceBuildInformation: ElasticBeanstalkClientTypes.SourceBuildInformation? = nil,
        sourceBundle: ElasticBeanstalkClientTypes.S3Location? = nil,
        tags: [ElasticBeanstalkClientTypes.Tag]? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.autoCreateApplication = autoCreateApplication
        self.buildConfiguration = buildConfiguration
        self.description = description
        self.process = process
        self.sourceBuildInformation = sourceBuildInformation
        self.sourceBundle = sourceBundle
        self.tags = tags
        self.versionLabel = versionLabel
    }
}

struct CreateApplicationVersionInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let description: Swift.String?
    let sourceBuildInformation: ElasticBeanstalkClientTypes.SourceBuildInformation?
    let sourceBundle: ElasticBeanstalkClientTypes.S3Location?
    let buildConfiguration: ElasticBeanstalkClientTypes.BuildConfiguration?
    let autoCreateApplication: Swift.Bool?
    let process: Swift.Bool?
    let tags: [ElasticBeanstalkClientTypes.Tag]?
}

extension CreateApplicationVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case autoCreateApplication = "AutoCreateApplication"
        case buildConfiguration = "BuildConfiguration"
        case description = "Description"
        case process = "Process"
        case sourceBuildInformation = "SourceBuildInformation"
        case sourceBundle = "SourceBundle"
        case tags = "Tags"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceBuildInformationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceBuildInformation.self, forKey: .sourceBuildInformation)
        sourceBuildInformation = sourceBuildInformationDecoded
        let sourceBundleDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.S3Location.self, forKey: .sourceBundle)
        sourceBundle = sourceBundleDecoded
        let buildConfigurationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.BuildConfiguration.self, forKey: .buildConfiguration)
        buildConfiguration = buildConfigurationDecoded
        let autoCreateApplicationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoCreateApplication)
        autoCreateApplication = autoCreateApplicationDecoded
        let processDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .process)
        process = processDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateApplicationVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateApplicationVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeBuildNotInServiceRegionException" : self = .codeBuildNotInServiceRegionException(try CodeBuildNotInServiceRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "S3LocationNotInServiceRegionException" : self = .s3LocationNotInServiceRegionException(try S3LocationNotInServiceRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyApplicationsException" : self = .tooManyApplicationsException(try TooManyApplicationsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyApplicationVersionsException" : self = .tooManyApplicationVersionsException(try TooManyApplicationVersionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateApplicationVersionOutputError: Swift.Error, Swift.Equatable {
    case codeBuildNotInServiceRegionException(CodeBuildNotInServiceRegionException)
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case s3LocationNotInServiceRegionException(S3LocationNotInServiceRegionException)
    case tooManyApplicationsException(TooManyApplicationsException)
    case tooManyApplicationVersionsException(TooManyApplicationVersionsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateApplicationVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateApplicationVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationVersion = output.applicationVersion
        } else {
            self.applicationVersion = nil
        }
    }
}

/// Result message wrapping a single description of an application version.
public struct CreateApplicationVersionOutputResponse: Swift.Equatable {
    /// The [ApplicationVersionDescription] of the application version.
    public var applicationVersion: ElasticBeanstalkClientTypes.ApplicationVersionDescription?

    public init (
        applicationVersion: ElasticBeanstalkClientTypes.ApplicationVersionDescription? = nil
    )
    {
        self.applicationVersion = applicationVersion
    }
}

struct CreateApplicationVersionOutputResponseBody: Swift.Equatable {
    let applicationVersion: ElasticBeanstalkClientTypes.ApplicationVersionDescription?
}

extension CreateApplicationVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationVersion = "ApplicationVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateApplicationVersionResult"))
        let applicationVersionDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationVersionDescription.self, forKey: .applicationVersion)
        applicationVersion = applicationVersionDecoded
    }
}

extension CreateConfigurationTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let sourceConfiguration = sourceConfiguration {
            try container.encode(sourceConfiguration, forKey: ClientRuntime.Key("SourceConfiguration"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("CreateConfigurationTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to create a configuration template.
public struct CreateConfigurationTemplateInput: Swift.Equatable {
    /// The name of the Elastic Beanstalk application to associate with this configuration template.
    /// This member is required.
    public var applicationName: Swift.String?
    /// An optional description for this configuration.
    public var description: Swift.String?
    /// The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don't specify PlatformArn, SolutionStackName, or SourceConfiguration.
    public var environmentId: Swift.String?
    /// Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// The Amazon Resource Name (ARN) of the custom platform. For more information, see [ Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. If you specify PlatformArn, then don't specify SolutionStackName.
    public var platformArn: Swift.String?
    /// The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide. You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration. Use the [ListAvailableSolutionStacks](https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html) API to obtain a list of available solution stacks.
    public var solutionStackName: Swift.String?
    /// An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration. Values specified in OptionSettings override any values obtained from the SourceConfiguration. You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName. Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.
    public var sourceConfiguration: ElasticBeanstalkClientTypes.SourceConfiguration?
    /// Specifies the tags applied to the configuration template.
    public var tags: [ElasticBeanstalkClientTypes.Tag]?
    /// The name of the configuration template. Constraint: This name must be unique per application.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        sourceConfiguration: ElasticBeanstalkClientTypes.SourceConfiguration? = nil,
        tags: [ElasticBeanstalkClientTypes.Tag]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.environmentId = environmentId
        self.optionSettings = optionSettings
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.sourceConfiguration = sourceConfiguration
        self.tags = tags
        self.templateName = templateName
    }
}

struct CreateConfigurationTemplateInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let sourceConfiguration: ElasticBeanstalkClientTypes.SourceConfiguration?
    let environmentId: Swift.String?
    let description: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    let tags: [ElasticBeanstalkClientTypes.Tag]?
}

extension CreateConfigurationTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
        case environmentId = "EnvironmentId"
        case optionSettings = "OptionSettings"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case sourceConfiguration = "SourceConfiguration"
        case tags = "Tags"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let sourceConfigurationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceConfiguration.self, forKey: .sourceConfiguration)
        sourceConfiguration = sourceConfigurationDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateConfigurationTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyConfigurationTemplatesException" : self = .tooManyConfigurationTemplatesException(try TooManyConfigurationTemplatesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationTemplateOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyBucketsException(TooManyBucketsException)
    case tooManyConfigurationTemplatesException(TooManyConfigurationTemplatesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateConfigurationTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationName = output.applicationName
            self.dateCreated = output.dateCreated
            self.dateUpdated = output.dateUpdated
            self.deploymentStatus = output.deploymentStatus
            self.description = output.description
            self.environmentName = output.environmentName
            self.optionSettings = output.optionSettings
            self.platformArn = output.platformArn
            self.solutionStackName = output.solutionStackName
            self.templateName = output.templateName
        } else {
            self.applicationName = nil
            self.dateCreated = nil
            self.dateUpdated = nil
            self.deploymentStatus = nil
            self.description = nil
            self.environmentName = nil
            self.optionSettings = nil
            self.platformArn = nil
            self.solutionStackName = nil
            self.templateName = nil
        }
    }
}

/// Describes the settings for a configuration set.
public struct CreateConfigurationTemplateOutputResponse: Swift.Equatable {
    /// The name of the application associated with this configuration set.
    public var applicationName: Swift.String?
    /// The date (in UTC time) when this configuration set was created.
    public var dateCreated: ClientRuntime.Date?
    /// The date (in UTC time) when this configuration set was last modified.
    public var dateUpdated: ClientRuntime.Date?
    /// If this configuration set is associated with an environment, the DeploymentStatus parameter indicates the deployment status of this configuration set:
    ///
    /// * null: This configuration is not associated with a running environment.
    ///
    /// * pending: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.
    ///
    /// * deployed: This is the configuration that is currently deployed to the associated running environment.
    ///
    /// * failed: This is a draft configuration that failed to successfully deploy.
    public var deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus?
    /// Describes this configuration set.
    public var description: Swift.String?
    /// If not null, the name of the environment for this configuration set.
    public var environmentName: Swift.String?
    /// A list of the configuration options and their values in this configuration set.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// The ARN of the platform version.
    public var platformArn: Swift.String?
    /// The name of the solution stack this configuration set uses.
    public var solutionStackName: Swift.String?
    /// If not null, the name of the configuration template for this configuration set.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        dateCreated: ClientRuntime.Date? = nil,
        dateUpdated: ClientRuntime.Date? = nil,
        deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus? = nil,
        description: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.deploymentStatus = deploymentStatus
        self.description = description
        self.environmentName = environmentName
        self.optionSettings = optionSettings
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.templateName = templateName
    }
}

struct CreateConfigurationTemplateOutputResponseBody: Swift.Equatable {
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let environmentName: Swift.String?
    let deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus?
    let dateCreated: ClientRuntime.Date?
    let dateUpdated: ClientRuntime.Date?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
}

extension CreateConfigurationTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case deploymentStatus = "DeploymentStatus"
        case description = "Description"
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateConfigurationTemplateResult"))
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
    }
}

extension CreateEnvironmentInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let cnamePrefix = cnamePrefix {
            try container.encode(cnamePrefix, forKey: ClientRuntime.Key("CNAMEPrefix"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let operationsRole = operationsRole {
            try container.encode(operationsRole, forKey: ClientRuntime.Key("OperationsRole"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionsToRemove = optionsToRemove {
            if !optionsToRemove.isEmpty {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                for (index0, optionspecification0) in optionsToRemove.enumerated() {
                    try optionsToRemoveContainer.encode(optionspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                try optionsToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: ClientRuntime.Key("Tier"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("CreateEnvironment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateEnvironmentInput: Swift.Equatable {
    /// The name of the application that is associated with this environment.
    /// This member is required.
    public var applicationName: Swift.String?
    /// If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
    public var cnamePrefix: Swift.String?
    /// Your description for this environment.
    public var description: Swift.String?
    /// A unique name for the environment. Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It can't start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an InvalidParameterValue error. If you don't specify the CNAMEPrefix parameter, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.
    public var environmentName: Swift.String?
    /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name parameter. See [Environment Manifest (env.yaml)](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html) for details.
    public var groupName: Swift.String?
    /// The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream services during this call and during subsequent calls acting on this environment. To specify an operations role, you must have the iam:PassRole permission for the role. For more information, see [Operations roles](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html) in the AWS Elastic Beanstalk Developer Guide.
    public var operationsRole: Swift.String?
    /// If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// A list of custom user-defined configuration options to remove from the configuration set for this new environment.
    public var optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
    /// The Amazon Resource Name (ARN) of the custom platform to use with the environment. For more information, see [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. If you specify PlatformArn, don't specify SolutionStackName.
    public var platformArn: Swift.String?
    /// The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If specified, Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see [Elastic Beanstalk Supported Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html) in the AWS Elastic Beanstalk Platforms guide. If you specify SolutionStackName, don't specify PlatformArn or TemplateName.
    public var solutionStackName: Swift.String?
    /// Specifies the tags applied to resources in the environment.
    public var tags: [ElasticBeanstalkClientTypes.Tag]?
    /// The name of the Elastic Beanstalk configuration template to use with the environment. If you specify TemplateName, then don't specify SolutionStackName.
    public var templateName: Swift.String?
    /// Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
    public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    /// The name of the application version to deploy. Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        cnamePrefix: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        groupName: Swift.String? = nil,
        operationsRole: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        tags: [ElasticBeanstalkClientTypes.Tag]? = nil,
        templateName: Swift.String? = nil,
        tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.cnamePrefix = cnamePrefix
        self.description = description
        self.environmentName = environmentName
        self.groupName = groupName
        self.operationsRole = operationsRole
        self.optionSettings = optionSettings
        self.optionsToRemove = optionsToRemove
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.tags = tags
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}

struct CreateEnvironmentInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let environmentName: Swift.String?
    let groupName: Swift.String?
    let description: Swift.String?
    let cnamePrefix: Swift.String?
    let tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    let tags: [ElasticBeanstalkClientTypes.Tag]?
    let versionLabel: Swift.String?
    let templateName: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    let optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
    let operationsRole: Swift.String?
}

extension CreateEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case cnamePrefix = "CNAMEPrefix"
        case description = "Description"
        case environmentName = "EnvironmentName"
        case groupName = "GroupName"
        case operationsRole = "OperationsRole"
        case optionSettings = "OptionSettings"
        case optionsToRemove = "OptionsToRemove"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case tags = "Tags"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let cnamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cnamePrefix)
        cnamePrefix = cnamePrefixDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.optionsToRemove) {
            struct KeyVal0{struct member{}}
            let optionsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionsToRemove)
            if let optionsToRemoveWrappedContainer = optionsToRemoveWrappedContainer {
                let optionsToRemoveContainer = try optionsToRemoveWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.OptionSpecification].self, forKey: .member)
                var optionsToRemoveBuffer:[ElasticBeanstalkClientTypes.OptionSpecification]? = nil
                if let optionsToRemoveContainer = optionsToRemoveContainer {
                    optionsToRemoveBuffer = [ElasticBeanstalkClientTypes.OptionSpecification]()
                    for structureContainer0 in optionsToRemoveContainer {
                        optionsToRemoveBuffer?.append(structureContainer0)
                    }
                }
                optionsToRemove = optionsToRemoveBuffer
            } else {
                optionsToRemove = []
            }
        } else {
            optionsToRemove = nil
        }
        let operationsRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}

extension CreateEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyEnvironmentsException" : self = .tooManyEnvironmentsException(try TooManyEnvironmentsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyEnvironmentsException(TooManyEnvironmentsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortableOperationInProgress = output.abortableOperationInProgress
            self.applicationName = output.applicationName
            self.cname = output.cname
            self.dateCreated = output.dateCreated
            self.dateUpdated = output.dateUpdated
            self.description = output.description
            self.endpointURL = output.endpointURL
            self.environmentArn = output.environmentArn
            self.environmentId = output.environmentId
            self.environmentLinks = output.environmentLinks
            self.environmentName = output.environmentName
            self.health = output.health
            self.healthStatus = output.healthStatus
            self.operationsRole = output.operationsRole
            self.platformArn = output.platformArn
            self.resources = output.resources
            self.solutionStackName = output.solutionStackName
            self.status = output.status
            self.templateName = output.templateName
            self.tier = output.tier
            self.versionLabel = output.versionLabel
        } else {
            self.abortableOperationInProgress = nil
            self.applicationName = nil
            self.cname = nil
            self.dateCreated = nil
            self.dateUpdated = nil
            self.description = nil
            self.endpointURL = nil
            self.environmentArn = nil
            self.environmentId = nil
            self.environmentLinks = nil
            self.environmentName = nil
            self.health = nil
            self.healthStatus = nil
            self.operationsRole = nil
            self.platformArn = nil
            self.resources = nil
            self.solutionStackName = nil
            self.status = nil
            self.templateName = nil
            self.tier = nil
            self.versionLabel = nil
        }
    }
}

/// Describes the properties of an environment.
public struct CreateEnvironmentOutputResponse: Swift.Equatable {
    /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel. true: There is an update in progress. false: There are no updates currently in progress.
    public var abortableOperationInProgress: Swift.Bool?
    /// The name of the application associated with this environment.
    public var applicationName: Swift.String?
    /// The URL to the CNAME for this environment.
    public var cname: Swift.String?
    /// The creation date for this environment.
    public var dateCreated: ClientRuntime.Date?
    /// The last modified date for this environment.
    public var dateUpdated: ClientRuntime.Date?
    /// Describes this environment.
    public var description: Swift.String?
    /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
    public var endpointURL: Swift.String?
    /// The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.
    public var environmentArn: Swift.String?
    /// The ID of this environment.
    public var environmentId: Swift.String?
    /// A list of links to other environments in the same group.
    public var environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
    /// The name of this environment.
    public var environmentName: Swift.String?
    /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:
    ///
    /// * Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.
    ///
    /// * Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.
    ///
    /// * Green: Indicates the environment is healthy and fully functional.
    ///
    /// * Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironment request.
    ///
    ///
    /// Default: Grey
    public var health: ElasticBeanstalkClientTypes.EnvironmentHealth?
    /// Returns the health status of the application running in your environment. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
    public var healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
    /// The Amazon Resource Name (ARN) of the environment's operations role. For more information, see [Operations roles](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html) in the AWS Elastic Beanstalk Developer Guide.
    public var operationsRole: Swift.String?
    /// The ARN of the platform version.
    public var platformArn: Swift.String?
    /// The description of the AWS resources used by this environment.
    public var resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
    /// The name of the SolutionStack deployed with this environment.
    public var solutionStackName: Swift.String?
    /// The current operational status of the environment:
    ///
    /// * Launching: Environment is in the process of initial deployment.
    ///
    /// * Updating: Environment is in the process of updating its configuration settings or application version.
    ///
    /// * Ready: Environment is available to have an action performed on it, such as update or terminate.
    ///
    /// * Terminating: Environment is in the shut-down process.
    ///
    /// * Terminated: Environment is not running.
    public var status: ElasticBeanstalkClientTypes.EnvironmentStatus?
    /// The name of the configuration template used to originally launch this environment.
    public var templateName: Swift.String?
    /// Describes the current tier of this environment.
    public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    /// The application version deployed in this environment.
    public var versionLabel: Swift.String?

    public init (
        abortableOperationInProgress: Swift.Bool? = nil,
        applicationName: Swift.String? = nil,
        cname: Swift.String? = nil,
        dateCreated: ClientRuntime.Date? = nil,
        dateUpdated: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        endpointURL: Swift.String? = nil,
        environmentArn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]? = nil,
        environmentName: Swift.String? = nil,
        health: ElasticBeanstalkClientTypes.EnvironmentHealth? = nil,
        healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus? = nil,
        operationsRole: Swift.String? = nil,
        platformArn: Swift.String? = nil,
        resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription? = nil,
        solutionStackName: Swift.String? = nil,
        status: ElasticBeanstalkClientTypes.EnvironmentStatus? = nil,
        templateName: Swift.String? = nil,
        tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.abortableOperationInProgress = abortableOperationInProgress
        self.applicationName = applicationName
        self.cname = cname
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.description = description
        self.endpointURL = endpointURL
        self.environmentArn = environmentArn
        self.environmentId = environmentId
        self.environmentLinks = environmentLinks
        self.environmentName = environmentName
        self.health = health
        self.healthStatus = healthStatus
        self.operationsRole = operationsRole
        self.platformArn = platformArn
        self.resources = resources
        self.solutionStackName = solutionStackName
        self.status = status
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}

struct CreateEnvironmentOutputResponseBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let endpointURL: Swift.String?
    let cname: Swift.String?
    let dateCreated: ClientRuntime.Date?
    let dateUpdated: ClientRuntime.Date?
    let status: ElasticBeanstalkClientTypes.EnvironmentStatus?
    let abortableOperationInProgress: Swift.Bool?
    let health: ElasticBeanstalkClientTypes.EnvironmentHealth?
    let healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
    let resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
    let tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    let environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
    let environmentArn: Swift.String?
    let operationsRole: Swift.String?
}

extension CreateEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortableOperationInProgress = "AbortableOperationInProgress"
        case applicationName = "ApplicationName"
        case cname = "CNAME"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointURL = "EndpointURL"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case health = "Health"
        case healthStatus = "HealthStatus"
        case operationsRole = "OperationsRole"
        case platformArn = "PlatformArn"
        case resources = "Resources"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateEnvironmentResult"))
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointURL)
        endpointURL = endpointURLDecoded
        let cnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cname)
        cname = cnameDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let abortableOperationInProgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .abortableOperationInProgress)
        abortableOperationInProgress = abortableOperationInProgressDecoded
        let healthDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealth.self, forKey: .health)
        health = healthDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentResourcesDescription.self, forKey: .resources)
        resources = resourcesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.environmentLinks) {
            struct KeyVal0{struct member{}}
            let environmentLinksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentLinks)
            if let environmentLinksWrappedContainer = environmentLinksWrappedContainer {
                let environmentLinksContainer = try environmentLinksWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentLink].self, forKey: .member)
                var environmentLinksBuffer:[ElasticBeanstalkClientTypes.EnvironmentLink]? = nil
                if let environmentLinksContainer = environmentLinksContainer {
                    environmentLinksBuffer = [ElasticBeanstalkClientTypes.EnvironmentLink]()
                    for structureContainer0 in environmentLinksContainer {
                        environmentLinksBuffer?.append(structureContainer0)
                    }
                }
                environmentLinks = environmentLinksBuffer
            } else {
                environmentLinks = []
            }
        } else {
            environmentLinks = nil
        }
        let environmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}

extension CreatePlatformVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let platformDefinitionBundle = platformDefinitionBundle {
            try container.encode(platformDefinitionBundle, forKey: ClientRuntime.Key("PlatformDefinitionBundle"))
        }
        if let platformName = platformName {
            try container.encode(platformName, forKey: ClientRuntime.Key("PlatformName"))
        }
        if let platformVersion = platformVersion {
            try container.encode(platformVersion, forKey: ClientRuntime.Key("PlatformVersion"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreatePlatformVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreatePlatformVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to create a new platform version.
public struct CreatePlatformVersionInput: Swift.Equatable {
    /// The name of the builder environment.
    public var environmentName: Swift.String?
    /// The configuration option settings to apply to the builder environment.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// The location of the platform definition archive in Amazon S3.
    /// This member is required.
    public var platformDefinitionBundle: ElasticBeanstalkClientTypes.S3Location?
    /// The name of your custom platform.
    /// This member is required.
    public var platformName: Swift.String?
    /// The number, such as 1.0.2, for the new platform version.
    /// This member is required.
    public var platformVersion: Swift.String?
    /// Specifies the tags applied to the new platform version. Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don't inherit the tags.
    public var tags: [ElasticBeanstalkClientTypes.Tag]?

    public init (
        environmentName: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        platformDefinitionBundle: ElasticBeanstalkClientTypes.S3Location? = nil,
        platformName: Swift.String? = nil,
        platformVersion: Swift.String? = nil,
        tags: [ElasticBeanstalkClientTypes.Tag]? = nil
    )
    {
        self.environmentName = environmentName
        self.optionSettings = optionSettings
        self.platformDefinitionBundle = platformDefinitionBundle
        self.platformName = platformName
        self.platformVersion = platformVersion
        self.tags = tags
    }
}

struct CreatePlatformVersionInputBody: Swift.Equatable {
    let platformName: Swift.String?
    let platformVersion: Swift.String?
    let platformDefinitionBundle: ElasticBeanstalkClientTypes.S3Location?
    let environmentName: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    let tags: [ElasticBeanstalkClientTypes.Tag]?
}

extension CreatePlatformVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case platformDefinitionBundle = "PlatformDefinitionBundle"
        case platformName = "PlatformName"
        case platformVersion = "PlatformVersion"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformName)
        platformName = platformNameDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let platformDefinitionBundleDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.S3Location.self, forKey: .platformDefinitionBundle)
        platformDefinitionBundle = platformDefinitionBundleDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreatePlatformVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreatePlatformVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyPlatformsException" : self = .tooManyPlatformsException(try TooManyPlatformsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePlatformVersionOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyPlatformsException(TooManyPlatformsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePlatformVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePlatformVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.builder = output.builder
            self.platformSummary = output.platformSummary
        } else {
            self.builder = nil
            self.platformSummary = nil
        }
    }
}

public struct CreatePlatformVersionOutputResponse: Swift.Equatable {
    /// The builder used to create the custom platform.
    public var builder: ElasticBeanstalkClientTypes.Builder?
    /// Detailed information about the new version of the custom platform.
    public var platformSummary: ElasticBeanstalkClientTypes.PlatformSummary?

    public init (
        builder: ElasticBeanstalkClientTypes.Builder? = nil,
        platformSummary: ElasticBeanstalkClientTypes.PlatformSummary? = nil
    )
    {
        self.builder = builder
        self.platformSummary = platformSummary
    }
}

struct CreatePlatformVersionOutputResponseBody: Swift.Equatable {
    let platformSummary: ElasticBeanstalkClientTypes.PlatformSummary?
    let builder: ElasticBeanstalkClientTypes.Builder?
}

extension CreatePlatformVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case builder = "Builder"
        case platformSummary = "PlatformSummary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreatePlatformVersionResult"))
        let platformSummaryDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.PlatformSummary.self, forKey: .platformSummary)
        platformSummary = platformSummaryDecoded
        let builderDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.Builder.self, forKey: .builder)
        builder = builderDecoded
    }
}

extension CreateStorageLocationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("CreateStorageLocation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStorageLocationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStorageLocationInput: Swift.Equatable {

    public init () { }
}

extension CreateStorageLocationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStorageLocationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "S3SubscriptionRequiredException" : self = .s3SubscriptionRequiredException(try S3SubscriptionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStorageLocationOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case s3SubscriptionRequiredException(S3SubscriptionRequiredException)
    case tooManyBucketsException(TooManyBucketsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStorageLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStorageLocationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.s3Bucket = output.s3Bucket
        } else {
            self.s3Bucket = nil
        }
    }
}

/// Results of a [CreateStorageLocationResult] call.
public struct CreateStorageLocationOutputResponse: Swift.Equatable {
    /// The name of the Amazon S3 bucket created.
    public var s3Bucket: Swift.String?

    public init (
        s3Bucket: Swift.String? = nil
    )
    {
        self.s3Bucket = s3Bucket
    }
}

struct CreateStorageLocationOutputResponseBody: Swift.Equatable {
    let s3Bucket: Swift.String?
}

extension CreateStorageLocationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStorageLocationResult"))
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
    }
}

extension ElasticBeanstalkClientTypes.CustomAmi: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageId = "ImageId"
        case virtualizationType = "VirtualizationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let virtualizationType = virtualizationType {
            try container.encode(virtualizationType, forKey: ClientRuntime.Key("VirtualizationType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualizationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualizationType)
        virtualizationType = virtualizationTypeDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A custom AMI available to platforms.
    public struct CustomAmi: Swift.Equatable {
        /// THe ID of the image used to create the custom AMI.
        public var imageId: Swift.String?
        /// The type of virtualization used to create the custom AMI.
        public var virtualizationType: Swift.String?

        public init (
            imageId: Swift.String? = nil,
            virtualizationType: Swift.String? = nil
        )
        {
            self.imageId = imageId
            self.virtualizationType = virtualizationType
        }
    }

}

extension DeleteApplicationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let terminateEnvByForce = terminateEnvByForce {
            try container.encode(terminateEnvByForce, forKey: ClientRuntime.Key("TerminateEnvByForce"))
        }
        try container.encode("DeleteApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to delete an application.
public struct DeleteApplicationInput: Swift.Equatable {
    /// The name of the application to delete.
    /// This member is required.
    public var applicationName: Swift.String?
    /// When set to true, running environments will be terminated before deleting the application.
    public var terminateEnvByForce: Swift.Bool?

    public init (
        applicationName: Swift.String? = nil,
        terminateEnvByForce: Swift.Bool? = nil
    )
    {
        self.applicationName = applicationName
        self.terminateEnvByForce = terminateEnvByForce
    }
}

struct DeleteApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let terminateEnvByForce: Swift.Bool?
}

extension DeleteApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case terminateEnvByForce = "TerminateEnvByForce"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let terminateEnvByForceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminateEnvByForce)
        terminateEnvByForce = terminateEnvByForceDecoded
    }
}

extension DeleteApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationInProgressFailure" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApplicationOutputError: Swift.Error, Swift.Equatable {
    case operationInProgressException(OperationInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteApplicationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteApplicationVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let deleteSourceBundle = deleteSourceBundle {
            try container.encode(deleteSourceBundle, forKey: ClientRuntime.Key("DeleteSourceBundle"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("DeleteApplicationVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteApplicationVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to delete an application version.
public struct DeleteApplicationVersionInput: Swift.Equatable {
    /// The name of the application to which the version belongs.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Set to true to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3.
    public var deleteSourceBundle: Swift.Bool?
    /// The label of the version to delete.
    /// This member is required.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        deleteSourceBundle: Swift.Bool? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deleteSourceBundle = deleteSourceBundle
        self.versionLabel = versionLabel
    }
}

struct DeleteApplicationVersionInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let deleteSourceBundle: Swift.Bool?
}

extension DeleteApplicationVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case deleteSourceBundle = "DeleteSourceBundle"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let deleteSourceBundleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteSourceBundle)
        deleteSourceBundle = deleteSourceBundleDecoded
    }
}

extension DeleteApplicationVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteApplicationVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressFailure" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "S3LocationNotInServiceRegionException" : self = .s3LocationNotInServiceRegionException(try S3LocationNotInServiceRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SourceBundleDeletionFailure" : self = .sourceBundleDeletionException(try SourceBundleDeletionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApplicationVersionOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case operationInProgressException(OperationInProgressException)
    case s3LocationNotInServiceRegionException(S3LocationNotInServiceRegionException)
    case sourceBundleDeletionException(SourceBundleDeletionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApplicationVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteApplicationVersionOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfigurationTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteConfigurationTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to delete a configuration template.
public struct DeleteConfigurationTemplateInput: Swift.Equatable {
    /// The name of the application to delete the configuration template from.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of the configuration template to delete.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.templateName = templateName
    }
}

struct DeleteConfigurationTemplateInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
}

extension DeleteConfigurationTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension DeleteConfigurationTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationInProgressFailure" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationTemplateOutputError: Swift.Error, Swift.Equatable {
    case operationInProgressException(OperationInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConfigurationTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEnvironmentConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("DeleteEnvironmentConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteEnvironmentConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to delete a draft environment configuration.
public struct DeleteEnvironmentConfigurationInput: Swift.Equatable {
    /// The name of the application the environment is associated with.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of the environment to delete the draft configuration from.
    /// This member is required.
    public var environmentName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.environmentName = environmentName
    }
}

struct DeleteEnvironmentConfigurationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let environmentName: Swift.String?
}

extension DeleteEnvironmentConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension DeleteEnvironmentConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteEnvironmentConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEnvironmentConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEnvironmentConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteEnvironmentConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePlatformVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        try container.encode("DeletePlatformVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeletePlatformVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePlatformVersionInput: Swift.Equatable {
    /// The ARN of the version of the custom platform.
    public var platformArn: Swift.String?

    public init (
        platformArn: Swift.String? = nil
    )
    {
        self.platformArn = platformArn
    }
}

struct DeletePlatformVersionInputBody: Swift.Equatable {
    let platformArn: Swift.String?
}

extension DeletePlatformVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platformArn = "PlatformArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
    }
}

extension DeletePlatformVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePlatformVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressFailure" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PlatformVersionStillReferencedException" : self = .platformVersionStillReferencedException(try PlatformVersionStillReferencedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePlatformVersionOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case operationInProgressException(OperationInProgressException)
    case platformVersionStillReferencedException(PlatformVersionStillReferencedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePlatformVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeletePlatformVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.platformSummary = output.platformSummary
        } else {
            self.platformSummary = nil
        }
    }
}

public struct DeletePlatformVersionOutputResponse: Swift.Equatable {
    /// Detailed information about the version of the custom platform.
    public var platformSummary: ElasticBeanstalkClientTypes.PlatformSummary?

    public init (
        platformSummary: ElasticBeanstalkClientTypes.PlatformSummary? = nil
    )
    {
        self.platformSummary = platformSummary
    }
}

struct DeletePlatformVersionOutputResponseBody: Swift.Equatable {
    let platformSummary: ElasticBeanstalkClientTypes.PlatformSummary?
}

extension DeletePlatformVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platformSummary = "PlatformSummary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeletePlatformVersionResult"))
        let platformSummaryDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.PlatformSummary.self, forKey: .platformSummary)
        platformSummary = platformSummaryDecoded
    }
}

extension ElasticBeanstalkClientTypes.Deployment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId = "DeploymentId"
        case deploymentTime = "DeploymentTime"
        case status = "Status"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deploymentId = deploymentId {
            try container.encode(deploymentId, forKey: ClientRuntime.Key("DeploymentId"))
        }
        if let deploymentTime = deploymentTime {
            try container.encodeTimestamp(deploymentTime, format: .dateTime, forKey: ClientRuntime.Key("deploymentTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let deploymentTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deploymentTime)
        deploymentTime = deploymentTimeDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Information about an application version deployment.
    public struct Deployment: Swift.Equatable {
        /// The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.
        public var deploymentId: Swift.Int?
        /// For in-progress deployments, the time that the deployment started. For completed deployments, the time that the deployment ended.
        public var deploymentTime: ClientRuntime.Date?
        /// The status of the deployment:
        ///
        /// * In Progress : The deployment is in progress.
        ///
        /// * Deployed : The deployment succeeded.
        ///
        /// * Failed : The deployment failed.
        public var status: Swift.String?
        /// The version label of the application version in the deployment.
        public var versionLabel: Swift.String?

        public init (
            deploymentId: Swift.Int? = nil,
            deploymentTime: ClientRuntime.Date? = nil,
            status: Swift.String? = nil,
            versionLabel: Swift.String? = nil
        )
        {
            self.deploymentId = deploymentId
            self.deploymentTime = deploymentTime
            self.status = status
            self.versionLabel = versionLabel
        }
    }

}

extension DescribeAccountAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAccountAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAccountAttributesInput: Swift.Equatable {

    public init () { }
}

extension DescribeAccountAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAccountAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAccountAttributesOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAccountAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceQuotas = output.resourceQuotas
        } else {
            self.resourceQuotas = nil
        }
    }
}

public struct DescribeAccountAttributesOutputResponse: Swift.Equatable {
    /// The Elastic Beanstalk resource quotas associated with the calling AWS account.
    public var resourceQuotas: ElasticBeanstalkClientTypes.ResourceQuotas?

    public init (
        resourceQuotas: ElasticBeanstalkClientTypes.ResourceQuotas? = nil
    )
    {
        self.resourceQuotas = resourceQuotas
    }
}

struct DescribeAccountAttributesOutputResponseBody: Swift.Equatable {
    let resourceQuotas: ElasticBeanstalkClientTypes.ResourceQuotas?
}

extension DescribeAccountAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceQuotas = "ResourceQuotas"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountAttributesResult"))
        let resourceQuotasDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ResourceQuotas.self, forKey: .resourceQuotas)
        resourceQuotas = resourceQuotasDecoded
    }
}

extension DescribeApplicationVersionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let versionLabels = versionLabels {
            if !versionLabels.isEmpty {
                var versionLabelsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VersionLabels"))
                for (index0, versionlabel0) in versionLabels.enumerated() {
                    try versionLabelsContainer.encode(versionlabel0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var versionLabelsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VersionLabels"))
                try versionLabelsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeApplicationVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeApplicationVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to describe application versions.
public struct DescribeApplicationVersionsInput: Swift.Equatable {
    /// Specify an application name to show only application versions for that application.
    public var applicationName: Swift.String?
    /// For a paginated request. Specify a maximum number of application versions to include in each response. If no MaxRecords is specified, all available application versions are retrieved in a single response.
    public var maxRecords: Swift.Int?
    /// For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request. If no NextToken is specified, the first page is retrieved.
    public var nextToken: Swift.String?
    /// Specify a version label to show a specific application version.
    public var versionLabels: [Swift.String]?

    public init (
        applicationName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        versionLabels: [Swift.String]? = nil
    )
    {
        self.applicationName = applicationName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.versionLabels = versionLabels
    }
}

struct DescribeApplicationVersionsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabels: [Swift.String]?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeApplicationVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case versionLabels = "VersionLabels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        if containerValues.contains(.versionLabels) {
            struct KeyVal0{struct member{}}
            let versionLabelsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .versionLabels)
            if let versionLabelsWrappedContainer = versionLabelsWrappedContainer {
                let versionLabelsContainer = try versionLabelsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var versionLabelsBuffer:[Swift.String]? = nil
                if let versionLabelsContainer = versionLabelsContainer {
                    versionLabelsBuffer = [Swift.String]()
                    for stringContainer0 in versionLabelsContainer {
                        versionLabelsBuffer?.append(stringContainer0)
                    }
                }
                versionLabels = versionLabelsBuffer
            } else {
                versionLabels = []
            }
        } else {
            versionLabels = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeApplicationVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeApplicationVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeApplicationVersionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeApplicationVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeApplicationVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationVersions = output.applicationVersions
            self.nextToken = output.nextToken
        } else {
            self.applicationVersions = nil
            self.nextToken = nil
        }
    }
}

/// Result message wrapping a list of application version descriptions.
public struct DescribeApplicationVersionsOutputResponse: Swift.Equatable {
    /// List of ApplicationVersionDescription objects sorted in order of creation.
    public var applicationVersions: [ElasticBeanstalkClientTypes.ApplicationVersionDescription]?
    /// In a paginated request, the token that you can pass in a subsequent request to get the next response page.
    public var nextToken: Swift.String?

    public init (
        applicationVersions: [ElasticBeanstalkClientTypes.ApplicationVersionDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationVersions = applicationVersions
        self.nextToken = nextToken
    }
}

struct DescribeApplicationVersionsOutputResponseBody: Swift.Equatable {
    let applicationVersions: [ElasticBeanstalkClientTypes.ApplicationVersionDescription]?
    let nextToken: Swift.String?
}

extension DescribeApplicationVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationVersions = "ApplicationVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeApplicationVersionsResult"))
        if containerValues.contains(.applicationVersions) {
            struct KeyVal0{struct member{}}
            let applicationVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .applicationVersions)
            if let applicationVersionsWrappedContainer = applicationVersionsWrappedContainer {
                let applicationVersionsContainer = try applicationVersionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ApplicationVersionDescription].self, forKey: .member)
                var applicationVersionsBuffer:[ElasticBeanstalkClientTypes.ApplicationVersionDescription]? = nil
                if let applicationVersionsContainer = applicationVersionsContainer {
                    applicationVersionsBuffer = [ElasticBeanstalkClientTypes.ApplicationVersionDescription]()
                    for structureContainer0 in applicationVersionsContainer {
                        applicationVersionsBuffer?.append(structureContainer0)
                    }
                }
                applicationVersions = applicationVersionsBuffer
            } else {
                applicationVersions = []
            }
        } else {
            applicationVersions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeApplicationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationNames = applicationNames {
            if !applicationNames.isEmpty {
                var applicationNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ApplicationNames"))
                for (index0, applicationname0) in applicationNames.enumerated() {
                    try applicationNamesContainer.encode(applicationname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var applicationNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ApplicationNames"))
                try applicationNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeApplications", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeApplicationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to describe one or more applications.
public struct DescribeApplicationsInput: Swift.Equatable {
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names.
    public var applicationNames: [Swift.String]?

    public init (
        applicationNames: [Swift.String]? = nil
    )
    {
        self.applicationNames = applicationNames
    }
}

struct DescribeApplicationsInputBody: Swift.Equatable {
    let applicationNames: [Swift.String]?
}

extension DescribeApplicationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationNames = "ApplicationNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.applicationNames) {
            struct KeyVal0{struct member{}}
            let applicationNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .applicationNames)
            if let applicationNamesWrappedContainer = applicationNamesWrappedContainer {
                let applicationNamesContainer = try applicationNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var applicationNamesBuffer:[Swift.String]? = nil
                if let applicationNamesContainer = applicationNamesContainer {
                    applicationNamesBuffer = [Swift.String]()
                    for stringContainer0 in applicationNamesContainer {
                        applicationNamesBuffer?.append(stringContainer0)
                    }
                }
                applicationNames = applicationNamesBuffer
            } else {
                applicationNames = []
            }
        } else {
            applicationNames = nil
        }
    }
}

extension DescribeApplicationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeApplicationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeApplicationsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeApplicationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeApplicationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applications = output.applications
        } else {
            self.applications = nil
        }
    }
}

/// Result message containing a list of application descriptions.
public struct DescribeApplicationsOutputResponse: Swift.Equatable {
    /// This parameter contains a list of [ApplicationDescription].
    public var applications: [ElasticBeanstalkClientTypes.ApplicationDescription]?

    public init (
        applications: [ElasticBeanstalkClientTypes.ApplicationDescription]? = nil
    )
    {
        self.applications = applications
    }
}

struct DescribeApplicationsOutputResponseBody: Swift.Equatable {
    let applications: [ElasticBeanstalkClientTypes.ApplicationDescription]?
}

extension DescribeApplicationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications = "Applications"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeApplicationsResult"))
        if containerValues.contains(.applications) {
            struct KeyVal0{struct member{}}
            let applicationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .applications)
            if let applicationsWrappedContainer = applicationsWrappedContainer {
                let applicationsContainer = try applicationsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ApplicationDescription].self, forKey: .member)
                var applicationsBuffer:[ElasticBeanstalkClientTypes.ApplicationDescription]? = nil
                if let applicationsContainer = applicationsContainer {
                    applicationsBuffer = [ElasticBeanstalkClientTypes.ApplicationDescription]()
                    for structureContainer0 in applicationsContainer {
                        applicationsBuffer?.append(structureContainer0)
                    }
                }
                applications = applicationsBuffer
            } else {
                applications = []
            }
        } else {
            applications = nil
        }
    }
}

extension DescribeConfigurationOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let options = options {
            if !options.isEmpty {
                var optionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Options"))
                for (index0, optionspecification0) in options.enumerated() {
                    try optionsContainer.encode(optionspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Options"))
                try optionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DescribeConfigurationOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeConfigurationOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Result message containing a list of application version descriptions.
public struct DescribeConfigurationOptionsInput: Swift.Equatable {
    /// The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment.
    public var applicationName: Swift.String?
    /// The name of the environment whose configuration options you want to describe.
    public var environmentName: Swift.String?
    /// If specified, restricts the descriptions to only the specified options.
    public var options: [ElasticBeanstalkClientTypes.OptionSpecification]?
    /// The ARN of the custom platform.
    public var platformArn: Swift.String?
    /// The name of the solution stack whose configuration options you want to describe.
    public var solutionStackName: Swift.String?
    /// The name of the configuration template whose configuration options you want to describe.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        options: [ElasticBeanstalkClientTypes.OptionSpecification]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.environmentName = environmentName
        self.options = options
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.templateName = templateName
    }
}

struct DescribeConfigurationOptionsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let environmentName: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let options: [ElasticBeanstalkClientTypes.OptionSpecification]?
}

extension DescribeConfigurationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
        case options = "Options"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.options) {
            struct KeyVal0{struct member{}}
            let optionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .options)
            if let optionsWrappedContainer = optionsWrappedContainer {
                let optionsContainer = try optionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.OptionSpecification].self, forKey: .member)
                var optionsBuffer:[ElasticBeanstalkClientTypes.OptionSpecification]? = nil
                if let optionsContainer = optionsContainer {
                    optionsBuffer = [ElasticBeanstalkClientTypes.OptionSpecification]()
                    for structureContainer0 in optionsContainer {
                        optionsBuffer?.append(structureContainer0)
                    }
                }
                options = optionsBuffer
            } else {
                options = []
            }
        } else {
            options = nil
        }
    }
}

extension DescribeConfigurationOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeConfigurationOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeConfigurationOptionsOutputError: Swift.Error, Swift.Equatable {
    case tooManyBucketsException(TooManyBucketsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeConfigurationOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.options = output.options
            self.platformArn = output.platformArn
            self.solutionStackName = output.solutionStackName
        } else {
            self.options = nil
            self.platformArn = nil
            self.solutionStackName = nil
        }
    }
}

/// Describes the settings for a specified configuration set.
public struct DescribeConfigurationOptionsOutputResponse: Swift.Equatable {
    /// A list of [ConfigurationOptionDescription].
    public var options: [ElasticBeanstalkClientTypes.ConfigurationOptionDescription]?
    /// The ARN of the platform version.
    public var platformArn: Swift.String?
    /// The name of the solution stack these configuration options belong to.
    public var solutionStackName: Swift.String?

    public init (
        options: [ElasticBeanstalkClientTypes.ConfigurationOptionDescription]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil
    )
    {
        self.options = options
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
    }
}

struct DescribeConfigurationOptionsOutputResponseBody: Swift.Equatable {
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let options: [ElasticBeanstalkClientTypes.ConfigurationOptionDescription]?
}

extension DescribeConfigurationOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeConfigurationOptionsResult"))
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.options) {
            struct KeyVal0{struct member{}}
            let optionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .options)
            if let optionsWrappedContainer = optionsWrappedContainer {
                let optionsContainer = try optionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionDescription].self, forKey: .member)
                var optionsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionDescription]? = nil
                if let optionsContainer = optionsContainer {
                    optionsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionDescription]()
                    for structureContainer0 in optionsContainer {
                        optionsBuffer?.append(structureContainer0)
                    }
                }
                options = optionsBuffer
            } else {
                options = []
            }
        } else {
            options = nil
        }
    }
}

extension DescribeConfigurationSettingsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DescribeConfigurationSettings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeConfigurationSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Result message containing all of the configuration settings for a specified solution stack or configuration template.
public struct DescribeConfigurationSettingsInput: Swift.Equatable {
    /// The application for the environment or configuration template.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of the environment to describe. Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?
    /// The name of the configuration template to describe. Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns a MissingRequiredParameter error.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.environmentName = environmentName
        self.templateName = templateName
    }
}

struct DescribeConfigurationSettingsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let environmentName: Swift.String?
}

extension DescribeConfigurationSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension DescribeConfigurationSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeConfigurationSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeConfigurationSettingsOutputError: Swift.Error, Swift.Equatable {
    case tooManyBucketsException(TooManyBucketsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeConfigurationSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSettings = output.configurationSettings
        } else {
            self.configurationSettings = nil
        }
    }
}

/// The results from a request to change the configuration settings of an environment.
public struct DescribeConfigurationSettingsOutputResponse: Swift.Equatable {
    /// A list of [ConfigurationSettingsDescription].
    public var configurationSettings: [ElasticBeanstalkClientTypes.ConfigurationSettingsDescription]?

    public init (
        configurationSettings: [ElasticBeanstalkClientTypes.ConfigurationSettingsDescription]? = nil
    )
    {
        self.configurationSettings = configurationSettings
    }
}

struct DescribeConfigurationSettingsOutputResponseBody: Swift.Equatable {
    let configurationSettings: [ElasticBeanstalkClientTypes.ConfigurationSettingsDescription]?
}

extension DescribeConfigurationSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSettings = "ConfigurationSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeConfigurationSettingsResult"))
        if containerValues.contains(.configurationSettings) {
            struct KeyVal0{struct member{}}
            let configurationSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .configurationSettings)
            if let configurationSettingsWrappedContainer = configurationSettingsWrappedContainer {
                let configurationSettingsContainer = try configurationSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationSettingsDescription].self, forKey: .member)
                var configurationSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationSettingsDescription]? = nil
                if let configurationSettingsContainer = configurationSettingsContainer {
                    configurationSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationSettingsDescription]()
                    for structureContainer0 in configurationSettingsContainer {
                        configurationSettingsBuffer?.append(structureContainer0)
                    }
                }
                configurationSettings = configurationSettingsBuffer
            } else {
                configurationSettings = []
            }
        } else {
            configurationSettings = nil
        }
    }
}

extension DescribeEnvironmentHealthInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                for (index0, environmenthealthattribute0) in attributeNames.enumerated() {
                    try attributeNamesContainer.encode(environmenthealthattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                try attributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("DescribeEnvironmentHealth", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEnvironmentHealthInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// See the example below to learn how to create a request body.
public struct DescribeEnvironmentHealthInput: Swift.Equatable {
    /// Specify the response elements to return. To retrieve all attributes, set to All. If no attribute names are specified, returns the name of the environment.
    public var attributeNames: [ElasticBeanstalkClientTypes.EnvironmentHealthAttribute]?
    /// Specify the environment by ID. You must specify either this or an EnvironmentName, or both.
    public var environmentId: Swift.String?
    /// Specify the environment by name. You must specify either this or an EnvironmentName, or both.
    public var environmentName: Swift.String?

    public init (
        attributeNames: [ElasticBeanstalkClientTypes.EnvironmentHealthAttribute]? = nil,
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.attributeNames = attributeNames
        self.environmentId = environmentId
        self.environmentName = environmentName
    }
}

struct DescribeEnvironmentHealthInputBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let attributeNames: [ElasticBeanstalkClientTypes.EnvironmentHealthAttribute]?
}

extension DescribeEnvironmentHealthInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        if containerValues.contains(.attributeNames) {
            struct KeyVal0{struct member{}}
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attributeNames)
            if let attributeNamesWrappedContainer = attributeNamesWrappedContainer {
                let attributeNamesContainer = try attributeNamesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentHealthAttribute].self, forKey: .member)
                var attributeNamesBuffer:[ElasticBeanstalkClientTypes.EnvironmentHealthAttribute]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [ElasticBeanstalkClientTypes.EnvironmentHealthAttribute]()
                    for enumContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(enumContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
    }
}

extension DescribeEnvironmentHealthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEnvironmentHealthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEnvironmentHealthOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEnvironmentHealthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEnvironmentHealthOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationMetrics = output.applicationMetrics
            self.causes = output.causes
            self.color = output.color
            self.environmentName = output.environmentName
            self.healthStatus = output.healthStatus
            self.instancesHealth = output.instancesHealth
            self.refreshedAt = output.refreshedAt
            self.status = output.status
        } else {
            self.applicationMetrics = nil
            self.causes = nil
            self.color = nil
            self.environmentName = nil
            self.healthStatus = nil
            self.instancesHealth = nil
            self.refreshedAt = nil
            self.status = nil
        }
    }
}

/// Health details for an AWS Elastic Beanstalk environment.
public struct DescribeEnvironmentHealthOutputResponse: Swift.Equatable {
    /// Application request metrics for the environment.
    public var applicationMetrics: ElasticBeanstalkClientTypes.ApplicationMetrics?
    /// Descriptions of the data that contributed to the environment's current health status.
    public var causes: [Swift.String]?
    /// The [health color](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html) of the environment.
    public var color: Swift.String?
    /// The environment's name.
    public var environmentName: Swift.String?
    /// The [health status](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html) of the environment. For example, Ok.
    public var healthStatus: Swift.String?
    /// Summary health information for the instances in the environment.
    public var instancesHealth: ElasticBeanstalkClientTypes.InstanceHealthSummary?
    /// The date and time that the health information was retrieved.
    public var refreshedAt: ClientRuntime.Date?
    /// The environment's operational status. Ready, Launching, Updating, Terminating, or Terminated.
    public var status: ElasticBeanstalkClientTypes.EnvironmentHealth?

    public init (
        applicationMetrics: ElasticBeanstalkClientTypes.ApplicationMetrics? = nil,
        causes: [Swift.String]? = nil,
        color: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        healthStatus: Swift.String? = nil,
        instancesHealth: ElasticBeanstalkClientTypes.InstanceHealthSummary? = nil,
        refreshedAt: ClientRuntime.Date? = nil,
        status: ElasticBeanstalkClientTypes.EnvironmentHealth? = nil
    )
    {
        self.applicationMetrics = applicationMetrics
        self.causes = causes
        self.color = color
        self.environmentName = environmentName
        self.healthStatus = healthStatus
        self.instancesHealth = instancesHealth
        self.refreshedAt = refreshedAt
        self.status = status
    }
}

struct DescribeEnvironmentHealthOutputResponseBody: Swift.Equatable {
    let environmentName: Swift.String?
    let healthStatus: Swift.String?
    let status: ElasticBeanstalkClientTypes.EnvironmentHealth?
    let color: Swift.String?
    let causes: [Swift.String]?
    let applicationMetrics: ElasticBeanstalkClientTypes.ApplicationMetrics?
    let instancesHealth: ElasticBeanstalkClientTypes.InstanceHealthSummary?
    let refreshedAt: ClientRuntime.Date?
}

extension DescribeEnvironmentHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationMetrics = "ApplicationMetrics"
        case causes = "Causes"
        case color = "Color"
        case environmentName = "EnvironmentName"
        case healthStatus = "HealthStatus"
        case instancesHealth = "InstancesHealth"
        case refreshedAt = "RefreshedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEnvironmentHealthResult"))
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealth.self, forKey: .status)
        status = statusDecoded
        let colorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .color)
        color = colorDecoded
        if containerValues.contains(.causes) {
            struct KeyVal0{struct member{}}
            let causesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .causes)
            if let causesWrappedContainer = causesWrappedContainer {
                let causesContainer = try causesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var causesBuffer:[Swift.String]? = nil
                if let causesContainer = causesContainer {
                    causesBuffer = [Swift.String]()
                    for stringContainer0 in causesContainer {
                        causesBuffer?.append(stringContainer0)
                    }
                }
                causes = causesBuffer
            } else {
                causes = []
            }
        } else {
            causes = nil
        }
        let applicationMetricsDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationMetrics.self, forKey: .applicationMetrics)
        applicationMetrics = applicationMetricsDecoded
        let instancesHealthDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.InstanceHealthSummary.self, forKey: .instancesHealth)
        instancesHealth = instancesHealthDecoded
        let refreshedAtDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .refreshedAt)
        refreshedAt = refreshedAtDecoded
    }
}

extension DescribeEnvironmentManagedActionHistoryInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeEnvironmentManagedActionHistory", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEnvironmentManagedActionHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to list completed and failed managed actions.
public struct DescribeEnvironmentManagedActionHistoryInput: Swift.Equatable {
    /// The environment ID of the target environment.
    public var environmentId: Swift.String?
    /// The name of the target environment.
    public var environmentName: Swift.String?
    /// The maximum number of items to return for a single request.
    public var maxItems: Swift.Int?
    /// The pagination token returned by a previous request.
    public var nextToken: Swift.String?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

struct DescribeEnvironmentManagedActionHistoryInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let nextToken: Swift.String?
    let maxItems: Swift.Int?
}

extension DescribeEnvironmentManagedActionHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension DescribeEnvironmentManagedActionHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEnvironmentManagedActionHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEnvironmentManagedActionHistoryOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEnvironmentManagedActionHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEnvironmentManagedActionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedActionHistoryItems = output.managedActionHistoryItems
            self.nextToken = output.nextToken
        } else {
            self.managedActionHistoryItems = nil
            self.nextToken = nil
        }
    }
}

/// A result message containing a list of completed and failed managed actions.
public struct DescribeEnvironmentManagedActionHistoryOutputResponse: Swift.Equatable {
    /// A list of completed and failed managed actions.
    public var managedActionHistoryItems: [ElasticBeanstalkClientTypes.ManagedActionHistoryItem]?
    /// A pagination token that you pass to [DescribeEnvironmentManagedActionHistory] to get the next page of results.
    public var nextToken: Swift.String?

    public init (
        managedActionHistoryItems: [ElasticBeanstalkClientTypes.ManagedActionHistoryItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.managedActionHistoryItems = managedActionHistoryItems
        self.nextToken = nextToken
    }
}

struct DescribeEnvironmentManagedActionHistoryOutputResponseBody: Swift.Equatable {
    let managedActionHistoryItems: [ElasticBeanstalkClientTypes.ManagedActionHistoryItem]?
    let nextToken: Swift.String?
}

extension DescribeEnvironmentManagedActionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedActionHistoryItems = "ManagedActionHistoryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEnvironmentManagedActionHistoryResult"))
        if containerValues.contains(.managedActionHistoryItems) {
            struct KeyVal0{struct member{}}
            let managedActionHistoryItemsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .managedActionHistoryItems)
            if let managedActionHistoryItemsWrappedContainer = managedActionHistoryItemsWrappedContainer {
                let managedActionHistoryItemsContainer = try managedActionHistoryItemsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ManagedActionHistoryItem].self, forKey: .member)
                var managedActionHistoryItemsBuffer:[ElasticBeanstalkClientTypes.ManagedActionHistoryItem]? = nil
                if let managedActionHistoryItemsContainer = managedActionHistoryItemsContainer {
                    managedActionHistoryItemsBuffer = [ElasticBeanstalkClientTypes.ManagedActionHistoryItem]()
                    for structureContainer0 in managedActionHistoryItemsContainer {
                        managedActionHistoryItemsBuffer?.append(structureContainer0)
                    }
                }
                managedActionHistoryItems = managedActionHistoryItemsBuffer
            } else {
                managedActionHistoryItems = []
            }
        } else {
            managedActionHistoryItems = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeEnvironmentManagedActionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("DescribeEnvironmentManagedActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEnvironmentManagedActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to list an environment's upcoming and in-progress managed actions.
public struct DescribeEnvironmentManagedActionsInput: Swift.Equatable {
    /// The environment ID of the target environment.
    public var environmentId: Swift.String?
    /// The name of the target environment.
    public var environmentName: Swift.String?
    /// To show only actions with a particular status, specify a status.
    public var status: ElasticBeanstalkClientTypes.ActionStatus?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        status: ElasticBeanstalkClientTypes.ActionStatus? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.status = status
    }
}

struct DescribeEnvironmentManagedActionsInputBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let status: ElasticBeanstalkClientTypes.ActionStatus?
}

extension DescribeEnvironmentManagedActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DescribeEnvironmentManagedActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEnvironmentManagedActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEnvironmentManagedActionsOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEnvironmentManagedActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEnvironmentManagedActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedActions = output.managedActions
        } else {
            self.managedActions = nil
        }
    }
}

/// The result message containing a list of managed actions.
public struct DescribeEnvironmentManagedActionsOutputResponse: Swift.Equatable {
    /// A list of upcoming and in-progress managed actions.
    public var managedActions: [ElasticBeanstalkClientTypes.ManagedAction]?

    public init (
        managedActions: [ElasticBeanstalkClientTypes.ManagedAction]? = nil
    )
    {
        self.managedActions = managedActions
    }
}

struct DescribeEnvironmentManagedActionsOutputResponseBody: Swift.Equatable {
    let managedActions: [ElasticBeanstalkClientTypes.ManagedAction]?
}

extension DescribeEnvironmentManagedActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedActions = "ManagedActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEnvironmentManagedActionsResult"))
        if containerValues.contains(.managedActions) {
            struct KeyVal0{struct member{}}
            let managedActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .managedActions)
            if let managedActionsWrappedContainer = managedActionsWrappedContainer {
                let managedActionsContainer = try managedActionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ManagedAction].self, forKey: .member)
                var managedActionsBuffer:[ElasticBeanstalkClientTypes.ManagedAction]? = nil
                if let managedActionsContainer = managedActionsContainer {
                    managedActionsBuffer = [ElasticBeanstalkClientTypes.ManagedAction]()
                    for structureContainer0 in managedActionsContainer {
                        managedActionsBuffer?.append(structureContainer0)
                    }
                }
                managedActions = managedActionsBuffer
            } else {
                managedActions = []
            }
        } else {
            managedActions = nil
        }
    }
}

extension DescribeEnvironmentResourcesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("DescribeEnvironmentResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEnvironmentResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to describe the resources in an environment.
public struct DescribeEnvironmentResourcesInput: Swift.Equatable {
    /// The ID of the environment to retrieve AWS resource usage data. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment to retrieve AWS resource usage data. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
    }
}

struct DescribeEnvironmentResourcesInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
}

extension DescribeEnvironmentResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension DescribeEnvironmentResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEnvironmentResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEnvironmentResourcesOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEnvironmentResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEnvironmentResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.environmentResources = output.environmentResources
        } else {
            self.environmentResources = nil
        }
    }
}

/// Result message containing a list of environment resource descriptions.
public struct DescribeEnvironmentResourcesOutputResponse: Swift.Equatable {
    /// A list of [EnvironmentResourceDescription].
    public var environmentResources: ElasticBeanstalkClientTypes.EnvironmentResourceDescription?

    public init (
        environmentResources: ElasticBeanstalkClientTypes.EnvironmentResourceDescription? = nil
    )
    {
        self.environmentResources = environmentResources
    }
}

struct DescribeEnvironmentResourcesOutputResponseBody: Swift.Equatable {
    let environmentResources: ElasticBeanstalkClientTypes.EnvironmentResourceDescription?
}

extension DescribeEnvironmentResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentResources = "EnvironmentResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEnvironmentResourcesResult"))
        let environmentResourcesDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentResourceDescription.self, forKey: .environmentResources)
        environmentResources = environmentResourcesDecoded
    }
}

extension DescribeEnvironmentsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentIds = environmentIds {
            if !environmentIds.isEmpty {
                var environmentIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentIds"))
                for (index0, environmentid0) in environmentIds.enumerated() {
                    try environmentIdsContainer.encode(environmentid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var environmentIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentIds"))
                try environmentIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let environmentNames = environmentNames {
            if !environmentNames.isEmpty {
                var environmentNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentNames"))
                for (index0, environmentname0) in environmentNames.enumerated() {
                    try environmentNamesContainer.encode(environmentname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var environmentNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentNames"))
                try environmentNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includeDeleted = includeDeleted {
            try container.encode(includeDeleted, forKey: ClientRuntime.Key("IncludeDeleted"))
        }
        if let includedDeletedBackTo = includedDeletedBackTo {
            try container.encodeTimestamp(includedDeletedBackTo, format: .dateTime, forKey: ClientRuntime.Key("includedDeletedBackTo"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("DescribeEnvironments", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEnvironmentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to describe one or more environments.
public struct DescribeEnvironmentsInput: Swift.Equatable {
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.
    public var applicationName: Swift.String?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.
    public var environmentIds: [Swift.String]?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.
    public var environmentNames: [Swift.String]?
    /// Indicates whether to include deleted environments: true: Environments that have been deleted after IncludedDeletedBackTo are displayed. false: Do not include deleted environments.
    public var includeDeleted: Swift.Bool?
    /// If specified when IncludeDeleted is set to true, then environments deleted after this date are displayed.
    public var includedDeletedBackTo: ClientRuntime.Date?
    /// For a paginated request. Specify a maximum number of environments to include in each response. If no MaxRecords is specified, all available environments are retrieved in a single response.
    public var maxRecords: Swift.Int?
    /// For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request. If no NextToken is specified, the first page is retrieved.
    public var nextToken: Swift.String?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        environmentIds: [Swift.String]? = nil,
        environmentNames: [Swift.String]? = nil,
        includeDeleted: Swift.Bool? = nil,
        includedDeletedBackTo: ClientRuntime.Date? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.environmentIds = environmentIds
        self.environmentNames = environmentNames
        self.includeDeleted = includeDeleted
        self.includedDeletedBackTo = includedDeletedBackTo
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.versionLabel = versionLabel
    }
}

struct DescribeEnvironmentsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let environmentIds: [Swift.String]?
    let environmentNames: [Swift.String]?
    let includeDeleted: Swift.Bool?
    let includedDeletedBackTo: ClientRuntime.Date?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeEnvironmentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentIds = "EnvironmentIds"
        case environmentNames = "EnvironmentNames"
        case includeDeleted = "IncludeDeleted"
        case includedDeletedBackTo = "IncludedDeletedBackTo"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        if containerValues.contains(.environmentIds) {
            struct KeyVal0{struct member{}}
            let environmentIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentIds)
            if let environmentIdsWrappedContainer = environmentIdsWrappedContainer {
                let environmentIdsContainer = try environmentIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var environmentIdsBuffer:[Swift.String]? = nil
                if let environmentIdsContainer = environmentIdsContainer {
                    environmentIdsBuffer = [Swift.String]()
                    for stringContainer0 in environmentIdsContainer {
                        environmentIdsBuffer?.append(stringContainer0)
                    }
                }
                environmentIds = environmentIdsBuffer
            } else {
                environmentIds = []
            }
        } else {
            environmentIds = nil
        }
        if containerValues.contains(.environmentNames) {
            struct KeyVal0{struct member{}}
            let environmentNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentNames)
            if let environmentNamesWrappedContainer = environmentNamesWrappedContainer {
                let environmentNamesContainer = try environmentNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var environmentNamesBuffer:[Swift.String]? = nil
                if let environmentNamesContainer = environmentNamesContainer {
                    environmentNamesBuffer = [Swift.String]()
                    for stringContainer0 in environmentNamesContainer {
                        environmentNamesBuffer?.append(stringContainer0)
                    }
                }
                environmentNames = environmentNamesBuffer
            } else {
                environmentNames = []
            }
        } else {
            environmentNames = nil
        }
        let includeDeletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDeleted)
        includeDeleted = includeDeletedDecoded
        let includedDeletedBackToDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .includedDeletedBackTo)
        includedDeletedBackTo = includedDeletedBackToDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeEnvironmentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEnvironmentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEnvironmentsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEnvironmentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEnvironmentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.environments = output.environments
            self.nextToken = output.nextToken
        } else {
            self.environments = nil
            self.nextToken = nil
        }
    }
}

/// Result message containing a list of environment descriptions.
public struct DescribeEnvironmentsOutputResponse: Swift.Equatable {
    /// Returns an [EnvironmentDescription] list.
    public var environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]?
    /// In a paginated request, the token that you can pass in a subsequent request to get the next response page.
    public var nextToken: Swift.String?

    public init (
        environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environments = environments
        self.nextToken = nextToken
    }
}

struct DescribeEnvironmentsOutputResponseBody: Swift.Equatable {
    let environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]?
    let nextToken: Swift.String?
}

extension DescribeEnvironmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environments = "Environments"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEnvironmentsResult"))
        if containerValues.contains(.environments) {
            struct KeyVal0{struct member{}}
            let environmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environments)
            if let environmentsWrappedContainer = environmentsWrappedContainer {
                let environmentsContainer = try environmentsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentDescription].self, forKey: .member)
                var environmentsBuffer:[ElasticBeanstalkClientTypes.EnvironmentDescription]? = nil
                if let environmentsContainer = environmentsContainer {
                    environmentsBuffer = [ElasticBeanstalkClientTypes.EnvironmentDescription]()
                    for structureContainer0 in environmentsContainer {
                        environmentsBuffer?.append(structureContainer0)
                    }
                }
                environments = environmentsBuffer
            } else {
                environments = []
            }
        } else {
            environments = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeEventsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let requestId = requestId {
            try container.encode(requestId, forKey: ClientRuntime.Key("RequestId"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("DescribeEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to retrieve a list of events for an environment.
public struct DescribeEventsInput: Swift.Equatable {
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application.
    public var applicationName: Swift.String?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the EndTime.
    public var endTime: ClientRuntime.Date?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
    public var environmentId: Swift.String?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
    public var environmentName: Swift.String?
    /// Specifies the maximum number of events that can be returned, beginning with the most recent event.
    public var maxRecords: Swift.Int?
    /// Pagination token. If specified, the events return the next batch of results.
    public var nextToken: Swift.String?
    /// The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version.
    public var platformArn: Swift.String?
    /// If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID.
    public var requestId: Swift.String?
    /// If specified, limits the events returned from this call to include only those with the specified severity or higher.
    public var severity: ElasticBeanstalkClientTypes.EventSeverity?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time.
    public var startTime: ClientRuntime.Date?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration.
    public var templateName: Swift.String?
    /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        platformArn: Swift.String? = nil,
        requestId: Swift.String? = nil,
        severity: ElasticBeanstalkClientTypes.EventSeverity? = nil,
        startTime: ClientRuntime.Date? = nil,
        templateName: Swift.String? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.endTime = endTime
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.platformArn = platformArn
        self.requestId = requestId
        self.severity = severity
        self.startTime = startTime
        self.templateName = templateName
        self.versionLabel = versionLabel
    }
}

struct DescribeEventsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let templateName: Swift.String?
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let platformArn: Swift.String?
    let requestId: Swift.String?
    let severity: ElasticBeanstalkClientTypes.EventSeverity?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case endTime = "EndTime"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case platformArn = "PlatformArn"
        case requestId = "RequestId"
        case severity = "Severity"
        case startTime = "StartTime"
        case templateName = "TemplateName"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EventSeverity.self, forKey: .severity)
        severity = severityDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEventsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
        } else {
            self.events = nil
            self.nextToken = nil
        }
    }
}

/// Result message wrapping a list of event descriptions.
public struct DescribeEventsOutputResponse: Swift.Equatable {
    /// A list of [EventDescription].
    public var events: [ElasticBeanstalkClientTypes.EventDescription]?
    /// If returned, this indicates that there are more results to obtain. Use this token in the next [DescribeEvents] call to get the next batch of events.
    public var nextToken: Swift.String?

    public init (
        events: [ElasticBeanstalkClientTypes.EventDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

struct DescribeEventsOutputResponseBody: Swift.Equatable {
    let events: [ElasticBeanstalkClientTypes.EventDescription]?
    let nextToken: Swift.String?
}

extension DescribeEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEventsResult"))
        if containerValues.contains(.events) {
            struct KeyVal0{struct member{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EventDescription].self, forKey: .member)
                var eventsBuffer:[ElasticBeanstalkClientTypes.EventDescription]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [ElasticBeanstalkClientTypes.EventDescription]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInstancesHealthInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                for (index0, instanceshealthattribute0) in attributeNames.enumerated() {
                    try attributeNamesContainer.encode(instanceshealthattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                try attributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeInstancesHealth", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeInstancesHealthInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Parameters for a call to DescribeInstancesHealth.
public struct DescribeInstancesHealthInput: Swift.Equatable {
    /// Specifies the response elements you wish to receive. To retrieve all attributes, set to All. If no attribute names are specified, returns a list of instances.
    public var attributeNames: [ElasticBeanstalkClientTypes.InstancesHealthAttribute]?
    /// Specify the AWS Elastic Beanstalk environment by ID.
    public var environmentId: Swift.String?
    /// Specify the AWS Elastic Beanstalk environment by name.
    public var environmentName: Swift.String?
    /// Specify the pagination token returned by a previous call.
    public var nextToken: Swift.String?

    public init (
        attributeNames: [ElasticBeanstalkClientTypes.InstancesHealthAttribute]? = nil,
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.attributeNames = attributeNames
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.nextToken = nextToken
    }
}

struct DescribeInstancesHealthInputBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let attributeNames: [ElasticBeanstalkClientTypes.InstancesHealthAttribute]?
    let nextToken: Swift.String?
}

extension DescribeInstancesHealthInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        if containerValues.contains(.attributeNames) {
            struct KeyVal0{struct member{}}
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attributeNames)
            if let attributeNamesWrappedContainer = attributeNamesWrappedContainer {
                let attributeNamesContainer = try attributeNamesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.InstancesHealthAttribute].self, forKey: .member)
                var attributeNamesBuffer:[ElasticBeanstalkClientTypes.InstancesHealthAttribute]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [ElasticBeanstalkClientTypes.InstancesHealthAttribute]()
                    for enumContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(enumContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInstancesHealthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeInstancesHealthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInstancesHealthOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstancesHealthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInstancesHealthOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceHealthList = output.instanceHealthList
            self.nextToken = output.nextToken
            self.refreshedAt = output.refreshedAt
        } else {
            self.instanceHealthList = nil
            self.nextToken = nil
            self.refreshedAt = nil
        }
    }
}

/// Detailed health information about the Amazon EC2 instances in an AWS Elastic Beanstalk environment.
public struct DescribeInstancesHealthOutputResponse: Swift.Equatable {
    /// Detailed health information about each instance. The output differs slightly between Linux and Windows environments. There is a difference in the members that are supported under the  type.
    public var instanceHealthList: [ElasticBeanstalkClientTypes.SingleInstanceHealth]?
    /// Pagination token for the next page of results, if available.
    public var nextToken: Swift.String?
    /// The date and time that the health information was retrieved.
    public var refreshedAt: ClientRuntime.Date?

    public init (
        instanceHealthList: [ElasticBeanstalkClientTypes.SingleInstanceHealth]? = nil,
        nextToken: Swift.String? = nil,
        refreshedAt: ClientRuntime.Date? = nil
    )
    {
        self.instanceHealthList = instanceHealthList
        self.nextToken = nextToken
        self.refreshedAt = refreshedAt
    }
}

struct DescribeInstancesHealthOutputResponseBody: Swift.Equatable {
    let instanceHealthList: [ElasticBeanstalkClientTypes.SingleInstanceHealth]?
    let refreshedAt: ClientRuntime.Date?
    let nextToken: Swift.String?
}

extension DescribeInstancesHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceHealthList = "InstanceHealthList"
        case nextToken = "NextToken"
        case refreshedAt = "RefreshedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInstancesHealthResult"))
        if containerValues.contains(.instanceHealthList) {
            struct KeyVal0{struct member{}}
            let instanceHealthListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceHealthList)
            if let instanceHealthListWrappedContainer = instanceHealthListWrappedContainer {
                let instanceHealthListContainer = try instanceHealthListWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.SingleInstanceHealth].self, forKey: .member)
                var instanceHealthListBuffer:[ElasticBeanstalkClientTypes.SingleInstanceHealth]? = nil
                if let instanceHealthListContainer = instanceHealthListContainer {
                    instanceHealthListBuffer = [ElasticBeanstalkClientTypes.SingleInstanceHealth]()
                    for structureContainer0 in instanceHealthListContainer {
                        instanceHealthListBuffer?.append(structureContainer0)
                    }
                }
                instanceHealthList = instanceHealthListBuffer
            } else {
                instanceHealthList = []
            }
        } else {
            instanceHealthList = nil
        }
        let refreshedAtDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .refreshedAt)
        refreshedAt = refreshedAtDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePlatformVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        try container.encode("DescribePlatformVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePlatformVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePlatformVersionInput: Swift.Equatable {
    /// The ARN of the platform version.
    public var platformArn: Swift.String?

    public init (
        platformArn: Swift.String? = nil
    )
    {
        self.platformArn = platformArn
    }
}

struct DescribePlatformVersionInputBody: Swift.Equatable {
    let platformArn: Swift.String?
}

extension DescribePlatformVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platformArn = "PlatformArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
    }
}

extension DescribePlatformVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribePlatformVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePlatformVersionOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePlatformVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePlatformVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.platformDescription = output.platformDescription
        } else {
            self.platformDescription = nil
        }
    }
}

public struct DescribePlatformVersionOutputResponse: Swift.Equatable {
    /// Detailed information about the platform version.
    public var platformDescription: ElasticBeanstalkClientTypes.PlatformDescription?

    public init (
        platformDescription: ElasticBeanstalkClientTypes.PlatformDescription? = nil
    )
    {
        self.platformDescription = platformDescription
    }
}

struct DescribePlatformVersionOutputResponseBody: Swift.Equatable {
    let platformDescription: ElasticBeanstalkClientTypes.PlatformDescription?
}

extension DescribePlatformVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platformDescription = "PlatformDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribePlatformVersionResult"))
        let platformDescriptionDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.PlatformDescription.self, forKey: .platformDescription)
        platformDescription = platformDescriptionDecoded
    }
}

extension DisassociateEnvironmentOperationsRoleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("DisassociateEnvironmentOperationsRole", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisassociateEnvironmentOperationsRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to disassociate the operations role from an environment.
public struct DisassociateEnvironmentOperationsRoleInput: Swift.Equatable {
    /// The name of the environment from which to disassociate the operations role.
    /// This member is required.
    public var environmentName: Swift.String?

    public init (
        environmentName: Swift.String? = nil
    )
    {
        self.environmentName = environmentName
    }
}

struct DisassociateEnvironmentOperationsRoleInputBody: Swift.Equatable {
    let environmentName: Swift.String?
}

extension DisassociateEnvironmentOperationsRoleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension DisassociateEnvironmentOperationsRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisassociateEnvironmentOperationsRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateEnvironmentOperationsRoleOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateEnvironmentOperationsRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateEnvironmentOperationsRoleOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticBeanstalkServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ElasticBeanstalkServiceExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A generic service exception has occurred.
public struct ElasticBeanstalkServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ElasticBeanstalkServiceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ElasticBeanstalkServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.EnvironmentDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortableOperationInProgress = "AbortableOperationInProgress"
        case applicationName = "ApplicationName"
        case cname = "CNAME"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointURL = "EndpointURL"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case health = "Health"
        case healthStatus = "HealthStatus"
        case operationsRole = "OperationsRole"
        case platformArn = "PlatformArn"
        case resources = "Resources"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let abortableOperationInProgress = abortableOperationInProgress {
            try container.encode(abortableOperationInProgress, forKey: ClientRuntime.Key("AbortableOperationInProgress"))
        }
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let cname = cname {
            try container.encode(cname, forKey: ClientRuntime.Key("CNAME"))
        }
        if let dateCreated = dateCreated {
            try container.encodeTimestamp(dateCreated, format: .dateTime, forKey: ClientRuntime.Key("dateCreated"))
        }
        if let dateUpdated = dateUpdated {
            try container.encodeTimestamp(dateUpdated, format: .dateTime, forKey: ClientRuntime.Key("dateUpdated"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let endpointURL = endpointURL {
            try container.encode(endpointURL, forKey: ClientRuntime.Key("EndpointURL"))
        }
        if let environmentArn = environmentArn {
            try container.encode(environmentArn, forKey: ClientRuntime.Key("EnvironmentArn"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentLinks = environmentLinks {
            if !environmentLinks.isEmpty {
                var environmentLinksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentLinks"))
                for (index0, environmentlink0) in environmentLinks.enumerated() {
                    try environmentLinksContainer.encode(environmentlink0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var environmentLinksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentLinks"))
                try environmentLinksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let health = health {
            try container.encode(health, forKey: ClientRuntime.Key("Health"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let operationsRole = operationsRole {
            try container.encode(operationsRole, forKey: ClientRuntime.Key("OperationsRole"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let resources = resources {
            try container.encode(resources, forKey: ClientRuntime.Key("Resources"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: ClientRuntime.Key("Tier"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointURL)
        endpointURL = endpointURLDecoded
        let cnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cname)
        cname = cnameDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let abortableOperationInProgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .abortableOperationInProgress)
        abortableOperationInProgress = abortableOperationInProgressDecoded
        let healthDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealth.self, forKey: .health)
        health = healthDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentResourcesDescription.self, forKey: .resources)
        resources = resourcesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.environmentLinks) {
            struct KeyVal0{struct member{}}
            let environmentLinksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentLinks)
            if let environmentLinksWrappedContainer = environmentLinksWrappedContainer {
                let environmentLinksContainer = try environmentLinksWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentLink].self, forKey: .member)
                var environmentLinksBuffer:[ElasticBeanstalkClientTypes.EnvironmentLink]? = nil
                if let environmentLinksContainer = environmentLinksContainer {
                    environmentLinksBuffer = [ElasticBeanstalkClientTypes.EnvironmentLink]()
                    for structureContainer0 in environmentLinksContainer {
                        environmentLinksBuffer?.append(structureContainer0)
                    }
                }
                environmentLinks = environmentLinksBuffer
            } else {
                environmentLinks = []
            }
        } else {
            environmentLinks = nil
        }
        let environmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the properties of an environment.
    public struct EnvironmentDescription: Swift.Equatable {
        /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel. true: There is an update in progress. false: There are no updates currently in progress.
        public var abortableOperationInProgress: Swift.Bool?
        /// The name of the application associated with this environment.
        public var applicationName: Swift.String?
        /// The URL to the CNAME for this environment.
        public var cname: Swift.String?
        /// The creation date for this environment.
        public var dateCreated: ClientRuntime.Date?
        /// The last modified date for this environment.
        public var dateUpdated: ClientRuntime.Date?
        /// Describes this environment.
        public var description: Swift.String?
        /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
        public var endpointURL: Swift.String?
        /// The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.
        public var environmentArn: Swift.String?
        /// The ID of this environment.
        public var environmentId: Swift.String?
        /// A list of links to other environments in the same group.
        public var environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
        /// The name of this environment.
        public var environmentName: Swift.String?
        /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:
        ///
        /// * Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.
        ///
        /// * Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.
        ///
        /// * Green: Indicates the environment is healthy and fully functional.
        ///
        /// * Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironment request.
        ///
        ///
        /// Default: Grey
        public var health: ElasticBeanstalkClientTypes.EnvironmentHealth?
        /// Returns the health status of the application running in your environment. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
        public var healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
        /// The Amazon Resource Name (ARN) of the environment's operations role. For more information, see [Operations roles](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html) in the AWS Elastic Beanstalk Developer Guide.
        public var operationsRole: Swift.String?
        /// The ARN of the platform version.
        public var platformArn: Swift.String?
        /// The description of the AWS resources used by this environment.
        public var resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
        /// The name of the SolutionStack deployed with this environment.
        public var solutionStackName: Swift.String?
        /// The current operational status of the environment:
        ///
        /// * Launching: Environment is in the process of initial deployment.
        ///
        /// * Updating: Environment is in the process of updating its configuration settings or application version.
        ///
        /// * Ready: Environment is available to have an action performed on it, such as update or terminate.
        ///
        /// * Terminating: Environment is in the shut-down process.
        ///
        /// * Terminated: Environment is not running.
        public var status: ElasticBeanstalkClientTypes.EnvironmentStatus?
        /// The name of the configuration template used to originally launch this environment.
        public var templateName: Swift.String?
        /// Describes the current tier of this environment.
        public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
        /// The application version deployed in this environment.
        public var versionLabel: Swift.String?

        public init (
            abortableOperationInProgress: Swift.Bool? = nil,
            applicationName: Swift.String? = nil,
            cname: Swift.String? = nil,
            dateCreated: ClientRuntime.Date? = nil,
            dateUpdated: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            endpointURL: Swift.String? = nil,
            environmentArn: Swift.String? = nil,
            environmentId: Swift.String? = nil,
            environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]? = nil,
            environmentName: Swift.String? = nil,
            health: ElasticBeanstalkClientTypes.EnvironmentHealth? = nil,
            healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus? = nil,
            operationsRole: Swift.String? = nil,
            platformArn: Swift.String? = nil,
            resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription? = nil,
            solutionStackName: Swift.String? = nil,
            status: ElasticBeanstalkClientTypes.EnvironmentStatus? = nil,
            templateName: Swift.String? = nil,
            tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
            versionLabel: Swift.String? = nil
        )
        {
            self.abortableOperationInProgress = abortableOperationInProgress
            self.applicationName = applicationName
            self.cname = cname
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.description = description
            self.endpointURL = endpointURL
            self.environmentArn = environmentArn
            self.environmentId = environmentId
            self.environmentLinks = environmentLinks
            self.environmentName = environmentName
            self.health = health
            self.healthStatus = healthStatus
            self.operationsRole = operationsRole
            self.platformArn = platformArn
            self.resources = resources
            self.solutionStackName = solutionStackName
            self.status = status
            self.templateName = templateName
            self.tier = tier
            self.versionLabel = versionLabel
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum EnvironmentHealth: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case green
        case grey
        case red
        case yellow
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentHealth] {
            return [
                .green,
                .grey,
                .red,
                .yellow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .green: return "Green"
            case .grey: return "Grey"
            case .red: return "Red"
            case .yellow: return "Yellow"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentHealth(rawValue: rawValue) ?? EnvironmentHealth.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum EnvironmentHealthAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case applicationmetrics
        case causes
        case color
        case healthstatus
        case instanceshealth
        case refreshedat
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentHealthAttribute] {
            return [
                .all,
                .applicationmetrics,
                .causes,
                .color,
                .healthstatus,
                .instanceshealth,
                .refreshedat,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .applicationmetrics: return "ApplicationMetrics"
            case .causes: return "Causes"
            case .color: return "Color"
            case .healthstatus: return "HealthStatus"
            case .instanceshealth: return "InstancesHealth"
            case .refreshedat: return "RefreshedAt"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentHealthAttribute(rawValue: rawValue) ?? EnvironmentHealthAttribute.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum EnvironmentHealthStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case degraded
        case info
        case nodata
        case ok
        case pending
        case severe
        case suspended
        case unknown
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentHealthStatus] {
            return [
                .degraded,
                .info,
                .nodata,
                .ok,
                .pending,
                .severe,
                .suspended,
                .unknown,
                .warning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .degraded: return "Degraded"
            case .info: return "Info"
            case .nodata: return "NoData"
            case .ok: return "Ok"
            case .pending: return "Pending"
            case .severe: return "Severe"
            case .suspended: return "Suspended"
            case .unknown: return "Unknown"
            case .warning: return "Warning"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentHealthStatus(rawValue: rawValue) ?? EnvironmentHealthStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.EnvironmentInfoDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2InstanceId = "Ec2InstanceId"
        case infoType = "InfoType"
        case message = "Message"
        case sampleTimestamp = "SampleTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ec2InstanceId = ec2InstanceId {
            try container.encode(ec2InstanceId, forKey: ClientRuntime.Key("Ec2InstanceId"))
        }
        if let infoType = infoType {
            try container.encode(infoType, forKey: ClientRuntime.Key("InfoType"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let sampleTimestamp = sampleTimestamp {
            try container.encodeTimestamp(sampleTimestamp, format: .dateTime, forKey: ClientRuntime.Key("sampleTimestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let infoTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentInfoType.self, forKey: .infoType)
        infoType = infoTypeDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let sampleTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .sampleTimestamp)
        sampleTimestamp = sampleTimestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The information retrieved from the Amazon EC2 instances.
    public struct EnvironmentInfoDescription: Swift.Equatable {
        /// The Amazon EC2 Instance ID for this information.
        public var ec2InstanceId: Swift.String?
        /// The type of information retrieved.
        public var infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType?
        /// The retrieved information. Currently contains a presigned Amazon S3 URL. The files are deleted after 15 minutes. Anyone in possession of this URL can access the files before they are deleted. Make the URL available only to trusted parties.
        public var message: Swift.String?
        /// The time stamp when this information was retrieved.
        public var sampleTimestamp: ClientRuntime.Date?

        public init (
            ec2InstanceId: Swift.String? = nil,
            infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType? = nil,
            message: Swift.String? = nil,
            sampleTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.ec2InstanceId = ec2InstanceId
            self.infoType = infoType
            self.message = message
            self.sampleTimestamp = sampleTimestamp
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum EnvironmentInfoType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bundle
        case tail
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentInfoType] {
            return [
                .bundle,
                .tail,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bundle: return "bundle"
            case .tail: return "tail"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentInfoType(rawValue: rawValue) ?? EnvironmentInfoType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.EnvironmentLink: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentName = "EnvironmentName"
        case linkName = "LinkName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let linkName = linkName {
            try container.encode(linkName, forKey: ClientRuntime.Key("LinkName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let linkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .linkName)
        linkName = linkNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A link to another environment, defined in the environment's manifest. Links provide connection information in system properties that can be used to connect to another environment in the same group. See [Environment Manifest (env.yaml)](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html) for details.
    public struct EnvironmentLink: Swift.Equatable {
        /// The name of the linked environment (the dependency).
        public var environmentName: Swift.String?
        /// The name of the link.
        public var linkName: Swift.String?

        public init (
            environmentName: Swift.String? = nil,
            linkName: Swift.String? = nil
        )
        {
            self.environmentName = environmentName
            self.linkName = linkName
        }
    }

}

extension ElasticBeanstalkClientTypes.EnvironmentResourceDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroups = "AutoScalingGroups"
        case environmentName = "EnvironmentName"
        case instances = "Instances"
        case launchConfigurations = "LaunchConfigurations"
        case launchTemplates = "LaunchTemplates"
        case loadBalancers = "LoadBalancers"
        case queues = "Queues"
        case triggers = "Triggers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroups = autoScalingGroups {
            if !autoScalingGroups.isEmpty {
                var autoScalingGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroups"))
                for (index0, autoscalinggroup0) in autoScalingGroups.enumerated() {
                    try autoScalingGroupsContainer.encode(autoscalinggroup0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var autoScalingGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroups"))
                try autoScalingGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let instances = instances {
            if !instances.isEmpty {
                var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances"))
                for (index0, instance0) in instances.enumerated() {
                    try instancesContainer.encode(instance0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances"))
                try instancesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let launchConfigurations = launchConfigurations {
            if !launchConfigurations.isEmpty {
                var launchConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchConfigurations"))
                for (index0, launchconfiguration0) in launchConfigurations.enumerated() {
                    try launchConfigurationsContainer.encode(launchconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var launchConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchConfigurations"))
                try launchConfigurationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let launchTemplates = launchTemplates {
            if !launchTemplates.isEmpty {
                var launchTemplatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchTemplates"))
                for (index0, launchtemplate0) in launchTemplates.enumerated() {
                    try launchTemplatesContainer.encode(launchtemplate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var launchTemplatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchTemplates"))
                try launchTemplatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let loadBalancers = loadBalancers {
            if !loadBalancers.isEmpty {
                var loadBalancersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancers"))
                for (index0, loadbalancer0) in loadBalancers.enumerated() {
                    try loadBalancersContainer.encode(loadbalancer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancers"))
                try loadBalancersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let queues = queues {
            if !queues.isEmpty {
                var queuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Queues"))
                for (index0, queue0) in queues.enumerated() {
                    try queuesContainer.encode(queue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var queuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Queues"))
                try queuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let triggers = triggers {
            if !triggers.isEmpty {
                var triggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Triggers"))
                for (index0, trigger0) in triggers.enumerated() {
                    try triggersContainer.encode(trigger0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var triggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Triggers"))
                try triggersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        if containerValues.contains(.autoScalingGroups) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroups)
            if let autoScalingGroupsWrappedContainer = autoScalingGroupsWrappedContainer {
                let autoScalingGroupsContainer = try autoScalingGroupsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.AutoScalingGroup].self, forKey: .member)
                var autoScalingGroupsBuffer:[ElasticBeanstalkClientTypes.AutoScalingGroup]? = nil
                if let autoScalingGroupsContainer = autoScalingGroupsContainer {
                    autoScalingGroupsBuffer = [ElasticBeanstalkClientTypes.AutoScalingGroup]()
                    for structureContainer0 in autoScalingGroupsContainer {
                        autoScalingGroupsBuffer?.append(structureContainer0)
                    }
                }
                autoScalingGroups = autoScalingGroupsBuffer
            } else {
                autoScalingGroups = []
            }
        } else {
            autoScalingGroups = nil
        }
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Instance].self, forKey: .member)
                var instancesBuffer:[ElasticBeanstalkClientTypes.Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [ElasticBeanstalkClientTypes.Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        if containerValues.contains(.launchConfigurations) {
            struct KeyVal0{struct member{}}
            let launchConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchConfigurations)
            if let launchConfigurationsWrappedContainer = launchConfigurationsWrappedContainer {
                let launchConfigurationsContainer = try launchConfigurationsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.LaunchConfiguration].self, forKey: .member)
                var launchConfigurationsBuffer:[ElasticBeanstalkClientTypes.LaunchConfiguration]? = nil
                if let launchConfigurationsContainer = launchConfigurationsContainer {
                    launchConfigurationsBuffer = [ElasticBeanstalkClientTypes.LaunchConfiguration]()
                    for structureContainer0 in launchConfigurationsContainer {
                        launchConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                launchConfigurations = launchConfigurationsBuffer
            } else {
                launchConfigurations = []
            }
        } else {
            launchConfigurations = nil
        }
        if containerValues.contains(.launchTemplates) {
            struct KeyVal0{struct member{}}
            let launchTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchTemplates)
            if let launchTemplatesWrappedContainer = launchTemplatesWrappedContainer {
                let launchTemplatesContainer = try launchTemplatesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.LaunchTemplate].self, forKey: .member)
                var launchTemplatesBuffer:[ElasticBeanstalkClientTypes.LaunchTemplate]? = nil
                if let launchTemplatesContainer = launchTemplatesContainer {
                    launchTemplatesBuffer = [ElasticBeanstalkClientTypes.LaunchTemplate]()
                    for structureContainer0 in launchTemplatesContainer {
                        launchTemplatesBuffer?.append(structureContainer0)
                    }
                }
                launchTemplates = launchTemplatesBuffer
            } else {
                launchTemplates = []
            }
        } else {
            launchTemplates = nil
        }
        if containerValues.contains(.loadBalancers) {
            struct KeyVal0{struct member{}}
            let loadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancers)
            if let loadBalancersWrappedContainer = loadBalancersWrappedContainer {
                let loadBalancersContainer = try loadBalancersWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.LoadBalancer].self, forKey: .member)
                var loadBalancersBuffer:[ElasticBeanstalkClientTypes.LoadBalancer]? = nil
                if let loadBalancersContainer = loadBalancersContainer {
                    loadBalancersBuffer = [ElasticBeanstalkClientTypes.LoadBalancer]()
                    for structureContainer0 in loadBalancersContainer {
                        loadBalancersBuffer?.append(structureContainer0)
                    }
                }
                loadBalancers = loadBalancersBuffer
            } else {
                loadBalancers = []
            }
        } else {
            loadBalancers = nil
        }
        if containerValues.contains(.triggers) {
            struct KeyVal0{struct member{}}
            let triggersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .triggers)
            if let triggersWrappedContainer = triggersWrappedContainer {
                let triggersContainer = try triggersWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Trigger].self, forKey: .member)
                var triggersBuffer:[ElasticBeanstalkClientTypes.Trigger]? = nil
                if let triggersContainer = triggersContainer {
                    triggersBuffer = [ElasticBeanstalkClientTypes.Trigger]()
                    for structureContainer0 in triggersContainer {
                        triggersBuffer?.append(structureContainer0)
                    }
                }
                triggers = triggersBuffer
            } else {
                triggers = []
            }
        } else {
            triggers = nil
        }
        if containerValues.contains(.queues) {
            struct KeyVal0{struct member{}}
            let queuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .queues)
            if let queuesWrappedContainer = queuesWrappedContainer {
                let queuesContainer = try queuesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Queue].self, forKey: .member)
                var queuesBuffer:[ElasticBeanstalkClientTypes.Queue]? = nil
                if let queuesContainer = queuesContainer {
                    queuesBuffer = [ElasticBeanstalkClientTypes.Queue]()
                    for structureContainer0 in queuesContainer {
                        queuesBuffer?.append(structureContainer0)
                    }
                }
                queues = queuesBuffer
            } else {
                queues = []
            }
        } else {
            queues = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the AWS resources in use by this environment. This data is live.
    public struct EnvironmentResourceDescription: Swift.Equatable {
        /// The AutoScalingGroups used by this environment.
        public var autoScalingGroups: [ElasticBeanstalkClientTypes.AutoScalingGroup]?
        /// The name of the environment.
        public var environmentName: Swift.String?
        /// The Amazon EC2 instances used by this environment.
        public var instances: [ElasticBeanstalkClientTypes.Instance]?
        /// The Auto Scaling launch configurations in use by this environment.
        public var launchConfigurations: [ElasticBeanstalkClientTypes.LaunchConfiguration]?
        /// The Amazon EC2 launch templates in use by this environment.
        public var launchTemplates: [ElasticBeanstalkClientTypes.LaunchTemplate]?
        /// The LoadBalancers in use by this environment.
        public var loadBalancers: [ElasticBeanstalkClientTypes.LoadBalancer]?
        /// The queues used by this environment.
        public var queues: [ElasticBeanstalkClientTypes.Queue]?
        /// The AutoScaling triggers in use by this environment.
        public var triggers: [ElasticBeanstalkClientTypes.Trigger]?

        public init (
            autoScalingGroups: [ElasticBeanstalkClientTypes.AutoScalingGroup]? = nil,
            environmentName: Swift.String? = nil,
            instances: [ElasticBeanstalkClientTypes.Instance]? = nil,
            launchConfigurations: [ElasticBeanstalkClientTypes.LaunchConfiguration]? = nil,
            launchTemplates: [ElasticBeanstalkClientTypes.LaunchTemplate]? = nil,
            loadBalancers: [ElasticBeanstalkClientTypes.LoadBalancer]? = nil,
            queues: [ElasticBeanstalkClientTypes.Queue]? = nil,
            triggers: [ElasticBeanstalkClientTypes.Trigger]? = nil
        )
        {
            self.autoScalingGroups = autoScalingGroups
            self.environmentName = environmentName
            self.instances = instances
            self.launchConfigurations = launchConfigurations
            self.launchTemplates = launchTemplates
            self.loadBalancers = loadBalancers
            self.queues = queues
            self.triggers = triggers
        }
    }

}

extension ElasticBeanstalkClientTypes.EnvironmentResourcesDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancer = "LoadBalancer"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancer = loadBalancer {
            try container.encode(loadBalancer, forKey: ClientRuntime.Key("LoadBalancer"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.LoadBalancerDescription.self, forKey: .loadBalancer)
        loadBalancer = loadBalancerDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the AWS resources in use by this environment. This data is not live data.
    public struct EnvironmentResourcesDescription: Swift.Equatable {
        /// Describes the LoadBalancer.
        public var loadBalancer: ElasticBeanstalkClientTypes.LoadBalancerDescription?

        public init (
            loadBalancer: ElasticBeanstalkClientTypes.LoadBalancerDescription? = nil
        )
        {
            self.loadBalancer = loadBalancer
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum EnvironmentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aborting
        case launching
        case linkingfrom
        case linkingto
        case ready
        case terminated
        case terminating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentStatus] {
            return [
                .aborting,
                .launching,
                .linkingfrom,
                .linkingto,
                .ready,
                .terminated,
                .terminating,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aborting: return "Aborting"
            case .launching: return "Launching"
            case .linkingfrom: return "LinkingFrom"
            case .linkingto: return "LinkingTo"
            case .ready: return "Ready"
            case .terminated: return "Terminated"
            case .terminating: return "Terminating"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentStatus(rawValue: rawValue) ?? EnvironmentStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.EnvironmentTier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the properties of an environment tier
    public struct EnvironmentTier: Swift.Equatable {
        /// The name of this environment tier. Valid values:
        ///
        /// * For Web server tier – WebServer
        ///
        /// * For Worker tier – Worker
        public var name: Swift.String?
        /// The type of this environment tier. Valid values:
        ///
        /// * For Web server tier – Standard
        ///
        /// * For Worker tier – SQS/HTTP
        public var type: Swift.String?
        /// The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version. This member is deprecated. Any specific version that you set may become out of date. We recommend leaving it unspecified.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.version = version
        }
    }

}

extension ElasticBeanstalkClientTypes.EventDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
        case eventDate = "EventDate"
        case message = "Message"
        case platformArn = "PlatformArn"
        case requestId = "RequestId"
        case severity = "Severity"
        case templateName = "TemplateName"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let eventDate = eventDate {
            try container.encodeTimestamp(eventDate, format: .dateTime, forKey: ClientRuntime.Key("eventDate"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let requestId = requestId {
            try container.encode(requestId, forKey: ClientRuntime.Key("RequestId"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .eventDate)
        eventDate = eventDateDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EventSeverity.self, forKey: .severity)
        severity = severityDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes an event.
    public struct EventDescription: Swift.Equatable {
        /// The application associated with the event.
        public var applicationName: Swift.String?
        /// The name of the environment associated with this event.
        public var environmentName: Swift.String?
        /// The date when the event occurred.
        public var eventDate: ClientRuntime.Date?
        /// The event message.
        public var message: Swift.String?
        /// The ARN of the platform version.
        public var platformArn: Swift.String?
        /// The web service request ID for the activity of this event.
        public var requestId: Swift.String?
        /// The severity level of this event.
        public var severity: ElasticBeanstalkClientTypes.EventSeverity?
        /// The name of the configuration associated with this event.
        public var templateName: Swift.String?
        /// The release label for the application version associated with this event.
        public var versionLabel: Swift.String?

        public init (
            applicationName: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            eventDate: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            platformArn: Swift.String? = nil,
            requestId: Swift.String? = nil,
            severity: ElasticBeanstalkClientTypes.EventSeverity? = nil,
            templateName: Swift.String? = nil,
            versionLabel: Swift.String? = nil
        )
        {
            self.applicationName = applicationName
            self.environmentName = environmentName
            self.eventDate = eventDate
            self.message = message
            self.platformArn = platformArn
            self.requestId = requestId
            self.severity = severity
            self.templateName = templateName
            self.versionLabel = versionLabel
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum EventSeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case debug
        case error
        case fatal
        case info
        case trace
        case warn
        case sdkUnknown(Swift.String)

        public static var allCases: [EventSeverity] {
            return [
                .debug,
                .error,
                .fatal,
                .info,
                .trace,
                .warn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .debug: return "DEBUG"
            case .error: return "ERROR"
            case .fatal: return "FATAL"
            case .info: return "INFO"
            case .trace: return "TRACE"
            case .warn: return "WARN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventSeverity(rawValue: rawValue) ?? EventSeverity.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum FailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancellationfailed
        case internalfailure
        case invalidenvironmentstate
        case permissionserror
        case rollbackfailed
        case rollbacksuccessful
        case updatecancelled
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureType] {
            return [
                .cancellationfailed,
                .internalfailure,
                .invalidenvironmentstate,
                .permissionserror,
                .rollbackfailed,
                .rollbacksuccessful,
                .updatecancelled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancellationfailed: return "CancellationFailed"
            case .internalfailure: return "InternalFailure"
            case .invalidenvironmentstate: return "InvalidEnvironmentState"
            case .permissionserror: return "PermissionsError"
            case .rollbackfailed: return "RollbackFailed"
            case .rollbacksuccessful: return "RollbackSuccessful"
            case .updatecancelled: return "UpdateCancelled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FailureType(rawValue: rawValue) ?? FailureType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The description of an Amazon EC2 instance.
    public struct Instance: Swift.Equatable {
        /// The ID of the Amazon EC2 instance.
        public var id: Swift.String?

        public init (
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension ElasticBeanstalkClientTypes.InstanceHealthSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case degraded = "Degraded"
        case info = "Info"
        case noData = "NoData"
        case ok = "Ok"
        case pending = "Pending"
        case severe = "Severe"
        case unknown = "Unknown"
        case warning = "Warning"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let degraded = degraded {
            try container.encode(degraded, forKey: ClientRuntime.Key("Degraded"))
        }
        if let info = info {
            try container.encode(info, forKey: ClientRuntime.Key("Info"))
        }
        if let noData = noData {
            try container.encode(noData, forKey: ClientRuntime.Key("NoData"))
        }
        if let ok = ok {
            try container.encode(ok, forKey: ClientRuntime.Key("Ok"))
        }
        if let pending = pending {
            try container.encode(pending, forKey: ClientRuntime.Key("Pending"))
        }
        if let severe = severe {
            try container.encode(severe, forKey: ClientRuntime.Key("Severe"))
        }
        if let unknown = unknown {
            try container.encode(unknown, forKey: ClientRuntime.Key("Unknown"))
        }
        if let warning = warning {
            try container.encode(warning, forKey: ClientRuntime.Key("Warning"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noDataDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noData)
        noData = noDataDecoded
        let unknownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unknown)
        unknown = unknownDecoded
        let pendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pending)
        pending = pendingDecoded
        let okDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ok)
        ok = okDecoded
        let infoDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .info)
        info = infoDecoded
        let warningDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warning)
        warning = warningDecoded
        let degradedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .degraded)
        degraded = degradedDecoded
        let severeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .severe)
        severe = severeDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Represents summary information about the health of an instance. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
    public struct InstanceHealthSummary: Swift.Equatable {
        /// Red. The health agent is reporting a high number of request failures or other issues for an instance or environment.
        public var degraded: Swift.Int?
        /// Green. An operation is in progress on an instance.
        public var info: Swift.Int?
        /// Grey. AWS Elastic Beanstalk and the health agent are reporting no data on an instance.
        public var noData: Swift.Int?
        /// Green. An instance is passing health checks and the health agent is not reporting any problems.
        public var ok: Swift.Int?
        /// Grey. An operation is in progress on an instance within the command timeout.
        public var pending: Swift.Int?
        /// Red. The health agent is reporting a very high number of request failures or other issues for an instance or environment.
        public var severe: Swift.Int?
        /// Grey. AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.
        public var unknown: Swift.Int?
        /// Yellow. The health agent is reporting a moderate number of request failures or other issues for an instance or environment.
        public var warning: Swift.Int?

        public init (
            degraded: Swift.Int? = nil,
            info: Swift.Int? = nil,
            noData: Swift.Int? = nil,
            ok: Swift.Int? = nil,
            pending: Swift.Int? = nil,
            severe: Swift.Int? = nil,
            unknown: Swift.Int? = nil,
            warning: Swift.Int? = nil
        )
        {
            self.degraded = degraded
            self.info = info
            self.noData = noData
            self.ok = ok
            self.pending = pending
            self.severe = severe
            self.unknown = unknown
            self.warning = warning
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum InstancesHealthAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case applicationmetrics
        case availabilityzone
        case causes
        case color
        case deployment
        case healthstatus
        case instancetype
        case launchedat
        case refreshedat
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [InstancesHealthAttribute] {
            return [
                .all,
                .applicationmetrics,
                .availabilityzone,
                .causes,
                .color,
                .deployment,
                .healthstatus,
                .instancetype,
                .launchedat,
                .refreshedat,
                .system,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .applicationmetrics: return "ApplicationMetrics"
            case .availabilityzone: return "AvailabilityZone"
            case .causes: return "Causes"
            case .color: return "Color"
            case .deployment: return "Deployment"
            case .healthstatus: return "HealthStatus"
            case .instancetype: return "InstanceType"
            case .launchedat: return "LaunchedAt"
            case .refreshedat: return "RefreshedAt"
            case .system: return "System"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstancesHealthAttribute(rawValue: rawValue) ?? InstancesHealthAttribute.sdkUnknown(rawValue)
        }
    }
}

extension InsufficientPrivilegesException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InsufficientPrivilegesExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account does not have sufficient privileges for one or more AWS services.
public struct InsufficientPrivilegesException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientPrivilegesExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InsufficientPrivilegesExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidRequestExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more input parameters is not valid. Please correct the input parameters and try the operation again.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.Latency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case p10 = "P10"
        case p50 = "P50"
        case p75 = "P75"
        case p85 = "P85"
        case p90 = "P90"
        case p95 = "P95"
        case p99 = "P99"
        case p999 = "P999"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let p10 = p10 {
            try container.encode(p10, forKey: ClientRuntime.Key("P10"))
        }
        if let p50 = p50 {
            try container.encode(p50, forKey: ClientRuntime.Key("P50"))
        }
        if let p75 = p75 {
            try container.encode(p75, forKey: ClientRuntime.Key("P75"))
        }
        if let p85 = p85 {
            try container.encode(p85, forKey: ClientRuntime.Key("P85"))
        }
        if let p90 = p90 {
            try container.encode(p90, forKey: ClientRuntime.Key("P90"))
        }
        if let p95 = p95 {
            try container.encode(p95, forKey: ClientRuntime.Key("P95"))
        }
        if let p99 = p99 {
            try container.encode(p99, forKey: ClientRuntime.Key("P99"))
        }
        if let p999 = p999 {
            try container.encode(p999, forKey: ClientRuntime.Key("P999"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let p999Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p999)
        p999 = p999Decoded
        let p99Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p99)
        p99 = p99Decoded
        let p95Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p95)
        p95 = p95Decoded
        let p90Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p90)
        p90 = p90Decoded
        let p85Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p85)
        p85 = p85Decoded
        let p75Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p75)
        p75 = p75Decoded
        let p50Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p50)
        p50 = p50Decoded
        let p10Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .p10)
        p10 = p10Decoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Represents the average latency for the slowest X percent of requests over the last 10 seconds.
    public struct Latency: Swift.Equatable {
        /// The average latency for the slowest 90 percent of requests over the last 10 seconds.
        public var p10: Swift.Double?
        /// The average latency for the slowest 50 percent of requests over the last 10 seconds.
        public var p50: Swift.Double?
        /// The average latency for the slowest 25 percent of requests over the last 10 seconds.
        public var p75: Swift.Double?
        /// The average latency for the slowest 15 percent of requests over the last 10 seconds.
        public var p85: Swift.Double?
        /// The average latency for the slowest 10 percent of requests over the last 10 seconds.
        public var p90: Swift.Double?
        /// The average latency for the slowest 5 percent of requests over the last 10 seconds.
        public var p95: Swift.Double?
        /// The average latency for the slowest 1 percent of requests over the last 10 seconds.
        public var p99: Swift.Double?
        /// The average latency for the slowest 0.1 percent of requests over the last 10 seconds.
        public var p999: Swift.Double?

        public init (
            p10: Swift.Double? = nil,
            p50: Swift.Double? = nil,
            p75: Swift.Double? = nil,
            p85: Swift.Double? = nil,
            p90: Swift.Double? = nil,
            p95: Swift.Double? = nil,
            p99: Swift.Double? = nil,
            p999: Swift.Double? = nil
        )
        {
            self.p10 = p10
            self.p50 = p50
            self.p75 = p75
            self.p85 = p85
            self.p90 = p90
            self.p95 = p95
            self.p99 = p99
            self.p999 = p999
        }
    }

}

extension ElasticBeanstalkClientTypes.LaunchConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes an Auto Scaling launch configuration.
    public struct LaunchConfiguration: Swift.Equatable {
        /// The name of the launch configuration.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ElasticBeanstalkClientTypes.LaunchTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes an Amazon EC2 launch template.
    public struct LaunchTemplate: Swift.Equatable {
        /// The ID of the launch template.
        public var id: Swift.String?

        public init (
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension ListAvailableSolutionStacksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListAvailableSolutionStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAvailableSolutionStacksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAvailableSolutionStacksInput: Swift.Equatable {

    public init () { }
}

extension ListAvailableSolutionStacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAvailableSolutionStacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAvailableSolutionStacksOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAvailableSolutionStacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAvailableSolutionStacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.solutionStackDetails = output.solutionStackDetails
            self.solutionStacks = output.solutionStacks
        } else {
            self.solutionStackDetails = nil
            self.solutionStacks = nil
        }
    }
}

/// A list of available AWS Elastic Beanstalk solution stacks.
public struct ListAvailableSolutionStacksOutputResponse: Swift.Equatable {
    /// A list of available solution stacks and their [SolutionStackDescription].
    public var solutionStackDetails: [ElasticBeanstalkClientTypes.SolutionStackDescription]?
    /// A list of available solution stacks.
    public var solutionStacks: [Swift.String]?

    public init (
        solutionStackDetails: [ElasticBeanstalkClientTypes.SolutionStackDescription]? = nil,
        solutionStacks: [Swift.String]? = nil
    )
    {
        self.solutionStackDetails = solutionStackDetails
        self.solutionStacks = solutionStacks
    }
}

struct ListAvailableSolutionStacksOutputResponseBody: Swift.Equatable {
    let solutionStacks: [Swift.String]?
    let solutionStackDetails: [ElasticBeanstalkClientTypes.SolutionStackDescription]?
}

extension ListAvailableSolutionStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case solutionStackDetails = "SolutionStackDetails"
        case solutionStacks = "SolutionStacks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAvailableSolutionStacksResult"))
        if containerValues.contains(.solutionStacks) {
            struct KeyVal0{struct member{}}
            let solutionStacksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .solutionStacks)
            if let solutionStacksWrappedContainer = solutionStacksWrappedContainer {
                let solutionStacksContainer = try solutionStacksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var solutionStacksBuffer:[Swift.String]? = nil
                if let solutionStacksContainer = solutionStacksContainer {
                    solutionStacksBuffer = [Swift.String]()
                    for stringContainer0 in solutionStacksContainer {
                        solutionStacksBuffer?.append(stringContainer0)
                    }
                }
                solutionStacks = solutionStacksBuffer
            } else {
                solutionStacks = []
            }
        } else {
            solutionStacks = nil
        }
        if containerValues.contains(.solutionStackDetails) {
            struct KeyVal0{struct member{}}
            let solutionStackDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .solutionStackDetails)
            if let solutionStackDetailsWrappedContainer = solutionStackDetailsWrappedContainer {
                let solutionStackDetailsContainer = try solutionStackDetailsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.SolutionStackDescription].self, forKey: .member)
                var solutionStackDetailsBuffer:[ElasticBeanstalkClientTypes.SolutionStackDescription]? = nil
                if let solutionStackDetailsContainer = solutionStackDetailsContainer {
                    solutionStackDetailsBuffer = [ElasticBeanstalkClientTypes.SolutionStackDescription]()
                    for structureContainer0 in solutionStackDetailsContainer {
                        solutionStackDetailsBuffer?.append(structureContainer0)
                    }
                }
                solutionStackDetails = solutionStackDetailsBuffer
            } else {
                solutionStackDetails = []
            }
        } else {
            solutionStackDetails = nil
        }
    }
}

extension ListPlatformBranchesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, searchfilter0) in filters.enumerated() {
                    try filtersContainer.encode(searchfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListPlatformBranches", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListPlatformBranchesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPlatformBranchesInput: Swift.Equatable {
    /// Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate SearchFilter terms. The following list shows valid attribute values for each of the SearchFilter terms. Most operators take a single value. The in and not_in operators can take multiple values.
    ///
    /// * Attribute = BranchName:
    ///
    /// * Operator: = | != | begins_with | ends_with | contains | in | not_in
    ///
    ///
    ///
    ///
    /// * Attribute = LifecycleState:
    ///
    /// * Operator: = | != | in | not_in
    ///
    /// * Values: beta | supported | deprecated | retired
    ///
    ///
    ///
    ///
    /// * Attribute = PlatformName:
    ///
    /// * Operator: = | != | begins_with | ends_with | contains | in | not_in
    ///
    ///
    ///
    ///
    /// * Attribute = TierType:
    ///
    /// * Operator: = | !=
    ///
    /// * Values: WebServer/Standard | Worker/SQS/HTTP
    ///
    ///
    ///
    ///
    ///
    /// Array size: limited to 10 SearchFilter objects. Within each SearchFilter item, the Values array is limited to 10 items.
    public var filters: [ElasticBeanstalkClientTypes.SearchFilter]?
    /// The maximum number of platform branch values returned in one call.
    public var maxRecords: Swift.Int?
    /// For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request. If no NextToken is specified, the first page is retrieved.
    public var nextToken: Swift.String?

    public init (
        filters: [ElasticBeanstalkClientTypes.SearchFilter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct ListPlatformBranchesInputBody: Swift.Equatable {
    let filters: [ElasticBeanstalkClientTypes.SearchFilter]?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension ListPlatformBranchesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.SearchFilter].self, forKey: .member)
                var filtersBuffer:[ElasticBeanstalkClientTypes.SearchFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [ElasticBeanstalkClientTypes.SearchFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPlatformBranchesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPlatformBranchesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPlatformBranchesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPlatformBranchesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPlatformBranchesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.platformBranchSummaryList = output.platformBranchSummaryList
        } else {
            self.nextToken = nil
            self.platformBranchSummaryList = nil
        }
    }
}

public struct ListPlatformBranchesOutputResponse: Swift.Equatable {
    /// In a paginated request, if this value isn't null, it's the token that you can pass in a subsequent request to get the next response page.
    public var nextToken: Swift.String?
    /// Summary information about the platform branches.
    public var platformBranchSummaryList: [ElasticBeanstalkClientTypes.PlatformBranchSummary]?

    public init (
        nextToken: Swift.String? = nil,
        platformBranchSummaryList: [ElasticBeanstalkClientTypes.PlatformBranchSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.platformBranchSummaryList = platformBranchSummaryList
    }
}

struct ListPlatformBranchesOutputResponseBody: Swift.Equatable {
    let platformBranchSummaryList: [ElasticBeanstalkClientTypes.PlatformBranchSummary]?
    let nextToken: Swift.String?
}

extension ListPlatformBranchesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case platformBranchSummaryList = "PlatformBranchSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPlatformBranchesResult"))
        if containerValues.contains(.platformBranchSummaryList) {
            struct KeyVal0{struct member{}}
            let platformBranchSummaryListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .platformBranchSummaryList)
            if let platformBranchSummaryListWrappedContainer = platformBranchSummaryListWrappedContainer {
                let platformBranchSummaryListContainer = try platformBranchSummaryListWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.PlatformBranchSummary].self, forKey: .member)
                var platformBranchSummaryListBuffer:[ElasticBeanstalkClientTypes.PlatformBranchSummary]? = nil
                if let platformBranchSummaryListContainer = platformBranchSummaryListContainer {
                    platformBranchSummaryListBuffer = [ElasticBeanstalkClientTypes.PlatformBranchSummary]()
                    for structureContainer0 in platformBranchSummaryListContainer {
                        platformBranchSummaryListBuffer?.append(structureContainer0)
                    }
                }
                platformBranchSummaryList = platformBranchSummaryListBuffer
            } else {
                platformBranchSummaryList = []
            }
        } else {
            platformBranchSummaryList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPlatformVersionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, platformfilter0) in filters.enumerated() {
                    try filtersContainer.encode(platformfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListPlatformVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListPlatformVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPlatformVersionsInput: Swift.Equatable {
    /// Criteria for restricting the resulting list of platform versions. The filter is interpreted as a logical conjunction (AND) of the separate PlatformFilter terms.
    public var filters: [ElasticBeanstalkClientTypes.PlatformFilter]?
    /// The maximum number of platform version values returned in one call.
    public var maxRecords: Swift.Int?
    /// For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request. If no NextToken is specified, the first page is retrieved.
    public var nextToken: Swift.String?

    public init (
        filters: [ElasticBeanstalkClientTypes.PlatformFilter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct ListPlatformVersionsInputBody: Swift.Equatable {
    let filters: [ElasticBeanstalkClientTypes.PlatformFilter]?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension ListPlatformVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.PlatformFilter].self, forKey: .member)
                var filtersBuffer:[ElasticBeanstalkClientTypes.PlatformFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [ElasticBeanstalkClientTypes.PlatformFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPlatformVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPlatformVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ElasticBeanstalkServiceException" : self = .elasticBeanstalkServiceException(try ElasticBeanstalkServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPlatformVersionsOutputError: Swift.Error, Swift.Equatable {
    case elasticBeanstalkServiceException(ElasticBeanstalkServiceException)
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPlatformVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPlatformVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.platformSummaryList = output.platformSummaryList
        } else {
            self.nextToken = nil
            self.platformSummaryList = nil
        }
    }
}

public struct ListPlatformVersionsOutputResponse: Swift.Equatable {
    /// In a paginated request, if this value isn't null, it's the token that you can pass in a subsequent request to get the next response page.
    public var nextToken: Swift.String?
    /// Summary information about the platform versions.
    public var platformSummaryList: [ElasticBeanstalkClientTypes.PlatformSummary]?

    public init (
        nextToken: Swift.String? = nil,
        platformSummaryList: [ElasticBeanstalkClientTypes.PlatformSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.platformSummaryList = platformSummaryList
    }
}

struct ListPlatformVersionsOutputResponseBody: Swift.Equatable {
    let platformSummaryList: [ElasticBeanstalkClientTypes.PlatformSummary]?
    let nextToken: Swift.String?
}

extension ListPlatformVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case platformSummaryList = "PlatformSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPlatformVersionsResult"))
        if containerValues.contains(.platformSummaryList) {
            struct KeyVal0{struct member{}}
            let platformSummaryListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .platformSummaryList)
            if let platformSummaryListWrappedContainer = platformSummaryListWrappedContainer {
                let platformSummaryListContainer = try platformSummaryListWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.PlatformSummary].self, forKey: .member)
                var platformSummaryListBuffer:[ElasticBeanstalkClientTypes.PlatformSummary]? = nil
                if let platformSummaryListContainer = platformSummaryListContainer {
                    platformSummaryListBuffer = [ElasticBeanstalkClientTypes.PlatformSummary]()
                    for structureContainer0 in platformSummaryListContainer {
                        platformSummaryListBuffer?.append(structureContainer0)
                    }
                }
                platformSummaryList = platformSummaryListBuffer
            } else {
                platformSummaryList = []
            }
        } else {
            platformSummaryList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("ListTagsForResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resouce for which a tag list is requested. Must be the ARN of an Elastic Beanstalk resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceTypeNotSupportedException" : self = .resourceTypeNotSupportedException(try ResourceTypeNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceTypeNotSupportedException(ResourceTypeNotSupportedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArn = output.resourceArn
            self.resourceTags = output.resourceTags
        } else {
            self.resourceArn = nil
            self.resourceTags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource for which a tag list was requested.
    public var resourceArn: Swift.String?
    /// A list of tag key-value pairs.
    public var resourceTags: [ElasticBeanstalkClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        resourceTags: [ElasticBeanstalkClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceTags = resourceTags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let resourceTags: [ElasticBeanstalkClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case resourceTags = "ResourceTags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTagsForResourceResult"))
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        if containerValues.contains(.resourceTags) {
            struct KeyVal0{struct member{}}
            let resourceTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTags)
            if let resourceTagsWrappedContainer = resourceTagsWrappedContainer {
                let resourceTagsContainer = try resourceTagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var resourceTagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let resourceTagsContainer = resourceTagsContainer {
                    resourceTagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in resourceTagsContainer {
                        resourceTagsBuffer?.append(structureContainer0)
                    }
                }
                resourceTags = resourceTagsBuffer
            } else {
                resourceTags = []
            }
        } else {
            resourceTags = nil
        }
    }
}

extension ElasticBeanstalkClientTypes.Listener: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case port = "Port"
        case `protocol` = "Protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if port != 0 {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the properties of a Listener for the LoadBalancer.
    public struct Listener: Swift.Equatable {
        /// The port that is used by the Listener.
        public var port: Swift.Int
        /// The protocol that is used by the Listener.
        public var `protocol`: Swift.String?

        public init (
            port: Swift.Int = 0,
            `protocol`: Swift.String? = nil
        )
        {
            self.port = port
            self.`protocol` = `protocol`
        }
    }

}

extension ElasticBeanstalkClientTypes.LoadBalancer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes a LoadBalancer.
    public struct LoadBalancer: Swift.Equatable {
        /// The name of the LoadBalancer.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ElasticBeanstalkClientTypes.LoadBalancerDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case listeners = "Listeners"
        case loadBalancerName = "LoadBalancerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let listeners = listeners {
            if !listeners.isEmpty {
                var listenersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Listeners"))
                for (index0, listener0) in listeners.enumerated() {
                    try listenersContainer.encode(listener0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var listenersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Listeners"))
                try listenersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let loadBalancerName = loadBalancerName {
            try container.encode(loadBalancerName, forKey: ClientRuntime.Key("LoadBalancerName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        if containerValues.contains(.listeners) {
            struct KeyVal0{struct member{}}
            let listenersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .listeners)
            if let listenersWrappedContainer = listenersWrappedContainer {
                let listenersContainer = try listenersWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Listener].self, forKey: .member)
                var listenersBuffer:[ElasticBeanstalkClientTypes.Listener]? = nil
                if let listenersContainer = listenersContainer {
                    listenersBuffer = [ElasticBeanstalkClientTypes.Listener]()
                    for structureContainer0 in listenersContainer {
                        listenersBuffer?.append(structureContainer0)
                    }
                }
                listeners = listenersBuffer
            } else {
                listeners = []
            }
        } else {
            listeners = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the details of a LoadBalancer.
    public struct LoadBalancerDescription: Swift.Equatable {
        /// The domain name of the LoadBalancer.
        public var domain: Swift.String?
        /// A list of Listeners used by the LoadBalancer.
        public var listeners: [ElasticBeanstalkClientTypes.Listener]?
        /// The name of the LoadBalancer.
        public var loadBalancerName: Swift.String?

        public init (
            domain: Swift.String? = nil,
            listeners: [ElasticBeanstalkClientTypes.Listener]? = nil,
            loadBalancerName: Swift.String? = nil
        )
        {
            self.domain = domain
            self.listeners = listeners
            self.loadBalancerName = loadBalancerName
        }
    }

}

extension ElasticBeanstalkClientTypes.ManagedAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionDescription = "ActionDescription"
        case actionId = "ActionId"
        case actionType = "ActionType"
        case status = "Status"
        case windowStartTime = "WindowStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionDescription = actionDescription {
            try container.encode(actionDescription, forKey: ClientRuntime.Key("ActionDescription"))
        }
        if let actionId = actionId {
            try container.encode(actionId, forKey: ClientRuntime.Key("ActionId"))
        }
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let windowStartTime = windowStartTime {
            try container.encodeTimestamp(windowStartTime, format: .dateTime, forKey: ClientRuntime.Key("windowStartTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionDescription)
        actionDescription = actionDescriptionDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let windowStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .windowStartTime)
        windowStartTime = windowStartTimeDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The record of an upcoming or in-progress managed action.
    public struct ManagedAction: Swift.Equatable {
        /// A description of the managed action.
        public var actionDescription: Swift.String?
        /// A unique identifier for the managed action.
        public var actionId: Swift.String?
        /// The type of managed action.
        public var actionType: ElasticBeanstalkClientTypes.ActionType?
        /// The status of the managed action. If the action is Scheduled, you can apply it immediately with [ApplyEnvironmentManagedAction].
        public var status: ElasticBeanstalkClientTypes.ActionStatus?
        /// The start time of the maintenance window in which the managed action will execute.
        public var windowStartTime: ClientRuntime.Date?

        public init (
            actionDescription: Swift.String? = nil,
            actionId: Swift.String? = nil,
            actionType: ElasticBeanstalkClientTypes.ActionType? = nil,
            status: ElasticBeanstalkClientTypes.ActionStatus? = nil,
            windowStartTime: ClientRuntime.Date? = nil
        )
        {
            self.actionDescription = actionDescription
            self.actionId = actionId
            self.actionType = actionType
            self.status = status
            self.windowStartTime = windowStartTime
        }
    }

}

extension ElasticBeanstalkClientTypes.ManagedActionHistoryItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionDescription = "ActionDescription"
        case actionId = "ActionId"
        case actionType = "ActionType"
        case executedTime = "ExecutedTime"
        case failureDescription = "FailureDescription"
        case failureType = "FailureType"
        case finishedTime = "FinishedTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionDescription = actionDescription {
            try container.encode(actionDescription, forKey: ClientRuntime.Key("ActionDescription"))
        }
        if let actionId = actionId {
            try container.encode(actionId, forKey: ClientRuntime.Key("ActionId"))
        }
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let executedTime = executedTime {
            try container.encodeTimestamp(executedTime, format: .dateTime, forKey: ClientRuntime.Key("executedTime"))
        }
        if let failureDescription = failureDescription {
            try container.encode(failureDescription, forKey: ClientRuntime.Key("FailureDescription"))
        }
        if let failureType = failureType {
            try container.encode(failureType, forKey: ClientRuntime.Key("FailureType"))
        }
        if let finishedTime = finishedTime {
            try container.encodeTimestamp(finishedTime, format: .dateTime, forKey: ClientRuntime.Key("finishedTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionDescription)
        actionDescription = actionDescriptionDecoded
        let failureTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.FailureType.self, forKey: .failureType)
        failureType = failureTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionHistoryStatus.self, forKey: .status)
        status = statusDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
        let executedTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .executedTime)
        executedTime = executedTimeDecoded
        let finishedTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .finishedTime)
        finishedTime = finishedTimeDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The record of a completed or failed managed action.
    public struct ManagedActionHistoryItem: Swift.Equatable {
        /// A description of the managed action.
        public var actionDescription: Swift.String?
        /// A unique identifier for the managed action.
        public var actionId: Swift.String?
        /// The type of the managed action.
        public var actionType: ElasticBeanstalkClientTypes.ActionType?
        /// The date and time that the action started executing.
        public var executedTime: ClientRuntime.Date?
        /// If the action failed, a description of the failure.
        public var failureDescription: Swift.String?
        /// If the action failed, the type of failure.
        public var failureType: ElasticBeanstalkClientTypes.FailureType?
        /// The date and time that the action finished executing.
        public var finishedTime: ClientRuntime.Date?
        /// The status of the action.
        public var status: ElasticBeanstalkClientTypes.ActionHistoryStatus?

        public init (
            actionDescription: Swift.String? = nil,
            actionId: Swift.String? = nil,
            actionType: ElasticBeanstalkClientTypes.ActionType? = nil,
            executedTime: ClientRuntime.Date? = nil,
            failureDescription: Swift.String? = nil,
            failureType: ElasticBeanstalkClientTypes.FailureType? = nil,
            finishedTime: ClientRuntime.Date? = nil,
            status: ElasticBeanstalkClientTypes.ActionHistoryStatus? = nil
        )
        {
            self.actionDescription = actionDescription
            self.actionId = actionId
            self.actionType = actionType
            self.executedTime = executedTime
            self.failureDescription = failureDescription
            self.failureType = failureType
            self.finishedTime = finishedTime
            self.status = status
        }
    }

}

extension ManagedActionInvalidStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ManagedActionInvalidStateExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Cannot modify the managed action in its current state.
public struct ManagedActionInvalidStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ManagedActionInvalidStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ManagedActionInvalidStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.MaxAgeRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteSourceFromS3 = "DeleteSourceFromS3"
        case enabled = "Enabled"
        case maxAgeInDays = "MaxAgeInDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deleteSourceFromS3 = deleteSourceFromS3 {
            try container.encode(deleteSourceFromS3, forKey: ClientRuntime.Key("DeleteSourceFromS3"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let maxAgeInDays = maxAgeInDays {
            try container.encode(maxAgeInDays, forKey: ClientRuntime.Key("MaxAgeInDays"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let maxAgeInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAgeInDays)
        maxAgeInDays = maxAgeInDaysDecoded
        let deleteSourceFromS3Decoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteSourceFromS3)
        deleteSourceFromS3 = deleteSourceFromS3Decoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A lifecycle rule that deletes application versions after the specified number of days.
    public struct MaxAgeRule: Swift.Equatable {
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public var deleteSourceFromS3: Swift.Bool?
        /// Specify true to apply the rule, or false to disable it.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specify the number of days to retain an application versions.
        public var maxAgeInDays: Swift.Int?

        public init (
            deleteSourceFromS3: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            maxAgeInDays: Swift.Int? = nil
        )
        {
            self.deleteSourceFromS3 = deleteSourceFromS3
            self.enabled = enabled
            self.maxAgeInDays = maxAgeInDays
        }
    }

}

extension ElasticBeanstalkClientTypes.MaxCountRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteSourceFromS3 = "DeleteSourceFromS3"
        case enabled = "Enabled"
        case maxCount = "MaxCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deleteSourceFromS3 = deleteSourceFromS3 {
            try container.encode(deleteSourceFromS3, forKey: ClientRuntime.Key("DeleteSourceFromS3"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let maxCount = maxCount {
            try container.encode(maxCount, forKey: ClientRuntime.Key("MaxCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let maxCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCount)
        maxCount = maxCountDecoded
        let deleteSourceFromS3Decoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteSourceFromS3)
        deleteSourceFromS3 = deleteSourceFromS3Decoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A lifecycle rule that deletes the oldest application version when the maximum count is exceeded.
    public struct MaxCountRule: Swift.Equatable {
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public var deleteSourceFromS3: Swift.Bool?
        /// Specify true to apply the rule, or false to disable it.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specify the maximum number of application versions to retain.
        public var maxCount: Swift.Int?

        public init (
            deleteSourceFromS3: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            maxCount: Swift.Int? = nil
        )
        {
            self.deleteSourceFromS3 = deleteSourceFromS3
            self.enabled = enabled
            self.maxCount = maxCount
        }
    }

}

extension OperationInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<OperationInProgressExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to perform the specified operation because another operation that effects an element in this activity is already in progress.
public struct OperationInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationInProgressExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.OptionRestrictionRegex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case label = "Label"
        case pattern = "Pattern"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let pattern = pattern {
            try container.encode(pattern, forKey: ClientRuntime.Key("Pattern"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pattern)
        pattern = patternDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A regular expression representing a restriction on a string configuration option value.
    public struct OptionRestrictionRegex: Swift.Equatable {
        /// A unique name representing this regular expression.
        public var label: Swift.String?
        /// The regular expression pattern that a string configuration option value with this restriction must match.
        public var pattern: Swift.String?

        public init (
            label: Swift.String? = nil,
            pattern: Swift.String? = nil
        )
        {
            self.label = label
            self.pattern = pattern
        }
    }

}

extension ElasticBeanstalkClientTypes.OptionSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case namespace = "Namespace"
        case optionName = "OptionName"
        case resourceName = "ResourceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: ClientRuntime.Key("OptionName"))
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let optionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionName)
        optionName = optionNameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A specification identifying an individual configuration option.
    public struct OptionSpecification: Swift.Equatable {
        /// A unique namespace identifying the option's associated AWS resource.
        public var namespace: Swift.String?
        /// The name of the configuration option.
        public var optionName: Swift.String?
        /// A unique resource name for a time-based scaling configuration option.
        public var resourceName: Swift.String?

        public init (
            namespace: Swift.String? = nil,
            optionName: Swift.String? = nil,
            resourceName: Swift.String? = nil
        )
        {
            self.namespace = namespace
            self.optionName = optionName
            self.resourceName = resourceName
        }
    }

}

extension ElasticBeanstalkClientTypes.PlatformBranchSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchName = "BranchName"
        case branchOrder = "BranchOrder"
        case lifecycleState = "LifecycleState"
        case platformName = "PlatformName"
        case supportedTierList = "SupportedTierList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let branchName = branchName {
            try container.encode(branchName, forKey: ClientRuntime.Key("BranchName"))
        }
        if branchOrder != 0 {
            try container.encode(branchOrder, forKey: ClientRuntime.Key("BranchOrder"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: ClientRuntime.Key("LifecycleState"))
        }
        if let platformName = platformName {
            try container.encode(platformName, forKey: ClientRuntime.Key("PlatformName"))
        }
        if let supportedTierList = supportedTierList {
            if !supportedTierList.isEmpty {
                var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
                for (index0, supportedtier0) in supportedTierList.enumerated() {
                    try supportedTierListContainer.encode(supportedtier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
                try supportedTierListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformName)
        platformName = platformNameDecoded
        let branchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let branchOrderDecoded = try containerValues.decode(Swift.Int.self, forKey: .branchOrder)
        branchOrder = branchOrderDecoded
        if containerValues.contains(.supportedTierList) {
            struct KeyVal0{struct member{}}
            let supportedTierListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedTierList)
            if let supportedTierListWrappedContainer = supportedTierListWrappedContainer {
                let supportedTierListContainer = try supportedTierListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedTierListBuffer:[Swift.String]? = nil
                if let supportedTierListContainer = supportedTierListContainer {
                    supportedTierListBuffer = [Swift.String]()
                    for stringContainer0 in supportedTierListContainer {
                        supportedTierListBuffer?.append(stringContainer0)
                    }
                }
                supportedTierList = supportedTierListBuffer
            } else {
                supportedTierList = []
            }
        } else {
            supportedTierList = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Summary information about a platform branch.
    public struct PlatformBranchSummary: Swift.Equatable {
        /// The name of the platform branch.
        public var branchName: Swift.String?
        /// An ordinal number that designates the order in which platform branches have been added to a platform. This can be helpful, for example, if your code calls the ListPlatformBranches action and then displays a list of platform branches. A larger BranchOrder value designates a newer platform branch within the platform.
        public var branchOrder: Swift.Int
        /// The support life cycle state of the platform branch. Possible values: beta | supported | deprecated | retired
        public var lifecycleState: Swift.String?
        /// The name of the platform to which this platform branch belongs.
        public var platformName: Swift.String?
        /// The environment tiers that platform versions in this branch support. Possible values: WebServer/Standard | Worker/SQS/HTTP
        public var supportedTierList: [Swift.String]?

        public init (
            branchName: Swift.String? = nil,
            branchOrder: Swift.Int = 0,
            lifecycleState: Swift.String? = nil,
            platformName: Swift.String? = nil,
            supportedTierList: [Swift.String]? = nil
        )
        {
            self.branchName = branchName
            self.branchOrder = branchOrder
            self.lifecycleState = lifecycleState
            self.platformName = platformName
            self.supportedTierList = supportedTierList
        }
    }

}

extension ElasticBeanstalkClientTypes.PlatformDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customAmiList = "CustomAmiList"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case frameworks = "Frameworks"
        case maintainer = "Maintainer"
        case operatingSystemName = "OperatingSystemName"
        case operatingSystemVersion = "OperatingSystemVersion"
        case platformArn = "PlatformArn"
        case platformBranchLifecycleState = "PlatformBranchLifecycleState"
        case platformBranchName = "PlatformBranchName"
        case platformCategory = "PlatformCategory"
        case platformLifecycleState = "PlatformLifecycleState"
        case platformName = "PlatformName"
        case platformOwner = "PlatformOwner"
        case platformStatus = "PlatformStatus"
        case platformVersion = "PlatformVersion"
        case programmingLanguages = "ProgrammingLanguages"
        case solutionStackName = "SolutionStackName"
        case supportedAddonList = "SupportedAddonList"
        case supportedTierList = "SupportedTierList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customAmiList = customAmiList {
            if !customAmiList.isEmpty {
                var customAmiListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CustomAmiList"))
                for (index0, customami0) in customAmiList.enumerated() {
                    try customAmiListContainer.encode(customami0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var customAmiListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CustomAmiList"))
                try customAmiListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dateCreated = dateCreated {
            try container.encodeTimestamp(dateCreated, format: .dateTime, forKey: ClientRuntime.Key("dateCreated"))
        }
        if let dateUpdated = dateUpdated {
            try container.encodeTimestamp(dateUpdated, format: .dateTime, forKey: ClientRuntime.Key("dateUpdated"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let frameworks = frameworks {
            if !frameworks.isEmpty {
                var frameworksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Frameworks"))
                for (index0, platformframework0) in frameworks.enumerated() {
                    try frameworksContainer.encode(platformframework0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var frameworksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Frameworks"))
                try frameworksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maintainer = maintainer {
            try container.encode(maintainer, forKey: ClientRuntime.Key("Maintainer"))
        }
        if let operatingSystemName = operatingSystemName {
            try container.encode(operatingSystemName, forKey: ClientRuntime.Key("OperatingSystemName"))
        }
        if let operatingSystemVersion = operatingSystemVersion {
            try container.encode(operatingSystemVersion, forKey: ClientRuntime.Key("OperatingSystemVersion"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let platformBranchLifecycleState = platformBranchLifecycleState {
            try container.encode(platformBranchLifecycleState, forKey: ClientRuntime.Key("PlatformBranchLifecycleState"))
        }
        if let platformBranchName = platformBranchName {
            try container.encode(platformBranchName, forKey: ClientRuntime.Key("PlatformBranchName"))
        }
        if let platformCategory = platformCategory {
            try container.encode(platformCategory, forKey: ClientRuntime.Key("PlatformCategory"))
        }
        if let platformLifecycleState = platformLifecycleState {
            try container.encode(platformLifecycleState, forKey: ClientRuntime.Key("PlatformLifecycleState"))
        }
        if let platformName = platformName {
            try container.encode(platformName, forKey: ClientRuntime.Key("PlatformName"))
        }
        if let platformOwner = platformOwner {
            try container.encode(platformOwner, forKey: ClientRuntime.Key("PlatformOwner"))
        }
        if let platformStatus = platformStatus {
            try container.encode(platformStatus, forKey: ClientRuntime.Key("PlatformStatus"))
        }
        if let platformVersion = platformVersion {
            try container.encode(platformVersion, forKey: ClientRuntime.Key("PlatformVersion"))
        }
        if let programmingLanguages = programmingLanguages {
            if !programmingLanguages.isEmpty {
                var programmingLanguagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProgrammingLanguages"))
                for (index0, platformprogramminglanguage0) in programmingLanguages.enumerated() {
                    try programmingLanguagesContainer.encode(platformprogramminglanguage0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var programmingLanguagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProgrammingLanguages"))
                try programmingLanguagesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let supportedAddonList = supportedAddonList {
            if !supportedAddonList.isEmpty {
                var supportedAddonListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedAddonList"))
                for (index0, supportedaddon0) in supportedAddonList.enumerated() {
                    try supportedAddonListContainer.encode(supportedaddon0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedAddonListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedAddonList"))
                try supportedAddonListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedTierList = supportedTierList {
            if !supportedTierList.isEmpty {
                var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
                for (index0, supportedtier0) in supportedTierList.enumerated() {
                    try supportedTierListContainer.encode(supportedtier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
                try supportedTierListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let platformOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformOwner)
        platformOwner = platformOwnerDecoded
        let platformNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformName)
        platformName = platformNameDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.PlatformStatus.self, forKey: .platformStatus)
        platformStatus = platformStatusDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let platformCategoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformCategory)
        platformCategory = platformCategoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let maintainerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintainer)
        maintainer = maintainerDecoded
        let operatingSystemNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystemName)
        operatingSystemName = operatingSystemNameDecoded
        let operatingSystemVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystemVersion)
        operatingSystemVersion = operatingSystemVersionDecoded
        if containerValues.contains(.programmingLanguages) {
            struct KeyVal0{struct member{}}
            let programmingLanguagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .programmingLanguages)
            if let programmingLanguagesWrappedContainer = programmingLanguagesWrappedContainer {
                let programmingLanguagesContainer = try programmingLanguagesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.PlatformProgrammingLanguage].self, forKey: .member)
                var programmingLanguagesBuffer:[ElasticBeanstalkClientTypes.PlatformProgrammingLanguage]? = nil
                if let programmingLanguagesContainer = programmingLanguagesContainer {
                    programmingLanguagesBuffer = [ElasticBeanstalkClientTypes.PlatformProgrammingLanguage]()
                    for structureContainer0 in programmingLanguagesContainer {
                        programmingLanguagesBuffer?.append(structureContainer0)
                    }
                }
                programmingLanguages = programmingLanguagesBuffer
            } else {
                programmingLanguages = []
            }
        } else {
            programmingLanguages = nil
        }
        if containerValues.contains(.frameworks) {
            struct KeyVal0{struct member{}}
            let frameworksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .frameworks)
            if let frameworksWrappedContainer = frameworksWrappedContainer {
                let frameworksContainer = try frameworksWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.PlatformFramework].self, forKey: .member)
                var frameworksBuffer:[ElasticBeanstalkClientTypes.PlatformFramework]? = nil
                if let frameworksContainer = frameworksContainer {
                    frameworksBuffer = [ElasticBeanstalkClientTypes.PlatformFramework]()
                    for structureContainer0 in frameworksContainer {
                        frameworksBuffer?.append(structureContainer0)
                    }
                }
                frameworks = frameworksBuffer
            } else {
                frameworks = []
            }
        } else {
            frameworks = nil
        }
        if containerValues.contains(.customAmiList) {
            struct KeyVal0{struct member{}}
            let customAmiListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .customAmiList)
            if let customAmiListWrappedContainer = customAmiListWrappedContainer {
                let customAmiListContainer = try customAmiListWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.CustomAmi].self, forKey: .member)
                var customAmiListBuffer:[ElasticBeanstalkClientTypes.CustomAmi]? = nil
                if let customAmiListContainer = customAmiListContainer {
                    customAmiListBuffer = [ElasticBeanstalkClientTypes.CustomAmi]()
                    for structureContainer0 in customAmiListContainer {
                        customAmiListBuffer?.append(structureContainer0)
                    }
                }
                customAmiList = customAmiListBuffer
            } else {
                customAmiList = []
            }
        } else {
            customAmiList = nil
        }
        if containerValues.contains(.supportedTierList) {
            struct KeyVal0{struct member{}}
            let supportedTierListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedTierList)
            if let supportedTierListWrappedContainer = supportedTierListWrappedContainer {
                let supportedTierListContainer = try supportedTierListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedTierListBuffer:[Swift.String]? = nil
                if let supportedTierListContainer = supportedTierListContainer {
                    supportedTierListBuffer = [Swift.String]()
                    for stringContainer0 in supportedTierListContainer {
                        supportedTierListBuffer?.append(stringContainer0)
                    }
                }
                supportedTierList = supportedTierListBuffer
            } else {
                supportedTierList = []
            }
        } else {
            supportedTierList = nil
        }
        if containerValues.contains(.supportedAddonList) {
            struct KeyVal0{struct member{}}
            let supportedAddonListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedAddonList)
            if let supportedAddonListWrappedContainer = supportedAddonListWrappedContainer {
                let supportedAddonListContainer = try supportedAddonListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedAddonListBuffer:[Swift.String]? = nil
                if let supportedAddonListContainer = supportedAddonListContainer {
                    supportedAddonListBuffer = [Swift.String]()
                    for stringContainer0 in supportedAddonListContainer {
                        supportedAddonListBuffer?.append(stringContainer0)
                    }
                }
                supportedAddonList = supportedAddonListBuffer
            } else {
                supportedAddonList = []
            }
        } else {
            supportedAddonList = nil
        }
        let platformLifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformLifecycleState)
        platformLifecycleState = platformLifecycleStateDecoded
        let platformBranchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformBranchName)
        platformBranchName = platformBranchNameDecoded
        let platformBranchLifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformBranchLifecycleState)
        platformBranchLifecycleState = platformBranchLifecycleStateDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Detailed information about a platform version.
    public struct PlatformDescription: Swift.Equatable {
        /// The custom AMIs supported by the platform version.
        public var customAmiList: [ElasticBeanstalkClientTypes.CustomAmi]?
        /// The date when the platform version was created.
        public var dateCreated: ClientRuntime.Date?
        /// The date when the platform version was last updated.
        public var dateUpdated: ClientRuntime.Date?
        /// The description of the platform version.
        public var description: Swift.String?
        /// The frameworks supported by the platform version.
        public var frameworks: [ElasticBeanstalkClientTypes.PlatformFramework]?
        /// Information about the maintainer of the platform version.
        public var maintainer: Swift.String?
        /// The operating system used by the platform version.
        public var operatingSystemName: Swift.String?
        /// The version of the operating system used by the platform version.
        public var operatingSystemVersion: Swift.String?
        /// The ARN of the platform version.
        public var platformArn: Swift.String?
        /// The state of the platform version's branch in its lifecycle. Possible values: Beta | Supported | Deprecated | Retired
        public var platformBranchLifecycleState: Swift.String?
        /// The platform branch to which the platform version belongs.
        public var platformBranchName: Swift.String?
        /// The category of the platform version.
        public var platformCategory: Swift.String?
        /// The state of the platform version in its lifecycle. Possible values: Recommended | null If a null value is returned, the platform version isn't the recommended one for its branch. Each platform branch has a single recommended platform version, typically the most recent one.
        public var platformLifecycleState: Swift.String?
        /// The name of the platform version.
        public var platformName: Swift.String?
        /// The AWS account ID of the person who created the platform version.
        public var platformOwner: Swift.String?
        /// The status of the platform version.
        public var platformStatus: ElasticBeanstalkClientTypes.PlatformStatus?
        /// The version of the platform version.
        public var platformVersion: Swift.String?
        /// The programming languages supported by the platform version.
        public var programmingLanguages: [ElasticBeanstalkClientTypes.PlatformProgrammingLanguage]?
        /// The name of the solution stack used by the platform version.
        public var solutionStackName: Swift.String?
        /// The additions supported by the platform version.
        public var supportedAddonList: [Swift.String]?
        /// The tiers supported by the platform version.
        public var supportedTierList: [Swift.String]?

        public init (
            customAmiList: [ElasticBeanstalkClientTypes.CustomAmi]? = nil,
            dateCreated: ClientRuntime.Date? = nil,
            dateUpdated: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            frameworks: [ElasticBeanstalkClientTypes.PlatformFramework]? = nil,
            maintainer: Swift.String? = nil,
            operatingSystemName: Swift.String? = nil,
            operatingSystemVersion: Swift.String? = nil,
            platformArn: Swift.String? = nil,
            platformBranchLifecycleState: Swift.String? = nil,
            platformBranchName: Swift.String? = nil,
            platformCategory: Swift.String? = nil,
            platformLifecycleState: Swift.String? = nil,
            platformName: Swift.String? = nil,
            platformOwner: Swift.String? = nil,
            platformStatus: ElasticBeanstalkClientTypes.PlatformStatus? = nil,
            platformVersion: Swift.String? = nil,
            programmingLanguages: [ElasticBeanstalkClientTypes.PlatformProgrammingLanguage]? = nil,
            solutionStackName: Swift.String? = nil,
            supportedAddonList: [Swift.String]? = nil,
            supportedTierList: [Swift.String]? = nil
        )
        {
            self.customAmiList = customAmiList
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.description = description
            self.frameworks = frameworks
            self.maintainer = maintainer
            self.operatingSystemName = operatingSystemName
            self.operatingSystemVersion = operatingSystemVersion
            self.platformArn = platformArn
            self.platformBranchLifecycleState = platformBranchLifecycleState
            self.platformBranchName = platformBranchName
            self.platformCategory = platformCategory
            self.platformLifecycleState = platformLifecycleState
            self.platformName = platformName
            self.platformOwner = platformOwner
            self.platformStatus = platformStatus
            self.platformVersion = platformVersion
            self.programmingLanguages = programmingLanguages
            self.solutionStackName = solutionStackName
            self.supportedAddonList = supportedAddonList
            self.supportedTierList = supportedTierList
        }
    }

}

extension ElasticBeanstalkClientTypes.PlatformFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `operator` = "Operator"
        case type = "Type"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let `operator` = `operator` {
            try container.encode(`operator`, forKey: ClientRuntime.Key("Operator"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, platformfiltervalue0) in values.enumerated() {
                    try valuesContainer.encode(platformfiltervalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operator)
        `operator` = operatorDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes criteria to restrict the results when listing platform versions. The filter is evaluated as follows: Type Operator Values[1]
    public struct PlatformFilter: Swift.Equatable {
        /// The operator to apply to the Type with each of the Values. Valid values: = | != | < | <= | > | >= | contains | begins_with | ends_with
        public var `operator`: Swift.String?
        /// The platform version attribute to which the filter values are applied. Valid values: PlatformName | PlatformVersion | PlatformStatus | PlatformBranchName | PlatformLifecycleState | PlatformOwner | SupportedTier | SupportedAddon | ProgrammingLanguageName | OperatingSystemName
        public var type: Swift.String?
        /// The list of values applied to the filtering platform version attribute. Only one value is supported for all current operators. The following list shows valid filter values for some filter attributes.
        ///
        /// * PlatformStatus: Creating | Failed | Ready | Deleting | Deleted
        ///
        /// * PlatformLifecycleState: recommended
        ///
        /// * SupportedTier: WebServer/Standard | Worker/SQS/HTTP
        ///
        /// * SupportedAddon: Log/S3 | Monitoring/Healthd | WorkerDaemon/SQSD
        public var values: [Swift.String]?

        public init (
            `operator`: Swift.String? = nil,
            type: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.`operator` = `operator`
            self.type = type
            self.values = values
        }
    }

}

extension ElasticBeanstalkClientTypes.PlatformFramework: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A framework supported by the platform.
    public struct PlatformFramework: Swift.Equatable {
        /// The name of the framework.
        public var name: Swift.String?
        /// The version of the framework.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension ElasticBeanstalkClientTypes.PlatformProgrammingLanguage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A programming language supported by the platform.
    public struct PlatformProgrammingLanguage: Swift.Equatable {
        /// The name of the programming language.
        public var name: Swift.String?
        /// The version of the programming language.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum PlatformStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case failed
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .failed,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .ready: return "Ready"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlatformStatus(rawValue: rawValue) ?? PlatformStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.PlatformSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operatingSystemName = "OperatingSystemName"
        case operatingSystemVersion = "OperatingSystemVersion"
        case platformArn = "PlatformArn"
        case platformBranchLifecycleState = "PlatformBranchLifecycleState"
        case platformBranchName = "PlatformBranchName"
        case platformCategory = "PlatformCategory"
        case platformLifecycleState = "PlatformLifecycleState"
        case platformOwner = "PlatformOwner"
        case platformStatus = "PlatformStatus"
        case platformVersion = "PlatformVersion"
        case supportedAddonList = "SupportedAddonList"
        case supportedTierList = "SupportedTierList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let operatingSystemName = operatingSystemName {
            try container.encode(operatingSystemName, forKey: ClientRuntime.Key("OperatingSystemName"))
        }
        if let operatingSystemVersion = operatingSystemVersion {
            try container.encode(operatingSystemVersion, forKey: ClientRuntime.Key("OperatingSystemVersion"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let platformBranchLifecycleState = platformBranchLifecycleState {
            try container.encode(platformBranchLifecycleState, forKey: ClientRuntime.Key("PlatformBranchLifecycleState"))
        }
        if let platformBranchName = platformBranchName {
            try container.encode(platformBranchName, forKey: ClientRuntime.Key("PlatformBranchName"))
        }
        if let platformCategory = platformCategory {
            try container.encode(platformCategory, forKey: ClientRuntime.Key("PlatformCategory"))
        }
        if let platformLifecycleState = platformLifecycleState {
            try container.encode(platformLifecycleState, forKey: ClientRuntime.Key("PlatformLifecycleState"))
        }
        if let platformOwner = platformOwner {
            try container.encode(platformOwner, forKey: ClientRuntime.Key("PlatformOwner"))
        }
        if let platformStatus = platformStatus {
            try container.encode(platformStatus, forKey: ClientRuntime.Key("PlatformStatus"))
        }
        if let platformVersion = platformVersion {
            try container.encode(platformVersion, forKey: ClientRuntime.Key("PlatformVersion"))
        }
        if let supportedAddonList = supportedAddonList {
            if !supportedAddonList.isEmpty {
                var supportedAddonListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedAddonList"))
                for (index0, supportedaddon0) in supportedAddonList.enumerated() {
                    try supportedAddonListContainer.encode(supportedaddon0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedAddonListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedAddonList"))
                try supportedAddonListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedTierList = supportedTierList {
            if !supportedTierList.isEmpty {
                var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
                for (index0, supportedtier0) in supportedTierList.enumerated() {
                    try supportedTierListContainer.encode(supportedtier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
                try supportedTierListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let platformOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformOwner)
        platformOwner = platformOwnerDecoded
        let platformStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.PlatformStatus.self, forKey: .platformStatus)
        platformStatus = platformStatusDecoded
        let platformCategoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformCategory)
        platformCategory = platformCategoryDecoded
        let operatingSystemNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystemName)
        operatingSystemName = operatingSystemNameDecoded
        let operatingSystemVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystemVersion)
        operatingSystemVersion = operatingSystemVersionDecoded
        if containerValues.contains(.supportedTierList) {
            struct KeyVal0{struct member{}}
            let supportedTierListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedTierList)
            if let supportedTierListWrappedContainer = supportedTierListWrappedContainer {
                let supportedTierListContainer = try supportedTierListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedTierListBuffer:[Swift.String]? = nil
                if let supportedTierListContainer = supportedTierListContainer {
                    supportedTierListBuffer = [Swift.String]()
                    for stringContainer0 in supportedTierListContainer {
                        supportedTierListBuffer?.append(stringContainer0)
                    }
                }
                supportedTierList = supportedTierListBuffer
            } else {
                supportedTierList = []
            }
        } else {
            supportedTierList = nil
        }
        if containerValues.contains(.supportedAddonList) {
            struct KeyVal0{struct member{}}
            let supportedAddonListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedAddonList)
            if let supportedAddonListWrappedContainer = supportedAddonListWrappedContainer {
                let supportedAddonListContainer = try supportedAddonListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedAddonListBuffer:[Swift.String]? = nil
                if let supportedAddonListContainer = supportedAddonListContainer {
                    supportedAddonListBuffer = [Swift.String]()
                    for stringContainer0 in supportedAddonListContainer {
                        supportedAddonListBuffer?.append(stringContainer0)
                    }
                }
                supportedAddonList = supportedAddonListBuffer
            } else {
                supportedAddonList = []
            }
        } else {
            supportedAddonList = nil
        }
        let platformLifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformLifecycleState)
        platformLifecycleState = platformLifecycleStateDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let platformBranchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformBranchName)
        platformBranchName = platformBranchNameDecoded
        let platformBranchLifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformBranchLifecycleState)
        platformBranchLifecycleState = platformBranchLifecycleStateDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Summary information about a platform version.
    public struct PlatformSummary: Swift.Equatable {
        /// The operating system used by the platform version.
        public var operatingSystemName: Swift.String?
        /// The version of the operating system used by the platform version.
        public var operatingSystemVersion: Swift.String?
        /// The ARN of the platform version.
        public var platformArn: Swift.String?
        /// The state of the platform version's branch in its lifecycle. Possible values: beta | supported | deprecated | retired
        public var platformBranchLifecycleState: Swift.String?
        /// The platform branch to which the platform version belongs.
        public var platformBranchName: Swift.String?
        /// The category of platform version.
        public var platformCategory: Swift.String?
        /// The state of the platform version in its lifecycle. Possible values: recommended | empty If an empty value is returned, the platform version is supported but isn't the recommended one for its branch.
        public var platformLifecycleState: Swift.String?
        /// The AWS account ID of the person who created the platform version.
        public var platformOwner: Swift.String?
        /// The status of the platform version. You can create an environment from the platform version once it is ready.
        public var platformStatus: ElasticBeanstalkClientTypes.PlatformStatus?
        /// The version string of the platform version.
        public var platformVersion: Swift.String?
        /// The additions associated with the platform version.
        public var supportedAddonList: [Swift.String]?
        /// The tiers in which the platform version runs.
        public var supportedTierList: [Swift.String]?

        public init (
            operatingSystemName: Swift.String? = nil,
            operatingSystemVersion: Swift.String? = nil,
            platformArn: Swift.String? = nil,
            platformBranchLifecycleState: Swift.String? = nil,
            platformBranchName: Swift.String? = nil,
            platformCategory: Swift.String? = nil,
            platformLifecycleState: Swift.String? = nil,
            platformOwner: Swift.String? = nil,
            platformStatus: ElasticBeanstalkClientTypes.PlatformStatus? = nil,
            platformVersion: Swift.String? = nil,
            supportedAddonList: [Swift.String]? = nil,
            supportedTierList: [Swift.String]? = nil
        )
        {
            self.operatingSystemName = operatingSystemName
            self.operatingSystemVersion = operatingSystemVersion
            self.platformArn = platformArn
            self.platformBranchLifecycleState = platformBranchLifecycleState
            self.platformBranchName = platformBranchName
            self.platformCategory = platformCategory
            self.platformLifecycleState = platformLifecycleState
            self.platformOwner = platformOwner
            self.platformStatus = platformStatus
            self.platformVersion = platformVersion
            self.supportedAddonList = supportedAddonList
            self.supportedTierList = supportedTierList
        }
    }

}

extension PlatformVersionStillReferencedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<PlatformVersionStillReferencedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You cannot delete the platform version because there are still environments running on it.
public struct PlatformVersionStillReferencedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PlatformVersionStillReferencedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PlatformVersionStillReferencedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.Queue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case url = "URL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let url = url {
            try container.encode(url, forKey: ClientRuntime.Key("URL"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes a queue.
    public struct Queue: Swift.Equatable {
        /// The name of the queue.
        public var name: Swift.String?
        /// The URL of the queue.
        public var url: Swift.String?

        public init (
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.name = name
            self.url = url
        }
    }

}

extension RebuildEnvironmentInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("RebuildEnvironment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebuildEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RebuildEnvironmentInput: Swift.Equatable {
    /// The ID of the environment to rebuild. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment to rebuild. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
    }
}

struct RebuildEnvironmentInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
}

extension RebuildEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension RebuildEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RebuildEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RebuildEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebuildEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RebuildEnvironmentOutputResponse: Swift.Equatable {

    public init () { }
}

extension RequestEnvironmentInfoInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let infoType = infoType {
            try container.encode(infoType, forKey: ClientRuntime.Key("InfoType"))
        }
        try container.encode("RequestEnvironmentInfo", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RequestEnvironmentInfoInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to retrieve logs from an environment and store them in your Elastic Beanstalk storage bucket.
public struct RequestEnvironmentInfoInput: Swift.Equatable {
    /// The ID of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?
    /// The type of information to request.
    /// This member is required.
    public var infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.infoType = infoType
    }
}

struct RequestEnvironmentInfoInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType?
}

extension RequestEnvironmentInfoInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case infoType = "InfoType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let infoTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentInfoType.self, forKey: .infoType)
        infoType = infoTypeDecoded
    }
}

extension RequestEnvironmentInfoOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RequestEnvironmentInfoOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RequestEnvironmentInfoOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RequestEnvironmentInfoOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RequestEnvironmentInfoOutputResponse: Swift.Equatable {

    public init () { }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource doesn't exist for the specified Amazon Resource Name (ARN).
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.ResourceQuota: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximum = "Maximum"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximum)
        maximum = maximumDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
    public struct ResourceQuota: Swift.Equatable {
        /// The maximum number of instances of this Elastic Beanstalk resource type that an AWS account can use.
        public var maximum: Swift.Int?

        public init (
            maximum: Swift.Int? = nil
        )
        {
            self.maximum = maximum
        }
    }

}

extension ElasticBeanstalkClientTypes.ResourceQuotas: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationQuota = "ApplicationQuota"
        case applicationVersionQuota = "ApplicationVersionQuota"
        case configurationTemplateQuota = "ConfigurationTemplateQuota"
        case customPlatformQuota = "CustomPlatformQuota"
        case environmentQuota = "EnvironmentQuota"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationQuota = applicationQuota {
            try container.encode(applicationQuota, forKey: ClientRuntime.Key("ApplicationQuota"))
        }
        if let applicationVersionQuota = applicationVersionQuota {
            try container.encode(applicationVersionQuota, forKey: ClientRuntime.Key("ApplicationVersionQuota"))
        }
        if let configurationTemplateQuota = configurationTemplateQuota {
            try container.encode(configurationTemplateQuota, forKey: ClientRuntime.Key("ConfigurationTemplateQuota"))
        }
        if let customPlatformQuota = customPlatformQuota {
            try container.encode(customPlatformQuota, forKey: ClientRuntime.Key("CustomPlatformQuota"))
        }
        if let environmentQuota = environmentQuota {
            try container.encode(environmentQuota, forKey: ClientRuntime.Key("EnvironmentQuota"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationQuotaDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ResourceQuota.self, forKey: .applicationQuota)
        applicationQuota = applicationQuotaDecoded
        let applicationVersionQuotaDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ResourceQuota.self, forKey: .applicationVersionQuota)
        applicationVersionQuota = applicationVersionQuotaDecoded
        let environmentQuotaDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ResourceQuota.self, forKey: .environmentQuota)
        environmentQuota = environmentQuotaDecoded
        let configurationTemplateQuotaDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ResourceQuota.self, forKey: .configurationTemplateQuota)
        configurationTemplateQuota = configurationTemplateQuotaDecoded
        let customPlatformQuotaDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ResourceQuota.self, forKey: .customPlatformQuota)
        customPlatformQuota = customPlatformQuotaDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A set of per-resource AWS Elastic Beanstalk quotas associated with an AWS account. They reflect Elastic Beanstalk resource limits for this account.
    public struct ResourceQuotas: Swift.Equatable {
        /// The quota for applications in the AWS account.
        public var applicationQuota: ElasticBeanstalkClientTypes.ResourceQuota?
        /// The quota for application versions in the AWS account.
        public var applicationVersionQuota: ElasticBeanstalkClientTypes.ResourceQuota?
        /// The quota for configuration templates in the AWS account.
        public var configurationTemplateQuota: ElasticBeanstalkClientTypes.ResourceQuota?
        /// The quota for custom platforms in the AWS account.
        public var customPlatformQuota: ElasticBeanstalkClientTypes.ResourceQuota?
        /// The quota for environments in the AWS account.
        public var environmentQuota: ElasticBeanstalkClientTypes.ResourceQuota?

        public init (
            applicationQuota: ElasticBeanstalkClientTypes.ResourceQuota? = nil,
            applicationVersionQuota: ElasticBeanstalkClientTypes.ResourceQuota? = nil,
            configurationTemplateQuota: ElasticBeanstalkClientTypes.ResourceQuota? = nil,
            customPlatformQuota: ElasticBeanstalkClientTypes.ResourceQuota? = nil,
            environmentQuota: ElasticBeanstalkClientTypes.ResourceQuota? = nil
        )
        {
            self.applicationQuota = applicationQuota
            self.applicationVersionQuota = applicationVersionQuota
            self.configurationTemplateQuota = configurationTemplateQuota
            self.customPlatformQuota = customPlatformQuota
            self.environmentQuota = environmentQuota
        }
    }

}

extension ResourceTypeNotSupportedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceTypeNotSupportedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The type of the specified Amazon Resource Name (ARN) isn't supported for this operation.
public struct ResourceTypeNotSupportedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceTypeNotSupportedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceTypeNotSupportedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RestartAppServerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        try container.encode("RestartAppServer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestartAppServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RestartAppServerInput: Swift.Equatable {
    /// The ID of the environment to restart the server for. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment to restart the server for. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
    }
}

struct RestartAppServerInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
}

extension RestartAppServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
    }
}

extension RestartAppServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RestartAppServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RestartAppServerOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RestartAppServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RestartAppServerOutputResponse: Swift.Equatable {

    public init () { }
}

extension RetrieveEnvironmentInfoInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let infoType = infoType {
            try container.encode(infoType, forKey: ClientRuntime.Key("InfoType"))
        }
        try container.encode("RetrieveEnvironmentInfo", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RetrieveEnvironmentInfoInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to download logs retrieved with [RequestEnvironmentInfo].
public struct RetrieveEnvironmentInfoInput: Swift.Equatable {
    /// The ID of the data's environment. If no such environment is found, returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the data's environment. If no such environment is found, returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?
    /// The type of information to retrieve.
    /// This member is required.
    public var infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.infoType = infoType
    }
}

struct RetrieveEnvironmentInfoInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let infoType: ElasticBeanstalkClientTypes.EnvironmentInfoType?
}

extension RetrieveEnvironmentInfoInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case infoType = "InfoType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let infoTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentInfoType.self, forKey: .infoType)
        infoType = infoTypeDecoded
    }
}

extension RetrieveEnvironmentInfoOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RetrieveEnvironmentInfoOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RetrieveEnvironmentInfoOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RetrieveEnvironmentInfoOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RetrieveEnvironmentInfoOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.environmentInfo = output.environmentInfo
        } else {
            self.environmentInfo = nil
        }
    }
}

/// Result message containing a description of the requested environment info.
public struct RetrieveEnvironmentInfoOutputResponse: Swift.Equatable {
    /// The [EnvironmentInfoDescription] of the environment.
    public var environmentInfo: [ElasticBeanstalkClientTypes.EnvironmentInfoDescription]?

    public init (
        environmentInfo: [ElasticBeanstalkClientTypes.EnvironmentInfoDescription]? = nil
    )
    {
        self.environmentInfo = environmentInfo
    }
}

struct RetrieveEnvironmentInfoOutputResponseBody: Swift.Equatable {
    let environmentInfo: [ElasticBeanstalkClientTypes.EnvironmentInfoDescription]?
}

extension RetrieveEnvironmentInfoOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentInfo = "EnvironmentInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RetrieveEnvironmentInfoResult"))
        if containerValues.contains(.environmentInfo) {
            struct KeyVal0{struct member{}}
            let environmentInfoWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentInfo)
            if let environmentInfoWrappedContainer = environmentInfoWrappedContainer {
                let environmentInfoContainer = try environmentInfoWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentInfoDescription].self, forKey: .member)
                var environmentInfoBuffer:[ElasticBeanstalkClientTypes.EnvironmentInfoDescription]? = nil
                if let environmentInfoContainer = environmentInfoContainer {
                    environmentInfoBuffer = [ElasticBeanstalkClientTypes.EnvironmentInfoDescription]()
                    for structureContainer0 in environmentInfoContainer {
                        environmentInfoBuffer?.append(structureContainer0)
                    }
                }
                environmentInfo = environmentInfoBuffer
            } else {
                environmentInfo = []
            }
        } else {
            environmentInfo = nil
        }
    }
}

extension ElasticBeanstalkClientTypes.S3Location: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
        case s3Key = "S3Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let s3Bucket = s3Bucket {
            try container.encode(s3Bucket, forKey: ClientRuntime.Key("S3Bucket"))
        }
        if let s3Key = s3Key {
            try container.encode(s3Key, forKey: ClientRuntime.Key("S3Key"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// The bucket and key of an item stored in Amazon S3.
    public struct S3Location: Swift.Equatable {
        /// The Amazon S3 bucket where the data is located.
        public var s3Bucket: Swift.String?
        /// The Amazon S3 key where the data is located.
        public var s3Key: Swift.String?

        public init (
            s3Bucket: Swift.String? = nil,
            s3Key: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }
    }

}

extension S3LocationNotInServiceRegionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<S3LocationNotInServiceRegionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified S3 bucket does not belong to the S3 region in which the service is running. The following regions are supported:
///
/// * IAD/us-east-1
///
/// * PDX/us-west-2
///
/// * DUB/eu-west-1
public struct S3LocationNotInServiceRegionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct S3LocationNotInServiceRegionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension S3LocationNotInServiceRegionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension S3SubscriptionRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<S3SubscriptionRequiredExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account does not have a subscription to Amazon S3.
public struct S3SubscriptionRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct S3SubscriptionRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension S3SubscriptionRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.SearchFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case `operator` = "Operator"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let `operator` = `operator` {
            try container.encode(`operator`, forKey: ClientRuntime.Key("Operator"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, searchfiltervalue0) in values.enumerated() {
                    try valuesContainer.encode(searchfiltervalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attribute)
        attribute = attributeDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operator)
        `operator` = operatorDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes criteria to restrict a list of results. For operators that apply a single value to the attribute, the filter is evaluated as follows: Attribute Operator Values[1] Some operators, e.g. in, can apply multiple values. In this case, the filter is evaluated as a logical union (OR) of applications of the operator to the attribute with each one of the values: (Attribute Operator Values[1]) OR (Attribute Operator Values[2]) OR ... The valid values for attributes of SearchFilter depend on the API action. For valid values, see the reference page for the API action you're calling that takes a SearchFilter parameter.
    public struct SearchFilter: Swift.Equatable {
        /// The result attribute to which the filter values are applied. Valid values vary by API action.
        public var attribute: Swift.String?
        /// The operator to apply to the Attribute with each of the Values. Valid values vary by Attribute.
        public var `operator`: Swift.String?
        /// The list of values applied to the Attribute and Operator attributes. Number of values and valid values vary by Attribute.
        public var values: [Swift.String]?

        public init (
            attribute: Swift.String? = nil,
            `operator`: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.attribute = attribute
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension ElasticBeanstalkClientTypes.SingleInstanceHealth: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationMetrics = "ApplicationMetrics"
        case availabilityZone = "AvailabilityZone"
        case causes = "Causes"
        case color = "Color"
        case deployment = "Deployment"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchedAt = "LaunchedAt"
        case system = "System"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationMetrics = applicationMetrics {
            try container.encode(applicationMetrics, forKey: ClientRuntime.Key("ApplicationMetrics"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let causes = causes {
            if !causes.isEmpty {
                var causesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Causes"))
                for (index0, cause0) in causes.enumerated() {
                    try causesContainer.encode(cause0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var causesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Causes"))
                try causesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let color = color {
            try container.encode(color, forKey: ClientRuntime.Key("Color"))
        }
        if let deployment = deployment {
            try container.encode(deployment, forKey: ClientRuntime.Key("Deployment"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchedAt = launchedAt {
            try container.encodeTimestamp(launchedAt, format: .dateTime, forKey: ClientRuntime.Key("launchedAt"))
        }
        if let system = system {
            try container.encode(system, forKey: ClientRuntime.Key("System"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let colorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .color)
        color = colorDecoded
        if containerValues.contains(.causes) {
            struct KeyVal0{struct member{}}
            let causesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .causes)
            if let causesWrappedContainer = causesWrappedContainer {
                let causesContainer = try causesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var causesBuffer:[Swift.String]? = nil
                if let causesContainer = causesContainer {
                    causesBuffer = [Swift.String]()
                    for stringContainer0 in causesContainer {
                        causesBuffer?.append(stringContainer0)
                    }
                }
                causes = causesBuffer
            } else {
                causes = []
            }
        } else {
            causes = nil
        }
        let launchedAtDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .launchedAt)
        launchedAt = launchedAtDecoded
        let applicationMetricsDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationMetrics.self, forKey: .applicationMetrics)
        applicationMetrics = applicationMetricsDecoded
        let systemDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SystemStatus.self, forKey: .system)
        system = systemDecoded
        let deploymentDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.Deployment.self, forKey: .deployment)
        deployment = deploymentDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Detailed health information about an Amazon EC2 instance in your Elastic Beanstalk environment.
    public struct SingleInstanceHealth: Swift.Equatable {
        /// Request metrics from your application.
        public var applicationMetrics: ElasticBeanstalkClientTypes.ApplicationMetrics?
        /// The availability zone in which the instance runs.
        public var availabilityZone: Swift.String?
        /// Represents the causes, which provide more information about the current health status.
        public var causes: [Swift.String]?
        /// Represents the color indicator that gives you information about the health of the EC2 instance. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
        public var color: Swift.String?
        /// Information about the most recent deployment to an instance.
        public var deployment: ElasticBeanstalkClientTypes.Deployment?
        /// Returns the health status of the specified instance. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
        public var healthStatus: Swift.String?
        /// The ID of the Amazon EC2 instance.
        public var instanceId: Swift.String?
        /// The instance's type.
        public var instanceType: Swift.String?
        /// The time at which the EC2 instance was launched.
        public var launchedAt: ClientRuntime.Date?
        /// Operating system metrics from the instance.
        public var system: ElasticBeanstalkClientTypes.SystemStatus?

        public init (
            applicationMetrics: ElasticBeanstalkClientTypes.ApplicationMetrics? = nil,
            availabilityZone: Swift.String? = nil,
            causes: [Swift.String]? = nil,
            color: Swift.String? = nil,
            deployment: ElasticBeanstalkClientTypes.Deployment? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchedAt: ClientRuntime.Date? = nil,
            system: ElasticBeanstalkClientTypes.SystemStatus? = nil
        )
        {
            self.applicationMetrics = applicationMetrics
            self.availabilityZone = availabilityZone
            self.causes = causes
            self.color = color
            self.deployment = deployment
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchedAt = launchedAt
            self.system = system
        }
    }

}

extension ElasticBeanstalkClientTypes.SolutionStackDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case permittedFileTypes = "PermittedFileTypes"
        case solutionStackName = "SolutionStackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let permittedFileTypes = permittedFileTypes {
            if !permittedFileTypes.isEmpty {
                var permittedFileTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PermittedFileTypes"))
                for (index0, filetypeextension0) in permittedFileTypes.enumerated() {
                    try permittedFileTypesContainer.encode(filetypeextension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var permittedFileTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PermittedFileTypes"))
                try permittedFileTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        if containerValues.contains(.permittedFileTypes) {
            struct KeyVal0{struct member{}}
            let permittedFileTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .permittedFileTypes)
            if let permittedFileTypesWrappedContainer = permittedFileTypesWrappedContainer {
                let permittedFileTypesContainer = try permittedFileTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var permittedFileTypesBuffer:[Swift.String]? = nil
                if let permittedFileTypesContainer = permittedFileTypesContainer {
                    permittedFileTypesBuffer = [Swift.String]()
                    for stringContainer0 in permittedFileTypesContainer {
                        permittedFileTypesBuffer?.append(stringContainer0)
                    }
                }
                permittedFileTypes = permittedFileTypesBuffer
            } else {
                permittedFileTypes = []
            }
        } else {
            permittedFileTypes = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes the solution stack.
    public struct SolutionStackDescription: Swift.Equatable {
        /// The permitted file types allowed for a solution stack.
        public var permittedFileTypes: [Swift.String]?
        /// The name of the solution stack.
        public var solutionStackName: Swift.String?

        public init (
            permittedFileTypes: [Swift.String]? = nil,
            solutionStackName: Swift.String? = nil
        )
        {
            self.permittedFileTypes = permittedFileTypes
            self.solutionStackName = solutionStackName
        }
    }

}

extension ElasticBeanstalkClientTypes.SourceBuildInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceLocation = "SourceLocation"
        case sourceRepository = "SourceRepository"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceLocation = sourceLocation {
            try container.encode(sourceLocation, forKey: ClientRuntime.Key("SourceLocation"))
        }
        if let sourceRepository = sourceRepository {
            try container.encode(sourceRepository, forKey: ClientRuntime.Key("SourceRepository"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceRepositoryDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceRepository.self, forKey: .sourceRepository)
        sourceRepository = sourceRepositoryDecoded
        let sourceLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocation)
        sourceLocation = sourceLocationDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Location of the source code for an application version.
    public struct SourceBuildInformation: Swift.Equatable {
        /// The location of the source code, as a formatted string, depending on the value of SourceRepository
        ///
        /// * For CodeCommit, the format is the repository name and commit ID, separated by a forward slash. For example, my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a.
        ///
        /// * For S3, the format is the S3 bucket name and object key, separated by a forward slash. For example, my-s3-bucket/Folders/my-source-file.
        /// This member is required.
        public var sourceLocation: Swift.String?
        /// Location where the repository is stored.
        ///
        /// * CodeCommit
        ///
        /// * S3
        /// This member is required.
        public var sourceRepository: ElasticBeanstalkClientTypes.SourceRepository?
        /// The type of repository.
        ///
        /// * Git
        ///
        /// * Zip
        /// This member is required.
        public var sourceType: ElasticBeanstalkClientTypes.SourceType?

        public init (
            sourceLocation: Swift.String? = nil,
            sourceRepository: ElasticBeanstalkClientTypes.SourceRepository? = nil,
            sourceType: ElasticBeanstalkClientTypes.SourceType? = nil
        )
        {
            self.sourceLocation = sourceLocation
            self.sourceRepository = sourceRepository
            self.sourceType = sourceType
        }
    }

}

extension SourceBundleDeletionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SourceBundleDeletionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to delete the Amazon S3 source bundle associated with the application version. The application version was deleted successfully.
public struct SourceBundleDeletionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SourceBundleDeletionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SourceBundleDeletionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.SourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// A specification for an environment configuration.
    public struct SourceConfiguration: Swift.Equatable {
        /// The name of the application associated with the configuration.
        public var applicationName: Swift.String?
        /// The name of the configuration template.
        public var templateName: Swift.String?

        public init (
            applicationName: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.applicationName = applicationName
            self.templateName = templateName
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum SourceRepository: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codecommit
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceRepository] {
            return [
                .codecommit,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codecommit: return "CodeCommit"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceRepository(rawValue: rawValue) ?? SourceRepository.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case git
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .git,
                .zip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .git: return "Git"
            case .zip: return "Zip"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticBeanstalkClientTypes.StatusCodes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status2xx = "Status2xx"
        case status3xx = "Status3xx"
        case status4xx = "Status4xx"
        case status5xx = "Status5xx"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status2xx = status2xx {
            try container.encode(status2xx, forKey: ClientRuntime.Key("Status2xx"))
        }
        if let status3xx = status3xx {
            try container.encode(status3xx, forKey: ClientRuntime.Key("Status3xx"))
        }
        if let status4xx = status4xx {
            try container.encode(status4xx, forKey: ClientRuntime.Key("Status4xx"))
        }
        if let status5xx = status5xx {
            try container.encode(status5xx, forKey: ClientRuntime.Key("Status5xx"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let status2xxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status2xx)
        status2xx = status2xxDecoded
        let status3xxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status3xx)
        status3xx = status3xxDecoded
        let status4xxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status4xx)
        status4xx = status4xxDecoded
        let status5xxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status5xx)
        status5xx = status5xxDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response. For more information, see [Status Code Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
    public struct StatusCodes: Swift.Equatable {
        /// The percentage of requests over the last 10 seconds that resulted in a 2xx (200, 201, etc.) status code.
        public var status2xx: Swift.Int?
        /// The percentage of requests over the last 10 seconds that resulted in a 3xx (300, 301, etc.) status code.
        public var status3xx: Swift.Int?
        /// The percentage of requests over the last 10 seconds that resulted in a 4xx (400, 401, etc.) status code.
        public var status4xx: Swift.Int?
        /// The percentage of requests over the last 10 seconds that resulted in a 5xx (500, 501, etc.) status code.
        public var status5xx: Swift.Int?

        public init (
            status2xx: Swift.Int? = nil,
            status3xx: Swift.Int? = nil,
            status4xx: Swift.Int? = nil,
            status5xx: Swift.Int? = nil
        )
        {
            self.status2xx = status2xx
            self.status3xx = status3xx
            self.status4xx = status4xx
            self.status5xx = status5xx
        }
    }

}

extension SwapEnvironmentCNAMEsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationEnvironmentId = destinationEnvironmentId {
            try container.encode(destinationEnvironmentId, forKey: ClientRuntime.Key("DestinationEnvironmentId"))
        }
        if let destinationEnvironmentName = destinationEnvironmentName {
            try container.encode(destinationEnvironmentName, forKey: ClientRuntime.Key("DestinationEnvironmentName"))
        }
        if let sourceEnvironmentId = sourceEnvironmentId {
            try container.encode(sourceEnvironmentId, forKey: ClientRuntime.Key("SourceEnvironmentId"))
        }
        if let sourceEnvironmentName = sourceEnvironmentName {
            try container.encode(sourceEnvironmentName, forKey: ClientRuntime.Key("SourceEnvironmentName"))
        }
        try container.encode("SwapEnvironmentCNAMEs", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SwapEnvironmentCNAMEsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Swaps the CNAMEs of two environments.
public struct SwapEnvironmentCNAMEsInput: Swift.Equatable {
    /// The ID of the destination environment. Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentId with the DestinationEnvironmentId.
    public var destinationEnvironmentId: Swift.String?
    /// The name of the destination environment. Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentName with the DestinationEnvironmentName.
    public var destinationEnvironmentName: Swift.String?
    /// The ID of the source environment. Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentId, you must specify the DestinationEnvironmentId.
    public var sourceEnvironmentId: Swift.String?
    /// The name of the source environment. Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentName, you must specify the DestinationEnvironmentName.
    public var sourceEnvironmentName: Swift.String?

    public init (
        destinationEnvironmentId: Swift.String? = nil,
        destinationEnvironmentName: Swift.String? = nil,
        sourceEnvironmentId: Swift.String? = nil,
        sourceEnvironmentName: Swift.String? = nil
    )
    {
        self.destinationEnvironmentId = destinationEnvironmentId
        self.destinationEnvironmentName = destinationEnvironmentName
        self.sourceEnvironmentId = sourceEnvironmentId
        self.sourceEnvironmentName = sourceEnvironmentName
    }
}

struct SwapEnvironmentCNAMEsInputBody: Swift.Equatable {
    let sourceEnvironmentId: Swift.String?
    let sourceEnvironmentName: Swift.String?
    let destinationEnvironmentId: Swift.String?
    let destinationEnvironmentName: Swift.String?
}

extension SwapEnvironmentCNAMEsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationEnvironmentId = "DestinationEnvironmentId"
        case destinationEnvironmentName = "DestinationEnvironmentName"
        case sourceEnvironmentId = "SourceEnvironmentId"
        case sourceEnvironmentName = "SourceEnvironmentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceEnvironmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceEnvironmentId)
        sourceEnvironmentId = sourceEnvironmentIdDecoded
        let sourceEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceEnvironmentName)
        sourceEnvironmentName = sourceEnvironmentNameDecoded
        let destinationEnvironmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationEnvironmentId)
        destinationEnvironmentId = destinationEnvironmentIdDecoded
        let destinationEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationEnvironmentName)
        destinationEnvironmentName = destinationEnvironmentNameDecoded
    }
}

extension SwapEnvironmentCNAMEsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SwapEnvironmentCNAMEsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SwapEnvironmentCNAMEsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SwapEnvironmentCNAMEsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SwapEnvironmentCNAMEsOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticBeanstalkClientTypes.SystemStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuUtilization = "CPUUtilization"
        case loadAverage = "LoadAverage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cpuUtilization = cpuUtilization {
            try container.encode(cpuUtilization, forKey: ClientRuntime.Key("CPUUtilization"))
        }
        if let loadAverage = loadAverage {
            if !loadAverage.isEmpty {
                var loadAverageContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadAverage"))
                for (index0, loadaveragevalue0) in loadAverage.enumerated() {
                    try loadAverageContainer.encode(loadaveragevalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadAverageContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadAverage"))
                try loadAverageContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuUtilizationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.CPUUtilization.self, forKey: .cpuUtilization)
        cpuUtilization = cpuUtilizationDecoded
        if containerValues.contains(.loadAverage) {
            struct KeyVal0{struct member{}}
            let loadAverageWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadAverage)
            if let loadAverageWrappedContainer = loadAverageWrappedContainer {
                let loadAverageContainer = try loadAverageWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var loadAverageBuffer:[Swift.Double]? = nil
                if let loadAverageContainer = loadAverageContainer {
                    loadAverageBuffer = [Swift.Double]()
                    for doubleContainer0 in loadAverageContainer {
                        loadAverageBuffer?.append(doubleContainer0)
                    }
                }
                loadAverage = loadAverageBuffer
            } else {
                loadAverage = []
            }
        } else {
            loadAverage = nil
        }
    }
}

extension ElasticBeanstalkClientTypes {
    /// CPU utilization and load average metrics for an Amazon EC2 instance.
    public struct SystemStatus: Swift.Equatable {
        /// CPU utilization metrics for the instance.
        public var cpuUtilization: ElasticBeanstalkClientTypes.CPUUtilization?
        /// Load average in the last 1-minute, 5-minute, and 15-minute periods. For more information, see [Operating System Metrics](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-metrics.html#health-enhanced-metrics-os).
        public var loadAverage: [Swift.Double]?

        public init (
            cpuUtilization: ElasticBeanstalkClientTypes.CPUUtilization? = nil,
            loadAverage: [Swift.Double]? = nil
        )
        {
            self.cpuUtilization = cpuUtilization
            self.loadAverage = loadAverage
        }
    }

}

extension ElasticBeanstalkClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes a tag applied to a resource in an environment.
    public struct Tag: Swift.Equatable {
        /// The key of the tag.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TerminateEnvironmentInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let forceTerminate = forceTerminate {
            try container.encode(forceTerminate, forKey: ClientRuntime.Key("ForceTerminate"))
        }
        if let terminateResources = terminateResources {
            try container.encode(terminateResources, forKey: ClientRuntime.Key("TerminateResources"))
        }
        try container.encode("TerminateEnvironment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension TerminateEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to terminate an environment.
public struct TerminateEnvironmentInput: Swift.Equatable {
    /// The ID of the environment to terminate. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment to terminate. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?
    /// Terminates the target environment even if another environment in the same group is dependent on it.
    public var forceTerminate: Swift.Bool?
    /// Indicates whether the associated AWS resources should shut down when the environment is terminated:
    ///
    /// * true: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.
    ///
    /// * false: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.
    ///
    ///
    /// For more information, see the [ AWS Elastic Beanstalk User Guide. ](https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/) Default: true Valid Values: true | false
    public var terminateResources: Swift.Bool?

    public init (
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        forceTerminate: Swift.Bool? = nil,
        terminateResources: Swift.Bool? = nil
    )
    {
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.forceTerminate = forceTerminate
        self.terminateResources = terminateResources
    }
}

struct TerminateEnvironmentInputBody: Swift.Equatable {
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let terminateResources: Swift.Bool?
    let forceTerminate: Swift.Bool?
}

extension TerminateEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case forceTerminate = "ForceTerminate"
        case terminateResources = "TerminateResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let terminateResourcesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminateResources)
        terminateResources = terminateResourcesDecoded
        let forceTerminateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceTerminate)
        forceTerminate = forceTerminateDecoded
    }
}

extension TerminateEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TerminateEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TerminateEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TerminateEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortableOperationInProgress = output.abortableOperationInProgress
            self.applicationName = output.applicationName
            self.cname = output.cname
            self.dateCreated = output.dateCreated
            self.dateUpdated = output.dateUpdated
            self.description = output.description
            self.endpointURL = output.endpointURL
            self.environmentArn = output.environmentArn
            self.environmentId = output.environmentId
            self.environmentLinks = output.environmentLinks
            self.environmentName = output.environmentName
            self.health = output.health
            self.healthStatus = output.healthStatus
            self.operationsRole = output.operationsRole
            self.platformArn = output.platformArn
            self.resources = output.resources
            self.solutionStackName = output.solutionStackName
            self.status = output.status
            self.templateName = output.templateName
            self.tier = output.tier
            self.versionLabel = output.versionLabel
        } else {
            self.abortableOperationInProgress = nil
            self.applicationName = nil
            self.cname = nil
            self.dateCreated = nil
            self.dateUpdated = nil
            self.description = nil
            self.endpointURL = nil
            self.environmentArn = nil
            self.environmentId = nil
            self.environmentLinks = nil
            self.environmentName = nil
            self.health = nil
            self.healthStatus = nil
            self.operationsRole = nil
            self.platformArn = nil
            self.resources = nil
            self.solutionStackName = nil
            self.status = nil
            self.templateName = nil
            self.tier = nil
            self.versionLabel = nil
        }
    }
}

/// Describes the properties of an environment.
public struct TerminateEnvironmentOutputResponse: Swift.Equatable {
    /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel. true: There is an update in progress. false: There are no updates currently in progress.
    public var abortableOperationInProgress: Swift.Bool?
    /// The name of the application associated with this environment.
    public var applicationName: Swift.String?
    /// The URL to the CNAME for this environment.
    public var cname: Swift.String?
    /// The creation date for this environment.
    public var dateCreated: ClientRuntime.Date?
    /// The last modified date for this environment.
    public var dateUpdated: ClientRuntime.Date?
    /// Describes this environment.
    public var description: Swift.String?
    /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
    public var endpointURL: Swift.String?
    /// The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.
    public var environmentArn: Swift.String?
    /// The ID of this environment.
    public var environmentId: Swift.String?
    /// A list of links to other environments in the same group.
    public var environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
    /// The name of this environment.
    public var environmentName: Swift.String?
    /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:
    ///
    /// * Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.
    ///
    /// * Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.
    ///
    /// * Green: Indicates the environment is healthy and fully functional.
    ///
    /// * Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironment request.
    ///
    ///
    /// Default: Grey
    public var health: ElasticBeanstalkClientTypes.EnvironmentHealth?
    /// Returns the health status of the application running in your environment. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
    public var healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
    /// The Amazon Resource Name (ARN) of the environment's operations role. For more information, see [Operations roles](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html) in the AWS Elastic Beanstalk Developer Guide.
    public var operationsRole: Swift.String?
    /// The ARN of the platform version.
    public var platformArn: Swift.String?
    /// The description of the AWS resources used by this environment.
    public var resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
    /// The name of the SolutionStack deployed with this environment.
    public var solutionStackName: Swift.String?
    /// The current operational status of the environment:
    ///
    /// * Launching: Environment is in the process of initial deployment.
    ///
    /// * Updating: Environment is in the process of updating its configuration settings or application version.
    ///
    /// * Ready: Environment is available to have an action performed on it, such as update or terminate.
    ///
    /// * Terminating: Environment is in the shut-down process.
    ///
    /// * Terminated: Environment is not running.
    public var status: ElasticBeanstalkClientTypes.EnvironmentStatus?
    /// The name of the configuration template used to originally launch this environment.
    public var templateName: Swift.String?
    /// Describes the current tier of this environment.
    public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    /// The application version deployed in this environment.
    public var versionLabel: Swift.String?

    public init (
        abortableOperationInProgress: Swift.Bool? = nil,
        applicationName: Swift.String? = nil,
        cname: Swift.String? = nil,
        dateCreated: ClientRuntime.Date? = nil,
        dateUpdated: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        endpointURL: Swift.String? = nil,
        environmentArn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]? = nil,
        environmentName: Swift.String? = nil,
        health: ElasticBeanstalkClientTypes.EnvironmentHealth? = nil,
        healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus? = nil,
        operationsRole: Swift.String? = nil,
        platformArn: Swift.String? = nil,
        resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription? = nil,
        solutionStackName: Swift.String? = nil,
        status: ElasticBeanstalkClientTypes.EnvironmentStatus? = nil,
        templateName: Swift.String? = nil,
        tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.abortableOperationInProgress = abortableOperationInProgress
        self.applicationName = applicationName
        self.cname = cname
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.description = description
        self.endpointURL = endpointURL
        self.environmentArn = environmentArn
        self.environmentId = environmentId
        self.environmentLinks = environmentLinks
        self.environmentName = environmentName
        self.health = health
        self.healthStatus = healthStatus
        self.operationsRole = operationsRole
        self.platformArn = platformArn
        self.resources = resources
        self.solutionStackName = solutionStackName
        self.status = status
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}

struct TerminateEnvironmentOutputResponseBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let endpointURL: Swift.String?
    let cname: Swift.String?
    let dateCreated: ClientRuntime.Date?
    let dateUpdated: ClientRuntime.Date?
    let status: ElasticBeanstalkClientTypes.EnvironmentStatus?
    let abortableOperationInProgress: Swift.Bool?
    let health: ElasticBeanstalkClientTypes.EnvironmentHealth?
    let healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
    let resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
    let tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    let environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
    let environmentArn: Swift.String?
    let operationsRole: Swift.String?
}

extension TerminateEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortableOperationInProgress = "AbortableOperationInProgress"
        case applicationName = "ApplicationName"
        case cname = "CNAME"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointURL = "EndpointURL"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case health = "Health"
        case healthStatus = "HealthStatus"
        case operationsRole = "OperationsRole"
        case platformArn = "PlatformArn"
        case resources = "Resources"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TerminateEnvironmentResult"))
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointURL)
        endpointURL = endpointURLDecoded
        let cnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cname)
        cname = cnameDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let abortableOperationInProgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .abortableOperationInProgress)
        abortableOperationInProgress = abortableOperationInProgressDecoded
        let healthDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealth.self, forKey: .health)
        health = healthDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentResourcesDescription.self, forKey: .resources)
        resources = resourcesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.environmentLinks) {
            struct KeyVal0{struct member{}}
            let environmentLinksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentLinks)
            if let environmentLinksWrappedContainer = environmentLinksWrappedContainer {
                let environmentLinksContainer = try environmentLinksWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentLink].self, forKey: .member)
                var environmentLinksBuffer:[ElasticBeanstalkClientTypes.EnvironmentLink]? = nil
                if let environmentLinksContainer = environmentLinksContainer {
                    environmentLinksBuffer = [ElasticBeanstalkClientTypes.EnvironmentLink]()
                    for structureContainer0 in environmentLinksContainer {
                        environmentLinksBuffer?.append(structureContainer0)
                    }
                }
                environmentLinks = environmentLinksBuffer
            } else {
                environmentLinks = []
            }
        } else {
            environmentLinks = nil
        }
        let environmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}

extension TooManyApplicationVersionsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyApplicationVersionsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account has reached its limit of application versions.
public struct TooManyApplicationVersionsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyApplicationVersionsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyApplicationVersionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyApplicationsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyApplicationsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account has reached its limit of applications.
public struct TooManyApplicationsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyApplicationsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyApplicationsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyBucketsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyBucketsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account has reached its limit of Amazon S3 buckets.
public struct TooManyBucketsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyBucketsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyBucketsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyConfigurationTemplatesException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyConfigurationTemplatesExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account has reached its limit of configuration templates.
public struct TooManyConfigurationTemplatesException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyConfigurationTemplatesExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyConfigurationTemplatesExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyEnvironmentsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyEnvironmentsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account has reached its limit of environments.
public struct TooManyEnvironmentsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyEnvironmentsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyEnvironmentsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyPlatformsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyPlatformsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have exceeded the maximum number of allowed platforms associated with the account.
public struct TooManyPlatformsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyPlatformsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyPlatformsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TooManyTagsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of tags in the resource would exceed the number of tags that each resource can have. To calculate this, the operation considers both the number of tags the resource already has and the tags this operation would add if it succeeded.
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The exception error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticBeanstalkClientTypes.Trigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// Describes a trigger.
    public struct Trigger: Swift.Equatable {
        /// The name of the trigger.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension UpdateApplicationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        try container.encode("UpdateApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to update an application.
public struct UpdateApplicationInput: Swift.Equatable {
    /// The name of the application to update. If no such application is found, UpdateApplication returns an InvalidParameterValue error.
    /// This member is required.
    public var applicationName: Swift.String?
    /// A new description for the application. Default: If not specified, AWS Elastic Beanstalk does not update the description.
    public var description: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
    }
}

struct UpdateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let description: Swift.String?
}

extension UpdateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApplicationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateApplicationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.application = output.application
        } else {
            self.application = nil
        }
    }
}

/// Result message containing a single description of an application.
public struct UpdateApplicationOutputResponse: Swift.Equatable {
    /// The [ApplicationDescription] of the application.
    public var application: ElasticBeanstalkClientTypes.ApplicationDescription?

    public init (
        application: ElasticBeanstalkClientTypes.ApplicationDescription? = nil
    )
    {
        self.application = application
    }
}

struct UpdateApplicationOutputResponseBody: Swift.Equatable {
    let application: ElasticBeanstalkClientTypes.ApplicationDescription?
}

extension UpdateApplicationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case application = "Application"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateApplicationResult"))
        let applicationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationDescription.self, forKey: .application)
        application = applicationDecoded
    }
}

extension UpdateApplicationResourceLifecycleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let resourceLifecycleConfig = resourceLifecycleConfig {
            try container.encode(resourceLifecycleConfig, forKey: ClientRuntime.Key("ResourceLifecycleConfig"))
        }
        try container.encode("UpdateApplicationResourceLifecycle", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateApplicationResourceLifecycleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateApplicationResourceLifecycleInput: Swift.Equatable {
    /// The name of the application.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The lifecycle configuration.
    /// This member is required.
    public var resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?

    public init (
        applicationName: Swift.String? = nil,
        resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig? = nil
    )
    {
        self.applicationName = applicationName
        self.resourceLifecycleConfig = resourceLifecycleConfig
    }
}

struct UpdateApplicationResourceLifecycleInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?
}

extension UpdateApplicationResourceLifecycleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case resourceLifecycleConfig = "ResourceLifecycleConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let resourceLifecycleConfigDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig.self, forKey: .resourceLifecycleConfig)
        resourceLifecycleConfig = resourceLifecycleConfigDecoded
    }
}

extension UpdateApplicationResourceLifecycleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateApplicationResourceLifecycleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApplicationResourceLifecycleOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApplicationResourceLifecycleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateApplicationResourceLifecycleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationName = output.applicationName
            self.resourceLifecycleConfig = output.resourceLifecycleConfig
        } else {
            self.applicationName = nil
            self.resourceLifecycleConfig = nil
        }
    }
}

public struct UpdateApplicationResourceLifecycleOutputResponse: Swift.Equatable {
    /// The name of the application.
    public var applicationName: Swift.String?
    /// The lifecycle configuration.
    public var resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?

    public init (
        applicationName: Swift.String? = nil,
        resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig? = nil
    )
    {
        self.applicationName = applicationName
        self.resourceLifecycleConfig = resourceLifecycleConfig
    }
}

struct UpdateApplicationResourceLifecycleOutputResponseBody: Swift.Equatable {
    let applicationName: Swift.String?
    let resourceLifecycleConfig: ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig?
}

extension UpdateApplicationResourceLifecycleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case resourceLifecycleConfig = "ResourceLifecycleConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateApplicationResourceLifecycleResult"))
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let resourceLifecycleConfigDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationResourceLifecycleConfig.self, forKey: .resourceLifecycleConfig)
        resourceLifecycleConfig = resourceLifecycleConfigDecoded
    }
}

extension UpdateApplicationVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("UpdateApplicationVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateApplicationVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct UpdateApplicationVersionInput: Swift.Equatable {
    /// The name of the application associated with this version. If no application is found with this name, UpdateApplication returns an InvalidParameterValue error.
    /// This member is required.
    public var applicationName: Swift.String?
    /// A new description for this version.
    public var description: Swift.String?
    /// The name of the version to update. If no application version is found with this label, UpdateApplication returns an InvalidParameterValue error.
    /// This member is required.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.versionLabel = versionLabel
    }
}

struct UpdateApplicationVersionInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let description: Swift.String?
}

extension UpdateApplicationVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateApplicationVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateApplicationVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApplicationVersionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApplicationVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateApplicationVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationVersion = output.applicationVersion
        } else {
            self.applicationVersion = nil
        }
    }
}

/// Result message wrapping a single description of an application version.
public struct UpdateApplicationVersionOutputResponse: Swift.Equatable {
    /// The [ApplicationVersionDescription] of the application version.
    public var applicationVersion: ElasticBeanstalkClientTypes.ApplicationVersionDescription?

    public init (
        applicationVersion: ElasticBeanstalkClientTypes.ApplicationVersionDescription? = nil
    )
    {
        self.applicationVersion = applicationVersion
    }
}

struct UpdateApplicationVersionOutputResponseBody: Swift.Equatable {
    let applicationVersion: ElasticBeanstalkClientTypes.ApplicationVersionDescription?
}

extension UpdateApplicationVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationVersion = "ApplicationVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateApplicationVersionResult"))
        let applicationVersionDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationVersionDescription.self, forKey: .applicationVersion)
        applicationVersion = applicationVersionDecoded
    }
}

extension UpdateConfigurationTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionsToRemove = optionsToRemove {
            if !optionsToRemove.isEmpty {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                for (index0, optionspecification0) in optionsToRemove.enumerated() {
                    try optionsToRemoveContainer.encode(optionspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                try optionsToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("UpdateConfigurationTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The result message containing the options for the specified solution stack.
public struct UpdateConfigurationTemplateInput: Swift.Equatable {
    /// The name of the application associated with the configuration template to update. If no application is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error.
    /// This member is required.
    public var applicationName: Swift.String?
    /// A new description for the configuration.
    public var description: Swift.String?
    /// A list of configuration option settings to update with the new specified option value.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// A list of configuration options to remove from the configuration set. Constraint: You can remove only UserDefined configuration options.
    public var optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
    /// The name of the configuration template to update. If no configuration template is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.optionSettings = optionSettings
        self.optionsToRemove = optionsToRemove
        self.templateName = templateName
    }
}

struct UpdateConfigurationTemplateInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    let optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
}

extension UpdateConfigurationTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
        case optionSettings = "OptionSettings"
        case optionsToRemove = "OptionsToRemove"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.optionsToRemove) {
            struct KeyVal0{struct member{}}
            let optionsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionsToRemove)
            if let optionsToRemoveWrappedContainer = optionsToRemoveWrappedContainer {
                let optionsToRemoveContainer = try optionsToRemoveWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.OptionSpecification].self, forKey: .member)
                var optionsToRemoveBuffer:[ElasticBeanstalkClientTypes.OptionSpecification]? = nil
                if let optionsToRemoveContainer = optionsToRemoveContainer {
                    optionsToRemoveBuffer = [ElasticBeanstalkClientTypes.OptionSpecification]()
                    for structureContainer0 in optionsToRemoveContainer {
                        optionsToRemoveBuffer?.append(structureContainer0)
                    }
                }
                optionsToRemove = optionsToRemoveBuffer
            } else {
                optionsToRemove = []
            }
        } else {
            optionsToRemove = nil
        }
    }
}

extension UpdateConfigurationTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationTemplateOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyBucketsException(TooManyBucketsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateConfigurationTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationName = output.applicationName
            self.dateCreated = output.dateCreated
            self.dateUpdated = output.dateUpdated
            self.deploymentStatus = output.deploymentStatus
            self.description = output.description
            self.environmentName = output.environmentName
            self.optionSettings = output.optionSettings
            self.platformArn = output.platformArn
            self.solutionStackName = output.solutionStackName
            self.templateName = output.templateName
        } else {
            self.applicationName = nil
            self.dateCreated = nil
            self.dateUpdated = nil
            self.deploymentStatus = nil
            self.description = nil
            self.environmentName = nil
            self.optionSettings = nil
            self.platformArn = nil
            self.solutionStackName = nil
            self.templateName = nil
        }
    }
}

/// Describes the settings for a configuration set.
public struct UpdateConfigurationTemplateOutputResponse: Swift.Equatable {
    /// The name of the application associated with this configuration set.
    public var applicationName: Swift.String?
    /// The date (in UTC time) when this configuration set was created.
    public var dateCreated: ClientRuntime.Date?
    /// The date (in UTC time) when this configuration set was last modified.
    public var dateUpdated: ClientRuntime.Date?
    /// If this configuration set is associated with an environment, the DeploymentStatus parameter indicates the deployment status of this configuration set:
    ///
    /// * null: This configuration is not associated with a running environment.
    ///
    /// * pending: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.
    ///
    /// * deployed: This is the configuration that is currently deployed to the associated running environment.
    ///
    /// * failed: This is a draft configuration that failed to successfully deploy.
    public var deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus?
    /// Describes this configuration set.
    public var description: Swift.String?
    /// If not null, the name of the environment for this configuration set.
    public var environmentName: Swift.String?
    /// A list of the configuration options and their values in this configuration set.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// The ARN of the platform version.
    public var platformArn: Swift.String?
    /// The name of the solution stack this configuration set uses.
    public var solutionStackName: Swift.String?
    /// If not null, the name of the configuration template for this configuration set.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        dateCreated: ClientRuntime.Date? = nil,
        dateUpdated: ClientRuntime.Date? = nil,
        deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus? = nil,
        description: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.deploymentStatus = deploymentStatus
        self.description = description
        self.environmentName = environmentName
        self.optionSettings = optionSettings
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.templateName = templateName
    }
}

struct UpdateConfigurationTemplateOutputResponseBody: Swift.Equatable {
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let environmentName: Swift.String?
    let deploymentStatus: ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus?
    let dateCreated: ClientRuntime.Date?
    let dateUpdated: ClientRuntime.Date?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
}

extension UpdateConfigurationTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case deploymentStatus = "DeploymentStatus"
        case description = "Description"
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateConfigurationTemplateResult"))
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ConfigurationDeploymentStatus.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
    }
}

extension UpdateEnvironmentInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: ClientRuntime.Key("EnvironmentId"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionsToRemove = optionsToRemove {
            if !optionsToRemove.isEmpty {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                for (index0, optionspecification0) in optionsToRemove.enumerated() {
                    try optionsToRemoveContainer.encode(optionspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                try optionsToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: ClientRuntime.Key("SolutionStackName"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: ClientRuntime.Key("Tier"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("UpdateEnvironment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to update an environment.
public struct UpdateEnvironmentInput: Swift.Equatable {
    /// The name of the application with which the environment is associated.
    public var applicationName: Swift.String?
    /// If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.
    public var description: Swift.String?
    /// The ID of the environment to update. If no environment with this ID exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?
    /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See [Environment Manifest (env.yaml)](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html) for details.
    public var groupName: Swift.String?
    /// If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// A list of custom user-defined configuration options to remove from the configuration set for this environment.
    public var optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
    /// The ARN of the platform, if used.
    public var platformArn: Swift.String?
    /// This specifies the platform version that the environment will run after the environment is updated.
    public var solutionStackName: Swift.String?
    /// If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an InvalidParameterValue error.
    public var templateName: Swift.String?
    /// This specifies the tier to use to update the environment. Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns InvalidParameterValue error.
    public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    /// If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an InvalidParameterValue error.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        groupName: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        templateName: Swift.String? = nil,
        tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.groupName = groupName
        self.optionSettings = optionSettings
        self.optionsToRemove = optionsToRemove
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}

struct UpdateEnvironmentInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let groupName: Swift.String?
    let description: Swift.String?
    let tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    let versionLabel: Swift.String?
    let templateName: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    let optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
}

extension UpdateEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case groupName = "GroupName"
        case optionSettings = "OptionSettings"
        case optionsToRemove = "OptionsToRemove"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.optionsToRemove) {
            struct KeyVal0{struct member{}}
            let optionsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionsToRemove)
            if let optionsToRemoveWrappedContainer = optionsToRemoveWrappedContainer {
                let optionsToRemoveContainer = try optionsToRemoveWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.OptionSpecification].self, forKey: .member)
                var optionsToRemoveBuffer:[ElasticBeanstalkClientTypes.OptionSpecification]? = nil
                if let optionsToRemoveContainer = optionsToRemoveContainer {
                    optionsToRemoveBuffer = [ElasticBeanstalkClientTypes.OptionSpecification]()
                    for structureContainer0 in optionsToRemoveContainer {
                        optionsToRemoveBuffer?.append(structureContainer0)
                    }
                }
                optionsToRemove = optionsToRemoveBuffer
            } else {
                optionsToRemove = []
            }
        } else {
            optionsToRemove = nil
        }
    }
}

extension UpdateEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyBucketsException(TooManyBucketsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortableOperationInProgress = output.abortableOperationInProgress
            self.applicationName = output.applicationName
            self.cname = output.cname
            self.dateCreated = output.dateCreated
            self.dateUpdated = output.dateUpdated
            self.description = output.description
            self.endpointURL = output.endpointURL
            self.environmentArn = output.environmentArn
            self.environmentId = output.environmentId
            self.environmentLinks = output.environmentLinks
            self.environmentName = output.environmentName
            self.health = output.health
            self.healthStatus = output.healthStatus
            self.operationsRole = output.operationsRole
            self.platformArn = output.platformArn
            self.resources = output.resources
            self.solutionStackName = output.solutionStackName
            self.status = output.status
            self.templateName = output.templateName
            self.tier = output.tier
            self.versionLabel = output.versionLabel
        } else {
            self.abortableOperationInProgress = nil
            self.applicationName = nil
            self.cname = nil
            self.dateCreated = nil
            self.dateUpdated = nil
            self.description = nil
            self.endpointURL = nil
            self.environmentArn = nil
            self.environmentId = nil
            self.environmentLinks = nil
            self.environmentName = nil
            self.health = nil
            self.healthStatus = nil
            self.operationsRole = nil
            self.platformArn = nil
            self.resources = nil
            self.solutionStackName = nil
            self.status = nil
            self.templateName = nil
            self.tier = nil
            self.versionLabel = nil
        }
    }
}

/// Describes the properties of an environment.
public struct UpdateEnvironmentOutputResponse: Swift.Equatable {
    /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel. true: There is an update in progress. false: There are no updates currently in progress.
    public var abortableOperationInProgress: Swift.Bool?
    /// The name of the application associated with this environment.
    public var applicationName: Swift.String?
    /// The URL to the CNAME for this environment.
    public var cname: Swift.String?
    /// The creation date for this environment.
    public var dateCreated: ClientRuntime.Date?
    /// The last modified date for this environment.
    public var dateUpdated: ClientRuntime.Date?
    /// Describes this environment.
    public var description: Swift.String?
    /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
    public var endpointURL: Swift.String?
    /// The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.
    public var environmentArn: Swift.String?
    /// The ID of this environment.
    public var environmentId: Swift.String?
    /// A list of links to other environments in the same group.
    public var environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
    /// The name of this environment.
    public var environmentName: Swift.String?
    /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:
    ///
    /// * Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.
    ///
    /// * Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.
    ///
    /// * Green: Indicates the environment is healthy and fully functional.
    ///
    /// * Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironment request.
    ///
    ///
    /// Default: Grey
    public var health: ElasticBeanstalkClientTypes.EnvironmentHealth?
    /// Returns the health status of the application running in your environment. For more information, see [Health Colors and Statuses](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
    public var healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
    /// The Amazon Resource Name (ARN) of the environment's operations role. For more information, see [Operations roles](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html) in the AWS Elastic Beanstalk Developer Guide.
    public var operationsRole: Swift.String?
    /// The ARN of the platform version.
    public var platformArn: Swift.String?
    /// The description of the AWS resources used by this environment.
    public var resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
    /// The name of the SolutionStack deployed with this environment.
    public var solutionStackName: Swift.String?
    /// The current operational status of the environment:
    ///
    /// * Launching: Environment is in the process of initial deployment.
    ///
    /// * Updating: Environment is in the process of updating its configuration settings or application version.
    ///
    /// * Ready: Environment is available to have an action performed on it, such as update or terminate.
    ///
    /// * Terminating: Environment is in the shut-down process.
    ///
    /// * Terminated: Environment is not running.
    public var status: ElasticBeanstalkClientTypes.EnvironmentStatus?
    /// The name of the configuration template used to originally launch this environment.
    public var templateName: Swift.String?
    /// Describes the current tier of this environment.
    public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    /// The application version deployed in this environment.
    public var versionLabel: Swift.String?

    public init (
        abortableOperationInProgress: Swift.Bool? = nil,
        applicationName: Swift.String? = nil,
        cname: Swift.String? = nil,
        dateCreated: ClientRuntime.Date? = nil,
        dateUpdated: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        endpointURL: Swift.String? = nil,
        environmentArn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]? = nil,
        environmentName: Swift.String? = nil,
        health: ElasticBeanstalkClientTypes.EnvironmentHealth? = nil,
        healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus? = nil,
        operationsRole: Swift.String? = nil,
        platformArn: Swift.String? = nil,
        resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription? = nil,
        solutionStackName: Swift.String? = nil,
        status: ElasticBeanstalkClientTypes.EnvironmentStatus? = nil,
        templateName: Swift.String? = nil,
        tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.abortableOperationInProgress = abortableOperationInProgress
        self.applicationName = applicationName
        self.cname = cname
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.description = description
        self.endpointURL = endpointURL
        self.environmentArn = environmentArn
        self.environmentId = environmentId
        self.environmentLinks = environmentLinks
        self.environmentName = environmentName
        self.health = health
        self.healthStatus = healthStatus
        self.operationsRole = operationsRole
        self.platformArn = platformArn
        self.resources = resources
        self.solutionStackName = solutionStackName
        self.status = status
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}

struct UpdateEnvironmentOutputResponseBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let endpointURL: Swift.String?
    let cname: Swift.String?
    let dateCreated: ClientRuntime.Date?
    let dateUpdated: ClientRuntime.Date?
    let status: ElasticBeanstalkClientTypes.EnvironmentStatus?
    let abortableOperationInProgress: Swift.Bool?
    let health: ElasticBeanstalkClientTypes.EnvironmentHealth?
    let healthStatus: ElasticBeanstalkClientTypes.EnvironmentHealthStatus?
    let resources: ElasticBeanstalkClientTypes.EnvironmentResourcesDescription?
    let tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    let environmentLinks: [ElasticBeanstalkClientTypes.EnvironmentLink]?
    let environmentArn: Swift.String?
    let operationsRole: Swift.String?
}

extension UpdateEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortableOperationInProgress = "AbortableOperationInProgress"
        case applicationName = "ApplicationName"
        case cname = "CNAME"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointURL = "EndpointURL"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case health = "Health"
        case healthStatus = "HealthStatus"
        case operationsRole = "OperationsRole"
        case platformArn = "PlatformArn"
        case resources = "Resources"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateEnvironmentResult"))
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointURL)
        endpointURL = endpointURLDecoded
        let cnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cname)
        cname = cnameDecoded
        let dateCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let abortableOperationInProgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .abortableOperationInProgress)
        abortableOperationInProgress = abortableOperationInProgressDecoded
        let healthDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealth.self, forKey: .health)
        health = healthDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentResourcesDescription.self, forKey: .resources)
        resources = resourcesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.environmentLinks) {
            struct KeyVal0{struct member{}}
            let environmentLinksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentLinks)
            if let environmentLinksWrappedContainer = environmentLinksWrappedContainer {
                let environmentLinksContainer = try environmentLinksWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentLink].self, forKey: .member)
                var environmentLinksBuffer:[ElasticBeanstalkClientTypes.EnvironmentLink]? = nil
                if let environmentLinksContainer = environmentLinksContainer {
                    environmentLinksBuffer = [ElasticBeanstalkClientTypes.EnvironmentLink]()
                    for structureContainer0 in environmentLinksContainer {
                        environmentLinksBuffer?.append(structureContainer0)
                    }
                }
                environmentLinks = environmentLinksBuffer
            } else {
                environmentLinks = []
            }
        } else {
            environmentLinks = nil
        }
        let environmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}

extension UpdateTagsForResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        if let tagsToAdd = tagsToAdd {
            if !tagsToAdd.isEmpty {
                var tagsToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagsToAdd"))
                for (index0, tag0) in tagsToAdd.enumerated() {
                    try tagsToAddContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagsToAdd"))
                try tagsToAddContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagsToRemove = tagsToRemove {
            if !tagsToRemove.isEmpty {
                var tagsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagsToRemove"))
                for (index0, tagkey0) in tagsToRemove.enumerated() {
                    try tagsToRemoveContainer.encode(tagkey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagsToRemove"))
                try tagsToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("UpdateTagsForResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resouce to be updated. Must be the ARN of an Elastic Beanstalk resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated. Specify at least one of these parameters: TagsToAdd, TagsToRemove.
    public var tagsToAdd: [ElasticBeanstalkClientTypes.Tag]?
    /// A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored. Specify at least one of these parameters: TagsToAdd, TagsToRemove.
    public var tagsToRemove: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagsToAdd: [ElasticBeanstalkClientTypes.Tag]? = nil,
        tagsToRemove: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagsToAdd = tagsToAdd
        self.tagsToRemove = tagsToRemove
    }
}

struct UpdateTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagsToAdd: [ElasticBeanstalkClientTypes.Tag]?
    let tagsToRemove: [Swift.String]?
}

extension UpdateTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagsToAdd = "TagsToAdd"
        case tagsToRemove = "TagsToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        if containerValues.contains(.tagsToAdd) {
            struct KeyVal0{struct member{}}
            let tagsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tagsToAdd)
            if let tagsToAddWrappedContainer = tagsToAddWrappedContainer {
                let tagsToAddContainer = try tagsToAddWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsToAddBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsToAddContainer = tagsToAddContainer {
                    tagsToAddBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsToAddContainer {
                        tagsToAddBuffer?.append(structureContainer0)
                    }
                }
                tagsToAdd = tagsToAddBuffer
            } else {
                tagsToAdd = []
            }
        } else {
            tagsToAdd = nil
        }
        if containerValues.contains(.tagsToRemove) {
            struct KeyVal0{struct member{}}
            let tagsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tagsToRemove)
            if let tagsToRemoveWrappedContainer = tagsToRemoveWrappedContainer {
                let tagsToRemoveContainer = try tagsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagsToRemoveBuffer:[Swift.String]? = nil
                if let tagsToRemoveContainer = tagsToRemoveContainer {
                    tagsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in tagsToRemoveContainer {
                        tagsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                tagsToRemove = tagsToRemoveBuffer
            } else {
                tagsToRemove = []
            }
        } else {
            tagsToRemove = nil
        }
    }
}

extension UpdateTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressFailure" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceTypeNotSupportedException" : self = .resourceTypeNotSupportedException(try ResourceTypeNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case operationInProgressException(OperationInProgressException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceTypeNotSupportedException(ResourceTypeNotSupportedException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTagsForResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ValidateConfigurationSettingsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(configurationoptionsetting0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("ValidateConfigurationSettings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ValidateConfigurationSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A list of validation messages for a specified configuration template.
public struct ValidateConfigurationSettingsInput: Swift.Equatable {
    /// The name of the application that the configuration template or environment belongs to.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of the environment to validate the settings against. Condition: You cannot specify both this and a configuration template name.
    public var environmentName: Swift.String?
    /// A list of the options and desired values to evaluate.
    /// This member is required.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// The name of the configuration template to validate the settings against. Condition: You cannot specify both this and an environment name.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.environmentName = environmentName
        self.optionSettings = optionSettings
        self.templateName = templateName
    }
}

struct ValidateConfigurationSettingsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let environmentName: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
}

extension ValidateConfigurationSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
    }
}

extension ValidateConfigurationSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ValidateConfigurationSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPrivilegesException" : self = .insufficientPrivilegesException(try InsufficientPrivilegesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyBucketsException" : self = .tooManyBucketsException(try TooManyBucketsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ValidateConfigurationSettingsOutputError: Swift.Error, Swift.Equatable {
    case insufficientPrivilegesException(InsufficientPrivilegesException)
    case tooManyBucketsException(TooManyBucketsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidateConfigurationSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidateConfigurationSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messages = output.messages
        } else {
            self.messages = nil
        }
    }
}

/// Provides a list of validation messages.
public struct ValidateConfigurationSettingsOutputResponse: Swift.Equatable {
    /// A list of [ValidationMessage].
    public var messages: [ElasticBeanstalkClientTypes.ValidationMessage]?

    public init (
        messages: [ElasticBeanstalkClientTypes.ValidationMessage]? = nil
    )
    {
        self.messages = messages
    }
}

struct ValidateConfigurationSettingsOutputResponseBody: Swift.Equatable {
    let messages: [ElasticBeanstalkClientTypes.ValidationMessage]?
}

extension ValidateConfigurationSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages = "Messages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ValidateConfigurationSettingsResult"))
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ValidationMessage].self, forKey: .member)
                var messagesBuffer:[ElasticBeanstalkClientTypes.ValidationMessage]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [ElasticBeanstalkClientTypes.ValidationMessage]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

extension ElasticBeanstalkClientTypes.ValidationMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case namespace = "Namespace"
        case optionName = "OptionName"
        case severity = "Severity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: ClientRuntime.Key("OptionName"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ValidationSeverity.self, forKey: .severity)
        severity = severityDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let optionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionName)
        optionName = optionNameDecoded
    }
}

extension ElasticBeanstalkClientTypes {
    /// An error or warning for a desired configuration option value.
    public struct ValidationMessage: Swift.Equatable {
        /// A message describing the error or warning.
        public var message: Swift.String?
        /// The namespace to which the option belongs.
        public var namespace: Swift.String?
        /// The name of the option.
        public var optionName: Swift.String?
        /// An indication of the severity of this message:
        ///
        /// * error: This message indicates that this is not a valid setting for an option.
        ///
        /// * warning: This message is providing information you should take into account.
        public var severity: ElasticBeanstalkClientTypes.ValidationSeverity?

        public init (
            message: Swift.String? = nil,
            namespace: Swift.String? = nil,
            optionName: Swift.String? = nil,
            severity: ElasticBeanstalkClientTypes.ValidationSeverity? = nil
        )
        {
            self.message = message
            self.namespace = namespace
            self.optionName = optionName
            self.severity = severity
        }
    }

}

extension ElasticBeanstalkClientTypes {
    public enum ValidationSeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationSeverity] {
            return [
                .error,
                .warning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "error"
            case .warning: return "warning"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationSeverity(rawValue: rawValue) ?? ValidationSeverity.sdkUnknown(rawValue)
        }
    }
}
