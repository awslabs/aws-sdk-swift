// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension WAFClientTypes.ActivatedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case excludedRules = "ExcludedRules"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case ruleId = "RuleId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for excludedrule0 in excludedRules {
                try excludedRulesContainer.encode(excludedrule0)
            }
        }
        if let overrideAction = self.overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafAction.self, forKey: .action)
        action = actionDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafOverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafRuleType.self, forKey: .type)
        type = typeDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([WAFClientTypes.ExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[WAFClientTypes.ExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [WAFClientTypes.ExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The ActivatedRule object in an [UpdateWebACL] request specifies a Rule that you want to insert or delete, the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule (ALLOW, BLOCK, or COUNT). To specify whether to insert or delete a Rule, use the Action parameter in the [WebACLUpdate] data type.
    public struct ActivatedRule: Swift.Equatable {
        /// Specifies the action that CloudFront or AWS WAF takes when a web request matches the conditions in the Rule. Valid values for Action include the following:
        ///
        /// * ALLOW: CloudFront responds with the requested object.
        ///
        /// * BLOCK: CloudFront responds with an HTTP 403 (Forbidden) status code.
        ///
        /// * COUNT: AWS WAF increments a counter of requests that match the conditions in the rule and then continues to inspect the web request based on the remaining rules in the web ACL.
        ///
        ///
        /// ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case, you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public var action: WAFClientTypes.WafAction?
        /// An array of rules to exclude from a rule group. This is applicable only when the ActivatedRule refers to a RuleGroup. Sometimes it is necessary to troubleshoot rule groups that are blocking traffic unexpectedly (false positives). One troubleshooting technique is to identify the specific rule within the rule group that is blocking the legitimate traffic and then disable (exclude) that particular rule. You can exclude rules from both your own rule groups and AWS Marketplace rule groups that have been associated with a web ACL. Specifying ExcludedRules does not remove those rules from the rule group. Rather, it changes the action for the rules to COUNT. Therefore, requests that match an ExcludedRule are counted but not blocked. The RuleGroup owner will receive COUNT metrics for each ExcludedRule. If you want to exclude rules from a rule group that is already associated with a web ACL, perform the following steps:
        ///
        /// * Use the AWS WAF logs to identify the IDs of the rules that you want to exclude. For more information about the logs, see [Logging Web ACL Traffic Information](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html).
        ///
        /// * Submit an [UpdateWebACL] request that has two actions:
        ///
        /// * The first action deletes the existing rule group from the web ACL. That is, in the [UpdateWebACL] request, the first Updates:Action should be DELETE and Updates:ActivatedRule:RuleId should be the rule group that contains the rules that you want to exclude.
        ///
        /// * The second action inserts the same rule group back in, but specifying the rules to exclude. That is, the second Updates:Action should be INSERT, Updates:ActivatedRule:RuleId should be the rule group that you just removed, and ExcludedRules should contain the rules that you want to exclude.
        public var excludedRules: [WAFClientTypes.ExcludedRule]?
        /// Use the OverrideAction to test your RuleGroup. Any rule in a RuleGroup can potentially block a request. If you set the OverrideAction to None, the RuleGroup will block a request if any individual rule in the RuleGroup matches the request and is configured to block that request. However if you first want to test the RuleGroup, set the OverrideAction to Count. The RuleGroup will then override any block action specified by individual rules contained within the group. Instead of blocking matching requests, those requests will be counted. You can view a record of counted requests using [GetSampledRequests]. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public var overrideAction: WAFClientTypes.WafOverrideAction?
        /// Specifies the order in which the Rules in a WebACL are evaluated. Rules with a lower value for Priority are evaluated before Rules with a higher value. The value must be a unique integer. If you add multiple Rules to a WebACL, the values don't need to be consecutive.
        /// This member is required.
        public var priority: Swift.Int?
        /// The RuleId for a Rule. You use RuleId to get more information about a Rule (see [GetRule]), update a Rule (see [UpdateRule]), insert a Rule into a WebACL or delete a one from a WebACL (see [UpdateWebACL]), or delete a Rule from AWS WAF (see [DeleteRule]). RuleId is returned by [CreateRule] and by [ListRules].
        /// This member is required.
        public var ruleId: Swift.String?
        /// The rule type, either REGULAR, as defined by [Rule], RATE_BASED, as defined by [RateBasedRule], or GROUP, as defined by [RuleGroup]. The default is REGULAR. Although this field is optional, be aware that if you try to add a RATE_BASED rule to a web ACL without setting the type, the [UpdateWebACL] request will fail because the request tries to add a REGULAR rule with the specified ID, which does not exist.
        public var type: WAFClientTypes.WafRuleType?

        public init (
            action: WAFClientTypes.WafAction? = nil,
            excludedRules: [WAFClientTypes.ExcludedRule]? = nil,
            overrideAction: WAFClientTypes.WafOverrideAction? = nil,
            priority: Swift.Int? = nil,
            ruleId: Swift.String? = nil,
            type: WAFClientTypes.WafRuleType? = nil
        )
        {
            self.action = action
            self.excludedRules = excludedRules
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleId = ruleId
            self.type = type
        }
    }

}

extension WAFClientTypes.ByteMatchSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case byteMatchTuples = "ByteMatchTuples"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteMatchSetId = self.byteMatchSetId {
            try encodeContainer.encode(byteMatchSetId, forKey: .byteMatchSetId)
        }
        if let byteMatchTuples = byteMatchTuples {
            var byteMatchTuplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .byteMatchTuples)
            for bytematchtuple0 in byteMatchTuples {
                try byteMatchTuplesContainer.encode(bytematchtuple0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .byteMatchSetId)
        byteMatchSetId = byteMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let byteMatchTuplesContainer = try containerValues.decodeIfPresent([WAFClientTypes.ByteMatchTuple?].self, forKey: .byteMatchTuples)
        var byteMatchTuplesDecoded0:[WAFClientTypes.ByteMatchTuple]? = nil
        if let byteMatchTuplesContainer = byteMatchTuplesContainer {
            byteMatchTuplesDecoded0 = [WAFClientTypes.ByteMatchTuple]()
            for structure0 in byteMatchTuplesContainer {
                if let structure0 = structure0 {
                    byteMatchTuplesDecoded0?.append(structure0)
                }
            }
        }
        byteMatchTuples = byteMatchTuplesDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In a [GetByteMatchSet] request, ByteMatchSet is a complex type that contains the ByteMatchSetId and Name of a ByteMatchSet, and the values that you specified when you updated the ByteMatchSet. A complex type that contains ByteMatchTuple objects, which specify the parts of web requests that you want AWS WAF to inspect and the values that you want AWS WAF to search for. If a ByteMatchSet contains more than one ByteMatchTuple object, a request needs to match the settings in only one ByteMatchTuple to be considered a match.
    public struct ByteMatchSet: Swift.Equatable {
        /// The ByteMatchSetId for a ByteMatchSet. You use ByteMatchSetId to get information about a ByteMatchSet (see [GetByteMatchSet]), update a ByteMatchSet (see [UpdateByteMatchSet]), insert a ByteMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a ByteMatchSet from AWS WAF (see [DeleteByteMatchSet]). ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
        /// This member is required.
        public var byteMatchSetId: Swift.String?
        /// Specifies the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings.
        /// This member is required.
        public var byteMatchTuples: [WAFClientTypes.ByteMatchTuple]?
        /// A friendly name or description of the [ByteMatchSet]. You can't change Name after you create a ByteMatchSet.
        public var name: Swift.String?

        public init (
            byteMatchSetId: Swift.String? = nil,
            byteMatchTuples: [WAFClientTypes.ByteMatchTuple]? = nil,
            name: Swift.String? = nil
        )
        {
            self.byteMatchSetId = byteMatchSetId
            self.byteMatchTuples = byteMatchTuples
            self.name = name
        }
    }

}

extension WAFClientTypes.ByteMatchSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteMatchSetId = self.byteMatchSetId {
            try encodeContainer.encode(byteMatchSetId, forKey: .byteMatchSetId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .byteMatchSetId)
        byteMatchSetId = byteMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Returned by [ListByteMatchSets]. Each ByteMatchSetSummary object includes the Name and ByteMatchSetId for one [ByteMatchSet].
    public struct ByteMatchSetSummary: Swift.Equatable {
        /// The ByteMatchSetId for a ByteMatchSet. You use ByteMatchSetId to get information about a ByteMatchSet, update a ByteMatchSet, remove a ByteMatchSet from a Rule, and delete a ByteMatchSet from AWS WAF. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
        /// This member is required.
        public var byteMatchSetId: Swift.String?
        /// A friendly name or description of the [ByteMatchSet]. You can't change Name after you create a ByteMatchSet.
        /// This member is required.
        public var name: Swift.String?

        public init (
            byteMatchSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.byteMatchSetId = byteMatchSetId
            self.name = name
        }
    }

}

extension WAFClientTypes.ByteMatchSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case byteMatchTuple = "ByteMatchTuple"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let byteMatchTuple = self.byteMatchTuple {
            try encodeContainer.encode(byteMatchTuple, forKey: .byteMatchTuple)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let byteMatchTupleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ByteMatchTuple.self, forKey: .byteMatchTuple)
        byteMatchTuple = byteMatchTupleDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In an [UpdateByteMatchSet] request, ByteMatchSetUpdate specifies whether to insert or delete a [ByteMatchTuple] and includes the settings for the ByteMatchTuple.
    public struct ByteMatchSetUpdate: Swift.Equatable {
        /// Specifies whether to insert or delete a [ByteMatchTuple].
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// Information about the part of a web request that you want AWS WAF to inspect and the value that you want AWS WAF to search for. If you specify DELETE for the value of Action, the ByteMatchTuple values must exactly match the values in the ByteMatchTuple that you want to delete from the ByteMatchSet.
        /// This member is required.
        public var byteMatchTuple: WAFClientTypes.ByteMatchTuple?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            byteMatchTuple: WAFClientTypes.ByteMatchTuple? = nil
        )
        {
            self.action = action
            self.byteMatchTuple = byteMatchTuple
        }
    }

}

extension WAFClientTypes.ByteMatchTuple: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case positionalConstraint = "PositionalConstraint"
        case targetString = "TargetString"
        case textTransformation = "TextTransformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let positionalConstraint = self.positionalConstraint {
            try encodeContainer.encode(positionalConstraint.rawValue, forKey: .positionalConstraint)
        }
        if let targetString = self.targetString {
            try encodeContainer.encode(targetString.base64EncodedString(), forKey: .targetString)
        }
        if let textTransformation = self.textTransformation {
            try encodeContainer.encode(textTransformation.rawValue, forKey: .textTransformation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let targetStringDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .targetString)
        targetString = targetStringDecoded
        let textTransformationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TextTransformation.self, forKey: .textTransformation)
        textTransformation = textTransformationDecoded
        let positionalConstraintDecoded = try containerValues.decodeIfPresent(WAFClientTypes.PositionalConstraint.self, forKey: .positionalConstraint)
        positionalConstraint = positionalConstraintDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings.
    public struct ByteMatchTuple: Swift.Equatable {
        /// The part of a web request that you want AWS WAF to search, such as a specified header or a query string. For more information, see [FieldToMatch].
        /// This member is required.
        public var fieldToMatch: WAFClientTypes.FieldToMatch?
        /// Within the portion of a web request that you want to search (for example, in the query string, if any), specify where you want AWS WAF to search. Valid values include the following: CONTAINS The specified part of the web request must include the value of TargetString, but the location doesn't matter. CONTAINS_WORD The specified part of the web request must include the value of TargetString, and TargetString must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, TargetString must be a word, which means one of the following:
        ///
        /// * TargetString exactly matches the value of the specified part of the web request, such as the value of a header.
        ///
        /// * TargetString is at the beginning of the specified part of the web request and is followed by a character other than an alphanumeric character or underscore (_), for example, BadBot;.
        ///
        /// * TargetString is at the end of the specified part of the web request and is preceded by a character other than an alphanumeric character or underscore (_), for example, ;BadBot.
        ///
        /// * TargetString is in the middle of the specified part of the web request and is preceded and followed by characters other than alphanumeric characters or underscore (_), for example, -BadBot;.
        ///
        ///
        /// EXACTLY The value of the specified part of the web request must exactly match the value of TargetString. STARTS_WITH The value of TargetString must appear at the beginning of the specified part of the web request. ENDS_WITH The value of TargetString must appear at the end of the specified part of the web request.
        /// This member is required.
        public var positionalConstraint: WAFClientTypes.PositionalConstraint?
        /// The value that you want AWS WAF to search for. AWS WAF searches for the specified string in the part of web requests that you specified in FieldToMatch. The maximum length of the value is 50 bytes. Valid values depend on the values that you specified for FieldToMatch:
        ///
        /// * HEADER: The value that you want AWS WAF to search for in the request header that you specified in [FieldToMatch], for example, the value of the User-Agent or Referer header.
        ///
        /// * METHOD: The HTTP method, which indicates the type of operation specified in the request. CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        ///
        /// * QUERY_STRING: The value that you want AWS WAF to search for in the query string, which is the part of a URL that appears after a ? character.
        ///
        /// * URI: The value that you want AWS WAF to search for in the part of a URL that identifies a resource, for example, /images/daily-ad.jpg.
        ///
        /// * BODY: The part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. The request body immediately follows the request headers. Note that only the first 8192 bytes of the request body are forwarded to AWS WAF for inspection. To allow or block requests based on the length of the body, you can create a size constraint set. For more information, see [CreateSizeConstraintSet].
        ///
        /// * SINGLE_QUERY_ARG: The parameter in the query string that you will inspect, such as UserName or SalesRegion. The maximum length for SINGLE_QUERY_ARG is 30 characters.
        ///
        /// * ALL_QUERY_ARGS: Similar to SINGLE_QUERY_ARG, but instead of inspecting a single parameter, AWS WAF inspects all parameters within the query string for the value or regex pattern that you specify in TargetString.
        ///
        ///
        /// If TargetString includes alphabetic characters A-Z and a-z, note that the value is case sensitive. If you're using the AWS WAF API Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes. For example, suppose the value of Type is HEADER and the value of Data is User-Agent. If you want to search the User-Agent header for the value BadBot, you base64-encode BadBot using MIME base64-encoding and include the resulting value, QmFkQm90, in the value of TargetString. If you're using the AWS CLI or one of the AWS SDKs The value that you want AWS WAF to search for. The SDK automatically base64 encodes the value.
        /// This member is required.
        public var targetString: ClientRuntime.Data?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFClientTypes.TextTransformation?

        public init (
            fieldToMatch: WAFClientTypes.FieldToMatch? = nil,
            positionalConstraint: WAFClientTypes.PositionalConstraint? = nil,
            targetString: ClientRuntime.Data? = nil,
            textTransformation: WAFClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.targetString = targetString
            self.textTransformation = textTransformation
        }
    }

}

extension WAFClientTypes {
    public enum ChangeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeAction] {
            return [
                .delete,
                .insert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeAction(rawValue: rawValue) ?? ChangeAction.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum ChangeTokenStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insync
        case pending
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeTokenStatus] {
            return [
                .insync,
                .pending,
                .provisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insync: return "INSYNC"
            case .pending: return "PENDING"
            case .provisioned: return "PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeTokenStatus(rawValue: rawValue) ?? ChangeTokenStatus.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eq
        case ge
        case gt
        case le
        case lt
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .eq,
                .ge,
                .gt,
                .le,
                .lt,
                .ne,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension CreateByteMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateByteMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateByteMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [ByteMatchSet]. You can't change Name after you create a ByteMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateByteMatchSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateByteMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateByteMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateByteMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateByteMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateByteMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateByteMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.byteMatchSet = output.byteMatchSet
            self.changeToken = output.changeToken
        } else {
            self.byteMatchSet = nil
            self.changeToken = nil
        }
    }
}

public struct CreateByteMatchSetOutputResponse: Swift.Equatable {
    /// A [ByteMatchSet] that contains no ByteMatchTuple objects.
    public var byteMatchSet: WAFClientTypes.ByteMatchSet?
    /// The ChangeToken that you used to submit the CreateByteMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        byteMatchSet: WAFClientTypes.ByteMatchSet? = nil,
        changeToken: Swift.String? = nil
    )
    {
        self.byteMatchSet = byteMatchSet
        self.changeToken = changeToken
    }
}

struct CreateByteMatchSetOutputResponseBody: Swift.Equatable {
    let byteMatchSet: WAFClientTypes.ByteMatchSet?
    let changeToken: Swift.String?
}

extension CreateByteMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSet = "ByteMatchSet"
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ByteMatchSet.self, forKey: .byteMatchSet)
        byteMatchSet = byteMatchSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateGeoMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateGeoMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGeoMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [GeoMatchSet]. You can't change Name after you create the GeoMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateGeoMatchSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateGeoMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateGeoMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGeoMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGeoMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGeoMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGeoMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.geoMatchSet = output.geoMatchSet
        } else {
            self.changeToken = nil
            self.geoMatchSet = nil
        }
    }
}

public struct CreateGeoMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateGeoMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [GeoMatchSet] returned in the CreateGeoMatchSet response. The GeoMatchSet contains no GeoMatchConstraints.
    public var geoMatchSet: WAFClientTypes.GeoMatchSet?

    public init (
        changeToken: Swift.String? = nil,
        geoMatchSet: WAFClientTypes.GeoMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSet = geoMatchSet
    }
}

struct CreateGeoMatchSetOutputResponseBody: Swift.Equatable {
    let geoMatchSet: WAFClientTypes.GeoMatchSet?
    let changeToken: Swift.String?
}

extension CreateGeoMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case geoMatchSet = "GeoMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.GeoMatchSet.self, forKey: .geoMatchSet)
        geoMatchSet = geoMatchSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateIPSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [IPSet]. You can't change Name after you create the IPSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateIPSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.ipSet = output.ipSet
        } else {
            self.changeToken = nil
            self.ipSet = nil
        }
    }
}

public struct CreateIPSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateIPSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [IPSet] returned in the CreateIPSet response.
    public var ipSet: WAFClientTypes.IPSet?

    public init (
        changeToken: Swift.String? = nil,
        ipSet: WAFClientTypes.IPSet? = nil
    )
    {
        self.changeToken = changeToken
        self.ipSet = ipSet
    }
}

struct CreateIPSetOutputResponseBody: Swift.Equatable {
    let ipSet: WAFClientTypes.IPSet?
    let changeToken: Swift.String?
}

extension CreateIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ipSet = "IPSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.IPSet.self, forKey: .ipSet)
        ipSet = ipSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRateBasedRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case rateKey = "RateKey"
        case rateLimit = "RateLimit"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rateKey = self.rateKey {
            try encodeContainer.encode(rateKey.rawValue, forKey: .rateKey)
        }
        if rateLimit != 0 {
            try encodeContainer.encode(rateLimit, forKey: .rateLimit)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateRateBasedRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRateBasedRuleInput: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the metrics for this RateBasedRule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [RateBasedRule]. You can't change the name of a RateBasedRule after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The field that AWS WAF uses to determine if requests are likely arriving from a single source and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that requests that arrive from the same IP address are subject to the RateLimit that is specified in the RateBasedRule.
    /// This member is required.
    public var rateKey: WAFClientTypes.RateKey?
    /// The maximum number of requests, which have an identical value in the field that is specified by RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
    /// This member is required.
    public var rateLimit: Swift.Int
    ///
    public var tags: [WAFClientTypes.Tag]?

    public init (
        changeToken: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        rateKey: WAFClientTypes.RateKey? = nil,
        rateLimit: Swift.Int = 0,
        tags: [WAFClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.rateKey = rateKey
        self.rateLimit = rateLimit
        self.tags = tags
    }
}

struct CreateRateBasedRuleInputBody: Swift.Equatable {
    let name: Swift.String?
    let metricName: Swift.String?
    let rateKey: WAFClientTypes.RateKey?
    let rateLimit: Swift.Int
    let changeToken: Swift.String?
    let tags: [WAFClientTypes.Tag]?
}

extension CreateRateBasedRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case rateKey = "RateKey"
        case rateLimit = "RateLimit"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let rateKeyDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RateKey.self, forKey: .rateKey)
        rateKey = rateKeyDecoded
        let rateLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rateLimit) ?? 0
        rateLimit = rateLimitDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRateBasedRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRateBasedRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRateBasedRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRateBasedRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRateBasedRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.rule = output.rule
        } else {
            self.changeToken = nil
            self.rule = nil
        }
    }
}

public struct CreateRateBasedRuleOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [RateBasedRule] that is returned in the CreateRateBasedRule response.
    public var rule: WAFClientTypes.RateBasedRule?

    public init (
        changeToken: Swift.String? = nil,
        rule: WAFClientTypes.RateBasedRule? = nil
    )
    {
        self.changeToken = changeToken
        self.rule = rule
    }
}

struct CreateRateBasedRuleOutputResponseBody: Swift.Equatable {
    let rule: WAFClientTypes.RateBasedRule?
    let changeToken: Swift.String?
}

extension CreateRateBasedRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case rule = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RateBasedRule.self, forKey: .rule)
        rule = ruleDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRegexMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateRegexMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRegexMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [RegexMatchSet]. You can't change Name after you create a RegexMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateRegexMatchSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateRegexMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRegexMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRegexMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRegexMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRegexMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRegexMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.regexMatchSet = output.regexMatchSet
        } else {
            self.changeToken = nil
            self.regexMatchSet = nil
        }
    }
}

public struct CreateRegexMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateRegexMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [RegexMatchSet] that contains no RegexMatchTuple objects.
    public var regexMatchSet: WAFClientTypes.RegexMatchSet?

    public init (
        changeToken: Swift.String? = nil,
        regexMatchSet: WAFClientTypes.RegexMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.regexMatchSet = regexMatchSet
    }
}

struct CreateRegexMatchSetOutputResponseBody: Swift.Equatable {
    let regexMatchSet: WAFClientTypes.RegexMatchSet?
    let changeToken: Swift.String?
}

extension CreateRegexMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexMatchSet = "RegexMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RegexMatchSet.self, forKey: .regexMatchSet)
        regexMatchSet = regexMatchSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRegexPatternSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [RegexPatternSet]. You can't change Name after you create a RegexPatternSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateRegexPatternSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.regexPatternSet = output.regexPatternSet
        } else {
            self.changeToken = nil
            self.regexPatternSet = nil
        }
    }
}

public struct CreateRegexPatternSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateRegexPatternSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [RegexPatternSet] that contains no objects.
    public var regexPatternSet: WAFClientTypes.RegexPatternSet?

    public init (
        changeToken: Swift.String? = nil,
        regexPatternSet: WAFClientTypes.RegexPatternSet? = nil
    )
    {
        self.changeToken = changeToken
        self.regexPatternSet = regexPatternSet
    }
}

struct CreateRegexPatternSetOutputResponseBody: Swift.Equatable {
    let regexPatternSet: WAFClientTypes.RegexPatternSet?
    let changeToken: Swift.String?
}

extension CreateRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexPatternSet = "RegexPatternSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RegexPatternSet.self, forKey: .regexPatternSet)
        regexPatternSet = regexPatternSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRuleGroupInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [RuleGroup]. You can't change Name after you create a RuleGroup.
    /// This member is required.
    public var name: Swift.String?
    ///
    public var tags: [WAFClientTypes.Tag]?

    public init (
        changeToken: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [WAFClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.tags = tags
    }
}

struct CreateRuleGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let metricName: Swift.String?
    let changeToken: Swift.String?
    let tags: [WAFClientTypes.Tag]?
}

extension CreateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.ruleGroup = output.ruleGroup
        } else {
            self.changeToken = nil
            self.ruleGroup = nil
        }
    }
}

public struct CreateRuleGroupOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateRuleGroup request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// An empty [RuleGroup].
    public var ruleGroup: WAFClientTypes.RuleGroup?

    public init (
        changeToken: Swift.String? = nil,
        ruleGroup: WAFClientTypes.RuleGroup? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleGroup = ruleGroup
    }
}

struct CreateRuleGroupOutputResponseBody: Swift.Equatable {
    let ruleGroup: WAFClientTypes.RuleGroup?
    let changeToken: Swift.String?
}

extension CreateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleGroup = "RuleGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRuleInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the metrics for this Rule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the Rule.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [Rule]. You can't change the name of a Rule after you create it.
    /// This member is required.
    public var name: Swift.String?
    ///
    public var tags: [WAFClientTypes.Tag]?

    public init (
        changeToken: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [WAFClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.tags = tags
    }
}

struct CreateRuleInputBody: Swift.Equatable {
    let name: Swift.String?
    let metricName: Swift.String?
    let changeToken: Swift.String?
    let tags: [WAFClientTypes.Tag]?
}

extension CreateRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.rule = output.rule
        } else {
            self.changeToken = nil
            self.rule = nil
        }
    }
}

public struct CreateRuleOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [Rule] returned in the CreateRule response.
    public var rule: WAFClientTypes.Rule?

    public init (
        changeToken: Swift.String? = nil,
        rule: WAFClientTypes.Rule? = nil
    )
    {
        self.changeToken = changeToken
        self.rule = rule
    }
}

struct CreateRuleOutputResponseBody: Swift.Equatable {
    let rule: WAFClientTypes.Rule?
    let changeToken: Swift.String?
}

extension CreateRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case rule = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.Rule.self, forKey: .rule)
        rule = ruleDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateSizeConstraintSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateSizeConstraintSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSizeConstraintSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [SizeConstraintSet]. You can't change Name after you create a SizeConstraintSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateSizeConstraintSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateSizeConstraintSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateSizeConstraintSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSizeConstraintSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSizeConstraintSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSizeConstraintSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateSizeConstraintSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.sizeConstraintSet = output.sizeConstraintSet
        } else {
            self.changeToken = nil
            self.sizeConstraintSet = nil
        }
    }
}

public struct CreateSizeConstraintSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateSizeConstraintSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [SizeConstraintSet] that contains no SizeConstraint objects.
    public var sizeConstraintSet: WAFClientTypes.SizeConstraintSet?

    public init (
        changeToken: Swift.String? = nil,
        sizeConstraintSet: WAFClientTypes.SizeConstraintSet? = nil
    )
    {
        self.changeToken = changeToken
        self.sizeConstraintSet = sizeConstraintSet
    }
}

struct CreateSizeConstraintSetOutputResponseBody: Swift.Equatable {
    let sizeConstraintSet: WAFClientTypes.SizeConstraintSet?
    let changeToken: Swift.String?
}

extension CreateSizeConstraintSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sizeConstraintSet = "SizeConstraintSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.SizeConstraintSet.self, forKey: .sizeConstraintSet)
        sizeConstraintSet = sizeConstraintSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateSqlInjectionMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateSqlInjectionMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to create a [SqlInjectionMatchSet].
public struct CreateSqlInjectionMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the [SqlInjectionMatchSet] that you're creating. You can't change Name after you create the SqlInjectionMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateSqlInjectionMatchSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateSqlInjectionMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateSqlInjectionMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSqlInjectionMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSqlInjectionMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSqlInjectionMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateSqlInjectionMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.sqlInjectionMatchSet = output.sqlInjectionMatchSet
        } else {
            self.changeToken = nil
            self.sqlInjectionMatchSet = nil
        }
    }
}

/// The response to a CreateSqlInjectionMatchSet request.
public struct CreateSqlInjectionMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateSqlInjectionMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [SqlInjectionMatchSet].
    public var sqlInjectionMatchSet: WAFClientTypes.SqlInjectionMatchSet?

    public init (
        changeToken: Swift.String? = nil,
        sqlInjectionMatchSet: WAFClientTypes.SqlInjectionMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.sqlInjectionMatchSet = sqlInjectionMatchSet
    }
}

struct CreateSqlInjectionMatchSetOutputResponseBody: Swift.Equatable {
    let sqlInjectionMatchSet: WAFClientTypes.SqlInjectionMatchSet?
    let changeToken: Swift.String?
}

extension CreateSqlInjectionMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sqlInjectionMatchSet = "SqlInjectionMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.SqlInjectionMatchSet.self, forKey: .sqlInjectionMatchSet)
        sqlInjectionMatchSet = sqlInjectionMatchSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case defaultAction = "DefaultAction"
        case metricName = "MetricName"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWebACLInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The action that you want AWS WAF to take when a request doesn't match the criteria specified in any of the Rule objects that are associated with the WebACL.
    /// This member is required.
    public var defaultAction: WAFClientTypes.WafAction?
    /// A friendly name or description for the metrics for this WebACL.The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the WebACL.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [WebACL]. You can't change Name after you create the WebACL.
    /// This member is required.
    public var name: Swift.String?
    ///
    public var tags: [WAFClientTypes.Tag]?

    public init (
        changeToken: Swift.String? = nil,
        defaultAction: WAFClientTypes.WafAction? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [WAFClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.defaultAction = defaultAction
        self.metricName = metricName
        self.name = name
        self.tags = tags
    }
}

struct CreateWebACLInputBody: Swift.Equatable {
    let name: Swift.String?
    let metricName: Swift.String?
    let defaultAction: WAFClientTypes.WafAction?
    let changeToken: Swift.String?
    let tags: [WAFClientTypes.Tag]?
}

extension CreateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case defaultAction = "DefaultAction"
        case metricName = "MetricName"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateWebACLMigrationStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ignoreUnsupportedType = "IgnoreUnsupportedType"
        case s3BucketName = "S3BucketName"
        case webACLId = "WebACLId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ignoreUnsupportedType = self.ignoreUnsupportedType {
            try encodeContainer.encode(ignoreUnsupportedType, forKey: .ignoreUnsupportedType)
        }
        if let s3BucketName = self.s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
    }
}

extension CreateWebACLMigrationStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWebACLMigrationStackInput: Swift.Equatable {
    /// Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported entities, it stops the process and throws an exception.
    /// This member is required.
    public var ignoreUnsupportedType: Swift.Bool?
    /// The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be configured as follows for the migration:
    ///
    /// * The bucket name must start with aws-waf-migration-. For example, aws-waf-migration-my-web-acl.
    ///
    /// * The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2.
    ///
    /// * The bucket policies must permit the migration process to write data. For listings of the bucket policies, see the Examples section.
    /// This member is required.
    public var s3BucketName: Swift.String?
    /// The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.
    /// This member is required.
    public var webACLId: Swift.String?

    public init (
        ignoreUnsupportedType: Swift.Bool? = nil,
        s3BucketName: Swift.String? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.ignoreUnsupportedType = ignoreUnsupportedType
        self.s3BucketName = s3BucketName
        self.webACLId = webACLId
    }
}

struct CreateWebACLMigrationStackInputBody: Swift.Equatable {
    let webACLId: Swift.String?
    let s3BucketName: Swift.String?
    let ignoreUnsupportedType: Swift.Bool?
}

extension CreateWebACLMigrationStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ignoreUnsupportedType = "IgnoreUnsupportedType"
        case s3BucketName = "S3BucketName"
        case webACLId = "WebACLId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let ignoreUnsupportedTypeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ignoreUnsupportedType)
        ignoreUnsupportedType = ignoreUnsupportedTypeDecoded
    }
}

extension CreateWebACLMigrationStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWebACLMigrationStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFEntityMigrationException" : self = .wAFEntityMigrationException(try WAFEntityMigrationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateWebACLMigrationStackOutputError: Swift.Error, Swift.Equatable {
    case wAFEntityMigrationException(WAFEntityMigrationException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWebACLMigrationStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateWebACLMigrationStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.s3ObjectUrl = output.s3ObjectUrl
        } else {
            self.s3ObjectUrl = nil
        }
    }
}

public struct CreateWebACLMigrationStackOutputResponse: Swift.Equatable {
    /// The URL of the template created in Amazon S3.
    /// This member is required.
    public var s3ObjectUrl: Swift.String?

    public init (
        s3ObjectUrl: Swift.String? = nil
    )
    {
        self.s3ObjectUrl = s3ObjectUrl
    }
}

struct CreateWebACLMigrationStackOutputResponseBody: Swift.Equatable {
    let s3ObjectUrl: Swift.String?
}

extension CreateWebACLMigrationStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3ObjectUrl = "S3ObjectUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ObjectUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3ObjectUrl)
        s3ObjectUrl = s3ObjectUrlDecoded
    }
}

extension CreateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.webACL = output.webACL
        } else {
            self.changeToken = nil
            self.webACL = nil
        }
    }
}

public struct CreateWebACLOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateWebACL request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [WebACL] returned in the CreateWebACL response.
    public var webACL: WAFClientTypes.WebACL?

    public init (
        changeToken: Swift.String? = nil,
        webACL: WAFClientTypes.WebACL? = nil
    )
    {
        self.changeToken = changeToken
        self.webACL = webACL
    }
}

struct CreateWebACLOutputResponseBody: Swift.Equatable {
    let webACL: WAFClientTypes.WebACL?
    let changeToken: Swift.String?
}

extension CreateWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case webACL = "WebACL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WebACL.self, forKey: .webACL)
        webACL = webACLDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateXssMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateXssMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to create an [XssMatchSet].
public struct CreateXssMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the [XssMatchSet] that you're creating. You can't change Name after you create the XssMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

struct CreateXssMatchSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let changeToken: Swift.String?
}

extension CreateXssMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension CreateXssMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateXssMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateXssMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateXssMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateXssMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
            self.xssMatchSet = output.xssMatchSet
        } else {
            self.changeToken = nil
            self.xssMatchSet = nil
        }
    }
}

/// The response to a CreateXssMatchSet request.
public struct CreateXssMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the CreateXssMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// An [XssMatchSet].
    public var xssMatchSet: WAFClientTypes.XssMatchSet?

    public init (
        changeToken: Swift.String? = nil,
        xssMatchSet: WAFClientTypes.XssMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.xssMatchSet = xssMatchSet
    }
}

struct CreateXssMatchSetOutputResponseBody: Swift.Equatable {
    let xssMatchSet: WAFClientTypes.XssMatchSet?
    let changeToken: Swift.String?
}

extension CreateXssMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case xssMatchSet = "XssMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.XssMatchSet.self, forKey: .xssMatchSet)
        xssMatchSet = xssMatchSetDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteByteMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case changeToken = "ChangeToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteMatchSetId = self.byteMatchSetId {
            try encodeContainer.encode(byteMatchSetId, forKey: .byteMatchSetId)
        }
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
    }
}

extension DeleteByteMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteByteMatchSetInput: Swift.Equatable {
    /// The ByteMatchSetId of the [ByteMatchSet] that you want to delete. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
    /// This member is required.
    public var byteMatchSetId: Swift.String?
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?

    public init (
        byteMatchSetId: Swift.String? = nil,
        changeToken: Swift.String? = nil
    )
    {
        self.byteMatchSetId = byteMatchSetId
        self.changeToken = changeToken
    }
}

struct DeleteByteMatchSetInputBody: Swift.Equatable {
    let byteMatchSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteByteMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .byteMatchSetId)
        byteMatchSetId = byteMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteByteMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteByteMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteByteMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteByteMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteByteMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteByteMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteByteMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteByteMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteByteMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteGeoMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case geoMatchSetId = "GeoMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let geoMatchSetId = self.geoMatchSetId {
            try encodeContainer.encode(geoMatchSetId, forKey: .geoMatchSetId)
        }
    }
}

extension DeleteGeoMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGeoMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The GeoMatchSetID of the [GeoMatchSet] that you want to delete. GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
    /// This member is required.
    public var geoMatchSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        geoMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSetId = geoMatchSetId
    }
}

struct DeleteGeoMatchSetInputBody: Swift.Equatable {
    let geoMatchSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteGeoMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case geoMatchSetId = "GeoMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .geoMatchSetId)
        geoMatchSetId = geoMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteGeoMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGeoMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGeoMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGeoMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteGeoMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteGeoMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteGeoMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteGeoMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteGeoMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ipSetId = "IPSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ipSetId = self.ipSetId {
            try encodeContainer.encode(ipSetId, forKey: .ipSetId)
        }
    }
}

extension DeleteIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteIPSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The IPSetId of the [IPSet] that you want to delete. IPSetId is returned by [CreateIPSet] and by [ListIPSets].
    /// This member is required.
    public var ipSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        ipSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ipSetId = ipSetId
    }
}

struct DeleteIPSetInputBody: Swift.Equatable {
    let ipSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ipSetId = "IPSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipSetId)
        ipSetId = ipSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteIPSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteIPSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteIPSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeleteLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the web ACL from which you want to delete the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteLoggingConfigurationInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeleteLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLoggingConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePermissionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeletePermissionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePermissionPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the RuleGroup from which you want to delete the policy. The user making the request must be the owner of the RuleGroup.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeletePermissionPolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeletePermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeletePermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePermissionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRateBasedRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }
}

extension DeleteRateBasedRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRateBasedRuleInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleId of the [RateBasedRule] that you want to delete. RuleId is returned by [CreateRateBasedRule] and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        ruleId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleId = ruleId
    }
}

struct DeleteRateBasedRuleInputBody: Swift.Equatable {
    let ruleId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteRateBasedRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleId = "RuleId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRateBasedRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRateBasedRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRateBasedRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRateBasedRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRateBasedRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteRateBasedRuleOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteRateBasedRuleOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteRateBasedRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRegexMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexMatchSetId = "RegexMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let regexMatchSetId = self.regexMatchSetId {
            try encodeContainer.encode(regexMatchSetId, forKey: .regexMatchSetId)
        }
    }
}

extension DeleteRegexMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRegexMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexMatchSetId of the [RegexMatchSet] that you want to delete. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
    /// This member is required.
    public var regexMatchSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        regexMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.regexMatchSetId = regexMatchSetId
    }
}

struct DeleteRegexMatchSetInputBody: Swift.Equatable {
    let regexMatchSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteRegexMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexMatchSetId = "RegexMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRegexMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRegexMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRegexMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRegexMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRegexMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteRegexMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteRegexMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteRegexMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteRegexMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexPatternSetId = "RegexPatternSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
    }
}

extension DeleteRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRegexPatternSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexPatternSetId of the [RegexPatternSet] that you want to delete. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
    /// This member is required.
    public var regexPatternSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        regexPatternSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.regexPatternSetId = regexPatternSetId
    }
}

struct DeleteRegexPatternSetInputBody: Swift.Equatable {
    let regexPatternSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexPatternSetId = "RegexPatternSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteRegexPatternSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteRegexPatternSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteRegexPatternSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleGroupId = "RuleGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
    }
}

extension DeleteRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRuleGroupInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleGroupId of the [RuleGroup] that you want to delete. RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
    /// This member is required.
    public var ruleGroupId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        ruleGroupId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleGroupId = ruleGroupId
    }
}

struct DeleteRuleGroupInputBody: Swift.Equatable {
    let ruleGroupId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleGroupId = "RuleGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteRuleGroupOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteRuleGroup request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteRuleGroupOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }
}

extension DeleteRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRuleInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleId of the [Rule] that you want to delete. RuleId is returned by [CreateRule] and by [ListRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        ruleId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleId = ruleId
    }
}

struct DeleteRuleInputBody: Swift.Equatable {
    let ruleId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleId = "RuleId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteRuleOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteRuleOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteSizeConstraintSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sizeConstraintSetId = "SizeConstraintSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let sizeConstraintSetId = self.sizeConstraintSetId {
            try encodeContainer.encode(sizeConstraintSetId, forKey: .sizeConstraintSetId)
        }
    }
}

extension DeleteSizeConstraintSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSizeConstraintSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SizeConstraintSetId of the [SizeConstraintSet] that you want to delete. SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
    /// This member is required.
    public var sizeConstraintSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        sizeConstraintSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.sizeConstraintSetId = sizeConstraintSetId
    }
}

struct DeleteSizeConstraintSetInputBody: Swift.Equatable {
    let sizeConstraintSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteSizeConstraintSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sizeConstraintSetId = "SizeConstraintSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizeConstraintSetId)
        sizeConstraintSetId = sizeConstraintSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteSizeConstraintSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSizeConstraintSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSizeConstraintSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSizeConstraintSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteSizeConstraintSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteSizeConstraintSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteSizeConstraintSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteSizeConstraintSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteSizeConstraintSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteSqlInjectionMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let sqlInjectionMatchSetId = self.sqlInjectionMatchSetId {
            try encodeContainer.encode(sqlInjectionMatchSetId, forKey: .sqlInjectionMatchSetId)
        }
    }
}

extension DeleteSqlInjectionMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to delete a [SqlInjectionMatchSet] from AWS WAF.
public struct DeleteSqlInjectionMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SqlInjectionMatchSetId of the [SqlInjectionMatchSet] that you want to delete. SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
    /// This member is required.
    public var sqlInjectionMatchSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        sqlInjectionMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
    }
}

struct DeleteSqlInjectionMatchSetInputBody: Swift.Equatable {
    let sqlInjectionMatchSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteSqlInjectionMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqlInjectionMatchSetId)
        sqlInjectionMatchSetId = sqlInjectionMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteSqlInjectionMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSqlInjectionMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSqlInjectionMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSqlInjectionMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteSqlInjectionMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

/// The response to a request to delete a [SqlInjectionMatchSet] from AWS WAF.
public struct DeleteSqlInjectionMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteSqlInjectionMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteSqlInjectionMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteSqlInjectionMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case webACLId = "WebACLId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
    }
}

extension DeleteWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWebACLInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The WebACLId of the [WebACL] that you want to delete. WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
    /// This member is required.
    public var webACLId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.webACLId = webACLId
    }
}

struct DeleteWebACLInputBody: Swift.Equatable {
    let webACLId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case webACLId = "WebACLId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct DeleteWebACLOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteWebACL request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteWebACLOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteXssMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case xssMatchSetId = "XssMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let xssMatchSetId = self.xssMatchSetId {
            try encodeContainer.encode(xssMatchSetId, forKey: .xssMatchSetId)
        }
    }
}

extension DeleteXssMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to delete an [XssMatchSet] from AWS WAF.
public struct DeleteXssMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The XssMatchSetId of the [XssMatchSet] that you want to delete. XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
    /// This member is required.
    public var xssMatchSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        xssMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.xssMatchSetId = xssMatchSetId
    }
}

struct DeleteXssMatchSetInputBody: Swift.Equatable {
    let xssMatchSetId: Swift.String?
    let changeToken: Swift.String?
}

extension DeleteXssMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case xssMatchSetId = "XssMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xssMatchSetId)
        xssMatchSetId = xssMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension DeleteXssMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteXssMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteXssMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonEmptyEntityException(WAFNonEmptyEntityException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteXssMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteXssMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

/// The response to a request to delete an [XssMatchSet] from AWS WAF.
public struct DeleteXssMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the DeleteXssMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct DeleteXssMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension DeleteXssMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension WAFClientTypes.ExcludedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The rule to exclude from a rule group. This is applicable only when the ActivatedRule refers to a RuleGroup. The rule must belong to the RuleGroup that is specified by the ActivatedRule.
    public struct ExcludedRule: Swift.Equatable {
        /// The unique identifier for the rule to exclude from the rule group.
        /// This member is required.
        public var ruleId: Swift.String?

        public init (
            ruleId: Swift.String? = nil
        )
        {
            self.ruleId = ruleId
        }
    }

}

extension WAFClientTypes.FieldToMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.MatchFieldType.self, forKey: .type)
        type = typeDecoded
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies where in a web request to look for TargetString.
    public struct FieldToMatch: Swift.Equatable {
        /// When the value of Type is HEADER, enter the name of the header that you want AWS WAF to search, for example, User-Agent or Referer. The name of the header is not case sensitive. When the value of Type is SINGLE_QUERY_ARG, enter the name of the parameter that you want AWS WAF to search, for example, UserName or SalesRegion. The parameter name is not case sensitive. If the value of Type is any other value, omit Data.
        public var data: Swift.String?
        /// The part of the web request that you want AWS WAF to search for a specified string. Parts of a request that you can search include the following:
        ///
        /// * HEADER: A specified request header, for example, the value of the User-Agent or Referer header. If you choose HEADER for the type, specify the name of the header in Data.
        ///
        /// * METHOD: The HTTP method, which indicated the type of operation that the request is asking the origin to perform. Amazon CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        ///
        /// * QUERY_STRING: A query string, which is the part of a URL that appears after a ? character, if any.
        ///
        /// * URI: The part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        ///
        /// * BODY: The part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. The request body immediately follows the request headers. Note that only the first 8192 bytes of the request body are forwarded to AWS WAF for inspection. To allow or block requests based on the length of the body, you can create a size constraint set. For more information, see [CreateSizeConstraintSet].
        ///
        /// * SINGLE_QUERY_ARG: The parameter in the query string that you will inspect, such as UserName or SalesRegion. The maximum length for SINGLE_QUERY_ARG is 30 characters.
        ///
        /// * ALL_QUERY_ARGS: Similar to SINGLE_QUERY_ARG, but rather than inspecting a single parameter, AWS WAF will inspect all parameters within the query for the value or regex pattern that you specify in TargetString.
        /// This member is required.
        public var type: WAFClientTypes.MatchFieldType?

        public init (
            data: Swift.String? = nil,
            type: WAFClientTypes.MatchFieldType? = nil
        )
        {
            self.data = data
            self.type = type
        }
    }

}

extension WAFClientTypes.GeoMatchConstraint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value.rawValue, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.GeoMatchConstraintType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(WAFClientTypes.GeoMatchConstraintValue.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The country from which web requests originate that you want AWS WAF to search for.
    public struct GeoMatchConstraint: Swift.Equatable {
        /// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
        /// This member is required.
        public var type: WAFClientTypes.GeoMatchConstraintType?
        /// The country that you want AWS WAF to search for.
        /// This member is required.
        public var value: WAFClientTypes.GeoMatchConstraintValue?

        public init (
            type: WAFClientTypes.GeoMatchConstraintType? = nil,
            value: WAFClientTypes.GeoMatchConstraintValue? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension WAFClientTypes {
    public enum GeoMatchConstraintType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case country
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoMatchConstraintType] {
            return [
                .country,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .country: return "Country"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeoMatchConstraintType(rawValue: rawValue) ?? GeoMatchConstraintType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum GeoMatchConstraintValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ad
        case ae
        case af
        case ag
        case ai
        case al
        case am
        case ao
        case aq
        case ar
        case `as`
        case at
        case au
        case aw
        case ax
        case az
        case ba
        case bb
        case bd
        case be
        case bf
        case bg
        case bh
        case bi
        case bj
        case bl
        case bm
        case bn
        case bo
        case bq
        case br
        case bs
        case bt
        case bv
        case bw
        case by
        case bz
        case ca
        case cc
        case cd
        case cf
        case cg
        case ch
        case ci
        case ck
        case cl
        case cm
        case cn
        case co
        case cr
        case cu
        case cv
        case cw
        case cx
        case cy
        case cz
        case de
        case dj
        case dk
        case dm
        case `do`
        case dz
        case ec
        case ee
        case eg
        case eh
        case er
        case es
        case et
        case fi
        case fj
        case fk
        case fm
        case fo
        case fr
        case ga
        case gb
        case gd
        case ge
        case gf
        case gg
        case gh
        case gi
        case gl
        case gm
        case gn
        case gp
        case gq
        case gr
        case gs
        case gt
        case gu
        case gw
        case gy
        case hk
        case hm
        case hn
        case hr
        case ht
        case hu
        case id
        case ie
        case il
        case im
        case `in`
        case io
        case iq
        case ir
        case `is`
        case it
        case je
        case jm
        case jo
        case jp
        case ke
        case kg
        case kh
        case ki
        case km
        case kn
        case kp
        case kr
        case kw
        case ky
        case kz
        case la
        case lb
        case lc
        case li
        case lk
        case lr
        case ls
        case lt
        case lu
        case lv
        case ly
        case ma
        case mc
        case md
        case me
        case mf
        case mg
        case mh
        case mk
        case ml
        case mm
        case mn
        case mo
        case mp
        case mq
        case mr
        case ms
        case mt
        case mu
        case mv
        case mw
        case mx
        case my
        case mz
        case na
        case nc
        case ne
        case nf
        case ng
        case ni
        case nl
        case no
        case np
        case nr
        case nu
        case nz
        case om
        case pa
        case pe
        case pf
        case pg
        case ph
        case pk
        case pl
        case pm
        case pn
        case pr
        case ps
        case pt
        case pw
        case py
        case qa
        case re
        case ro
        case rs
        case ru
        case rw
        case sa
        case sb
        case sc
        case sd
        case se
        case sg
        case sh
        case si
        case sj
        case sk
        case sl
        case sm
        case sn
        case so
        case sr
        case ss
        case st
        case sv
        case sx
        case sy
        case sz
        case tc
        case td
        case tf
        case tg
        case th
        case tj
        case tk
        case tl
        case tm
        case tn
        case to
        case tr
        case tt
        case tv
        case tw
        case tz
        case ua
        case ug
        case um
        case us
        case uy
        case uz
        case va
        case vc
        case ve
        case vg
        case vi
        case vn
        case vu
        case wf
        case ws
        case ye
        case yt
        case za
        case zm
        case zw
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoMatchConstraintValue] {
            return [
                .ad,
                .ae,
                .af,
                .ag,
                .ai,
                .al,
                .am,
                .ao,
                .aq,
                .ar,
                .as,
                .at,
                .au,
                .aw,
                .ax,
                .az,
                .ba,
                .bb,
                .bd,
                .be,
                .bf,
                .bg,
                .bh,
                .bi,
                .bj,
                .bl,
                .bm,
                .bn,
                .bo,
                .bq,
                .br,
                .bs,
                .bt,
                .bv,
                .bw,
                .by,
                .bz,
                .ca,
                .cc,
                .cd,
                .cf,
                .cg,
                .ch,
                .ci,
                .ck,
                .cl,
                .cm,
                .cn,
                .co,
                .cr,
                .cu,
                .cv,
                .cw,
                .cx,
                .cy,
                .cz,
                .de,
                .dj,
                .dk,
                .dm,
                .do,
                .dz,
                .ec,
                .ee,
                .eg,
                .eh,
                .er,
                .es,
                .et,
                .fi,
                .fj,
                .fk,
                .fm,
                .fo,
                .fr,
                .ga,
                .gb,
                .gd,
                .ge,
                .gf,
                .gg,
                .gh,
                .gi,
                .gl,
                .gm,
                .gn,
                .gp,
                .gq,
                .gr,
                .gs,
                .gt,
                .gu,
                .gw,
                .gy,
                .hk,
                .hm,
                .hn,
                .hr,
                .ht,
                .hu,
                .id,
                .ie,
                .il,
                .im,
                .in,
                .io,
                .iq,
                .ir,
                .is,
                .it,
                .je,
                .jm,
                .jo,
                .jp,
                .ke,
                .kg,
                .kh,
                .ki,
                .km,
                .kn,
                .kp,
                .kr,
                .kw,
                .ky,
                .kz,
                .la,
                .lb,
                .lc,
                .li,
                .lk,
                .lr,
                .ls,
                .lt,
                .lu,
                .lv,
                .ly,
                .ma,
                .mc,
                .md,
                .me,
                .mf,
                .mg,
                .mh,
                .mk,
                .ml,
                .mm,
                .mn,
                .mo,
                .mp,
                .mq,
                .mr,
                .ms,
                .mt,
                .mu,
                .mv,
                .mw,
                .mx,
                .my,
                .mz,
                .na,
                .nc,
                .ne,
                .nf,
                .ng,
                .ni,
                .nl,
                .no,
                .np,
                .nr,
                .nu,
                .nz,
                .om,
                .pa,
                .pe,
                .pf,
                .pg,
                .ph,
                .pk,
                .pl,
                .pm,
                .pn,
                .pr,
                .ps,
                .pt,
                .pw,
                .py,
                .qa,
                .re,
                .ro,
                .rs,
                .ru,
                .rw,
                .sa,
                .sb,
                .sc,
                .sd,
                .se,
                .sg,
                .sh,
                .si,
                .sj,
                .sk,
                .sl,
                .sm,
                .sn,
                .so,
                .sr,
                .ss,
                .st,
                .sv,
                .sx,
                .sy,
                .sz,
                .tc,
                .td,
                .tf,
                .tg,
                .th,
                .tj,
                .tk,
                .tl,
                .tm,
                .tn,
                .to,
                .tr,
                .tt,
                .tv,
                .tw,
                .tz,
                .ua,
                .ug,
                .um,
                .us,
                .uy,
                .uz,
                .va,
                .vc,
                .ve,
                .vg,
                .vi,
                .vn,
                .vu,
                .wf,
                .ws,
                .ye,
                .yt,
                .za,
                .zm,
                .zw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ad: return "AD"
            case .ae: return "AE"
            case .af: return "AF"
            case .ag: return "AG"
            case .ai: return "AI"
            case .al: return "AL"
            case .am: return "AM"
            case .ao: return "AO"
            case .aq: return "AQ"
            case .ar: return "AR"
            case .as: return "AS"
            case .at: return "AT"
            case .au: return "AU"
            case .aw: return "AW"
            case .ax: return "AX"
            case .az: return "AZ"
            case .ba: return "BA"
            case .bb: return "BB"
            case .bd: return "BD"
            case .be: return "BE"
            case .bf: return "BF"
            case .bg: return "BG"
            case .bh: return "BH"
            case .bi: return "BI"
            case .bj: return "BJ"
            case .bl: return "BL"
            case .bm: return "BM"
            case .bn: return "BN"
            case .bo: return "BO"
            case .bq: return "BQ"
            case .br: return "BR"
            case .bs: return "BS"
            case .bt: return "BT"
            case .bv: return "BV"
            case .bw: return "BW"
            case .by: return "BY"
            case .bz: return "BZ"
            case .ca: return "CA"
            case .cc: return "CC"
            case .cd: return "CD"
            case .cf: return "CF"
            case .cg: return "CG"
            case .ch: return "CH"
            case .ci: return "CI"
            case .ck: return "CK"
            case .cl: return "CL"
            case .cm: return "CM"
            case .cn: return "CN"
            case .co: return "CO"
            case .cr: return "CR"
            case .cu: return "CU"
            case .cv: return "CV"
            case .cw: return "CW"
            case .cx: return "CX"
            case .cy: return "CY"
            case .cz: return "CZ"
            case .de: return "DE"
            case .dj: return "DJ"
            case .dk: return "DK"
            case .dm: return "DM"
            case .do: return "DO"
            case .dz: return "DZ"
            case .ec: return "EC"
            case .ee: return "EE"
            case .eg: return "EG"
            case .eh: return "EH"
            case .er: return "ER"
            case .es: return "ES"
            case .et: return "ET"
            case .fi: return "FI"
            case .fj: return "FJ"
            case .fk: return "FK"
            case .fm: return "FM"
            case .fo: return "FO"
            case .fr: return "FR"
            case .ga: return "GA"
            case .gb: return "GB"
            case .gd: return "GD"
            case .ge: return "GE"
            case .gf: return "GF"
            case .gg: return "GG"
            case .gh: return "GH"
            case .gi: return "GI"
            case .gl: return "GL"
            case .gm: return "GM"
            case .gn: return "GN"
            case .gp: return "GP"
            case .gq: return "GQ"
            case .gr: return "GR"
            case .gs: return "GS"
            case .gt: return "GT"
            case .gu: return "GU"
            case .gw: return "GW"
            case .gy: return "GY"
            case .hk: return "HK"
            case .hm: return "HM"
            case .hn: return "HN"
            case .hr: return "HR"
            case .ht: return "HT"
            case .hu: return "HU"
            case .id: return "ID"
            case .ie: return "IE"
            case .il: return "IL"
            case .im: return "IM"
            case .in: return "IN"
            case .io: return "IO"
            case .iq: return "IQ"
            case .ir: return "IR"
            case .is: return "IS"
            case .it: return "IT"
            case .je: return "JE"
            case .jm: return "JM"
            case .jo: return "JO"
            case .jp: return "JP"
            case .ke: return "KE"
            case .kg: return "KG"
            case .kh: return "KH"
            case .ki: return "KI"
            case .km: return "KM"
            case .kn: return "KN"
            case .kp: return "KP"
            case .kr: return "KR"
            case .kw: return "KW"
            case .ky: return "KY"
            case .kz: return "KZ"
            case .la: return "LA"
            case .lb: return "LB"
            case .lc: return "LC"
            case .li: return "LI"
            case .lk: return "LK"
            case .lr: return "LR"
            case .ls: return "LS"
            case .lt: return "LT"
            case .lu: return "LU"
            case .lv: return "LV"
            case .ly: return "LY"
            case .ma: return "MA"
            case .mc: return "MC"
            case .md: return "MD"
            case .me: return "ME"
            case .mf: return "MF"
            case .mg: return "MG"
            case .mh: return "MH"
            case .mk: return "MK"
            case .ml: return "ML"
            case .mm: return "MM"
            case .mn: return "MN"
            case .mo: return "MO"
            case .mp: return "MP"
            case .mq: return "MQ"
            case .mr: return "MR"
            case .ms: return "MS"
            case .mt: return "MT"
            case .mu: return "MU"
            case .mv: return "MV"
            case .mw: return "MW"
            case .mx: return "MX"
            case .my: return "MY"
            case .mz: return "MZ"
            case .na: return "NA"
            case .nc: return "NC"
            case .ne: return "NE"
            case .nf: return "NF"
            case .ng: return "NG"
            case .ni: return "NI"
            case .nl: return "NL"
            case .no: return "NO"
            case .np: return "NP"
            case .nr: return "NR"
            case .nu: return "NU"
            case .nz: return "NZ"
            case .om: return "OM"
            case .pa: return "PA"
            case .pe: return "PE"
            case .pf: return "PF"
            case .pg: return "PG"
            case .ph: return "PH"
            case .pk: return "PK"
            case .pl: return "PL"
            case .pm: return "PM"
            case .pn: return "PN"
            case .pr: return "PR"
            case .ps: return "PS"
            case .pt: return "PT"
            case .pw: return "PW"
            case .py: return "PY"
            case .qa: return "QA"
            case .re: return "RE"
            case .ro: return "RO"
            case .rs: return "RS"
            case .ru: return "RU"
            case .rw: return "RW"
            case .sa: return "SA"
            case .sb: return "SB"
            case .sc: return "SC"
            case .sd: return "SD"
            case .se: return "SE"
            case .sg: return "SG"
            case .sh: return "SH"
            case .si: return "SI"
            case .sj: return "SJ"
            case .sk: return "SK"
            case .sl: return "SL"
            case .sm: return "SM"
            case .sn: return "SN"
            case .so: return "SO"
            case .sr: return "SR"
            case .ss: return "SS"
            case .st: return "ST"
            case .sv: return "SV"
            case .sx: return "SX"
            case .sy: return "SY"
            case .sz: return "SZ"
            case .tc: return "TC"
            case .td: return "TD"
            case .tf: return "TF"
            case .tg: return "TG"
            case .th: return "TH"
            case .tj: return "TJ"
            case .tk: return "TK"
            case .tl: return "TL"
            case .tm: return "TM"
            case .tn: return "TN"
            case .to: return "TO"
            case .tr: return "TR"
            case .tt: return "TT"
            case .tv: return "TV"
            case .tw: return "TW"
            case .tz: return "TZ"
            case .ua: return "UA"
            case .ug: return "UG"
            case .um: return "UM"
            case .us: return "US"
            case .uy: return "UY"
            case .uz: return "UZ"
            case .va: return "VA"
            case .vc: return "VC"
            case .ve: return "VE"
            case .vg: return "VG"
            case .vi: return "VI"
            case .vn: return "VN"
            case .vu: return "VU"
            case .wf: return "WF"
            case .ws: return "WS"
            case .ye: return "YE"
            case .yt: return "YT"
            case .za: return "ZA"
            case .zm: return "ZM"
            case .zw: return "ZW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeoMatchConstraintValue(rawValue: rawValue) ?? GeoMatchConstraintValue.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.GeoMatchSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoMatchConstraints = "GeoMatchConstraints"
        case geoMatchSetId = "GeoMatchSetId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let geoMatchConstraints = geoMatchConstraints {
            var geoMatchConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .geoMatchConstraints)
            for geomatchconstraint0 in geoMatchConstraints {
                try geoMatchConstraintsContainer.encode(geomatchconstraint0)
            }
        }
        if let geoMatchSetId = self.geoMatchSetId {
            try encodeContainer.encode(geoMatchSetId, forKey: .geoMatchSetId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .geoMatchSetId)
        geoMatchSetId = geoMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let geoMatchConstraintsContainer = try containerValues.decodeIfPresent([WAFClientTypes.GeoMatchConstraint?].self, forKey: .geoMatchConstraints)
        var geoMatchConstraintsDecoded0:[WAFClientTypes.GeoMatchConstraint]? = nil
        if let geoMatchConstraintsContainer = geoMatchConstraintsContainer {
            geoMatchConstraintsDecoded0 = [WAFClientTypes.GeoMatchConstraint]()
            for structure0 in geoMatchConstraintsContainer {
                if let structure0 = structure0 {
                    geoMatchConstraintsDecoded0?.append(structure0)
                }
            }
        }
        geoMatchConstraints = geoMatchConstraintsDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains one or more countries that AWS WAF will search for.
    public struct GeoMatchSet: Swift.Equatable {
        /// An array of [GeoMatchConstraint] objects, which contain the country that you want AWS WAF to search for.
        /// This member is required.
        public var geoMatchConstraints: [WAFClientTypes.GeoMatchConstraint]?
        /// The GeoMatchSetId for an GeoMatchSet. You use GeoMatchSetId to get information about a GeoMatchSet (see [GeoMatchSet]), update a GeoMatchSet (see [UpdateGeoMatchSet]), insert a GeoMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a GeoMatchSet from AWS WAF (see [DeleteGeoMatchSet]). GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
        /// This member is required.
        public var geoMatchSetId: Swift.String?
        /// A friendly name or description of the [GeoMatchSet]. You can't change the name of an GeoMatchSet after you create it.
        public var name: Swift.String?

        public init (
            geoMatchConstraints: [WAFClientTypes.GeoMatchConstraint]? = nil,
            geoMatchSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.geoMatchConstraints = geoMatchConstraints
            self.geoMatchSetId = geoMatchSetId
            self.name = name
        }
    }

}

extension WAFClientTypes.GeoMatchSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoMatchSetId = "GeoMatchSetId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let geoMatchSetId = self.geoMatchSetId {
            try encodeContainer.encode(geoMatchSetId, forKey: .geoMatchSetId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .geoMatchSetId)
        geoMatchSetId = geoMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the name of the GeoMatchSet.
    public struct GeoMatchSetSummary: Swift.Equatable {
        /// The GeoMatchSetId for an [GeoMatchSet]. You can use GeoMatchSetId in a [GetGeoMatchSet] request to get detailed information about an [GeoMatchSet].
        /// This member is required.
        public var geoMatchSetId: Swift.String?
        /// A friendly name or description of the [GeoMatchSet]. You can't change the name of an GeoMatchSet after you create it.
        /// This member is required.
        public var name: Swift.String?

        public init (
            geoMatchSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.geoMatchSetId = geoMatchSetId
            self.name = name
        }
    }

}

extension WAFClientTypes.GeoMatchSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case geoMatchConstraint = "GeoMatchConstraint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let geoMatchConstraint = self.geoMatchConstraint {
            try encodeContainer.encode(geoMatchConstraint, forKey: .geoMatchConstraint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let geoMatchConstraintDecoded = try containerValues.decodeIfPresent(WAFClientTypes.GeoMatchConstraint.self, forKey: .geoMatchConstraint)
        geoMatchConstraint = geoMatchConstraintDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the type of update to perform to an [GeoMatchSet] with [UpdateGeoMatchSet].
    public struct GeoMatchSetUpdate: Swift.Equatable {
        /// Specifies whether to insert or delete a country with [UpdateGeoMatchSet].
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// The country from which web requests originate that you want AWS WAF to search for.
        /// This member is required.
        public var geoMatchConstraint: WAFClientTypes.GeoMatchConstraint?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            geoMatchConstraint: WAFClientTypes.GeoMatchConstraint? = nil
        )
        {
            self.action = action
            self.geoMatchConstraint = geoMatchConstraint
        }
    }

}

extension GetByteMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteMatchSetId = self.byteMatchSetId {
            try encodeContainer.encode(byteMatchSetId, forKey: .byteMatchSetId)
        }
    }
}

extension GetByteMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetByteMatchSetInput: Swift.Equatable {
    /// The ByteMatchSetId of the [ByteMatchSet] that you want to get. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
    /// This member is required.
    public var byteMatchSetId: Swift.String?

    public init (
        byteMatchSetId: Swift.String? = nil
    )
    {
        self.byteMatchSetId = byteMatchSetId
    }
}

struct GetByteMatchSetInputBody: Swift.Equatable {
    let byteMatchSetId: Swift.String?
}

extension GetByteMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .byteMatchSetId)
        byteMatchSetId = byteMatchSetIdDecoded
    }
}

extension GetByteMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetByteMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetByteMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetByteMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetByteMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.byteMatchSet = output.byteMatchSet
        } else {
            self.byteMatchSet = nil
        }
    }
}

public struct GetByteMatchSetOutputResponse: Swift.Equatable {
    /// Information about the [ByteMatchSet] that you specified in the GetByteMatchSet request. For more information, see the following topics:
    ///
    /// * [ByteMatchSet]: Contains ByteMatchSetId, ByteMatchTuples, and Name
    ///
    /// * ByteMatchTuples: Contains an array of [ByteMatchTuple] objects. Each ByteMatchTuple object contains [FieldToMatch], PositionalConstraint, TargetString, and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var byteMatchSet: WAFClientTypes.ByteMatchSet?

    public init (
        byteMatchSet: WAFClientTypes.ByteMatchSet? = nil
    )
    {
        self.byteMatchSet = byteMatchSet
    }
}

struct GetByteMatchSetOutputResponseBody: Swift.Equatable {
    let byteMatchSet: WAFClientTypes.ByteMatchSet?
}

extension GetByteMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSet = "ByteMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ByteMatchSet.self, forKey: .byteMatchSet)
        byteMatchSet = byteMatchSetDecoded
    }
}

extension GetChangeTokenInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetChangeTokenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetChangeTokenInput: Swift.Equatable {

    public init () { }
}

struct GetChangeTokenInputBody: Swift.Equatable {
}

extension GetChangeTokenInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetChangeTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetChangeTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetChangeTokenOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetChangeTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetChangeTokenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct GetChangeTokenOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used in the request. Use this value in a GetChangeTokenStatus request to get the current status of the request.
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct GetChangeTokenOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension GetChangeTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension GetChangeTokenStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
    }
}

extension GetChangeTokenStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetChangeTokenStatusInput: Swift.Equatable {
    /// The change token for which you want to get the status. This change token was previously returned in the GetChangeToken response.
    /// This member is required.
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct GetChangeTokenStatusInputBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension GetChangeTokenStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension GetChangeTokenStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetChangeTokenStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetChangeTokenStatusOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetChangeTokenStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetChangeTokenStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeTokenStatus = output.changeTokenStatus
        } else {
            self.changeTokenStatus = nil
        }
    }
}

public struct GetChangeTokenStatusOutputResponse: Swift.Equatable {
    /// The status of the change token.
    public var changeTokenStatus: WAFClientTypes.ChangeTokenStatus?

    public init (
        changeTokenStatus: WAFClientTypes.ChangeTokenStatus? = nil
    )
    {
        self.changeTokenStatus = changeTokenStatus
    }
}

struct GetChangeTokenStatusOutputResponseBody: Swift.Equatable {
    let changeTokenStatus: WAFClientTypes.ChangeTokenStatus?
}

extension GetChangeTokenStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeTokenStatus = "ChangeTokenStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenStatusDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeTokenStatus.self, forKey: .changeTokenStatus)
        changeTokenStatus = changeTokenStatusDecoded
    }
}

extension GetGeoMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoMatchSetId = "GeoMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let geoMatchSetId = self.geoMatchSetId {
            try encodeContainer.encode(geoMatchSetId, forKey: .geoMatchSetId)
        }
    }
}

extension GetGeoMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetGeoMatchSetInput: Swift.Equatable {
    /// The GeoMatchSetId of the [GeoMatchSet] that you want to get. GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
    /// This member is required.
    public var geoMatchSetId: Swift.String?

    public init (
        geoMatchSetId: Swift.String? = nil
    )
    {
        self.geoMatchSetId = geoMatchSetId
    }
}

struct GetGeoMatchSetInputBody: Swift.Equatable {
    let geoMatchSetId: Swift.String?
}

extension GetGeoMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoMatchSetId = "GeoMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .geoMatchSetId)
        geoMatchSetId = geoMatchSetIdDecoded
    }
}

extension GetGeoMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGeoMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGeoMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGeoMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetGeoMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.geoMatchSet = output.geoMatchSet
        } else {
            self.geoMatchSet = nil
        }
    }
}

public struct GetGeoMatchSetOutputResponse: Swift.Equatable {
    /// Information about the [GeoMatchSet] that you specified in the GetGeoMatchSet request. This includes the Type, which for a GeoMatchContraint is always Country, as well as the Value, which is the identifier for a specific country.
    public var geoMatchSet: WAFClientTypes.GeoMatchSet?

    public init (
        geoMatchSet: WAFClientTypes.GeoMatchSet? = nil
    )
    {
        self.geoMatchSet = geoMatchSet
    }
}

struct GetGeoMatchSetOutputResponseBody: Swift.Equatable {
    let geoMatchSet: WAFClientTypes.GeoMatchSet?
}

extension GetGeoMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoMatchSet = "GeoMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.GeoMatchSet.self, forKey: .geoMatchSet)
        geoMatchSet = geoMatchSetDecoded
    }
}

extension GetIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSetId = "IPSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipSetId = self.ipSetId {
            try encodeContainer.encode(ipSetId, forKey: .ipSetId)
        }
    }
}

extension GetIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetIPSetInput: Swift.Equatable {
    /// The IPSetId of the [IPSet] that you want to get. IPSetId is returned by [CreateIPSet] and by [ListIPSets].
    /// This member is required.
    public var ipSetId: Swift.String?

    public init (
        ipSetId: Swift.String? = nil
    )
    {
        self.ipSetId = ipSetId
    }
}

struct GetIPSetInputBody: Swift.Equatable {
    let ipSetId: Swift.String?
}

extension GetIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSetId = "IPSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipSetId)
        ipSetId = ipSetIdDecoded
    }
}

extension GetIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ipSet = output.ipSet
        } else {
            self.ipSet = nil
        }
    }
}

public struct GetIPSetOutputResponse: Swift.Equatable {
    /// Information about the [IPSet] that you specified in the GetIPSet request. For more information, see the following topics:
    ///
    /// * [IPSet]: Contains IPSetDescriptors, IPSetId, and Name
    ///
    /// * IPSetDescriptors: Contains an array of [IPSetDescriptor] objects. Each IPSetDescriptor object contains Type and Value
    public var ipSet: WAFClientTypes.IPSet?

    public init (
        ipSet: WAFClientTypes.IPSet? = nil
    )
    {
        self.ipSet = ipSet
    }
}

struct GetIPSetOutputResponseBody: Swift.Equatable {
    let ipSet: WAFClientTypes.IPSet?
}

extension GetIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSet = "IPSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.IPSet.self, forKey: .ipSet)
        ipSet = ipSetDecoded
    }
}

extension GetLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the web ACL for which you want to get the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetLoggingConfigurationInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.loggingConfiguration = nil
        }
    }
}

public struct GetLoggingConfigurationOutputResponse: Swift.Equatable {
    /// The [LoggingConfiguration] for the specified web ACL.
    public var loggingConfiguration: WAFClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: WAFClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct GetLoggingConfigurationOutputResponseBody: Swift.Equatable {
    let loggingConfiguration: WAFClientTypes.LoggingConfiguration?
}

extension GetLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension GetPermissionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetPermissionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPermissionPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the RuleGroup for which you want to get the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetPermissionPolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetPermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetPermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPermissionPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetPermissionPolicyOutputResponse: Swift.Equatable {
    /// The IAM policy attached to the specified RuleGroup.
    public var policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetPermissionPolicyOutputResponseBody: Swift.Equatable {
    let policy: Swift.String?
}

extension GetPermissionPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension GetRateBasedRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }
}

extension GetRateBasedRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRateBasedRuleInput: Swift.Equatable {
    /// The RuleId of the [RateBasedRule] that you want to get. RuleId is returned by [CreateRateBasedRule] and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init (
        ruleId: Swift.String? = nil
    )
    {
        self.ruleId = ruleId
    }
}

struct GetRateBasedRuleInputBody: Swift.Equatable {
    let ruleId: Swift.String?
}

extension GetRateBasedRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleId = "RuleId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
    }
}

extension GetRateBasedRuleManagedKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }
}

extension GetRateBasedRuleManagedKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRateBasedRuleManagedKeysInput: Swift.Equatable {
    /// A null value and not currently used. Do not include this in your request.
    public var nextMarker: Swift.String?
    /// The RuleId of the [RateBasedRule] for which you want to get a list of ManagedKeys. RuleId is returned by [CreateRateBasedRule] and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init (
        nextMarker: Swift.String? = nil,
        ruleId: Swift.String? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleId = ruleId
    }
}

struct GetRateBasedRuleManagedKeysInputBody: Swift.Equatable {
    let ruleId: Swift.String?
    let nextMarker: Swift.String?
}

extension GetRateBasedRuleManagedKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case ruleId = "RuleId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension GetRateBasedRuleManagedKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRateBasedRuleManagedKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRateBasedRuleManagedKeysOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRateBasedRuleManagedKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRateBasedRuleManagedKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedKeys = output.managedKeys
            self.nextMarker = output.nextMarker
        } else {
            self.managedKeys = nil
            self.nextMarker = nil
        }
    }
}

public struct GetRateBasedRuleManagedKeysOutputResponse: Swift.Equatable {
    /// An array of IP addresses that currently are blocked by the specified [RateBasedRule].
    public var managedKeys: [Swift.String]?
    /// A null value and not currently used.
    public var nextMarker: Swift.String?

    public init (
        managedKeys: [Swift.String]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedKeys = managedKeys
        self.nextMarker = nextMarker
    }
}

struct GetRateBasedRuleManagedKeysOutputResponseBody: Swift.Equatable {
    let managedKeys: [Swift.String]?
    let nextMarker: Swift.String?
}

extension GetRateBasedRuleManagedKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedKeys = "ManagedKeys"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .managedKeys)
        var managedKeysDecoded0:[Swift.String]? = nil
        if let managedKeysContainer = managedKeysContainer {
            managedKeysDecoded0 = [Swift.String]()
            for string0 in managedKeysContainer {
                if let string0 = string0 {
                    managedKeysDecoded0?.append(string0)
                }
            }
        }
        managedKeys = managedKeysDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension GetRateBasedRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRateBasedRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRateBasedRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRateBasedRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRateBasedRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rule = output.rule
        } else {
            self.rule = nil
        }
    }
}

public struct GetRateBasedRuleOutputResponse: Swift.Equatable {
    /// Information about the [RateBasedRule] that you specified in the GetRateBasedRule request.
    public var rule: WAFClientTypes.RateBasedRule?

    public init (
        rule: WAFClientTypes.RateBasedRule? = nil
    )
    {
        self.rule = rule
    }
}

struct GetRateBasedRuleOutputResponseBody: Swift.Equatable {
    let rule: WAFClientTypes.RateBasedRule?
}

extension GetRateBasedRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RateBasedRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension GetRegexMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexMatchSetId = "RegexMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regexMatchSetId = self.regexMatchSetId {
            try encodeContainer.encode(regexMatchSetId, forKey: .regexMatchSetId)
        }
    }
}

extension GetRegexMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRegexMatchSetInput: Swift.Equatable {
    /// The RegexMatchSetId of the [RegexMatchSet] that you want to get. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
    /// This member is required.
    public var regexMatchSetId: Swift.String?

    public init (
        regexMatchSetId: Swift.String? = nil
    )
    {
        self.regexMatchSetId = regexMatchSetId
    }
}

struct GetRegexMatchSetInputBody: Swift.Equatable {
    let regexMatchSetId: Swift.String?
}

extension GetRegexMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexMatchSetId = "RegexMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
    }
}

extension GetRegexMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegexMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRegexMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegexMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRegexMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.regexMatchSet = output.regexMatchSet
        } else {
            self.regexMatchSet = nil
        }
    }
}

public struct GetRegexMatchSetOutputResponse: Swift.Equatable {
    /// Information about the [RegexMatchSet] that you specified in the GetRegexMatchSet request. For more information, see [RegexMatchTuple].
    public var regexMatchSet: WAFClientTypes.RegexMatchSet?

    public init (
        regexMatchSet: WAFClientTypes.RegexMatchSet? = nil
    )
    {
        self.regexMatchSet = regexMatchSet
    }
}

struct GetRegexMatchSetOutputResponseBody: Swift.Equatable {
    let regexMatchSet: WAFClientTypes.RegexMatchSet?
}

extension GetRegexMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexMatchSet = "RegexMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RegexMatchSet.self, forKey: .regexMatchSet)
        regexMatchSet = regexMatchSetDecoded
    }
}

extension GetRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexPatternSetId = "RegexPatternSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
    }
}

extension GetRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRegexPatternSetInput: Swift.Equatable {
    /// The RegexPatternSetId of the [RegexPatternSet] that you want to get. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
    /// This member is required.
    public var regexPatternSetId: Swift.String?

    public init (
        regexPatternSetId: Swift.String? = nil
    )
    {
        self.regexPatternSetId = regexPatternSetId
    }
}

struct GetRegexPatternSetInputBody: Swift.Equatable {
    let regexPatternSetId: Swift.String?
}

extension GetRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexPatternSetId = "RegexPatternSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
    }
}

extension GetRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.regexPatternSet = output.regexPatternSet
        } else {
            self.regexPatternSet = nil
        }
    }
}

public struct GetRegexPatternSetOutputResponse: Swift.Equatable {
    /// Information about the [RegexPatternSet] that you specified in the GetRegexPatternSet request, including the identifier of the pattern set and the regular expression patterns you want AWS WAF to search for.
    public var regexPatternSet: WAFClientTypes.RegexPatternSet?

    public init (
        regexPatternSet: WAFClientTypes.RegexPatternSet? = nil
    )
    {
        self.regexPatternSet = regexPatternSet
    }
}

struct GetRegexPatternSetOutputResponseBody: Swift.Equatable {
    let regexPatternSet: WAFClientTypes.RegexPatternSet?
}

extension GetRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexPatternSet = "RegexPatternSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RegexPatternSet.self, forKey: .regexPatternSet)
        regexPatternSet = regexPatternSetDecoded
    }
}

extension GetRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupId = "RuleGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
    }
}

extension GetRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRuleGroupInput: Swift.Equatable {
    /// The RuleGroupId of the [RuleGroup] that you want to get. RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
    /// This member is required.
    public var ruleGroupId: Swift.String?

    public init (
        ruleGroupId: Swift.String? = nil
    )
    {
        self.ruleGroupId = ruleGroupId
    }
}

struct GetRuleGroupInputBody: Swift.Equatable {
    let ruleGroupId: Swift.String?
}

extension GetRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupId = "RuleGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
    }
}

extension GetRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ruleGroup = output.ruleGroup
        } else {
            self.ruleGroup = nil
        }
    }
}

public struct GetRuleGroupOutputResponse: Swift.Equatable {
    /// Information about the [RuleGroup] that you specified in the GetRuleGroup request.
    public var ruleGroup: WAFClientTypes.RuleGroup?

    public init (
        ruleGroup: WAFClientTypes.RuleGroup? = nil
    )
    {
        self.ruleGroup = ruleGroup
    }
}

struct GetRuleGroupOutputResponseBody: Swift.Equatable {
    let ruleGroup: WAFClientTypes.RuleGroup?
}

extension GetRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroup = "RuleGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
    }
}

extension GetRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }
}

extension GetRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRuleInput: Swift.Equatable {
    /// The RuleId of the [Rule] that you want to get. RuleId is returned by [CreateRule] and by [ListRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init (
        ruleId: Swift.String? = nil
    )
    {
        self.ruleId = ruleId
    }
}

struct GetRuleInputBody: Swift.Equatable {
    let ruleId: Swift.String?
}

extension GetRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleId = "RuleId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
    }
}

extension GetRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rule = output.rule
        } else {
            self.rule = nil
        }
    }
}

public struct GetRuleOutputResponse: Swift.Equatable {
    /// Information about the [Rule] that you specified in the GetRule request. For more information, see the following topics:
    ///
    /// * [Rule]: Contains MetricName, Name, an array of Predicate objects, and RuleId
    ///
    /// * [Predicate]: Each Predicate object contains DataId, Negated, and Type
    public var rule: WAFClientTypes.Rule?

    public init (
        rule: WAFClientTypes.Rule? = nil
    )
    {
        self.rule = rule
    }
}

struct GetRuleOutputResponseBody: Swift.Equatable {
    let rule: WAFClientTypes.Rule?
}

extension GetRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.Rule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension GetSampledRequestsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case ruleId = "RuleId"
        case timeWindow = "TimeWindow"
        case webAclId = "WebAclId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxItems != 0 {
            try encodeContainer.encode(maxItems, forKey: .maxItems)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let timeWindow = self.timeWindow {
            try encodeContainer.encode(timeWindow, forKey: .timeWindow)
        }
        if let webAclId = self.webAclId {
            try encodeContainer.encode(webAclId, forKey: .webAclId)
        }
    }
}

extension GetSampledRequestsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSampledRequestsInput: Swift.Equatable {
    /// The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received during the time range. If your resource received fewer requests than the value of MaxItems, GetSampledRequests returns information about all of them.
    /// This member is required.
    public var maxItems: Swift.Int
    /// RuleId is one of three values:
    ///
    /// * The RuleId of the Rule or the RuleGroupId of the RuleGroup for which you want GetSampledRequests to return a sample of requests.
    ///
    /// * Default_Action, which causes GetSampledRequests to return a sample of the requests that didn't match any of the rules in the specified WebACL.
    /// This member is required.
    public var ruleId: Swift.String?
    /// The start date and time and the end date and time of the range for which you want GetSampledRequests to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
    /// This member is required.
    public var timeWindow: WAFClientTypes.TimeWindow?
    /// The WebACLId of the WebACL for which you want GetSampledRequests to return a sample of requests.
    /// This member is required.
    public var webAclId: Swift.String?

    public init (
        maxItems: Swift.Int = 0,
        ruleId: Swift.String? = nil,
        timeWindow: WAFClientTypes.TimeWindow? = nil,
        webAclId: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.ruleId = ruleId
        self.timeWindow = timeWindow
        self.webAclId = webAclId
    }
}

struct GetSampledRequestsInputBody: Swift.Equatable {
    let webAclId: Swift.String?
    let ruleId: Swift.String?
    let timeWindow: WAFClientTypes.TimeWindow?
    let maxItems: Swift.Int
}

extension GetSampledRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case ruleId = "RuleId"
        case timeWindow = "TimeWindow"
        case webAclId = "WebAclId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webAclIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclId)
        webAclId = webAclIdDecoded
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let timeWindowDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TimeWindow.self, forKey: .timeWindow)
        timeWindow = timeWindowDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems) ?? 0
        maxItems = maxItemsDecoded
    }
}

extension GetSampledRequestsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSampledRequestsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSampledRequestsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSampledRequestsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSampledRequestsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.populationSize = output.populationSize
            self.sampledRequests = output.sampledRequests
            self.timeWindow = output.timeWindow
        } else {
            self.populationSize = 0
            self.sampledRequests = nil
            self.timeWindow = nil
        }
    }
}

public struct GetSampledRequestsOutputResponse: Swift.Equatable {
    /// The total number of requests from which GetSampledRequests got a sample of MaxItems requests. If PopulationSize is less than MaxItems, the sample includes every request that your AWS resource received during the specified time range.
    public var populationSize: Swift.Int
    /// A complex type that contains detailed information about each of the requests in the sample.
    public var sampledRequests: [WAFClientTypes.SampledHTTPRequest]?
    /// Usually, TimeWindow is the time range that you specified in the GetSampledRequests request. However, if your AWS resource received more than 5,000 requests during the time range that you specified in the request, GetSampledRequests returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.
    public var timeWindow: WAFClientTypes.TimeWindow?

    public init (
        populationSize: Swift.Int = 0,
        sampledRequests: [WAFClientTypes.SampledHTTPRequest]? = nil,
        timeWindow: WAFClientTypes.TimeWindow? = nil
    )
    {
        self.populationSize = populationSize
        self.sampledRequests = sampledRequests
        self.timeWindow = timeWindow
    }
}

struct GetSampledRequestsOutputResponseBody: Swift.Equatable {
    let sampledRequests: [WAFClientTypes.SampledHTTPRequest]?
    let populationSize: Swift.Int
    let timeWindow: WAFClientTypes.TimeWindow?
}

extension GetSampledRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case populationSize = "PopulationSize"
        case sampledRequests = "SampledRequests"
        case timeWindow = "TimeWindow"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampledRequestsContainer = try containerValues.decodeIfPresent([WAFClientTypes.SampledHTTPRequest?].self, forKey: .sampledRequests)
        var sampledRequestsDecoded0:[WAFClientTypes.SampledHTTPRequest]? = nil
        if let sampledRequestsContainer = sampledRequestsContainer {
            sampledRequestsDecoded0 = [WAFClientTypes.SampledHTTPRequest]()
            for structure0 in sampledRequestsContainer {
                if let structure0 = structure0 {
                    sampledRequestsDecoded0?.append(structure0)
                }
            }
        }
        sampledRequests = sampledRequestsDecoded0
        let populationSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .populationSize) ?? 0
        populationSize = populationSizeDecoded
        let timeWindowDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TimeWindow.self, forKey: .timeWindow)
        timeWindow = timeWindowDecoded
    }
}

extension GetSizeConstraintSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sizeConstraintSetId = "SizeConstraintSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sizeConstraintSetId = self.sizeConstraintSetId {
            try encodeContainer.encode(sizeConstraintSetId, forKey: .sizeConstraintSetId)
        }
    }
}

extension GetSizeConstraintSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSizeConstraintSetInput: Swift.Equatable {
    /// The SizeConstraintSetId of the [SizeConstraintSet] that you want to get. SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
    /// This member is required.
    public var sizeConstraintSetId: Swift.String?

    public init (
        sizeConstraintSetId: Swift.String? = nil
    )
    {
        self.sizeConstraintSetId = sizeConstraintSetId
    }
}

struct GetSizeConstraintSetInputBody: Swift.Equatable {
    let sizeConstraintSetId: Swift.String?
}

extension GetSizeConstraintSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sizeConstraintSetId = "SizeConstraintSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizeConstraintSetId)
        sizeConstraintSetId = sizeConstraintSetIdDecoded
    }
}

extension GetSizeConstraintSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSizeConstraintSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSizeConstraintSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSizeConstraintSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSizeConstraintSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sizeConstraintSet = output.sizeConstraintSet
        } else {
            self.sizeConstraintSet = nil
        }
    }
}

public struct GetSizeConstraintSetOutputResponse: Swift.Equatable {
    /// Information about the [SizeConstraintSet] that you specified in the GetSizeConstraintSet request. For more information, see the following topics:
    ///
    /// * [SizeConstraintSet]: Contains SizeConstraintSetId, SizeConstraints, and Name
    ///
    /// * SizeConstraints: Contains an array of [SizeConstraint] objects. Each SizeConstraint object contains [FieldToMatch], TextTransformation, ComparisonOperator, and Size
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var sizeConstraintSet: WAFClientTypes.SizeConstraintSet?

    public init (
        sizeConstraintSet: WAFClientTypes.SizeConstraintSet? = nil
    )
    {
        self.sizeConstraintSet = sizeConstraintSet
    }
}

struct GetSizeConstraintSetOutputResponseBody: Swift.Equatable {
    let sizeConstraintSet: WAFClientTypes.SizeConstraintSet?
}

extension GetSizeConstraintSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sizeConstraintSet = "SizeConstraintSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.SizeConstraintSet.self, forKey: .sizeConstraintSet)
        sizeConstraintSet = sizeConstraintSetDecoded
    }
}

extension GetSqlInjectionMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sqlInjectionMatchSetId = self.sqlInjectionMatchSetId {
            try encodeContainer.encode(sqlInjectionMatchSetId, forKey: .sqlInjectionMatchSetId)
        }
    }
}

extension GetSqlInjectionMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to get a [SqlInjectionMatchSet].
public struct GetSqlInjectionMatchSetInput: Swift.Equatable {
    /// The SqlInjectionMatchSetId of the [SqlInjectionMatchSet] that you want to get. SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
    /// This member is required.
    public var sqlInjectionMatchSetId: Swift.String?

    public init (
        sqlInjectionMatchSetId: Swift.String? = nil
    )
    {
        self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
    }
}

struct GetSqlInjectionMatchSetInputBody: Swift.Equatable {
    let sqlInjectionMatchSetId: Swift.String?
}

extension GetSqlInjectionMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqlInjectionMatchSetId)
        sqlInjectionMatchSetId = sqlInjectionMatchSetIdDecoded
    }
}

extension GetSqlInjectionMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSqlInjectionMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSqlInjectionMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSqlInjectionMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSqlInjectionMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sqlInjectionMatchSet = output.sqlInjectionMatchSet
        } else {
            self.sqlInjectionMatchSet = nil
        }
    }
}

/// The response to a [GetSqlInjectionMatchSet] request.
public struct GetSqlInjectionMatchSetOutputResponse: Swift.Equatable {
    /// Information about the [SqlInjectionMatchSet] that you specified in the GetSqlInjectionMatchSet request. For more information, see the following topics:
    ///
    /// * [SqlInjectionMatchSet]: Contains Name, SqlInjectionMatchSetId, and an array of SqlInjectionMatchTuple objects
    ///
    /// * [SqlInjectionMatchTuple]: Each SqlInjectionMatchTuple object contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var sqlInjectionMatchSet: WAFClientTypes.SqlInjectionMatchSet?

    public init (
        sqlInjectionMatchSet: WAFClientTypes.SqlInjectionMatchSet? = nil
    )
    {
        self.sqlInjectionMatchSet = sqlInjectionMatchSet
    }
}

struct GetSqlInjectionMatchSetOutputResponseBody: Swift.Equatable {
    let sqlInjectionMatchSet: WAFClientTypes.SqlInjectionMatchSet?
}

extension GetSqlInjectionMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sqlInjectionMatchSet = "SqlInjectionMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.SqlInjectionMatchSet.self, forKey: .sqlInjectionMatchSet)
        sqlInjectionMatchSet = sqlInjectionMatchSetDecoded
    }
}

extension GetWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACLId = "WebACLId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
    }
}

extension GetWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWebACLInput: Swift.Equatable {
    /// The WebACLId of the [WebACL] that you want to get. WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
    /// This member is required.
    public var webACLId: Swift.String?

    public init (
        webACLId: Swift.String? = nil
    )
    {
        self.webACLId = webACLId
    }
}

struct GetWebACLInputBody: Swift.Equatable {
    let webACLId: Swift.String?
}

extension GetWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACLId = "WebACLId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
    }
}

extension GetWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.webACL = output.webACL
        } else {
            self.webACL = nil
        }
    }
}

public struct GetWebACLOutputResponse: Swift.Equatable {
    /// Information about the [WebACL] that you specified in the GetWebACL request. For more information, see the following topics:
    ///
    /// * [WebACL]: Contains DefaultAction, MetricName, Name, an array of Rule objects, and WebACLId
    ///
    /// * DefaultAction (Data type is [WafAction]): Contains Type
    ///
    /// * Rules: Contains an array of ActivatedRule objects, which contain Action, Priority, and RuleId
    ///
    /// * Action: Contains Type
    public var webACL: WAFClientTypes.WebACL?

    public init (
        webACL: WAFClientTypes.WebACL? = nil
    )
    {
        self.webACL = webACL
    }
}

struct GetWebACLOutputResponseBody: Swift.Equatable {
    let webACL: WAFClientTypes.WebACL?
}

extension GetWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACL = "WebACL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WebACL.self, forKey: .webACL)
        webACL = webACLDecoded
    }
}

extension GetXssMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case xssMatchSetId = "XssMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let xssMatchSetId = self.xssMatchSetId {
            try encodeContainer.encode(xssMatchSetId, forKey: .xssMatchSetId)
        }
    }
}

extension GetXssMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to get an [XssMatchSet].
public struct GetXssMatchSetInput: Swift.Equatable {
    /// The XssMatchSetId of the [XssMatchSet] that you want to get. XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
    /// This member is required.
    public var xssMatchSetId: Swift.String?

    public init (
        xssMatchSetId: Swift.String? = nil
    )
    {
        self.xssMatchSetId = xssMatchSetId
    }
}

struct GetXssMatchSetInputBody: Swift.Equatable {
    let xssMatchSetId: Swift.String?
}

extension GetXssMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case xssMatchSetId = "XssMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xssMatchSetId)
        xssMatchSetId = xssMatchSetIdDecoded
    }
}

extension GetXssMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetXssMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetXssMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetXssMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetXssMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.xssMatchSet = output.xssMatchSet
        } else {
            self.xssMatchSet = nil
        }
    }
}

/// The response to a [GetXssMatchSet] request.
public struct GetXssMatchSetOutputResponse: Swift.Equatable {
    /// Information about the [XssMatchSet] that you specified in the GetXssMatchSet request. For more information, see the following topics:
    ///
    /// * [XssMatchSet]: Contains Name, XssMatchSetId, and an array of XssMatchTuple objects
    ///
    /// * [XssMatchTuple]: Each XssMatchTuple object contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var xssMatchSet: WAFClientTypes.XssMatchSet?

    public init (
        xssMatchSet: WAFClientTypes.XssMatchSet? = nil
    )
    {
        self.xssMatchSet = xssMatchSet
    }
}

struct GetXssMatchSetOutputResponseBody: Swift.Equatable {
    let xssMatchSet: WAFClientTypes.XssMatchSet?
}

extension GetXssMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case xssMatchSet = "XssMatchSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetDecoded = try containerValues.decodeIfPresent(WAFClientTypes.XssMatchSet.self, forKey: .xssMatchSet)
        xssMatchSet = xssMatchSetDecoded
    }
}

extension WAFClientTypes.HTTPHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The response from a [GetSampledRequests] request includes an HTTPHeader complex type that appears as Headers in the response syntax. HTTPHeader contains the names and values of all of the headers that appear in one of the web requests that were returned by GetSampledRequests.
    public struct HTTPHeader: Swift.Equatable {
        /// The name of one of the headers in the sampled web request.
        public var name: Swift.String?
        /// The value of one of the headers in the sampled web request.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension WAFClientTypes.HTTPRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientIP = "ClientIP"
        case country = "Country"
        case httpVersion = "HTTPVersion"
        case headers = "Headers"
        case method = "Method"
        case uri = "URI"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientIP = self.clientIP {
            try encodeContainer.encode(clientIP, forKey: .clientIP)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let httpVersion = self.httpVersion {
            try encodeContainer.encode(httpVersion, forKey: .httpVersion)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for httpheader0 in headers {
                try headersContainer.encode(httpheader0)
            }
        }
        if let method = self.method {
            try encodeContainer.encode(method, forKey: .method)
        }
        if let uri = self.uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIPDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientIP)
        clientIP = clientIPDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let methodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .method)
        method = methodDecoded
        let httpVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpVersion)
        httpVersion = httpVersionDecoded
        let headersContainer = try containerValues.decodeIfPresent([WAFClientTypes.HTTPHeader?].self, forKey: .headers)
        var headersDecoded0:[WAFClientTypes.HTTPHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [WAFClientTypes.HTTPHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The response from a [GetSampledRequests] request includes an HTTPRequest complex type that appears as Request in the response syntax. HTTPRequest contains information about one of the web requests that were returned by GetSampledRequests.
    public struct HTTPRequest: Swift.Equatable {
        /// The IP address that the request originated from. If the WebACL is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:
        ///
        /// * c-ip, if the viewer did not use an HTTP proxy or a load balancer to send the request
        ///
        /// * x-forwarded-for, if the viewer did use an HTTP proxy or a load balancer to send the request
        public var clientIP: Swift.String?
        /// The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
        public var country: Swift.String?
        /// A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.
        public var headers: [WAFClientTypes.HTTPHeader]?
        /// The HTTP version specified in the sampled web request, for example, HTTP/1.1.
        public var httpVersion: Swift.String?
        /// The HTTP method specified in the sampled web request. CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        public var method: Swift.String?
        /// The part of a web request that identifies the resource, for example, /images/daily-ad.jpg.
        public var uri: Swift.String?

        public init (
            clientIP: Swift.String? = nil,
            country: Swift.String? = nil,
            headers: [WAFClientTypes.HTTPHeader]? = nil,
            httpVersion: Swift.String? = nil,
            method: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.clientIP = clientIP
            self.country = country
            self.headers = headers
            self.httpVersion = httpVersion
            self.method = method
            self.uri = uri
        }
    }

}

extension WAFClientTypes.IPSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSetDescriptors = "IPSetDescriptors"
        case ipSetId = "IPSetId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipSetDescriptors = ipSetDescriptors {
            var ipSetDescriptorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipSetDescriptors)
            for ipsetdescriptor0 in ipSetDescriptors {
                try ipSetDescriptorsContainer.encode(ipsetdescriptor0)
            }
        }
        if let ipSetId = self.ipSetId {
            try encodeContainer.encode(ipSetId, forKey: .ipSetId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipSetId)
        ipSetId = ipSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ipSetDescriptorsContainer = try containerValues.decodeIfPresent([WAFClientTypes.IPSetDescriptor?].self, forKey: .ipSetDescriptors)
        var ipSetDescriptorsDecoded0:[WAFClientTypes.IPSetDescriptor]? = nil
        if let ipSetDescriptorsContainer = ipSetDescriptorsContainer {
            ipSetDescriptorsDecoded0 = [WAFClientTypes.IPSetDescriptor]()
            for structure0 in ipSetDescriptorsContainer {
                if let structure0 = structure0 {
                    ipSetDescriptorsDecoded0?.append(structure0)
                }
            }
        }
        ipSetDescriptors = ipSetDescriptorsDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains one or more IP addresses or blocks of IP addresses specified in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports IPv4 address ranges: /8 and any range between /16 through /32. AWS WAF supports IPv6 address ranges: /24, /32, /48, /56, /64, and /128. To specify an individual IP address, you specify the four-part IP address followed by a /32, for example, 192.0.2.0/32. To block a range of IP addresses, you can specify /8 or any range between /16 through /32 (for IPv4) or /24, /32, /48, /56, /64, or /128 (for IPv6). For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
    public struct IPSet: Swift.Equatable {
        /// The IP address type (IPV4 or IPV6) and the IP address range (in CIDR notation) that web requests originate from. If the WebACL is associated with a CloudFront distribution and the viewer did not use an HTTP proxy or a load balancer to send the request, this is the value of the c-ip field in the CloudFront access logs.
        /// This member is required.
        public var ipSetDescriptors: [WAFClientTypes.IPSetDescriptor]?
        /// The IPSetId for an IPSet. You use IPSetId to get information about an IPSet (see [GetIPSet]), update an IPSet (see [UpdateIPSet]), insert an IPSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete an IPSet from AWS WAF (see [DeleteIPSet]). IPSetId is returned by [CreateIPSet] and by [ListIPSets].
        /// This member is required.
        public var ipSetId: Swift.String?
        /// A friendly name or description of the [IPSet]. You can't change the name of an IPSet after you create it.
        public var name: Swift.String?

        public init (
            ipSetDescriptors: [WAFClientTypes.IPSetDescriptor]? = nil,
            ipSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipSetDescriptors = ipSetDescriptors
            self.ipSetId = ipSetId
            self.name = name
        }
    }

}

extension WAFClientTypes.IPSetDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.IPSetDescriptorType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) that web requests originate from.
    public struct IPSetDescriptor: Swift.Equatable {
        /// Specify IPV4 or IPV6.
        /// This member is required.
        public var type: WAFClientTypes.IPSetDescriptorType?
        /// Specify an IPv4 address by using CIDR notation. For example:
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Specify an IPv6 address by using CIDR notation. For example:
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        /// This member is required.
        public var value: Swift.String?

        public init (
            type: WAFClientTypes.IPSetDescriptorType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension WAFClientTypes {
    public enum IPSetDescriptorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IPSetDescriptorType] {
            return [
                .ipv4,
                .ipv6,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "IPV4"
            case .ipv6: return "IPV6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IPSetDescriptorType(rawValue: rawValue) ?? IPSetDescriptorType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.IPSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSetId = "IPSetId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipSetId = self.ipSetId {
            try encodeContainer.encode(ipSetId, forKey: .ipSetId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipSetId)
        ipSetId = ipSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the name of the IPSet.
    public struct IPSetSummary: Swift.Equatable {
        /// The IPSetId for an [IPSet]. You can use IPSetId in a [GetIPSet] request to get detailed information about an [IPSet].
        /// This member is required.
        public var ipSetId: Swift.String?
        /// A friendly name or description of the [IPSet]. You can't change the name of an IPSet after you create it.
        /// This member is required.
        public var name: Swift.String?

        public init (
            ipSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipSetId = ipSetId
            self.name = name
        }
    }

}

extension WAFClientTypes.IPSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case ipSetDescriptor = "IPSetDescriptor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let ipSetDescriptor = self.ipSetDescriptor {
            try encodeContainer.encode(ipSetDescriptor, forKey: .ipSetDescriptor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let ipSetDescriptorDecoded = try containerValues.decodeIfPresent(WAFClientTypes.IPSetDescriptor.self, forKey: .ipSetDescriptor)
        ipSetDescriptor = ipSetDescriptorDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the type of update to perform to an [IPSet] with [UpdateIPSet].
    public struct IPSetUpdate: Swift.Equatable {
        /// Specifies whether to insert or delete an IP address with [UpdateIPSet].
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// The IP address type (IPV4 or IPV6) and the IP address range (in CIDR notation) that web requests originate from.
        /// This member is required.
        public var ipSetDescriptor: WAFClientTypes.IPSetDescriptor?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            ipSetDescriptor: WAFClientTypes.IPSetDescriptor? = nil
        )
        {
            self.action = action
            self.ipSetDescriptor = ipSetDescriptor
        }
    }

}

extension ListActivatedRulesInRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case ruleGroupId = "RuleGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
    }
}

extension ListActivatedRulesInRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListActivatedRulesInRuleGroupInput: Swift.Equatable {
    /// Specifies the number of ActivatedRules that you want AWS WAF to return for this request. If you have more ActivatedRules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of ActivatedRules.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more ActivatedRules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of ActivatedRules. For the second and subsequent ListActivatedRulesInRuleGroup requests, specify the value of NextMarker from the previous response to get information about another batch of ActivatedRules.
    public var nextMarker: Swift.String?
    /// The RuleGroupId of the [RuleGroup] for which you want to get a list of [ActivatedRule] objects.
    public var ruleGroupId: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil,
        ruleGroupId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.ruleGroupId = ruleGroupId
    }
}

struct ListActivatedRulesInRuleGroupInputBody: Swift.Equatable {
    let ruleGroupId: Swift.String?
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListActivatedRulesInRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case ruleGroupId = "RuleGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListActivatedRulesInRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActivatedRulesInRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListActivatedRulesInRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActivatedRulesInRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListActivatedRulesInRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activatedRules = output.activatedRules
            self.nextMarker = output.nextMarker
        } else {
            self.activatedRules = nil
            self.nextMarker = nil
        }
    }
}

public struct ListActivatedRulesInRuleGroupOutputResponse: Swift.Equatable {
    /// An array of ActivatedRules objects.
    public var activatedRules: [WAFClientTypes.ActivatedRule]?
    /// If you have more ActivatedRules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more ActivatedRules, submit another ListActivatedRulesInRuleGroup request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init (
        activatedRules: [WAFClientTypes.ActivatedRule]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.activatedRules = activatedRules
        self.nextMarker = nextMarker
    }
}

struct ListActivatedRulesInRuleGroupOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let activatedRules: [WAFClientTypes.ActivatedRule]?
}

extension ListActivatedRulesInRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activatedRules = "ActivatedRules"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let activatedRulesContainer = try containerValues.decodeIfPresent([WAFClientTypes.ActivatedRule?].self, forKey: .activatedRules)
        var activatedRulesDecoded0:[WAFClientTypes.ActivatedRule]? = nil
        if let activatedRulesContainer = activatedRulesContainer {
            activatedRulesDecoded0 = [WAFClientTypes.ActivatedRule]()
            for structure0 in activatedRulesContainer {
                if let structure0 = structure0 {
                    activatedRulesDecoded0?.append(structure0)
                }
            }
        }
        activatedRules = activatedRulesDecoded0
    }
}

extension ListByteMatchSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListByteMatchSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListByteMatchSetsInput: Swift.Equatable {
    /// Specifies the number of ByteMatchSet objects that you want AWS WAF to return for this request. If you have more ByteMatchSets objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of ByteMatchSet objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more ByteMatchSets than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of ByteMatchSets. For the second and subsequent ListByteMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of ByteMatchSets.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListByteMatchSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListByteMatchSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListByteMatchSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListByteMatchSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListByteMatchSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListByteMatchSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListByteMatchSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.byteMatchSets = output.byteMatchSets
            self.nextMarker = output.nextMarker
        } else {
            self.byteMatchSets = nil
            self.nextMarker = nil
        }
    }
}

public struct ListByteMatchSetsOutputResponse: Swift.Equatable {
    /// An array of [ByteMatchSetSummary] objects.
    public var byteMatchSets: [WAFClientTypes.ByteMatchSetSummary]?
    /// If you have more ByteMatchSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more ByteMatchSet objects, submit another ListByteMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init (
        byteMatchSets: [WAFClientTypes.ByteMatchSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.byteMatchSets = byteMatchSets
        self.nextMarker = nextMarker
    }
}

struct ListByteMatchSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let byteMatchSets: [WAFClientTypes.ByteMatchSetSummary]?
}

extension ListByteMatchSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSets = "ByteMatchSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let byteMatchSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.ByteMatchSetSummary?].self, forKey: .byteMatchSets)
        var byteMatchSetsDecoded0:[WAFClientTypes.ByteMatchSetSummary]? = nil
        if let byteMatchSetsContainer = byteMatchSetsContainer {
            byteMatchSetsDecoded0 = [WAFClientTypes.ByteMatchSetSummary]()
            for structure0 in byteMatchSetsContainer {
                if let structure0 = structure0 {
                    byteMatchSetsDecoded0?.append(structure0)
                }
            }
        }
        byteMatchSets = byteMatchSetsDecoded0
    }
}

extension ListGeoMatchSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListGeoMatchSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGeoMatchSetsInput: Swift.Equatable {
    /// Specifies the number of GeoMatchSet objects that you want AWS WAF to return for this request. If you have more GeoMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of GeoMatchSet objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more GeoMatchSets than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of GeoMatchSet objects. For the second and subsequent ListGeoMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of GeoMatchSet objects.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListGeoMatchSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListGeoMatchSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListGeoMatchSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGeoMatchSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGeoMatchSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGeoMatchSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGeoMatchSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.geoMatchSets = output.geoMatchSets
            self.nextMarker = output.nextMarker
        } else {
            self.geoMatchSets = nil
            self.nextMarker = nil
        }
    }
}

public struct ListGeoMatchSetsOutputResponse: Swift.Equatable {
    /// An array of [GeoMatchSetSummary] objects.
    public var geoMatchSets: [WAFClientTypes.GeoMatchSetSummary]?
    /// If you have more GeoMatchSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more GeoMatchSet objects, submit another ListGeoMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init (
        geoMatchSets: [WAFClientTypes.GeoMatchSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.geoMatchSets = geoMatchSets
        self.nextMarker = nextMarker
    }
}

struct ListGeoMatchSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let geoMatchSets: [WAFClientTypes.GeoMatchSetSummary]?
}

extension ListGeoMatchSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoMatchSets = "GeoMatchSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let geoMatchSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.GeoMatchSetSummary?].self, forKey: .geoMatchSets)
        var geoMatchSetsDecoded0:[WAFClientTypes.GeoMatchSetSummary]? = nil
        if let geoMatchSetsContainer = geoMatchSetsContainer {
            geoMatchSetsDecoded0 = [WAFClientTypes.GeoMatchSetSummary]()
            for structure0 in geoMatchSetsContainer {
                if let structure0 = structure0 {
                    geoMatchSetsDecoded0?.append(structure0)
                }
            }
        }
        geoMatchSets = geoMatchSetsDecoded0
    }
}

extension ListIPSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListIPSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListIPSetsInput: Swift.Equatable {
    /// Specifies the number of IPSet objects that you want AWS WAF to return for this request. If you have more IPSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of IPSet objects.
    public var limit: Swift.Int
    /// AWS WAF returns a NextMarker value in the response that allows you to list another group of IPSets. For the second and subsequent ListIPSets requests, specify the value of NextMarker from the previous response to get information about another batch of IPSets.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListIPSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListIPSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListIPSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIPSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListIPSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIPSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListIPSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ipSets = output.ipSets
            self.nextMarker = output.nextMarker
        } else {
            self.ipSets = nil
            self.nextMarker = nil
        }
    }
}

public struct ListIPSetsOutputResponse: Swift.Equatable {
    /// An array of [IPSetSummary] objects.
    public var ipSets: [WAFClientTypes.IPSetSummary]?
    /// To list more IPSet objects, submit another ListIPSets request, and in the next request use the NextMarker response value as the NextMarker value.
    public var nextMarker: Swift.String?

    public init (
        ipSets: [WAFClientTypes.IPSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.ipSets = ipSets
        self.nextMarker = nextMarker
    }
}

struct ListIPSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let ipSets: [WAFClientTypes.IPSetSummary]?
}

extension ListIPSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSets = "IPSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ipSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.IPSetSummary?].self, forKey: .ipSets)
        var ipSetsDecoded0:[WAFClientTypes.IPSetSummary]? = nil
        if let ipSetsContainer = ipSetsContainer {
            ipSetsDecoded0 = [WAFClientTypes.IPSetSummary]()
            for structure0 in ipSetsContainer {
                if let structure0 = structure0 {
                    ipSetsDecoded0?.append(structure0)
                }
            }
        }
        ipSets = ipSetsDecoded0
    }
}

extension ListLoggingConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListLoggingConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLoggingConfigurationsInput: Swift.Equatable {
    /// Specifies the number of LoggingConfigurations that you want AWS WAF to return for this request. If you have more LoggingConfigurations than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of LoggingConfigurations.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more LoggingConfigurations than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of LoggingConfigurations. For the second and subsequent ListLoggingConfigurations requests, specify the value of NextMarker from the previous response to get information about another batch of ListLoggingConfigurations.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListLoggingConfigurationsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListLoggingConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListLoggingConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLoggingConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListLoggingConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLoggingConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListLoggingConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfigurations = output.loggingConfigurations
            self.nextMarker = output.nextMarker
        } else {
            self.loggingConfigurations = nil
            self.nextMarker = nil
        }
    }
}

public struct ListLoggingConfigurationsOutputResponse: Swift.Equatable {
    /// An array of [LoggingConfiguration] objects.
    public var loggingConfigurations: [WAFClientTypes.LoggingConfiguration]?
    /// If you have more LoggingConfigurations than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more LoggingConfigurations, submit another ListLoggingConfigurations request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init (
        loggingConfigurations: [WAFClientTypes.LoggingConfiguration]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loggingConfigurations = loggingConfigurations
        self.nextMarker = nextMarker
    }
}

struct ListLoggingConfigurationsOutputResponseBody: Swift.Equatable {
    let loggingConfigurations: [WAFClientTypes.LoggingConfiguration]?
    let nextMarker: Swift.String?
}

extension ListLoggingConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfigurations = "LoggingConfigurations"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationsContainer = try containerValues.decodeIfPresent([WAFClientTypes.LoggingConfiguration?].self, forKey: .loggingConfigurations)
        var loggingConfigurationsDecoded0:[WAFClientTypes.LoggingConfiguration]? = nil
        if let loggingConfigurationsContainer = loggingConfigurationsContainer {
            loggingConfigurationsDecoded0 = [WAFClientTypes.LoggingConfiguration]()
            for structure0 in loggingConfigurationsContainer {
                if let structure0 = structure0 {
                    loggingConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        loggingConfigurations = loggingConfigurationsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListRateBasedRulesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListRateBasedRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRateBasedRulesInput: Swift.Equatable {
    /// Specifies the number of Rules that you want AWS WAF to return for this request. If you have more Rules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more Rules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of Rules. For the second and subsequent ListRateBasedRules requests, specify the value of NextMarker from the previous response to get information about another batch of Rules.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListRateBasedRulesInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListRateBasedRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListRateBasedRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRateBasedRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRateBasedRulesOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRateBasedRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRateBasedRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.rules = output.rules
        } else {
            self.nextMarker = nil
            self.rules = nil
        }
    }
}

public struct ListRateBasedRulesOutputResponse: Swift.Equatable {
    /// If you have more Rules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more Rules, submit another ListRateBasedRules request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleSummary] objects.
    public var rules: [WAFClientTypes.RuleSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        rules: [WAFClientTypes.RuleSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.rules = rules
    }
}

struct ListRateBasedRulesOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let rules: [WAFClientTypes.RuleSummary]?
}

extension ListRateBasedRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RuleSummary?].self, forKey: .rules)
        var rulesDecoded0:[WAFClientTypes.RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFClientTypes.RuleSummary]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension ListRegexMatchSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListRegexMatchSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRegexMatchSetsInput: Swift.Equatable {
    /// Specifies the number of RegexMatchSet objects that you want AWS WAF to return for this request. If you have more RegexMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RegexMatchSet objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more RegexMatchSet objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of ByteMatchSets. For the second and subsequent ListRegexMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of RegexMatchSet objects.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListRegexMatchSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListRegexMatchSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListRegexMatchSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRegexMatchSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRegexMatchSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRegexMatchSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRegexMatchSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.regexMatchSets = output.regexMatchSets
        } else {
            self.nextMarker = nil
            self.regexMatchSets = nil
        }
    }
}

public struct ListRegexMatchSetsOutputResponse: Swift.Equatable {
    /// If you have more RegexMatchSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RegexMatchSet objects, submit another ListRegexMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RegexMatchSetSummary] objects.
    public var regexMatchSets: [WAFClientTypes.RegexMatchSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        regexMatchSets: [WAFClientTypes.RegexMatchSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexMatchSets = regexMatchSets
    }
}

struct ListRegexMatchSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let regexMatchSets: [WAFClientTypes.RegexMatchSetSummary]?
}

extension ListRegexMatchSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case regexMatchSets = "RegexMatchSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let regexMatchSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.RegexMatchSetSummary?].self, forKey: .regexMatchSets)
        var regexMatchSetsDecoded0:[WAFClientTypes.RegexMatchSetSummary]? = nil
        if let regexMatchSetsContainer = regexMatchSetsContainer {
            regexMatchSetsDecoded0 = [WAFClientTypes.RegexMatchSetSummary]()
            for structure0 in regexMatchSetsContainer {
                if let structure0 = structure0 {
                    regexMatchSetsDecoded0?.append(structure0)
                }
            }
        }
        regexMatchSets = regexMatchSetsDecoded0
    }
}

extension ListRegexPatternSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListRegexPatternSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRegexPatternSetsInput: Swift.Equatable {
    /// Specifies the number of RegexPatternSet objects that you want AWS WAF to return for this request. If you have more RegexPatternSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RegexPatternSet objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more RegexPatternSet objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of RegexPatternSet objects. For the second and subsequent ListRegexPatternSets requests, specify the value of NextMarker from the previous response to get information about another batch of RegexPatternSet objects.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListRegexPatternSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListRegexPatternSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListRegexPatternSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRegexPatternSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRegexPatternSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRegexPatternSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRegexPatternSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.regexPatternSets = output.regexPatternSets
        } else {
            self.nextMarker = nil
            self.regexPatternSets = nil
        }
    }
}

public struct ListRegexPatternSetsOutputResponse: Swift.Equatable {
    /// If you have more RegexPatternSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RegexPatternSet objects, submit another ListRegexPatternSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RegexPatternSetSummary] objects.
    public var regexPatternSets: [WAFClientTypes.RegexPatternSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        regexPatternSets: [WAFClientTypes.RegexPatternSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexPatternSets = regexPatternSets
    }
}

struct ListRegexPatternSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let regexPatternSets: [WAFClientTypes.RegexPatternSetSummary]?
}

extension ListRegexPatternSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case regexPatternSets = "RegexPatternSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let regexPatternSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.RegexPatternSetSummary?].self, forKey: .regexPatternSets)
        var regexPatternSetsDecoded0:[WAFClientTypes.RegexPatternSetSummary]? = nil
        if let regexPatternSetsContainer = regexPatternSetsContainer {
            regexPatternSetsDecoded0 = [WAFClientTypes.RegexPatternSetSummary]()
            for structure0 in regexPatternSetsContainer {
                if let structure0 = structure0 {
                    regexPatternSetsDecoded0?.append(structure0)
                }
            }
        }
        regexPatternSets = regexPatternSetsDecoded0
    }
}

extension ListRuleGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListRuleGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRuleGroupsInput: Swift.Equatable {
    /// Specifies the number of RuleGroups that you want AWS WAF to return for this request. If you have more RuleGroups than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RuleGroups.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more RuleGroups than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of RuleGroups. For the second and subsequent ListRuleGroups requests, specify the value of NextMarker from the previous response to get information about another batch of RuleGroups.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListRuleGroupsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.ruleGroups = output.ruleGroups
        } else {
            self.nextMarker = nil
            self.ruleGroups = nil
        }
    }
}

public struct ListRuleGroupsOutputResponse: Swift.Equatable {
    /// If you have more RuleGroups than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RuleGroups, submit another ListRuleGroups request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleGroup] objects.
    public var ruleGroups: [WAFClientTypes.RuleGroupSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        ruleGroups: [WAFClientTypes.RuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

struct ListRuleGroupsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let ruleGroups: [WAFClientTypes.RuleGroupSummary]?
}

extension ListRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case ruleGroups = "RuleGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ruleGroupsContainer = try containerValues.decodeIfPresent([WAFClientTypes.RuleGroupSummary?].self, forKey: .ruleGroups)
        var ruleGroupsDecoded0:[WAFClientTypes.RuleGroupSummary]? = nil
        if let ruleGroupsContainer = ruleGroupsContainer {
            ruleGroupsDecoded0 = [WAFClientTypes.RuleGroupSummary]()
            for structure0 in ruleGroupsContainer {
                if let structure0 = structure0 {
                    ruleGroupsDecoded0?.append(structure0)
                }
            }
        }
        ruleGroups = ruleGroupsDecoded0
    }
}

extension ListRulesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRulesInput: Swift.Equatable {
    /// Specifies the number of Rules that you want AWS WAF to return for this request. If you have more Rules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more Rules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of Rules. For the second and subsequent ListRules requests, specify the value of NextMarker from the previous response to get information about another batch of Rules.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListRulesInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRulesOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.rules = output.rules
        } else {
            self.nextMarker = nil
            self.rules = nil
        }
    }
}

public struct ListRulesOutputResponse: Swift.Equatable {
    /// If you have more Rules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more Rules, submit another ListRules request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleSummary] objects.
    public var rules: [WAFClientTypes.RuleSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        rules: [WAFClientTypes.RuleSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.rules = rules
    }
}

struct ListRulesOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let rules: [WAFClientTypes.RuleSummary]?
}

extension ListRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RuleSummary?].self, forKey: .rules)
        var rulesDecoded0:[WAFClientTypes.RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFClientTypes.RuleSummary]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension ListSizeConstraintSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListSizeConstraintSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSizeConstraintSetsInput: Swift.Equatable {
    /// Specifies the number of SizeConstraintSet objects that you want AWS WAF to return for this request. If you have more SizeConstraintSets objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of SizeConstraintSet objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more SizeConstraintSets than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of SizeConstraintSets. For the second and subsequent ListSizeConstraintSets requests, specify the value of NextMarker from the previous response to get information about another batch of SizeConstraintSets.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListSizeConstraintSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListSizeConstraintSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListSizeConstraintSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSizeConstraintSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSizeConstraintSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSizeConstraintSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSizeConstraintSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.sizeConstraintSets = output.sizeConstraintSets
        } else {
            self.nextMarker = nil
            self.sizeConstraintSets = nil
        }
    }
}

public struct ListSizeConstraintSetsOutputResponse: Swift.Equatable {
    /// If you have more SizeConstraintSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more SizeConstraintSet objects, submit another ListSizeConstraintSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [SizeConstraintSetSummary] objects.
    public var sizeConstraintSets: [WAFClientTypes.SizeConstraintSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        sizeConstraintSets: [WAFClientTypes.SizeConstraintSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.sizeConstraintSets = sizeConstraintSets
    }
}

struct ListSizeConstraintSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let sizeConstraintSets: [WAFClientTypes.SizeConstraintSetSummary]?
}

extension ListSizeConstraintSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case sizeConstraintSets = "SizeConstraintSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let sizeConstraintSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.SizeConstraintSetSummary?].self, forKey: .sizeConstraintSets)
        var sizeConstraintSetsDecoded0:[WAFClientTypes.SizeConstraintSetSummary]? = nil
        if let sizeConstraintSetsContainer = sizeConstraintSetsContainer {
            sizeConstraintSetsDecoded0 = [WAFClientTypes.SizeConstraintSetSummary]()
            for structure0 in sizeConstraintSetsContainer {
                if let structure0 = structure0 {
                    sizeConstraintSetsDecoded0?.append(structure0)
                }
            }
        }
        sizeConstraintSets = sizeConstraintSetsDecoded0
    }
}

extension ListSqlInjectionMatchSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListSqlInjectionMatchSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to list the [SqlInjectionMatchSet] objects created by the current AWS account.
public struct ListSqlInjectionMatchSetsInput: Swift.Equatable {
    /// Specifies the number of [SqlInjectionMatchSet] objects that you want AWS WAF to return for this request. If you have more SqlInjectionMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more [SqlInjectionMatchSet] objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of SqlInjectionMatchSets. For the second and subsequent ListSqlInjectionMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of SqlInjectionMatchSets.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListSqlInjectionMatchSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListSqlInjectionMatchSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListSqlInjectionMatchSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSqlInjectionMatchSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSqlInjectionMatchSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSqlInjectionMatchSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSqlInjectionMatchSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.sqlInjectionMatchSets = output.sqlInjectionMatchSets
        } else {
            self.nextMarker = nil
            self.sqlInjectionMatchSets = nil
        }
    }
}

/// The response to a [ListSqlInjectionMatchSets] request.
public struct ListSqlInjectionMatchSetsOutputResponse: Swift.Equatable {
    /// If you have more [SqlInjectionMatchSet] objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more SqlInjectionMatchSet objects, submit another ListSqlInjectionMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [SqlInjectionMatchSetSummary] objects.
    public var sqlInjectionMatchSets: [WAFClientTypes.SqlInjectionMatchSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        sqlInjectionMatchSets: [WAFClientTypes.SqlInjectionMatchSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.sqlInjectionMatchSets = sqlInjectionMatchSets
    }
}

struct ListSqlInjectionMatchSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let sqlInjectionMatchSets: [WAFClientTypes.SqlInjectionMatchSetSummary]?
}

extension ListSqlInjectionMatchSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case sqlInjectionMatchSets = "SqlInjectionMatchSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let sqlInjectionMatchSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.SqlInjectionMatchSetSummary?].self, forKey: .sqlInjectionMatchSets)
        var sqlInjectionMatchSetsDecoded0:[WAFClientTypes.SqlInjectionMatchSetSummary]? = nil
        if let sqlInjectionMatchSetsContainer = sqlInjectionMatchSetsContainer {
            sqlInjectionMatchSetsDecoded0 = [WAFClientTypes.SqlInjectionMatchSetSummary]()
            for structure0 in sqlInjectionMatchSetsContainer {
                if let structure0 = structure0 {
                    sqlInjectionMatchSetsDecoded0?.append(structure0)
                }
            }
        }
        sqlInjectionMatchSets = sqlInjectionMatchSetsDecoded0
    }
}

extension ListSubscribedRuleGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListSubscribedRuleGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSubscribedRuleGroupsInput: Swift.Equatable {
    /// Specifies the number of subscribed rule groups that you want AWS WAF to return for this request. If you have more objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more ByteMatchSetssubscribed rule groups than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of subscribed rule groups. For the second and subsequent ListSubscribedRuleGroupsRequest requests, specify the value of NextMarker from the previous response to get information about another batch of subscribed rule groups.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListSubscribedRuleGroupsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListSubscribedRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListSubscribedRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSubscribedRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSubscribedRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSubscribedRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSubscribedRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.ruleGroups = output.ruleGroups
        } else {
            self.nextMarker = nil
            self.ruleGroups = nil
        }
    }
}

public struct ListSubscribedRuleGroupsOutputResponse: Swift.Equatable {
    /// If you have more objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more objects, submit another ListSubscribedRuleGroups request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleGroup] objects.
    public var ruleGroups: [WAFClientTypes.SubscribedRuleGroupSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        ruleGroups: [WAFClientTypes.SubscribedRuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

struct ListSubscribedRuleGroupsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let ruleGroups: [WAFClientTypes.SubscribedRuleGroupSummary]?
}

extension ListSubscribedRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case ruleGroups = "RuleGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ruleGroupsContainer = try containerValues.decodeIfPresent([WAFClientTypes.SubscribedRuleGroupSummary?].self, forKey: .ruleGroups)
        var ruleGroupsDecoded0:[WAFClientTypes.SubscribedRuleGroupSummary]? = nil
        if let ruleGroupsContainer = ruleGroupsContainer {
            ruleGroupsDecoded0 = [WAFClientTypes.SubscribedRuleGroupSummary]()
            for structure0 in ruleGroupsContainer {
                if let structure0 = structure0 {
                    ruleGroupsDecoded0?.append(structure0)
                }
            }
        }
        ruleGroups = ruleGroupsDecoded0
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    ///
    public var limit: Swift.Int
    ///
    public var nextMarker: Swift.String?
    ///
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
    let resourceARN: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.tagInfoForResource = output.tagInfoForResource
        } else {
            self.nextMarker = nil
            self.tagInfoForResource = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    ///
    public var nextMarker: Swift.String?
    ///
    public var tagInfoForResource: WAFClientTypes.TagInfoForResource?

    public init (
        nextMarker: Swift.String? = nil,
        tagInfoForResource: WAFClientTypes.TagInfoForResource? = nil
    )
    {
        self.nextMarker = nextMarker
        self.tagInfoForResource = tagInfoForResource
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let tagInfoForResource: WAFClientTypes.TagInfoForResource?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case tagInfoForResource = "TagInfoForResource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let tagInfoForResourceDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TagInfoForResource.self, forKey: .tagInfoForResource)
        tagInfoForResource = tagInfoForResourceDecoded
    }
}

extension ListWebACLsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListWebACLsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWebACLsInput: Swift.Equatable {
    /// Specifies the number of WebACL objects that you want AWS WAF to return for this request. If you have more WebACL objects than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of WebACL objects.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more WebACL objects than the number that you specify for Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of WebACL objects. For the second and subsequent ListWebACLs requests, specify the value of NextMarker from the previous response to get information about another batch of WebACL objects.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListWebACLsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListWebACLsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListWebACLsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWebACLsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListWebACLsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWebACLsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListWebACLsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.webACLs = output.webACLs
        } else {
            self.nextMarker = nil
            self.webACLs = nil
        }
    }
}

public struct ListWebACLsOutputResponse: Swift.Equatable {
    /// If you have more WebACL objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more WebACL objects, submit another ListWebACLs request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [WebACLSummary] objects.
    public var webACLs: [WAFClientTypes.WebACLSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        webACLs: [WAFClientTypes.WebACLSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.webACLs = webACLs
    }
}

struct ListWebACLsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let webACLs: [WAFClientTypes.WebACLSummary]?
}

extension ListWebACLsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case webACLs = "WebACLs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let webACLsContainer = try containerValues.decodeIfPresent([WAFClientTypes.WebACLSummary?].self, forKey: .webACLs)
        var webACLsDecoded0:[WAFClientTypes.WebACLSummary]? = nil
        if let webACLsContainer = webACLsContainer {
            webACLsDecoded0 = [WAFClientTypes.WebACLSummary]()
            for structure0 in webACLsContainer {
                if let structure0 = structure0 {
                    webACLsDecoded0?.append(structure0)
                }
            }
        }
        webACLs = webACLsDecoded0
    }
}

extension ListXssMatchSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
    }
}

extension ListXssMatchSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to list the [XssMatchSet] objects created by the current AWS account.
public struct ListXssMatchSetsInput: Swift.Equatable {
    /// Specifies the number of [XssMatchSet] objects that you want AWS WAF to return for this request. If you have more XssMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int
    /// If you specify a value for Limit and you have more [XssMatchSet] objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of XssMatchSets. For the second and subsequent ListXssMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of XssMatchSets.
    public var nextMarker: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

struct ListXssMatchSetsInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int
}

extension ListXssMatchSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}

extension ListXssMatchSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListXssMatchSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListXssMatchSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListXssMatchSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListXssMatchSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.xssMatchSets = output.xssMatchSets
        } else {
            self.nextMarker = nil
            self.xssMatchSets = nil
        }
    }
}

/// The response to a [ListXssMatchSets] request.
public struct ListXssMatchSetsOutputResponse: Swift.Equatable {
    /// If you have more [XssMatchSet] objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more XssMatchSet objects, submit another ListXssMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [XssMatchSetSummary] objects.
    public var xssMatchSets: [WAFClientTypes.XssMatchSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        xssMatchSets: [WAFClientTypes.XssMatchSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.xssMatchSets = xssMatchSets
    }
}

struct ListXssMatchSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let xssMatchSets: [WAFClientTypes.XssMatchSetSummary]?
}

extension ListXssMatchSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case xssMatchSets = "XssMatchSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let xssMatchSetsContainer = try containerValues.decodeIfPresent([WAFClientTypes.XssMatchSetSummary?].self, forKey: .xssMatchSets)
        var xssMatchSetsDecoded0:[WAFClientTypes.XssMatchSetSummary]? = nil
        if let xssMatchSetsContainer = xssMatchSetsContainer {
            xssMatchSetsDecoded0 = [WAFClientTypes.XssMatchSetSummary]()
            for structure0 in xssMatchSetsContainer {
                if let structure0 = structure0 {
                    xssMatchSetsDecoded0?.append(structure0)
                }
            }
        }
        xssMatchSets = xssMatchSetsDecoded0
    }
}

extension WAFClientTypes.LoggingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
        case redactedFields = "RedactedFields"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for resourcearn0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(resourcearn0)
            }
        }
        if let redactedFields = redactedFields {
            var redactedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redactedFields)
            for fieldtomatch0 in redactedFields {
                try redactedFieldsContainer.encode(fieldtomatch0)
            }
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[Swift.String]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [Swift.String]()
            for string0 in logDestinationConfigsContainer {
                if let string0 = string0 {
                    logDestinationConfigsDecoded0?.append(string0)
                }
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
        let redactedFieldsContainer = try containerValues.decodeIfPresent([WAFClientTypes.FieldToMatch?].self, forKey: .redactedFields)
        var redactedFieldsDecoded0:[WAFClientTypes.FieldToMatch]? = nil
        if let redactedFieldsContainer = redactedFieldsContainer {
            redactedFieldsDecoded0 = [WAFClientTypes.FieldToMatch]()
            for structure0 in redactedFieldsContainer {
                if let structure0 = structure0 {
                    redactedFieldsDecoded0?.append(structure0)
                }
            }
        }
        redactedFields = redactedFieldsDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Amazon Kinesis Data Firehose, RedactedFields information, and the web ACL Amazon Resource Name (ARN).
    public struct LoggingConfiguration: Swift.Equatable {
        /// An array of Amazon Kinesis Data Firehose ARNs.
        /// This member is required.
        public var logDestinationConfigs: [Swift.String]?
        /// The parts of the request that you want redacted from the logs. For example, if you redact the cookie field, the cookie field in the firehose will be xxx.
        public var redactedFields: [WAFClientTypes.FieldToMatch]?
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init (
            logDestinationConfigs: [Swift.String]? = nil,
            redactedFields: [WAFClientTypes.FieldToMatch]? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }
    }

}

extension WAFClientTypes {
    public enum MatchFieldType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allQueryArgs
        case body
        case header
        case method
        case queryString
        case singleQueryArg
        case uri
        case sdkUnknown(Swift.String)

        public static var allCases: [MatchFieldType] {
            return [
                .allQueryArgs,
                .body,
                .header,
                .method,
                .queryString,
                .singleQueryArg,
                .uri,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allQueryArgs: return "ALL_QUERY_ARGS"
            case .body: return "BODY"
            case .header: return "HEADER"
            case .method: return "METHOD"
            case .queryString: return "QUERY_STRING"
            case .singleQueryArg: return "SINGLE_QUERY_ARG"
            case .uri: return "URI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MatchFieldType(rawValue: rawValue) ?? MatchFieldType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum MigrationErrorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case entityNotFound
        case entityNotSupported
        case s3BucketInvalidRegion
        case s3BucketNotAccessible
        case s3BucketNotFound
        case s3BucketNoPermission
        case s3InternalError
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationErrorType] {
            return [
                .entityNotFound,
                .entityNotSupported,
                .s3BucketInvalidRegion,
                .s3BucketNotAccessible,
                .s3BucketNotFound,
                .s3BucketNoPermission,
                .s3InternalError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .entityNotFound: return "ENTITY_NOT_FOUND"
            case .entityNotSupported: return "ENTITY_NOT_SUPPORTED"
            case .s3BucketInvalidRegion: return "S3_BUCKET_INVALID_REGION"
            case .s3BucketNotAccessible: return "S3_BUCKET_NOT_ACCESSIBLE"
            case .s3BucketNotFound: return "S3_BUCKET_NOT_FOUND"
            case .s3BucketNoPermission: return "S3_BUCKET_NO_PERMISSION"
            case .s3InternalError: return "S3_INTERNAL_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MigrationErrorType(rawValue: rawValue) ?? MigrationErrorType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum ParameterExceptionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case byteMatchFieldType
        case byteMatchPositionalConstraint
        case byteMatchTextTransformation
        case changeAction
        case geoMatchLocationType
        case geoMatchLocationValue
        case ipsetType
        case nextMarker
        case predicateType
        case rateKey
        case resourceArn
        case ruleType
        case sizeConstraintComparisonOperator
        case sqlInjectionMatchFieldType
        case tags
        case tagKeys
        case wafAction
        case wafOverrideAction
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionField] {
            return [
                .byteMatchFieldType,
                .byteMatchPositionalConstraint,
                .byteMatchTextTransformation,
                .changeAction,
                .geoMatchLocationType,
                .geoMatchLocationValue,
                .ipsetType,
                .nextMarker,
                .predicateType,
                .rateKey,
                .resourceArn,
                .ruleType,
                .sizeConstraintComparisonOperator,
                .sqlInjectionMatchFieldType,
                .tags,
                .tagKeys,
                .wafAction,
                .wafOverrideAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .byteMatchFieldType: return "BYTE_MATCH_FIELD_TYPE"
            case .byteMatchPositionalConstraint: return "BYTE_MATCH_POSITIONAL_CONSTRAINT"
            case .byteMatchTextTransformation: return "BYTE_MATCH_TEXT_TRANSFORMATION"
            case .changeAction: return "CHANGE_ACTION"
            case .geoMatchLocationType: return "GEO_MATCH_LOCATION_TYPE"
            case .geoMatchLocationValue: return "GEO_MATCH_LOCATION_VALUE"
            case .ipsetType: return "IPSET_TYPE"
            case .nextMarker: return "NEXT_MARKER"
            case .predicateType: return "PREDICATE_TYPE"
            case .rateKey: return "RATE_KEY"
            case .resourceArn: return "RESOURCE_ARN"
            case .ruleType: return "RULE_TYPE"
            case .sizeConstraintComparisonOperator: return "SIZE_CONSTRAINT_COMPARISON_OPERATOR"
            case .sqlInjectionMatchFieldType: return "SQL_INJECTION_MATCH_FIELD_TYPE"
            case .tags: return "TAGS"
            case .tagKeys: return "TAG_KEYS"
            case .wafAction: return "WAF_ACTION"
            case .wafOverrideAction: return "WAF_OVERRIDE_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterExceptionField(rawValue: rawValue) ?? ParameterExceptionField.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum ParameterExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case illegalArgument
        case illegalCombination
        case invalidOption
        case invalidTagKey
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionReason] {
            return [
                .illegalArgument,
                .illegalCombination,
                .invalidOption,
                .invalidTagKey,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .illegalArgument: return "ILLEGAL_ARGUMENT"
            case .illegalCombination: return "ILLEGAL_COMBINATION"
            case .invalidOption: return "INVALID_OPTION"
            case .invalidTagKey: return "INVALID_TAG_KEY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterExceptionReason(rawValue: rawValue) ?? ParameterExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum PositionalConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contains
        case containsWord
        case endsWith
        case exactly
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [PositionalConstraint] {
            return [
                .contains,
                .containsWord,
                .endsWith,
                .exactly,
                .startsWith,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .containsWord: return "CONTAINS_WORD"
            case .endsWith: return "ENDS_WITH"
            case .exactly: return "EXACTLY"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PositionalConstraint(rawValue: rawValue) ?? PositionalConstraint.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.Predicate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataId = "DataId"
        case negated = "Negated"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataId = self.dataId {
            try encodeContainer.encode(dataId, forKey: .dataId)
        }
        if let negated = self.negated {
            try encodeContainer.encode(negated, forKey: .negated)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let negatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negated)
        negated = negatedDecoded
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.PredicateType.self, forKey: .type)
        type = typeDecoded
        let dataIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataId)
        dataId = dataIdDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], and [SizeConstraintSet] objects that you want to add to a Rule and, for each object, indicates whether you want to negate the settings, for example, requests that do NOT originate from the IP address 192.0.2.44.
    public struct Predicate: Swift.Equatable {
        /// A unique identifier for a predicate in a Rule, such as ByteMatchSetId or IPSetId. The ID is returned by the corresponding Create or List command.
        /// This member is required.
        public var dataId: Swift.String?
        /// Set Negated to False if you want AWS WAF to allow, block, or count requests based on the settings in the specified [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], or [SizeConstraintSet]. For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow or block requests based on that IP address. Set Negated to True if you want AWS WAF to allow or block a request based on the negation of the settings in the [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], or [SizeConstraintSet]. For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow, block, or count requests based on all IP addresses except 192.0.2.44.
        /// This member is required.
        public var negated: Swift.Bool?
        /// The type of predicate in a Rule, such as ByteMatch or IPSet.
        /// This member is required.
        public var type: WAFClientTypes.PredicateType?

        public init (
            dataId: Swift.String? = nil,
            negated: Swift.Bool? = nil,
            type: WAFClientTypes.PredicateType? = nil
        )
        {
            self.dataId = dataId
            self.negated = negated
            self.type = type
        }
    }

}

extension WAFClientTypes {
    public enum PredicateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case byteMatch
        case geoMatch
        case ipMatch
        case regexMatch
        case sizeConstraint
        case sqlInjectionMatch
        case xssMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [PredicateType] {
            return [
                .byteMatch,
                .geoMatch,
                .ipMatch,
                .regexMatch,
                .sizeConstraint,
                .sqlInjectionMatch,
                .xssMatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .byteMatch: return "ByteMatch"
            case .geoMatch: return "GeoMatch"
            case .ipMatch: return "IPMatch"
            case .regexMatch: return "RegexMatch"
            case .sizeConstraint: return "SizeConstraint"
            case .sqlInjectionMatch: return "SqlInjectionMatch"
            case .xssMatch: return "XssMatch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredicateType(rawValue: rawValue) ?? PredicateType.sdkUnknown(rawValue)
        }
    }
}

extension PutLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loggingConfiguration = self.loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
    }
}

extension PutLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Kinesis Data Firehose that contains the inspected traffic information, the redacted fields details, and the Amazon Resource Name (ARN) of the web ACL to monitor. When specifying Type in RedactedFields, you must use one of the following values: URI, QUERY_STRING, HEADER, or METHOD.
    /// This member is required.
    public var loggingConfiguration: WAFClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: WAFClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct PutLoggingConfigurationInputBody: Swift.Equatable {
    let loggingConfiguration: WAFClientTypes.LoggingConfiguration?
}

extension PutLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension PutLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFServiceLinkedRoleErrorException" : self = .wAFServiceLinkedRoleErrorException(try WAFServiceLinkedRoleErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFServiceLinkedRoleErrorException(WAFServiceLinkedRoleErrorException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.loggingConfiguration = nil
        }
    }
}

public struct PutLoggingConfigurationOutputResponse: Swift.Equatable {
    /// The [LoggingConfiguration] that you submitted in the request.
    public var loggingConfiguration: WAFClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: WAFClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct PutLoggingConfigurationOutputResponseBody: Swift.Equatable {
    let loggingConfiguration: WAFClientTypes.LoggingConfiguration?
}

extension PutLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension PutPermissionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension PutPermissionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutPermissionPolicyInput: Swift.Equatable {
    /// The policy to attach to the specified RuleGroup.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the RuleGroup to which you want to attach the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

struct PutPermissionPolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let policy: Swift.String?
}

extension PutPermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutPermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutPermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidPermissionPolicyException" : self = .wAFInvalidPermissionPolicyException(try WAFInvalidPermissionPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutPermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidPermissionPolicyException(WAFInvalidPermissionPolicyException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutPermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutPermissionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension WAFClientTypes.RateBasedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchPredicates = "MatchPredicates"
        case metricName = "MetricName"
        case name = "Name"
        case rateKey = "RateKey"
        case rateLimit = "RateLimit"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let matchPredicates = matchPredicates {
            var matchPredicatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchPredicates)
            for predicate0 in matchPredicates {
                try matchPredicatesContainer.encode(predicate0)
            }
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rateKey = self.rateKey {
            try encodeContainer.encode(rateKey.rawValue, forKey: .rateKey)
        }
        if rateLimit != 0 {
            try encodeContainer.encode(rateLimit, forKey: .rateLimit)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let matchPredicatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.Predicate?].self, forKey: .matchPredicates)
        var matchPredicatesDecoded0:[WAFClientTypes.Predicate]? = nil
        if let matchPredicatesContainer = matchPredicatesContainer {
            matchPredicatesDecoded0 = [WAFClientTypes.Predicate]()
            for structure0 in matchPredicatesContainer {
                if let structure0 = structure0 {
                    matchPredicatesDecoded0?.append(structure0)
                }
            }
        }
        matchPredicates = matchPredicatesDecoded0
        let rateKeyDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RateKey.self, forKey: .rateKey)
        rateKey = rateKeyDecoded
        let rateLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rateLimit) ?? 0
        rateLimit = rateLimitDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A RateBasedRule is identical to a regular [Rule], with one addition: a RateBasedRule counts the number of requests that arrive from a specified IP address every five minutes. For example, based on recent requests that you've seen from an attacker, you might create a RateBasedRule that includes the following conditions:
    ///
    /// * The requests come from 192.0.2.44.
    ///
    /// * They contain the value BadBot in the User-Agent header.
    ///
    ///
    /// In the rule, you also define the rate limit as 1,000. Requests that meet both of these conditions and exceed 1,000 requests every five minutes trigger the rule's action (block or count), which is defined in the web ACL.
    public struct RateBasedRule: Swift.Equatable {
        /// The Predicates object contains one Predicate element for each [ByteMatchSet], [IPSet], or [SqlInjectionMatchSet] object that you want to include in a RateBasedRule.
        /// This member is required.
        public var matchPredicates: [WAFClientTypes.Predicate]?
        /// A friendly name or description for the metrics for a RateBasedRule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
        public var metricName: Swift.String?
        /// A friendly name or description for a RateBasedRule. You can't change the name of a RateBasedRule after you create it.
        public var name: Swift.String?
        /// The field that AWS WAF uses to determine if requests are likely arriving from single source and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that requests arriving from the same IP address are subject to the RateLimit that is specified in the RateBasedRule.
        /// This member is required.
        public var rateKey: WAFClientTypes.RateKey?
        /// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
        /// This member is required.
        public var rateLimit: Swift.Int
        /// A unique identifier for a RateBasedRule. You use RuleId to get more information about a RateBasedRule (see [GetRateBasedRule]), update a RateBasedRule (see [UpdateRateBasedRule]), insert a RateBasedRule into a WebACL or delete one from a WebACL (see [UpdateWebACL]), or delete a RateBasedRule from AWS WAF (see [DeleteRateBasedRule]).
        /// This member is required.
        public var ruleId: Swift.String?

        public init (
            matchPredicates: [WAFClientTypes.Predicate]? = nil,
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            rateKey: WAFClientTypes.RateKey? = nil,
            rateLimit: Swift.Int = 0,
            ruleId: Swift.String? = nil
        )
        {
            self.matchPredicates = matchPredicates
            self.metricName = metricName
            self.name = name
            self.rateKey = rateKey
            self.rateLimit = rateLimit
            self.ruleId = ruleId
        }
    }

}

extension WAFClientTypes {
    public enum RateKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ip
        case sdkUnknown(Swift.String)

        public static var allCases: [RateKey] {
            return [
                .ip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ip: return "IP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RateKey(rawValue: rawValue) ?? RateKey.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.RegexMatchSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case regexMatchSetId = "RegexMatchSetId"
        case regexMatchTuples = "RegexMatchTuples"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexMatchSetId = self.regexMatchSetId {
            try encodeContainer.encode(regexMatchSetId, forKey: .regexMatchSetId)
        }
        if let regexMatchTuples = regexMatchTuples {
            var regexMatchTuplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regexMatchTuples)
            for regexmatchtuple0 in regexMatchTuples {
                try regexMatchTuplesContainer.encode(regexmatchtuple0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regexMatchTuplesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RegexMatchTuple?].self, forKey: .regexMatchTuples)
        var regexMatchTuplesDecoded0:[WAFClientTypes.RegexMatchTuple]? = nil
        if let regexMatchTuplesContainer = regexMatchTuplesContainer {
            regexMatchTuplesDecoded0 = [WAFClientTypes.RegexMatchTuple]()
            for structure0 in regexMatchTuplesContainer {
                if let structure0 = structure0 {
                    regexMatchTuplesDecoded0?.append(structure0)
                }
            }
        }
        regexMatchTuples = regexMatchTuplesDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In a [GetRegexMatchSet] request, RegexMatchSet is a complex type that contains the RegexMatchSetId and Name of a RegexMatchSet, and the values that you specified when you updated the RegexMatchSet. The values are contained in a RegexMatchTuple object, which specify the parts of web requests that you want AWS WAF to inspect and the values that you want AWS WAF to search for. If a RegexMatchSet contains more than one RegexMatchTuple object, a request needs to match the settings in only one ByteMatchTuple to be considered a match.
    public struct RegexMatchSet: Swift.Equatable {
        /// A friendly name or description of the [RegexMatchSet]. You can't change Name after you create a RegexMatchSet.
        public var name: Swift.String?
        /// The RegexMatchSetId for a RegexMatchSet. You use RegexMatchSetId to get information about a RegexMatchSet (see [GetRegexMatchSet]), update a RegexMatchSet (see [UpdateRegexMatchSet]), insert a RegexMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a RegexMatchSet from AWS WAF (see [DeleteRegexMatchSet]). RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
        public var regexMatchSetId: Swift.String?
        /// Contains an array of [RegexMatchTuple] objects. Each RegexMatchTuple object contains:
        ///
        /// * The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the User-Agent header.
        ///
        /// * The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see [RegexPatternSet].
        ///
        /// * Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.
        public var regexMatchTuples: [WAFClientTypes.RegexMatchTuple]?

        public init (
            name: Swift.String? = nil,
            regexMatchSetId: Swift.String? = nil,
            regexMatchTuples: [WAFClientTypes.RegexMatchTuple]? = nil
        )
        {
            self.name = name
            self.regexMatchSetId = regexMatchSetId
            self.regexMatchTuples = regexMatchTuples
        }
    }

}

extension WAFClientTypes.RegexMatchSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case regexMatchSetId = "RegexMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexMatchSetId = self.regexMatchSetId {
            try encodeContainer.encode(regexMatchSetId, forKey: .regexMatchSetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Returned by [ListRegexMatchSets]. Each RegexMatchSetSummary object includes the Name and RegexMatchSetId for one [RegexMatchSet].
    public struct RegexMatchSetSummary: Swift.Equatable {
        /// A friendly name or description of the [RegexMatchSet]. You can't change Name after you create a RegexMatchSet.
        /// This member is required.
        public var name: Swift.String?
        /// The RegexMatchSetId for a RegexMatchSet. You use RegexMatchSetId to get information about a RegexMatchSet, update a RegexMatchSet, remove a RegexMatchSet from a Rule, and delete a RegexMatchSet from AWS WAF. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
        /// This member is required.
        public var regexMatchSetId: Swift.String?

        public init (
            name: Swift.String? = nil,
            regexMatchSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.regexMatchSetId = regexMatchSetId
        }
    }

}

extension WAFClientTypes.RegexMatchSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case regexMatchTuple = "RegexMatchTuple"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let regexMatchTuple = self.regexMatchTuple {
            try encodeContainer.encode(regexMatchTuple, forKey: .regexMatchTuple)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let regexMatchTupleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.RegexMatchTuple.self, forKey: .regexMatchTuple)
        regexMatchTuple = regexMatchTupleDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In an [UpdateRegexMatchSet] request, RegexMatchSetUpdate specifies whether to insert or delete a [RegexMatchTuple] and includes the settings for the RegexMatchTuple.
    public struct RegexMatchSetUpdate: Swift.Equatable {
        /// Specifies whether to insert or delete a [RegexMatchTuple].
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// Information about the part of a web request that you want AWS WAF to inspect and the identifier of the regular expression (regex) pattern that you want AWS WAF to search for. If you specify DELETE for the value of Action, the RegexMatchTuple values must exactly match the values in the RegexMatchTuple that you want to delete from the RegexMatchSet.
        /// This member is required.
        public var regexMatchTuple: WAFClientTypes.RegexMatchTuple?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            regexMatchTuple: WAFClientTypes.RegexMatchTuple? = nil
        )
        {
            self.action = action
            self.regexMatchTuple = regexMatchTuple
        }
    }

}

extension WAFClientTypes.RegexMatchTuple: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case regexPatternSetId = "RegexPatternSetId"
        case textTransformation = "TextTransformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
        if let textTransformation = self.textTransformation {
            try encodeContainer.encode(textTransformation.rawValue, forKey: .textTransformation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TextTransformation.self, forKey: .textTransformation)
        textTransformation = textTransformationDecoded
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The regular expression pattern that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings. Each RegexMatchTuple object contains:
    ///
    /// * The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the User-Agent header.
    ///
    /// * The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see [RegexPatternSet].
    ///
    /// * Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.
    public struct RegexMatchTuple: Swift.Equatable {
        /// Specifies where in a web request to look for the RegexPatternSet.
        /// This member is required.
        public var fieldToMatch: WAFClientTypes.FieldToMatch?
        /// The RegexPatternSetId for a RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet (see [GetRegexPatternSet]), update a RegexPatternSet (see [UpdateRegexPatternSet]), insert a RegexPatternSet into a RegexMatchSet or delete one from a RegexMatchSet (see [UpdateRegexMatchSet]), and delete an RegexPatternSet from AWS WAF (see [DeleteRegexPatternSet]). RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
        /// This member is required.
        public var regexPatternSetId: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on RegexPatternSet before inspecting a request for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFClientTypes.TextTransformation?

        public init (
            fieldToMatch: WAFClientTypes.FieldToMatch? = nil,
            regexPatternSetId: Swift.String? = nil,
            textTransformation: WAFClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.regexPatternSetId = regexPatternSetId
            self.textTransformation = textTransformation
        }
    }

}

extension WAFClientTypes.RegexPatternSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case regexPatternSetId = "RegexPatternSetId"
        case regexPatternStrings = "RegexPatternStrings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
        if let regexPatternStrings = regexPatternStrings {
            var regexPatternStringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regexPatternStrings)
            for regexpatternstring0 in regexPatternStrings {
                try regexPatternStringsContainer.encode(regexpatternstring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regexPatternStringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regexPatternStrings)
        var regexPatternStringsDecoded0:[Swift.String]? = nil
        if let regexPatternStringsContainer = regexPatternStringsContainer {
            regexPatternStringsDecoded0 = [Swift.String]()
            for string0 in regexPatternStringsContainer {
                if let string0 = string0 {
                    regexPatternStringsDecoded0?.append(string0)
                }
            }
        }
        regexPatternStrings = regexPatternStringsDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The RegexPatternSet specifies the regular expression (regex) pattern that you want AWS WAF to search for, such as B[a@]dB[o0]t. You can then configure AWS WAF to reject those requests.
    public struct RegexPatternSet: Swift.Equatable {
        /// A friendly name or description of the [RegexPatternSet]. You can't change Name after you create a RegexPatternSet.
        public var name: Swift.String?
        /// The identifier for the RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet, update a RegexPatternSet, remove a RegexPatternSet from a RegexMatchSet, and delete a RegexPatternSet from AWS WAF. RegexMatchSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
        /// This member is required.
        public var regexPatternSetId: Swift.String?
        /// Specifies the regular expression (regex) patterns that you want AWS WAF to search for, such as B[a@]dB[o0]t.
        /// This member is required.
        public var regexPatternStrings: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            regexPatternSetId: Swift.String? = nil,
            regexPatternStrings: [Swift.String]? = nil
        )
        {
            self.name = name
            self.regexPatternSetId = regexPatternSetId
            self.regexPatternStrings = regexPatternStrings
        }
    }

}

extension WAFClientTypes.RegexPatternSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case regexPatternSetId = "RegexPatternSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Returned by [ListRegexPatternSets]. Each RegexPatternSetSummary object includes the Name and RegexPatternSetId for one [RegexPatternSet].
    public struct RegexPatternSetSummary: Swift.Equatable {
        /// A friendly name or description of the [RegexPatternSet]. You can't change Name after you create a RegexPatternSet.
        /// This member is required.
        public var name: Swift.String?
        /// The RegexPatternSetId for a RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet, update a RegexPatternSet, remove a RegexPatternSet from a RegexMatchSet, and delete a RegexPatternSet from AWS WAF. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
        /// This member is required.
        public var regexPatternSetId: Swift.String?

        public init (
            name: Swift.String? = nil,
            regexPatternSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.regexPatternSetId = regexPatternSetId
        }
    }

}

extension WAFClientTypes.RegexPatternSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case regexPatternString = "RegexPatternString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let regexPatternString = self.regexPatternString {
            try encodeContainer.encode(regexPatternString, forKey: .regexPatternString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let regexPatternStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternString)
        regexPatternString = regexPatternStringDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In an [UpdateRegexPatternSet] request, RegexPatternSetUpdate specifies whether to insert or delete a RegexPatternString and includes the settings for the RegexPatternString.
    public struct RegexPatternSetUpdate: Swift.Equatable {
        /// Specifies whether to insert or delete a RegexPatternString.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// Specifies the regular expression (regex) pattern that you want AWS WAF to search for, such as B[a@]dB[o0]t.
        /// This member is required.
        public var regexPatternString: Swift.String?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            regexPatternString: Swift.String? = nil
        )
        {
            self.action = action
            self.regexPatternString = regexPatternString
        }
    }

}

extension WAFClientTypes.Rule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case name = "Name"
        case predicates = "Predicates"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicates = predicates {
            var predicatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .predicates)
            for predicate0 in predicates {
                try predicatesContainer.encode(predicate0)
            }
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let predicatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.Predicate?].self, forKey: .predicates)
        var predicatesDecoded0:[WAFClientTypes.Predicate]? = nil
        if let predicatesContainer = predicatesContainer {
            predicatesDecoded0 = [WAFClientTypes.Predicate]()
            for structure0 in predicatesContainer {
                if let structure0 = structure0 {
                    predicatesDecoded0?.append(structure0)
                }
            }
        }
        predicates = predicatesDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A combination of [ByteMatchSet], [IPSet], and/or [SqlInjectionMatchSet] objects that identify the web requests that you want to allow, block, or count. For example, you might create a Rule that includes the following predicates:
    ///
    /// * An IPSet that causes AWS WAF to search for web requests that originate from the IP address 192.0.2.44
    ///
    /// * A ByteMatchSet that causes AWS WAF to search for web requests for which the value of the User-Agent header is BadBot.
    ///
    ///
    /// To match the settings in this Rule, a request must originate from 192.0.2.44 AND include a User-Agent header for which the value is BadBot.
    public struct Rule: Swift.Equatable {
        /// A friendly name or description for the metrics for this Rule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the Rule.
        public var metricName: Swift.String?
        /// The friendly name or description for the Rule. You can't change the name of a Rule after you create it.
        public var name: Swift.String?
        /// The Predicates object contains one Predicate element for each [ByteMatchSet], [IPSet], or [SqlInjectionMatchSet] object that you want to include in a Rule.
        /// This member is required.
        public var predicates: [WAFClientTypes.Predicate]?
        /// A unique identifier for a Rule. You use RuleId to get more information about a Rule (see [GetRule]), update a Rule (see [UpdateRule]), insert a Rule into a WebACL or delete a one from a WebACL (see [UpdateWebACL]), or delete a Rule from AWS WAF (see [DeleteRule]). RuleId is returned by [CreateRule] and by [ListRules].
        /// This member is required.
        public var ruleId: Swift.String?

        public init (
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            predicates: [WAFClientTypes.Predicate]? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.name = name
            self.predicates = predicates
            self.ruleId = ruleId
        }
    }

}

extension WAFClientTypes.RuleGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case name = "Name"
        case ruleGroupId = "RuleGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A collection of predefined rules that you can add to a web ACL. Rule groups are subject to the following limits:
    ///
    /// * Three rule groups per account. You can request an increase to this limit by contacting customer support.
    ///
    /// * One rule group per web ACL.
    ///
    /// * Ten rules per rule group.
    public struct RuleGroup: Swift.Equatable {
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        public var metricName: Swift.String?
        /// The friendly name or description for the RuleGroup. You can't change the name of a RuleGroup after you create it.
        public var name: Swift.String?
        /// A unique identifier for a RuleGroup. You use RuleGroupId to get more information about a RuleGroup (see [GetRuleGroup]), update a RuleGroup (see [UpdateRuleGroup]), insert a RuleGroup into a WebACL or delete a one from a WebACL (see [UpdateWebACL]), or delete a RuleGroup from AWS WAF (see [DeleteRuleGroup]). RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
        /// This member is required.
        public var ruleGroupId: Swift.String?

        public init (
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.name = name
            self.ruleGroupId = ruleGroupId
        }
    }

}

extension WAFClientTypes.RuleGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case ruleGroupId = "RuleGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the friendly name or description of the RuleGroup.
    public struct RuleGroupSummary: Swift.Equatable {
        /// A friendly name or description of the [RuleGroup]. You can't change the name of a RuleGroup after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a RuleGroup. You use RuleGroupId to get more information about a RuleGroup (see [GetRuleGroup]), update a RuleGroup (see [UpdateRuleGroup]), insert a RuleGroup into a WebACL or delete one from a WebACL (see [UpdateWebACL]), or delete a RuleGroup from AWS WAF (see [DeleteRuleGroup]). RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
        /// This member is required.
        public var ruleGroupId: Swift.String?

        public init (
            name: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil
        )
        {
            self.name = name
            self.ruleGroupId = ruleGroupId
        }
    }

}

extension WAFClientTypes.RuleGroupUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case activatedRule = "ActivatedRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let activatedRule = self.activatedRule {
            try encodeContainer.encode(activatedRule, forKey: .activatedRule)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let activatedRuleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ActivatedRule.self, forKey: .activatedRule)
        activatedRule = activatedRuleDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies an ActivatedRule and indicates whether you want to add it to a RuleGroup or delete it from a RuleGroup.
    public struct RuleGroupUpdate: Swift.Equatable {
        /// Specify INSERT to add an ActivatedRule to a RuleGroup. Use DELETE to remove an ActivatedRule from a RuleGroup.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// The ActivatedRule object specifies a Rule that you want to insert or delete, the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule (ALLOW, BLOCK, or COUNT).
        /// This member is required.
        public var activatedRule: WAFClientTypes.ActivatedRule?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            activatedRule: WAFClientTypes.ActivatedRule? = nil
        )
        {
            self.action = action
            self.activatedRule = activatedRule
        }
    }

}

extension WAFClientTypes.RuleSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the friendly name or description of the Rule.
    public struct RuleSummary: Swift.Equatable {
        /// A friendly name or description of the [Rule]. You can't change the name of a Rule after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a Rule. You use RuleId to get more information about a Rule (see [GetRule]), update a Rule (see [UpdateRule]), insert a Rule into a WebACL or delete one from a WebACL (see [UpdateWebACL]), or delete a Rule from AWS WAF (see [DeleteRule]). RuleId is returned by [CreateRule] and by [ListRules].
        /// This member is required.
        public var ruleId: Swift.String?

        public init (
            name: Swift.String? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.name = name
            self.ruleId = ruleId
        }
    }

}

extension WAFClientTypes.RuleUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case predicate = "Predicate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let predicate = self.predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let predicateDecoded = try containerValues.decodeIfPresent(WAFClientTypes.Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies a Predicate (such as an IPSet) and indicates whether you want to add it to a Rule or delete it from a Rule.
    public struct RuleUpdate: Swift.Equatable {
        /// Specify INSERT to add a Predicate to a Rule. Use DELETE to remove a Predicate from a Rule.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// The ID of the Predicate (such as an IPSet) that you want to add to a Rule.
        /// This member is required.
        public var predicate: WAFClientTypes.Predicate?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            predicate: WAFClientTypes.Predicate? = nil
        )
        {
            self.action = action
            self.predicate = predicate
        }
    }

}

extension WAFClientTypes.SampledHTTPRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case request = "Request"
        case ruleWithinRuleGroup = "RuleWithinRuleGroup"
        case timestamp = "Timestamp"
        case weight = "Weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let request = self.request {
            try encodeContainer.encode(request, forKey: .request)
        }
        if let ruleWithinRuleGroup = self.ruleWithinRuleGroup {
            try encodeContainer.encode(ruleWithinRuleGroup, forKey: .ruleWithinRuleGroup)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestDecoded = try containerValues.decodeIfPresent(WAFClientTypes.HTTPRequest.self, forKey: .request)
        request = requestDecoded
        let weightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weight) ?? 0
        weight = weightDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let ruleWithinRuleGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleWithinRuleGroup)
        ruleWithinRuleGroup = ruleWithinRuleGroupDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The response from a [GetSampledRequests] request includes a SampledHTTPRequests complex type that appears as SampledRequests in the response syntax. SampledHTTPRequests contains one SampledHTTPRequest object for each web request that is returned by GetSampledRequests.
    public struct SampledHTTPRequest: Swift.Equatable {
        /// The action for the Rule that the request matched: ALLOW, BLOCK, or COUNT.
        public var action: Swift.String?
        /// A complex type that contains detailed information about the request.
        /// This member is required.
        public var request: WAFClientTypes.HTTPRequest?
        /// This value is returned if the GetSampledRequests request specifies the ID of a RuleGroup rather than the ID of an individual rule. RuleWithinRuleGroup is the rule within the specified RuleGroup that matched the request listed in the response.
        public var ruleWithinRuleGroup: Swift.String?
        /// The time at which AWS WAF received the request from your AWS resource, in Unix time format (in seconds).
        public var timestamp: ClientRuntime.Date?
        /// A value that indicates how one result in the response relates proportionally to other results in the response. A result that has a weight of 2 represents roughly twice as many CloudFront web requests as a result that has a weight of 1.
        /// This member is required.
        public var weight: Swift.Int

        public init (
            action: Swift.String? = nil,
            request: WAFClientTypes.HTTPRequest? = nil,
            ruleWithinRuleGroup: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            weight: Swift.Int = 0
        )
        {
            self.action = action
            self.request = request
            self.ruleWithinRuleGroup = ruleWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }
    }

}

extension WAFClientTypes.SizeConstraint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case fieldToMatch = "FieldToMatch"
        case size = "Size"
        case textTransformation = "TextTransformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let textTransformation = self.textTransformation {
            try encodeContainer.encode(textTransformation.rawValue, forKey: .textTransformation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TextTransformation.self, forKey: .textTransformation)
        textTransformation = textTransformationDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size) ?? 0
        size = sizeDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies a constraint on the size of a part of the web request. AWS WAF uses the Size, ComparisonOperator, and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match.
    public struct SizeConstraint: Swift.Equatable {
        /// The type of comparison you want AWS WAF to perform. AWS WAF uses this in combination with the provided Size and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match. EQ: Used to test if the Size is equal to the size of the FieldToMatch NE: Used to test if the Size is not equal to the size of the FieldToMatch LE: Used to test if the Size is less than or equal to the size of the FieldToMatch LT: Used to test if the Size is strictly less than the size of the FieldToMatch GE: Used to test if the Size is greater than or equal to the size of the FieldToMatch GT: Used to test if the Size is strictly greater than the size of the FieldToMatch
        /// This member is required.
        public var comparisonOperator: WAFClientTypes.ComparisonOperator?
        /// Specifies where in a web request to look for the size constraint.
        /// This member is required.
        public var fieldToMatch: WAFClientTypes.FieldToMatch?
        /// The size in bytes that you want AWS WAF to compare against the size of the specified FieldToMatch. AWS WAF uses this in combination with ComparisonOperator and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match. Valid values for size are 0 - 21474836480 bytes (0 - 20 GB). If you specify URI for the value of Type, the / in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
        /// This member is required.
        public var size: Swift.Int
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. Note that if you choose BODY for the value of Type, you must choose NONE for TextTransformation because CloudFront forwards only the first 8192 bytes for inspection. NONE Specify NONE if you don't want to perform any text transformations. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value.
        /// This member is required.
        public var textTransformation: WAFClientTypes.TextTransformation?

        public init (
            comparisonOperator: WAFClientTypes.ComparisonOperator? = nil,
            fieldToMatch: WAFClientTypes.FieldToMatch? = nil,
            size: Swift.Int = 0,
            textTransformation: WAFClientTypes.TextTransformation? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformation = textTransformation
        }
    }

}

extension WAFClientTypes.SizeConstraintSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case sizeConstraintSetId = "SizeConstraintSetId"
        case sizeConstraints = "SizeConstraints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sizeConstraintSetId = self.sizeConstraintSetId {
            try encodeContainer.encode(sizeConstraintSetId, forKey: .sizeConstraintSetId)
        }
        if let sizeConstraints = sizeConstraints {
            var sizeConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sizeConstraints)
            for sizeconstraint0 in sizeConstraints {
                try sizeConstraintsContainer.encode(sizeconstraint0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizeConstraintSetId)
        sizeConstraintSetId = sizeConstraintSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let sizeConstraintsContainer = try containerValues.decodeIfPresent([WAFClientTypes.SizeConstraint?].self, forKey: .sizeConstraints)
        var sizeConstraintsDecoded0:[WAFClientTypes.SizeConstraint]? = nil
        if let sizeConstraintsContainer = sizeConstraintsContainer {
            sizeConstraintsDecoded0 = [WAFClientTypes.SizeConstraint]()
            for structure0 in sizeConstraintsContainer {
                if let structure0 = structure0 {
                    sizeConstraintsDecoded0?.append(structure0)
                }
            }
        }
        sizeConstraints = sizeConstraintsDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A complex type that contains SizeConstraint objects, which specify the parts of web requests that you want AWS WAF to inspect the size of. If a SizeConstraintSet contains more than one SizeConstraint object, a request only needs to match one constraint to be considered a match.
    public struct SizeConstraintSet: Swift.Equatable {
        /// The name, if any, of the SizeConstraintSet.
        public var name: Swift.String?
        /// A unique identifier for a SizeConstraintSet. You use SizeConstraintSetId to get information about a SizeConstraintSet (see [GetSizeConstraintSet]), update a SizeConstraintSet (see [UpdateSizeConstraintSet]), insert a SizeConstraintSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SizeConstraintSet from AWS WAF (see [DeleteSizeConstraintSet]). SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
        /// This member is required.
        public var sizeConstraintSetId: Swift.String?
        /// Specifies the parts of web requests that you want to inspect the size of.
        /// This member is required.
        public var sizeConstraints: [WAFClientTypes.SizeConstraint]?

        public init (
            name: Swift.String? = nil,
            sizeConstraintSetId: Swift.String? = nil,
            sizeConstraints: [WAFClientTypes.SizeConstraint]? = nil
        )
        {
            self.name = name
            self.sizeConstraintSetId = sizeConstraintSetId
            self.sizeConstraints = sizeConstraints
        }
    }

}

extension WAFClientTypes.SizeConstraintSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case sizeConstraintSetId = "SizeConstraintSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sizeConstraintSetId = self.sizeConstraintSetId {
            try encodeContainer.encode(sizeConstraintSetId, forKey: .sizeConstraintSetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizeConstraintSetId)
        sizeConstraintSetId = sizeConstraintSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Id and Name of a SizeConstraintSet.
    public struct SizeConstraintSetSummary: Swift.Equatable {
        /// The name of the SizeConstraintSet, if any.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a SizeConstraintSet. You use SizeConstraintSetId to get information about a SizeConstraintSet (see [GetSizeConstraintSet]), update a SizeConstraintSet (see [UpdateSizeConstraintSet]), insert a SizeConstraintSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SizeConstraintSet from AWS WAF (see [DeleteSizeConstraintSet]). SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
        /// This member is required.
        public var sizeConstraintSetId: Swift.String?

        public init (
            name: Swift.String? = nil,
            sizeConstraintSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.sizeConstraintSetId = sizeConstraintSetId
        }
    }

}

extension WAFClientTypes.SizeConstraintSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case sizeConstraint = "SizeConstraint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let sizeConstraint = self.sizeConstraint {
            try encodeContainer.encode(sizeConstraint, forKey: .sizeConstraint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let sizeConstraintDecoded = try containerValues.decodeIfPresent(WAFClientTypes.SizeConstraint.self, forKey: .sizeConstraint)
        sizeConstraint = sizeConstraintDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want to inspect the size of and indicates whether you want to add the specification to a [SizeConstraintSet] or delete it from a SizeConstraintSet.
    public struct SizeConstraintSetUpdate: Swift.Equatable {
        /// Specify INSERT to add a [SizeConstraintSetUpdate] to a [SizeConstraintSet]. Use DELETE to remove a SizeConstraintSetUpdate from a SizeConstraintSet.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// Specifies a constraint on the size of a part of the web request. AWS WAF uses the Size, ComparisonOperator, and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match.
        /// This member is required.
        public var sizeConstraint: WAFClientTypes.SizeConstraint?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            sizeConstraint: WAFClientTypes.SizeConstraint? = nil
        )
        {
            self.action = action
            self.sizeConstraint = sizeConstraint
        }
    }

}

extension WAFClientTypes.SqlInjectionMatchSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
        case sqlInjectionMatchTuples = "SqlInjectionMatchTuples"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sqlInjectionMatchSetId = self.sqlInjectionMatchSetId {
            try encodeContainer.encode(sqlInjectionMatchSetId, forKey: .sqlInjectionMatchSetId)
        }
        if let sqlInjectionMatchTuples = sqlInjectionMatchTuples {
            var sqlInjectionMatchTuplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sqlInjectionMatchTuples)
            for sqlinjectionmatchtuple0 in sqlInjectionMatchTuples {
                try sqlInjectionMatchTuplesContainer.encode(sqlinjectionmatchtuple0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqlInjectionMatchSetId)
        sqlInjectionMatchSetId = sqlInjectionMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let sqlInjectionMatchTuplesContainer = try containerValues.decodeIfPresent([WAFClientTypes.SqlInjectionMatchTuple?].self, forKey: .sqlInjectionMatchTuples)
        var sqlInjectionMatchTuplesDecoded0:[WAFClientTypes.SqlInjectionMatchTuple]? = nil
        if let sqlInjectionMatchTuplesContainer = sqlInjectionMatchTuplesContainer {
            sqlInjectionMatchTuplesDecoded0 = [WAFClientTypes.SqlInjectionMatchTuple]()
            for structure0 in sqlInjectionMatchTuplesContainer {
                if let structure0 = structure0 {
                    sqlInjectionMatchTuplesDecoded0?.append(structure0)
                }
            }
        }
        sqlInjectionMatchTuples = sqlInjectionMatchTuplesDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A complex type that contains SqlInjectionMatchTuple objects, which specify the parts of web requests that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header. If a SqlInjectionMatchSet contains more than one SqlInjectionMatchTuple object, a request needs to include snippets of SQL code in only one of the specified parts of the request to be considered a match.
    public struct SqlInjectionMatchSet: Swift.Equatable {
        /// The name, if any, of the SqlInjectionMatchSet.
        public var name: Swift.String?
        /// A unique identifier for a SqlInjectionMatchSet. You use SqlInjectionMatchSetId to get information about a SqlInjectionMatchSet (see [GetSqlInjectionMatchSet]), update a SqlInjectionMatchSet (see [UpdateSqlInjectionMatchSet]), insert a SqlInjectionMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SqlInjectionMatchSet from AWS WAF (see [DeleteSqlInjectionMatchSet]). SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
        /// This member is required.
        public var sqlInjectionMatchSetId: Swift.String?
        /// Specifies the parts of web requests that you want to inspect for snippets of malicious SQL code.
        /// This member is required.
        public var sqlInjectionMatchTuples: [WAFClientTypes.SqlInjectionMatchTuple]?

        public init (
            name: Swift.String? = nil,
            sqlInjectionMatchSetId: Swift.String? = nil,
            sqlInjectionMatchTuples: [WAFClientTypes.SqlInjectionMatchTuple]? = nil
        )
        {
            self.name = name
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
            self.sqlInjectionMatchTuples = sqlInjectionMatchTuples
        }
    }

}

extension WAFClientTypes.SqlInjectionMatchSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sqlInjectionMatchSetId = self.sqlInjectionMatchSetId {
            try encodeContainer.encode(sqlInjectionMatchSetId, forKey: .sqlInjectionMatchSetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqlInjectionMatchSetId)
        sqlInjectionMatchSetId = sqlInjectionMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Id and Name of a SqlInjectionMatchSet.
    public struct SqlInjectionMatchSetSummary: Swift.Equatable {
        /// The name of the SqlInjectionMatchSet, if any, specified by Id.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a SqlInjectionMatchSet. You use SqlInjectionMatchSetId to get information about a SqlInjectionMatchSet (see [GetSqlInjectionMatchSet]), update a SqlInjectionMatchSet (see [UpdateSqlInjectionMatchSet]), insert a SqlInjectionMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SqlInjectionMatchSet from AWS WAF (see [DeleteSqlInjectionMatchSet]). SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
        /// This member is required.
        public var sqlInjectionMatchSetId: Swift.String?

        public init (
            name: Swift.String? = nil,
            sqlInjectionMatchSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        }
    }

}

extension WAFClientTypes.SqlInjectionMatchSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case sqlInjectionMatchTuple = "SqlInjectionMatchTuple"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let sqlInjectionMatchTuple = self.sqlInjectionMatchTuple {
            try encodeContainer.encode(sqlInjectionMatchTuple, forKey: .sqlInjectionMatchTuple)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let sqlInjectionMatchTupleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.SqlInjectionMatchTuple.self, forKey: .sqlInjectionMatchTuple)
        sqlInjectionMatchTuple = sqlInjectionMatchTupleDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want to inspect for snippets of malicious SQL code and indicates whether you want to add the specification to a [SqlInjectionMatchSet] or delete it from a SqlInjectionMatchSet.
    public struct SqlInjectionMatchSetUpdate: Swift.Equatable {
        /// Specify INSERT to add a [SqlInjectionMatchSetUpdate] to a [SqlInjectionMatchSet]. Use DELETE to remove a SqlInjectionMatchSetUpdate from a SqlInjectionMatchSet.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// Specifies the part of a web request that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
        /// This member is required.
        public var sqlInjectionMatchTuple: WAFClientTypes.SqlInjectionMatchTuple?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            sqlInjectionMatchTuple: WAFClientTypes.SqlInjectionMatchTuple? = nil
        )
        {
            self.action = action
            self.sqlInjectionMatchTuple = sqlInjectionMatchTuple
        }
    }

}

extension WAFClientTypes.SqlInjectionMatchTuple: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case textTransformation = "TextTransformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformation = self.textTransformation {
            try encodeContainer.encode(textTransformation.rawValue, forKey: .textTransformation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TextTransformation.self, forKey: .textTransformation)
        textTransformation = textTransformationDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
    public struct SqlInjectionMatchTuple: Swift.Equatable {
        /// Specifies where in a web request to look for snippets of malicious SQL code.
        /// This member is required.
        public var fieldToMatch: WAFClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFClientTypes.TextTransformation?

        public init (
            fieldToMatch: WAFClientTypes.FieldToMatch? = nil,
            textTransformation: WAFClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformation = textTransformation
        }
    }

}

extension WAFClientTypes.SubscribedRuleGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case name = "Name"
        case ruleGroupId = "RuleGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A summary of the rule groups you are subscribed to.
    public struct SubscribedRuleGroupSummary: Swift.Equatable {
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        /// This member is required.
        public var metricName: Swift.String?
        /// A friendly name or description of the RuleGroup. You can't change the name of a RuleGroup after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a RuleGroup.
        /// This member is required.
        public var ruleGroupId: Swift.String?

        public init (
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.name = name
            self.ruleGroupId = ruleGroupId
        }
    }

}

extension WAFClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource. Tagging is only available through the API, SDKs, and CLI. You can't manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules.
    public struct Tag: Swift.Equatable {
        ///
        /// This member is required.
        public var key: Swift.String?
        ///
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension WAFClientTypes.TagInfoForResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagListContainer = try containerValues.decodeIfPresent([WAFClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[WAFClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [WAFClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Information for a tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource. Tagging is only available through the API, SDKs, and CLI. You can't manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules.
    public struct TagInfoForResource: Swift.Equatable {
        ///
        public var resourceARN: Swift.String?
        ///
        public var tagList: [WAFClientTypes.Tag]?

        public init (
            resourceARN: Swift.String? = nil,
            tagList: [WAFClientTypes.Tag]? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    ///
    /// This member is required.
    public var resourceARN: Swift.String?
    ///
    /// This member is required.
    public var tags: [WAFClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [WAFClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tags: [WAFClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension WAFClientTypes {
    public enum TextTransformation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cmdLine
        case compressWhiteSpace
        case htmlEntityDecode
        case lowercase
        case `none`
        case urlDecode
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTransformation] {
            return [
                .cmdLine,
                .compressWhiteSpace,
                .htmlEntityDecode,
                .lowercase,
                .none,
                .urlDecode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cmdLine: return "CMD_LINE"
            case .compressWhiteSpace: return "COMPRESS_WHITE_SPACE"
            case .htmlEntityDecode: return "HTML_ENTITY_DECODE"
            case .lowercase: return "LOWERCASE"
            case .none: return "NONE"
            case .urlDecode: return "URL_DECODE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TextTransformation(rawValue: rawValue) ?? TextTransformation.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.TimeWindow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In a [GetSampledRequests] request, the StartTime and EndTime objects specify the time range for which you want AWS WAF to return a sample of web requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". In a [GetSampledRequests] response, the StartTime and EndTime objects specify the time range for which AWS WAF actually returned a sample of web requests. AWS WAF gets the specified number of requests from among the first 5,000 requests that your AWS resource receives during the specified time period. If your resource receives more than 5,000 requests during that period, AWS WAF stops sampling after the 5,000th request. In that case, EndTime is the time that AWS WAF received the 5,000th request.
    public struct TimeWindow: Swift.Equatable {
        /// The end of the time range from which you want GetSampledRequests to return a sample of the requests that your AWS resource received. You must specify the date and time in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var endTime: ClientRuntime.Date?
        /// The beginning of the time range from which you want GetSampledRequests to return a sample of the requests that your AWS resource received. You must specify the date and time in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    ///
    /// This member is required.
    public var resourceARN: Swift.String?
    ///
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFBadRequestException" : self = .wAFBadRequestException(try WAFBadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFBadRequestException(WAFBadRequestException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateByteMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case changeToken = "ChangeToken"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteMatchSetId = self.byteMatchSetId {
            try encodeContainer.encode(byteMatchSetId, forKey: .byteMatchSetId)
        }
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for bytematchsetupdate0 in updates {
                try updatesContainer.encode(bytematchsetupdate0)
            }
        }
    }
}

extension UpdateByteMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateByteMatchSetInput: Swift.Equatable {
    /// The ByteMatchSetId of the [ByteMatchSet] that you want to update. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
    /// This member is required.
    public var byteMatchSetId: Swift.String?
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// An array of ByteMatchSetUpdate objects that you want to insert into or delete from a [ByteMatchSet]. For more information, see the applicable data types:
    ///
    /// * [ByteMatchSetUpdate]: Contains Action and ByteMatchTuple
    ///
    /// * [ByteMatchTuple]: Contains FieldToMatch, PositionalConstraint, TargetString, and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFClientTypes.ByteMatchSetUpdate]?

    public init (
        byteMatchSetId: Swift.String? = nil,
        changeToken: Swift.String? = nil,
        updates: [WAFClientTypes.ByteMatchSetUpdate]? = nil
    )
    {
        self.byteMatchSetId = byteMatchSetId
        self.changeToken = changeToken
        self.updates = updates
    }
}

struct UpdateByteMatchSetInputBody: Swift.Equatable {
    let byteMatchSetId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.ByteMatchSetUpdate]?
}

extension UpdateByteMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case changeToken = "ChangeToken"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .byteMatchSetId)
        byteMatchSetId = byteMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.ByteMatchSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.ByteMatchSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.ByteMatchSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateByteMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateByteMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateByteMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateByteMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateByteMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateByteMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateByteMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateByteMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateByteMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateGeoMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case geoMatchSetId = "GeoMatchSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let geoMatchSetId = self.geoMatchSetId {
            try encodeContainer.encode(geoMatchSetId, forKey: .geoMatchSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for geomatchsetupdate0 in updates {
                try updatesContainer.encode(geomatchsetupdate0)
            }
        }
    }
}

extension UpdateGeoMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGeoMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The GeoMatchSetId of the [GeoMatchSet] that you want to update. GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
    /// This member is required.
    public var geoMatchSetId: Swift.String?
    /// An array of GeoMatchSetUpdate objects that you want to insert into or delete from an [GeoMatchSet]. For more information, see the applicable data types:
    ///
    /// * [GeoMatchSetUpdate]: Contains Action and GeoMatchConstraint
    ///
    /// * [GeoMatchConstraint]: Contains Type and Value You can have only one Type and Value per GeoMatchConstraint. To add multiple countries, include multiple GeoMatchSetUpdate objects in your request.
    /// This member is required.
    public var updates: [WAFClientTypes.GeoMatchSetUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        geoMatchSetId: Swift.String? = nil,
        updates: [WAFClientTypes.GeoMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSetId = geoMatchSetId
        self.updates = updates
    }
}

struct UpdateGeoMatchSetInputBody: Swift.Equatable {
    let geoMatchSetId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.GeoMatchSetUpdate]?
}

extension UpdateGeoMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case geoMatchSetId = "GeoMatchSetId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .geoMatchSetId)
        geoMatchSetId = geoMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.GeoMatchSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.GeoMatchSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.GeoMatchSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateGeoMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGeoMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGeoMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGeoMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGeoMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateGeoMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateGeoMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateGeoMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateGeoMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ipSetId = "IPSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ipSetId = self.ipSetId {
            try encodeContainer.encode(ipSetId, forKey: .ipSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for ipsetupdate0 in updates {
                try updatesContainer.encode(ipsetupdate0)
            }
        }
    }
}

extension UpdateIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateIPSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The IPSetId of the [IPSet] that you want to update. IPSetId is returned by [CreateIPSet] and by [ListIPSets].
    /// This member is required.
    public var ipSetId: Swift.String?
    /// An array of IPSetUpdate objects that you want to insert into or delete from an [IPSet]. For more information, see the applicable data types:
    ///
    /// * [IPSetUpdate]: Contains Action and IPSetDescriptor
    ///
    /// * [IPSetDescriptor]: Contains Type and Value
    ///
    ///
    /// You can insert a maximum of 1000 addresses in a single request.
    /// This member is required.
    public var updates: [WAFClientTypes.IPSetUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        ipSetId: Swift.String? = nil,
        updates: [WAFClientTypes.IPSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.ipSetId = ipSetId
        self.updates = updates
    }
}

struct UpdateIPSetInputBody: Swift.Equatable {
    let ipSetId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.IPSetUpdate]?
}

extension UpdateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ipSetId = "IPSetId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipSetId)
        ipSetId = ipSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.IPSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.IPSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.IPSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateIPSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateIPSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateIPSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRateBasedRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case rateLimit = "RateLimit"
        case ruleId = "RuleId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if rateLimit != 0 {
            try encodeContainer.encode(rateLimit, forKey: .rateLimit)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for ruleupdate0 in updates {
                try updatesContainer.encode(ruleupdate0)
            }
        }
    }
}

extension UpdateRateBasedRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRateBasedRuleInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
    /// This member is required.
    public var rateLimit: Swift.Int
    /// The RuleId of the RateBasedRule that you want to update. RuleId is returned by CreateRateBasedRule and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?
    /// An array of RuleUpdate objects that you want to insert into or delete from a [RateBasedRule].
    /// This member is required.
    public var updates: [WAFClientTypes.RuleUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        rateLimit: Swift.Int = 0,
        ruleId: Swift.String? = nil,
        updates: [WAFClientTypes.RuleUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.rateLimit = rateLimit
        self.ruleId = ruleId
        self.updates = updates
    }
}

struct UpdateRateBasedRuleInputBody: Swift.Equatable {
    let ruleId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.RuleUpdate]?
    let rateLimit: Swift.Int
}

extension UpdateRateBasedRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case rateLimit = "RateLimit"
        case ruleId = "RuleId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RuleUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.RuleUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.RuleUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
        let rateLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rateLimit) ?? 0
        rateLimit = rateLimitDecoded
    }
}

extension UpdateRateBasedRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRateBasedRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRateBasedRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRateBasedRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRateBasedRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateRateBasedRuleOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateRateBasedRuleOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateRateBasedRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRegexMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexMatchSetId = "RegexMatchSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let regexMatchSetId = self.regexMatchSetId {
            try encodeContainer.encode(regexMatchSetId, forKey: .regexMatchSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for regexmatchsetupdate0 in updates {
                try updatesContainer.encode(regexmatchsetupdate0)
            }
        }
    }
}

extension UpdateRegexMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRegexMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexMatchSetId of the [RegexMatchSet] that you want to update. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
    /// This member is required.
    public var regexMatchSetId: Swift.String?
    /// An array of RegexMatchSetUpdate objects that you want to insert into or delete from a [RegexMatchSet]. For more information, see [RegexMatchTuple].
    /// This member is required.
    public var updates: [WAFClientTypes.RegexMatchSetUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        regexMatchSetId: Swift.String? = nil,
        updates: [WAFClientTypes.RegexMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.regexMatchSetId = regexMatchSetId
        self.updates = updates
    }
}

struct UpdateRegexMatchSetInputBody: Swift.Equatable {
    let regexMatchSetId: Swift.String?
    let updates: [WAFClientTypes.RegexMatchSetUpdate]?
    let changeToken: Swift.String?
}

extension UpdateRegexMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexMatchSetId = "RegexMatchSetId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RegexMatchSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.RegexMatchSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.RegexMatchSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRegexMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRegexMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDisallowedNameException" : self = .wAFDisallowedNameException(try WAFDisallowedNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRegexMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDisallowedNameException(WAFDisallowedNameException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRegexMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRegexMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateRegexMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateRegexMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateRegexMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateRegexMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexPatternSetId = "RegexPatternSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for regexpatternsetupdate0 in updates {
                try updatesContainer.encode(regexpatternsetupdate0)
            }
        }
    }
}

extension UpdateRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRegexPatternSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexPatternSetId of the [RegexPatternSet] that you want to update. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
    /// This member is required.
    public var regexPatternSetId: Swift.String?
    /// An array of RegexPatternSetUpdate objects that you want to insert into or delete from a [RegexPatternSet].
    /// This member is required.
    public var updates: [WAFClientTypes.RegexPatternSetUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        regexPatternSetId: Swift.String? = nil,
        updates: [WAFClientTypes.RegexPatternSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.regexPatternSetId = regexPatternSetId
        self.updates = updates
    }
}

struct UpdateRegexPatternSetInputBody: Swift.Equatable {
    let regexPatternSetId: Swift.String?
    let updates: [WAFClientTypes.RegexPatternSetUpdate]?
    let changeToken: Swift.String?
}

extension UpdateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case regexPatternSetId = "RegexPatternSetId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RegexPatternSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.RegexPatternSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.RegexPatternSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidRegexPatternException" : self = .wAFInvalidRegexPatternException(try WAFInvalidRegexPatternException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidRegexPatternException(WAFInvalidRegexPatternException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateRegexPatternSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateRegexPatternSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateRegexPatternSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleGroupId = "RuleGroupId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for rulegroupupdate0 in updates {
                try updatesContainer.encode(rulegroupupdate0)
            }
        }
    }
}

extension UpdateRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRuleGroupInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleGroupId of the [RuleGroup] that you want to update. RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
    /// This member is required.
    public var ruleGroupId: Swift.String?
    /// An array of RuleGroupUpdate objects that you want to insert into or delete from a [RuleGroup]. You can only insert REGULAR rules into a rule group. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
    /// This member is required.
    public var updates: [WAFClientTypes.RuleGroupUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        ruleGroupId: Swift.String? = nil,
        updates: [WAFClientTypes.RuleGroupUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleGroupId = ruleGroupId
        self.updates = updates
    }
}

struct UpdateRuleGroupInputBody: Swift.Equatable {
    let ruleGroupId: Swift.String?
    let updates: [WAFClientTypes.RuleGroupUpdate]?
    let changeToken: Swift.String?
}

extension UpdateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleGroupId = "RuleGroupId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RuleGroupUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.RuleGroupUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.RuleGroupUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateRuleGroupOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateRuleGroup request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateRuleGroupOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleId = "RuleId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for ruleupdate0 in updates {
                try updatesContainer.encode(ruleupdate0)
            }
        }
    }
}

extension UpdateRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRuleInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleId of the Rule that you want to update. RuleId is returned by CreateRule and by [ListRules].
    /// This member is required.
    public var ruleId: Swift.String?
    /// An array of RuleUpdate objects that you want to insert into or delete from a [Rule]. For more information, see the applicable data types:
    ///
    /// * [RuleUpdate]: Contains Action and Predicate
    ///
    /// * [Predicate]: Contains DataId, Negated, and Type
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFClientTypes.RuleUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        ruleId: Swift.String? = nil,
        updates: [WAFClientTypes.RuleUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleId = ruleId
        self.updates = updates
    }
}

struct UpdateRuleInputBody: Swift.Equatable {
    let ruleId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.RuleUpdate]?
}

extension UpdateRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case ruleId = "RuleId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.RuleUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.RuleUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.RuleUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRuleOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateRuleOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateRuleOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateSizeConstraintSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sizeConstraintSetId = "SizeConstraintSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let sizeConstraintSetId = self.sizeConstraintSetId {
            try encodeContainer.encode(sizeConstraintSetId, forKey: .sizeConstraintSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for sizeconstraintsetupdate0 in updates {
                try updatesContainer.encode(sizeconstraintsetupdate0)
            }
        }
    }
}

extension UpdateSizeConstraintSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSizeConstraintSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SizeConstraintSetId of the [SizeConstraintSet] that you want to update. SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
    /// This member is required.
    public var sizeConstraintSetId: Swift.String?
    /// An array of SizeConstraintSetUpdate objects that you want to insert into or delete from a [SizeConstraintSet]. For more information, see the applicable data types:
    ///
    /// * [SizeConstraintSetUpdate]: Contains Action and SizeConstraint
    ///
    /// * [SizeConstraint]: Contains FieldToMatch, TextTransformation, ComparisonOperator, and Size
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFClientTypes.SizeConstraintSetUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        sizeConstraintSetId: Swift.String? = nil,
        updates: [WAFClientTypes.SizeConstraintSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.sizeConstraintSetId = sizeConstraintSetId
        self.updates = updates
    }
}

struct UpdateSizeConstraintSetInputBody: Swift.Equatable {
    let sizeConstraintSetId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.SizeConstraintSetUpdate]?
}

extension UpdateSizeConstraintSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sizeConstraintSetId = "SizeConstraintSetId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeConstraintSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizeConstraintSetId)
        sizeConstraintSetId = sizeConstraintSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.SizeConstraintSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.SizeConstraintSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.SizeConstraintSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateSizeConstraintSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSizeConstraintSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSizeConstraintSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSizeConstraintSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateSizeConstraintSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateSizeConstraintSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateSizeConstraintSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateSizeConstraintSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateSizeConstraintSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateSqlInjectionMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let sqlInjectionMatchSetId = self.sqlInjectionMatchSetId {
            try encodeContainer.encode(sqlInjectionMatchSetId, forKey: .sqlInjectionMatchSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for sqlinjectionmatchsetupdate0 in updates {
                try updatesContainer.encode(sqlinjectionmatchsetupdate0)
            }
        }
    }
}

extension UpdateSqlInjectionMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to update a [SqlInjectionMatchSet].
public struct UpdateSqlInjectionMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SqlInjectionMatchSetId of the SqlInjectionMatchSet that you want to update. SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
    /// This member is required.
    public var sqlInjectionMatchSetId: Swift.String?
    /// An array of SqlInjectionMatchSetUpdate objects that you want to insert into or delete from a [SqlInjectionMatchSet]. For more information, see the applicable data types:
    ///
    /// * [SqlInjectionMatchSetUpdate]: Contains Action and SqlInjectionMatchTuple
    ///
    /// * [SqlInjectionMatchTuple]: Contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFClientTypes.SqlInjectionMatchSetUpdate]?

    public init (
        changeToken: Swift.String? = nil,
        sqlInjectionMatchSetId: Swift.String? = nil,
        updates: [WAFClientTypes.SqlInjectionMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        self.updates = updates
    }
}

struct UpdateSqlInjectionMatchSetInputBody: Swift.Equatable {
    let sqlInjectionMatchSetId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.SqlInjectionMatchSetUpdate]?
}

extension UpdateSqlInjectionMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
        case updates = "Updates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlInjectionMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqlInjectionMatchSetId)
        sqlInjectionMatchSetId = sqlInjectionMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.SqlInjectionMatchSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.SqlInjectionMatchSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.SqlInjectionMatchSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateSqlInjectionMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSqlInjectionMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSqlInjectionMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSqlInjectionMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateSqlInjectionMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

/// The response to an [UpdateSqlInjectionMatchSets] request.
public struct UpdateSqlInjectionMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateSqlInjectionMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateSqlInjectionMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateSqlInjectionMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case defaultAction = "DefaultAction"
        case updates = "Updates"
        case webACLId = "WebACLId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for webaclupdate0 in updates {
                try updatesContainer.encode(webaclupdate0)
            }
        }
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
    }
}

extension UpdateWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateWebACLInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A default action for the web ACL, either ALLOW or BLOCK. AWS WAF performs the default action if a request doesn't match the criteria in any of the rules in a web ACL.
    public var defaultAction: WAFClientTypes.WafAction?
    /// An array of updates to make to the [WebACL]. An array of WebACLUpdate objects that you want to insert into or delete from a [WebACL]. For more information, see the applicable data types:
    ///
    /// * [WebACLUpdate]: Contains Action and ActivatedRule
    ///
    /// * [ActivatedRule]: Contains Action, OverrideAction, Priority, RuleId, and Type. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case, you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
    ///
    /// * [WafAction]: Contains Type
    public var updates: [WAFClientTypes.WebACLUpdate]?
    /// The WebACLId of the [WebACL] that you want to update. WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
    /// This member is required.
    public var webACLId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        defaultAction: WAFClientTypes.WafAction? = nil,
        updates: [WAFClientTypes.WebACLUpdate]? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.defaultAction = defaultAction
        self.updates = updates
        self.webACLId = webACLId
    }
}

struct UpdateWebACLInputBody: Swift.Equatable {
    let webACLId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.WebACLUpdate]?
    let defaultAction: WAFClientTypes.WafAction?
}

extension UpdateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case defaultAction = "DefaultAction"
        case updates = "Updates"
        case webACLId = "WebACLId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.WebACLUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.WebACLUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.WebACLUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
        let defaultActionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
    }
}

extension UpdateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFReferencedItemException(WAFReferencedItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

public struct UpdateWebACLOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateWebACL request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateWebACLOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension UpdateXssMatchSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case updates = "Updates"
        case xssMatchSetId = "XssMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = self.changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for xssmatchsetupdate0 in updates {
                try updatesContainer.encode(xssmatchsetupdate0)
            }
        }
        if let xssMatchSetId = self.xssMatchSetId {
            try encodeContainer.encode(xssMatchSetId, forKey: .xssMatchSetId)
        }
    }
}

extension UpdateXssMatchSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to update an [XssMatchSet].
public struct UpdateXssMatchSetInput: Swift.Equatable {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// An array of XssMatchSetUpdate objects that you want to insert into or delete from an [XssMatchSet]. For more information, see the applicable data types:
    ///
    /// * [XssMatchSetUpdate]: Contains Action and XssMatchTuple
    ///
    /// * [XssMatchTuple]: Contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFClientTypes.XssMatchSetUpdate]?
    /// The XssMatchSetId of the XssMatchSet that you want to update. XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
    /// This member is required.
    public var xssMatchSetId: Swift.String?

    public init (
        changeToken: Swift.String? = nil,
        updates: [WAFClientTypes.XssMatchSetUpdate]? = nil,
        xssMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.updates = updates
        self.xssMatchSetId = xssMatchSetId
    }
}

struct UpdateXssMatchSetInputBody: Swift.Equatable {
    let xssMatchSetId: Swift.String?
    let changeToken: Swift.String?
    let updates: [WAFClientTypes.XssMatchSetUpdate]?
}

extension UpdateXssMatchSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
        case updates = "Updates"
        case xssMatchSetId = "XssMatchSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xssMatchSetId)
        xssMatchSetId = xssMatchSetIdDecoded
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
        let updatesContainer = try containerValues.decodeIfPresent([WAFClientTypes.XssMatchSetUpdate?].self, forKey: .updates)
        var updatesDecoded0:[WAFClientTypes.XssMatchSetUpdate]? = nil
        if let updatesContainer = updatesContainer {
            updatesDecoded0 = [WAFClientTypes.XssMatchSetUpdate]()
            for structure0 in updatesContainer {
                if let structure0 = structure0 {
                    updatesDecoded0?.append(structure0)
                }
            }
        }
        updates = updatesDecoded0
    }
}

extension UpdateXssMatchSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateXssMatchSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentContainerException" : self = .wAFNonexistentContainerException(try WAFNonexistentContainerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateXssMatchSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidAccountException(WAFInvalidAccountException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentContainerException(WAFNonexistentContainerException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFStaleDataException(WAFStaleDataException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateXssMatchSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateXssMatchSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeToken = output.changeToken
        } else {
            self.changeToken = nil
        }
    }
}

/// The response to an [UpdateXssMatchSets] request.
public struct UpdateXssMatchSetOutputResponse: Swift.Equatable {
    /// The ChangeToken that you used to submit the UpdateXssMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init (
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

struct UpdateXssMatchSetOutputResponseBody: Swift.Equatable {
    let changeToken: Swift.String?
}

extension UpdateXssMatchSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeToken = "ChangeToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeToken)
        changeToken = changeTokenDecoded
    }
}

extension WAFBadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFBadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct WAFBadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFBadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFBadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFDisallowedNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFDisallowedNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The name specified is invalid.
public struct WAFDisallowedNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFDisallowedNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFDisallowedNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFEntityMigrationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFEntityMigrationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.migrationErrorReason = output.migrationErrorReason
            self.migrationErrorType = output.migrationErrorType
        } else {
            self.migrationErrorReason = nil
            self.migrationErrorType = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed due to a problem with the migration. The failure cause is provided in the exception, in the MigrationErrorType:
///
/// * ENTITY_NOT_SUPPORTED - The web ACL has an unsupported entity but the IgnoreUnsupportedType is not set to true.
///
/// * ENTITY_NOT_FOUND - The web ACL doesn't exist.
///
/// * S3_BUCKET_NO_PERMISSION - You don't have permission to perform the PutObject action to the specified Amazon S3 bucket.
///
/// * S3_BUCKET_NOT_ACCESSIBLE - The bucket policy doesn't allow AWS WAF to perform the PutObject action in the bucket.
///
/// * S3_BUCKET_NOT_FOUND - The S3 bucket doesn't exist.
///
/// * S3_BUCKET_INVALID_REGION - The S3 bucket is not in the same Region as the web ACL.
///
/// * S3_INTERNAL_ERROR - AWS WAF failed to create the template in the S3 bucket for another reason.
public struct WAFEntityMigrationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var migrationErrorReason: Swift.String?
    public var migrationErrorType: WAFClientTypes.MigrationErrorType?

    public init (
        message: Swift.String? = nil,
        migrationErrorReason: Swift.String? = nil,
        migrationErrorType: WAFClientTypes.MigrationErrorType? = nil
    )
    {
        self.message = message
        self.migrationErrorReason = migrationErrorReason
        self.migrationErrorType = migrationErrorType
    }
}

struct WAFEntityMigrationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let migrationErrorType: WAFClientTypes.MigrationErrorType?
    let migrationErrorReason: Swift.String?
}

extension WAFEntityMigrationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case migrationErrorReason = "MigrationErrorReason"
        case migrationErrorType = "MigrationErrorType"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let migrationErrorTypeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.MigrationErrorType.self, forKey: .migrationErrorType)
        migrationErrorType = migrationErrorTypeDecoded
        let migrationErrorReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .migrationErrorReason)
        migrationErrorReason = migrationErrorReasonDecoded
    }
}

extension WAFInternalErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because of a system problem, even though the request was valid. Retry your request.
public struct WAFInternalErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInternalErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidAccountException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you tried to create, update, or delete an object by using an invalid account identifier.
public struct WAFInvalidAccountException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init () { }
}

extension WAFInvalidOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because there was nothing to do. For example:
///
/// * You tried to remove a Rule from a WebACL, but the Rule isn't in the specified WebACL.
///
/// * You tried to remove an IP address from an IPSet, but the IP address isn't in the specified IPSet.
///
/// * You tried to remove a ByteMatchTuple from a ByteMatchSet, but the ByteMatchTuple isn't in the specified WebACL.
///
/// * You tried to add a Rule to a WebACL, but the Rule already exists in the specified WebACL.
///
/// * You tried to add a ByteMatchTuple to a ByteMatchSet, but the ByteMatchTuple already exists in the specified WebACL.
public struct WAFInvalidOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.field = output.field
            self.parameter = output.parameter
            self.reason = output.reason
        } else {
            self.field = nil
            self.parameter = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because AWS WAF didn't recognize a parameter in the request. For example:
///
/// * You specified an invalid parameter name.
///
/// * You specified an invalid value.
///
/// * You tried to update an object (ByteMatchSet, IPSet, Rule, or WebACL) using an action other than INSERT or DELETE.
///
/// * You tried to create a WebACL with a DefaultActionType other than ALLOW, BLOCK, or COUNT.
///
/// * You tried to create a RateBasedRule with a RateKey value other than IP.
///
/// * You tried to update a WebACL with a WafActionType other than ALLOW, BLOCK, or COUNT.
///
/// * You tried to update a ByteMatchSet with a FieldToMatchType other than HEADER, METHOD, QUERY_STRING, URI, or BODY.
///
/// * You tried to update a ByteMatchSet with a Field of HEADER but no value for Data.
///
/// * Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL cannot be associated.
public struct WAFInvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var field: WAFClientTypes.ParameterExceptionField?
    public var parameter: Swift.String?
    public var reason: WAFClientTypes.ParameterExceptionReason?

    public init (
        field: WAFClientTypes.ParameterExceptionField? = nil,
        parameter: Swift.String? = nil,
        reason: WAFClientTypes.ParameterExceptionReason? = nil
    )
    {
        self.field = field
        self.parameter = parameter
        self.reason = reason
    }
}

struct WAFInvalidParameterExceptionBody: Swift.Equatable {
    let field: WAFClientTypes.ParameterExceptionField?
    let parameter: Swift.String?
    let reason: WAFClientTypes.ParameterExceptionReason?
}

extension WAFInvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field
        case parameter
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ParameterExceptionField.self, forKey: .field)
        field = fieldDecoded
        let parameterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameter)
        parameter = parameterDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ParameterExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension WAFInvalidPermissionPolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidPermissionPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because the specified policy is not in the proper format. The policy is subject to the following restrictions:
///
/// * You can attach only one policy with each PutPermissionPolicy request.
///
/// * The policy must include an Effect, Action and Principal.
///
/// * Effect must specify Allow.
///
/// * The Action in the policy must be waf:UpdateWebACL, waf-regional:UpdateWebACL, waf:GetRuleGroup and waf-regional:GetRuleGroup . Any extra or wildcard actions in the policy will be rejected.
///
/// * The policy cannot include a Resource parameter.
///
/// * The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup must exist in the same region.
///
/// * The user making the request must be the owner of the RuleGroup.
///
/// * Your policy must be composed using IAM Policy version 2012-10-17.
public struct WAFInvalidPermissionPolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidPermissionPolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInvalidPermissionPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidRegexPatternException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidRegexPatternExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The regular expression (regex) you specified in RegexPatternString is invalid.
public struct WAFInvalidRegexPatternException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidRegexPatternExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInvalidRegexPatternExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFLimitsExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFLimitsExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation exceeds a resource limit, for example, the maximum number of WebACL objects that you can create for an AWS account. For more information, see [Limits](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the AWS WAF Developer Guide.
public struct WAFLimitsExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFLimitsExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFLimitsExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFNonEmptyEntityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFNonEmptyEntityExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you tried to delete an object that isn't empty. For example:
///
/// * You tried to delete a WebACL that still contains one or more Rule objects.
///
/// * You tried to delete a Rule that still contains one or more ByteMatchSet objects or other predicates.
///
/// * You tried to delete a ByteMatchSet that contains one or more ByteMatchTuple objects.
///
/// * You tried to delete an IPSet that references one or more IP addresses.
public struct WAFNonEmptyEntityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFNonEmptyEntityExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFNonEmptyEntityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFNonexistentContainerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFNonexistentContainerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you tried to add an object to or delete an object from another object that doesn't exist. For example:
///
/// * You tried to add a Rule to or delete a Rule from a WebACL that doesn't exist.
///
/// * You tried to add a ByteMatchSet to or delete a ByteMatchSet from a Rule that doesn't exist.
///
/// * You tried to add an IP address to or delete an IP address from an IPSet that doesn't exist.
///
/// * You tried to add a ByteMatchTuple to or delete a ByteMatchTuple from a ByteMatchSet that doesn't exist.
public struct WAFNonexistentContainerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFNonexistentContainerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFNonexistentContainerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFNonexistentItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFNonexistentItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because the referenced object doesn't exist.
public struct WAFNonexistentItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFNonexistentItemExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFNonexistentItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFReferencedItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFReferencedItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you tried to delete an object that is still in use. For example:
///
/// * You tried to delete a ByteMatchSet that is still referenced by a Rule.
///
/// * You tried to delete a Rule that is still referenced by a WebACL.
public struct WAFReferencedItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFReferencedItemExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFReferencedItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFServiceLinkedRoleErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFServiceLinkedRoleErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// AWS WAF is not able to access the service linked role. This can be caused by a previous PutLoggingConfiguration request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous DeleteServiceLinkedRole request, which can lock the role for 15 minutes or more. If you recently made a DeleteServiceLinkedRole, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.
public struct WAFServiceLinkedRoleErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFServiceLinkedRoleErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFServiceLinkedRoleErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFStaleDataException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFStaleDataExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you tried to create, update, or delete an object by using a change token that has already been used.
public struct WAFStaleDataException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFStaleDataExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFStaleDataExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFSubscriptionNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFSubscriptionNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified subscription does not exist.
public struct WAFSubscriptionNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFSubscriptionNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFSubscriptionNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFTagOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFTagOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct WAFTagOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFTagOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFTagOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFTagOperationInternalErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFTagOperationInternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct WAFTagOperationInternalErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFTagOperationInternalErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFTagOperationInternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFClientTypes.WafAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafActionType.self, forKey: .type)
        type = typeDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. For the action that is associated with a rule in a WebACL, specifies the action that you want AWS WAF to perform when a web request matches all of the conditions in a rule. For the default action in a WebACL, specifies the action that you want AWS WAF to take when a web request doesn't match all of the conditions in any of the rules in a WebACL.
    public struct WafAction: Swift.Equatable {
        /// Specifies how you want AWS WAF to respond to requests that match the settings in a Rule. Valid settings include the following:
        ///
        /// * ALLOW: AWS WAF allows requests
        ///
        /// * BLOCK: AWS WAF blocks requests
        ///
        /// * COUNT: AWS WAF increments a counter of the requests that match all of the conditions in the rule. AWS WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify COUNT for the default action for a WebACL.
        /// This member is required.
        public var type: WAFClientTypes.WafActionType?

        public init (
            type: WAFClientTypes.WafActionType? = nil
        )
        {
            self.type = type
        }
    }

}

extension WAFClientTypes {
    public enum WafActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case block
        case count
        case sdkUnknown(Swift.String)

        public static var allCases: [WafActionType] {
            return [
                .allow,
                .block,
                .count,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .block: return "BLOCK"
            case .count: return "COUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WafActionType(rawValue: rawValue) ?? WafActionType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.WafOverrideAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafOverrideActionType.self, forKey: .type)
        type = typeDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The action to take if any rule within the RuleGroup matches a request.
    public struct WafOverrideAction: Swift.Equatable {
        /// COUNT overrides the action specified by the individual rule within a RuleGroup . If set to NONE, the rule's action will take place.
        /// This member is required.
        public var type: WAFClientTypes.WafOverrideActionType?

        public init (
            type: WAFClientTypes.WafOverrideActionType? = nil
        )
        {
            self.type = type
        }
    }

}

extension WAFClientTypes {
    public enum WafOverrideActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case count
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [WafOverrideActionType] {
            return [
                .count,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .count: return "COUNT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WafOverrideActionType(rawValue: rawValue) ?? WafOverrideActionType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes {
    public enum WafRuleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case rateBased
        case regular
        case sdkUnknown(Swift.String)

        public static var allCases: [WafRuleType] {
            return [
                .group,
                .rateBased,
                .regular,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .rateBased: return "RATE_BASED"
            case .regular: return "REGULAR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WafRuleType(rawValue: rawValue) ?? WafRuleType.sdkUnknown(rawValue)
        }
    }
}

extension WAFClientTypes.WebACL: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultAction = "DefaultAction"
        case metricName = "MetricName"
        case name = "Name"
        case rules = "Rules"
        case webACLArn = "WebACLArn"
        case webACLId = "WebACLId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for activatedrule0 in rules {
                try rulesContainer.encode(activatedrule0)
            }
        }
        if let webACLArn = self.webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.WafAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFClientTypes.ActivatedRule?].self, forKey: .rules)
        var rulesDecoded0:[WAFClientTypes.ActivatedRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFClientTypes.ActivatedRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted. For more information, see [UpdateWebACL].
    public struct WebACL: Swift.Equatable {
        /// The action to perform if none of the Rules contained in the WebACL match. The action is specified by the [WafAction] object.
        /// This member is required.
        public var defaultAction: WAFClientTypes.WafAction?
        /// A friendly name or description for the metrics for this WebACL. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the WebACL.
        public var metricName: Swift.String?
        /// A friendly name or description of the WebACL. You can't change the name of a WebACL after you create it.
        public var name: Swift.String?
        /// An array that contains the action for each Rule in a WebACL, the priority of the Rule, and the ID of the Rule.
        /// This member is required.
        public var rules: [WAFClientTypes.ActivatedRule]?
        /// Tha Amazon Resource Name (ARN) of the web ACL.
        public var webACLArn: Swift.String?
        /// A unique identifier for a WebACL. You use WebACLId to get information about a WebACL (see [GetWebACL]), update a WebACL (see [UpdateWebACL]), and delete a WebACL from AWS WAF (see [DeleteWebACL]). WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
        /// This member is required.
        public var webACLId: Swift.String?

        public init (
            defaultAction: WAFClientTypes.WafAction? = nil,
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            rules: [WAFClientTypes.ActivatedRule]? = nil,
            webACLArn: Swift.String? = nil,
            webACLId: Swift.String? = nil
        )
        {
            self.defaultAction = defaultAction
            self.metricName = metricName
            self.name = name
            self.rules = rules
            self.webACLArn = webACLArn
            self.webACLId = webACLId
        }
    }

}

extension WAFClientTypes.WebACLSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case webACLId = "WebACLId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the name or description of the [WebACL].
    public struct WebACLSummary: Swift.Equatable {
        /// A friendly name or description of the [WebACL]. You can't change the name of a WebACL after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a WebACL. You use WebACLId to get information about a WebACL (see [GetWebACL]), update a WebACL (see [UpdateWebACL]), and delete a WebACL from AWS WAF (see [DeleteWebACL]). WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
        /// This member is required.
        public var webACLId: Swift.String?

        public init (
            name: Swift.String? = nil,
            webACLId: Swift.String? = nil
        )
        {
            self.name = name
            self.webACLId = webACLId
        }
    }

}

extension WAFClientTypes.WebACLUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case activatedRule = "ActivatedRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let activatedRule = self.activatedRule {
            try encodeContainer.encode(activatedRule, forKey: .activatedRule)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let activatedRuleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ActivatedRule.self, forKey: .activatedRule)
        activatedRule = activatedRuleDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies whether to insert a Rule into or delete a Rule from a WebACL.
    public struct WebACLUpdate: Swift.Equatable {
        /// Specifies whether to insert a Rule into or delete a Rule from a WebACL.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// The ActivatedRule object in an [UpdateWebACL] request specifies a Rule that you want to insert or delete, the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule (ALLOW, BLOCK, or COUNT).
        /// This member is required.
        public var activatedRule: WAFClientTypes.ActivatedRule?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            activatedRule: WAFClientTypes.ActivatedRule? = nil
        )
        {
            self.action = action
            self.activatedRule = activatedRule
        }
    }

}

extension WAFClientTypes.XssMatchSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case xssMatchSetId = "XssMatchSetId"
        case xssMatchTuples = "XssMatchTuples"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let xssMatchSetId = self.xssMatchSetId {
            try encodeContainer.encode(xssMatchSetId, forKey: .xssMatchSetId)
        }
        if let xssMatchTuples = xssMatchTuples {
            var xssMatchTuplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .xssMatchTuples)
            for xssmatchtuple0 in xssMatchTuples {
                try xssMatchTuplesContainer.encode(xssmatchtuple0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xssMatchSetId)
        xssMatchSetId = xssMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let xssMatchTuplesContainer = try containerValues.decodeIfPresent([WAFClientTypes.XssMatchTuple?].self, forKey: .xssMatchTuples)
        var xssMatchTuplesDecoded0:[WAFClientTypes.XssMatchTuple]? = nil
        if let xssMatchTuplesContainer = xssMatchTuplesContainer {
            xssMatchTuplesDecoded0 = [WAFClientTypes.XssMatchTuple]()
            for structure0 in xssMatchTuplesContainer {
                if let structure0 = structure0 {
                    xssMatchTuplesDecoded0?.append(structure0)
                }
            }
        }
        xssMatchTuples = xssMatchTuplesDecoded0
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A complex type that contains XssMatchTuple objects, which specify the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header. If a XssMatchSet contains more than one XssMatchTuple object, a request needs to include cross-site scripting attacks in only one of the specified parts of the request to be considered a match.
    public struct XssMatchSet: Swift.Equatable {
        /// The name, if any, of the XssMatchSet.
        public var name: Swift.String?
        /// A unique identifier for an XssMatchSet. You use XssMatchSetId to get information about an XssMatchSet (see [GetXssMatchSet]), update an XssMatchSet (see [UpdateXssMatchSet]), insert an XssMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete an XssMatchSet from AWS WAF (see [DeleteXssMatchSet]). XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
        /// This member is required.
        public var xssMatchSetId: Swift.String?
        /// Specifies the parts of web requests that you want to inspect for cross-site scripting attacks.
        /// This member is required.
        public var xssMatchTuples: [WAFClientTypes.XssMatchTuple]?

        public init (
            name: Swift.String? = nil,
            xssMatchSetId: Swift.String? = nil,
            xssMatchTuples: [WAFClientTypes.XssMatchTuple]? = nil
        )
        {
            self.name = name
            self.xssMatchSetId = xssMatchSetId
            self.xssMatchTuples = xssMatchTuples
        }
    }

}

extension WAFClientTypes.XssMatchSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case xssMatchSetId = "XssMatchSetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let xssMatchSetId = self.xssMatchSetId {
            try encodeContainer.encode(xssMatchSetId, forKey: .xssMatchSetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xssMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xssMatchSetId)
        xssMatchSetId = xssMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Id and Name of an XssMatchSet.
    public struct XssMatchSetSummary: Swift.Equatable {
        /// The name of the XssMatchSet, if any, specified by Id.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for an XssMatchSet. You use XssMatchSetId to get information about a XssMatchSet (see [GetXssMatchSet]), update an XssMatchSet (see [UpdateXssMatchSet]), insert an XssMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete an XssMatchSet from AWS WAF (see [DeleteXssMatchSet]). XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
        /// This member is required.
        public var xssMatchSetId: Swift.String?

        public init (
            name: Swift.String? = nil,
            xssMatchSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.xssMatchSetId = xssMatchSetId
        }
    }

}

extension WAFClientTypes.XssMatchSetUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case xssMatchTuple = "XssMatchTuple"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let xssMatchTuple = self.xssMatchTuple {
            try encodeContainer.encode(xssMatchTuple, forKey: .xssMatchTuple)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let xssMatchTupleDecoded = try containerValues.decodeIfPresent(WAFClientTypes.XssMatchTuple.self, forKey: .xssMatchTuple)
        xssMatchTuple = xssMatchTupleDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want to inspect for cross-site scripting attacks and indicates whether you want to add the specification to an [XssMatchSet] or delete it from an XssMatchSet.
    public struct XssMatchSetUpdate: Swift.Equatable {
        /// Specify INSERT to add an [XssMatchSetUpdate] to an [XssMatchSet]. Use DELETE to remove an XssMatchSetUpdate from an XssMatchSet.
        /// This member is required.
        public var action: WAFClientTypes.ChangeAction?
        /// Specifies the part of a web request that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header.
        /// This member is required.
        public var xssMatchTuple: WAFClientTypes.XssMatchTuple?

        public init (
            action: WAFClientTypes.ChangeAction? = nil,
            xssMatchTuple: WAFClientTypes.XssMatchTuple? = nil
        )
        {
            self.action = action
            self.xssMatchTuple = xssMatchTuple
        }
    }

}

extension WAFClientTypes.XssMatchTuple: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case textTransformation = "TextTransformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformation = self.textTransformation {
            try encodeContainer.encode(textTransformation.rawValue, forKey: .textTransformation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationDecoded = try containerValues.decodeIfPresent(WAFClientTypes.TextTransformation.self, forKey: .textTransformation)
        textTransformation = textTransformationDecoded
    }
}

extension WAFClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header.
    public struct XssMatchTuple: Swift.Equatable {
        /// Specifies where in a web request to look for cross-site scripting attacks.
        /// This member is required.
        public var fieldToMatch: WAFClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFClientTypes.TextTransformation?

        public init (
            fieldToMatch: WAFClientTypes.FieldToMatch? = nil,
            textTransformation: WAFClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformation = textTransformation
        }
    }

}
