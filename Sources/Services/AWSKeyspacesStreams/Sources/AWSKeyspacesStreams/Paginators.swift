//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension KeyspacesStreamsClient {
    /// Paginate over `[GetStreamOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetStreamInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetStreamOutput`
    public func getStreamPaginated(input: GetStreamInput) -> ClientRuntime.PaginatorSequence<GetStreamInput, GetStreamOutput> {
        return ClientRuntime.PaginatorSequence<GetStreamInput, GetStreamOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getStream(input:))
    }
}

extension GetStreamInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetStreamInput {
        return GetStreamInput(
            maxResults: self.maxResults,
            nextToken: token,
            shardFilter: self.shardFilter,
            streamArn: self.streamArn
        )}
}

extension PaginatorSequence where OperationStackInput == GetStreamInput, OperationStackOutput == GetStreamOutput {
    /// This paginator transforms the `AsyncSequence` returned by `getStreamPaginated`
    /// to access the nested member `[KeyspacesStreamsClientTypes.Shard]`
    /// - Returns: `[KeyspacesStreamsClientTypes.Shard]`
    public func shards() async throws -> [KeyspacesStreamsClientTypes.Shard] {
        return try await self.asyncCompactMap { item in item.shards }
    }
}
extension KeyspacesStreamsClient {
    /// Paginate over `[ListStreamsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStreamsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStreamsOutput`
    public func listStreamsPaginated(input: ListStreamsInput) -> ClientRuntime.PaginatorSequence<ListStreamsInput, ListStreamsOutput> {
        return ClientRuntime.PaginatorSequence<ListStreamsInput, ListStreamsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listStreams(input:))
    }
}

extension ListStreamsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStreamsInput {
        return ListStreamsInput(
            keyspaceName: self.keyspaceName,
            maxResults: self.maxResults,
            nextToken: token,
            tableName: self.tableName
        )}
}

extension PaginatorSequence where OperationStackInput == ListStreamsInput, OperationStackOutput == ListStreamsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listStreamsPaginated`
    /// to access the nested member `[KeyspacesStreamsClientTypes.Stream]`
    /// - Returns: `[KeyspacesStreamsClientTypes.Stream]`
    public func streams() async throws -> [KeyspacesStreamsClientTypes.Stream] {
        return try await self.asyncCompactMap { item in item.streams }
    }
}
