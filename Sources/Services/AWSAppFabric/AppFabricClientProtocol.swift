// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Amazon Web Services AppFabric quickly connects software as a service (SaaS) applications across your organization. This allows IT and security teams to easily manage and secure applications using a standard schema, and employees can complete everyday tasks faster using generative artificial intelligence (AI). You can use these APIs to complete AppFabric tasks, such as setting up audit log ingestions or viewing user access. For more information about AppFabric, including the required permissions to use the service, see the [Amazon Web Services AppFabric Administration Guide](https://docs.aws.amazon.com/appfabric/latest/adminguide/). For more information about using the Command Line Interface (CLI) to manage your AppFabric resources, see the [AppFabric section of the CLI Reference](https://docs.aws.amazon.com/cli/latest/reference/appfabric/index.html).
public protocol AppFabricClientProtocol {
    /// Gets user access details in a batch request. This action polls data from the tasks that are kicked off by the StartUserAccessTasks action.
    func batchGetUserAccessTasks(input: BatchGetUserAccessTasksInput) async throws -> BatchGetUserAccessTasksOutputResponse
    /// Establishes a connection between Amazon Web Services AppFabric and an application, which allows AppFabric to call the APIs of the application.
    func connectAppAuthorization(input: ConnectAppAuthorizationInput) async throws -> ConnectAppAuthorizationOutputResponse
    /// Creates an app authorization within an app bundle, which allows AppFabric to connect to an application.
    func createAppAuthorization(input: CreateAppAuthorizationInput) async throws -> CreateAppAuthorizationOutputResponse
    /// Creates an app bundle to collect data from an application using AppFabric.
    func createAppBundle(input: CreateAppBundleInput) async throws -> CreateAppBundleOutputResponse
    /// Creates a data ingestion for an application.
    func createIngestion(input: CreateIngestionInput) async throws -> CreateIngestionOutputResponse
    /// Creates an ingestion destination, which specifies how an application's ingested data is processed by Amazon Web Services AppFabric and where it's delivered.
    func createIngestionDestination(input: CreateIngestionDestinationInput) async throws -> CreateIngestionDestinationOutputResponse
    /// Deletes an app authorization. You must delete the associated ingestion before you can delete an app authorization.
    func deleteAppAuthorization(input: DeleteAppAuthorizationInput) async throws -> DeleteAppAuthorizationOutputResponse
    /// Deletes an app bundle. You must delete all associated app authorizations before you can delete an app bundle.
    func deleteAppBundle(input: DeleteAppBundleInput) async throws -> DeleteAppBundleOutputResponse
    /// Deletes an ingestion. You must stop (disable) the ingestion and you must delete all associated ingestion destinations before you can delete an app ingestion.
    func deleteIngestion(input: DeleteIngestionInput) async throws -> DeleteIngestionOutputResponse
    /// Deletes an ingestion destination. This deletes the association between an ingestion and it's destination. It doesn't delete previously ingested data or the storage destination, such as the Amazon S3 bucket where the data is delivered. If the ingestion destination is deleted while the associated ingestion is enabled, the ingestion will fail and is eventually disabled.
    func deleteIngestionDestination(input: DeleteIngestionDestinationInput) async throws -> DeleteIngestionDestinationOutputResponse
    /// Returns information about an app authorization.
    func getAppAuthorization(input: GetAppAuthorizationInput) async throws -> GetAppAuthorizationOutputResponse
    /// Returns information about an app bundle.
    func getAppBundle(input: GetAppBundleInput) async throws -> GetAppBundleOutputResponse
    /// Returns information about an ingestion.
    func getIngestion(input: GetIngestionInput) async throws -> GetIngestionOutputResponse
    /// Returns information about an ingestion destination.
    func getIngestionDestination(input: GetIngestionDestinationInput) async throws -> GetIngestionDestinationOutputResponse
    /// Returns a list of all app authorizations configured for an app bundle.
    func listAppAuthorizations(input: ListAppAuthorizationsInput) async throws -> ListAppAuthorizationsOutputResponse
    /// Returns a list of app bundles.
    func listAppBundles(input: ListAppBundlesInput) async throws -> ListAppBundlesOutputResponse
    /// Returns a list of all ingestion destinations configured for an ingestion.
    func listIngestionDestinations(input: ListIngestionDestinationsInput) async throws -> ListIngestionDestinationsOutputResponse
    /// Returns a list of all ingestions configured for an app bundle.
    func listIngestions(input: ListIngestionsInput) async throws -> ListIngestionsOutputResponse
    /// Returns a list of tags for a resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Starts (enables) an ingestion, which collects data from an application.
    func startIngestion(input: StartIngestionInput) async throws -> StartIngestionOutputResponse
    /// Starts the tasks to search user access status for a specific email address. The tasks are stopped when the user access status data is found. The tasks are terminated when the API calls to the application time out.
    func startUserAccessTasks(input: StartUserAccessTasksInput) async throws -> StartUserAccessTasksOutputResponse
    /// Stops (disables) an ingestion.
    func stopIngestion(input: StopIngestionInput) async throws -> StopIngestionOutputResponse
    /// Assigns one or more tags (key-value pairs) to the specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes a tag or tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates an app authorization within an app bundle, which allows AppFabric to connect to an application. If the app authorization was in a connected state, updating the app authorization will set it back to a PendingConnect state.
    func updateAppAuthorization(input: UpdateAppAuthorizationInput) async throws -> UpdateAppAuthorizationOutputResponse
    /// Updates an ingestion destination, which specifies how an application's ingested data is processed by Amazon Web Services AppFabric and where it's delivered.
    func updateIngestionDestination(input: UpdateIngestionDestinationInput) async throws -> UpdateIngestionDestinationOutputResponse
}

public enum AppFabricClientTypes {}
