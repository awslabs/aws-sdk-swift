//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class ClientRuntime.Indirect
import class SmithyEventStreams.DefaultMessageDecoder
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ByteStream
import enum Smithy.ClientError
import enum SmithyEventStreamsAPI.MessageType
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct SmithyEventStreams.DefaultMessageDecoderStream
import struct SmithyEventStreamsAPI.Header
import struct SmithyEventStreamsAPI.Message
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers
import typealias SmithyEventStreamsAPI.MarshalClosure
import typealias SmithyEventStreamsAPI.UnmarshalClosure

///
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension LexRuntimeV2ClientTypes {

    /// The time that a context is active. You can specify the time to live in seconds or in conversation turns.
    public struct ActiveContextTimeToLive: Swift.Sendable {
        /// The number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).
        /// This member is required.
        public var timeToLiveInSeconds: Swift.Int?
        /// The number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.
        /// This member is required.
        public var turnsToLive: Swift.Int?

        public init(
            timeToLiveInSeconds: Swift.Int? = nil,
            turnsToLive: Swift.Int? = nil
        )
        {
            self.timeToLiveInSeconds = timeToLiveInSeconds
            self.turnsToLive = turnsToLive
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Contains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations. Use a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is order-fulfilled, only intents that have order-fulfilled configured as a trigger are considered for follow up.
    public struct ActiveContext: Swift.Sendable {
        /// A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request. If you don't specify a list of contexts, Amazon Lex V2 will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.
        /// This member is required.
        public var contextAttributes: [Swift.String: Swift.String]?
        /// The name of the context.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.
        /// This member is required.
        public var timeToLive: LexRuntimeV2ClientTypes.ActiveContextTimeToLive?

        public init(
            contextAttributes: [Swift.String: Swift.String]? = nil,
            name: Swift.String? = nil,
            timeToLive: LexRuntimeV2ClientTypes.ActiveContextTimeToLive? = nil
        )
        {
            self.contextAttributes = contextAttributes
            self.name = name
            self.timeToLive = timeToLive
        }
    }
}

extension LexRuntimeV2ClientTypes.ActiveContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActiveContext(name: \(Swift.String(describing: name)), timeToLive: \(Swift.String(describing: timeToLive)), contextAttributes: [keys: \(Swift.String(describing: contextAttributes?.keys)), values: \"CONTENT_REDACTED\"])"}
}

extension LexRuntimeV2ClientTypes {

    /// Represents a chunk of audio sent from the client application to Amazon Lex V2. The audio is all or part of an utterance from the user. Amazon Lex V2 accumulates audio chunks until it recognizes a natural pause in speech before processing the input.
    public struct AudioInputEvent: Swift.Sendable {
        /// An encoded stream of audio.
        public var audioChunk: Foundation.Data?
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be: audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
        /// This member is required.
        public var contentType: Swift.String?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?

        public init(
            audioChunk: Foundation.Data? = nil,
            clientTimestampMillis: Swift.Int = 0,
            contentType: Swift.String? = nil,
            eventId: Swift.String? = nil
        )
        {
            self.audioChunk = audioChunk
            self.clientTimestampMillis = clientTimestampMillis
            self.contentType = contentType
            self.eventId = eventId
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// An event sent from Amazon Lex V2 to your client application containing audio to play to the user.
    public struct AudioResponseEvent: Swift.Sendable {
        /// A chunk of the audio to play.
        public var audioChunk: Foundation.Data?
        /// The encoding of the audio chunk. This is the same as the encoding configure in the contentType field of the ConfigurationEvent.
        public var contentType: Swift.String?
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public var eventId: Swift.String?

        public init(
            audioChunk: Foundation.Data? = nil,
            contentType: Swift.String? = nil,
            eventId: Swift.String? = nil
        )
        {
            self.audioChunk = audioChunk
            self.contentType = contentType
            self.eventId = eventId
        }
    }
}

///
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSessionInput: Swift.Sendable {
    /// The alias identifier in use for the bot that contains the session data.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that contains the session data.
    /// This member is required.
    public var botId: Swift.String?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// The identifier of the session to delete.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.localeId = localeId
        self.sessionId = sessionId
    }
}

public struct DeleteSessionOutput: Swift.Sendable {
    /// The alias identifier in use for the bot that contained the session data.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that contained the session data.
    public var botId: Swift.String?
    /// The locale where the session was used.
    public var localeId: Swift.String?
    /// The identifier of the deleted session.
    public var sessionId: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.localeId = localeId
        self.sessionId = sessionId
    }
}

public struct GetSessionInput: Swift.Sendable {
    /// The alias identifier in use for the bot that contains the session data.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that contains the session data.
    /// This member is required.
    public var botId: Swift.String?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// The identifier of the session to return.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.localeId = localeId
        self.sessionId = sessionId
    }
}

extension LexRuntimeV2ClientTypes {

    public enum ConfirmationState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case confirmed
        case denied
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfirmationState] {
            return [
                .confirmed,
                .denied,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .confirmed: return "Confirmed"
            case .denied: return "Denied"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum Shape: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case composite
        case list
        case scalar
        case sdkUnknown(Swift.String)

        public static var allCases: [Shape] {
            return [
                .composite,
                .list,
                .scalar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .composite: return "Composite"
            case .list: return "List"
            case .scalar: return "Scalar"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Information about the value provided for a slot and Amazon Lex V2's interpretation.
    public struct Value: Swift.Sendable {
        /// The value that Amazon Lex V2 determines for the slot, given the user input. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.
        /// This member is required.
        public var interpretedValue: Swift.String?
        /// The part of the user's response to the slot elicitation that Amazon Lex V2 determines is relevant to the slot value.
        public var originalValue: Swift.String?
        /// A list of values that Amazon Lex V2 determines are possible resolutions for the user input. The first value matches the interpretedValue.
        public var resolvedValues: [Swift.String]?

        public init(
            interpretedValue: Swift.String? = nil,
            originalValue: Swift.String? = nil,
            resolvedValues: [Swift.String]? = nil
        )
        {
            self.interpretedValue = interpretedValue
            self.originalValue = originalValue
            self.resolvedValues = resolvedValues
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum IntentState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case fulfilled
        case fulfillmentInProgress
        case inProgress
        case readyForFulfillment
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [IntentState] {
            return [
                .failed,
                .fulfilled,
                .fulfillmentInProgress,
                .inProgress,
                .readyForFulfillment,
                .waiting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .fulfilled: return "Fulfilled"
            case .fulfillmentInProgress: return "FulfillmentInProgress"
            case .inProgress: return "InProgress"
            case .readyForFulfillment: return "ReadyForFulfillment"
            case .waiting: return "Waiting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum InterpretationSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bedrock
        case lex
        case sdkUnknown(Swift.String)

        public static var allCases: [InterpretationSource] {
            return [
                .bedrock,
                .lex
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bedrock: return "Bedrock"
            case .lex: return "Lex"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Provides a score that indicates the confidence that Amazon Lex V2 has that an intent is the one that satisfies the user's intent.
    public struct ConfidenceScore: Swift.Sendable {
        /// A score that indicates how confident Amazon Lex V2 is that an intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.
        public var score: Swift.Double

        public init(
            score: Swift.Double = 0.0
        )
        {
            self.score = score
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum SentimentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mixed
        case negative
        case neutral
        case positive
        case sdkUnknown(Swift.String)

        public static var allCases: [SentimentType] {
            return [
                .mixed,
                .negative,
                .neutral,
                .positive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .negative: return "NEGATIVE"
            case .neutral: return "NEUTRAL"
            case .positive: return "POSITIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The individual sentiment responses for the utterance.
    public struct SentimentScore: Swift.Sendable {
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public var mixed: Swift.Double
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public var negative: Swift.Double
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public var neutral: Swift.Double
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public var positive: Swift.Double

        public init(
            mixed: Swift.Double = 0.0,
            negative: Swift.Double = 0.0,
            neutral: Swift.Double = 0.0,
            positive: Swift.Double = 0.0
        )
        {
            self.mixed = mixed
            self.negative = negative
            self.neutral = neutral
            self.positive = positive
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Provides information about the sentiment expressed in a user's response in a conversation. Sentiments are determined using Amazon Comprehend. Sentiments are only returned if they are enabled for the bot. For more information, see [ Determine Sentiment ](https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html) in the Amazon Comprehend developer guide.
    public struct SentimentResponse: Swift.Sendable {
        /// The overall sentiment expressed in the user's response. This is the sentiment most likely expressed by the user based on the analysis by Amazon Comprehend.
        public var sentiment: LexRuntimeV2ClientTypes.SentimentType?
        /// The individual sentiment responses for the utterance.
        public var sentimentScore: LexRuntimeV2ClientTypes.SentimentScore?

        public init(
            sentiment: LexRuntimeV2ClientTypes.SentimentType? = nil,
            sentimentScore: LexRuntimeV2ClientTypes.SentimentScore? = nil
        )
        {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum MessageContentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customPayload
        case imageResponseCard
        case plainText
        case ssml
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageContentType] {
            return [
                .customPayload,
                .imageResponseCard,
                .plainText,
                .ssml
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customPayload: return "CustomPayload"
            case .imageResponseCard: return "ImageResponseCard"
            case .plainText: return "PlainText"
            case .ssml: return "SSML"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// A button that appears on a response card show to the user.
    public struct Button: Swift.Sendable {
        /// The text that is displayed on the button.
        /// This member is required.
        public var text: Swift.String?
        /// The value returned to Amazon Lex V2 when a user chooses the button.
        /// This member is required.
        public var value: Swift.String?

        public init(
            text: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.text = text
            self.value = value
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. When you use a response card, the response from the user is constrained to the text associated with a button on the card.
    public struct ImageResponseCard: Swift.Sendable {
        /// A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.
        public var buttons: [LexRuntimeV2ClientTypes.Button]?
        /// The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        public var imageUrl: Swift.String?
        /// The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        public var subtitle: Swift.String?
        /// The title to display on the response card. The format of the title is determined by the platform displaying the response card.
        /// This member is required.
        public var title: Swift.String?

        public init(
            buttons: [LexRuntimeV2ClientTypes.Button]? = nil,
            imageUrl: Swift.String? = nil,
            subtitle: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.buttons = buttons
            self.imageUrl = imageUrl
            self.subtitle = subtitle
            self.title = title
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Container for text that is returned to the customer..
    public struct Message: Swift.Sendable {
        /// The text of the message.
        public var content: Swift.String?
        /// Indicates the type of response.
        /// This member is required.
        public var contentType: LexRuntimeV2ClientTypes.MessageContentType?
        /// A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. When you use a response card, the response from the user is constrained to the text associated with a button on the card.
        public var imageResponseCard: LexRuntimeV2ClientTypes.ImageResponseCard?

        public init(
            content: Swift.String? = nil,
            contentType: LexRuntimeV2ClientTypes.MessageContentType? = nil,
            imageResponseCard: LexRuntimeV2ClientTypes.ImageResponseCard? = nil
        )
        {
            self.content = content
            self.contentType = contentType
            self.imageResponseCard = imageResponseCard
        }
    }
}

extension LexRuntimeV2ClientTypes.Message: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Message(contentType: \(Swift.String(describing: contentType)), imageResponseCard: \(Swift.String(describing: imageResponseCard)), content: \"CONTENT_REDACTED\")"}
}

extension LexRuntimeV2ClientTypes {

    public enum StyleType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case spellByLetter
        case spellByWord
        case sdkUnknown(Swift.String)

        public static var allCases: [StyleType] {
            return [
                .default,
                .spellByLetter,
                .spellByWord
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "Default"
            case .spellByLetter: return "SpellByLetter"
            case .spellByWord: return "SpellByWord"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum DialogActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case close
        case confirmIntent
        case delegate
        case elicitIntent
        case elicitSlot
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [DialogActionType] {
            return [
                .close,
                .confirmIntent,
                .delegate,
                .elicitIntent,
                .elicitSlot,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .close: return "Close"
            case .confirmIntent: return "ConfirmIntent"
            case .delegate: return "Delegate"
            case .elicitIntent: return "ElicitIntent"
            case .elicitSlot: return "ElicitSlot"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Provides the phrase that Amazon Lex V2 should look for in the user's input to the bot.
    public struct RuntimeHintValue: Swift.Sendable {
        /// The phrase that Amazon Lex V2 should look for in the user's input to the bot.
        /// This member is required.
        public var phrase: Swift.String?

        public init(
            phrase: Swift.String? = nil
        )
        {
            self.phrase = phrase
        }
    }
}

///
public struct BadGatewayException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadGatewayException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DependencyFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependencyFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutSessionOutput: Swift.Sendable {
    /// If the requested content type was audio, the audio version of the message to convey to the user.
    public var audioStream: Smithy.ByteStream?
    /// The type of response. Same as the type specified in the responseContentType field in the request.
    public var contentType: Swift.String?
    /// A list of messages that were last sent to the user. The messages are ordered based on how you return the messages from you Lambda function or the order that the messages are defined in the bot.
    public var messages: Swift.String?
    /// A base-64-encoded gzipped field that provides request-specific information passed between the client application and Amazon Lex V2. These are the same as the requestAttribute parameter in the call to the PutSession operation.
    public var requestAttributes: Swift.String?
    /// The identifier of the session that received the data.
    public var sessionId: Swift.String?
    /// A base-64-encoded gzipped field that represents the current state of the dialog between the user and the bot. Use this to determine the progress of the conversation and what the next action may be.
    public var sessionState: Swift.String?

    public init(
        audioStream: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8)),
        contentType: Swift.String? = nil,
        messages: Swift.String? = nil,
        requestAttributes: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        sessionState: Swift.String? = nil
    )
    {
        self.audioStream = audioStream
        self.contentType = contentType
        self.messages = messages
        self.requestAttributes = requestAttributes
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}

extension LexRuntimeV2ClientTypes {

    /// The bot member that processes the request.
    public struct RecognizedBotMember: Swift.Sendable {
        /// The identifier of the bot member that processes the request.
        /// This member is required.
        public var botId: Swift.String?
        /// The name of the bot member that processes the request.
        public var botName: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botName: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botName = botName
        }
    }
}

public struct RecognizeUtteranceInput: Swift.Sendable {
    /// The alias identifier in use for the bot that should receive the request.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that should receive the request.
    /// This member is required.
    public var botId: Swift.String?
    /// User input in PCM or Opus audio format or text format as described in the requestContentType parameter.
    public var inputStream: Smithy.ByteStream?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// Request-specific information passed between the client application and Amazon Lex V2 The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes for prefix x-amz-lex:. The requestAttributes field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
    public var requestAttributes: Swift.String?
    /// Indicates the format for audio input or that the content is text. The header must start with one of the following prefixes:
    ///
    /// * PCM format, audio data must be in little-endian byte order.
    ///
    /// * audio/l16; rate=16000; channels=1
    ///
    /// * audio/x-l16; sample-rate=16000; channel-count=1
    ///
    /// * audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
    ///
    ///
    ///
    ///
    /// * Opus format
    ///
    /// * audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4
    ///
    ///
    ///
    ///
    /// * Text format
    ///
    /// * text/plain; charset=utf-8
    /// This member is required.
    public var requestContentType: Swift.String?
    /// The message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.
    ///
    /// * If the value is text/plain;charset=utf-8, Amazon Lex V2 returns text in the response.
    ///
    /// * If the value begins with audio/, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the responseContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.
    ///
    /// * If the value is audio/pcm, the speech returned is audio/pcm at 16 KHz in 16-bit, little-endian format.
    ///
    /// * The following are the accepted values:
    ///
    /// * audio/mpeg
    ///
    /// * audio/ogg
    ///
    /// * audio/pcm (16 KHz)
    ///
    /// * audio/* (defaults to mpeg)
    ///
    /// * text/plain; charset=utf-8
    public var responseContentType: Swift.String?
    /// The identifier of the session in use.
    /// This member is required.
    public var sessionId: Swift.String?
    /// Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user. The sessionState field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
    public var sessionState: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        inputStream: Smithy.ByteStream? = nil,
        localeId: Swift.String? = nil,
        requestAttributes: Swift.String? = nil,
        requestContentType: Swift.String? = nil,
        responseContentType: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        sessionState: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.inputStream = inputStream
        self.localeId = localeId
        self.requestAttributes = requestAttributes
        self.requestContentType = requestContentType
        self.responseContentType = responseContentType
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}

extension RecognizeUtteranceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecognizeUtteranceInput(botAliasId: \(Swift.String(describing: botAliasId)), botId: \(Swift.String(describing: botId)), inputStream: \(Swift.String(describing: inputStream)), localeId: \(Swift.String(describing: localeId)), requestContentType: \(Swift.String(describing: requestContentType)), responseContentType: \(Swift.String(describing: responseContentType)), sessionId: \(Swift.String(describing: sessionId)), requestAttributes: \"CONTENT_REDACTED\", sessionState: \"CONTENT_REDACTED\")"}
}

public struct RecognizeUtteranceOutput: Swift.Sendable {
    /// The prompt or statement to send to the user. This is based on the bot configuration and context. For example, if Amazon Lex V2 did not understand the user intent, it sends the clarificationPrompt configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the confirmationPrompt. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex V2 sends that message in the response.
    public var audioStream: Smithy.ByteStream?
    /// Content type as specified in the responseContentType in the request.
    public var contentType: Swift.String?
    /// Indicates whether the input mode to the operation was text, speech, or from a touch-tone keypad.
    public var inputMode: Swift.String?
    /// The text used to process the request. If the input was an audio stream, the inputTranscript field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex V2 is correctly processing the audio that you send. The inputTranscript field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
    public var inputTranscript: Swift.String?
    /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance. Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance. The interpretations field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
    public var interpretations: Swift.String?
    /// A list of messages that were last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot. The messages field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
    public var messages: Swift.String?
    /// The bot member that recognized the utterance.
    public var recognizedBotMember: Swift.String?
    /// The attributes sent in the request. The requestAttributes field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents.
    public var requestAttributes: Swift.String?
    /// The identifier of the session in use.
    public var sessionId: Swift.String?
    /// Represents the current state of the dialog between the user and the bot. Use this to determine the progress of the conversation and what the next action might be. The sessionState field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
    public var sessionState: Swift.String?

    public init(
        audioStream: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8)),
        contentType: Swift.String? = nil,
        inputMode: Swift.String? = nil,
        inputTranscript: Swift.String? = nil,
        interpretations: Swift.String? = nil,
        messages: Swift.String? = nil,
        recognizedBotMember: Swift.String? = nil,
        requestAttributes: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        sessionState: Swift.String? = nil
    )
    {
        self.audioStream = audioStream
        self.contentType = contentType
        self.inputMode = inputMode
        self.inputTranscript = inputTranscript
        self.interpretations = interpretations
        self.messages = messages
        self.recognizedBotMember = recognizedBotMember
        self.requestAttributes = requestAttributes
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}

extension LexRuntimeV2ClientTypes {

    public enum ConversationMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audio
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [ConversationMode] {
            return [
                .audio,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audio: return "AUDIO"
            case .text: return "TEXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// A notification from the client that it is disconnecting from Amazon Lex V2. Sending a DisconnectionEvent event is optional, but can help identify a conversation in logs.
    public struct DisconnectionEvent: Swift.Sendable {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?

        public init(
            clientTimestampMillis: Swift.Int = 0,
            eventId: Swift.String? = nil
        )
        {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// A DTMF character sent from the client application. DTMF characters are typically sent from a phone keypad to represent numbers. For example, you can have Amazon Lex V2 process a credit card number input from a phone.
    public struct DTMFInputEvent: Swift.Sendable {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?
        /// The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.
        /// This member is required.
        public var inputCharacter: Swift.String?

        public init(
            clientTimestampMillis: Swift.Int = 0,
            eventId: Swift.String? = nil,
            inputCharacter: Swift.String? = nil
        )
        {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
            self.inputCharacter = inputCharacter
        }
    }
}

extension LexRuntimeV2ClientTypes.DTMFInputEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DTMFInputEvent(clientTimestampMillis: \(Swift.String(describing: clientTimestampMillis)), eventId: \(Swift.String(describing: eventId)), inputCharacter: \"CONTENT_REDACTED\")"}
}

extension LexRuntimeV2ClientTypes {

    /// Event sent from the client application to Amazon Lex V2 to indicate that playback of audio is complete and that Amazon Lex V2 should start processing the user's input.
    public struct PlaybackCompletionEvent: Swift.Sendable {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?

        public init(
            clientTimestampMillis: Swift.Int = 0,
            eventId: Swift.String? = nil
        )
        {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The event sent from your client application to Amazon Lex V2 with text input from the user.
    public struct TextInputEvent: Swift.Sendable {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?
        /// The text from the user. Amazon Lex V2 processes this as a complete statement.
        /// This member is required.
        public var text: Swift.String?

        public init(
            clientTimestampMillis: Swift.Int = 0,
            eventId: Swift.String? = nil,
            text: Swift.String? = nil
        )
        {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
            self.text = text
        }
    }
}

extension LexRuntimeV2ClientTypes.TextInputEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TextInputEvent(clientTimestampMillis: \(Swift.String(describing: clientTimestampMillis)), eventId: \(Swift.String(describing: eventId)), text: \"CONTENT_REDACTED\")"}
}

extension LexRuntimeV2ClientTypes {

    /// Event that Amazon Lex V2 sends to indicate that the stream is still open between the client application and Amazon Lex V2
    public struct HeartbeatEvent: Swift.Sendable {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public var eventId: Swift.String?

        public init(
            eventId: Swift.String? = nil
        )
        {
            self.eventId = eventId
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum InputMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dtmf
        case speech
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [InputMode] {
            return [
                .dtmf,
                .speech,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dtmf: return "DTMF"
            case .speech: return "Speech"
            case .text: return "Text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    public enum PlaybackInterruptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dtmfStartDetected
        case textDetected
        case voiceStartDetected
        case sdkUnknown(Swift.String)

        public static var allCases: [PlaybackInterruptionReason] {
            return [
                .dtmfStartDetected,
                .textDetected,
                .voiceStartDetected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dtmfStartDetected: return "DTMF_START_DETECTED"
            case .textDetected: return "TEXT_DETECTED"
            case .voiceStartDetected: return "VOICE_START_DETECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Event sent from Amazon Lex V2 to indicate to the client application should stop playback of audio. For example, if the client is playing a prompt that asks for the user's telephone number, the user might start to say the phone number before the prompt is complete. Amazon Lex V2 sends this event to the client application to indicate that the user is responding and that Amazon Lex V2 is processing their input.
    public struct PlaybackInterruptionEvent: Swift.Sendable {
        /// The identifier of the event that contained the audio, DTMF, or text that caused the interruption.
        public var causedByEventId: Swift.String?
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public var eventId: Swift.String?
        /// Indicates the type of user input that Amazon Lex V2 detected.
        public var eventReason: LexRuntimeV2ClientTypes.PlaybackInterruptionReason?

        public init(
            causedByEventId: Swift.String? = nil,
            eventId: Swift.String? = nil,
            eventReason: LexRuntimeV2ClientTypes.PlaybackInterruptionReason? = nil
        )
        {
            self.causedByEventId = causedByEventId
            self.eventId = eventId
            self.eventReason = eventReason
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The event sent from Amazon Lex V2 to your application with text to present to the user.
    public struct TextResponseEvent: Swift.Sendable {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public var eventId: Swift.String?
        /// A list of messages to send to the user. Messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.
        public var messages: [LexRuntimeV2ClientTypes.Message]?

        public init(
            eventId: Swift.String? = nil,
            messages: [LexRuntimeV2ClientTypes.Message]? = nil
        )
        {
            self.eventId = eventId
            self.messages = messages
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Event sent from Amazon Lex V2 to your client application that contains a transcript of voice audio.
    public struct TranscriptEvent: Swift.Sendable {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public var eventId: Swift.String?
        /// The transcript of the voice audio from the user.
        public var transcript: Swift.String?

        public init(
            eventId: Swift.String? = nil,
            transcript: Swift.String? = nil
        )
        {
            self.eventId = eventId
            self.transcript = transcript
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The specific constituent sub slot of the composite slot to elicit in dialog action.
    public struct ElicitSubSlot: Swift.Sendable {
        /// The name of the slot that should be elicited from the user.
        /// This member is required.
        public var name: Swift.String?
        /// The field is not supported.
        @Indirect public var subSlotToElicit: LexRuntimeV2ClientTypes.ElicitSubSlot?

        public init(
            name: Swift.String? = nil,
            subSlotToElicit: LexRuntimeV2ClientTypes.ElicitSubSlot? = nil
        )
        {
            self.name = name
            self.subSlotToElicit = subSlotToElicit
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The next action that Amazon Lex V2 should take.
    public struct DialogAction: Swift.Sendable {
        /// Configures the slot to use spell-by-letter or spell-by-word style. When you use a style on a slot, users can spell out their input to make it clear to your bot.
        ///
        /// * Spell by letter - "b" "o" "b"
        ///
        /// * Spell by word - "b as in boy" "o as in oscar" "b as in boy"
        ///
        ///
        /// For more information, see [ Using spelling to enter slot values ](https://docs.aws.amazon.com/lexv2/latest/dg/spelling-styles.html).
        public var slotElicitationStyle: LexRuntimeV2ClientTypes.StyleType?
        /// The name of the slot that should be elicited from the user.
        public var slotToElicit: Swift.String?
        /// The name of the constituent sub slot of the composite slot specified in slotToElicit that should be elicited from the user.
        public var subSlotToElicit: LexRuntimeV2ClientTypes.ElicitSubSlot?
        /// The next action that the bot should take in its interaction with the user. The following values are possible:
        ///
        /// * Close – Indicates that there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.
        ///
        /// * ConfirmIntent – The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"
        ///
        /// * Delegate – The next action is determined by Amazon Lex V2.
        ///
        /// * ElicitIntent – The next action is to elicit an intent from the user.
        ///
        /// * ElicitSlot – The next action is to elicit a slot value from the user.
        /// This member is required.
        public var type: LexRuntimeV2ClientTypes.DialogActionType?

        public init(
            slotElicitationStyle: LexRuntimeV2ClientTypes.StyleType? = nil,
            slotToElicit: Swift.String? = nil,
            subSlotToElicit: LexRuntimeV2ClientTypes.ElicitSubSlot? = nil,
            type: LexRuntimeV2ClientTypes.DialogActionType? = nil
        )
        {
            self.slotElicitationStyle = slotElicitationStyle
            self.slotToElicit = slotToElicit
            self.subSlotToElicit = subSlotToElicit
            self.type = type
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// Provides an array of phrases that should be given preference when resolving values for a slot.
    public struct RuntimeHintDetails: Swift.Sendable {
        /// One or more strings that Amazon Lex V2 should look for in the input to the bot. Each phrase is given preference when deciding on slot values.
        public var runtimeHintValues: [LexRuntimeV2ClientTypes.RuntimeHintValue]?
        /// A map of constituent sub slot names inside a composite slot in the intent and the phrases that should be added for each sub slot. Inside each composite slot hints, this structure provides a mechanism to add granular sub slot phrases. Only sub slot hints are supported for composite slots. The intent name, composite slot name and the constituent sub slot names must exist.
        public var subSlotHints: [Swift.String: LexRuntimeV2ClientTypes.RuntimeHintDetails]?

        public init(
            runtimeHintValues: [LexRuntimeV2ClientTypes.RuntimeHintValue]? = nil,
            subSlotHints: [Swift.String: LexRuntimeV2ClientTypes.RuntimeHintDetails]? = nil
        )
        {
            self.runtimeHintValues = runtimeHintValues
            self.subSlotHints = subSlotHints
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// You can provide Amazon Lex V2 with hints to the phrases that a customer is likely to use for a slot. When a slot with hints is resolved, the phrases in the runtime hints are preferred in the resolution. You can provide hints for a maximum of 100 intents. You can provide a maximum of 100 slots. Before you can use runtime hints with an existing bot, you must first rebuild the bot. For more information, see [Using runtime hints to improve recognition of slot values](https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html).
    public struct RuntimeHints: Swift.Sendable {
        /// A list of the slots in the intent that should have runtime hints added, and the phrases that should be added for each slot. The first level of the slotHints map is the name of the intent. The second level is the name of the slot within the intent. For more information, see [Using hints to improve accuracy](https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html). The intent name and slot name must exist.
        public var slotHints: [Swift.String: [Swift.String: LexRuntimeV2ClientTypes.RuntimeHintDetails]]?

        public init(
            slotHints: [Swift.String: [Swift.String: LexRuntimeV2ClientTypes.RuntimeHintDetails]]? = nil
        )
        {
            self.slotHints = slotHints
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// A value that Amazon Lex V2 uses to fulfill an intent.
    public struct Slot: Swift.Sendable {
        /// When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
        public var shape: LexRuntimeV2ClientTypes.Shape?
        /// The constituent sub slots of a composite slot.
        public var subSlots: [Swift.String: LexRuntimeV2ClientTypes.Slot]?
        /// The current value of the slot.
        public var value: LexRuntimeV2ClientTypes.Value?
        /// A list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
        public var values: [LexRuntimeV2ClientTypes.Slot]?

        public init(
            shape: LexRuntimeV2ClientTypes.Shape? = nil,
            subSlots: [Swift.String: LexRuntimeV2ClientTypes.Slot]? = nil,
            value: LexRuntimeV2ClientTypes.Value? = nil,
            values: [LexRuntimeV2ClientTypes.Slot]? = nil
        )
        {
            self.shape = shape
            self.subSlots = subSlots
            self.value = value
            self.values = values
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The current intent that Amazon Lex V2 is attempting to fulfill.
    public struct Intent: Swift.Sendable {
        /// Indicates whether the intent has been Confirmed, Denied, or None if the confirmation stage has not yet been reached.
        public var confirmationState: LexRuntimeV2ClientTypes.ConfirmationState?
        /// The name of the intent.
        /// This member is required.
        public var name: Swift.String?
        /// A map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.
        public var slots: [Swift.String: LexRuntimeV2ClientTypes.Slot]?
        /// Indicates the fulfillment state for the intent. The meanings of each value are as follows:
        ///
        /// * Failed – The bot failed to fulfill the intent.
        ///
        /// * Fulfilled – The bot has completed fulfillment of the intent.
        ///
        /// * FulfillmentInProgress – The bot is in the middle of fulfilling the intent.
        ///
        /// * InProgress – The bot is in the middle of eliciting the slot values that are necessary to fulfill the intent.
        ///
        /// * ReadyForFulfillment – The bot has elicited all the slot values for the intent and is ready to fulfill the intent.
        ///
        /// * Waiting – The bot is waiting for a response from the user (limited to streaming conversations).
        public var state: LexRuntimeV2ClientTypes.IntentState?

        public init(
            confirmationState: LexRuntimeV2ClientTypes.ConfirmationState? = nil,
            name: Swift.String? = nil,
            slots: [Swift.String: LexRuntimeV2ClientTypes.Slot]? = nil,
            state: LexRuntimeV2ClientTypes.IntentState? = nil
        )
        {
            self.confirmationState = confirmationState
            self.name = name
            self.slots = slots
            self.state = state
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// An object containing information about an intent that Amazon Lex V2 determined might satisfy the user's utterance. The intents are ordered by the confidence score.
    public struct Interpretation: Swift.Sendable {
        /// A list of intents that might satisfy the user's utterance. The intents are ordered by the confidence score.
        public var intent: LexRuntimeV2ClientTypes.Intent?
        /// Specifies the service that interpreted the input.
        public var interpretationSource: LexRuntimeV2ClientTypes.InterpretationSource?
        /// Determines the threshold where Amazon Lex V2 will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.
        public var nluConfidence: LexRuntimeV2ClientTypes.ConfidenceScore?
        /// The sentiment expressed in an utterance. When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.
        public var sentimentResponse: LexRuntimeV2ClientTypes.SentimentResponse?

        public init(
            intent: LexRuntimeV2ClientTypes.Intent? = nil,
            interpretationSource: LexRuntimeV2ClientTypes.InterpretationSource? = nil,
            nluConfidence: LexRuntimeV2ClientTypes.ConfidenceScore? = nil,
            sentimentResponse: LexRuntimeV2ClientTypes.SentimentResponse? = nil
        )
        {
            self.intent = intent
            self.interpretationSource = interpretationSource
            self.nluConfidence = nluConfidence
            self.sentimentResponse = sentimentResponse
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The state of the user's session with Amazon Lex V2.
    public struct SessionState: Swift.Sendable {
        /// One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.
        public var activeContexts: [LexRuntimeV2ClientTypes.ActiveContext]?
        /// The next step that Amazon Lex V2 should take in the conversation with a user.
        public var dialogAction: LexRuntimeV2ClientTypes.DialogAction?
        /// The active intent that Amazon Lex V2 is processing.
        public var intent: LexRuntimeV2ClientTypes.Intent?
        /// A unique identifier for a specific request.
        public var originatingRequestId: Swift.String?
        /// Hints for phrases that a customer is likely to use for a slot. Amazon Lex V2 uses the hints to help determine the correct value of a slot.
        public var runtimeHints: LexRuntimeV2ClientTypes.RuntimeHints?
        /// Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.
        public var sessionAttributes: [Swift.String: Swift.String]?

        public init(
            activeContexts: [LexRuntimeV2ClientTypes.ActiveContext]? = nil,
            dialogAction: LexRuntimeV2ClientTypes.DialogAction? = nil,
            intent: LexRuntimeV2ClientTypes.Intent? = nil,
            originatingRequestId: Swift.String? = nil,
            runtimeHints: LexRuntimeV2ClientTypes.RuntimeHints? = nil,
            sessionAttributes: [Swift.String: Swift.String]? = nil
        )
        {
            self.activeContexts = activeContexts
            self.dialogAction = dialogAction
            self.intent = intent
            self.originatingRequestId = originatingRequestId
            self.runtimeHints = runtimeHints
            self.sessionAttributes = sessionAttributes
        }
    }
}

extension LexRuntimeV2ClientTypes {

    /// The initial event sent from the application to Amazon Lex V2 to configure the conversation, including session and request attributes and the response content type.
    public struct ConfigurationEvent: Swift.Sendable {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// Determines whether Amazon Lex V2 should send audio responses to the client application. Set this field to false when the client is operating in a playback mode where audio responses are played to the user. If the client isn't operating in playback mode, such as a text chat application, set this to true so that Amazon Lex V2 doesn't wait for the prompt to finish playing on the client.
        public var disablePlayback: Swift.Bool
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?
        /// Request-specific information passed between the client application and Amazon Lex V2. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes for prefix x-amz-lex:.
        public var requestAttributes: [Swift.String: Swift.String]?
        /// The message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.
        ///
        /// * If the value is text/plain;charset=utf-8, Amazon Lex V2 returns text in the response.
        ///
        /// * If the value begins with audio/, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the requestContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.
        ///
        /// * If the value is audio/pcm, the speech returned is audio/pcm in 16-bit, little-endian format.
        ///
        /// * The following are the accepted values:
        ///
        /// * audio/mpeg
        ///
        /// * audio/ogg
        ///
        /// * audio/pcm
        ///
        /// * audio/* (defaults to mpeg)
        ///
        /// * text/plain; charset=utf-8
        /// This member is required.
        public var responseContentType: Swift.String?
        /// The state of the user's session with Amazon Lex V2.
        public var sessionState: LexRuntimeV2ClientTypes.SessionState?
        /// A list of messages to send to the user. If you set the welcomeMessage field, you must also set the [DialogAction](https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html) structure's [type](https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html#lexv2-Type-runtime_DialogAction-type) field.
        public var welcomeMessages: [LexRuntimeV2ClientTypes.Message]?

        public init(
            clientTimestampMillis: Swift.Int = 0,
            disablePlayback: Swift.Bool = false,
            eventId: Swift.String? = nil,
            requestAttributes: [Swift.String: Swift.String]? = nil,
            responseContentType: Swift.String? = nil,
            sessionState: LexRuntimeV2ClientTypes.SessionState? = nil,
            welcomeMessages: [LexRuntimeV2ClientTypes.Message]? = nil
        )
        {
            self.clientTimestampMillis = clientTimestampMillis
            self.disablePlayback = disablePlayback
            self.eventId = eventId
            self.requestAttributes = requestAttributes
            self.responseContentType = responseContentType
            self.sessionState = sessionState
            self.welcomeMessages = welcomeMessages
        }
    }
}

public struct PutSessionInput: Swift.Sendable {
    /// The alias identifier of the bot that receives the session data.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that receives the session data.
    /// This member is required.
    public var botId: Swift.String?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
    public var messages: [LexRuntimeV2ClientTypes.Message]?
    /// Request-specific information passed between Amazon Lex V2 and the client application. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:.
    public var requestAttributes: [Swift.String: Swift.String]?
    /// The message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter.
    ///
    /// * If the value is text/plain; charset=utf-8, Amazon Lex V2 returns text in the response.
    public var responseContentType: Swift.String?
    /// The identifier of the session that receives the session data.
    /// This member is required.
    public var sessionId: Swift.String?
    /// Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.
    /// This member is required.
    public var sessionState: LexRuntimeV2ClientTypes.SessionState?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        messages: [LexRuntimeV2ClientTypes.Message]? = nil,
        requestAttributes: [Swift.String: Swift.String]? = nil,
        responseContentType: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        sessionState: LexRuntimeV2ClientTypes.SessionState? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.localeId = localeId
        self.messages = messages
        self.requestAttributes = requestAttributes
        self.responseContentType = responseContentType
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}

public struct RecognizeTextInput: Swift.Sendable {
    /// The alias identifier in use for the bot that processes the request.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that processes the request.
    /// This member is required.
    public var botId: Swift.String?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// Request-specific information passed between the client application and Amazon Lex V2 The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:.
    public var requestAttributes: [Swift.String: Swift.String]?
    /// The identifier of the user session that is having the conversation.
    /// This member is required.
    public var sessionId: Swift.String?
    /// The current state of the dialog between the user and the bot.
    public var sessionState: LexRuntimeV2ClientTypes.SessionState?
    /// The text that the user entered. Amazon Lex V2 interprets this text.
    /// This member is required.
    public var text: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        requestAttributes: [Swift.String: Swift.String]? = nil,
        sessionId: Swift.String? = nil,
        sessionState: LexRuntimeV2ClientTypes.SessionState? = nil,
        text: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.localeId = localeId
        self.requestAttributes = requestAttributes
        self.sessionId = sessionId
        self.sessionState = sessionState
        self.text = text
    }
}

extension RecognizeTextInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecognizeTextInput(botAliasId: \(Swift.String(describing: botAliasId)), botId: \(Swift.String(describing: botId)), localeId: \(Swift.String(describing: localeId)), requestAttributes: \(Swift.String(describing: requestAttributes)), sessionId: \(Swift.String(describing: sessionId)), sessionState: \(Swift.String(describing: sessionState)), text: \"CONTENT_REDACTED\")"}
}

extension LexRuntimeV2ClientTypes {

    /// Represents a stream of events between your application and Amazon Lex V2.
    public indirect enum StartConversationRequestEventStream: Swift.Sendable {
        /// Configuration information sent from your client application to Amazon Lex V2
        case configurationevent(LexRuntimeV2ClientTypes.ConfigurationEvent)
        /// Speech audio sent from your client application to Amazon Lex V2. Audio starts accumulating when Amazon Lex V2 identifies a voice and continues until a natural pause in the speech is found before processing.
        case audioinputevent(LexRuntimeV2ClientTypes.AudioInputEvent)
        /// DTMF information sent to Amazon Lex V2 by your application. Amazon Lex V2 accumulates the DMTF information from when the user sends the first character and ends
        ///
        /// * when there's a pause longer that the value configured for the end timeout.
        ///
        /// * when there's a digit that is the configured end character.
        ///
        /// * when Amazon Lex V2 accumulates characters equal to the maximum DTMF character configuration.
        case dtmfinputevent(LexRuntimeV2ClientTypes.DTMFInputEvent)
        /// Text sent from your client application to Amazon Lex V2. Each TextInputEvent is processed individually.
        case textinputevent(LexRuntimeV2ClientTypes.TextInputEvent)
        /// Event sent from the client application to Amazon Lex V2 to indicate that it has finished playing audio and that Amazon Lex V2 should start listening for user input.
        case playbackcompletionevent(LexRuntimeV2ClientTypes.PlaybackCompletionEvent)
        /// Event sent from the client application to indicate to Amazon Lex V2 that the conversation is over.
        case disconnectionevent(LexRuntimeV2ClientTypes.DisconnectionEvent)
        case sdkUnknown(Swift.String)
    }
}

public struct StartConversationInput: Swift.Sendable {
    /// The alias identifier in use for the bot that processes the request.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot to process the request.
    /// This member is required.
    public var botId: Swift.String?
    /// The conversation type that you are using the Amazon Lex V2. If the conversation mode is AUDIO you can send both audio and DTMF information. If the mode is TEXT you can only send text.
    public var conversationMode: LexRuntimeV2ClientTypes.ConversationMode?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// Represents the stream of events to Amazon Lex V2 from your application. The events are encoded as HTTP/2 data frames.
    /// This member is required.
    public var requestEventStream: AsyncThrowingStream<LexRuntimeV2ClientTypes.StartConversationRequestEventStream, Swift.Error>?
    /// The identifier of the user session that is having the conversation.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        conversationMode: LexRuntimeV2ClientTypes.ConversationMode? = nil,
        localeId: Swift.String? = nil,
        requestEventStream: AsyncThrowingStream<LexRuntimeV2ClientTypes.StartConversationRequestEventStream, Swift.Error>? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.conversationMode = conversationMode
        self.localeId = localeId
        self.requestEventStream = requestEventStream
        self.sessionId = sessionId
    }
}

extension LexRuntimeV2ClientTypes {

    /// Contains the current state of the conversation between the client application and Amazon Lex V2.
    public struct IntentResultEvent: Swift.Sendable {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public var eventId: Swift.String?
        /// Indicates whether the input to the operation was text, speech, or from a touch-tone keypad.
        public var inputMode: LexRuntimeV2ClientTypes.InputMode?
        /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance. Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.
        public var interpretations: [LexRuntimeV2ClientTypes.Interpretation]?
        /// The bot member that is processing the intent.
        public var recognizedBotMember: LexRuntimeV2ClientTypes.RecognizedBotMember?
        /// The attributes sent in the request.
        public var requestAttributes: [Swift.String: Swift.String]?
        /// The identifier of the session in use.
        public var sessionId: Swift.String?
        /// The state of the user's session with Amazon Lex V2.
        public var sessionState: LexRuntimeV2ClientTypes.SessionState?

        public init(
            eventId: Swift.String? = nil,
            inputMode: LexRuntimeV2ClientTypes.InputMode? = nil,
            interpretations: [LexRuntimeV2ClientTypes.Interpretation]? = nil,
            recognizedBotMember: LexRuntimeV2ClientTypes.RecognizedBotMember? = nil,
            requestAttributes: [Swift.String: Swift.String]? = nil,
            sessionId: Swift.String? = nil,
            sessionState: LexRuntimeV2ClientTypes.SessionState? = nil
        )
        {
            self.eventId = eventId
            self.inputMode = inputMode
            self.interpretations = interpretations
            self.recognizedBotMember = recognizedBotMember
            self.requestAttributes = requestAttributes
            self.sessionId = sessionId
            self.sessionState = sessionState
        }
    }
}

public struct GetSessionOutput: Swift.Sendable {
    /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance. Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.
    public var interpretations: [LexRuntimeV2ClientTypes.Interpretation]?
    /// A list of messages that were last sent to the user. The messages are ordered based on the order that your returned the messages from your Lambda function or the order that messages are defined in the bot.
    public var messages: [LexRuntimeV2ClientTypes.Message]?
    /// The identifier of the returned session.
    public var sessionId: Swift.String?
    /// Represents the current state of the dialog between the user and the bot. You can use this to determine the progress of the conversation and what the next action might be.
    public var sessionState: LexRuntimeV2ClientTypes.SessionState?

    public init(
        interpretations: [LexRuntimeV2ClientTypes.Interpretation]? = nil,
        messages: [LexRuntimeV2ClientTypes.Message]? = nil,
        sessionId: Swift.String? = nil,
        sessionState: LexRuntimeV2ClientTypes.SessionState? = nil
    )
    {
        self.interpretations = interpretations
        self.messages = messages
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}

public struct RecognizeTextOutput: Swift.Sendable {
    /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance. Each interpretation includes the intent, a score that indicates now confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.
    public var interpretations: [LexRuntimeV2ClientTypes.Interpretation]?
    /// A list of messages last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.
    public var messages: [LexRuntimeV2ClientTypes.Message]?
    /// The bot member that recognized the text.
    public var recognizedBotMember: LexRuntimeV2ClientTypes.RecognizedBotMember?
    /// The attributes sent in the request.
    public var requestAttributes: [Swift.String: Swift.String]?
    /// The identifier of the session in use.
    public var sessionId: Swift.String?
    /// Represents the current state of the dialog between the user and the bot. Use this to determine the progress of the conversation and what the next action may be.
    public var sessionState: LexRuntimeV2ClientTypes.SessionState?

    public init(
        interpretations: [LexRuntimeV2ClientTypes.Interpretation]? = nil,
        messages: [LexRuntimeV2ClientTypes.Message]? = nil,
        recognizedBotMember: LexRuntimeV2ClientTypes.RecognizedBotMember? = nil,
        requestAttributes: [Swift.String: Swift.String]? = nil,
        sessionId: Swift.String? = nil,
        sessionState: LexRuntimeV2ClientTypes.SessionState? = nil
    )
    {
        self.interpretations = interpretations
        self.messages = messages
        self.recognizedBotMember = recognizedBotMember
        self.requestAttributes = requestAttributes
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}

extension LexRuntimeV2ClientTypes {

    /// Represents a stream of events between Amazon Lex V2 and your application.
    public indirect enum StartConversationResponseEventStream: Swift.Sendable {
        /// Event sent from Amazon Lex V2 to indicate to the client application should stop playback of audio. For example, if the client is playing a prompt that asks for the user's telephone number, the user might start to say the phone number before the prompt is complete. Amazon Lex V2 sends this event to the client application to indicate that the user is responding and that Amazon Lex V2 is processing their input.
        case playbackinterruptionevent(LexRuntimeV2ClientTypes.PlaybackInterruptionEvent)
        /// Event sent from Amazon Lex V2 to your client application that contains a transcript of voice audio.
        case transcriptevent(LexRuntimeV2ClientTypes.TranscriptEvent)
        /// Event sent from Amazon Lex V2 to the client application containing the current state of the conversation between the user and Amazon Lex V2.
        case intentresultevent(LexRuntimeV2ClientTypes.IntentResultEvent)
        /// The event sent from Amazon Lex V2 to your application with text to present to the user.
        case textresponseevent(LexRuntimeV2ClientTypes.TextResponseEvent)
        /// An event sent from Amazon Lex V2 to your client application containing audio to play to the user.
        case audioresponseevent(LexRuntimeV2ClientTypes.AudioResponseEvent)
        /// Event that Amazon Lex V2 sends to indicate that the stream is still open between the client application and Amazon Lex V2
        case heartbeatevent(LexRuntimeV2ClientTypes.HeartbeatEvent)
        case sdkUnknown(Swift.String)
    }
}

public struct StartConversationOutput: Swift.Sendable {
    /// Represents the stream of events from Amazon Lex V2 to your application. The events are encoded as HTTP/2 data frames.
    public var responseEventStream: AsyncThrowingStream<LexRuntimeV2ClientTypes.StartConversationResponseEventStream, Swift.Error>?

    public init(
        responseEventStream: AsyncThrowingStream<LexRuntimeV2ClientTypes.StartConversationResponseEventStream, Swift.Error>? = nil
    )
    {
        self.responseEventStream = responseEventStream
    }
}

extension DeleteSessionInput {

    static func urlPathProvider(_ value: DeleteSessionInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botAliases/\(botAliasId.urlPercentEncoding())/botLocales/\(localeId.urlPercentEncoding())/sessions/\(sessionId.urlPercentEncoding())"
    }
}

extension GetSessionInput {

    static func urlPathProvider(_ value: GetSessionInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botAliases/\(botAliasId.urlPercentEncoding())/botLocales/\(localeId.urlPercentEncoding())/sessions/\(sessionId.urlPercentEncoding())"
    }
}

extension PutSessionInput {

    static func urlPathProvider(_ value: PutSessionInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botAliases/\(botAliasId.urlPercentEncoding())/botLocales/\(localeId.urlPercentEncoding())/sessions/\(sessionId.urlPercentEncoding())"
    }
}

extension PutSessionInput {

    static func headerProvider(_ value: PutSessionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let responseContentType = value.responseContentType {
            items.add(SmithyHTTPAPI.Header(name: "ResponseContentType", value: Swift.String(responseContentType)))
        }
        return items
    }
}

extension RecognizeTextInput {

    static func urlPathProvider(_ value: RecognizeTextInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botAliases/\(botAliasId.urlPercentEncoding())/botLocales/\(localeId.urlPercentEncoding())/sessions/\(sessionId.urlPercentEncoding())/text"
    }
}

extension RecognizeUtteranceInput {

    static func urlPathProvider(_ value: RecognizeUtteranceInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botAliases/\(botAliasId.urlPercentEncoding())/botLocales/\(localeId.urlPercentEncoding())/sessions/\(sessionId.urlPercentEncoding())/utterance"
    }
}

extension RecognizeUtteranceInput {

    static func headerProvider(_ value: RecognizeUtteranceInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let requestAttributes = value.requestAttributes {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-lex-request-attributes", value: Swift.String(requestAttributes)))
        }
        if let requestContentType = value.requestContentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(requestContentType)))
        }
        if let responseContentType = value.responseContentType {
            items.add(SmithyHTTPAPI.Header(name: "Response-Content-Type", value: Swift.String(responseContentType)))
        }
        if let sessionState = value.sessionState {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-lex-session-state", value: Swift.String(sessionState)))
        }
        return items
    }
}

extension StartConversationInput {

    static func urlPathProvider(_ value: StartConversationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botAliases/\(botAliasId.urlPercentEncoding())/botLocales/\(localeId.urlPercentEncoding())/sessions/\(sessionId.urlPercentEncoding())/conversation"
    }
}

extension StartConversationInput {

    static func headerProvider(_ value: StartConversationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let conversationMode = value.conversationMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-lex-conversation-mode", value: Swift.String(conversationMode.rawValue)))
        }
        return items
    }
}

extension PutSessionInput {

    static func write(value: PutSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["messages"].writeList(value.messages, memberWritingClosure: LexRuntimeV2ClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["requestAttributes"].writeMap(value.requestAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["sessionState"].write(value.sessionState, with: LexRuntimeV2ClientTypes.SessionState.write(value:to:))
    }
}

extension RecognizeTextInput {

    static func write(value: RecognizeTextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["requestAttributes"].writeMap(value.requestAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["sessionState"].write(value.sessionState, with: LexRuntimeV2ClientTypes.SessionState.write(value:to:))
        try writer["text"].write(value.text)
    }
}

extension RecognizeUtteranceInput {

    static func write(value: RecognizeUtteranceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputStream"].write(value.inputStream)
    }
}

extension DeleteSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteSessionOutput()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botId = try reader["botId"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.sessionId = try reader["sessionId"].readIfPresent()
        return value
    }
}

extension GetSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSessionOutput()
        value.interpretations = try reader["interpretations"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Interpretation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.sessionState = try reader["sessionState"].readIfPresent(with: LexRuntimeV2ClientTypes.SessionState.read(from:))
        return value
    }
}

extension PutSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSessionOutput {
        var value = PutSessionOutput()
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let messagesHeaderValue = httpResponse.headers.value(for: "x-amz-lex-messages") {
            value.messages = messagesHeaderValue
        }
        if let requestAttributesHeaderValue = httpResponse.headers.value(for: "x-amz-lex-request-attributes") {
            value.requestAttributes = requestAttributesHeaderValue
        }
        if let sessionIdHeaderValue = httpResponse.headers.value(for: "x-amz-lex-session-id") {
            value.sessionId = sessionIdHeaderValue
        }
        if let sessionStateHeaderValue = httpResponse.headers.value(for: "x-amz-lex-session-state") {
            value.sessionState = sessionStateHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.audioStream = .data(data)
        case .stream(let stream):
            value.audioStream = .stream(stream)
        case .noStream:
            value.audioStream = nil
        }
        return value
    }
}

extension RecognizeTextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RecognizeTextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RecognizeTextOutput()
        value.interpretations = try reader["interpretations"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Interpretation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.recognizedBotMember = try reader["recognizedBotMember"].readIfPresent(with: LexRuntimeV2ClientTypes.RecognizedBotMember.read(from:))
        value.requestAttributes = try reader["requestAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.sessionState = try reader["sessionState"].readIfPresent(with: LexRuntimeV2ClientTypes.SessionState.read(from:))
        return value
    }
}

extension RecognizeUtteranceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RecognizeUtteranceOutput {
        var value = RecognizeUtteranceOutput()
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let inputModeHeaderValue = httpResponse.headers.value(for: "x-amz-lex-input-mode") {
            value.inputMode = inputModeHeaderValue
        }
        if let inputTranscriptHeaderValue = httpResponse.headers.value(for: "x-amz-lex-input-transcript") {
            value.inputTranscript = inputTranscriptHeaderValue
        }
        if let interpretationsHeaderValue = httpResponse.headers.value(for: "x-amz-lex-interpretations") {
            value.interpretations = interpretationsHeaderValue
        }
        if let messagesHeaderValue = httpResponse.headers.value(for: "x-amz-lex-messages") {
            value.messages = messagesHeaderValue
        }
        if let recognizedBotMemberHeaderValue = httpResponse.headers.value(for: "x-amz-lex-recognized-bot-member") {
            value.recognizedBotMember = recognizedBotMemberHeaderValue
        }
        if let requestAttributesHeaderValue = httpResponse.headers.value(for: "x-amz-lex-request-attributes") {
            value.requestAttributes = requestAttributesHeaderValue
        }
        if let sessionIdHeaderValue = httpResponse.headers.value(for: "x-amz-lex-session-id") {
            value.sessionId = sessionIdHeaderValue
        }
        if let sessionStateHeaderValue = httpResponse.headers.value(for: "x-amz-lex-session-state") {
            value.sessionState = sessionStateHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.audioStream = .data(data)
        case .stream(let stream):
            value.audioStream = .stream(stream)
        case .noStream:
            value.audioStream = nil
        }
        return value
    }
}

extension StartConversationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartConversationOutput {
        var value = StartConversationOutput()
        if case .stream(let stream) = httpResponse.body {
            let messageDecoder = SmithyEventStreams.DefaultMessageDecoder()
            let decoderStream = SmithyEventStreams.DefaultMessageDecoderStream(stream: stream, messageDecoder: messageDecoder, unmarshalClosure: LexRuntimeV2ClientTypes.StartConversationResponseEventStream.unmarshal)
            value.responseEventStream = decoderStream.toAsyncStream()
        }
        return value
    }
}

enum DeleteSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DependencyFailedException": return try DependencyFailedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RecognizeTextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DependencyFailedException": return try DependencyFailedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RecognizeUtteranceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadGatewayException": return try BadGatewayException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DependencyFailedException": return try DependencyFailedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartConversationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadGatewayException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadGatewayException {
        let reader = baseError.errorBodyReader
        var value = BadGatewayException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DependencyFailedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DependencyFailedException {
        let reader = baseError.errorBodyReader
        var value = DependencyFailedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LexRuntimeV2ClientTypes.StartConversationRequestEventStream {
    static var marshal: SmithyEventStreamsAPI.MarshalClosure<LexRuntimeV2ClientTypes.StartConversationRequestEventStream> {
        { (self) in
            var headers: [SmithyEventStreamsAPI.Header] = [.init(name: ":message-type", value: .string("event"))]
            var payload: Foundation.Data? = nil
            switch self {
            case .configurationevent(let value):
                headers.append(.init(name: ":event-type", value: .string("ConfigurationEvent")))
                headers.append(.init(name: ":content-type", value: .string("application/json")))
                let writer = SmithyJSON.Writer(nodeInfo: "")
                try writer["requestAttributes"].write(value.requestAttributes, with: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false))
                try writer["responseContentType"].write(value.responseContentType, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["sessionState"].write(value.sessionState, with: LexRuntimeV2ClientTypes.SessionState.write(value:to:))
                try writer["welcomeMessages"].write(value.welcomeMessages, with: SmithyReadWrite.listWritingClosure(memberWritingClosure: LexRuntimeV2ClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false))
                try writer["disablePlayback"].write(value.disablePlayback, with: SmithyReadWrite.WritingClosures.writeBool(value:to:))
                try writer["eventId"].write(value.eventId, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["clientTimestampMillis"].write(value.clientTimestampMillis, with: SmithyReadWrite.WritingClosures.writeInt(value:to:))
                payload = try writer.data()
            case .audioinputevent(let value):
                headers.append(.init(name: ":event-type", value: .string("AudioInputEvent")))
                headers.append(.init(name: ":content-type", value: .string("application/json")))
                let writer = SmithyJSON.Writer(nodeInfo: "")
                try writer["audioChunk"].write(value.audioChunk, with: SmithyReadWrite.WritingClosures.writeData(value:to:))
                try writer["contentType"].write(value.contentType, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["eventId"].write(value.eventId, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["clientTimestampMillis"].write(value.clientTimestampMillis, with: SmithyReadWrite.WritingClosures.writeInt(value:to:))
                payload = try writer.data()
            case .dtmfinputevent(let value):
                headers.append(.init(name: ":event-type", value: .string("DTMFInputEvent")))
                headers.append(.init(name: ":content-type", value: .string("application/json")))
                let writer = SmithyJSON.Writer(nodeInfo: "")
                try writer["inputCharacter"].write(value.inputCharacter, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["eventId"].write(value.eventId, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["clientTimestampMillis"].write(value.clientTimestampMillis, with: SmithyReadWrite.WritingClosures.writeInt(value:to:))
                payload = try writer.data()
            case .textinputevent(let value):
                headers.append(.init(name: ":event-type", value: .string("TextInputEvent")))
                headers.append(.init(name: ":content-type", value: .string("application/json")))
                let writer = SmithyJSON.Writer(nodeInfo: "")
                try writer["text"].write(value.text, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["eventId"].write(value.eventId, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["clientTimestampMillis"].write(value.clientTimestampMillis, with: SmithyReadWrite.WritingClosures.writeInt(value:to:))
                payload = try writer.data()
            case .playbackcompletionevent(let value):
                headers.append(.init(name: ":event-type", value: .string("PlaybackCompletionEvent")))
                headers.append(.init(name: ":content-type", value: .string("application/json")))
                let writer = SmithyJSON.Writer(nodeInfo: "")
                try writer["eventId"].write(value.eventId, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["clientTimestampMillis"].write(value.clientTimestampMillis, with: SmithyReadWrite.WritingClosures.writeInt(value:to:))
                payload = try writer.data()
            case .disconnectionevent(let value):
                headers.append(.init(name: ":event-type", value: .string("DisconnectionEvent")))
                headers.append(.init(name: ":content-type", value: .string("application/json")))
                let writer = SmithyJSON.Writer(nodeInfo: "")
                try writer["eventId"].write(value.eventId, with: SmithyReadWrite.WritingClosures.writeString(value:to:))
                try writer["clientTimestampMillis"].write(value.clientTimestampMillis, with: SmithyReadWrite.WritingClosures.writeInt(value:to:))
                payload = try writer.data()
            case .sdkUnknown(_):
                throw Smithy.ClientError.unknownError("cannot serialize the unknown event type!")
            }
            return SmithyEventStreamsAPI.Message(headers: headers, payload: payload ?? .init())
        }
    }
}

extension LexRuntimeV2ClientTypes.StartConversationResponseEventStream {
    static var unmarshal: SmithyEventStreamsAPI.UnmarshalClosure<LexRuntimeV2ClientTypes.StartConversationResponseEventStream> {
        { message in
            switch try message.type() {
            case .event(let params):
                switch params.eventType {
                case "PlaybackInterruptionEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: LexRuntimeV2ClientTypes.PlaybackInterruptionEvent.read(from:))
                    return .playbackinterruptionevent(value)
                case "TranscriptEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: LexRuntimeV2ClientTypes.TranscriptEvent.read(from:))
                    return .transcriptevent(value)
                case "IntentResultEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: LexRuntimeV2ClientTypes.IntentResultEvent.read(from:))
                    return .intentresultevent(value)
                case "TextResponseEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: LexRuntimeV2ClientTypes.TextResponseEvent.read(from:))
                    return .textresponseevent(value)
                case "AudioResponseEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: LexRuntimeV2ClientTypes.AudioResponseEvent.read(from:))
                    return .audioresponseevent(value)
                case "HeartbeatEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: LexRuntimeV2ClientTypes.HeartbeatEvent.read(from:))
                    return .heartbeatevent(value)
                default:
                    return .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
                }
            case .exception(let params):
                let makeError: (SmithyEventStreamsAPI.Message, SmithyEventStreamsAPI.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                    switch params.exceptionType {
                    case "AccessDeniedException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: AccessDeniedException.read(from:))
                        return value
                    case "ResourceNotFoundException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ResourceNotFoundException.read(from:))
                        return value
                    case "ValidationException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ValidationException.read(from:))
                        return value
                    case "ThrottlingException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ThrottlingException.read(from:))
                        return value
                    case "InternalServerException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: InternalServerException.read(from:))
                        return value
                    case "ConflictException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ConflictException.read(from:))
                        return value
                    case "DependencyFailedException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: DependencyFailedException.read(from:))
                        return value
                    case "BadGatewayException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: BadGatewayException.read(from:))
                        return value
                    default:
                        let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                        return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                    }
                }
                let error = try makeError(message, params)
                throw error
            case .error(let params):
                let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
            case .unknown(messageType: let messageType):
                throw Smithy.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
            }
        }
    }
}

extension LexRuntimeV2ClientTypes.Message {

    static func write(value: LexRuntimeV2ClientTypes.Message?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["content"].write(value.content)
        try writer["contentType"].write(value.contentType)
        try writer["imageResponseCard"].write(value.imageResponseCard, with: LexRuntimeV2ClientTypes.ImageResponseCard.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.Message {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.Message()
        value.content = try reader["content"].readIfPresent()
        value.contentType = try reader["contentType"].readIfPresent() ?? .sdkUnknown("")
        value.imageResponseCard = try reader["imageResponseCard"].readIfPresent(with: LexRuntimeV2ClientTypes.ImageResponseCard.read(from:))
        return value
    }
}

extension LexRuntimeV2ClientTypes.ImageResponseCard {

    static func write(value: LexRuntimeV2ClientTypes.ImageResponseCard?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["buttons"].writeList(value.buttons, memberWritingClosure: LexRuntimeV2ClientTypes.Button.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["imageUrl"].write(value.imageUrl)
        try writer["subtitle"].write(value.subtitle)
        try writer["title"].write(value.title)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.ImageResponseCard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.ImageResponseCard()
        value.title = try reader["title"].readIfPresent() ?? ""
        value.subtitle = try reader["subtitle"].readIfPresent()
        value.imageUrl = try reader["imageUrl"].readIfPresent()
        value.buttons = try reader["buttons"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Button.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexRuntimeV2ClientTypes.Button {

    static func write(value: LexRuntimeV2ClientTypes.Button?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["text"].write(value.text)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.Button {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.Button()
        value.text = try reader["text"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexRuntimeV2ClientTypes.Interpretation {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.Interpretation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.Interpretation()
        value.nluConfidence = try reader["nluConfidence"].readIfPresent(with: LexRuntimeV2ClientTypes.ConfidenceScore.read(from:))
        value.sentimentResponse = try reader["sentimentResponse"].readIfPresent(with: LexRuntimeV2ClientTypes.SentimentResponse.read(from:))
        value.intent = try reader["intent"].readIfPresent(with: LexRuntimeV2ClientTypes.Intent.read(from:))
        value.interpretationSource = try reader["interpretationSource"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.Intent {

    static func write(value: LexRuntimeV2ClientTypes.Intent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["confirmationState"].write(value.confirmationState)
        try writer["name"].write(value.name)
        try writer["slots"].writeMap(value.slots, valueWritingClosure: LexRuntimeV2ClientTypes.Slot.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["state"].write(value.state)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.Intent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.Intent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.slots = try reader["slots"].readMapIfPresent(valueReadingClosure: LexRuntimeV2ClientTypes.Slot.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        value.confirmationState = try reader["confirmationState"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.Slot {

    static func write(value: LexRuntimeV2ClientTypes.Slot?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["shape"].write(value.shape)
        try writer["subSlots"].writeMap(value.subSlots, valueWritingClosure: LexRuntimeV2ClientTypes.Slot.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["value"].write(value.value, with: LexRuntimeV2ClientTypes.Value.write(value:to:))
        try writer["values"].writeList(value.values, memberWritingClosure: LexRuntimeV2ClientTypes.Slot.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.Slot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.Slot()
        value.value = try reader["value"].readIfPresent(with: LexRuntimeV2ClientTypes.Value.read(from:))
        value.shape = try reader["shape"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Slot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subSlots = try reader["subSlots"].readMapIfPresent(valueReadingClosure: LexRuntimeV2ClientTypes.Slot.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexRuntimeV2ClientTypes.Value {

    static func write(value: LexRuntimeV2ClientTypes.Value?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["interpretedValue"].write(value.interpretedValue)
        try writer["originalValue"].write(value.originalValue)
        try writer["resolvedValues"].writeList(value.resolvedValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.Value {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.Value()
        value.originalValue = try reader["originalValue"].readIfPresent()
        value.interpretedValue = try reader["interpretedValue"].readIfPresent() ?? ""
        value.resolvedValues = try reader["resolvedValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexRuntimeV2ClientTypes.SentimentResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.SentimentResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.SentimentResponse()
        value.sentiment = try reader["sentiment"].readIfPresent()
        value.sentimentScore = try reader["sentimentScore"].readIfPresent(with: LexRuntimeV2ClientTypes.SentimentScore.read(from:))
        return value
    }
}

extension LexRuntimeV2ClientTypes.SentimentScore {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.SentimentScore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.SentimentScore()
        value.positive = try reader["positive"].readIfPresent() ?? 0
        value.negative = try reader["negative"].readIfPresent() ?? 0
        value.neutral = try reader["neutral"].readIfPresent() ?? 0
        value.mixed = try reader["mixed"].readIfPresent() ?? 0
        return value
    }
}

extension LexRuntimeV2ClientTypes.ConfidenceScore {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.ConfidenceScore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.ConfidenceScore()
        value.score = try reader["score"].readIfPresent() ?? 0
        return value
    }
}

extension LexRuntimeV2ClientTypes.SessionState {

    static func write(value: LexRuntimeV2ClientTypes.SessionState?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["activeContexts"].writeList(value.activeContexts, memberWritingClosure: LexRuntimeV2ClientTypes.ActiveContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dialogAction"].write(value.dialogAction, with: LexRuntimeV2ClientTypes.DialogAction.write(value:to:))
        try writer["intent"].write(value.intent, with: LexRuntimeV2ClientTypes.Intent.write(value:to:))
        try writer["originatingRequestId"].write(value.originatingRequestId)
        try writer["runtimeHints"].write(value.runtimeHints, with: LexRuntimeV2ClientTypes.RuntimeHints.write(value:to:))
        try writer["sessionAttributes"].writeMap(value.sessionAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.SessionState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.SessionState()
        value.dialogAction = try reader["dialogAction"].readIfPresent(with: LexRuntimeV2ClientTypes.DialogAction.read(from:))
        value.intent = try reader["intent"].readIfPresent(with: LexRuntimeV2ClientTypes.Intent.read(from:))
        value.activeContexts = try reader["activeContexts"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.ActiveContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sessionAttributes = try reader["sessionAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.originatingRequestId = try reader["originatingRequestId"].readIfPresent()
        value.runtimeHints = try reader["runtimeHints"].readIfPresent(with: LexRuntimeV2ClientTypes.RuntimeHints.read(from:))
        return value
    }
}

extension LexRuntimeV2ClientTypes.RuntimeHints {

    static func write(value: LexRuntimeV2ClientTypes.RuntimeHints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slotHints"].writeMap(value.slotHints, valueWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: LexRuntimeV2ClientTypes.RuntimeHintDetails.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.RuntimeHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.RuntimeHints()
        value.slotHints = try reader["slotHints"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: LexRuntimeV2ClientTypes.RuntimeHintDetails.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexRuntimeV2ClientTypes.RuntimeHintDetails {

    static func write(value: LexRuntimeV2ClientTypes.RuntimeHintDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["runtimeHintValues"].writeList(value.runtimeHintValues, memberWritingClosure: LexRuntimeV2ClientTypes.RuntimeHintValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subSlotHints"].writeMap(value.subSlotHints, valueWritingClosure: LexRuntimeV2ClientTypes.RuntimeHintDetails.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.RuntimeHintDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.RuntimeHintDetails()
        value.runtimeHintValues = try reader["runtimeHintValues"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.RuntimeHintValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subSlotHints = try reader["subSlotHints"].readMapIfPresent(valueReadingClosure: LexRuntimeV2ClientTypes.RuntimeHintDetails.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexRuntimeV2ClientTypes.RuntimeHintValue {

    static func write(value: LexRuntimeV2ClientTypes.RuntimeHintValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["phrase"].write(value.phrase)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.RuntimeHintValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.RuntimeHintValue()
        value.phrase = try reader["phrase"].readIfPresent() ?? ""
        return value
    }
}

extension LexRuntimeV2ClientTypes.ActiveContext {

    static func write(value: LexRuntimeV2ClientTypes.ActiveContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["contextAttributes"].writeMap(value.contextAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["timeToLive"].write(value.timeToLive, with: LexRuntimeV2ClientTypes.ActiveContextTimeToLive.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.ActiveContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.ActiveContext()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.timeToLive = try reader["timeToLive"].readIfPresent(with: LexRuntimeV2ClientTypes.ActiveContextTimeToLive.read(from:))
        value.contextAttributes = try reader["contextAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension LexRuntimeV2ClientTypes.ActiveContextTimeToLive {

    static func write(value: LexRuntimeV2ClientTypes.ActiveContextTimeToLive?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["timeToLiveInSeconds"].write(value.timeToLiveInSeconds)
        try writer["turnsToLive"].write(value.turnsToLive)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.ActiveContextTimeToLive {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.ActiveContextTimeToLive()
        value.timeToLiveInSeconds = try reader["timeToLiveInSeconds"].readIfPresent() ?? 0
        value.turnsToLive = try reader["turnsToLive"].readIfPresent() ?? 0
        return value
    }
}

extension LexRuntimeV2ClientTypes.DialogAction {

    static func write(value: LexRuntimeV2ClientTypes.DialogAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slotElicitationStyle"].write(value.slotElicitationStyle)
        try writer["slotToElicit"].write(value.slotToElicit)
        try writer["subSlotToElicit"].write(value.subSlotToElicit, with: LexRuntimeV2ClientTypes.ElicitSubSlot.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.DialogAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.DialogAction()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.slotToElicit = try reader["slotToElicit"].readIfPresent()
        value.slotElicitationStyle = try reader["slotElicitationStyle"].readIfPresent()
        value.subSlotToElicit = try reader["subSlotToElicit"].readIfPresent(with: LexRuntimeV2ClientTypes.ElicitSubSlot.read(from:))
        return value
    }
}

extension LexRuntimeV2ClientTypes.ElicitSubSlot {

    static func write(value: LexRuntimeV2ClientTypes.ElicitSubSlot?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["subSlotToElicit"].write(value.subSlotToElicit, with: LexRuntimeV2ClientTypes.ElicitSubSlot.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.ElicitSubSlot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.ElicitSubSlot()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.subSlotToElicit = try reader["subSlotToElicit"].readIfPresent(with: LexRuntimeV2ClientTypes.ElicitSubSlot.read(from:))
        return value
    }
}

extension LexRuntimeV2ClientTypes.RecognizedBotMember {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.RecognizedBotMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.RecognizedBotMember()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botName = try reader["botName"].readIfPresent()
        return value
    }
}

extension BadGatewayException {

    static func read(from reader: SmithyJSON.Reader) throws -> BadGatewayException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BadGatewayException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension DependencyFailedException {

    static func read(from reader: SmithyJSON.Reader) throws -> DependencyFailedException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DependencyFailedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension ConflictException {

    static func read(from reader: SmithyJSON.Reader) throws -> ConflictException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension InternalServerException {

    static func read(from reader: SmithyJSON.Reader) throws -> InternalServerException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension ThrottlingException {

    static func read(from reader: SmithyJSON.Reader) throws -> ThrottlingException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension ValidationException {

    static func read(from reader: SmithyJSON.Reader) throws -> ValidationException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension ResourceNotFoundException {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceNotFoundException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension AccessDeniedException {

    static func read(from reader: SmithyJSON.Reader) throws -> AccessDeniedException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension LexRuntimeV2ClientTypes.HeartbeatEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.HeartbeatEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.HeartbeatEvent()
        value.eventId = try reader["eventId"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.AudioResponseEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.AudioResponseEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.AudioResponseEvent()
        value.audioChunk = try reader["audioChunk"].readIfPresent()
        value.contentType = try reader["contentType"].readIfPresent()
        value.eventId = try reader["eventId"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.TextResponseEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.TextResponseEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.TextResponseEvent()
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eventId = try reader["eventId"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.IntentResultEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.IntentResultEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.IntentResultEvent()
        value.inputMode = try reader["inputMode"].readIfPresent()
        value.interpretations = try reader["interpretations"].readListIfPresent(memberReadingClosure: LexRuntimeV2ClientTypes.Interpretation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sessionState = try reader["sessionState"].readIfPresent(with: LexRuntimeV2ClientTypes.SessionState.read(from:))
        value.requestAttributes = try reader["requestAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.eventId = try reader["eventId"].readIfPresent()
        value.recognizedBotMember = try reader["recognizedBotMember"].readIfPresent(with: LexRuntimeV2ClientTypes.RecognizedBotMember.read(from:))
        return value
    }
}

extension LexRuntimeV2ClientTypes.TranscriptEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.TranscriptEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.TranscriptEvent()
        value.transcript = try reader["transcript"].readIfPresent()
        value.eventId = try reader["eventId"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.PlaybackInterruptionEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexRuntimeV2ClientTypes.PlaybackInterruptionEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexRuntimeV2ClientTypes.PlaybackInterruptionEvent()
        value.eventReason = try reader["eventReason"].readIfPresent()
        value.causedByEventId = try reader["causedByEventId"].readIfPresent()
        value.eventId = try reader["eventId"].readIfPresent()
        return value
    }
}

extension LexRuntimeV2ClientTypes.DisconnectionEvent {

    static func write(value: LexRuntimeV2ClientTypes.DisconnectionEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientTimestampMillis"].write(value.clientTimestampMillis)
        try writer["eventId"].write(value.eventId)
    }
}

extension LexRuntimeV2ClientTypes.PlaybackCompletionEvent {

    static func write(value: LexRuntimeV2ClientTypes.PlaybackCompletionEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientTimestampMillis"].write(value.clientTimestampMillis)
        try writer["eventId"].write(value.eventId)
    }
}

extension LexRuntimeV2ClientTypes.TextInputEvent {

    static func write(value: LexRuntimeV2ClientTypes.TextInputEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientTimestampMillis"].write(value.clientTimestampMillis)
        try writer["eventId"].write(value.eventId)
        try writer["text"].write(value.text)
    }
}

extension LexRuntimeV2ClientTypes.DTMFInputEvent {

    static func write(value: LexRuntimeV2ClientTypes.DTMFInputEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientTimestampMillis"].write(value.clientTimestampMillis)
        try writer["eventId"].write(value.eventId)
        try writer["inputCharacter"].write(value.inputCharacter)
    }
}

extension LexRuntimeV2ClientTypes.AudioInputEvent {

    static func write(value: LexRuntimeV2ClientTypes.AudioInputEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioChunk"].write(value.audioChunk)
        try writer["clientTimestampMillis"].write(value.clientTimestampMillis)
        try writer["contentType"].write(value.contentType)
        try writer["eventId"].write(value.eventId)
    }
}

extension LexRuntimeV2ClientTypes.ConfigurationEvent {

    static func write(value: LexRuntimeV2ClientTypes.ConfigurationEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientTimestampMillis"].write(value.clientTimestampMillis)
        try writer["disablePlayback"].write(value.disablePlayback)
        try writer["eventId"].write(value.eventId)
        try writer["requestAttributes"].writeMap(value.requestAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["responseContentType"].write(value.responseContentType)
        try writer["sessionState"].write(value.sessionState, with: LexRuntimeV2ClientTypes.SessionState.write(value:to:))
        try writer["welcomeMessages"].writeList(value.welcomeMessages, memberWritingClosure: LexRuntimeV2ClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum LexRuntimeV2ClientTypes {}
