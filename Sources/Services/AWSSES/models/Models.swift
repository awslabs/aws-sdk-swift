// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyReadWrite
import SmithyXML

extension AccountSendingPausedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AccountSendingPausedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that email sending is disabled for your entire Amazon SES account. You can enable or disable email sending for your Amazon SES account using [UpdateAccountSendingEnabled].
public struct AccountSendingPausedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountSendingPausedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESClientTypes.AddHeaderAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headerName = "HeaderName"
        case headerValue = "HeaderValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let headerName = headerName {
            try container.encode(headerName, forKey: ClientRuntime.Key("HeaderName"))
        }
        if let headerValue = headerValue {
            try container.encode(headerValue, forKey: ClientRuntime.Key("HeaderValue"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.AddHeaderAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.AddHeaderAction()
            value.headerName = try reader["HeaderName"].readIfPresent()
            value.headerValue = try reader["HeaderValue"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action adds a header to the received email. For information about adding a header using a receipt rule, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-add-header.html).
    public struct AddHeaderAction: Swift.Equatable {
        /// The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.
        /// This member is required.
        public var headerName: Swift.String?
        /// The content to include in the header. This value can contain up to 2048 characters. It can't contain newline (\n) or carriage return (\r) characters.
        /// This member is required.
        public var headerValue: Swift.String?

        public init(
            headerName: Swift.String? = nil,
            headerValue: Swift.String? = nil
        )
        {
            self.headerName = headerName
            self.headerValue = headerValue
        }
    }

}

extension AlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AlreadyExistsException()
        value.properties.name = try reader["Name"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that a resource could not be created because of a naming conflict.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Indicates that a resource could not be created because the resource name already exists.
        public internal(set) var name: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.name = name
    }
}

extension SESClientTypes {
    public enum BehaviorOnMXFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rejectmessage
        case usedefaultvalue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMXFailure] {
            return [
                .rejectmessage,
                .usedefaultvalue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rejectmessage: return "RejectMessage"
            case .usedefaultvalue: return "UseDefaultValue"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorOnMXFailure(rawValue: rawValue) ?? BehaviorOnMXFailure.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.Body: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let html = html {
            try container.encode(html, forKey: ClientRuntime.Key("Html"))
        }
        if let text = text {
            try container.encode(text, forKey: ClientRuntime.Key("Text"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.Body, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.Body()
            value.text = try reader["Text"].readIfPresent(readingClosure: SESClientTypes.Content.readingClosure)
            value.html = try reader["Html"].readIfPresent(readingClosure: SESClientTypes.Content.readingClosure)
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the body of the message. You can specify text, HTML, or both. If you use both, then the message should display correctly in the widest variety of email clients.
    public struct Body: Swift.Equatable {
        /// The content of the message, in HTML format. Use this for email clients that can process HTML. You can include clickable links, formatted text, and much more in an HTML message.
        public var html: SESClientTypes.Content?
        /// The content of the message, in text format. Use this for text-based email clients, or clients on high-latency networks (such as mobile devices).
        public var text: SESClientTypes.Content?

        public init(
            html: SESClientTypes.Content? = nil,
            text: SESClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension SESClientTypes.BounceAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case sender = "Sender"
        case smtpReplyCode = "SmtpReplyCode"
        case statusCode = "StatusCode"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let sender = sender {
            try container.encode(sender, forKey: ClientRuntime.Key("Sender"))
        }
        if let smtpReplyCode = smtpReplyCode {
            try container.encode(smtpReplyCode, forKey: ClientRuntime.Key("SmtpReplyCode"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.BounceAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.BounceAction()
            value.topicArn = try reader["TopicArn"].readIfPresent()
            value.smtpReplyCode = try reader["SmtpReplyCode"].readIfPresent()
            value.statusCode = try reader["StatusCode"].readIfPresent()
            value.message = try reader["Message"].readIfPresent()
            value.sender = try reader["Sender"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). For information about sending a bounce message in response to a received email, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-bounce.html).
    public struct BounceAction: Swift.Equatable {
        /// Human-readable text to include in the bounce message.
        /// This member is required.
        public var message: Swift.String?
        /// The email address of the sender of the bounced email. This is the address from which the bounce message is sent.
        /// This member is required.
        public var sender: Swift.String?
        /// The SMTP reply code, as defined by [RFC 5321](https://tools.ietf.org/html/rfc5321).
        /// This member is required.
        public var smtpReplyCode: Swift.String?
        /// The SMTP enhanced status code, as defined by [RFC 3463](https://tools.ietf.org/html/rfc3463).
        public var statusCode: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is taken. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) operation in Amazon SNS. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init(
            message: Swift.String? = nil,
            sender: Swift.String? = nil,
            smtpReplyCode: Swift.String? = nil,
            statusCode: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.message = message
            self.sender = sender
            self.smtpReplyCode = smtpReplyCode
            self.statusCode = statusCode
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes {
    public enum BounceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contentrejected
        case doesnotexist
        case exceededquota
        case messagetoolarge
        case temporaryfailure
        case undefined
        case sdkUnknown(Swift.String)

        public static var allCases: [BounceType] {
            return [
                .contentrejected,
                .doesnotexist,
                .exceededquota,
                .messagetoolarge,
                .temporaryfailure,
                .undefined,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contentrejected: return "ContentRejected"
            case .doesnotexist: return "DoesNotExist"
            case .exceededquota: return "ExceededQuota"
            case .messagetoolarge: return "MessageTooLarge"
            case .temporaryfailure: return "TemporaryFailure"
            case .undefined: return "Undefined"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BounceType(rawValue: rawValue) ?? BounceType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.BouncedRecipientInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceType = "BounceType"
        case recipient = "Recipient"
        case recipientArn = "RecipientArn"
        case recipientDsnFields = "RecipientDsnFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceType = bounceType {
            try container.encode(bounceType, forKey: ClientRuntime.Key("BounceType"))
        }
        if let recipient = recipient {
            try container.encode(recipient, forKey: ClientRuntime.Key("Recipient"))
        }
        if let recipientArn = recipientArn {
            try container.encode(recipientArn, forKey: ClientRuntime.Key("RecipientArn"))
        }
        if let recipientDsnFields = recipientDsnFields {
            try container.encode(recipientDsnFields, forKey: ClientRuntime.Key("RecipientDsnFields"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.BouncedRecipientInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.BouncedRecipientInfo()
            value.recipient = try reader["Recipient"].readIfPresent()
            value.recipientArn = try reader["RecipientArn"].readIfPresent()
            value.bounceType = try reader["BounceType"].readIfPresent()
            value.recipientDsnFields = try reader["RecipientDsnFields"].readIfPresent(readingClosure: SESClientTypes.RecipientDsnFields.readingClosure)
            return value
        }
    }
}

extension SESClientTypes {
    /// Recipient-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email.html).
    public struct BouncedRecipientInfo: Swift.Equatable {
        /// The reason for the bounce. You must provide either this parameter or RecipientDsnFields.
        public var bounceType: SESClientTypes.BounceType?
        /// The email address of the recipient of the bounced email.
        /// This member is required.
        public var recipient: Swift.String?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to receive email for the recipient of the bounced email. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
        public var recipientArn: Swift.String?
        /// Recipient-related DSN fields, most of which would normally be filled in automatically when provided with a BounceType. You must provide either this parameter or BounceType.
        public var recipientDsnFields: SESClientTypes.RecipientDsnFields?

        public init(
            bounceType: SESClientTypes.BounceType? = nil,
            recipient: Swift.String? = nil,
            recipientArn: Swift.String? = nil,
            recipientDsnFields: SESClientTypes.RecipientDsnFields? = nil
        )
        {
            self.bounceType = bounceType
            self.recipient = recipient
            self.recipientArn = recipientArn
            self.recipientDsnFields = recipientDsnFields
        }
    }

}

extension SESClientTypes.BulkEmailDestination: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case replacementTags = "ReplacementTags"
        case replacementTemplateData = "ReplacementTemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let replacementTags = replacementTags {
            if !replacementTags.isEmpty {
                var replacementTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplacementTags"))
                for (index0, messagetag0) in replacementTags.enumerated() {
                    try replacementTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replacementTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplacementTags"))
                try replacementTagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let replacementTemplateData = replacementTemplateData {
            try container.encode(replacementTemplateData, forKey: ClientRuntime.Key("ReplacementTemplateData"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.BulkEmailDestination, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.BulkEmailDestination()
            value.destination = try reader["Destination"].readIfPresent(readingClosure: SESClientTypes.Destination.readingClosure)
            value.replacementTags = try reader["ReplacementTags"].readListIfPresent(memberReadingClosure: SESClientTypes.MessageTag.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.replacementTemplateData = try reader["ReplacementTemplateData"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// An array that contains one or more Destinations, as well as the tags and replacement data associated with each of those Destinations.
    public struct BulkEmailDestination: Swift.Equatable {
        /// Represents the destination of the message, consisting of To:, CC:, and BCC: fields. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in [Sending raw email using the Amazon SES API](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html). For more information about Punycode, see [RFC 3492](http://tools.ietf.org/html/rfc3492).
        /// This member is required.
        public var destination: SESClientTypes.Destination?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendBulkTemplatedEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public var replacementTags: [SESClientTypes.MessageTag]?
        /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
        public var replacementTemplateData: Swift.String?

        public init(
            destination: SESClientTypes.Destination? = nil,
            replacementTags: [SESClientTypes.MessageTag]? = nil,
            replacementTemplateData: Swift.String? = nil
        )
        {
            self.destination = destination
            self.replacementTags = replacementTags
            self.replacementTemplateData = replacementTemplateData
        }
    }

}

extension SESClientTypes.BulkEmailDestinationStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case messageId = "MessageId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let error = error {
            try container.encode(error, forKey: ClientRuntime.Key("Error"))
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: ClientRuntime.Key("MessageId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.BulkEmailDestinationStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.BulkEmailDestinationStatus()
            value.status = try reader["Status"].readIfPresent()
            value.error = try reader["Error"].readIfPresent()
            value.messageId = try reader["MessageId"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// An object that contains the response from the SendBulkTemplatedEmail operation.
    public struct BulkEmailDestinationStatus: Swift.Equatable {
        /// A description of an error that prevented a message being sent using the SendBulkTemplatedEmail operation.
        public var error: Swift.String?
        /// The unique message identifier returned from the SendBulkTemplatedEmail operation.
        public var messageId: Swift.String?
        /// The status of a message sent using the SendBulkTemplatedEmail operation. Possible values for this parameter include:
        ///
        /// * Success: Amazon SES accepted the message, and attempts to deliver it to the recipients.
        ///
        /// * MessageRejected: The message was rejected because it contained a virus.
        ///
        /// * MailFromDomainNotVerified: The sender's email address or domain was not verified.
        ///
        /// * ConfigurationSetDoesNotExist: The configuration set you specified does not exist.
        ///
        /// * TemplateDoesNotExist: The template you specified does not exist.
        ///
        /// * AccountSuspended: Your account has been shut down because of issues related to your email sending practices.
        ///
        /// * AccountThrottled: The number of emails you can send has been reduced because your account has exceeded its allocated sending limit.
        ///
        /// * AccountDailyQuotaExceeded: You have reached or exceeded the maximum number of emails you can send from your account in a 24-hour period.
        ///
        /// * InvalidSendingPoolName: The configuration set you specified refers to an IP pool that does not exist.
        ///
        /// * AccountSendingPaused: Email sending for the Amazon SES account was disabled using the [UpdateAccountSendingEnabled] operation.
        ///
        /// * ConfigurationSetSendingPaused: Email sending for this configuration set was disabled using the [UpdateConfigurationSetSendingEnabled] operation.
        ///
        /// * InvalidParameterValue: One or more of the parameters you specified when calling this operation was invalid. See the error message for additional information.
        ///
        /// * TransientFailure: Amazon SES was unable to process your request because of a temporary issue.
        ///
        /// * Failed: Amazon SES was unable to process your request. See the error message for additional information.
        public var status: SESClientTypes.BulkEmailStatus?

        public init(
            error: Swift.String? = nil,
            messageId: Swift.String? = nil,
            status: SESClientTypes.BulkEmailStatus? = nil
        )
        {
            self.error = error
            self.messageId = messageId
            self.status = status
        }
    }

}

extension SESClientTypes {
    public enum BulkEmailStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountdailyquotaexceeded
        case accountsendingpaused
        case accountsuspended
        case accountthrottled
        case configurationsetdoesnotexist
        case configurationsetsendingpaused
        case failed
        case invalidparametervalue
        case invalidsendingpoolname
        case mailfromdomainnotverified
        case messagerejected
        case success
        case templatedoesnotexist
        case transientfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [BulkEmailStatus] {
            return [
                .accountdailyquotaexceeded,
                .accountsendingpaused,
                .accountsuspended,
                .accountthrottled,
                .configurationsetdoesnotexist,
                .configurationsetsendingpaused,
                .failed,
                .invalidparametervalue,
                .invalidsendingpoolname,
                .mailfromdomainnotverified,
                .messagerejected,
                .success,
                .templatedoesnotexist,
                .transientfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountdailyquotaexceeded: return "AccountDailyQuotaExceeded"
            case .accountsendingpaused: return "AccountSendingPaused"
            case .accountsuspended: return "AccountSuspended"
            case .accountthrottled: return "AccountThrottled"
            case .configurationsetdoesnotexist: return "ConfigurationSetDoesNotExist"
            case .configurationsetsendingpaused: return "ConfigurationSetSendingPaused"
            case .failed: return "Failed"
            case .invalidparametervalue: return "InvalidParameterValue"
            case .invalidsendingpoolname: return "InvalidSendingPoolName"
            case .mailfromdomainnotverified: return "MailFromDomainNotVerified"
            case .messagerejected: return "MessageRejected"
            case .success: return "Success"
            case .templatedoesnotexist: return "TemplateDoesNotExist"
            case .transientfailure: return "TransientFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BulkEmailStatus(rawValue: rawValue) ?? BulkEmailStatus.sdkUnknown(rawValue)
        }
    }
}

extension CannotDeleteException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CannotDeleteException()
        value.properties.name = try reader["Name"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the delete operation could not be completed.
public struct CannotDeleteException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Indicates that a resource could not be deleted because no resource with the specified name exists.
        public internal(set) var name: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CannotDelete" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.name = name
    }
}

extension CloneReceiptRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case originalRuleSetName = "OriginalRuleSetName"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let originalRuleSetName = originalRuleSetName {
            try container.encode(originalRuleSetName, forKey: ClientRuntime.Key("OriginalRuleSetName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CloneReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CloneReceiptRuleSetInput {

    static func urlPathProvider(_ value: CloneReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create a receipt rule set by cloning an existing one. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct CloneReceiptRuleSetInput: Swift.Equatable {
    /// The name of the rule set to clone.
    /// This member is required.
    public var originalRuleSetName: Swift.String?
    /// The name of the rule set to create. The name must meet the following requirements:
    ///
    /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
    ///
    /// * Start and end with a letter or number.
    ///
    /// * Contain 64 characters or fewer.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        originalRuleSetName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.originalRuleSetName = originalRuleSetName
        self.ruleSetName = ruleSetName
    }
}

extension CloneReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CloneReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CloneReceiptRuleSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CloneReceiptRuleSetOutput: Swift.Equatable {

    public init() { }
}

enum CloneReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExists": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.CloudWatchDestination: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensionConfigurations = dimensionConfigurations {
            if !dimensionConfigurations.isEmpty {
                var dimensionConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DimensionConfigurations"))
                for (index0, cloudwatchdimensionconfiguration0) in dimensionConfigurations.enumerated() {
                    try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DimensionConfigurations"))
                try dimensionConfigurationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.CloudWatchDestination, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.CloudWatchDestination()
            value.dimensionConfigurations = try reader["DimensionConfigurations"].readListIfPresent(memberReadingClosure: SESClientTypes.CloudWatchDimensionConfiguration.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains information associated with an Amazon CloudWatch event destination to which email sending events are published. Event destinations, such as Amazon CloudWatch, are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
    public struct CloudWatchDestination: Swift.Equatable {
        /// A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
        /// This member is required.
        public var dimensionConfigurations: [SESClientTypes.CloudWatchDimensionConfiguration]?

        public init(
            dimensionConfigurations: [SESClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension SESClientTypes.CloudWatchDimensionConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultDimensionValue = "DefaultDimensionValue"
        case dimensionName = "DimensionName"
        case dimensionValueSource = "DimensionValueSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultDimensionValue = defaultDimensionValue {
            try container.encode(defaultDimensionValue, forKey: ClientRuntime.Key("DefaultDimensionValue"))
        }
        if let dimensionName = dimensionName {
            try container.encode(dimensionName, forKey: ClientRuntime.Key("DimensionName"))
        }
        if let dimensionValueSource = dimensionValueSource {
            try container.encode(dimensionValueSource, forKey: ClientRuntime.Key("DimensionValueSource"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.CloudWatchDimensionConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.CloudWatchDimensionConfiguration()
            value.dimensionName = try reader["DimensionName"].readIfPresent()
            value.dimensionValueSource = try reader["DimensionValueSource"].readIfPresent()
            value.defaultDimensionValue = try reader["DefaultDimensionValue"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains the dimension configuration to use when you publish email sending events to Amazon CloudWatch. For information about publishing email sending events to Amazon CloudWatch, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
    public struct CloudWatchDimensionConfiguration: Swift.Equatable {
        /// The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.).
        ///
        /// * Contain 256 characters or fewer.
        /// This member is required.
        public var defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:).
        ///
        /// * Contain 256 characters or fewer.
        /// This member is required.
        public var dimensionName: Swift.String?
        /// The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, specify messageTag. To use your own email headers, specify emailHeader. To put a custom tag on any link included in your email, specify linkTag.
        /// This member is required.
        public var dimensionValueSource: SESClientTypes.DimensionValueSource?

        public init(
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: SESClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension SESClientTypes.ConfigurationSet: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ConfigurationSet, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ConfigurationSet()
            value.name = try reader["Name"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// The name of the configuration set. Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see [Using Amazon SES Configuration Sets](https://docs.aws.amazon.com/ses/latest/dg/using-configuration-sets.html) in the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/).
    public struct ConfigurationSet: Swift.Equatable {
        /// The name of the configuration set. The name must meet the following requirements:
        ///
        /// * Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain 64 characters or fewer.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ConfigurationSetAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ConfigurationSetAlreadyExistsException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the configuration set could not be created because of a naming conflict.
public struct ConfigurationSetAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConfigurationSetAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.message = message
    }
}

extension SESClientTypes {
    public enum ConfigurationSetAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deliveryOptions
        case eventDestinations
        case reputationOptions
        case trackingOptions
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationSetAttribute] {
            return [
                .deliveryOptions,
                .eventDestinations,
                .reputationOptions,
                .trackingOptions,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deliveryOptions: return "deliveryOptions"
            case .eventDestinations: return "eventDestinations"
            case .reputationOptions: return "reputationOptions"
            case .trackingOptions: return "trackingOptions"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationSetAttribute(rawValue: rawValue) ?? ConfigurationSetAttribute.sdkUnknown(rawValue)
        }
    }
}

extension ConfigurationSetDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ConfigurationSetDoesNotExistException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the configuration set does not exist.
public struct ConfigurationSetDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConfigurationSetDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.message = message
    }
}

extension ConfigurationSetSendingPausedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ConfigurationSetSendingPausedException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that email sending is disabled for the configuration set. You can enable or disable email sending for a configuration set using [UpdateConfigurationSetSendingEnabled].
public struct ConfigurationSetSendingPausedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The name of the configuration set for which email sending is disabled.
        public internal(set) var configurationSetName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConfigurationSetSendingPausedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.message = message
    }
}

extension SESClientTypes.Content: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let charset = charset {
            try container.encode(charset, forKey: ClientRuntime.Key("Charset"))
        }
        if let data = data {
            try container.encode(data, forKey: ClientRuntime.Key("Data"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.Content, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.Content()
            value.data = try reader["Data"].readIfPresent()
            value.charset = try reader["Charset"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents textual data, plus an optional character set specification. By default, the text must be 7-bit ASCII, due to the constraints of the SMTP protocol. If the text must contain any other characters, then you must also specify a character set. Examples include UTF-8, ISO-8859-1, and Shift_JIS.
    public struct Content: Swift.Equatable {
        /// The character set of the content.
        public var charset: Swift.String?
        /// The textual data of the content.
        /// This member is required.
        public var data: Swift.String?

        public init(
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension CreateConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestination = "EventDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestination = eventDestination {
            try container.encode(eventDestination, forKey: ClientRuntime.Key("EventDestination"))
        }
        try container.encode("CreateConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: CreateConfigurationSetEventDestinationInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create a configuration set event destination. A configuration set event destination, which can be either Amazon CloudWatch or Amazon Kinesis Firehose, describes an Amazon Web Services service in which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct CreateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that the event destination should be associated with.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that describes the Amazon Web Services service that email sending event where information is published.
    /// This member is required.
    public var eventDestination: SESClientTypes.EventDestination?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: SESClientTypes.EventDestination? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
    }
}

extension CreateConfigurationSetEventDestinationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateConfigurationSetEventDestinationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateConfigurationSetEventDestinationOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CreateConfigurationSetEventDestinationOutput: Swift.Equatable {

    public init() { }
}

enum CreateConfigurationSetEventDestinationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EventDestinationAlreadyExists": return try await EventDestinationAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidCloudWatchDestination": return try await InvalidCloudWatchDestinationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidFirehoseDestination": return try await InvalidFirehoseDestinationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSNSDestination": return try await InvalidSNSDestinationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateConfigurationSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSet = configurationSet {
            try container.encode(configurationSet, forKey: ClientRuntime.Key("ConfigurationSet"))
        }
        try container.encode("CreateConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationSetInput {

    static func urlPathProvider(_ value: CreateConfigurationSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct CreateConfigurationSetInput: Swift.Equatable {
    /// A data structure that contains the name of the configuration set.
    /// This member is required.
    public var configurationSet: SESClientTypes.ConfigurationSet?

    public init(
        configurationSet: SESClientTypes.ConfigurationSet? = nil
    )
    {
        self.configurationSet = configurationSet
    }
}

extension CreateConfigurationSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateConfigurationSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateConfigurationSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CreateConfigurationSetOutput: Swift.Equatable {

    public init() { }
}

enum CreateConfigurationSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetAlreadyExists": return try await ConfigurationSetAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationSet": return try await InvalidConfigurationSetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateConfigurationSetTrackingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case trackingOptions = "TrackingOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let trackingOptions = trackingOptions {
            try container.encode(trackingOptions, forKey: ClientRuntime.Key("TrackingOptions"))
        }
        try container.encode("CreateConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationSetTrackingOptionsInput {

    static func urlPathProvider(_ value: CreateConfigurationSetTrackingOptionsInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create an open and click tracking option object in a configuration set.
public struct CreateConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set that the tracking options should be associated with.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails. For more information, see [Configuring Custom Domains to Handle Open and Click Tracking](https://docs.aws.amazon.com/ses/latest/dg/configure-custom-open-click-domains.html) in the Amazon SES Developer Guide.
    /// This member is required.
    public var trackingOptions: SESClientTypes.TrackingOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        trackingOptions: SESClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.trackingOptions = trackingOptions
    }
}

extension CreateConfigurationSetTrackingOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateConfigurationSetTrackingOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateConfigurationSetTrackingOptionsOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CreateConfigurationSetTrackingOptionsOutput: Swift.Equatable {

    public init() { }
}

enum CreateConfigurationSetTrackingOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTrackingOptions": return try await InvalidTrackingOptionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrackingOptionsAlreadyExistsException": return try await TrackingOptionsAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateCustomVerificationEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateContent = templateContent {
            try container.encode(templateContent, forKey: ClientRuntime.Key("TemplateContent"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
        try container.encode("CreateCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: CreateCustomVerificationEmailTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create a custom verification email template.
public struct CreateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    /// This member is required.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    /// This member is required.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom Verification Email Frequently Asked Questions](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom) in the Amazon SES Developer Guide.
    /// This member is required.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public var templateSubject: Swift.String?

    public init(
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

extension CreateCustomVerificationEmailTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateCustomVerificationEmailTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateCustomVerificationEmailTemplateOutput()
        }
    }
}

public struct CreateCustomVerificationEmailTemplateOutput: Swift.Equatable {

    public init() { }
}

enum CreateCustomVerificationEmailTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomVerificationEmailInvalidContent": return try await CustomVerificationEmailInvalidContentException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomVerificationEmailTemplateAlreadyExists": return try await CustomVerificationEmailTemplateAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "FromEmailAddressNotVerified": return try await FromEmailAddressNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateReceiptFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        try container.encode("CreateReceiptFilter", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReceiptFilterInput {

    static func urlPathProvider(_ value: CreateReceiptFilterInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create a new IP address filter. You use IP address filters when you receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct CreateReceiptFilterInput: Swift.Equatable {
    /// A data structure that describes the IP address filter to create, which consists of a name, an IP address range, and whether to allow or block mail from it.
    /// This member is required.
    public var filter: SESClientTypes.ReceiptFilter?

    public init(
        filter: SESClientTypes.ReceiptFilter? = nil
    )
    {
        self.filter = filter
    }
}

extension CreateReceiptFilterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateReceiptFilterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateReceiptFilterOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CreateReceiptFilterOutput: Swift.Equatable {

    public init() { }
}

enum CreateReceiptFilterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExists": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateReceiptRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case after = "After"
        case rule = "Rule"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let after = after {
            try container.encode(after, forKey: ClientRuntime.Key("After"))
        }
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CreateReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReceiptRuleInput {

    static func urlPathProvider(_ value: CreateReceiptRuleInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct CreateReceiptRuleInput: Swift.Equatable {
    /// The name of an existing rule after which the new rule is placed. If this parameter is null, the new rule is inserted at the beginning of the rule list.
    public var after: Swift.String?
    /// A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.
    /// This member is required.
    public var rule: SESClientTypes.ReceiptRule?
    /// The name of the rule set where the receipt rule is added.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        after: Swift.String? = nil,
        rule: SESClientTypes.ReceiptRule? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.after = after
        self.rule = rule
        self.ruleSetName = ruleSetName
    }
}

extension CreateReceiptRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateReceiptRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateReceiptRuleOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CreateReceiptRuleOutput: Swift.Equatable {

    public init() { }
}

enum CreateReceiptRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExists": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidLambdaFunction": return try await InvalidLambdaFunctionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3Configuration": return try await InvalidS3ConfigurationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSnsTopic": return try await InvalidSnsTopicException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleDoesNotExist": return try await RuleDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateReceiptRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CreateReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReceiptRuleSetInput {

    static func urlPathProvider(_ value: CreateReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create an empty receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct CreateReceiptRuleSetInput: Swift.Equatable {
    /// The name of the rule set to create. The name must meet the following requirements:
    ///
    /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
    ///
    /// * Start and end with a letter or number.
    ///
    /// * Contain 64 characters or fewer.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension CreateReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateReceiptRuleSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct CreateReceiptRuleSetOutput: Swift.Equatable {

    public init() { }
}

enum CreateReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExists": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        try container.encode("CreateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTemplateInput {

    static func urlPathProvider(_ value: CreateTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to create an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-personalized-email-api.html).
public struct CreateTemplateInput: Swift.Equatable {
    /// The content of the email, composed of a subject line and either an HTML part or a text-only part.
    /// This member is required.
    public var template: SESClientTypes.Template?

    public init(
        template: SESClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

extension CreateTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateTemplateOutput()
        }
    }
}

public struct CreateTemplateOutput: Swift.Equatable {

    public init() { }
}

enum CreateTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExists": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTemplate": return try await InvalidTemplateException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes {
    public enum CustomMailFromStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomMailFromStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .success: return "Success"
            case .temporaryfailure: return "TemporaryFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomMailFromStatus(rawValue: rawValue) ?? CustomMailFromStatus.sdkUnknown(rawValue)
        }
    }
}

extension CustomVerificationEmailInvalidContentException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomVerificationEmailInvalidContentException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that custom verification email template provided content is invalid.
public struct CustomVerificationEmailInvalidContentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomVerificationEmailInvalidContent" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESClientTypes.CustomVerificationEmailTemplate: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.CustomVerificationEmailTemplate, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.CustomVerificationEmailTemplate()
            value.templateName = try reader["TemplateName"].readIfPresent()
            value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
            value.templateSubject = try reader["TemplateSubject"].readIfPresent()
            value.successRedirectionURL = try reader["SuccessRedirectionURL"].readIfPresent()
            value.failureRedirectionURL = try reader["FailureRedirectionURL"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains information about a custom verification email template.
    public struct CustomVerificationEmailTemplate: Swift.Equatable {
        /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
        public var failureRedirectionURL: Swift.String?
        /// The email address that the custom verification email is sent from.
        public var fromEmailAddress: Swift.String?
        /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
        public var successRedirectionURL: Swift.String?
        /// The name of the custom verification email template.
        public var templateName: Swift.String?
        /// The subject line of the custom verification email.
        public var templateSubject: Swift.String?

        public init(
            failureRedirectionURL: Swift.String? = nil,
            fromEmailAddress: Swift.String? = nil,
            successRedirectionURL: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateSubject: Swift.String? = nil
        )
        {
            self.failureRedirectionURL = failureRedirectionURL
            self.fromEmailAddress = fromEmailAddress
            self.successRedirectionURL = successRedirectionURL
            self.templateName = templateName
            self.templateSubject = templateSubject
        }
    }

}

extension CustomVerificationEmailTemplateAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomVerificationEmailTemplateAlreadyExistsException()
        value.properties.customVerificationEmailTemplateName = try reader["CustomVerificationEmailTemplateName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that a custom verification email template with the name you specified already exists.
public struct CustomVerificationEmailTemplateAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the provided custom verification email template with the specified template name already exists.
        public internal(set) var customVerificationEmailTemplateName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomVerificationEmailTemplateAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        customVerificationEmailTemplateName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.customVerificationEmailTemplateName = customVerificationEmailTemplateName
        self.properties.message = message
    }
}

extension CustomVerificationEmailTemplateDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomVerificationEmailTemplateDoesNotExistException()
        value.properties.customVerificationEmailTemplateName = try reader["CustomVerificationEmailTemplateName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that a custom verification email template with the name you specified does not exist.
public struct CustomVerificationEmailTemplateDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the provided custom verification email template does not exist.
        public internal(set) var customVerificationEmailTemplateName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomVerificationEmailTemplateDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        customVerificationEmailTemplateName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.customVerificationEmailTemplateName = customVerificationEmailTemplateName
        self.properties.message = message
    }
}

extension DeleteConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestinationName = eventDestinationName {
            try container.encode(eventDestinationName, forKey: ClientRuntime.Key("EventDestinationName"))
        }
        try container.encode("DeleteConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetEventDestinationInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct DeleteConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set from which to delete the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the event destination to delete.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

extension DeleteConfigurationSetEventDestinationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteConfigurationSetEventDestinationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteConfigurationSetEventDestinationOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteConfigurationSetEventDestinationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteConfigurationSetEventDestinationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EventDestinationDoesNotExist": return try await EventDestinationDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteConfigurationSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DeleteConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationSetInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct DeleteConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

extension DeleteConfigurationSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteConfigurationSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteConfigurationSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteConfigurationSetOutput: Swift.Equatable {

    public init() { }
}

enum DeleteConfigurationSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteConfigurationSetTrackingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DeleteConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationSetTrackingOptionsInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetTrackingOptionsInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete open and click tracking options in a configuration set.
public struct DeleteConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

extension DeleteConfigurationSetTrackingOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteConfigurationSetTrackingOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteConfigurationSetTrackingOptionsOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteConfigurationSetTrackingOptionsOutput: Swift.Equatable {

    public init() { }
}

enum DeleteConfigurationSetTrackingOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrackingOptionsDoesNotExistException": return try await TrackingOptionsDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteCustomVerificationEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: DeleteCustomVerificationEmailTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an existing custom verification email template.
public struct DeleteCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template to delete.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension DeleteCustomVerificationEmailTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteCustomVerificationEmailTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteCustomVerificationEmailTemplateOutput()
        }
    }
}

public struct DeleteCustomVerificationEmailTemplateOutput: Swift.Equatable {

    public init() { }
}

enum DeleteCustomVerificationEmailTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteIdentityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("DeleteIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteIdentityInput {

    static func urlPathProvider(_ value: DeleteIdentityInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete one of your Amazon SES identities (an email address or domain).
public struct DeleteIdentityInput: Swift.Equatable {
    /// The identity to be removed from the list of identities for the Amazon Web Services account.
    /// This member is required.
    public var identity: Swift.String?

    public init(
        identity: Swift.String? = nil
    )
    {
        self.identity = identity
    }
}

extension DeleteIdentityOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteIdentityOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteIdentityOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteIdentityOutput: Swift.Equatable {

    public init() { }
}

enum DeleteIdentityOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteIdentityPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("DeleteIdentityPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteIdentityPolicyInput {

    static func urlPathProvider(_ value: DeleteIdentityPolicyInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
public struct DeleteIdentityPolicyInput: Swift.Equatable {
    /// The identity that is associated with the policy to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?
    /// The name of the policy to be deleted.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        identity: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.identity = identity
        self.policyName = policyName
    }
}

extension DeleteIdentityPolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteIdentityPolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteIdentityPolicyOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteIdentityPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteIdentityPolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteReceiptFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName = "FilterName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filterName = filterName {
            try container.encode(filterName, forKey: ClientRuntime.Key("FilterName"))
        }
        try container.encode("DeleteReceiptFilter", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReceiptFilterInput {

    static func urlPathProvider(_ value: DeleteReceiptFilterInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an IP address filter. You use IP address filters when you receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct DeleteReceiptFilterInput: Swift.Equatable {
    /// The name of the IP address filter to delete.
    /// This member is required.
    public var filterName: Swift.String?

    public init(
        filterName: Swift.String? = nil
    )
    {
        self.filterName = filterName
    }
}

extension DeleteReceiptFilterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteReceiptFilterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteReceiptFilterOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteReceiptFilterOutput: Swift.Equatable {

    public init() { }
}

enum DeleteReceiptFilterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteReceiptRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DeleteReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReceiptRuleInput {

    static func urlPathProvider(_ value: DeleteReceiptRuleInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct DeleteReceiptRuleInput: Swift.Equatable {
    /// The name of the receipt rule to delete.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The name of the receipt rule set that contains the receipt rule to delete.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

extension DeleteReceiptRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteReceiptRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteReceiptRuleOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteReceiptRuleOutput: Swift.Equatable {

    public init() { }
}

enum DeleteReceiptRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteReceiptRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DeleteReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReceiptRuleSetInput {

    static func urlPathProvider(_ value: DeleteReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a receipt rule set and all of the receipt rules it contains. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct DeleteReceiptRuleSetInput: Swift.Equatable {
    /// The name of the receipt rule set to delete.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension DeleteReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteReceiptRuleSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct DeleteReceiptRuleSetOutput: Swift.Equatable {

    public init() { }
}

enum DeleteReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CannotDelete": return try await CannotDeleteException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTemplateInput {

    static func urlPathProvider(_ value: DeleteTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-personalized-email-api.html).
public struct DeleteTemplateInput: Swift.Equatable {
    /// The name of the template to be deleted.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension DeleteTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteTemplateOutput()
        }
    }
}

public struct DeleteTemplateOutput: Swift.Equatable {

    public init() { }
}

enum DeleteTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteVerifiedEmailAddressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("DeleteVerifiedEmailAddress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteVerifiedEmailAddressInput {

    static func urlPathProvider(_ value: DeleteVerifiedEmailAddressInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an email address from the list of email addresses you have attempted to verify under your Amazon Web Services account.
public struct DeleteVerifiedEmailAddressInput: Swift.Equatable {
    /// An email address to be removed from the list of verified addresses.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension DeleteVerifiedEmailAddressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteVerifiedEmailAddressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteVerifiedEmailAddressOutput()
        }
    }
}

public struct DeleteVerifiedEmailAddressOutput: Swift.Equatable {

    public init() { }
}

enum DeleteVerifiedEmailAddressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.DeliveryOptions: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.DeliveryOptions, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.DeliveryOptions()
            value.tlsPolicy = try reader["TlsPolicy"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    public struct DeliveryOptions: Swift.Equatable {
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public var tlsPolicy: SESClientTypes.TlsPolicy?

        public init(
            tlsPolicy: SESClientTypes.TlsPolicy? = nil
        )
        {
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension DescribeActiveReceiptRuleSetInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeActiveReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeActiveReceiptRuleSetInput {

    static func urlPathProvider(_ value: DescribeActiveReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the metadata and receipt rules for the receipt rule set that is currently active. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct DescribeActiveReceiptRuleSetInput: Swift.Equatable {

    public init() { }
}

extension DescribeActiveReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeActiveReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeActiveReceiptRuleSetResult"]
            var value = DescribeActiveReceiptRuleSetOutput()
            value.metadata = try reader["Metadata"].readIfPresent(readingClosure: SESClientTypes.ReceiptRuleSetMetadata.readingClosure)
            value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: SESClientTypes.ReceiptRule.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// Represents the metadata and receipt rules for the receipt rule set that is currently active.
public struct DescribeActiveReceiptRuleSetOutput: Swift.Equatable {
    /// The metadata for the currently active receipt rule set. The metadata consists of the rule set name and a timestamp of when the rule set was created.
    public var metadata: SESClientTypes.ReceiptRuleSetMetadata?
    /// The receipt rules that belong to the active rule set.
    public var rules: [SESClientTypes.ReceiptRule]?

    public init(
        metadata: SESClientTypes.ReceiptRuleSetMetadata? = nil,
        rules: [SESClientTypes.ReceiptRule]? = nil
    )
    {
        self.metadata = metadata
        self.rules = rules
    }
}

enum DescribeActiveReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeConfigurationSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetAttributeNames = "ConfigurationSetAttributeNames"
        case configurationSetName = "ConfigurationSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetAttributeNames = configurationSetAttributeNames {
            if !configurationSetAttributeNames.isEmpty {
                var configurationSetAttributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationSetAttributeNames"))
                for (index0, configurationsetattribute0) in configurationSetAttributeNames.enumerated() {
                    try configurationSetAttributeNamesContainer.encode(configurationsetattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var configurationSetAttributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationSetAttributeNames"))
                try configurationSetAttributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DescribeConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeConfigurationSetInput {

    static func urlPathProvider(_ value: DescribeConfigurationSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the details of a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct DescribeConfigurationSetInput: Swift.Equatable {
    /// A list of configuration set attributes to return.
    public var configurationSetAttributeNames: [SESClientTypes.ConfigurationSetAttribute]?
    /// The name of the configuration set to describe.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetAttributeNames: [SESClientTypes.ConfigurationSetAttribute]? = nil,
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetAttributeNames = configurationSetAttributeNames
        self.configurationSetName = configurationSetName
    }
}

extension DescribeConfigurationSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeConfigurationSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeConfigurationSetResult"]
            var value = DescribeConfigurationSetOutput()
            value.configurationSet = try reader["ConfigurationSet"].readIfPresent(readingClosure: SESClientTypes.ConfigurationSet.readingClosure)
            value.deliveryOptions = try reader["DeliveryOptions"].readIfPresent(readingClosure: SESClientTypes.DeliveryOptions.readingClosure)
            value.eventDestinations = try reader["EventDestinations"].readListIfPresent(memberReadingClosure: SESClientTypes.EventDestination.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.reputationOptions = try reader["ReputationOptions"].readIfPresent(readingClosure: SESClientTypes.ReputationOptions.readingClosure)
            value.trackingOptions = try reader["TrackingOptions"].readIfPresent(readingClosure: SESClientTypes.TrackingOptions.readingClosure)
            return value
        }
    }
}

/// Represents the details of a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct DescribeConfigurationSetOutput: Swift.Equatable {
    /// The configuration set object associated with the specified configuration set.
    public var configurationSet: SESClientTypes.ConfigurationSet?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    public var deliveryOptions: SESClientTypes.DeliveryOptions?
    /// A list of event destinations associated with the configuration set.
    public var eventDestinations: [SESClientTypes.EventDestination]?
    /// An object that represents the reputation settings for the configuration set.
    public var reputationOptions: SESClientTypes.ReputationOptions?
    /// The name of the custom open and click tracking domain associated with the configuration set.
    public var trackingOptions: SESClientTypes.TrackingOptions?

    public init(
        configurationSet: SESClientTypes.ConfigurationSet? = nil,
        deliveryOptions: SESClientTypes.DeliveryOptions? = nil,
        eventDestinations: [SESClientTypes.EventDestination]? = nil,
        reputationOptions: SESClientTypes.ReputationOptions? = nil,
        trackingOptions: SESClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSet = configurationSet
        self.deliveryOptions = deliveryOptions
        self.eventDestinations = eventDestinations
        self.reputationOptions = reputationOptions
        self.trackingOptions = trackingOptions
    }
}

enum DescribeConfigurationSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReceiptRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DescribeReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReceiptRuleInput {

    static func urlPathProvider(_ value: DescribeReceiptRuleInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the details of a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct DescribeReceiptRuleInput: Swift.Equatable {
    /// The name of the receipt rule.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The name of the receipt rule set that the receipt rule belongs to.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

extension DescribeReceiptRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReceiptRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReceiptRuleResult"]
            var value = DescribeReceiptRuleOutput()
            value.rule = try reader["Rule"].readIfPresent(readingClosure: SESClientTypes.ReceiptRule.readingClosure)
            return value
        }
    }
}

/// Represents the details of a receipt rule.
public struct DescribeReceiptRuleOutput: Swift.Equatable {
    /// A data structure that contains the specified receipt rule's name, actions, recipients, domains, enabled status, scan status, and Transport Layer Security (TLS) policy.
    public var rule: SESClientTypes.ReceiptRule?

    public init(
        rule: SESClientTypes.ReceiptRule? = nil
    )
    {
        self.rule = rule
    }
}

enum DescribeReceiptRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RuleDoesNotExist": return try await RuleDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReceiptRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DescribeReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReceiptRuleSetInput {

    static func urlPathProvider(_ value: DescribeReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the details of a receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct DescribeReceiptRuleSetInput: Swift.Equatable {
    /// The name of the receipt rule set to describe.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension DescribeReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReceiptRuleSetResult"]
            var value = DescribeReceiptRuleSetOutput()
            value.metadata = try reader["Metadata"].readIfPresent(readingClosure: SESClientTypes.ReceiptRuleSetMetadata.readingClosure)
            value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: SESClientTypes.ReceiptRule.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// Represents the details of the specified receipt rule set.
public struct DescribeReceiptRuleSetOutput: Swift.Equatable {
    /// The metadata for the receipt rule set, which consists of the rule set name and the timestamp of when the rule set was created.
    public var metadata: SESClientTypes.ReceiptRuleSetMetadata?
    /// A list of the receipt rules that belong to the specified receipt rule set.
    public var rules: [SESClientTypes.ReceiptRule]?

    public init(
        metadata: SESClientTypes.ReceiptRuleSetMetadata? = nil,
        rules: [SESClientTypes.ReceiptRule]? = nil
    )
    {
        self.metadata = metadata
        self.rules = rules
    }
}

enum DescribeReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.Destination: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bccAddresses = bccAddresses {
            if !bccAddresses.isEmpty {
                var bccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BccAddresses"))
                for (index0, address0) in bccAddresses.enumerated() {
                    try bccAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var bccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BccAddresses"))
                try bccAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ccAddresses = ccAddresses {
            if !ccAddresses.isEmpty {
                var ccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CcAddresses"))
                for (index0, address0) in ccAddresses.enumerated() {
                    try ccAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CcAddresses"))
                try ccAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let toAddresses = toAddresses {
            if !toAddresses.isEmpty {
                var toAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ToAddresses"))
                for (index0, address0) in toAddresses.enumerated() {
                    try toAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var toAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ToAddresses"))
                try toAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.Destination, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.Destination()
            value.toAddresses = try reader["ToAddresses"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.ccAddresses = try reader["CcAddresses"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.bccAddresses = try reader["BccAddresses"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the destination of the message, consisting of To:, CC:, and BCC: fields. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in [Sending raw email using the Amazon SES API](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html). For more information about Punycode, see [RFC 3492](http://tools.ietf.org/html/rfc3492).
    public struct Destination: Swift.Equatable {
        /// The recipients to place on the BCC: line of the message.
        public var bccAddresses: [Swift.String]?
        /// The recipients to place on the CC: line of the message.
        public var ccAddresses: [Swift.String]?
        /// The recipients to place on the To: line of the message.
        public var toAddresses: [Swift.String]?

        public init(
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension SESClientTypes {
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "emailHeader"
            case .linkTag: return "linkTag"
            case .messageTag: return "messageTag"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueSource(rawValue: rawValue) ?? DimensionValueSource.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes {
    public enum DsnAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delayed
        case delivered
        case expanded
        case failed
        case relayed
        case sdkUnknown(Swift.String)

        public static var allCases: [DsnAction] {
            return [
                .delayed,
                .delivered,
                .expanded,
                .failed,
                .relayed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delayed: return "delayed"
            case .delivered: return "delivered"
            case .expanded: return "expanded"
            case .failed: return "failed"
            case .relayed: return "relayed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DsnAction(rawValue: rawValue) ?? DsnAction.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.EventDestination: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case snsDestination = "SNSDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cloudWatchDestination = cloudWatchDestination {
            try container.encode(cloudWatchDestination, forKey: ClientRuntime.Key("CloudWatchDestination"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let kinesisFirehoseDestination = kinesisFirehoseDestination {
            try container.encode(kinesisFirehoseDestination, forKey: ClientRuntime.Key("KinesisFirehoseDestination"))
        }
        if let matchingEventTypes = matchingEventTypes {
            if !matchingEventTypes.isEmpty {
                var matchingEventTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchingEventTypes"))
                for (index0, eventtype0) in matchingEventTypes.enumerated() {
                    try matchingEventTypesContainer.encode(eventtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var matchingEventTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchingEventTypes"))
                try matchingEventTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let snsDestination = snsDestination {
            try container.encode(snsDestination, forKey: ClientRuntime.Key("SNSDestination"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.EventDestination, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.EventDestination()
            value.name = try reader["Name"].readIfPresent()
            value.enabled = try reader["Enabled"].readIfPresent() ?? false
            value.matchingEventTypes = try reader["MatchingEventTypes"].readListIfPresent(memberReadingClosure: SESClientTypes.EventType.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.kinesisFirehoseDestination = try reader["KinesisFirehoseDestination"].readIfPresent(readingClosure: SESClientTypes.KinesisFirehoseDestination.readingClosure)
            value.cloudWatchDestination = try reader["CloudWatchDestination"].readIfPresent(readingClosure: SESClientTypes.CloudWatchDestination.readingClosure)
            value.snsDestination = try reader["SNSDestination"].readIfPresent(readingClosure: SESClientTypes.SNSDestination.readingClosure)
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains information about an event destination. When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS). Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
    public struct EventDestination: Swift.Equatable {
        /// An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
        public var cloudWatchDestination: SESClientTypes.CloudWatchDestination?
        /// Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.
        public var enabled: Swift.Bool
        /// An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
        public var kinesisFirehoseDestination: SESClientTypes.KinesisFirehoseDestination?
        /// The type of email sending events to publish to the event destination.
        ///
        /// * send - The call was successful and Amazon SES is attempting to deliver the email.
        ///
        /// * reject - Amazon SES determined that the email contained a virus and rejected it.
        ///
        /// * bounce - The recipient's mail server permanently rejected the email. This corresponds to a hard bounce.
        ///
        /// * complaint - The recipient marked the email as spam.
        ///
        /// * delivery - Amazon SES successfully delivered the email to the recipient's mail server.
        ///
        /// * open - The recipient received the email and opened it in their email client.
        ///
        /// * click - The recipient clicked one or more links in the email.
        ///
        /// * renderingFailure - Amazon SES did not send the email because of a template rendering issue.
        /// This member is required.
        public var matchingEventTypes: [SESClientTypes.EventType]?
        /// The name of the event destination. The name must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain 64 characters or fewer.
        /// This member is required.
        public var name: Swift.String?
        /// An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
        public var snsDestination: SESClientTypes.SNSDestination?

        public init(
            cloudWatchDestination: SESClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SESClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SESClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            snsDestination: SESClientTypes.SNSDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.snsDestination = snsDestination
        }
    }

}

extension EventDestinationAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EventDestinationAlreadyExistsException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.eventDestinationName = try reader["EventDestinationName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the event destination could not be created because of a naming conflict.
public struct EventDestinationAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        /// Indicates that the event destination does not exist.
        public internal(set) var eventDestinationName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventDestinationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.eventDestinationName = eventDestinationName
        self.properties.message = message
    }
}

extension EventDestinationDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EventDestinationDoesNotExistException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.eventDestinationName = try reader["EventDestinationName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the event destination does not exist.
public struct EventDestinationDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        /// Indicates that the event destination does not exist.
        public internal(set) var eventDestinationName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventDestinationDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.eventDestinationName = eventDestinationName
        self.properties.message = message
    }
}

extension SESClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case `open`
        case reject
        case renderingFailure
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "bounce"
            case .click: return "click"
            case .complaint: return "complaint"
            case .delivery: return "delivery"
            case .open: return "open"
            case .reject: return "reject"
            case .renderingFailure: return "renderingFailure"
            case .send: return "send"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.ExtensionField: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ExtensionField, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ExtensionField()
            value.name = try reader["Name"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Additional X-headers to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email.html).
    public struct ExtensionField: Swift.Equatable {
        /// The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the header to add. Must contain 2048 characters or fewer, and must not contain newline characters ("\r" or "\n").
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension FromEmailAddressNotVerifiedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = FromEmailAddressNotVerifiedException()
        value.properties.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the sender address specified for a custom verification email is not verified, and is therefore not eligible to send the custom verification email.
public struct FromEmailAddressNotVerifiedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the from email address associated with the custom verification email template is not verified.
        public internal(set) var fromEmailAddress: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FromEmailAddressNotVerified" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fromEmailAddress: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.fromEmailAddress = fromEmailAddress
        self.properties.message = message
    }
}

extension GetAccountSendingEnabledInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetAccountSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetAccountSendingEnabledInput {

    static func urlPathProvider(_ value: GetAccountSendingEnabledInput) -> Swift.String? {
        return "/"
    }
}

public struct GetAccountSendingEnabledInput: Swift.Equatable {

    public init() { }
}

extension GetAccountSendingEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetAccountSendingEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetAccountSendingEnabledResult"]
            var value = GetAccountSendingEnabledOutput()
            value.enabled = try reader["Enabled"].readIfPresent() ?? false
            return value
        }
    }
}

/// Represents a request to return the email sending status for your Amazon SES account in the current Amazon Web Services Region.
public struct GetAccountSendingEnabledOutput: Swift.Equatable {
    /// Describes whether email sending is enabled or disabled for your Amazon SES account in the current Amazon Web Services Region.
    public var enabled: Swift.Bool

    public init(
        enabled: Swift.Bool = false
    )
    {
        self.enabled = enabled
    }
}

enum GetAccountSendingEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetCustomVerificationEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("GetCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: GetCustomVerificationEmailTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to retrieve an existing custom verification email template.
public struct GetCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template to retrieve.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension GetCustomVerificationEmailTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetCustomVerificationEmailTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetCustomVerificationEmailTemplateResult"]
            var value = GetCustomVerificationEmailTemplateOutput()
            value.failureRedirectionURL = try reader["FailureRedirectionURL"].readIfPresent()
            value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
            value.successRedirectionURL = try reader["SuccessRedirectionURL"].readIfPresent()
            value.templateContent = try reader["TemplateContent"].readIfPresent()
            value.templateName = try reader["TemplateName"].readIfPresent()
            value.templateSubject = try reader["TemplateSubject"].readIfPresent()
            return value
        }
    }
}

/// The content of the custom verification email template.
public struct GetCustomVerificationEmailTemplateOutput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    public var templateSubject: Swift.String?

    public init(
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

enum GetCustomVerificationEmailTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomVerificationEmailTemplateDoesNotExist": return try await CustomVerificationEmailTemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetIdentityDkimAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityDkimAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityDkimAttributesInput {

    static func urlPathProvider(_ value: GetIdentityDkimAttributesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request for the status of Amazon SES Easy DKIM signing for an identity. For domain identities, this request also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES successfully verified that these tokens were published. For more information about Easy DKIM, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html).
public struct GetIdentityDkimAttributesInput: Swift.Equatable {
    /// A list of one or more verified identities - email addresses, domains, or both.
    /// This member is required.
    public var identities: [Swift.String]?

    public init(
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityDkimAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetIdentityDkimAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetIdentityDkimAttributesResult"]
            var value = GetIdentityDkimAttributesOutput()
            value.dkimAttributes = try reader["DkimAttributes"].readMapIfPresent(valueReadingClosure: SESClientTypes.IdentityDkimAttributes.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

/// Represents the status of Amazon SES Easy DKIM signing for an identity. For domain identities, this response also contains the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES successfully verified that these tokens were published.
public struct GetIdentityDkimAttributesOutput: Swift.Equatable {
    /// The DKIM attributes for an email address or a domain.
    /// This member is required.
    public var dkimAttributes: [Swift.String:SESClientTypes.IdentityDkimAttributes]?

    public init(
        dkimAttributes: [Swift.String:SESClientTypes.IdentityDkimAttributes]? = nil
    )
    {
        self.dkimAttributes = dkimAttributes
    }
}

enum GetIdentityDkimAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetIdentityMailFromDomainAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityMailFromDomainAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityMailFromDomainAttributesInput {

    static func urlPathProvider(_ value: GetIdentityMailFromDomainAttributesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the Amazon SES custom MAIL FROM attributes for a list of identities. For information about using a custom MAIL FROM domain, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/mail-from.html).
public struct GetIdentityMailFromDomainAttributesInput: Swift.Equatable {
    /// A list of one or more identities.
    /// This member is required.
    public var identities: [Swift.String]?

    public init(
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityMailFromDomainAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetIdentityMailFromDomainAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetIdentityMailFromDomainAttributesResult"]
            var value = GetIdentityMailFromDomainAttributesOutput()
            value.mailFromDomainAttributes = try reader["MailFromDomainAttributes"].readMapIfPresent(valueReadingClosure: SESClientTypes.IdentityMailFromDomainAttributes.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

/// Represents the custom MAIL FROM attributes for a list of identities.
public struct GetIdentityMailFromDomainAttributesOutput: Swift.Equatable {
    /// A map of identities to custom MAIL FROM attributes.
    /// This member is required.
    public var mailFromDomainAttributes: [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]?

    public init(
        mailFromDomainAttributes: [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]? = nil
    )
    {
        self.mailFromDomainAttributes = mailFromDomainAttributes
    }
}

enum GetIdentityMailFromDomainAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetIdentityNotificationAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityNotificationAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityNotificationAttributesInput {

    static func urlPathProvider(_ value: GetIdentityNotificationAttributesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the notification attributes for a list of identities you verified with Amazon SES. For information about Amazon SES notifications, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity-using-notifications.html).
public struct GetIdentityNotificationAttributesInput: Swift.Equatable {
    /// A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
    /// This member is required.
    public var identities: [Swift.String]?

    public init(
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityNotificationAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetIdentityNotificationAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetIdentityNotificationAttributesResult"]
            var value = GetIdentityNotificationAttributesOutput()
            value.notificationAttributes = try reader["NotificationAttributes"].readMapIfPresent(valueReadingClosure: SESClientTypes.IdentityNotificationAttributes.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

/// Represents the notification attributes for a list of identities.
public struct GetIdentityNotificationAttributesOutput: Swift.Equatable {
    /// A map of Identity to IdentityNotificationAttributes.
    /// This member is required.
    public var notificationAttributes: [Swift.String:SESClientTypes.IdentityNotificationAttributes]?

    public init(
        notificationAttributes: [Swift.String:SESClientTypes.IdentityNotificationAttributes]? = nil
    )
    {
        self.notificationAttributes = notificationAttributes
    }
}

enum GetIdentityNotificationAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetIdentityPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case policyNames = "PolicyNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policyNames = policyNames {
            if !policyNames.isEmpty {
                var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
                for (index0, policyname0) in policyNames.enumerated() {
                    try policyNamesContainer.encode(policyname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
                try policyNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityPoliciesInput {

    static func urlPathProvider(_ value: GetIdentityPoliciesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the requested sending authorization policies for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
public struct GetIdentityPoliciesInput: Swift.Equatable {
    /// The identity for which the policies are retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?
    /// A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use ListIdentityPolicies.
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init(
        identity: Swift.String? = nil,
        policyNames: [Swift.String]? = nil
    )
    {
        self.identity = identity
        self.policyNames = policyNames
    }
}

extension GetIdentityPoliciesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetIdentityPoliciesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetIdentityPoliciesResult"]
            var value = GetIdentityPoliciesOutput()
            value.policies = try reader["Policies"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

/// Represents the requested sending authorization policies.
public struct GetIdentityPoliciesOutput: Swift.Equatable {
    /// A map of policy names to policies.
    /// This member is required.
    public var policies: [Swift.String:Swift.String]?

    public init(
        policies: [Swift.String:Swift.String]? = nil
    )
    {
        self.policies = policies
    }
}

enum GetIdentityPoliciesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetIdentityVerificationAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityVerificationAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityVerificationAttributesInput {

    static func urlPathProvider(_ value: GetIdentityVerificationAttributesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return the Amazon SES verification status of a list of identities. For domain identities, this request also returns the verification token. For information about verifying identities with Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html).
public struct GetIdentityVerificationAttributesInput: Swift.Equatable {
    /// A list of identities.
    /// This member is required.
    public var identities: [Swift.String]?

    public init(
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

extension GetIdentityVerificationAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetIdentityVerificationAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetIdentityVerificationAttributesResult"]
            var value = GetIdentityVerificationAttributesOutput()
            value.verificationAttributes = try reader["VerificationAttributes"].readMapIfPresent(valueReadingClosure: SESClientTypes.IdentityVerificationAttributes.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

/// The Amazon SES verification status of a list of identities. For domain identities, this response also contains the verification token.
public struct GetIdentityVerificationAttributesOutput: Swift.Equatable {
    /// A map of Identities to IdentityVerificationAttributes objects.
    /// This member is required.
    public var verificationAttributes: [Swift.String:SESClientTypes.IdentityVerificationAttributes]?

    public init(
        verificationAttributes: [Swift.String:SESClientTypes.IdentityVerificationAttributes]? = nil
    )
    {
        self.verificationAttributes = verificationAttributes
    }
}

enum GetIdentityVerificationAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetSendQuotaInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetSendQuota", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetSendQuotaInput {

    static func urlPathProvider(_ value: GetSendQuotaInput) -> Swift.String? {
        return "/"
    }
}

public struct GetSendQuotaInput: Swift.Equatable {

    public init() { }
}

extension GetSendQuotaOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetSendQuotaOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetSendQuotaResult"]
            var value = GetSendQuotaOutput()
            value.max24HourSend = try reader["Max24HourSend"].readIfPresent() ?? 0
            value.maxSendRate = try reader["MaxSendRate"].readIfPresent() ?? 0
            value.sentLast24Hours = try reader["SentLast24Hours"].readIfPresent() ?? 0
            return value
        }
    }
}

/// Represents your Amazon SES daily sending quota, maximum send rate, and the number of emails you have sent in the last 24 hours.
public struct GetSendQuotaOutput: Swift.Equatable {
    /// The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.
    public var max24HourSend: Swift.Double
    /// The maximum number of emails that Amazon SES can accept from the user's account per second. The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate.
    public var maxSendRate: Swift.Double
    /// The number of emails sent during the previous 24 hours.
    public var sentLast24Hours: Swift.Double

    public init(
        max24HourSend: Swift.Double = 0.0,
        maxSendRate: Swift.Double = 0.0,
        sentLast24Hours: Swift.Double = 0.0
    )
    {
        self.max24HourSend = max24HourSend
        self.maxSendRate = maxSendRate
        self.sentLast24Hours = sentLast24Hours
    }
}

enum GetSendQuotaOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetSendStatisticsInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetSendStatistics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetSendStatisticsInput {

    static func urlPathProvider(_ value: GetSendStatisticsInput) -> Swift.String? {
        return "/"
    }
}

public struct GetSendStatisticsInput: Swift.Equatable {

    public init() { }
}

extension GetSendStatisticsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetSendStatisticsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetSendStatisticsResult"]
            var value = GetSendStatisticsOutput()
            value.sendDataPoints = try reader["SendDataPoints"].readListIfPresent(memberReadingClosure: SESClientTypes.SendDataPoint.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// Represents a list of data points. This list contains aggregated data from the previous two weeks of your sending activity with Amazon SES.
public struct GetSendStatisticsOutput: Swift.Equatable {
    /// A list of data points, each of which represents 15 minutes of activity.
    public var sendDataPoints: [SESClientTypes.SendDataPoint]?

    public init(
        sendDataPoints: [SESClientTypes.SendDataPoint]? = nil
    )
    {
        self.sendDataPoints = sendDataPoints
    }
}

enum GetSendStatisticsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("GetTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTemplateInput {

    static func urlPathProvider(_ value: GetTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct GetTemplateInput: Swift.Equatable {
    /// The name of the template to retrieve.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

extension GetTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetTemplateResult"]
            var value = GetTemplateOutput()
            value.template = try reader["Template"].readIfPresent(readingClosure: SESClientTypes.Template.readingClosure)
            return value
        }
    }
}

public struct GetTemplateOutput: Swift.Equatable {
    /// The content of the email, composed of a subject line and either an HTML part or a text-only part.
    public var template: SESClientTypes.Template?

    public init(
        template: SESClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

enum GetTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TemplateDoesNotExist": return try await TemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.IdentityDkimAttributes: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimEnabled = "DkimEnabled"
        case dkimTokens = "DkimTokens"
        case dkimVerificationStatus = "DkimVerificationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if dkimEnabled != false {
            try container.encode(dkimEnabled, forKey: ClientRuntime.Key("DkimEnabled"))
        }
        if let dkimTokens = dkimTokens {
            if !dkimTokens.isEmpty {
                var dkimTokensContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DkimTokens"))
                for (index0, verificationtoken0) in dkimTokens.enumerated() {
                    try dkimTokensContainer.encode(verificationtoken0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dkimTokensContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DkimTokens"))
                try dkimTokensContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dkimVerificationStatus = dkimVerificationStatus {
            try container.encode(dkimVerificationStatus, forKey: ClientRuntime.Key("DkimVerificationStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.IdentityDkimAttributes, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.IdentityDkimAttributes()
            value.dkimEnabled = try reader["DkimEnabled"].readIfPresent() ?? false
            value.dkimVerificationStatus = try reader["DkimVerificationStatus"].readIfPresent()
            value.dkimTokens = try reader["DkimTokens"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the DKIM attributes of a verified email address or a domain.
    public struct IdentityDkimAttributes: Swift.Equatable {
        /// Is true if DKIM signing is enabled for email sent from the identity. It's false otherwise. The default value is true.
        /// This member is required.
        public var dkimEnabled: Swift.Bool
        /// A set of character strings that represent the domain's identity. Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.) For more information about creating DNS records using DKIM tokens, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html).
        public var dkimTokens: [Swift.String]?
        /// Describes whether Amazon SES has successfully verified the DKIM DNS records (tokens) published in the domain name's DNS. (This only applies to domain identities, not email address identities.)
        /// This member is required.
        public var dkimVerificationStatus: SESClientTypes.VerificationStatus?

        public init(
            dkimEnabled: Swift.Bool = false,
            dkimTokens: [Swift.String]? = nil,
            dkimVerificationStatus: SESClientTypes.VerificationStatus? = nil
        )
        {
            self.dkimEnabled = dkimEnabled
            self.dkimTokens = dkimTokens
            self.dkimVerificationStatus = dkimVerificationStatus
        }
    }

}

extension SESClientTypes.IdentityMailFromDomainAttributes: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMXFailure = "BehaviorOnMXFailure"
        case mailFromDomain = "MailFromDomain"
        case mailFromDomainStatus = "MailFromDomainStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let behaviorOnMXFailure = behaviorOnMXFailure {
            try container.encode(behaviorOnMXFailure, forKey: ClientRuntime.Key("BehaviorOnMXFailure"))
        }
        if let mailFromDomain = mailFromDomain {
            try container.encode(mailFromDomain, forKey: ClientRuntime.Key("MailFromDomain"))
        }
        if let mailFromDomainStatus = mailFromDomainStatus {
            try container.encode(mailFromDomainStatus, forKey: ClientRuntime.Key("MailFromDomainStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.IdentityMailFromDomainAttributes, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.IdentityMailFromDomainAttributes()
            value.mailFromDomain = try reader["MailFromDomain"].readIfPresent()
            value.mailFromDomainStatus = try reader["MailFromDomainStatus"].readIfPresent()
            value.behaviorOnMXFailure = try reader["BehaviorOnMXFailure"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the custom MAIL FROM domain attributes of a verified identity (email address or domain).
    public struct IdentityMailFromDomainAttributes: Swift.Equatable {
        /// The action that Amazon SES takes if it cannot successfully read the required MX record when you send an email. A value of UseDefaultValue indicates that if Amazon SES cannot read the required MX record, it uses amazonses.com (or a subdomain of that) as the MAIL FROM domain. A value of RejectMessage indicates that if Amazon SES cannot read the required MX record, Amazon SES returns a MailFromDomainNotVerified error and does not send the email. The custom MAIL FROM setup states that result in this behavior are Pending, Failed, and TemporaryFailure.
        /// This member is required.
        public var behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure?
        /// The custom MAIL FROM domain that the identity is configured to use.
        /// This member is required.
        public var mailFromDomain: Swift.String?
        /// The state that indicates whether Amazon SES has successfully read the MX record required for custom MAIL FROM domain setup. If the state is Success, Amazon SES uses the specified custom MAIL FROM domain when the verified identity sends an email. All other states indicate that Amazon SES takes the action described by BehaviorOnMXFailure.
        /// This member is required.
        public var mailFromDomainStatus: SESClientTypes.CustomMailFromStatus?

        public init(
            behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: SESClientTypes.CustomMailFromStatus? = nil
        )
        {
            self.behaviorOnMXFailure = behaviorOnMXFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension SESClientTypes.IdentityNotificationAttributes: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceTopic = "BounceTopic"
        case complaintTopic = "ComplaintTopic"
        case deliveryTopic = "DeliveryTopic"
        case forwardingEnabled = "ForwardingEnabled"
        case headersInBounceNotificationsEnabled = "HeadersInBounceNotificationsEnabled"
        case headersInComplaintNotificationsEnabled = "HeadersInComplaintNotificationsEnabled"
        case headersInDeliveryNotificationsEnabled = "HeadersInDeliveryNotificationsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceTopic = bounceTopic {
            try container.encode(bounceTopic, forKey: ClientRuntime.Key("BounceTopic"))
        }
        if let complaintTopic = complaintTopic {
            try container.encode(complaintTopic, forKey: ClientRuntime.Key("ComplaintTopic"))
        }
        if let deliveryTopic = deliveryTopic {
            try container.encode(deliveryTopic, forKey: ClientRuntime.Key("DeliveryTopic"))
        }
        if forwardingEnabled != false {
            try container.encode(forwardingEnabled, forKey: ClientRuntime.Key("ForwardingEnabled"))
        }
        if headersInBounceNotificationsEnabled != false {
            try container.encode(headersInBounceNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInBounceNotificationsEnabled"))
        }
        if headersInComplaintNotificationsEnabled != false {
            try container.encode(headersInComplaintNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInComplaintNotificationsEnabled"))
        }
        if headersInDeliveryNotificationsEnabled != false {
            try container.encode(headersInDeliveryNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInDeliveryNotificationsEnabled"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.IdentityNotificationAttributes, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.IdentityNotificationAttributes()
            value.bounceTopic = try reader["BounceTopic"].readIfPresent()
            value.complaintTopic = try reader["ComplaintTopic"].readIfPresent()
            value.deliveryTopic = try reader["DeliveryTopic"].readIfPresent()
            value.forwardingEnabled = try reader["ForwardingEnabled"].readIfPresent() ?? false
            value.headersInBounceNotificationsEnabled = try reader["HeadersInBounceNotificationsEnabled"].readIfPresent() ?? false
            value.headersInComplaintNotificationsEnabled = try reader["HeadersInComplaintNotificationsEnabled"].readIfPresent() ?? false
            value.headersInDeliveryNotificationsEnabled = try reader["HeadersInDeliveryNotificationsEnabled"].readIfPresent() ?? false
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the notification attributes of an identity, including whether an identity has Amazon Simple Notification Service (Amazon SNS) topics set for bounce, complaint, and/or delivery notifications, and whether feedback forwarding is enabled for bounce and complaint notifications.
    public struct IdentityNotificationAttributes: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes bounce notifications.
        /// This member is required.
        public var bounceTopic: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes complaint notifications.
        /// This member is required.
        public var complaintTopic: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes delivery notifications.
        /// This member is required.
        public var deliveryTopic: Swift.String?
        /// Describes whether Amazon SES forwards bounce and complaint notifications as email. true indicates that Amazon SES forwards bounce and complaint notifications as email, while false indicates that bounce and complaint notifications are published only to the specified bounce and complaint Amazon SNS topics.
        /// This member is required.
        public var forwardingEnabled: Swift.Bool
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Bounce. A value of true specifies that Amazon SES includes headers in bounce notifications, and a value of false specifies that Amazon SES does not include headers in bounce notifications.
        public var headersInBounceNotificationsEnabled: Swift.Bool
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Complaint. A value of true specifies that Amazon SES includes headers in complaint notifications, and a value of false specifies that Amazon SES does not include headers in complaint notifications.
        public var headersInComplaintNotificationsEnabled: Swift.Bool
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Delivery. A value of true specifies that Amazon SES includes headers in delivery notifications, and a value of false specifies that Amazon SES does not include headers in delivery notifications.
        public var headersInDeliveryNotificationsEnabled: Swift.Bool

        public init(
            bounceTopic: Swift.String? = nil,
            complaintTopic: Swift.String? = nil,
            deliveryTopic: Swift.String? = nil,
            forwardingEnabled: Swift.Bool = false,
            headersInBounceNotificationsEnabled: Swift.Bool = false,
            headersInComplaintNotificationsEnabled: Swift.Bool = false,
            headersInDeliveryNotificationsEnabled: Swift.Bool = false
        )
        {
            self.bounceTopic = bounceTopic
            self.complaintTopic = complaintTopic
            self.deliveryTopic = deliveryTopic
            self.forwardingEnabled = forwardingEnabled
            self.headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabled
            self.headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabled
            self.headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabled
        }
    }

}

extension SESClientTypes {
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailaddress
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailaddress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "Domain"
            case .emailaddress: return "EmailAddress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.IdentityVerificationAttributes: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationStatus = "VerificationStatus"
        case verificationToken = "VerificationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let verificationStatus = verificationStatus {
            try container.encode(verificationStatus, forKey: ClientRuntime.Key("VerificationStatus"))
        }
        if let verificationToken = verificationToken {
            try container.encode(verificationToken, forKey: ClientRuntime.Key("VerificationToken"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.IdentityVerificationAttributes, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.IdentityVerificationAttributes()
            value.verificationStatus = try reader["VerificationStatus"].readIfPresent()
            value.verificationToken = try reader["VerificationToken"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the verification attributes of a single identity.
    public struct IdentityVerificationAttributes: Swift.Equatable {
        /// The verification status of the identity: "Pending", "Success", "Failed", or "TemporaryFailure".
        /// This member is required.
        public var verificationStatus: SESClientTypes.VerificationStatus?
        /// The verification token for a domain identity. Null for email address identities.
        public var verificationToken: Swift.String?

        public init(
            verificationStatus: SESClientTypes.VerificationStatus? = nil,
            verificationToken: Swift.String? = nil
        )
        {
            self.verificationStatus = verificationStatus
            self.verificationToken = verificationToken
        }
    }

}

extension InvalidCloudWatchDestinationException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidCloudWatchDestinationException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.eventDestinationName = try reader["EventDestinationName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the Amazon CloudWatch destination is invalid. See the error message for details.
public struct InvalidCloudWatchDestinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        /// Indicates that the event destination does not exist.
        public internal(set) var eventDestinationName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCloudWatchDestination" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.eventDestinationName = eventDestinationName
        self.properties.message = message
    }
}

extension InvalidConfigurationSetException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidConfigurationSetException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the configuration set is invalid. See the error message for details.
public struct InvalidConfigurationSetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidConfigurationSet" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDeliveryOptionsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDeliveryOptionsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that provided delivery option is invalid.
public struct InvalidDeliveryOptionsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeliveryOptions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidFirehoseDestinationException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidFirehoseDestinationException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.eventDestinationName = try reader["EventDestinationName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the Amazon Kinesis Firehose destination is invalid. See the error message for details.
public struct InvalidFirehoseDestinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        /// Indicates that the event destination does not exist.
        public internal(set) var eventDestinationName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFirehoseDestination" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.eventDestinationName = eventDestinationName
        self.properties.message = message
    }
}

extension InvalidLambdaFunctionException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidLambdaFunctionException()
        value.properties.functionArn = try reader["FunctionArn"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the provided Amazon Web Services Lambda function is invalid, or that Amazon SES could not execute the provided function, possibly due to permissions issues. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
public struct InvalidLambdaFunctionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the ARN of the function was not found.
        public internal(set) var functionArn: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLambdaFunction" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        functionArn: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.functionArn = functionArn
        self.properties.message = message
    }
}

extension InvalidPolicyException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidPolicyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the provided policy is invalid. Check the error stack for more information about what caused the error.
public struct InvalidPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRenderingParameterException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidRenderingParameterException()
        value.properties.templateName = try reader["TemplateName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that one or more of the replacement values you provided is invalid. This error may occur when the TemplateData object contains invalid JSON.
public struct InvalidRenderingParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var templateName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRenderingParameter" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.templateName = templateName
    }
}

extension InvalidS3ConfigurationException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidS3ConfigurationException()
        value.properties.bucket = try reader["Bucket"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the provided Amazon S3 bucket or Amazon Web Services KMS encryption key is invalid, or that Amazon SES could not publish to the bucket, possibly due to permissions issues. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
public struct InvalidS3ConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicated that the S3 Bucket was not found.
        public internal(set) var bucket: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3Configuration" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.bucket = bucket
        self.properties.message = message
    }
}

extension InvalidSNSDestinationException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSNSDestinationException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.eventDestinationName = try reader["EventDestinationName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the Amazon Simple Notification Service (Amazon SNS) destination is invalid. See the error message for details.
public struct InvalidSNSDestinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that the configuration set does not exist.
        public internal(set) var configurationSetName: Swift.String? = nil
        /// Indicates that the event destination does not exist.
        public internal(set) var eventDestinationName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSNSDestination" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.eventDestinationName = eventDestinationName
        self.properties.message = message
    }
}

extension InvalidSnsTopicException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSnsTopicException()
        value.properties.topic = try reader["Topic"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the provided Amazon SNS topic is invalid, or that Amazon SES could not publish to the topic, possibly due to permissions issues. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
public struct InvalidSnsTopicException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Indicates that the topic does not exist.
        public internal(set) var topic: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSnsTopic" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        topic: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.topic = topic
    }
}

extension InvalidTemplateException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidTemplateException()
        value.properties.templateName = try reader["TemplateName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the template that you specified could not be rendered. This issue may occur when a template refers to a partial that does not exist.
public struct InvalidTemplateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var templateName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTemplate" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.templateName = templateName
    }
}

extension InvalidTrackingOptionsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidTrackingOptionsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the custom domain to be used for open and click tracking redirects is invalid. This error appears most often in the following situations:
///
/// * When the tracking domain you specified is not verified in Amazon SES.
///
/// * When the tracking domain you specified is not a valid domain or subdomain.
public struct InvalidTrackingOptionsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTrackingOptions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESClientTypes {
    public enum InvocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case event
        case requestresponse
        case sdkUnknown(Swift.String)

        public static var allCases: [InvocationType] {
            return [
                .event,
                .requestresponse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .event: return "Event"
            case .requestresponse: return "RequestResponse"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvocationType(rawValue: rawValue) ?? InvocationType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.KinesisFirehoseDestination: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamARN = "DeliveryStreamARN"
        case iamRoleARN = "IAMRoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deliveryStreamARN = deliveryStreamARN {
            try container.encode(deliveryStreamARN, forKey: ClientRuntime.Key("DeliveryStreamARN"))
        }
        if let iamRoleARN = iamRoleARN {
            try container.encode(iamRoleARN, forKey: ClientRuntime.Key("IAMRoleARN"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.KinesisFirehoseDestination, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.KinesisFirehoseDestination()
            value.iamRoleARN = try reader["IAMRoleARN"].readIfPresent()
            value.deliveryStreamARN = try reader["DeliveryStreamARN"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination. Event destinations, such as Amazon Kinesis Firehose, are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
    public struct KinesisFirehoseDestination: Swift.Equatable {
        /// The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.
        /// This member is required.
        public var deliveryStreamARN: Swift.String?
        /// The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
        /// This member is required.
        public var iamRoleARN: Swift.String?

        public init(
            deliveryStreamARN: Swift.String? = nil,
            iamRoleARN: Swift.String? = nil
        )
        {
            self.deliveryStreamARN = deliveryStreamARN
            self.iamRoleARN = iamRoleARN
        }
    }

}

extension SESClientTypes.LambdaAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
        case invocationType = "InvocationType"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let functionArn = functionArn {
            try container.encode(functionArn, forKey: ClientRuntime.Key("FunctionArn"))
        }
        if let invocationType = invocationType {
            try container.encode(invocationType, forKey: ClientRuntime.Key("InvocationType"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.LambdaAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.LambdaAction()
            value.topicArn = try reader["TopicArn"].readIfPresent()
            value.functionArn = try reader["FunctionArn"].readIfPresent()
            value.invocationType = try reader["InvocationType"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action calls an Amazon Web Services Lambda function and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). To enable Amazon SES to call your Amazon Web Services Lambda function or to publish to an Amazon SNS topic of another account, Amazon SES must have permission to access those resources. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-permissions.html). For information about using Amazon Web Services Lambda actions in receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-lambda.html).
    public struct LambdaAction: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Lambda function. An example of an Amazon Web Services Lambda function ARN is arn:aws:lambda:us-west-2:account-id:function:MyFunction. For more information about Amazon Web Services Lambda, see the [Amazon Web Services Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html).
        /// This member is required.
        public var functionArn: Swift.String?
        /// The invocation type of the Amazon Web Services Lambda function. An invocation type of RequestResponse means that the execution of the function immediately results in a response, and a value of Event means that the function is invoked asynchronously. The default value is Event. For information about Amazon Web Services Lambda invocation types, see the [Amazon Web Services Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html). There is a 30-second timeout on RequestResponse invocations. You should use Event invocation in most cases. Use RequestResponse only to make a mail flow decision, such as whether to stop the receipt rule or the receipt rule set.
        public var invocationType: SESClientTypes.InvocationType?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is executed. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) operation in Amazon SNS. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init(
            functionArn: Swift.String? = nil,
            invocationType: SESClientTypes.InvocationType? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.functionArn = functionArn
            self.invocationType = invocationType
            self.topicArn = topicArn
        }
    }

}

extension LimitExceededException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that a resource could not be created because of service limits. For a list of Amazon SES limits, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/limits.html).
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ListConfigurationSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListConfigurationSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListConfigurationSetsInput {

    static func urlPathProvider(_ value: ListConfigurationSetsInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to list the configuration sets associated with your Amazon Web Services account. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct ListConfigurationSetsInput: Swift.Equatable {
    /// The number of configuration sets to return.
    public var maxItems: Swift.Int?
    /// A token returned from a previous call to ListConfigurationSets to indicate the position of the configuration set in the configuration set list.
    public var nextToken: Swift.String?

    public init(
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

extension ListConfigurationSetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListConfigurationSetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListConfigurationSetsResult"]
            var value = ListConfigurationSetsOutput()
            value.configurationSets = try reader["ConfigurationSets"].readListIfPresent(memberReadingClosure: SESClientTypes.ConfigurationSet.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            return value
        }
    }
}

/// A list of configuration sets associated with your Amazon Web Services account. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct ListConfigurationSetsOutput: Swift.Equatable {
    /// A list of configuration sets.
    public var configurationSets: [SESClientTypes.ConfigurationSet]?
    /// A token indicating that there are additional configuration sets available to be listed. Pass this token to successive calls of ListConfigurationSets.
    public var nextToken: Swift.String?

    public init(
        configurationSets: [SESClientTypes.ConfigurationSet]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

enum ListConfigurationSetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListCustomVerificationEmailTemplatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListCustomVerificationEmailTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListCustomVerificationEmailTemplatesInput {

    static func urlPathProvider(_ value: ListCustomVerificationEmailTemplatesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to list the existing custom verification email templates for your account. For more information about custom verification email templates, see [Using Custom Verification Email Templates](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom) in the Amazon SES Developer Guide.
public struct ListCustomVerificationEmailTemplatesInput: Swift.Equatable {
    /// The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation returns up to 50 results.
    public var maxResults: Swift.Int?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES account.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListCustomVerificationEmailTemplatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListCustomVerificationEmailTemplatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListCustomVerificationEmailTemplatesResult"]
            var value = ListCustomVerificationEmailTemplatesOutput()
            value.customVerificationEmailTemplates = try reader["CustomVerificationEmailTemplates"].readListIfPresent(memberReadingClosure: SESClientTypes.CustomVerificationEmailTemplate.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            return value
        }
    }
}

/// A paginated list of custom verification email templates.
public struct ListCustomVerificationEmailTemplatesOutput: Swift.Equatable {
    /// A list of the custom verification email templates that exist in your account.
    public var customVerificationEmailTemplates: [SESClientTypes.CustomVerificationEmailTemplate]?
    /// A token indicating that there are additional custom verification email templates available to be listed. Pass this token to a subsequent call to ListTemplates to retrieve the next 50 custom verification email templates.
    public var nextToken: Swift.String?

    public init(
        customVerificationEmailTemplates: [SESClientTypes.CustomVerificationEmailTemplate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplates = customVerificationEmailTemplates
        self.nextToken = nextToken
    }
}

enum ListCustomVerificationEmailTemplatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListIdentitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityType = "IdentityType"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identityType = identityType {
            try container.encode(identityType, forKey: ClientRuntime.Key("IdentityType"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListIdentities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListIdentitiesInput {

    static func urlPathProvider(_ value: ListIdentitiesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return a list of all identities (email addresses and domains) that you have attempted to verify under your Amazon Web Services account, regardless of verification status.
public struct ListIdentitiesInput: Swift.Equatable {
    /// The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities are listed.
    public var identityType: SESClientTypes.IdentityType?
    /// The maximum number of identities per page. Possible values are 1-1000 inclusive.
    public var maxItems: Swift.Int?
    /// The token to use for pagination.
    public var nextToken: Swift.String?

    public init(
        identityType: SESClientTypes.IdentityType? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identityType = identityType
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

extension ListIdentitiesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListIdentitiesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListIdentitiesResult"]
            var value = ListIdentitiesOutput()
            value.identities = try reader["Identities"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            return value
        }
    }
}

/// A list of all identities that you have attempted to verify under your Amazon Web Services account, regardless of verification status.
public struct ListIdentitiesOutput: Swift.Equatable {
    /// A list of identities.
    /// This member is required.
    public var identities: [Swift.String]?
    /// The token used for pagination.
    public var nextToken: Swift.String?

    public init(
        identities: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identities = identities
        self.nextToken = nextToken
    }
}

enum ListIdentitiesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListIdentityPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("ListIdentityPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListIdentityPoliciesInput {

    static func urlPathProvider(_ value: ListIdentityPoliciesInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to return a list of sending authorization policies that are attached to an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
public struct ListIdentityPoliciesInput: Swift.Equatable {
    /// The identity that is associated with the policy for which the policies are listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?

    public init(
        identity: Swift.String? = nil
    )
    {
        self.identity = identity
    }
}

extension ListIdentityPoliciesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListIdentityPoliciesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListIdentityPoliciesResult"]
            var value = ListIdentityPoliciesOutput()
            value.policyNames = try reader["PolicyNames"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// A list of names of sending authorization policies that apply to an identity.
public struct ListIdentityPoliciesOutput: Swift.Equatable {
    /// A list of names of policies that apply to the specified identity.
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init(
        policyNames: [Swift.String]? = nil
    )
    {
        self.policyNames = policyNames
    }
}

enum ListIdentityPoliciesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListReceiptFiltersInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListReceiptFilters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListReceiptFiltersInput {

    static func urlPathProvider(_ value: ListReceiptFiltersInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to list the IP address filters that exist under your Amazon Web Services account. You use IP address filters when you receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct ListReceiptFiltersInput: Swift.Equatable {

    public init() { }
}

extension ListReceiptFiltersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListReceiptFiltersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListReceiptFiltersResult"]
            var value = ListReceiptFiltersOutput()
            value.filters = try reader["Filters"].readListIfPresent(memberReadingClosure: SESClientTypes.ReceiptFilter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// A list of IP address filters that exist under your Amazon Web Services account.
public struct ListReceiptFiltersOutput: Swift.Equatable {
    /// A list of IP address filter data structures, which each consist of a name, an IP address range, and whether to allow or block mail from it.
    public var filters: [SESClientTypes.ReceiptFilter]?

    public init(
        filters: [SESClientTypes.ReceiptFilter]? = nil
    )
    {
        self.filters = filters
    }
}

enum ListReceiptFiltersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListReceiptRuleSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListReceiptRuleSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListReceiptRuleSetsInput {

    static func urlPathProvider(_ value: ListReceiptRuleSetsInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to list the receipt rule sets that exist under your Amazon Web Services account. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct ListReceiptRuleSetsInput: Swift.Equatable {
    /// A token returned from a previous call to ListReceiptRuleSets to indicate the position in the receipt rule set list.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension ListReceiptRuleSetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListReceiptRuleSetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListReceiptRuleSetsResult"]
            var value = ListReceiptRuleSetsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.ruleSets = try reader["RuleSets"].readListIfPresent(memberReadingClosure: SESClientTypes.ReceiptRuleSetMetadata.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// A list of receipt rule sets that exist under your Amazon Web Services account.
public struct ListReceiptRuleSetsOutput: Swift.Equatable {
    /// A token indicating that there are additional receipt rule sets available to be listed. Pass this token to successive calls of ListReceiptRuleSets to retrieve up to 100 receipt rule sets at a time.
    public var nextToken: Swift.String?
    /// The metadata for the currently active receipt rule set. The metadata consists of the rule set name and the timestamp of when the rule set was created.
    public var ruleSets: [SESClientTypes.ReceiptRuleSetMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        ruleSets: [SESClientTypes.ReceiptRuleSetMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleSets = ruleSets
    }
}

enum ListReceiptRuleSetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListTemplatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTemplatesInput {

    static func urlPathProvider(_ value: ListTemplatesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListTemplatesInput: Swift.Equatable {
    /// The maximum number of templates to return. This value must be at least 1 and less than or equal to 100. If more than 100 items are requested, the page size will automatically set to 100. If you do not specify a value, 10 is the default page size.
    public var maxItems: Swift.Int?
    /// A token returned from a previous call to ListTemplates to indicate the position in the list of email templates.
    public var nextToken: Swift.String?

    public init(
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

extension ListTemplatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListTemplatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListTemplatesResult"]
            var value = ListTemplatesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.templatesMetadata = try reader["TemplatesMetadata"].readListIfPresent(memberReadingClosure: SESClientTypes.TemplateMetadata.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListTemplatesOutput: Swift.Equatable {
    /// A token indicating that there are additional email templates available to be listed. Pass this token to a subsequent call to ListTemplates to retrieve the next set of email templates within your page size.
    public var nextToken: Swift.String?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES account.
    public var templatesMetadata: [SESClientTypes.TemplateMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        templatesMetadata: [SESClientTypes.TemplateMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.templatesMetadata = templatesMetadata
    }
}

enum ListTemplatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListVerifiedEmailAddressesInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListVerifiedEmailAddresses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListVerifiedEmailAddressesInput {

    static func urlPathProvider(_ value: ListVerifiedEmailAddressesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListVerifiedEmailAddressesInput: Swift.Equatable {

    public init() { }
}

extension ListVerifiedEmailAddressesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListVerifiedEmailAddressesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListVerifiedEmailAddressesResult"]
            var value = ListVerifiedEmailAddressesOutput()
            value.verifiedEmailAddresses = try reader["VerifiedEmailAddresses"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// A list of email addresses that you have verified with Amazon SES under your Amazon Web Services account.
public struct ListVerifiedEmailAddressesOutput: Swift.Equatable {
    /// A list of email addresses that have been verified.
    public var verifiedEmailAddresses: [Swift.String]?

    public init(
        verifiedEmailAddresses: [Swift.String]? = nil
    )
    {
        self.verifiedEmailAddresses = verifiedEmailAddresses
    }
}

enum ListVerifiedEmailAddressesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension MailFromDomainNotVerifiedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = MailFromDomainNotVerifiedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the message could not be sent because Amazon SES could not read the MX record required to use the specified MAIL FROM domain. For information about editing the custom MAIL FROM domain settings for an identity, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-edit.html).
public struct MailFromDomainNotVerifiedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MailFromDomainNotVerifiedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESClientTypes.Message: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
        if let subject = subject {
            try container.encode(subject, forKey: ClientRuntime.Key("Subject"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.Message, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.Message()
            value.subject = try reader["Subject"].readIfPresent(readingClosure: SESClientTypes.Content.readingClosure)
            value.body = try reader["Body"].readIfPresent(readingClosure: SESClientTypes.Body.readingClosure)
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the message to be sent, composed of a subject and a body.
    public struct Message: Swift.Equatable {
        /// The message body.
        /// This member is required.
        public var body: SESClientTypes.Body?
        /// The subject of the message: A short summary of the content, which appears in the recipient's inbox.
        /// This member is required.
        public var subject: SESClientTypes.Content?

        public init(
            body: SESClientTypes.Body? = nil,
            subject: SESClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension SESClientTypes.MessageDsn: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrivalDate = "ArrivalDate"
        case extensionFields = "ExtensionFields"
        case reportingMta = "ReportingMta"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arrivalDate = arrivalDate {
            try container.encodeTimestamp(arrivalDate, format: .dateTime, forKey: ClientRuntime.Key("ArrivalDate"))
        }
        if let extensionFields = extensionFields {
            if !extensionFields.isEmpty {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                for (index0, extensionfield0) in extensionFields.enumerated() {
                    try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                try extensionFieldsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reportingMta = reportingMta {
            try container.encode(reportingMta, forKey: ClientRuntime.Key("ReportingMta"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.MessageDsn, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.MessageDsn()
            value.reportingMta = try reader["ReportingMta"].readIfPresent()
            value.arrivalDate = try reader["ArrivalDate"].readTimestampIfPresent(format: .dateTime)
            value.extensionFields = try reader["ExtensionFields"].readListIfPresent(memberReadingClosure: SESClientTypes.ExtensionField.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension SESClientTypes {
    /// Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email.html).
    public struct MessageDsn: Swift.Equatable {
        /// When the message was received by the reporting mail transfer agent (MTA), in [RFC 822](https://www.ietf.org/rfc/rfc0822.txt) date-time format.
        public var arrivalDate: ClientRuntime.Date?
        /// Additional X-headers to include in the DSN.
        public var extensionFields: [SESClientTypes.ExtensionField]?
        /// The reporting MTA that attempted to deliver the message, formatted as specified in [RFC 3464](https://tools.ietf.org/html/rfc3464) (mta-name-type; mta-name). The default value is dns; inbound-smtp.[region].amazonaws.com.
        /// This member is required.
        public var reportingMta: Swift.String?

        public init(
            arrivalDate: ClientRuntime.Date? = nil,
            extensionFields: [SESClientTypes.ExtensionField]? = nil,
            reportingMta: Swift.String? = nil
        )
        {
            self.arrivalDate = arrivalDate
            self.extensionFields = extensionFields
            self.reportingMta = reportingMta
        }
    }

}

extension MessageRejected {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = MessageRejected()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the action failed, and the message could not be sent. Check the error stack for more information about what caused the error.
public struct MessageRejected: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MessageRejected" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESClientTypes.MessageTag: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.MessageTag, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.MessageTag()
            value.name = try reader["Name"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains the name and value of a tag that you can provide to SendEmail or SendRawEmail to apply to an email. Message tags, which you use with configuration sets, enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
    public struct MessageTag: Swift.Equatable {
        /// The name of the tag. The name must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain 256 characters or fewer.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the tag. The value must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain 256 characters or fewer.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension MissingRenderingAttributeException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = MissingRenderingAttributeException()
        value.properties.templateName = try reader["TemplateName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that one or more of the replacement values for the specified template was not specified. Ensure that the TemplateData object contains references to all of the replacement tags in the specified template.
public struct MissingRenderingAttributeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var templateName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingRenderingAttribute" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.templateName = templateName
    }
}

extension SESClientTypes {
    public enum NotificationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case complaint
        case delivery
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationType] {
            return [
                .bounce,
                .complaint,
                .delivery,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "Bounce"
            case .complaint: return "Complaint"
            case .delivery: return "Delivery"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotificationType(rawValue: rawValue) ?? NotificationType.sdkUnknown(rawValue)
        }
    }
}

extension ProductionAccessNotGrantedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ProductionAccessNotGrantedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the account has not been granted production access.
public struct ProductionAccessNotGrantedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProductionAccessNotGranted" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let deliveryOptions = deliveryOptions {
            try container.encode(deliveryOptions, forKey: ClientRuntime.Key("DeliveryOptions"))
        }
        try container.encode("PutConfigurationSetDeliveryOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutConfigurationSetDeliveryOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetDeliveryOptionsInput) -> Swift.String? {
        return "/"
    }
}

/// A request to modify the delivery options for a configuration set.
public struct PutConfigurationSetDeliveryOptionsInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    public var deliveryOptions: SESClientTypes.DeliveryOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SESClientTypes.DeliveryOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
    }
}

extension PutConfigurationSetDeliveryOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PutConfigurationSetDeliveryOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return PutConfigurationSetDeliveryOptionsOutput()
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetDeliveryOptionsOutput: Swift.Equatable {

    public init() { }
}

enum PutConfigurationSetDeliveryOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDeliveryOptions": return try await InvalidDeliveryOptionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension PutIdentityPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case policy = "Policy"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("PutIdentityPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutIdentityPolicyInput {

    static func urlPathProvider(_ value: PutIdentityPolicyInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to add or update a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
public struct PutIdentityPolicyInput: Swift.Equatable {
    /// The identity to which that the policy applies. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization-policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        identity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.identity = identity
        self.policy = policy
        self.policyName = policyName
    }
}

extension PutIdentityPolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PutIdentityPolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return PutIdentityPolicyOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct PutIdentityPolicyOutput: Swift.Equatable {

    public init() { }
}

enum PutIdentityPolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidPolicy": return try await InvalidPolicyException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.RawMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let data = data {
            try container.encode(data.base64EncodedString(), forKey: ClientRuntime.Key("Data"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.RawMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.RawMessage()
            value.data = try reader["Data"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents the raw data of the message.
    public struct RawMessage: Swift.Equatable {
        /// The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding. The To:, CC:, and BCC: headers in the raw message can contain a group list. If you are using SendRawEmail with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for SendRawEmail. Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email. For more information, go to the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html).
        /// This member is required.
        public var data: ClientRuntime.Data?

        public init(
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension SESClientTypes.ReceiptAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addHeaderAction = "AddHeaderAction"
        case bounceAction = "BounceAction"
        case lambdaAction = "LambdaAction"
        case s3Action = "S3Action"
        case snsAction = "SNSAction"
        case stopAction = "StopAction"
        case workmailAction = "WorkmailAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addHeaderAction = addHeaderAction {
            try container.encode(addHeaderAction, forKey: ClientRuntime.Key("AddHeaderAction"))
        }
        if let bounceAction = bounceAction {
            try container.encode(bounceAction, forKey: ClientRuntime.Key("BounceAction"))
        }
        if let lambdaAction = lambdaAction {
            try container.encode(lambdaAction, forKey: ClientRuntime.Key("LambdaAction"))
        }
        if let s3Action = s3Action {
            try container.encode(s3Action, forKey: ClientRuntime.Key("S3Action"))
        }
        if let snsAction = snsAction {
            try container.encode(snsAction, forKey: ClientRuntime.Key("SNSAction"))
        }
        if let stopAction = stopAction {
            try container.encode(stopAction, forKey: ClientRuntime.Key("StopAction"))
        }
        if let workmailAction = workmailAction {
            try container.encode(workmailAction, forKey: ClientRuntime.Key("WorkmailAction"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ReceiptAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ReceiptAction()
            value.s3Action = try reader["S3Action"].readIfPresent(readingClosure: SESClientTypes.S3Action.readingClosure)
            value.bounceAction = try reader["BounceAction"].readIfPresent(readingClosure: SESClientTypes.BounceAction.readingClosure)
            value.workmailAction = try reader["WorkmailAction"].readIfPresent(readingClosure: SESClientTypes.WorkmailAction.readingClosure)
            value.lambdaAction = try reader["LambdaAction"].readIfPresent(readingClosure: SESClientTypes.LambdaAction.readingClosure)
            value.stopAction = try reader["StopAction"].readIfPresent(readingClosure: SESClientTypes.StopAction.readingClosure)
            value.addHeaderAction = try reader["AddHeaderAction"].readIfPresent(readingClosure: SESClientTypes.AddHeaderAction.readingClosure)
            value.snsAction = try reader["SNSAction"].readIfPresent(readingClosure: SESClientTypes.SNSAction.readingClosure)
            return value
        }
    }
}

extension SESClientTypes {
    /// An action that Amazon SES can take when it receives an email on behalf of one or more email addresses or domains that you own. An instance of this data type can represent only one action. For information about setting up receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-receipt-rules-console-walkthrough.html).
    public struct ReceiptAction: Swift.Equatable {
        /// Adds a header to the received email.
        public var addHeaderAction: SESClientTypes.AddHeaderAction?
        /// Rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).
        public var bounceAction: SESClientTypes.BounceAction?
        /// Calls an Amazon Web Services Lambda function, and optionally, publishes a notification to Amazon SNS.
        public var lambdaAction: SESClientTypes.LambdaAction?
        /// Saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a notification to Amazon SNS.
        public var s3Action: SESClientTypes.S3Action?
        /// Publishes the email content within a notification to Amazon SNS.
        public var snsAction: SESClientTypes.SNSAction?
        /// Terminates the evaluation of the receipt rule set and optionally publishes a notification to Amazon SNS.
        public var stopAction: SESClientTypes.StopAction?
        /// Calls Amazon WorkMail and, optionally, publishes a notification to Amazon Amazon SNS.
        public var workmailAction: SESClientTypes.WorkmailAction?

        public init(
            addHeaderAction: SESClientTypes.AddHeaderAction? = nil,
            bounceAction: SESClientTypes.BounceAction? = nil,
            lambdaAction: SESClientTypes.LambdaAction? = nil,
            s3Action: SESClientTypes.S3Action? = nil,
            snsAction: SESClientTypes.SNSAction? = nil,
            stopAction: SESClientTypes.StopAction? = nil,
            workmailAction: SESClientTypes.WorkmailAction? = nil
        )
        {
            self.addHeaderAction = addHeaderAction
            self.bounceAction = bounceAction
            self.lambdaAction = lambdaAction
            self.s3Action = s3Action
            self.snsAction = snsAction
            self.stopAction = stopAction
            self.workmailAction = workmailAction
        }
    }

}

extension SESClientTypes.ReceiptFilter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipFilter = "IpFilter"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ipFilter = ipFilter {
            try container.encode(ipFilter, forKey: ClientRuntime.Key("IpFilter"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ReceiptFilter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ReceiptFilter()
            value.name = try reader["Name"].readIfPresent()
            value.ipFilter = try reader["IpFilter"].readIfPresent(readingClosure: SESClientTypes.ReceiptIpFilter.readingClosure)
            return value
        }
    }
}

extension SESClientTypes {
    /// A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses. For information about setting up IP address filters, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-ip-filtering-console-walkthrough.html).
    public struct ReceiptFilter: Swift.Equatable {
        /// A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
        /// This member is required.
        public var ipFilter: SESClientTypes.ReceiptIpFilter?
        /// The name of the IP address filter. The name must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Start and end with a letter or number.
        ///
        /// * Contain 64 characters or fewer.
        /// This member is required.
        public var name: Swift.String?

        public init(
            ipFilter: SESClientTypes.ReceiptIpFilter? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipFilter = ipFilter
            self.name = name
        }
    }

}

extension SESClientTypes {
    public enum ReceiptFilterPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case block
        case sdkUnknown(Swift.String)

        public static var allCases: [ReceiptFilterPolicy] {
            return [
                .allow,
                .block,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "Allow"
            case .block: return "Block"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReceiptFilterPolicy(rawValue: rawValue) ?? ReceiptFilterPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.ReceiptIpFilter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "Cidr"
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidr = cidr {
            try container.encode(cidr, forKey: ClientRuntime.Key("Cidr"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ReceiptIpFilter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ReceiptIpFilter()
            value.policy = try reader["Policy"].readIfPresent()
            value.cidr = try reader["Cidr"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses. For information about setting up IP address filters, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-ip-filtering-console-walkthrough.html).
    public struct ReceiptIpFilter: Swift.Equatable {
        /// A single IP address or a range of IP addresses to block or allow, specified in Classless Inter-Domain Routing (CIDR) notation. An example of a single email address is 10.0.0.1. An example of a range of IP addresses is 10.0.0.1/24. For more information about CIDR notation, see [RFC 2317](https://tools.ietf.org/html/rfc2317).
        /// This member is required.
        public var cidr: Swift.String?
        /// Indicates whether to block or allow incoming mail from the specified IP addresses.
        /// This member is required.
        public var policy: SESClientTypes.ReceiptFilterPolicy?

        public init(
            cidr: Swift.String? = nil,
            policy: SESClientTypes.ReceiptFilterPolicy? = nil
        )
        {
            self.cidr = cidr
            self.policy = policy
        }
    }

}

extension SESClientTypes.ReceiptRule: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case enabled = "Enabled"
        case name = "Name"
        case recipients = "Recipients"
        case scanEnabled = "ScanEnabled"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            if !actions.isEmpty {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                for (index0, receiptaction0) in actions.enumerated() {
                    try actionsContainer.encode(receiptaction0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                try actionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let recipients = recipients {
            if !recipients.isEmpty {
                var recipientsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Recipients"))
                for (index0, recipient0) in recipients.enumerated() {
                    try recipientsContainer.encode(recipient0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recipientsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Recipients"))
                try recipientsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if scanEnabled != false {
            try container.encode(scanEnabled, forKey: ClientRuntime.Key("ScanEnabled"))
        }
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ReceiptRule, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ReceiptRule()
            value.name = try reader["Name"].readIfPresent()
            value.enabled = try reader["Enabled"].readIfPresent() ?? false
            value.tlsPolicy = try reader["TlsPolicy"].readIfPresent()
            value.recipients = try reader["Recipients"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.actions = try reader["Actions"].readListIfPresent(memberReadingClosure: SESClientTypes.ReceiptAction.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.scanEnabled = try reader["ScanEnabled"].readIfPresent() ?? false
            return value
        }
    }
}

extension SESClientTypes {
    /// Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own. Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message. For information about setting up receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-receipt-rules-console-walkthrough.html).
    public struct ReceiptRule: Swift.Equatable {
        /// An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
        public var actions: [SESClientTypes.ReceiptAction]?
        /// If true, the receipt rule is active. The default value is false.
        public var enabled: Swift.Bool
        /// The name of the receipt rule. The name must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or periods (.).
        ///
        /// * Start and end with a letter or number.
        ///
        /// * Contain 64 characters or fewer.
        /// This member is required.
        public var name: Swift.String?
        /// The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule matches all recipients on all verified domains.
        public var recipients: [Swift.String]?
        /// If true, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is false.
        public var scanEnabled: Swift.Bool
        /// Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to Require, Amazon SES bounces emails that are not received over TLS. The default is Optional.
        public var tlsPolicy: SESClientTypes.TlsPolicy?

        public init(
            actions: [SESClientTypes.ReceiptAction]? = nil,
            enabled: Swift.Bool = false,
            name: Swift.String? = nil,
            recipients: [Swift.String]? = nil,
            scanEnabled: Swift.Bool = false,
            tlsPolicy: SESClientTypes.TlsPolicy? = nil
        )
        {
            self.actions = actions
            self.enabled = enabled
            self.name = name
            self.recipients = recipients
            self.scanEnabled = scanEnabled
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension SESClientTypes.ReceiptRuleSetMetadata: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdTimestamp = createdTimestamp {
            try container.encodeTimestamp(createdTimestamp, format: .dateTime, forKey: ClientRuntime.Key("CreatedTimestamp"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ReceiptRuleSetMetadata, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ReceiptRuleSetMetadata()
            value.name = try reader["Name"].readIfPresent()
            value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension SESClientTypes {
    /// Information about a receipt rule set. A receipt rule set is a collection of rules that specify what Amazon SES should do with mail it receives on behalf of your account's verified domains. For information about setting up receipt rule sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html#receiving-email-concepts-rules).
    public struct ReceiptRuleSetMetadata: Swift.Equatable {
        /// The date and time the receipt rule set was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The name of the receipt rule set. The name must meet the following requirements:
        ///
        /// * Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Start and end with a letter or number.
        ///
        /// * Contain 64 characters or fewer.
        public var name: Swift.String?

        public init(
            createdTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
        }
    }

}

extension SESClientTypes.RecipientDsnFields: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case diagnosticCode = "DiagnosticCode"
        case extensionFields = "ExtensionFields"
        case finalRecipient = "FinalRecipient"
        case lastAttemptDate = "LastAttemptDate"
        case remoteMta = "RemoteMta"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let diagnosticCode = diagnosticCode {
            try container.encode(diagnosticCode, forKey: ClientRuntime.Key("DiagnosticCode"))
        }
        if let extensionFields = extensionFields {
            if !extensionFields.isEmpty {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                for (index0, extensionfield0) in extensionFields.enumerated() {
                    try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                try extensionFieldsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let finalRecipient = finalRecipient {
            try container.encode(finalRecipient, forKey: ClientRuntime.Key("FinalRecipient"))
        }
        if let lastAttemptDate = lastAttemptDate {
            try container.encodeTimestamp(lastAttemptDate, format: .dateTime, forKey: ClientRuntime.Key("LastAttemptDate"))
        }
        if let remoteMta = remoteMta {
            try container.encode(remoteMta, forKey: ClientRuntime.Key("RemoteMta"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.RecipientDsnFields, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.RecipientDsnFields()
            value.finalRecipient = try reader["FinalRecipient"].readIfPresent()
            value.action = try reader["Action"].readIfPresent()
            value.remoteMta = try reader["RemoteMta"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.diagnosticCode = try reader["DiagnosticCode"].readIfPresent()
            value.lastAttemptDate = try reader["LastAttemptDate"].readTimestampIfPresent(format: .dateTime)
            value.extensionFields = try reader["ExtensionFields"].readListIfPresent(memberReadingClosure: SESClientTypes.ExtensionField.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension SESClientTypes {
    /// Recipient-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email.html).
    public struct RecipientDsnFields: Swift.Equatable {
        /// The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by [RFC 3464](https://tools.ietf.org/html/rfc3464).
        /// This member is required.
        public var action: SESClientTypes.DsnAction?
        /// An extended explanation of what went wrong; this is usually an SMTP response. See [RFC 3463](https://tools.ietf.org/html/rfc3463) for the correct formatting of this parameter.
        public var diagnosticCode: Swift.String?
        /// Additional X-headers to include in the DSN.
        public var extensionFields: [SESClientTypes.ExtensionField]?
        /// The email address that the message was ultimately delivered to. This corresponds to the Final-Recipient in the DSN. If not specified, FinalRecipient is set to the Recipient specified in the BouncedRecipientInfo structure. Either FinalRecipient or the recipient in BouncedRecipientInfo must be a recipient of the original bounced message. Do not prepend the FinalRecipient email address with rfc 822;, as described in [RFC 3798](https://tools.ietf.org/html/rfc3798).
        public var finalRecipient: Swift.String?
        /// The time the final delivery attempt was made, in [RFC 822](https://www.ietf.org/rfc/rfc0822.txt) date-time format.
        public var lastAttemptDate: ClientRuntime.Date?
        /// The MTA to which the remote MTA attempted to deliver the message, formatted as specified in [RFC 3464](https://tools.ietf.org/html/rfc3464) (mta-name-type; mta-name). This parameter typically applies only to propagating synchronous bounces.
        public var remoteMta: Swift.String?
        /// The status code that indicates what went wrong. This is required by [RFC 3464](https://tools.ietf.org/html/rfc3464).
        /// This member is required.
        public var status: Swift.String?

        public init(
            action: SESClientTypes.DsnAction? = nil,
            diagnosticCode: Swift.String? = nil,
            extensionFields: [SESClientTypes.ExtensionField]? = nil,
            finalRecipient: Swift.String? = nil,
            lastAttemptDate: ClientRuntime.Date? = nil,
            remoteMta: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.action = action
            self.diagnosticCode = diagnosticCode
            self.extensionFields = extensionFields
            self.finalRecipient = finalRecipient
            self.lastAttemptDate = lastAttemptDate
            self.remoteMta = remoteMta
            self.status = status
        }
    }

}

extension ReorderReceiptRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleNames = "RuleNames"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            if !ruleNames.isEmpty {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                for (index0, receiptrulename0) in ruleNames.enumerated() {
                    try ruleNamesContainer.encode(receiptrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                try ruleNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("ReorderReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ReorderReceiptRuleSetInput {

    static func urlPathProvider(_ value: ReorderReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to reorder the receipt rules within a receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct ReorderReceiptRuleSetInput: Swift.Equatable {
    /// The specified receipt rule set's receipt rules, in order.
    /// This member is required.
    public var ruleNames: [Swift.String]?
    /// The name of the receipt rule set to reorder.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        ruleNames: [Swift.String]? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleNames = ruleNames
        self.ruleSetName = ruleSetName
    }
}

extension ReorderReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ReorderReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return ReorderReceiptRuleSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct ReorderReceiptRuleSetOutput: Swift.Equatable {

    public init() { }
}

enum ReorderReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RuleDoesNotExist": return try await RuleDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.ReputationOptions: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastFreshStart = lastFreshStart {
            try container.encodeTimestamp(lastFreshStart, format: .dateTime, forKey: ClientRuntime.Key("LastFreshStart"))
        }
        if reputationMetricsEnabled != false {
            try container.encode(reputationMetricsEnabled, forKey: ClientRuntime.Key("ReputationMetricsEnabled"))
        }
        if sendingEnabled != false {
            try container.encode(sendingEnabled, forKey: ClientRuntime.Key("SendingEnabled"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.ReputationOptions, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.ReputationOptions()
            value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
            value.reputationMetricsEnabled = try reader["ReputationMetricsEnabled"].readIfPresent() ?? false
            value.lastFreshStart = try reader["LastFreshStart"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains information about the reputation settings for a configuration set.
    public struct ReputationOptions: Swift.Equatable {
        /// The date and time at which the reputation metrics for the configuration set were last reset. Resetting these metrics is known as a fresh start. When you disable email sending for a configuration set using [UpdateConfigurationSetSendingEnabled] and later re-enable it, the reputation metrics for the configuration set (but not for the entire Amazon SES account) are reset. If email sending for the configuration set has never been disabled and later re-enabled, the value of this attribute is null.
        public var lastFreshStart: ClientRuntime.Date?
        /// Describes whether or not Amazon SES publishes reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch. If the value is true, reputation metrics are published. If the value is false, reputation metrics are not published. The default value is false.
        public var reputationMetricsEnabled: Swift.Bool
        /// Describes whether email sending is enabled or disabled for the configuration set. If the value is true, then Amazon SES sends emails that use the configuration set. If the value is false, Amazon SES does not send emails that use the configuration set. The default value is true. You can change this setting using [UpdateConfigurationSetSendingEnabled].
        public var sendingEnabled: Swift.Bool

        public init(
            lastFreshStart: ClientRuntime.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false,
            sendingEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension RuleDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RuleDoesNotExistException()
        value.properties.name = try reader["Name"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the provided receipt rule does not exist.
public struct RuleDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Indicates that the named receipt rule does not exist.
        public internal(set) var name: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RuleDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.name = name
    }
}

extension RuleSetDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RuleSetDoesNotExistException()
        value.properties.name = try reader["Name"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the provided receipt rule set does not exist.
public struct RuleSetDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Indicates that the named receipt rule set does not exist.
        public internal(set) var name: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RuleSetDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.name = name
    }
}

extension SESClientTypes.S3Action: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case kmsKeyArn = "KmsKeyArn"
        case objectKeyPrefix = "ObjectKeyPrefix"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: ClientRuntime.Key("BucketName"))
        }
        if let kmsKeyArn = kmsKeyArn {
            try container.encode(kmsKeyArn, forKey: ClientRuntime.Key("KmsKeyArn"))
        }
        if let objectKeyPrefix = objectKeyPrefix {
            try container.encode(objectKeyPrefix, forKey: ClientRuntime.Key("ObjectKeyPrefix"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.S3Action, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.S3Action()
            value.topicArn = try reader["TopicArn"].readIfPresent()
            value.bucketName = try reader["BucketName"].readIfPresent()
            value.objectKeyPrefix = try reader["ObjectKeyPrefix"].readIfPresent()
            value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). To enable Amazon SES to write emails to your Amazon S3 bucket, use an Amazon Web Services KMS key to encrypt your emails, or publish to an Amazon SNS topic of another account, Amazon SES must have permission to access those resources. For information about granting permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-permissions.html). When you save your emails to an Amazon S3 bucket, the maximum email size (including headers) is 40 MB. Emails larger than that bounces. For information about specifying Amazon S3 actions in receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-s3.html).
    public struct S3Action: Swift.Equatable {
        /// The name of the Amazon S3 bucket for incoming email.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The customer master key that Amazon SES should use to encrypt your emails before saving them to the Amazon S3 bucket. You can use the default master key or a custom master key that you created in Amazon Web Services KMS as follows:
        ///
        /// * To use the default master key, provide an ARN in the form of arn:aws:kms:REGION:ACCOUNT-ID-WITHOUT-HYPHENS:alias/aws/ses. For example, if your Amazon Web Services account ID is 123456789012 and you want to use the default master key in the US West (Oregon) Region, the ARN of the default master key would be arn:aws:kms:us-west-2:123456789012:alias/aws/ses. If you use the default master key, you don't need to perform any extra steps to give Amazon SES permission to use the key.
        ///
        /// * To use a custom master key that you created in Amazon Web Services KMS, provide the ARN of the master key and ensure that you add a statement to your key's policy to give Amazon SES permission to use it. For more information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-permissions.html).
        ///
        ///
        /// For more information about key policies, see the [Amazon Web Services KMS Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html). If you do not specify a master key, Amazon SES does not encrypt your emails. Your mail is encrypted by Amazon SES using the Amazon S3 encryption client before the mail is submitted to Amazon S3 for storage. It is not encrypted using Amazon S3 server-side encryption. This means that you must use the Amazon S3 encryption client to decrypt the email after retrieving it from Amazon S3, as the service has no access to use your Amazon Web Services KMS keys for decryption. This encryption client is currently available with the [Amazon Web Services SDK for Java](http://aws.amazon.com/sdk-for-java/) and [Amazon Web Services SDK for Ruby](http://aws.amazon.com/sdk-for-ruby/) only. For more information about client-side encryption using Amazon Web Services KMS master keys, see the [Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html).
        public var kmsKeyArn: Swift.String?
        /// The key prefix of the Amazon S3 bucket. The key prefix is similar to a directory name that enables you to store similar data under the same directory in a bucket.
        public var objectKeyPrefix: Swift.String?
        /// The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) operation in Amazon SNS. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            objectKeyPrefix: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.kmsKeyArn = kmsKeyArn
            self.objectKeyPrefix = objectKeyPrefix
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes.SNSAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encoding = "Encoding"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let encoding = encoding {
            try container.encode(encoding, forKey: ClientRuntime.Key("Encoding"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.SNSAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.SNSAction()
            value.topicArn = try reader["TopicArn"].readIfPresent()
            value.encoding = try reader["Encoding"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action publishes a notification to Amazon Simple Notification Service (Amazon SNS). This action includes a complete copy of the email content in the Amazon SNS notifications. Amazon SNS notifications for all other actions simply provide information about the email. They do not include the email content itself. If you own the Amazon SNS topic, you don't need to do anything to give Amazon SES permission to publish emails to it. However, if you don't own the Amazon SNS topic, you need to attach a policy to the topic to give Amazon SES permissions to access it. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-permissions.html). You can only publish emails that are 150 KB or less (including the header) to Amazon SNS. Larger emails bounce. If you anticipate emails larger than 150 KB, use the S3 action instead. For information about using a receipt rule to publish an Amazon SNS notification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-sns.html).
    public struct SNSAction: Swift.Equatable {
        /// The encoding to use for the email within the Amazon SNS notification. UTF-8 is easier to use, but may not preserve all special characters when a message was encoded with a different encoding format. Base64 preserves all special characters. The default value is UTF-8.
        public var encoding: SESClientTypes.SNSActionEncoding?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) operation in Amazon SNS. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicArn: Swift.String?

        public init(
            encoding: SESClientTypes.SNSActionEncoding? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.encoding = encoding
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes {
    public enum SNSActionEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case base64
        case utf8
        case sdkUnknown(Swift.String)

        public static var allCases: [SNSActionEncoding] {
            return [
                .base64,
                .utf8,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .base64: return "Base64"
            case .utf8: return "UTF-8"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SNSActionEncoding(rawValue: rawValue) ?? SNSActionEncoding.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.SNSDestination: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicARN = "TopicARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.SNSDestination, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.SNSDestination()
            value.topicARN = try reader["TopicARN"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination. Event destinations, such as Amazon SNS, are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
    public struct SNSDestination: Swift.Equatable {
        /// The ARN of the Amazon SNS topic for email sending events. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) Amazon SNS operation. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicARN: Swift.String?

        public init(
            topicARN: Swift.String? = nil
        )
        {
            self.topicARN = topicARN
        }
    }

}

extension SendBounceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceSender = "BounceSender"
        case bounceSenderArn = "BounceSenderArn"
        case bouncedRecipientInfoList = "BouncedRecipientInfoList"
        case explanation = "Explanation"
        case messageDsn = "MessageDsn"
        case originalMessageId = "OriginalMessageId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceSender = bounceSender {
            try container.encode(bounceSender, forKey: ClientRuntime.Key("BounceSender"))
        }
        if let bounceSenderArn = bounceSenderArn {
            try container.encode(bounceSenderArn, forKey: ClientRuntime.Key("BounceSenderArn"))
        }
        if let bouncedRecipientInfoList = bouncedRecipientInfoList {
            if !bouncedRecipientInfoList.isEmpty {
                var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BouncedRecipientInfoList"))
                for (index0, bouncedrecipientinfo0) in bouncedRecipientInfoList.enumerated() {
                    try bouncedRecipientInfoListContainer.encode(bouncedrecipientinfo0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BouncedRecipientInfoList"))
                try bouncedRecipientInfoListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let explanation = explanation {
            try container.encode(explanation, forKey: ClientRuntime.Key("Explanation"))
        }
        if let messageDsn = messageDsn {
            try container.encode(messageDsn, forKey: ClientRuntime.Key("MessageDsn"))
        }
        if let originalMessageId = originalMessageId {
            try container.encode(originalMessageId, forKey: ClientRuntime.Key("OriginalMessageId"))
        }
        try container.encode("SendBounce", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendBounceInput {

    static func urlPathProvider(_ value: SendBounceInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to send a bounce message to the sender of an email you received through Amazon SES.
public struct SendBounceInput: Swift.Equatable {
    /// The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
    /// This member is required.
    public var bounceSender: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var bounceSenderArn: Swift.String?
    /// A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one BouncedRecipientInfo in the list.
    /// This member is required.
    public var bouncedRecipientInfoList: [SESClientTypes.BouncedRecipientInfo]?
    /// Human-readable text for the bounce message to explain the failure. If not specified, the text is auto-generated based on the bounced recipient information.
    public var explanation: Swift.String?
    /// Message-related DSN fields. If not specified, Amazon SES chooses the values.
    public var messageDsn: SESClientTypes.MessageDsn?
    /// The message ID of the message to be bounced.
    /// This member is required.
    public var originalMessageId: Swift.String?

    public init(
        bounceSender: Swift.String? = nil,
        bounceSenderArn: Swift.String? = nil,
        bouncedRecipientInfoList: [SESClientTypes.BouncedRecipientInfo]? = nil,
        explanation: Swift.String? = nil,
        messageDsn: SESClientTypes.MessageDsn? = nil,
        originalMessageId: Swift.String? = nil
    )
    {
        self.bounceSender = bounceSender
        self.bounceSenderArn = bounceSenderArn
        self.bouncedRecipientInfoList = bouncedRecipientInfoList
        self.explanation = explanation
        self.messageDsn = messageDsn
        self.originalMessageId = originalMessageId
    }
}

extension SendBounceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SendBounceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SendBounceResult"]
            var value = SendBounceOutput()
            value.messageId = try reader["MessageId"].readIfPresent()
            return value
        }
    }
}

/// Represents a unique message ID.
public struct SendBounceOutput: Swift.Equatable {
    /// The message ID of the bounce message.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

enum SendBounceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "MessageRejected": return try await MessageRejected.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SendBulkTemplatedEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case defaultTags = "DefaultTags"
        case defaultTemplateData = "DefaultTemplateData"
        case destinations = "Destinations"
        case replyToAddresses = "ReplyToAddresses"
        case returnPath = "ReturnPath"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case template = "Template"
        case templateArn = "TemplateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let defaultTags = defaultTags {
            if !defaultTags.isEmpty {
                var defaultTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultTags"))
                for (index0, messagetag0) in defaultTags.enumerated() {
                    try defaultTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var defaultTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultTags"))
                try defaultTagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let defaultTemplateData = defaultTemplateData {
            try container.encode(defaultTemplateData, forKey: ClientRuntime.Key("DefaultTemplateData"))
        }
        if let destinations = destinations {
            if !destinations.isEmpty {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                for (index0, bulkemaildestination0) in destinations.enumerated() {
                    try destinationsContainer.encode(bulkemaildestination0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                try destinationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let replyToAddresses = replyToAddresses {
            if !replyToAddresses.isEmpty {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                for (index0, address0) in replyToAddresses.enumerated() {
                    try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                try replyToAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        try container.encode("SendBulkTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendBulkTemplatedEmailInput {

    static func urlPathProvider(_ value: SendBulkTemplatedEmailInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to send a templated email to multiple destinations using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-personalized-email-api.html).
public struct SendBulkTemplatedEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendBulkTemplatedEmail.
    public var configurationSetName: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using SendBulkTemplatedEmail.
    public var defaultTags: [SESClientTypes.MessageTag]?
    /// A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available. The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    public var defaultTemplateData: Swift.String?
    /// One or more Destination objects. All of the recipients in a Destination receive the same version of the email. You can specify up to 50 Destination objects within a Destinations array.
    /// This member is required.
    public var destinations: [SESClientTypes.BulkEmailDestination]?
    /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?
    /// The email address that bounces and complaints are forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message is returned from the recipient's ISP; this message is forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    public var returnPath: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var returnPathArn: Swift.String?
    /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html). If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html). Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in [Sending raw email using the Amazon SES API](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html). For more information about Punycode, see [RFC 3492](http://tools.ietf.org/html/rfc3492).
    /// This member is required.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var sourceArn: Swift.String?
    /// The template to use when sending this email.
    /// This member is required.
    public var template: Swift.String?
    /// The ARN of the template to use when sending this email.
    public var templateArn: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        defaultTags: [SESClientTypes.MessageTag]? = nil,
        defaultTemplateData: Swift.String? = nil,
        destinations: [SESClientTypes.BulkEmailDestination]? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        template: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.defaultTags = defaultTags
        self.defaultTemplateData = defaultTemplateData
        self.destinations = destinations
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.template = template
        self.templateArn = templateArn
    }
}

extension SendBulkTemplatedEmailOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SendBulkTemplatedEmailOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SendBulkTemplatedEmailResult"]
            var value = SendBulkTemplatedEmailOutput()
            value.status = try reader["Status"].readListIfPresent(memberReadingClosure: SESClientTypes.BulkEmailDestinationStatus.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct SendBulkTemplatedEmailOutput: Swift.Equatable {
    /// One object per intended recipient. Check each response object and retry any messages with a failure status. (Note that order of responses will be respective to order of destinations in the request.)Receipt rules enable you to specify which actions
    /// This member is required.
    public var status: [SESClientTypes.BulkEmailDestinationStatus]?

    public init(
        status: [SESClientTypes.BulkEmailDestinationStatus]? = nil
    )
    {
        self.status = status
    }
}

enum SendBulkTemplatedEmailOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccountSendingPausedException": return try await AccountSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetSendingPausedException": return try await ConfigurationSetSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MailFromDomainNotVerifiedException": return try await MailFromDomainNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MessageRejected": return try await MessageRejected.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TemplateDoesNotExist": return try await TemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SendCustomVerificationEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case emailAddress = "EmailAddress"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("SendCustomVerificationEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendCustomVerificationEmailInput {

    static func urlPathProvider(_ value: SendCustomVerificationEmailInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to send a custom verification email to a specified recipient.
public struct SendCustomVerificationEmailInput: Swift.Equatable {
    /// Name of a configuration set to use when sending the verification email.
    public var configurationSetName: Swift.String?
    /// The email address to verify.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The name of the custom verification email template to use when sending the verification email.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailAddress = emailAddress
        self.templateName = templateName
    }
}

extension SendCustomVerificationEmailOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SendCustomVerificationEmailOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SendCustomVerificationEmailResult"]
            var value = SendCustomVerificationEmailOutput()
            value.messageId = try reader["MessageId"].readIfPresent()
            return value
        }
    }
}

/// The response received when attempting to send the custom verification email.
public struct SendCustomVerificationEmailOutput: Swift.Equatable {
    /// The unique message identifier returned from the SendCustomVerificationEmail operation.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

enum SendCustomVerificationEmailOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomVerificationEmailTemplateDoesNotExist": return try await CustomVerificationEmailTemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "FromEmailAddressNotVerified": return try await FromEmailAddressNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MessageRejected": return try await MessageRejected.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProductionAccessNotGranted": return try await ProductionAccessNotGrantedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.SendDataPoint: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounces = "Bounces"
        case complaints = "Complaints"
        case deliveryAttempts = "DeliveryAttempts"
        case rejects = "Rejects"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if bounces != 0 {
            try container.encode(bounces, forKey: ClientRuntime.Key("Bounces"))
        }
        if complaints != 0 {
            try container.encode(complaints, forKey: ClientRuntime.Key("Complaints"))
        }
        if deliveryAttempts != 0 {
            try container.encode(deliveryAttempts, forKey: ClientRuntime.Key("DeliveryAttempts"))
        }
        if rejects != 0 {
            try container.encode(rejects, forKey: ClientRuntime.Key("Rejects"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("Timestamp"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.SendDataPoint, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.SendDataPoint()
            value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: .dateTime)
            value.deliveryAttempts = try reader["DeliveryAttempts"].readIfPresent() ?? 0
            value.bounces = try reader["Bounces"].readIfPresent() ?? 0
            value.complaints = try reader["Complaints"].readIfPresent() ?? 0
            value.rejects = try reader["Rejects"].readIfPresent() ?? 0
            return value
        }
    }
}

extension SESClientTypes {
    /// Represents sending statistics data. Each SendDataPoint contains statistics for a 15-minute period of sending activity.
    public struct SendDataPoint: Swift.Equatable {
        /// Number of emails that have bounced.
        public var bounces: Swift.Int
        /// Number of unwanted emails that were rejected by recipients.
        public var complaints: Swift.Int
        /// Number of emails that have been sent.
        public var deliveryAttempts: Swift.Int
        /// Number of emails rejected by Amazon SES.
        public var rejects: Swift.Int
        /// Time of the data point.
        public var timestamp: ClientRuntime.Date?

        public init(
            bounces: Swift.Int = 0,
            complaints: Swift.Int = 0,
            deliveryAttempts: Swift.Int = 0,
            rejects: Swift.Int = 0,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.bounces = bounces
            self.complaints = complaints
            self.deliveryAttempts = deliveryAttempts
            self.rejects = rejects
            self.timestamp = timestamp
        }
    }

}

extension SendEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case destination = "Destination"
        case message = "Message"
        case replyToAddresses = "ReplyToAddresses"
        case returnPath = "ReturnPath"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let replyToAddresses = replyToAddresses {
            if !replyToAddresses.isEmpty {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                for (index0, address0) in replyToAddresses.enumerated() {
                    try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                try replyToAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, messagetag0) in tags.enumerated() {
                    try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SendEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendEmailInput {

    static func urlPathProvider(_ value: SendEmailInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to send a single formatted email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-formatted.html).
public struct SendEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendEmail.
    public var configurationSetName: Swift.String?
    /// The destination for this email, composed of To:, CC:, and BCC: fields.
    /// This member is required.
    public var destination: SESClientTypes.Destination?
    /// The message to be sent.
    /// This member is required.
    public var message: SESClientTypes.Message?
    /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?
    /// The email address that bounces and complaints are forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message is returned from the recipient's ISP; this message is forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    public var returnPath: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var returnPathArn: Swift.String?
    /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html). If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html). Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in [Sending raw email using the Amazon SES API](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html). For more information about Punycode, see [RFC 3492](http://tools.ietf.org/html/rfc3492).
    /// This member is required.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var sourceArn: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var tags: [SESClientTypes.MessageTag]?

    public init(
        configurationSetName: Swift.String? = nil,
        destination: SESClientTypes.Destination? = nil,
        message: SESClientTypes.Message? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SESClientTypes.MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.message = message
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}

extension SendEmailOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SendEmailOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SendEmailResult"]
            var value = SendEmailOutput()
            value.messageId = try reader["MessageId"].readIfPresent()
            return value
        }
    }
}

/// Represents a unique message ID.
public struct SendEmailOutput: Swift.Equatable {
    /// The unique message identifier returned from the SendEmail action.
    /// This member is required.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

enum SendEmailOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccountSendingPausedException": return try await AccountSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetSendingPausedException": return try await ConfigurationSetSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MailFromDomainNotVerifiedException": return try await MailFromDomainNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MessageRejected": return try await MessageRejected.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SendRawEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case destinations = "Destinations"
        case fromArn = "FromArn"
        case rawMessage = "RawMessage"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destinations = destinations {
            if !destinations.isEmpty {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                for (index0, address0) in destinations.enumerated() {
                    try destinationsContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                try destinationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let fromArn = fromArn {
            try container.encode(fromArn, forKey: ClientRuntime.Key("FromArn"))
        }
        if let rawMessage = rawMessage {
            try container.encode(rawMessage, forKey: ClientRuntime.Key("RawMessage"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, messagetag0) in tags.enumerated() {
                    try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SendRawEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendRawEmailInput {

    static func urlPathProvider(_ value: SendRawEmailInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to send a single raw email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html).
public struct SendRawEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendRawEmail.
    public var configurationSetName: Swift.String?
    /// A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
    public var destinations: [Swift.String]?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email. Instead of using this parameter, you can use the X-header X-SES-FROM-ARN in the raw message of the email. If you use both the FromArn parameter and the corresponding X-header, Amazon SES uses the value of the FromArn parameter. For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization-delegate-sender-tasks-email.html).
    public var fromArn: Swift.String?
    /// The raw email message itself. The message has to meet the following criteria:
    ///
    /// * The message has to contain a header and a body, separated by a blank line.
    ///
    /// * All of the required header fields must be present in the message.
    ///
    /// * Each part of a multipart MIME message must be formatted properly.
    ///
    /// * Attachments must be of a content type that Amazon SES supports. For a list on unsupported content types, see [Unsupported Attachment Types](https://docs.aws.amazon.com/ses/latest/dg/mime-types.html) in the Amazon SES Developer Guide.
    ///
    /// * The entire message must be base64-encoded.
    ///
    /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, we highly recommend that you encode that content. For more information, see [Sending Raw Email](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html) in the Amazon SES Developer Guide.
    ///
    /// * Per [RFC 5321](https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6), the maximum length of each line of text, including the , must not exceed 1,000 characters.
    /// This member is required.
    public var rawMessage: SESClientTypes.RawMessage?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. Instead of using this parameter, you can use the X-header X-SES-RETURN-PATH-ARN in the raw message of the email. If you use both the ReturnPathArn parameter and the corresponding X-header, Amazon SES uses the value of the ReturnPathArn parameter. For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization-delegate-sender-tasks-email.html).
    public var returnPathArn: Swift.String?
    /// The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.) Amazon SES does not support the SMTPUTF8 extension, as described in[RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in [Sending raw email using the Amazon SES API](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html). For more information about Punycode, see [RFC 3492](http://tools.ietf.org/html/rfc3492). If you specify the Source parameter and have feedback forwarding enabled, then bounces and complaints are sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. Instead of using this parameter, you can use the X-header X-SES-SOURCE-ARN in the raw message of the email. If you use both the SourceArn parameter and the corresponding X-header, Amazon SES uses the value of the SourceArn parameter. For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization-delegate-sender-tasks-email.html).
    public var sourceArn: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendRawEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var tags: [SESClientTypes.MessageTag]?

    public init(
        configurationSetName: Swift.String? = nil,
        destinations: [Swift.String]? = nil,
        fromArn: Swift.String? = nil,
        rawMessage: SESClientTypes.RawMessage? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SESClientTypes.MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destinations = destinations
        self.fromArn = fromArn
        self.rawMessage = rawMessage
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}

extension SendRawEmailOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SendRawEmailOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SendRawEmailResult"]
            var value = SendRawEmailOutput()
            value.messageId = try reader["MessageId"].readIfPresent()
            return value
        }
    }
}

/// Represents a unique message ID.
public struct SendRawEmailOutput: Swift.Equatable {
    /// The unique message identifier returned from the SendRawEmail action.
    /// This member is required.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

enum SendRawEmailOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccountSendingPausedException": return try await AccountSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetSendingPausedException": return try await ConfigurationSetSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MailFromDomainNotVerifiedException": return try await MailFromDomainNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MessageRejected": return try await MessageRejected.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SendTemplatedEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case destination = "Destination"
        case replyToAddresses = "ReplyToAddresses"
        case returnPath = "ReturnPath"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case tags = "Tags"
        case template = "Template"
        case templateArn = "TemplateArn"
        case templateData = "TemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let replyToAddresses = replyToAddresses {
            if !replyToAddresses.isEmpty {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                for (index0, address0) in replyToAddresses.enumerated() {
                    try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                try replyToAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, messagetag0) in tags.enumerated() {
                    try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        if let templateData = templateData {
            try container.encode(templateData, forKey: ClientRuntime.Key("TemplateData"))
        }
        try container.encode("SendTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendTemplatedEmailInput {

    static func urlPathProvider(_ value: SendTemplatedEmailInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to send a templated email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-personalized-email-api.html).
public struct SendTemplatedEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendTemplatedEmail.
    public var configurationSetName: Swift.String?
    /// The destination for this email, composed of To:, CC:, and BCC: fields. A Destination can include up to 50 recipients across these three fields.
    /// This member is required.
    public var destination: SESClientTypes.Destination?
    /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?
    /// The email address that bounces and complaints are forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message is returned from the recipient's ISP; this message is forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    public var returnPath: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var returnPathArn: Swift.String?
    /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html). If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html). Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). for this reason, The email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in [Sending raw email using the Amazon SES API](https://docs.aws.amazon.com/ses/latest/dg/send-email-raw.html). For more information about Punycode, see [RFC 3492](http://tools.ietf.org/html/rfc3492).
    /// This member is required.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/sending-authorization.html).
    public var sourceArn: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendTemplatedEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var tags: [SESClientTypes.MessageTag]?
    /// The template to use when sending this email.
    /// This member is required.
    public var template: Swift.String?
    /// The ARN of the template to use when sending this email.
    public var templateArn: Swift.String?
    /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    /// This member is required.
    public var templateData: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        destination: SESClientTypes.Destination? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SESClientTypes.MessageTag]? = nil,
        template: Swift.String? = nil,
        templateArn: Swift.String? = nil,
        templateData: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
        self.template = template
        self.templateArn = templateArn
        self.templateData = templateData
    }
}

extension SendTemplatedEmailOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SendTemplatedEmailOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SendTemplatedEmailResult"]
            var value = SendTemplatedEmailOutput()
            value.messageId = try reader["MessageId"].readIfPresent()
            return value
        }
    }
}

public struct SendTemplatedEmailOutput: Swift.Equatable {
    /// The unique message identifier returned from the SendTemplatedEmail action.
    /// This member is required.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

enum SendTemplatedEmailOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccountSendingPausedException": return try await AccountSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConfigurationSetSendingPausedException": return try await ConfigurationSetSendingPausedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MailFromDomainNotVerifiedException": return try await MailFromDomainNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MessageRejected": return try await MessageRejected.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TemplateDoesNotExist": return try await TemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetActiveReceiptRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("SetActiveReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetActiveReceiptRuleSetInput {

    static func urlPathProvider(_ value: SetActiveReceiptRuleSetInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to set a receipt rule set as the active receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct SetActiveReceiptRuleSetInput: Swift.Equatable {
    /// The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
    public var ruleSetName: Swift.String?

    public init(
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

extension SetActiveReceiptRuleSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetActiveReceiptRuleSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetActiveReceiptRuleSetOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetActiveReceiptRuleSetOutput: Swift.Equatable {

    public init() { }
}

enum SetActiveReceiptRuleSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetIdentityDkimEnabledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimEnabled = "DkimEnabled"
        case identity = "Identity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dkimEnabled = dkimEnabled {
            try container.encode(dkimEnabled, forKey: ClientRuntime.Key("DkimEnabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("SetIdentityDkimEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityDkimEnabledInput {

    static func urlPathProvider(_ value: SetIdentityDkimEnabledInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable Amazon SES Easy DKIM signing for an identity. For more information about setting up Easy DKIM, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html).
public struct SetIdentityDkimEnabledInput: Swift.Equatable {
    /// Sets whether DKIM signing is enabled for an identity. Set to true to enable DKIM signing for this identity; false to disable it.
    /// This member is required.
    public var dkimEnabled: Swift.Bool?
    /// The identity for which DKIM signing should be enabled or disabled.
    /// This member is required.
    public var identity: Swift.String?

    public init(
        dkimEnabled: Swift.Bool? = nil,
        identity: Swift.String? = nil
    )
    {
        self.dkimEnabled = dkimEnabled
        self.identity = identity
    }
}

extension SetIdentityDkimEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetIdentityDkimEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetIdentityDkimEnabledOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityDkimEnabledOutput: Swift.Equatable {

    public init() { }
}

enum SetIdentityDkimEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetIdentityFeedbackForwardingEnabledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case forwardingEnabled = "ForwardingEnabled"
        case identity = "Identity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let forwardingEnabled = forwardingEnabled {
            try container.encode(forwardingEnabled, forKey: ClientRuntime.Key("ForwardingEnabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("SetIdentityFeedbackForwardingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityFeedbackForwardingEnabledInput {

    static func urlPathProvider(_ value: SetIdentityFeedbackForwardingEnabledInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable whether Amazon SES forwards you bounce and complaint notifications through email. For information about email feedback forwarding, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity-using-notifications-email.html).
public struct SetIdentityFeedbackForwardingEnabledInput: Swift.Equatable {
    /// Sets whether Amazon SES forwards bounce and complaint notifications as email. true specifies that Amazon SES forwards bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. false specifies that Amazon SES publishes bounce and complaint notifications only through Amazon SNS. This value can only be set to false when Amazon SNS topics are set for both Bounce and Complaint notification types.
    /// This member is required.
    public var forwardingEnabled: Swift.Bool?
    /// The identity for which to set bounce and complaint notification forwarding. Examples: user@example.com, example.com.
    /// This member is required.
    public var identity: Swift.String?

    public init(
        forwardingEnabled: Swift.Bool? = nil,
        identity: Swift.String? = nil
    )
    {
        self.forwardingEnabled = forwardingEnabled
        self.identity = identity
    }
}

extension SetIdentityFeedbackForwardingEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetIdentityFeedbackForwardingEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetIdentityFeedbackForwardingEnabledOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityFeedbackForwardingEnabledOutput: Swift.Equatable {

    public init() { }
}

enum SetIdentityFeedbackForwardingEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetIdentityHeadersInNotificationsEnabledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case identity = "Identity"
        case notificationType = "NotificationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        try container.encode("SetIdentityHeadersInNotificationsEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityHeadersInNotificationsEnabledInput {

    static func urlPathProvider(_ value: SetIdentityHeadersInNotificationsEnabledInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to set whether Amazon SES includes the original email headers in the Amazon SNS notifications of a specified type. For information about notifications, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity-using-notifications-sns.html).
public struct SetIdentityHeadersInNotificationsEnabledInput: Swift.Equatable {
    /// Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of true specifies that Amazon SES includes headers in notifications, and a value of false specifies that Amazon SES does not include headers in notifications. This value can only be set when NotificationType is already set to use a particular Amazon SNS topic.
    /// This member is required.
    public var enabled: Swift.Bool?
    /// The identity for which to enable or disable headers in notifications. Examples: user@example.com, example.com.
    /// This member is required.
    public var identity: Swift.String?
    /// The notification type for which to enable or disable headers in notifications.
    /// This member is required.
    public var notificationType: SESClientTypes.NotificationType?

    public init(
        enabled: Swift.Bool? = nil,
        identity: Swift.String? = nil,
        notificationType: SESClientTypes.NotificationType? = nil
    )
    {
        self.enabled = enabled
        self.identity = identity
        self.notificationType = notificationType
    }
}

extension SetIdentityHeadersInNotificationsEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetIdentityHeadersInNotificationsEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetIdentityHeadersInNotificationsEnabledOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityHeadersInNotificationsEnabledOutput: Swift.Equatable {

    public init() { }
}

enum SetIdentityHeadersInNotificationsEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetIdentityMailFromDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMXFailure = "BehaviorOnMXFailure"
        case identity = "Identity"
        case mailFromDomain = "MailFromDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let behaviorOnMXFailure = behaviorOnMXFailure {
            try container.encode(behaviorOnMXFailure, forKey: ClientRuntime.Key("BehaviorOnMXFailure"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let mailFromDomain = mailFromDomain {
            try container.encode(mailFromDomain, forKey: ClientRuntime.Key("MailFromDomain"))
        }
        try container.encode("SetIdentityMailFromDomain", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityMailFromDomainInput {

    static func urlPathProvider(_ value: SetIdentityMailFromDomainInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable the Amazon SES custom MAIL FROM domain setup for a verified identity. For information about using a custom MAIL FROM domain, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/mail-from.html).
public struct SetIdentityMailFromDomainInput: Swift.Equatable {
    /// The action for Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose UseDefaultValue, Amazon SES uses amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose RejectMessage, Amazon SES returns a MailFromDomainNotVerified error and not send the email. The action specified in BehaviorOnMXFailure is taken when the custom MAIL FROM domain setup is in the Pending, Failed, and TemporaryFailure states.
    public var behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure?
    /// The verified identity.
    /// This member is required.
    public var identity: Swift.String?
    /// The custom MAIL FROM domain for the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/mail-from.html)), and 3) not be used to receive emails. A value of null disables the custom MAIL FROM setting for the identity.
    public var mailFromDomain: Swift.String?

    public init(
        behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure? = nil,
        identity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMXFailure = behaviorOnMXFailure
        self.identity = identity
        self.mailFromDomain = mailFromDomain
    }
}

extension SetIdentityMailFromDomainOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetIdentityMailFromDomainOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetIdentityMailFromDomainOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityMailFromDomainOutput: Swift.Equatable {

    public init() { }
}

enum SetIdentityMailFromDomainOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetIdentityNotificationTopicInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case notificationType = "NotificationType"
        case snsTopic = "SnsTopic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        if let snsTopic = snsTopic {
            try container.encode(snsTopic, forKey: ClientRuntime.Key("SnsTopic"))
        }
        try container.encode("SetIdentityNotificationTopic", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityNotificationTopicInput {

    static func urlPathProvider(_ value: SetIdentityNotificationTopicInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to specify the Amazon SNS topic to which Amazon SES publishes bounce, complaint, or delivery notifications for emails sent with that identity as the source. For information about Amazon SES notifications, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity-using-notifications-sns.html).
public struct SetIdentityNotificationTopicInput: Swift.Equatable {
    /// The identity (email address or domain) for the Amazon SNS topic. You can only specify a verified identity for this parameter. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: sender@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
    /// This member is required.
    public var identity: Swift.String?
    /// The type of notifications that are published to the specified Amazon SNS topic.
    /// This member is required.
    public var notificationType: SESClientTypes.NotificationType?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, SnsTopic is cleared and publishing is disabled.
    public var snsTopic: Swift.String?

    public init(
        identity: Swift.String? = nil,
        notificationType: SESClientTypes.NotificationType? = nil,
        snsTopic: Swift.String? = nil
    )
    {
        self.identity = identity
        self.notificationType = notificationType
        self.snsTopic = snsTopic
    }
}

extension SetIdentityNotificationTopicOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetIdentityNotificationTopicOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetIdentityNotificationTopicOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityNotificationTopicOutput: Swift.Equatable {

    public init() { }
}

enum SetIdentityNotificationTopicOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetReceiptRulePositionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case after = "After"
        case ruleName = "RuleName"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let after = after {
            try container.encode(after, forKey: ClientRuntime.Key("After"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("SetReceiptRulePosition", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetReceiptRulePositionInput {

    static func urlPathProvider(_ value: SetReceiptRulePositionInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to set the position of a receipt rule in a receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct SetReceiptRulePositionInput: Swift.Equatable {
    /// The name of the receipt rule after which to place the specified receipt rule.
    public var after: Swift.String?
    /// The name of the receipt rule to reposition.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The name of the receipt rule set that contains the receipt rule to reposition.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        after: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.after = after
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

extension SetReceiptRulePositionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetReceiptRulePositionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetReceiptRulePositionOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct SetReceiptRulePositionOutput: Swift.Equatable {

    public init() { }
}

enum SetReceiptRulePositionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RuleDoesNotExist": return try await RuleDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.StopAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scope = "Scope"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.StopAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.StopAction()
            value.scope = try reader["Scope"].readIfPresent()
            value.topicArn = try reader["TopicArn"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action terminates the evaluation of the receipt rule set and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). For information about setting a stop action in a receipt rule, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-stop.html).
    public struct StopAction: Swift.Equatable {
        /// The scope of the StopAction. The only acceptable value is RuleSet.
        /// This member is required.
        public var scope: SESClientTypes.StopScope?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is taken. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) Amazon SNS operation. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init(
            scope: SESClientTypes.StopScope? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.scope = scope
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes {
    public enum StopScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ruleSet
        case sdkUnknown(Swift.String)

        public static var allCases: [StopScope] {
            return [
                .ruleSet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ruleSet: return "RuleSet"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StopScope(rawValue: rawValue) ?? StopScope.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.Template: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case htmlPart = "HtmlPart"
        case subjectPart = "SubjectPart"
        case templateName = "TemplateName"
        case textPart = "TextPart"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let htmlPart = htmlPart {
            try container.encode(htmlPart, forKey: ClientRuntime.Key("HtmlPart"))
        }
        if let subjectPart = subjectPart {
            try container.encode(subjectPart, forKey: ClientRuntime.Key("SubjectPart"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let textPart = textPart {
            try container.encode(textPart, forKey: ClientRuntime.Key("TextPart"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.Template, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.Template()
            value.templateName = try reader["TemplateName"].readIfPresent()
            value.subjectPart = try reader["SubjectPart"].readIfPresent()
            value.textPart = try reader["TextPart"].readIfPresent()
            value.htmlPart = try reader["HtmlPart"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// The content of the email, composed of a subject line and either an HTML part or a text-only part.
    public struct Template: Swift.Equatable {
        /// The HTML body of the email.
        public var htmlPart: Swift.String?
        /// The subject line of the email.
        public var subjectPart: Swift.String?
        /// The name of the template. You use this name when you send email using the SendTemplatedEmail or SendBulkTemplatedEmail operations.
        /// This member is required.
        public var templateName: Swift.String?
        /// The email body that is visible to recipients whose email clients do not display HTML content.
        public var textPart: Swift.String?

        public init(
            htmlPart: Swift.String? = nil,
            subjectPart: Swift.String? = nil,
            templateName: Swift.String? = nil,
            textPart: Swift.String? = nil
        )
        {
            self.htmlPart = htmlPart
            self.subjectPart = subjectPart
            self.templateName = templateName
            self.textPart = textPart
        }
    }

}

extension TemplateDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TemplateDoesNotExistException()
        value.properties.templateName = try reader["TemplateName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the Template object you specified does not exist in your Amazon SES account.
public struct TemplateDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var templateName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TemplateDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.templateName = templateName
    }
}

extension SESClientTypes.TemplateMetadata: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdTimestamp = createdTimestamp {
            try container.encodeTimestamp(createdTimestamp, format: .dateTime, forKey: ClientRuntime.Key("CreatedTimestamp"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.TemplateMetadata, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.TemplateMetadata()
            value.name = try reader["Name"].readIfPresent()
            value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension SESClientTypes {
    /// Contains information about an email template.
    public struct TemplateMetadata: Swift.Equatable {
        /// The time and date the template was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The name of the template.
        public var name: Swift.String?

        public init(
            createdTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
        }
    }

}

extension TestRenderTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateData = "TemplateData"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateData = templateData {
            try container.encode(templateData, forKey: ClientRuntime.Key("TemplateData"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("TestRenderTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension TestRenderTemplateInput {

    static func urlPathProvider(_ value: TestRenderTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct TestRenderTemplateInput: Swift.Equatable {
    /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    /// This member is required.
    public var templateData: Swift.String?
    /// The name of the template to render.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateData: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateData = templateData
        self.templateName = templateName
    }
}

extension TestRenderTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<TestRenderTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["TestRenderTemplateResult"]
            var value = TestRenderTemplateOutput()
            value.renderedTemplate = try reader["RenderedTemplate"].readIfPresent()
            return value
        }
    }
}

public struct TestRenderTemplateOutput: Swift.Equatable {
    /// The complete MIME message rendered by applying the data in the TemplateData parameter to the template specified in the TemplateName parameter.
    public var renderedTemplate: Swift.String?

    public init(
        renderedTemplate: Swift.String? = nil
    )
    {
        self.renderedTemplate = renderedTemplate
    }
}

enum TestRenderTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidRenderingParameter": return try await InvalidRenderingParameterException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MissingRenderingAttribute": return try await MissingRenderingAttributeException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TemplateDoesNotExist": return try await TemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes {
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "Optional"
            case .require: return "Require"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TlsPolicy(rawValue: rawValue) ?? TlsPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.TrackingOptions: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customRedirectDomain = customRedirectDomain {
            try container.encode(customRedirectDomain, forKey: ClientRuntime.Key("CustomRedirectDomain"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.TrackingOptions, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.TrackingOptions()
            value.customRedirectDomain = try reader["CustomRedirectDomain"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails. For more information, see [Configuring Custom Domains to Handle Open and Click Tracking](https://docs.aws.amazon.com/ses/latest/dg/configure-custom-open-click-domains.html) in the Amazon SES Developer Guide.
    public struct TrackingOptions: Swift.Equatable {
        /// The custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain.
        public var customRedirectDomain: Swift.String?

        public init(
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension TrackingOptionsAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TrackingOptionsAlreadyExistsException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the configuration set you specified already contains a TrackingOptions object.
public struct TrackingOptionsAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that a TrackingOptions object already exists in the specified configuration set.
        public internal(set) var configurationSetName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrackingOptionsAlreadyExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.message = message
    }
}

extension TrackingOptionsDoesNotExistException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TrackingOptionsDoesNotExistException()
        value.properties.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the TrackingOptions object you specified does not exist.
public struct TrackingOptionsDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Indicates that a TrackingOptions object does not exist in the specified configuration set.
        public internal(set) var configurationSetName: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrackingOptionsDoesNotExistException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.configurationSetName = configurationSetName
        self.properties.message = message
    }
}

extension UpdateAccountSendingEnabledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateAccountSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateAccountSendingEnabledInput {

    static func urlPathProvider(_ value: UpdateAccountSendingEnabledInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable the email sending capabilities for your entire Amazon SES account.
public struct UpdateAccountSendingEnabledInput: Swift.Equatable {
    /// Describes whether email sending is enabled or disabled for your Amazon SES account in the current Amazon Web Services Region.
    public var enabled: Swift.Bool?

    public init(
        enabled: Swift.Bool? = nil
    )
    {
        self.enabled = enabled
    }
}

extension UpdateAccountSendingEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateAccountSendingEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateAccountSendingEnabledOutput()
        }
    }
}

public struct UpdateAccountSendingEnabledOutput: Swift.Equatable {

    public init() { }
}

enum UpdateAccountSendingEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestination = "EventDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestination = eventDestination {
            try container.encode(eventDestination, forKey: ClientRuntime.Key("EventDestination"))
        }
        try container.encode("UpdateConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetEventDestinationInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to update the event destination of a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html).
public struct UpdateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The event destination object.
    /// This member is required.
    public var eventDestination: SESClientTypes.EventDestination?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: SESClientTypes.EventDestination? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
    }
}

extension UpdateConfigurationSetEventDestinationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateConfigurationSetEventDestinationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateConfigurationSetEventDestinationOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct UpdateConfigurationSetEventDestinationOutput: Swift.Equatable {

    public init() { }
}

enum UpdateConfigurationSetEventDestinationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EventDestinationDoesNotExist": return try await EventDestinationDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidCloudWatchDestination": return try await InvalidCloudWatchDestinationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidFirehoseDestination": return try await InvalidFirehoseDestinationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSNSDestination": return try await InvalidSNSDestinationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateConfigurationSetReputationMetricsEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetReputationMetricsEnabledInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to modify the reputation metric publishing settings for a configuration set.
public struct UpdateConfigurationSetReputationMetricsEnabledInput: Swift.Equatable {
    /// The name of the configuration set to update.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// Describes whether or not Amazon SES publishes reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
    /// This member is required.
    public var enabled: Swift.Bool?

    public init(
        configurationSetName: Swift.String? = nil,
        enabled: Swift.Bool? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.enabled = enabled
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateConfigurationSetReputationMetricsEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateConfigurationSetReputationMetricsEnabledOutput()
        }
    }
}

public struct UpdateConfigurationSetReputationMetricsEnabledOutput: Swift.Equatable {

    public init() { }
}

enum UpdateConfigurationSetReputationMetricsEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateConfigurationSetSendingEnabledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateConfigurationSetSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetSendingEnabledInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetSendingEnabledInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable the email sending capabilities for a specific configuration set.
public struct UpdateConfigurationSetSendingEnabledInput: Swift.Equatable {
    /// The name of the configuration set to update.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// Describes whether email sending is enabled or disabled for the configuration set.
    /// This member is required.
    public var enabled: Swift.Bool?

    public init(
        configurationSetName: Swift.String? = nil,
        enabled: Swift.Bool? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.enabled = enabled
    }
}

extension UpdateConfigurationSetSendingEnabledOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateConfigurationSetSendingEnabledOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateConfigurationSetSendingEnabledOutput()
        }
    }
}

public struct UpdateConfigurationSetSendingEnabledOutput: Swift.Equatable {

    public init() { }
}

enum UpdateConfigurationSetSendingEnabledOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateConfigurationSetTrackingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case trackingOptions = "TrackingOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let trackingOptions = trackingOptions {
            try container.encode(trackingOptions, forKey: ClientRuntime.Key("TrackingOptions"))
        }
        try container.encode("UpdateConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetTrackingOptionsInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetTrackingOptionsInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to update the tracking options for a configuration set.
public struct UpdateConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails. For more information, see [Configuring Custom Domains to Handle Open and Click Tracking](https://docs.aws.amazon.com/ses/latest/dg/configure-custom-open-click-domains.html) in the Amazon SES Developer Guide.
    /// This member is required.
    public var trackingOptions: SESClientTypes.TrackingOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        trackingOptions: SESClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.trackingOptions = trackingOptions
    }
}

extension UpdateConfigurationSetTrackingOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateConfigurationSetTrackingOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateConfigurationSetTrackingOptionsOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct UpdateConfigurationSetTrackingOptionsOutput: Swift.Equatable {

    public init() { }
}

enum UpdateConfigurationSetTrackingOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConfigurationSetDoesNotExist": return try await ConfigurationSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTrackingOptions": return try await InvalidTrackingOptionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrackingOptionsDoesNotExistException": return try await TrackingOptionsDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateContent = templateContent {
            try container.encode(templateContent, forKey: ClientRuntime.Key("TemplateContent"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
        try container.encode("UpdateCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: UpdateCustomVerificationEmailTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to update an existing custom verification email template.
public struct UpdateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom Verification Email Frequently Asked Questions](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom) in the Amazon SES Developer Guide.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template to update.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    public var templateSubject: Swift.String?

    public init(
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

extension UpdateCustomVerificationEmailTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateCustomVerificationEmailTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateCustomVerificationEmailTemplateOutput()
        }
    }
}

public struct UpdateCustomVerificationEmailTemplateOutput: Swift.Equatable {

    public init() { }
}

enum UpdateCustomVerificationEmailTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomVerificationEmailInvalidContent": return try await CustomVerificationEmailInvalidContentException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomVerificationEmailTemplateDoesNotExist": return try await CustomVerificationEmailTemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "FromEmailAddressNotVerified": return try await FromEmailAddressNotVerifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateReceiptRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule = "Rule"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("UpdateReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateReceiptRuleInput {

    static func urlPathProvider(_ value: UpdateReceiptRuleInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to update a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html).
public struct UpdateReceiptRuleInput: Swift.Equatable {
    /// A data structure that contains the updated receipt rule information.
    /// This member is required.
    public var rule: SESClientTypes.ReceiptRule?
    /// The name of the receipt rule set that the receipt rule belongs to.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init(
        rule: SESClientTypes.ReceiptRule? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.rule = rule
        self.ruleSetName = ruleSetName
    }
}

extension UpdateReceiptRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateReceiptRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateReceiptRuleOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct UpdateReceiptRuleOutput: Swift.Equatable {

    public init() { }
}

enum UpdateReceiptRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidLambdaFunction": return try await InvalidLambdaFunctionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3Configuration": return try await InvalidS3ConfigurationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSnsTopic": return try await InvalidSnsTopicException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceeded": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleDoesNotExist": return try await RuleDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleSetDoesNotExist": return try await RuleSetDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        try container.encode("UpdateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateTemplateInput {

    static func urlPathProvider(_ value: UpdateTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdateTemplateInput: Swift.Equatable {
    /// The content of the email, composed of a subject line and either an HTML part or a text-only part.
    /// This member is required.
    public var template: SESClientTypes.Template?

    public init(
        template: SESClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

extension UpdateTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return UpdateTemplateOutput()
        }
    }
}

public struct UpdateTemplateOutput: Swift.Equatable {

    public init() { }
}

enum UpdateTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTemplate": return try await InvalidTemplateException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TemplateDoesNotExist": return try await TemplateDoesNotExistException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes {
    public enum VerificationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notstarted
        case pending
        case success
        case temporaryfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationStatus] {
            return [
                .failed,
                .notstarted,
                .pending,
                .success,
                .temporaryfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .notstarted: return "NotStarted"
            case .pending: return "Pending"
            case .success: return "Success"
            case .temporaryfailure: return "TemporaryFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerificationStatus(rawValue: rawValue) ?? VerificationStatus.sdkUnknown(rawValue)
        }
    }
}

extension VerifyDomainDkimInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        try container.encode("VerifyDomainDkim", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyDomainDkimInput {

    static func urlPathProvider(_ value: VerifyDomainDkimInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to generate the CNAME records needed to set up Easy DKIM with Amazon SES. For more information about setting up Easy DKIM, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html).
public struct VerifyDomainDkimInput: Swift.Equatable {
    /// The name of the domain to be verified for Easy DKIM signing.
    /// This member is required.
    public var domain: Swift.String?

    public init(
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

extension VerifyDomainDkimOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<VerifyDomainDkimOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["VerifyDomainDkimResult"]
            var value = VerifyDomainDkimOutput()
            value.dkimTokens = try reader["DkimTokens"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// Returns CNAME records that you must publish to the DNS server of your domain to set up Easy DKIM with Amazon SES.
public struct VerifyDomainDkimOutput: Swift.Equatable {
    /// A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address. Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.) For more information about creating DNS records using DKIM tokens, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html).
    /// This member is required.
    public var dkimTokens: [Swift.String]?

    public init(
        dkimTokens: [Swift.String]? = nil
    )
    {
        self.dkimTokens = dkimTokens
    }
}

enum VerifyDomainDkimOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension VerifyDomainIdentityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        try container.encode("VerifyDomainIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyDomainIdentityInput {

    static func urlPathProvider(_ value: VerifyDomainIdentityInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to begin Amazon SES domain verification and to generate the TXT records that you must publish to the DNS server of your domain to complete the verification. For information about domain verification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#verify-domain-procedure).
public struct VerifyDomainIdentityInput: Swift.Equatable {
    /// The domain to be verified.
    /// This member is required.
    public var domain: Swift.String?

    public init(
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

extension VerifyDomainIdentityOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<VerifyDomainIdentityOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["VerifyDomainIdentityResult"]
            var value = VerifyDomainIdentityOutput()
            value.verificationToken = try reader["VerificationToken"].readIfPresent()
            return value
        }
    }
}

/// Returns a TXT record that you must publish to the DNS server of your domain to complete domain verification with Amazon SES.
public struct VerifyDomainIdentityOutput: Swift.Equatable {
    /// A TXT record that you must place in the DNS settings of the domain to complete domain verification with Amazon SES. As Amazon SES searches for the TXT record, the domain's verification status is "Pending". When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, to verify the domain, you must restart the verification process from the beginning. The domain's verification status also changes to "Success" when it is DKIM verified.
    /// This member is required.
    public var verificationToken: Swift.String?

    public init(
        verificationToken: Swift.String? = nil
    )
    {
        self.verificationToken = verificationToken
    }
}

enum VerifyDomainIdentityOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension VerifyEmailAddressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("VerifyEmailAddress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyEmailAddressInput {

    static func urlPathProvider(_ value: VerifyEmailAddressInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to begin email address verification with Amazon SES. For information about email address verification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#verify-email-addresses-procedure).
public struct VerifyEmailAddressInput: Swift.Equatable {
    /// The email address to be verified.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension VerifyEmailAddressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<VerifyEmailAddressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return VerifyEmailAddressOutput()
        }
    }
}

public struct VerifyEmailAddressOutput: Swift.Equatable {

    public init() { }
}

enum VerifyEmailAddressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension VerifyEmailIdentityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("VerifyEmailIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyEmailIdentityInput {

    static func urlPathProvider(_ value: VerifyEmailIdentityInput) -> Swift.String? {
        return "/"
    }
}

/// Represents a request to begin email address verification with Amazon SES. For information about email address verification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#verify-email-addresses-procedure).
public struct VerifyEmailIdentityInput: Swift.Equatable {
    /// The email address to be verified.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension VerifyEmailIdentityOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<VerifyEmailIdentityOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return VerifyEmailIdentityOutput()
        }
    }
}

/// An empty element returned on a successful request.
public struct VerifyEmailIdentityOutput: Swift.Equatable {

    public init() { }
}

enum VerifyEmailIdentityOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SESClientTypes.WorkmailAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationArn = "OrganizationArn"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let organizationArn = organizationArn {
            try container.encode(organizationArn, forKey: ClientRuntime.Key("OrganizationArn"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<SESClientTypes.WorkmailAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = SESClientTypes.WorkmailAction()
            value.topicArn = try reader["TopicArn"].readIfPresent()
            value.organizationArn = try reader["OrganizationArn"].readIfPresent()
            return value
        }
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action calls Amazon WorkMail and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). It usually isn't necessary to set this up manually, because Amazon WorkMail adds the rule automatically during its setup procedure. For information using a receipt rule to call Amazon WorkMail, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-workmail.html).
    public struct WorkmailAction: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon WorkMail organization. Amazon WorkMail ARNs use the following format: arn:aws:workmail:::organization/ You can find the ID of your organization by using the [ListOrganizations](https://docs.aws.amazon.com/workmail/latest/APIReference/API_ListOrganizations.html) operation in Amazon WorkMail. Amazon WorkMail organization IDs begin with "m-", followed by a string of alphanumeric characters. For information about Amazon WorkMail organizations, see the [Amazon WorkMail Administrator Guide](https://docs.aws.amazon.com/workmail/latest/adminguide/organizations_overview.html).
        /// This member is required.
        public var organizationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action is called. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) operation in Amazon SNS. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init(
            organizationArn: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.organizationArn = organizationArn
            self.topicArn = topicArn
        }
    }

}
