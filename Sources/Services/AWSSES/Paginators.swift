// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SESClient {
    /// Paginate over `[ListCustomVerificationEmailTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCustomVerificationEmailTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCustomVerificationEmailTemplatesOutput`
    public func listCustomVerificationEmailTemplatesPaginated(input: ListCustomVerificationEmailTemplatesInput) -> ClientRuntime.PaginatorSequence<ListCustomVerificationEmailTemplatesInput, ListCustomVerificationEmailTemplatesOutput> {
        return ClientRuntime.PaginatorSequence<ListCustomVerificationEmailTemplatesInput, ListCustomVerificationEmailTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listCustomVerificationEmailTemplates(input:))
    }
}

extension ListCustomVerificationEmailTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCustomVerificationEmailTemplatesInput {
        return ListCustomVerificationEmailTemplatesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension SESClient {
    /// Paginate over `[ListIdentitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListIdentitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListIdentitiesOutput`
    public func listIdentitiesPaginated(input: ListIdentitiesInput) -> ClientRuntime.PaginatorSequence<ListIdentitiesInput, ListIdentitiesOutput> {
        return ClientRuntime.PaginatorSequence<ListIdentitiesInput, ListIdentitiesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listIdentities(input:))
    }
}

extension ListIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListIdentitiesInput {
        return ListIdentitiesInput(
            identityType: self.identityType,
            maxItems: self.maxItems,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListIdentitiesInput, OperationStackOutput == ListIdentitiesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listIdentitiesPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func identities() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.identities }
    }
}
